{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012454000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3703518, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE615.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3703518, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3703518, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE615.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x009\\x06'", "DS1TRBAL": "b't\\xe0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x83\\x00\\t\\x04\\x87\\x00\\x06\\x00:'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00Q\\x01\\x18\\x08\\x1f\\x01\\x18\\x08\\x1f\\x08A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-03-22T00:00:00", "modifydate": "2018-03-22T08:41:51", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  615\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE615\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 34,853 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/22/18    08:41:51    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x01 \\x06\\x01\\x18\\x08\\x1f\\x01\\x18\\x08\\x1f\\x08A\\x00\\x11\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.01", "flags": 32, "createdate": "2018-03-22T00:00:00", "modifydate": "2018-03-22T08:41:06", "lines": 17, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  File 615\nFrom:     \"Dyck, Lionel B. (TRA)\" <Lionel.Dyck@va.gov>\nDate:     3/22/2018 7:30 AM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nWhile I may have contributed these to the CBT Tape they didn't\ncome from me originally.\u00a0 I don't recall where I found them but I\ndid (could have been the Guide ISPF tools tape).\n\nI'd rather not take credit other than for just sending them to\nyou to share.\n\nThank you\nLionel B. Dyck (Contractor)\n\nNote from Sam Golob:  Lionel, you did modify some of them.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE615": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00D\\x01\\x18\\x08\\x1f\\x01\\x18\\x08\\x1f\\x08A\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-03-22T00:00:00", "modifydate": "2018-03-22T08:41:44", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 615 was sent in by Lionel Dyck (see member $$NOTE01)      *   FILE 615\n//*           and contains two macro libraries, to help Assembler   *   FILE 615\n//*           programmers in different areas.                       *   FILE 615\n//*                                                                 *   FILE 615\n//*           The DYNALLOC member expands to a pds which contains   *   FILE 615\n//*           macros that are helpful in coding dynamic allocation  *   FILE 615\n//*           within Assembler programs.  The ISPFDYN member is     *   FILE 615\n//*           a macro library containing ISPF dialog manipulation   *   FILE 615\n//*           macros for Assembler programs.                        *   FILE 615\n//*                                                                 *   FILE 615\n//*           Lionel wishes to acknowledge the creator(s) of this   *   FILE 615\n//*           material, whomever they may be.                       *   FILE 615\n//*                                                                 *   FILE 615\n//*           Some or all of this material may possibly be          *   FILE 615\n//*           included in Lionel's large collection of files        *   FILE 615\n//*           on the CBT Overflow Tape (Files 016 thru 037).        *   FILE 615\n//*           But they have been included here because of their     *   FILE 615\n//*           potential usefulness to Assembler programmers.        *   FILE 615\n//*                                                                 *   FILE 615\n//*           email:   lbdyck@gmail.com                             *   FILE 615\n//*                                                                 *   FILE 615\n//*           email:   sbgolob@cbttape.org                          *   FILE 615\n//*                                                                 *   FILE 615\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DYNALLOC": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"%\\x15I\\x15I\\x00\\x00\\xd4\\xc1\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:25:00", "lines": 5449, "newlines": 5449, "modlines": 0, "user": "MACLIB"}, "text": "./ ADD NAME=$DOC     0100-03065-03065-2223-00179-00179-00000-DYNALLC\n\n  DYNAMIC ALLOCATION MACROS\n\n\n  MACROS (ALLOC FREE)\n\n  NAME     ALLOC DUMMY,PERM,DSN=,DDN=,DDNRET=,MEMBER=,DISP=,\n                 WAITDSN=NO,WAITUNIT=NO,WAITVOL=NO,\n                 VOL=,UNIT=,SYSOUT=,FREE=,COPIES=,LABEL=,\n                 BLKSIZE=,DEN=,DSORG=,KEYLEN=,LRECL=,RECFM=,\n                 PASWORD=,DSNRET=,MF=AUTO,PREFIX=,ERROR=,\n                 SPACE=,F=,FILE=,DA=,QNAME=,DSORGRT=,\n                 VOLRET=,DCBDSN=,DCBDDN=,SPECIAL=,DDNTO=,\n                 FCB=,\n                 DEFER=,UNITCNT=,\n                 FORMS=,DEST=,SSREQ=,FORUSER=,TU=,DSNPDE=\n\n\n  NAME     FREE  UNALC,DSN=,DDN=,MEMBER=,DISP=,SYSOUT=,\n                 ERROR=,MF=AUTO,PREFIX=,FILE=,F=,DA=,HOLD=\n\n\n  NAME     DYNSPACE TYPE\n\n\n  DOCUMENTATION\n\n  This  macro provides a dynamic allocation function by build-\n  ing a dynamic allocation parameter list and invoking SVC 99.\n\n  It first sets up a workarea environment  for  the  parameter\n  list  and then tests the keywords supplied and invokes inner\n  macros to build the text units. The inner macros  themselves\n  use inner macros to update global variables, store text unit\n  pointers  etc  there  are  three ways of specifying the work\n  area address.\n\n  A) MF=AUTO, MF=G, MF=(E,address,lnthsymb).\n  In the first form, an inner macro DYNSPACE is called to name\n  a work area, the name being returned in the global SETC var-\n  iable &DYNSP. A DSECT is created to  map  this  area.    The\n  global variables &dtuo (text unit offset counter) and &DTUPO\n  (text  unit  pointer  offset  accumulator)  are set to zero.\n  These accumulators are updated as each text  unit  processor\n  aquires  storage.  After all text units have been built, the\n  amount of space used is calculated, and the  DYNSPACE  macro\n  is then called again to log the amount needed. DYNSPACE Sets\n  a global variable &DYNSPQ to the highest amount any ALLOC or\n  FREE  macro  requested,  and when called with the expand op-\n  tion, (no operands or name field supplied), expands  into  a\n  ds for that quantity. (See DYNSPACE)\n\n  MF=G  specifies  that  the ALLOC macro enter the begin macro\n  workarea to acquire the storage necessary. It does this  via\n  the RCPDS macro. (See RCPDS). However, if the ALLOC macro is\n  called several times with this option, a lot of storage will\n  be  used  up,  as the storage will not be shared. Thus, this\n  form should only be used if the ALLOC/FREE macro is only  to\n  be used once or twice during an assembly.\n\n  MF=E causes the macro to use a user specified work area. The\n  second  parameter gives the name of the workarea, and an op-\n  tional third parameter is the name of a symbol to be equated\n  to the length of the required work area.\n\n  Dynamic allocation functions are similar to those  available\n  with  JCL, using the same keywords. However, certain formats\n  are slightly different. For instance, certain  keywords  can\n  have  varying  parameters,  eg  dataset name, DDNAME, VOLSER\n  etc.  Provision is made for both variable specification.  In\n  the absolute form, the parameter is entered in quotes,\n  ex.    ALLOC DSN='SYS1.LINKLIB',DISP=SHR\n  however, this name remains fixed for the assembly.   In  the\n  variable  format,  the  address  of  a locator is specified,\n  where the locator consists of a six byte field, the first  4\n  bytes  of  which  point to the parameter, while the next two\n  contain the length.\n\n  ex.         ALLOC DSN=LOCATOR\n     LOCATOR  DC    A(dsn),Y(12)\n     DSN      DC    C'SYS1.LINKLIB'\n\n  Numeric quantities e.g. COPIES= for  sysout,  should  either\n  specify  a  numeric  value, COPIES=3, a value in a register,\n  COPIES=(r3), or the  name  off  a  fullword  containing  the\n  value,  COPIES=numcopys,  where  numcopys  is  the name of a\n  fullword field.\n\n  Other keywords such as DISP=  can  only  have  the  absolute\n  form, and values should not be entered within quotes.  Addi-\n  tional  facilities  not available with JCL are the return by\n  the system of information on the dataset, eg DSORG. This  is\n  done  by specifying DSORGRT=symbol, where symbol is a symbol\n  which will be equated to a two  byte  field  containing  the\n  DSORG type (see Job Management, Supervisor and TSO).\n\n  The  system  can  also generate and return a DDNAME. This is\n  carried out  by  entering  DDNTO=(addr1,addr2,,...)    Where\n  addr1,addr2  etc are the names of 8 byte fields which are to\n  receive the DDNAME.\n\n  Note that WAITDSN=YES, WAITVOL=YES or  WAITUNIT=YES  require\n  that  the  program  be  APF authorized, or in Key 0-7, or in\n  supervisor state.\n\n  For  further information on dynamic allocation, see Job Man-\n  agement, Supervisor and TSO SPL's.\n\n\n  DYNSPACE\n\n  This is an inner macro to ALLOC/FREE.  It is called to:\n\n  1.  Log the various amounts needed by each, remembering  the\n      largest.\n\n  2.  Generating a DS for the largest amount.\n\n  The  first  two  functions  are invoked by ALLOC/FREE macros\n  only, and the third is used by the  programmer,  either  ex-\n  plicitly, or by BEGINWKA, if the latter is used.\n\n  To invoke the naming function, ALLOC/FREE generate:\n\n  name DYNSPACE\n\n  Note.  The  naming  operation  only  generates a name on the\n  first call in the assembly. The name remains the same  until\n  DYNSPACE is called to expand into a DS.\n\n  The second function is invoked by the macro call\n       DYNSPACE ADD\n\n  (no name field and one operand) it uses the global variables\n  &dtuo  and  &DTUPO  to calculate the space for this request,\n  and updates &DYNSPQ only if the current  request  is  for  a\n  greater amount\n\n  The  third  function  is invoked by calling DYNSPACE with no\n  name or operand field.\n\n  This expands into a define storage, clears the DYNSPACE name\n  global SETC, and the &DYNSPQ GLOBAL SETA.   Thus, the  macro\n  is serially reusable in all functions.\n\n  S99FAIL\n\n  S99FAIL  macro  will  invoke the dynamic allocation (SVC 99)\n  error message display routine.\n\n\n  EXAMPLES\n\n           ALLOC DUMMY,DDN=DDNAME\n           ALLOC DDN=DDNAME,DSN=DSNAME,DISP=SHR\n           FREE  DDN=DDNAME\n           ALLOC DDN=DDNAME,UNIT=UNITADDR\n           S99FAIL\n\n           data areas\n\n           DYNSPACE\n                    SPACE\n           UNITADDR DC    A(UNIT)\n           UNITL    DC    Y(3)\n           UNIT     DC    CL3' '\n                    SPACE\n           DDNAME   DC    A(DDN)\n           DDNL     DC    Y(8)\n           DDN      DC    CL8' '\n                    SPACE\n           DSNAME   DC    A(DSN)\n           DSNL     DC    Y(44)\n           DSN      DC    CL44' '\n\n         These are required as mapping for the above macros:\n\n           IEFZB4D0\n           IEFZB4D2\n./ ADD NAME=ALLOC    0100-03065-03065-2223-00340-00340-00000-DYNALLC\n         MACRO\n&NAME    ALLOC &DUMMY,&PERM,                                           X\n               &WAITDSN=NO,&WAITVOL=NO,&WAITUNIT=NO,                   X\n               &DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,                   X\n               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X\n               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X\n               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X\n               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X\n               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,&TERM=,    X\n               &FCB=,                                                  X\n               &CHARS=,                                     *LBD 11/88*X\n               &DEFER=,                                    *LBD 03/86* X\n               &UNITCNT=,                                  *LBD 06/86* X\n               &OUTDES=,                                    *LBD 11/88*X\n               &MGMTCLAS=,                                 *LBD-08MAY96X\n               &STORCLAS=,                                 *LBD-08MAY96X\n               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=,&MSVGP=\n.**********************************************************************\n.*                                                                    *\n.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *\n.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *\n.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *\n.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *\n.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *\n.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *\n.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *\n.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *\n.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *\n.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *\n.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *\n.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *\n.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *\n.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *\n.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *\n.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *\n.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *\n.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *\n.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *\n.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *\n.*    THAT QUANTITY. (SEE DYNSPACE)                                   *\n.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *\n.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *\n.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *\n.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *\n.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *\n.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *\n.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *\n.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *\n.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *\n.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *\n.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *\n.*                                                                    *\n.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *\n.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *\n.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *\n.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *\n.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *\n.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *\n.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *\n.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *\n.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *\n.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *\n.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *\n.*    CONTAIN THE LENGTH.                                            *\n.*    EG          ALLOC DSN=LOCATOR                                  *\n.*       LOCATOR  DC    A(DSN),Y(12)                                 *\n.*       DSN      DC    C'SYS1.LINKLIB'                              *\n.*                                                                   *\n.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *\n.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *\n.*       A VALUE IN A REGISTER, COPIES=(R3),                         *\n.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *\n.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *\n.*       FULLWORD FIELD.                                             *\n.*                                                                   *\n.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *\n.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *\n.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *\n.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *\n.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *\n.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *\n.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *\n.*       SUPERVISOR AND TSO).                                        *\n.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *\n.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *\n.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *\n.*       ARE TO RECEIVE THE DDNAME.                                  *\n.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *\n.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *\n.*                                                                   *\n.**********************************************************************\n.*  MODIFIED 08/25/82 TO ADD MSVGP SUPPORT .                         *\n.*  MODIFIED 09/10/82 TO ADD TERM  SUPPORT .                         *\n.*  MODIFIED 10/27/83 TO:                                            *\n.*             ADD WAITVOL TO WAIT FOR VOLUME TO BE MOUNTED.         *\n.*             ADD WAITDSN TO WAIT FOR DSN TO BECOME AVAILABLE.      *\n.*             ADD WAITUNIT TO WAIT FOR UNIT TO BECOME AVAILABLE.    *\n.*             **  THESE THREE OPTIONS ARE VALID ONLY IF THE USER    *\n.*             **  IS AN AUTHORIZED PROGRAM                          *\n.*                   LIONEL DYCK/ROCKWELL INT'L  (213) 594-1647      *\n.* MODIFIED 03/31/86 TO ADD DEFER SUPPORT.                 *LBD 03/86*\n.*                   LIONEL DYCK/ROCKWELL INT'L  (213) 594-1125      *\n.**********************************************************************\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS\n         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS\n         LCLA  &I                 COUNTER\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n.*\n.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         AIF   ('&WAITDSN' EQ 'NO').NWD\n         OI    S99FLG21,S99WTDSN       SET WAIT FOR DSN FLAG\n.NWD     AIF   ('&WAITVOL' EQ 'NO').NWV\n         OI    S99FLG21,S99WTVOL       SET WAIT FOR VOLUME\n.NWV     AIF   ('&WAITUNIT' EQ 'NO').NWU\n         OI    S99FLG21,S99WTUNT       SET WAIT FOR UNIT\n.NWU     ANOP\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&SSREQ' EQ 'YES').SSREQ\n.TDSN    AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&DSNPDE' NE '').DSNPDE\n         AIF   ('&DSNRET' NE '').DSNRT\n         AIF   ('&SYSOUT' NE '').SYSOUT\n         AIF   ('&DUMMY' NE '').DUMMY\n         AIF   ('&QNAME' NE '').QNAME\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n         AIF   ('&DDNRET&DDNTO' NE '').DDNRT\n.TMCLAS  AIF   ('&MGMTCLAS' NE '').MCLAS                   *LBD-08MAY96\n.TSCLAS  AIF   ('&STORCLAS' NE '').SCLAS                   *LBD-08MAY96\n.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT\n.TDEFER  AIF   ('&DEFER' EQ 'YES').DEFER                   *LBD 03/86*\n.TVOLRET AIF   ('&VOLRET' NE '').VOLRET\n.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT\n.TLABEL  AIF   ('&LABEL' NE '').LABEL\n.TPSWD   AIF   ('&PASWORD' NE '').PASWORD\n.TFORUSE AIF   ('&FORUSER' NE '').FORUSER\n.TTU     AIF   ('&TU' NE '').TU\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TSPACE  AIF   ('&SPACE' NE '').SPACE\n.TLRECL  AIF   ('&LRECL' NE '').DCB\n         AIF   ('&DEN' NE '').DCB\n         AIF   ('&RECFM' NE '').DCB\n         AIF   ('&BLKSIZE' NE '').DCB\n         AIF   ('&DSORG' NE '').DCB\n         AIF   ('&KEYLEN' NE '').DCB\n.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN\n.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN\n.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343\n.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM\n         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM\n.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL\n.TMSVGP  AIF   ('&MSVGP' NE '').MSVGP\n.TTERM   AIF   ('&TERM' NE '').TERM\n         AGO   .SVC99\n.MCLAS   RCPMCLAS &MGMTCLAS                                *LBD-08MAY96\n         AGO   .TSCLAS                                     *LBD-08MAY96\n.SCLAS   RCPSCLAS &STORCLAS                                *LBD-08MAY96\n         AGO   .TUNIT                                      *LBD-08MAY96\n.TERM    RCPTERM\n         AGO   .SVC99\n.SSREQ   RCPSSREQ\n         AGO   .TDSN\n.DSN     RCPDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.DSNPDE  RCPDSNPD &DSNPDE\n         AGO   .TDDN\n.DSNRT   RCPDSNRT &DSNRET\n&DSNRTO  SETA  &DTUO-46\n         AGO   .TDDN\n.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X\n               FORMS=&FORMS,FCB=&FCB,CHARS=&CHARS,OUTDES=&OUTDES\n         AGO   .TDDN\n.DUMMY   RCPDUMMY &DUMMY\n         AGO   .TDDN\n.QNAME   RCPQNAME &QNAME\n         AGO   .TDDN\n.DDN     RCPDDN &DDN&F&FILE\n         AGO   .TMCLAS\n.DDNRT   RCPDDNRT &DDNRET\n&DDNRTO  SETA  &DTUO-10\n         AGO   .TUNIT\n.UNIT   RCPUNIT &UNIT,&VOL\n         AIF   ('&UNITCNT' EQ '').TDEFER                   *LBD 06/86*\n         RCPUNITC &UNITCNT                                 *LBD 06/86*\n         AGO   .TDEFER                                     *LBD 03/86*\n*        AGO   .TVOLRET\n.DEFER   RCPDEFER                                          *LBD 03/86*\n         AGO   .TVOLRET                                    *LBD 03/86*\n.VOLRET  RCPVOLRT &VOLRET\n&VOLRTO  SETA  &DTUO-8\n         AGO   .TDSRGO\n.DSORGRT RCPDSRGR\n&DSRGRTO SETA  &DTUO-2\n         AGO   .TLABEL\n.LABEL   RCPLABEL &LABEL\n         AGO   .TPSWD\n.PASWORD RCPPSWD &PASWORD\n         AGO   .TFORUSE\n.FORUSER RCPFORUS &FORUSER\n         AGO   .TTU\n.TU      RCPTU &TU\n         AGO   .TDISP\n.DISP    RCPDISP &DISP\n         AGO   .TSPACE\n.SPACE   RCPSPACE &SPACE\n         AGO   .TLRECL\n.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X\n               DSORG=&DSORG,KEYLEN=&KEYLEN\n         AGO .TDCBDSN\n.DCBDSN  RCPDCBDS &DCBDSN\n         AGO .TDCBDDN\n.DCBDDN  RCPDCBDD &DCBDDN\n         AGO .TFREE                                              TE7343\n.FREE    RCPFREE  &FREE                                          TE7343\n         AGO   .TPERM\n.PERM    RCPPERM\n         AGO   .TSPECI\n.MSVGP   RCPMSVGP &MSVGP\n         AGO   .SVC99\n.SPECIAL RCPSPEC &SPECIAL\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n.DYNA    DYNALLOC\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **\n.LTR     AIF   ('&ERROR' EQ '').TDDTO\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE\n&I       SETA  0\n.DDNTOL  ANOP\n&I       SETA  &I+1\n         AIF   ('&DDNTO(&I)' EQ '').RESERVE\n         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR\n         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.DDNTOR  ANOP\n&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)\n         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE 1\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU21\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AIF   (&DSNRTO EQ 0).TDDNRTO\n&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN\n.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11\n&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME\n.DTU11   AIF   (&VOLRTO EQ 0).DTU12\n&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER\n.DTU12   AIF   (&DSRGRTO EQ 0).DTU10\n&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG\n         AGO   .DTU10\n.DTU21   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n./ ADD NAME=CONCAT   0100-03065-03065-2223-00060-00060-00000-DYNALLC\n         MACRO\n         CONCAT &POSIT,&TYPE=,&EXIT=\n         GBLA  &CONCATN,&CONCATX\n         GBLB  &CONCATB,&CONCATD,&DDDFAIL,&DDDD\n         AIF   (&DDDD).ERRDDDD\n         AIF   ('&POSIT' EQ 'E').ENDCONC\n         AIF   ('&POSIT' NE 'B').ERRPARM\n         AIF   ('&TYPE&EXIT' EQ '').CONCB\n         MNOTE 4,'TYPE AND EXIT IGNORED ON CONCAT B'\n.CONCB   AIF   (&CONCATB).ERRB\n&CONCATB SETB  1\n&CONCATX SETA  4              INITIAL DISPLACEMENT INTO DDNAME LIST\n*\n         MNOTE *,'*   BEGIN CONCATENATION'\n*\n         MEXIT\n.ENDCONC AIF   (NOT &CONCATB).ERRE\n&CONCATB SETB  0\n&CONCATD SETB  0\n&CONCATX SETA  &CONCATX/10             INITIAL 4 WILL ROUND TO 0\n         AIF   (&CONCATN GE &CONCATX).CONCT\n&CONCATN SETA  &CONCATX\n.CONCT   AIF   (&CONCATX LE 1).ERRNUMB\n         MVC   ALOCONCA(4),=Y(X'01',&CONCATX) CODE, NUMBER OF DDNAMES\n         LA    14,ALOCONCA             ADDRESS OF CONCATENATION TU\n         AIF   ('&TYPE' EQ '' OR '&TYPE' EQ 'PERM').PERM\n         AIF   ('&TYPE' NE 'TEMP').ERRTYPE\n         ST    14,ALOBLOCK+20\n         OI    ALOBLOCK+20,X'80'       SET END OF TU ADDR LIST\n         AGO   .CONCA\n.PERM    MVC   ALOBLOCK-8(4),=Y(X'04',0) PERMANENTLY CONCATENATED\n         LA    15,ALOBLOCK-8\n         STM   14,15,ALOBLOCK+20\n         OI    ALOBLOCK+24,X'80'       SET END OF TU ADDR LIST\n.CONCA   LA    0,X'0320'               DYNAMIC CONCATENATION\n         AIF   ('&EXIT' EQ '').EXITDEF\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n         AGO   .BALDDDD\n.EXITDEF LA    15,ALODDERR             LOAD ERROR EXIT RTN ADDRESS\n&DDDFAIL SETB  1                       IN-LINE EXIT NEEDED\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n*\n         MNOTE *,'*   END CONCATENTATION OF &CONCATX DDNAMES'\n*\n         MEXIT\n.ERRDDDD MNOTE 12,'CONCAT MAY NOT BE ISSUED AFTER DDDD'\n         MEXIT\n.ERRB    MNOTE 12,'CONCAT E  MUST BE ISSUED BEFORE RE-ISSUING CONCAT B'\n         MEXIT\n.ERRE    MNOTE 12,'CONCAT E  MAY BE ISSUED ONLY AFTER CONCAT B'\n         MEXIT\n.ERRNUMB MNOTE 12,'AT LEAST 2 DD''S MUST BE CONCATENATED'\n         MEXIT\n.ERRTYPE MNOTE 8,'INVALID TYPE, &TYPE.. IGNORED'\n         AGO   .PERM\n.ERRPARM MNOTE 12,'INVALID POSITIONAL PARAMETER. SPECIFY B OR E'\n         MEND\n./ ADD NAME=DAPL     0100-03065-03065-2223-00022-00022-00000-DYNALLC\n         MACRO\n&X       DAPL  &Y,&DSECT=NO\n***********************************************************************\n*                                                                     *\n*            DYNAMIC   ALLOCATION   PARAMETER   LIST                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         AIF   ('&DSECT' NE 'NO').DSECT\nDAPL     DS    0A .                     DAIR PARM LIST\n         AGO   .COM\n.DSECT   ANOP\nDAPL     DSECT ,                        DAIR PARM LIST\n.COM     ANOP\nDAPLUPT  DC    A(0) .                   USER PROF. TAB\nDAPLECT  DC    A(0) .                   ENV. CTL TAB\nDAPLECB  DC    A(0) .                   ECB\nDAPLPSCB DC    A(0) .                   PROT STEP CB\nDAPLDAPB DC    A(0) .                   DAIR PARM BLOCK\nDAPLLEN  EQU   *-DAPL .                 LENGTH\n         SPACE 2\n         MEND\n./ ADD NAME=DDD      0100-03065-03065-2223-00105-00105-00000-DYNALLC\n         MACRO\n&DDNAME  DDD   &DUMMY,&DSN=,&DSNAME=,&DISP=,&TERM=,&FREE=END,          *\n               &UNIT=,&SPACE=,&MSVGP=,&VOL=,&VOLUME=,&LABEL=,&PROTECT=,*\n               &DCB=,&SUBSYS=,                                         *\n               &SYSOUT=,&DEST=,&HOLD=,&COPIES=,&OUTLIM=,&FCB=,&UCS=,   *\n               &BURST=,&CHARS=,&FLASH=,&MODIFY=,                       *\n               &KEYADDS=,&TYPE=PERM,&MOUNT=NO,&EXIT=ALODDERR\n         GBLA  &X,&Y,&H,&N,&CONCATX,&R\n         GBLB  &CONCATB,&CONCATD,&DDDFAIL,&DDDD\n         LCLA  &A\n         LCLC  &C,&D\n         AIF   (&DDDD).ERRDDDD\n&X       SETA  20 DISPLACEMENT FROM ALOBLOCK TO FIRST TEXT UNIT POINTER\n&Y       SETA  20         NEGATIVE DISTANCE FROM ALOBLOCK TO FIRST DATA\n&R       SETA  14                      FIRST REGISTER LOADED\n         DDD5  &DDNAME,&DSN,&DSNAME,&DISP\n         AIF   ('&TERM' EQ '').TERMX\n         AIF   ('&TERM' NE 'TS').ERRTERM\n         DDD0  =Y(X'28',0),,,,'TERM=TS'\n.TERMX   AIF   ('&FREE' EQ 'END').FREEX\n         AIF   ('&FREE' NE 'CLOSE').ERRFREE\n         DDD0  =Y(X'1C',0),,,,'FREE=CLOSE'\n.FREEX   AIF   ('&UNIT&SPACE&MSVGP' EQ '').DDD1X\n         DDD1  &UNIT,&SPACE,&MSVGP\n.DDD1X   AIF   ('&VOL&VOLUME&LABEL&PROTECT' EQ '').DDD2X\n         AIF   ('&VOLUME' EQ '').DDD2V\n         AIF   ('&VOL' NE '').ERRVOL\n         DDD2  &VOLUME,&LABEL,&PROTECT\n         AGO   .DDD2X\n.DDD2V   DDD2  &VOL,&LABEL,&PROTECT\n.DDD2X   AIF   ('&DUMMY&DCB&SUBSYS' EQ '').DDD3X\n         DDD3  &DUMMY,&DCB,&SUBSYS\n.DDD3X   AIF   ('&SYSOUT&DEST&HOLD&COPIES&OUTLIM&FCB&UCS' EQ '' AND    *\n               '&BURST&CHARS&FLASH&MODIFY' EQ '').DDD4X\n         DDD4  &SYSOUT,&DEST,&HOLD,&COPIES,&OUTLIM,&FCB,&UCS,          *\n               &BURST,&CHARS,&FLASH,&MODIFY\n.DDD4X   AIF   ('&KEYADDS' EQ '').KEYADDX\n&A       SETA  0\n.KEYLOOP AIF   (&A GE N'&KEYADDS).KEYADDX\n&A       SETA  &A+1\n&C       SETC  '&KEYADDS(&A)'\n         AIF   ('&C' EQ '').KEYLOOP\n         AIF   ('&C'(1,1) EQ '(').KEYADDR\n         DDD0  &C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDR DDD0  0&C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDX AIF   ('&TYPE' EQ 'PERM').TYPEP\n         AIF   ('&TYPE' EQ 'TEMP').TYPEX\n         AIF   ('&TYPE' NE 'CNVRT').ERRTYPE\n         DDD0  =Y(X'53',0),,,,'TYPE=CNVRT  CONVERTIBLE'\n.TYPEP   DDD0  =Y(X'52',0),,,,'PERMANENTLY ALLOCATED'\n.TYPEX   AIF   (&R NE 14).R14X\n&X       SETA  &X-4\n         AGO   .RX\n.R14X    AIF   (&R NE 15).R15X\n         ST    14,ALOBLOCK+&X\n         AGO   .RX\n.R15X    AIF   (&R NE 0).R0X\n         STM   14,15,ALOBLOCK+&X\n&X       SETA  &X+4\n         AGO   .RX\n.R0X     STM   14,0,ALOBLOCK+&X\n&X       SETA  &X+8\n.RX      OI    ALOBLOCK+&X,X'80'        SET END OF TEXT UNIT ADDR LIST\n&C       SETC  'X''0100''+X''0020'''   ALLOC, NOMOUNT\n         AIF   ('&MOUNT' EQ 'NO').MOUNTX\n         AIF   ('&MOUNT' NE 'YES').ERRMOUN\n&C       SETC  'X''0100'''             ALLOC\n.MOUNTX  AIF   (NOT &CONCATD).CONCADX\n&C       SETC  '&C+X''0080'''          DON'T USE EXISTING UNLESS CNVRT\n.CONCADX LA    0,&C                    LOAD VERB, FLAGS1\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n&DDDFAIL SETB  ('&EXIT' EQ 'ALODDERR' OR &DDDFAIL)\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n         SPACE 1\n         AIF   (NOT &CONCATB).CONCX\n&CONCATD SETB  1\n         MVC   ALOCONCA+&CONCATX.(10),ALORTDDN+4 SAVE DDNAME FOR CONCAT\n&CONCATX SETA  &CONCATX+1\n         MVI   ALOCONCA+&CONCATX,8     SET LENGTH TO 8 FOR SPACING\n&CONCATX SETA  &CONCATX+9\n         SPACE 1\n.CONCX   AIF   (&H GE &Y).HX\n&H       SETA  &Y\n.HX      AIF   (&N GE &X).MEXIT\n&N       SETA  &X\n.MEXIT   MEXIT\n.ERRDDDD MNOTE 12,'DDD MAY NOT BE ISSUED AFTER DDDD'\n         MEXIT\n.ERRFREE MNOTE 8,'FREE=&FREE INVALID. FREE=END ASSUMED.'\n         AGO   .FREEX\n.ERRVOL  MNOTE 12,'BOTH VOL= AND VOLUME= SPECIFIED. VOLUME=&VOLUME IGNO*\n               RED.'\n         AGO   .DDD2V\n.ERRTERM MNOTE 8,'INVALID VALUE, TERM=&TERM.. IGNORED.'\n         AGO   .TERMX\n.ERRTYPE MNOTE 8,'TYPE=&TYPE INVALID. TYPE IGNORED.'\n         AGO   .TYPEP\n.ERRMOUN MNOTE 8,'MOUNT=&MOUNT INVALID. IGNORED.'\n         AGO   .MOUNTX\n         MEND\n./ ADD NAME=DDDD     0100-03065-03065-2223-00069-00069-00000-DYNALLC\n         MACRO\n         DDDD  &ROLE\n         GBLA  &H,&N,&CONCATN\n         GBLB  &RTDDN,&FREEB,&DDDFAIL,&DDDD\n&DDDD    SETB  1\n         AIF   ('&ROLE' EQ 'STORAGE').CODEX\n         DC    Y(X'8032'-X'10000')     CONTROL BITS FOR DAIRFAIL\nALOROUT  STCM  0,B'0011',ALOBLOCK+1    SET VERB AND FLAGS1\n         AIF   ('&ROLE' EQ '').COMMON\n         AIF   ('&ROLE' NE 'CODE').ERRROLE\n         MVI   ALOBLOCK,20             SET BLOCK LENGTH = 20\n         XC    ALOBLOCK+3(17),ALOBLOCK+3  PRESET BLOCK TO ZEROS\n         LA    0,ALOBLOCK+20           POINTER TO TEXT UNIT ADDRESSES\n         ST    0,ALOBLOCK+8            SET INTO BLOCK\n         LA    0,ALOBLOCK              ADDRESS OF REQUEST BLOCK\n         ST    0,ALOBLOCK-20           POINTER FOR SVC\n         OI    ALOBLOCK-20,X'80'       SET END OF POINTER\n.COMMON  LA    1,ALOBLOCK-20           POINT TO POINTER\n         STM   14,1,12(13)             SAVE REGS IN CASE OF ERROR\n         DYNALLOC ,                    DYNALLOC SVC\n         LTR   15,15                   IF RETURN CODE IS ZERO,\n         BZR   14                      RETURN TO MAINSTREAM\n         ST    15,20(,13)              SAVE RETURN CODE IN REG 0 AREA\n         LM    15,1,16(13)             LOAD EXIT ADDR, RC, AND POINTER\n         ST    0,ALOBLOCK-4            RETURN CODE FOR DAIRFAIL\n         BR    15                      GO TO EXIT RTN\n         AIF   (NOT &DDDFAIL).EXITX\nALODDERR DS    0H\n         AIF   (NOT &FREEB).FREEX\n         CLC   ALOBLOCK+4(2),=X'0438'  \"NOT FREED, IS NOT ALLOCATED\"\n         BER   14                      IS A PERMISSABLE ERROR\n         CLC   ALOBLOCK+4(2),=X'0440'  \"NOT FREED, IS NOT ALLOCATED\"\n         BER   14                      IS A PERMISSABLE ERROR\n.FREEX   ANOP\nALODFAIL DS    0H\n         L     15,16                   ADDRESS CVT\n         AIF   ('&ROLE' EQ '').PARAMX\n         LA    14,ALOBLOCK-4           RETURN CODE IN FULLWORD\n         LA    15,976(,15)             CVTEFF02 POINTS TO IKJEFF02\n         LA    0,ALOROUT-2             BITS TO CONTROL IKJEFF18\n         STM   14,0,ALOBLOCK-20+4\n         AGO   .STOREX\n.PARAMX  LA    15,976(,15)             CVTEFF02 POINTS TO IKJEFF02\n         ST    15,ALOBLOCK-20+8\n.STOREX  LINK  EP=IKJEFF18,            INVOKE DAIRFAIL TO ISSUE WTP    *\n               MF=(E,ALOBLOCK-20)\n         L     1,=A(X'80000000'+99)    ABEND CODE IS USER 99,DUMP\n         ABEND (1)                     ABEND\n.EXITX   AIF   ('&ROLE' EQ 'CODE').MEXIT\n.CODEX   ANOP\n&H       SETA  &H/2-2\n         DS    &H.H                    SPACE FOR SOME TEXT UNITS\n         DC    A(*-X'7FFFFFEC')        ADDRESS OF ALOBLOCK\n         DC    A(ALOBLOCK-4)           ADDRESS OF SVC RC FOR DAIRFAIL\n         DC    A(0)                    ADDRESS OF FULLWORD -> IKJEFF02\n         DC    A(ALOROUT-2)        ADDRESS OF CONTROL BITS FOR DAIRFAIL\n         DS    F                   RETURN CODE FROM SVC 99 FOR DAIRFAIL\nALOBLOCK DC    X'14002000'             LENGTH, VERB, FLAGS1\n         DC    A(0,*+12,0,0)   ERROR CODES, TU LIST ADDR, RESV, FLAGS2\n&N       SETA  &N/4-4\n         DS    &N.A                    TU ADDRESS LIST\n         AIF   (NOT &RTDDN).ARTDDNX\nALORTDDN DC    Y(X'55',1,8),CL8' '     TU FOR RETURN OF DDNAME\nDDDNAME  EQU   ALORTDDN+6,8,C'C'\n.ARTDDNX AIF   (&CONCATN EQ 0).MEXIT\nALOCONCA DC    Y(1,0),&CONCATN.XL10'0' TU FOR DDNAMES TO CONCATENATE\n.MEXIT   MEXIT\n.ERRROLE MNOTE 12,'&ROLE IS INVALID. USE CODE OR STORAGE.'\n         MEND\n./ ADD NAME=DDDMSG   0100-03065-03065-2223-00006-00006-00000-DYNALLC\n         MACRO\n         DDDMSG\n         LINK  EP=IKJEFF18,            INVOKE DAIRFAIL TO ISSUE WTP    *\n               PARAM=(,ALOBLOCK-4,=F'0',ALOROUT-2),                    *\n               MF=(E,ALOBLOCK-20)\n         MEND\n./ ADD NAME=DDDMVC   0100-03065-03065-2223-00007-00007-00000-DYNALLC\n         MACRO\n&NAME    DDDMVC &PARMS=,&RETURN=\n         MVC   PARMLIST,ALOBLOCK-20\n&NAME    LINK  EP=IKJEFF18,            INVOKE DAIRFAIL TO ISSUE WTP    *\n               PARAM=(,ALOBLOCK-4,=F'0',=X'C032',=F'0',&RETURN),       *\n               VL=1,MF=(E,&PARMS)\n         MEND\n./ ADD NAME=DDD0     0100-03065-03065-2223-00107-00107-00000-DYNALLC\n***********************************************************************\n*                                                                     *\n*   MACRO DDD0                                                        *\n*                                                                     *\n*    FUNCTION: MOVE A SINGLE TEXT UNIT INTO THE TEXT UNIT AREA,       *\n*      SET ITS ADDRESS INTO A REGISTER.  STORE ADDRESSES INTO THE     *\n*      TEXT UNIT ADDRESS ARRAY.                                       *\n*                                                                     *\n*    OPERANDS: THERE ARE 5 POSITIONAL OPERANDS, P1 THRU P5.           *\n*      OPERAND P5 IS ALWAYS A QUOTED STRING THAT DDD0 EXPANDS INTO A  *\n*      COMMENT MNOTE. OPERANDS P1-P4 SPECIFY A TEXT UNIT IN ONE OF    *\n*      SEVERAL WAYS:                                                  *\n*        ADDRESS ONLY: P1 IS AN RX-TYPE ADDRESS OF A TEXT UNIT        *\n*          PREFORMATTED BY THE INVOKER. DDD0 DOES NOT COPY THE TEXT   *\n*          UNIT IN THIS CASE. THIS MODE IS SELECTED WHEN P2 IS        *\n*          OMITTED.                                                   *\n*        TWO-PART TEXT UNIT: P1 IS THE LENGTH (NON-RELOCATABLE        *\n*          EXPRESSION WHOSE FIRST CHARACTER IS NUMERIC) AND P2 IS     *\n*          THE ADDRESS (RS-TYPE) OF THE FIRST PART OF THE TEXT UNIT.  *\n*          P3 IS THE LENGTH (NON-RELOCATABLE EXPRESSION) AND P4 IS    *\n*          THE ADDRESS (RS-TYPE) OF THE SECOND PART OF THE TEXT       *\n*          UNIT. DDD0 COPIES BOTH PARTS TO THE TEXT UNIT AREA. THIS   *\n*          MODE IS SELECTED WHEN P2 IS NOT OMITTED, THE FIRST         *\n*          CHARACTER OF P1 IS NUMERIC AND P3 IS NOT OMITTED.          *\n*        ONE-PART TEXT UNIT: P1 IS THE LENGTH (NON-RELOCATABLE        *\n*          EXPRESSION WHOSE FIRST CHARACTER IS NUMERIC) AND P2 IS     *\n*          THE ADDRESS (RS-TYPE) OF THE TEXT UNIT.  DDD0 COPIES THE   *\n*          TEXT UNIT TO THE TEXT UNIT AREA. THIS MODE IS SELECTED     *\n*          WHEN P2 IS NOT OMITTED, THE FIRST CHARACTER OF P1 IS       *\n*          NUMERIC AND P3 IS OMITTED.                                 *\n*        CHARACTER-STRING VALUE: P1 (A-TYPE ADDRESS CONSTANT WHOSE    *\n*          FIRST CHARACTER IS NOT NUMERIC) IS THE KEY AND NUMBER OF   *\n*          PARAMETERS (MUST BE 1) OF THE TEXT UNIT.  P2 IS AN         *\n*          UNQUOTED STRING USED BY DDD0 AS THE VALUE OF THE FIRST     *\n*          PARAMETER. DDD0 WILL EFFECTIVELY REMOVE THE FIRST          *\n*          CHARACTER OF THE STRING IF THE FIRST TWO CHARACTERS ARE    *\n*          BOTH AMPERSANDS. DDD0 SETS THE LENGTH OF THE FIRST         *\n*          PARAMETER TO THE LENGTH OF THE P2 STRING (AFTER AMPERSAND  *\n*          REMOVAL, IF ANY). P3 IS AN UPPER LIMIT TO THE LENGTH OF    *\n*          P2 (BEFORE AMPERSAND REMOVAL). DDD0 COPIES THE TEXT UNIT   *\n*          TO THE TEXT UNIT AREA. THIS MODE IS SELECTED WHEN P2 IS    *\n*          NOT OMITTED AND P1'S FIRST CHARACTER IS NOT NUMERIC.       *\n*                                                                     *\n***********************************************************************\n         MACRO\n         DDD0  &ID,&CH,&L2,&A2,&COMMENT\n         GBLA  &X,&Y,&R\n         LCLA  &A,&K\n         LCLC  &C\n         SPACE 1\n         MNOTE *,&COMMENT\n         AIF   (T'&CH NE 'O').KEYADDX\n         AIF   ('&ID'(K'&ID,1) NE '@').PSREGX\n&C       SETC  '&ID'(1,K'&ID-1)\n         L     &R,&C\n         AGO   .CODEX\n.PSREGX  LA    &R,&ID\n         AGO   .CODEX\n.KEYADDX ANOP\n.*\n         AIF   ('&ID'(1,1) LT '0').MOVLITX\n         AIF   (T'&L2 EQ 'O').MOVVALX\n&Y       SETA  (&Y+&L2+1)/2*2\n         MVC   ALOBLOCK-&Y.(&L2),&A2\n.MOVVALX ANOP\n&Y       SETA  (&Y+&ID+1)/2*2\n         MVC   ALOBLOCK-&Y.(&ID),&CH\n         LA    &R,ALOBLOCK-&Y\n         AGO   .CODEX\n.MOVLITX ANOP\n.*\n&K       SETA  K'&CH\n         AIF   (&K GT &L2).ERRLEN\n&C       SETC  '&CH '(1,2)\n&A       SETA  3\n         AIF   ('&C' NE '&&').LOOP\n&A       SETA  4\n&C       SETC  '&CH '(1,3)\n.LOOP    AIF   (&A GT &K).SETK\n&C       SETC  '&C'',C'''.'&CH   '(&A,4)\n&A       SETA  &A+4\n         AGO   .LOOP\n.SETK    AIF   ('&CH '(1,2) NE '&&').LA\n&K       SETA  &K-1\n.LA      ANOP\n&A       SETA  &K+6\n&Y       SETA  (&Y+&A+1)/2*2\n         MVC   ALOBLOCK-&Y.(&A),=A(&ID,&K*X'10000'+C'&C')\n         LA    &R,ALOBLOCK-&Y\n.CODEX   ANOP\n.*\n         AIF   (&R NE 14).R14X\n&R       SETA  15\n         MEXIT\n.R14X    AIF   (&R NE 15).R15X\n&R       SETA  0\n         MEXIT\n.R15X    AIF   (&R NE 0).R0X\n&R       SETA  1\n         MEXIT\n.R0X     STM   14,1,ALOBLOCK+&X\n&X       SETA  &X+16\n&R       SETA  14\n         MEXIT\n.ERRLEN  MNOTE 12,'OPERAND ''&CH'' EXCEEDS &L2 CHARACTERS. OPERAND IGNO*\n               RED.'\n         MEND\n./ ADD NAME=DDD1     0100-03065-03065-2223-00156-00156-00000-DYNALLC\n         MACRO\n         DDD1  &UNIT,&SPACE,&MSVGP\n         LCLA  &A,&K\n         LCLB  &B,&T\n         LCLC  &C,&D\n         AIF   ('&UNIT' EQ '').UNITX\n         AIF   (N'&UNIT GT 3).ERRUNI9\n&C       SETC  '&UNIT(1)'\n         AIF   ('&C' EQ '').UNIT1X\n         AIF   ('&C'(K'&C,1) NE '@').UNIT1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'15',1,8),8,&C,'UNIT=CL8 AT &C'\n         AGO   .UNIT1X\n.UNIT1@X DDD0  X'00150001',&C,8,,'UNIT=&C'\n.UNIT1X  AIF   (N'&UNIT LE 1).UNITX\n&C       SETC  '&UNIT(2)'\n         AIF   ('&C' EQ '').UNIT2X\n         AIF   ('&C' NE 'P').UNITC\n         DDD0  =Y(X'17',0),,,,'UNIT=(,P)  PARALLEL MOUNT'\n         AGO   .UNIT2X\n.UNITC   AIF   ('&C'(K'&C,1) NE '@').UNITC@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'16',1,1),1,&C,'UNIT=(,AL1 AT &C)  UNIT COUNT'\n         AGO   .UNIT2X\n.UNITC@X DDD0  7,=AL1(0,X'16',0,1,0,1,&C),,,'UNIT=(,&C)  UNIT COUNT'\n.UNIT2X  AIF   ('&UNIT(3)' EQ '').UNITX\n         AIF   ('&UNIT(3)' NE 'DEFER').ERRUNIT\n         DDD0  =Y(X'6C',0),,,,'UNIT=(,,DEFER)  DEFERRED MOUNTING'\n.UNITX   AIF   ('&SPACE' EQ '').SPACEX\n         AIF   (N'&SPACE GT 5).ERRSPA9\n&C       SETC  '&SPACE(1)'\n         AIF   ('&C' EQ '').SPACE1X\n         AIF   ('&C' NE 'TRK').SPACE1C\n         DDD0  =Y(X'07',0),,,,'SPACE=(TRK)'\n         AGO   .SPACE1X\n.SPACE1C AIF   ('&C' NE 'CYL').SPACE1A\n         DDD0  =Y(X'08',0),,,,'SPACE=(CYL)'\n         AGO   .SPACE1X\n.SPACE1A AIF   ('&C'(K'&C,1) NE '@').SPAC1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'09',1,3),3,&C,                                   *\n               'SPACE=(AL3 AT &C)  AVERAGE BLOCK SIZE'\n         AGO   .SPACE1X\n.SPAC1@X DDD0  9,=AL3(X'000900',X'010003',&C),,,                       *\n               'SPACE=(&C)  AVERAGE BLOCK SIZE'\n.SPACE1X AIF   ('&SPACE(2)' EQ '').SPACE2X\n&C       SETC  '&SPACE(2)'\n         AIF   ('&C'(1,1) NE '(').SPACE2W\n&A       SETA  2\n.SPACE2A AIF   ('&C'(&A,1) EQ ',' AND &K EQ 0).SPACE2C\n&B       SETB  ('&C'(&A,1) EQ '(')\n&T       SETB  ('&C'(&A,1) EQ ')')\n&K       SETA  &K+&B-&T\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).SPACE2A\n.SPACE2C AIF   (&A EQ 2).SPAC21X\n&D       SETC  '&C'(2,&A-2)\n         AIF   ('&D'(K'&D,1) NE '@').SPA21@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'0A',1,3),3,&D,'SPACE=(,(AL3 AT &D))'\n         AGO   .SPAC21X\n.SPA21@X DDD0  9,=AL3(X'000A00',X'010003',&D),,,'SPACE=(,(&D))'\n.SPAC21X AIF   (&A GE K'&C).SPACE2X\n&C       SETC  '&C'(&A+1,K'&C-&A)\n&A       SETA  1\n.SPACE2D AIF   ('&C'(&A,1) EQ ',' AND &K EQ 0).SPACE2E\n&B       SETB  ('&C'(&A,1) EQ '(')\n&T       SETB  ('&C'(&A,1) EQ ')')\n&K       SETA  &K+&B-&T\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).SPACE2D\n.SPACE2E AIF   (&A EQ 1).SPAC22X\n&D       SETC  '&C'(1,&A-1)\n         AIF   ('&D'(K'&D,1) NE '@').SPA22@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'0B',1,3),3,&D,'SPACE=(,(,AL3 AT &D))'\n         AGO   .SPAC22X\n.SPA22@X DDD0  9,=AL3(X'000B00',X'010003',&D),,,'SPACE=(,(,&D))'\n.SPAC22X AIF   (&A GE K'&C).SPACE2X\n&C       SETC  '&C'(&A+1,K'&C-&A)\n&A       SETA  1\n.SPACE2G AIF   ('&C'(&A,1) EQ ',' AND &K EQ 0).ERRSPA2\n&B       SETB  ('&C'(&A,1) EQ '(')\n&T       SETB  ('&C'(&A,1) EQ ')')\n&K       SETA  &K+&B-&T\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).SPACE2G\n&D       SETC  '&C'(1,&A-1)\n         AIF   ('&D'(K'&D,1) NE '@').SPA23@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'0C',1,3),3,&D,'SPACE=(,(,,AL3 AT &D))'\n         AGO   .SPACE2X\n.SPA23@X DDD0  9,=AL3(X'000C00',X'010003',&D),,,'SPACE=(,(,,&D))'\n         AGO   .SPACE2X\n.SPACE2W AIF   ('&C'(K'&C,1) NE '@').SPAC2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'0A',1,3),3,&C,'SPACE=(,AL3 AT &C)'\n         AGO   .SPACE2X\n.SPAC2@X DDD0  9,=AL3(X'000A00',X'010003',&C),,,'SPACE=(,&C)'\n.SPACE2X AIF   (N'&SPACE LE 3).SPACE3\n         AIF   ('&SPACE(5)' EQ '').SPACE4\n         AIF   ('&SPACE(5)' NE 'ROUND').ERRSPA5\n         DDD0  =Y(X'0F',0),,,,'SPACE=(,,,,ROUND)'\n.SPACE4  ANOP\n&C       SETC  '&SPACE(4)'\n         AIF   ('&C' EQ '').SPACE3\n         AIF   ('&C' NE 'CONTIG').SPACE4A\n         DDD0  7,=AL1(0,X'0E',0,1,0,1,X'08'),,,'SPACE=(,,,CONTIG)'\n         AGO   .SPACE3\n.SPACE4A AIF   ('&C' NE 'ALX').SPACE4M\n         DDD0  7,=AL1(0,X'0E',0,1,0,1,X'02'),,,'SPACE=(,,,ALX)'\n         AGO   .SPACE3\n.SPACE4M AIF   ('&C' NE 'MXIG').SPACE4@\n         DDD0  7,=AL1(0,X'0E',0,1,0,1,X'04'),,,'SPACE=(,,,MXIG)'\n         AGO   .SPACE3\n.SPACE4@ AIF   ('&C'(K'&C,1) NE '@').ERRSPA4\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'0E',1,1),1,&C,'SPACE=(,,,XL1 AT &C)'\n.SPACE3  AIF   ('&SPACE(3)' EQ '').SPACEX\n         AIF   ('&SPACE(3)' NE 'RLSE').ERRRLSE\n         DDD0  =Y(X'0D',0),,,,'SPACE=(,,RLSE)'\n.SPACEX  AIF   ('&MSVGP' EQ '').MSVGPX\n         AIF   (N'&MSVGP GT 2).ERRMSV9\n         AIF   (N'&MSVGP LE 1).MSVDDX\n         MNOTE 8,'SECOND SUBPARAMETER OF MSVGP NOT SUPPORTED BY DYNAMIC*\n                ALLOCATION.'\n.MSVDDX  ANOP\n&C       SETC  '&MSVGP(1)'\n         AIF   ('&C' EQ '').MSVGPX\n         AIF   ('&C'(K'&C,1) NE '@').MSVGP@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'5E',1,8),8,&C,'MSVGP=CL8 AT &C'\n         AGO   .MSVGPX\n.MSVGP@X DDD0  X'005E0001',&C,8,,'MSVGP=&C'\n.MSVGPX  MEXIT\n.ERRUNI9 MNOTE 8,'ONLY THREE SUBPARAMETERS ALLOWED IN UNIT=&UNIT.. UNIT*\n                IGNORED.'\n         AGO   .UNITX\n.ERRUNIT MNOTE 8,'UNIT=(,,&UNIT(3)) IS INVALID. IGNORED.'\n         AGO   .UNITX\n.ERRSPA9 MNOTE 8,'ONLY FIVE SUBPARAMETERS ALLOWED IN SPACE=&SPACE.. SPA*\n               CE IGNORED.'\n         AGO   .SPACEX\n.ERRSPA2 MNOTE 8,'TOO MAY SUBPARAMETERS IN SECOND SPACE PARAMETER, &SPA*\n               CE(2)'\n         AGO   .SPACE2X\n.ERRRLSE MNOTE 8,'INVALID THIRD SPACE PARAMETER, &SPACE(3)'\n         AGO   .SPACEX\n.ERRSPA4 MNOTE 8,'INVALID FOURTH SPACE PARAMETER, &C'\n         AGO   .SPACE3\n.ERRSPA5 MNOTE 8,'INVALID FIFTH SPACE PARAMETER, &SPACE(5)'\n         AGO   .SPACE4\n.ERRMSV9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN MSVGP=&MSVGP.. MSVG*\n               P IGNORED.'\n         AGO   .MSVGPX\n         MEND\n./ ADD NAME=DDD2     0100-03065-03065-2223-00198-00198-00000-DYNALLC\n         MACRO\n         DDD2  &VOL,&LABEL,&PROTECT\n         LCLA  &A\n         LCLC  &C,&D\n         AIF   ('&VOL' EQ '').VOLX\n&C       SETC  '&VOL(N'&VOL)'\n         AIF   ('&C'(1,4) NE 'SER=').VOLREF\n         AIF   ('&C'(5,1) EQ '(').VOLMULT\n         AIF   ('&C'(K'&C,1) NE '@').VOLS1@X\n&C       SETC  '&C'(5,K'&C-5)\n         DDD0  6,=Y(X'10',1,6),6,&C,'VOL=SER=CL6 AT &C'\n         AGO   .VOLKEYX\n.VOLS1@X AIF   (K'&C NE 10).ERRVOS1\n&C       SETC  '&C'(5,6)\n         DDD0  X'00100001',&C,6,,'VOL=SER=&C'\n         AGO   .VOLKEYX\n.VOLMULT AIF   ('&C'(K'&C-1,1) NE '@').VOLMU@X\n&C       SETC  '&C'(6,K'&C-7)\n         DDD0  6,=Y(X'10',1,6),6,&C,'VOL=SER=CL6 AT &C'\n         AGO   .VOLKEYX\n.VOLMU@X ANOP\n&D       SETC  'X''00060000''+C'''.'&C'(6,2).''',C'''.'&C'(8,4).''''\n&A       SETA  12\n.VOLLOOP AIF   ('&C'(&A,1) NE ',').ERRVOLS\n&D       SETC  '&D,X''00060000''+C'''.'&C'(&A+1,2).''',C'''.'&C'(&A+3,4*\n               ).''''\n&A       SETA  &A+7\n         AIF   (&A LT K'&C).VOLLOOP\n&A       SETA  &A/7\n&D       SETC  'X''00100000''+&A,&D'\n&A       SETA  &A*8+4\n         DDD0  &A,=A(&D),,,'VOL=&C'\n         AGO   .VOLKEYX\n.VOLREF  AIF   ('&C'(1,4) NE 'REF=').VOL4\n         AIF   ('&C'(5,1) EQ '*').ERRVOLR\n         AIF   ('&C'(K'&C,1) NE '@').VOLRE@X\n&C       SETC  '&C'(5,K'&C-5)\n         DDD0  6,=Y(X'14',1,44),44,&C,'VOL=REF=CL44 AT &C'\n         AGO   .VOLKEYX\n.VOLRE@X ANOP\n&C       SETC  '&C'(5,K'&C-4)\n         DDD0  X'00140001',&C,44,,'VOL=REF=&C'\n.VOLKEYX AIF   (N'&VOL LE 1).VOLX\n         AIF   (N'&VOL LE 2).VOL2X\n         AIF   (N'&VOL LE 3).VOL3X\n         AIF   (N'&VOL LE 4).VOL4X\n         AIF   (N'&VOL LE 5).VOL5X\n.VOL4    AIF   (N'&VOL GT 4).ERRVOL9\n.VOL5X   ANOP\n&C       SETC  '&VOL(4)'\n         AIF   ('&C' EQ '').VOL4X\n         AIF   ('&C'(K'&C,1) NE '@').VOL4@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'13',1,1),1,&C,'VOL=(,,,AL1 AT &C)  VOLUME COUNT'\n         AGO   .VOL4X\n.VOL4@X  DDD0  7,=AL1(0,X'13',0,1,0,1,&C),,,'VOL=(,,,&C)  VOLUME COUNT'\n.VOL4X   ANOP\n&C       SETC  '&VOL(3)'\n         AIF   ('&C' EQ '').VOL3X\n         AIF   ('&C'(K'&C,1) NE '@').VOL3@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'12',1,2),2,&C,'VOL=(,,AL2 AT &C)  VOLUME SEQUENCE*\n                NUMBER'\n         AGO   .VOL3X\n.VOL3@X  DDD0  8,=Y(X'12',1,2,&C),,,'VOL=(,,&C)  VOLUME SEQUENCE NUMBER*\n               '\n.VOL3X   AIF   ('&VOL(2)' EQ '').VOL2X\n         AIF   ('&VOL(2)' NE 'RETAIN').ERRVOL2\n         MNOTE 8,'VOL=(,RETAIN) NOT SUPPORTED BY DYNAMIC ALLOCATION'\n.VOL2X   AIF   ('&VOL(1)' EQ '').VOLX\n         AIF   ('&VOL(1)' NE 'PRIVATE').ERRVOL1\n         DDD0  =Y(X'11',0),,,,'VOL=(PRIVATE)'\n.VOLX    AIF   ('&LABEL' EQ '').LABELX\n&C       SETC  '&LABEL(N'&LABEL)'\n         AIF   ('&C'(1,6) NE 'EXPDT=').LABELEX\n         AIF   ('&C'(K'&C,1) NE '@').LABE@X\n&C       SETC  '&C'(7,K'&C-7)\n         DDD0  6,=Y(X'22',1,5),5,&C,'LABEL=EXPDT=CL5 AT &C'\n         AGO   .LABKEYX\n.LABE@X  AIF   (K'&C NE 11).ERREXPD\n&C       SETC  '&C'(7,5)\n         DDD0  X'00220001',&C,5,,'LABEL=EXPDT=&C'\n         AGO   .LABKEYX\n.LABELEX AIF   ('&C'(1,6) NE 'RETPD=').LABELRX\n         AIF   ('&C'(K'&C,1) NE '@').LABR@X\n&C       SETC  '&C'(7,K'&C-7)\n         DDD0  6,=Y(X'23',1,2),2,&C,'LABEL=RETPD=AL2 AT &C'\n         AGO   .LABKEYX\n.LABR@X  ANOP\n&C       SETC  '&C'(7,K'&C-6)\n         DDD0  8,=Y(X'23',1,2,&C),,,'LABEL=RETPD=&C'\n.LABKEYX AIF   (N'&LABEL LE 1).LABELX\n         AIF   (N'&LABEL LE 2).LABEL2X\n         AIF   (N'&LABEL LE 3).LABEL3X\n         AIF   (N'&LABEL LE 4).LABEL4X\n         AIF   (N'&LABEL LE 5).LABEL5X\n.LABELRX AIF   (N'&LABEL GT 4).ERRLAB9\n.LABEL5X ANOP\n&C       SETC  '&LABEL(4)'\n         AIF   ('&C' EQ '').LABEL4X\n         AIF   ('&C' NE 'IN').LABEL4A\n         DDD0  7,=AL1(0,X'21',0,1,0,1,X'80'),,,'LABEL=(,,,IN)'\n         AGO   .LABEL4X\n.LABEL4A AIF   ('&C' NE 'OUT').LABEL4@\n         DDD0  7,=AL1(0,X'21',0,1,0,1,X'40'),,,'LABEL=(,,,OUT)'\n         AGO   .LABEL4X\n.LABEL4@ AIF   ('&C'(K'&C,1) NE '@').ERRLAB4\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'21',1,1),1,&C,'LABEL=(,,,XL1 AT &C)  INPUT ONLY O*\n               R OUTPUT ONLY'\n.LABEL4X ANOP\n&C       SETC  '&LABEL(3)'\n         AIF   ('&C' EQ '').LABEL3X\n         AIF   ('&C' NE 'PASSWORD').LABEL3A\n         DDD0  7,=AL1(0,X'20',0,1,0,1,X'10'),,,'LABEL=(,,PASSWORD)'\n         AGO   .LABEL3X\n.LABEL3A AIF   ('&C' NE 'NOPWREAD').LABEL3@\n         DDD0  7,=AL1(0,X'20',0,1,0,1,X'30'),,,'LABEL=(,,NOPWREAD)'\n         AGO   .LABEL3X\n.LABEL3@ AIF   ('&C'(K'&C,1) NE '@').ERRLAB3\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'20',1,1),1,&C,'LABEL=(,,XL1 AT &C)  PASSWORD PROT*\n               ECTION'\n.LABEL3X ANOP\n&C       SETC  '&LABEL(2)'\n         AIF   ('&C' EQ '').LABEL2X\n         AIF   ('&C' NE 'NSL').LABEL2A\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'04'),,,'LABEL=(,NSL)'\n         AGO   .LABEL2X\n.LABEL2A AIF   ('&C' NE 'SL').LABEL2B\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'02'),,,'LABEL=(,SL)'\n         AGO   .LABEL2X\n.LABEL2B AIF   ('&C' NE 'NL').LABEL2C\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'01'),,,'LABEL=(,NL)'\n         AGO   .LABEL2X\n.LABEL2C AIF   ('&C' NE 'BLP').LABEL2D\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'10'),,,'LABEL=(,BLP)'\n         AGO   .LABEL2X\n.LABEL2D AIF   ('&C' NE 'SUL').LABEL2E\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'08'),,,'LABEL=(,SUL)'\n         AGO   .LABEL2X\n.LABEL2E AIF   ('&C' NE 'AL').LABEL2F\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'40'),,,'LABEL=(,AL)'\n         AGO   .LABEL2X\n.LABEL2F AIF   ('&C' NE 'AUL').LABEL2G\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'48'),,,'LABEL=(,AUL)'\n         AGO   .LABEL2X\n.LABEL2G AIF   ('&C' NE 'LTM').LABEL2@\n         DDD0  7,=AL1(0,X'1E',0,1,0,1,X'21'),,,'LABEL=(,LTM)'\n         AGO   .LABEL2X\n.LABEL2@ AIF   ('&C'(K'&C,1) NE '@').ERRLAB2\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1E',1,1),1,&C,'LABEL=(,XL1 AT &C)  LABEL TYPE'\n.LABEL2X ANOP\n&C       SETC  '&LABEL(1)'\n         AIF   ('&C' EQ '').LABELX\n         AIF   ('&C'(K'&C,1) NE '@').LABE1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1F',1,2),2,&C,'LABEL=(AL2 AT &C)  DATASET SEQUENC*\n               E NUMBER'\n         AGO   .LABELX\n.LABE1@X DDD0  8,=Y(X'1F',1,2,&C),,,'LABEL=(&C)  DATASET SEQUENCE NUMBE*\n               R'\n.LABELX  AIF   ('&PROTECT' EQ '').PROTECX\n         AIF   ('&PROTECT' NE 'YES').ERRPROT\n         DDD0  =Y(X'61',0),,,,'PROTECT=YES'\n.PROTECX MEXIT\n.ERRVOL9 MNOTE 8,'ONLY FOUR POSITIONAL SUBPARAMETERS ALLOWED IN VOL=&VO*\n               L.. POSITIONAL SUBPARAMETERS OF VOL IGNORED'\n         AGO   .VOLX\n.ERRVOS1 ANOP\n&A       SETA  12\n.ERRVOLS ANOP\n&A       SETA  &A/7\n         MNOTE 8,'VOLUME &A IN VOL=&C DOES NOT HAVE 6 CHARACTERS. VOL=S*\n               ER IGNORED.'\n         AGO   .VOLKEYX\n.ERRVOLR MNOTE 8,'VOLUME REFERENCE BY DDNAME IN VOL=&C NOT SUPPORTED BY*\n                DYNAMIC ALLOCATION. IGNORED.'\n         AGO   .VOLKEYX\n.ERRVOL2 MNOTE 8,'VOL=(,&VOL(2)) INVALID. IGNORED.'\n         AGO   .VOL2X\n.ERRVOL1 MNOTE 8,'VOL=(&VOL(1)) INVALID. IGNORED.'\n         AGO   .VOLX\n.ERRLAB9 MNOTE 8,'ONLY FOUR POSITIONAL SUBPARAMETERS ALLOWED IN LABEL=&*\n               LABEL.. POSITIONAL SUBPARAMETERS OF LABEL IGNORED'\n         AGO   .LABELX\n.ERREXPD MNOTE 8,'LABEL=&C INVALID. IGNORED.'\n         AGO   .LABKEYX\n.ERRLAB2 MNOTE 8,'LABEL=(,&C) INVALID. IGNORED.'\n         AGO   .LABEL2X\n.ERRLAB3 MNOTE 8,'LABEL=(,,&LABEL(3)) INVALID. IGNORED.'\n         AGO   .LABEL3X\n.ERRLAB4 MNOTE 8,'LABEL=(,,,&C) INVALID. IGNORED.'\n         AGO   .LABEL4X\n.ERRPROT MNOTE 8,'PROTECT=&PROTECT INVALID. PROTECT IGNORED'\n         AGO   .PROTECX\n         MEND\n./ ADD NAME=DDD3     0100-03065-03065-2223-00296-00296-00000-DYNALLC\n         MACRO\n         DDD3  &DUMMY,&DCB,&SUBSYS\n         GBLA  &Y\n         LCLA  &A,&K,&L,&M1,&M2\n         LCLB  &@,&B0,&B1,&B2,&B3,&B4,&B5,&B6\n         LCLB  &O0,&O1,&O2,&O3,&O4,&O5,&O6,&O7\n         LCLC  &C,&D\n         AIF   ('&DUMMY' EQ '').DUMMYX\n         AIF   ('&DUMMY' NE 'DUMMY').ERRDUMM\n         DDD0  =Y(X'24',0),,,,'DUMMY'\n.DUMMYX  AIF   ('&DCB' EQ '').DCBX\n&A       SETA  N'&DCB+1\n.DCBLOOP AIF   (&A LE 1).DCBX\n&A       SETA  &A-1\n&C       SETC  '&DCB(&A)'\n&@       SETB  0\n         AIF   ('&C'(K'&C,1) NE '@').@X\n&@       SETB  1\n&C       SETC  '&C'(1,K'&C-1)\n.@X      AIF   (K'&C LE 5).DCB4\n         AIF   ('&C'(1,8) NE 'BLKSIZE=').BLKSIZX\n&C       SETC  '&C'(9,K'&C-8)\n         AIF   (&@).BLKSIZ@\n         DDD0  8,=Y(X'30',1,2,&C),,,'DCB=BLKSIZE=&C'\n         AGO   .DCBLOOP\n.BLKSIZ@ DDD0  6,=Y(X'30',1,2),2,&C,'DCB=BLKSIZE=AL2 AT &C'\n         AGO   .DCBLOOP\n.BLKSIZX AIF   ('&C'(6,1) NE '=').DCB7\n&D       SETC  '&C'(1,5)\n&C       SETC  '&C'(7,K'&C-6)\n         AIF   ('&D' NE 'BUFNO').BUFNOX\n         AIF   (&@).BUFNO@\n         DDD0  7,=AL1(0,X'34',0,1,0,1,&C),,,'DCB=BUFNO=&C'\n         AGO   .DCBLOOP\n.BUFNO@  DDD0  6,=Y(X'34',1,1),1,&C,'DCB=BUFNO=AL1 AT &C'\n         AGO   .DCBLOOP\n.BUFNOX  AIF   ('&D' NE 'RECFM').RECFMX\n         AIF   (&@).RECFM@\n&K       SETA  K'&C+1\n.RECFMA  AIF   (&K LE 1).RECFMW\n&K       SETA  &K-1\n&D       SETC  '&C'(&K,1)\n         AIF   ('&D' NE 'F' AND '&D' NE 'U' AND '&D' NE 'V').RECFMB\n&B0      SETB  ('&D' EQ 'F' OR '&D' EQ 'U')\n&B1      SETB  ('&D' EQ 'V' OR '&D' EQ 'U')\n         AGO   .RECFMA\n.RECFMB  AIF   ('&D' NE 'B').RECFMC\n&B3      SETB  1\n         AGO   .RECFMA\n.RECFMC  AIF   ('&D' NE 'S').RECFMD\n&B4      SETB  1\n         AGO   .RECFMA\n.RECFMD  AIF   ('&D' NE 'A').RECFME\n&B5      SETB  1\n         AGO   .RECFMA\n.RECFME  AIF   ('&D' NE 'M').RECFMF\n&B6      SETB  1\n         AGO   .RECFMA\n.RECFMF  AIF   ('&D' NE 'T').RECFMG\n&B2      SETB  1\n         AGO   .RECFMA\n.RECFMG  AIF   ('&D' NE 'D').RECFMH\n&B2      SETB  1\n         AGO   .RECFMA\n.RECFMH  AIF   ('&D' NE 'G').RECFMI\n&B5      SETB  1\n         AGO   .RECFMA\n.RECFMI  AIF   ('&D' NE 'R').ERRRECF\n&B6      SETB  1\n         AGO   .RECFMA\n.RECFMW  DDD0  7,=AL1(0,X'49',0,1,0,1,B'&B0&B1&B2&B3&B4&B5&B6.0'),,,   *\n               'DCB=RECFM=&C'\n         AGO   .DCBLOOP\n.RECFM@  DDD0  6,=Y(X'49',1,1),1,&C,'DCB=RECFM=XL1 AT &C'\n         AGO   .DCBLOOP\n.RECFMX  AIF   ('&D' NE 'OPTCD').OPTCDX\n         AIF   (&@).OPTCD@\n&K       SETA  K'&C+1\n.OPTCDA  AIF   (&K LE 1).OPTCDW\n&K       SETA  &K-1\n&D       SETC  '&C'(&K,1)\n         AIF   ('&D' NE 'W').OPTCDWX\n&O0      SETB  1\n         AGO   .OPTCDA\n.OPTCDWX AIF   ('&D' NE 'B' AND '&D' NE 'U').OPTCBUX\n&O1      SETB  1\n         AGO   .OPTCDA\n.OPTCBUX AIF   ('&D' NE 'C' AND '&D' NE 'E').OPTCCEX\n&O2      SETB  1\n         AGO   .OPTCDA\n.OPTCCEX AIF   ('&D' NE 'F' AND '&D' NE 'H' AND '&D' NE 'O').OPTFHOX\n&O3      SETB  1\n         AGO   .OPTCDA\n.OPTFHOX AIF   ('&D' NE 'A' AND '&D' NE 'Q').OPTCAQX\n&O4      SETB  1\n         AGO   .OPTCDA\n.OPTCAQX AIF   ('&D' NE 'Z').OPTCDZX\n&O5      SETB  1\n         AGO   .OPTCDA\n.OPTCDZX AIF   ('&D' NE 'T').OPTCDTX\n&O6      SETB  1\n         AGO   .OPTCDA\n.OPTCDTX AIF   ('&D' NE 'R' AND '&D' NE 'J').ERROPTC\n&O7      SETB  1\n         AGO   .OPTCDA\n.OPTCDW  DDD0  7,=AL1(0,X'45',0,1,0,1,B'&O0&O1&O2&O3&O4&O5&O6&O7'),,,  *\n               'DCB=OPTCD=&C'\n         AGO   .DCBLOOP\n.OPTCD@  DDD0  6,=Y(X'45',1,1),1,&C,'DCB=OPTCD=XL1 AT &C'\n         AGO   .DCBLOOP\n.OPTCDX  AIF   ('&D' NE 'LRECL').LRECLX\n         AIF   (&@).LRECL@\n         AIF   ('&C' EQ 'X').LRECLA\n         DDD0  8,=Y(X'42',1,2,&C),,,'DCB=LRECL=&C'\n         AGO   .DCBLOOP\n.LRECL@  DDD0  6,=Y(X'42',1,2),2,&C,'DCB=LRECL=AL2 AT &C'\n         AGO   .DCBLOOP\n.LRECLA  DDD0  8,=Y(X'42',1,2,-X'8000'),'DCB=LRECL=X  VBS ONLY'\n         AGO   .DCBLOOP\n.LRECLX  AIF   ('&D' NE 'DSORG').DSORGX\n         AIF   (&@).DSORG@\n         AIF   ('&C' NE 'PO').DSORGS\n         DDD0  8,=Y(X'3C',1,2,X'0200'),,,'DCB=DSORG=PO'\n         AGO   .DCBLOOP\n.DSORGS  AIF   ('&C' NE 'PS').DSORGD\n         DDD0  8,=Y(X'3C',1,2,X'4000'),,,'DCB=DSORG=PS'\n         AGO   .DCBLOOP\n.DSORGD  AIF   ('&C' NE 'DA').ERRDSOR\n         DDD0  8,=Y(X'3C',1,2,X'2000'),,,'DCB=DSORG=DA'\n         AGO   .DCBLOOP\n.DSORG@  DDD0  6,=Y(X'3C',1,2),2,&C,'DCB=DSORG=XL2 AT &C'\n         AGO   .DCBLOOP\n.DSORGX  AIF   ('&D' NE 'EROPT').EROPTX\n         AIF   (&@).EROPT@\n         AIF   ('&C' NE 'ACC').EROPTA\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'80'),,,'DCB=EROPT=ACC'\n         AGO   .DCBLOOP\n.EROPTA  AIF   ('&C' NE 'SKP').EROPTB\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'40'),,,'DCB=EROPT=SKP'\n         AGO   .DCBLOOP\n.EROPTB  AIF   ('&C' NE 'ABE').EROPTC\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'20'),,,'DCB=EROPT=ABE'\n         AGO   .DCBLOOP\n.EROPTC  AIF   ('&C' NE 'T').ERREROP\n         DDD0  7,=AL1(0,X'3D',0,1,0,1,X'10'),,,'DCB=EROPT=T'\n         AGO   .DCBLOOP\n.EROPT@  DDD0  6,=Y(X'3D',1,1),1,&C,'DCB=EROPT=XL1 AT &C'\n         AGO   .DCBLOOP\n.EROPTX  AIF   ('&D' NE 'LIMCT').ERRDCB\n         AIF   (&@).LIMCT@\n         DDD0  9,=AL3(X'004100',X'010003',&C),,,'DCB=LIMCT=&C'\n         AGO   .DCBLOOP\n.LIMCT@  DDD0  6,=Y(X'41',1,3),3,&C,'DCB=LIMCT=AL3 AT &C'\n         AGO   .DCBLOOP\n.DCB7    AIF   ('&C'(1,7) NE 'KEYLEN=').DCB5\n&C       SETC  '&C'(8,K'&C-7)\n         AIF   (&@).KEYLEN@\n         DDD0  7,=AL1(0,X'40',0,1,0,1,&C),,,'DCB=KEYLEN=&C'\n         AGO   .DCBLOOP\n.KEYLEN@ DDD0  6,=Y(X'40',1,1),1,&C,'DCB=KEYLEN=AL1 AT &C'\n         AGO   .DCBLOOP\n.DCB5    AIF   ('&C'(1,5) NE 'BUFL=').DCB4\n&C       SETC  '&C'(6,K'&C-5)\n         AIF   (&@).BUFL@\n         DDD0  8,=Y(X'32',1,2,&C),,,'DCB=BUFL=&C'\n         AGO   .DCBLOOP\n.BUFL@   DDD0  6,=Y(X'32',1,2),2,&C,'DCB=BUFL=AL2 AT &C'\n         AGO   .DCBLOOP\n.DCB4    AIF   ('&C'(4,1) NE '=').DCBREF\n&D       SETC  '&C'(1,3)\n&C       SETC  '&C'(5,K'&C-4)\n         AIF   ('&D' NE 'DEN').DCBDENX\n         AIF   (&@).DEN@\n         AIF   ('&C' NE '4').DEN3\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'D3'),,,'DCB=DEN=4'\n         AGO   .DCBLOOP\n.DEN3    AIF   ('&C' NE '3').DEN2\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'C3'),,,'DCB=DEN=3'\n         AGO   .DCBLOOP\n.DEN2    AIF   ('&C' NE '2').DEN1\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'83'),,,'DCB=DEN=2'\n         AGO   .DCBLOOP\n.DEN1    AIF   ('&C' NE '1').DEN0\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'43'),,,'DCB=DEN=1'\n         AGO   .DCBLOOP\n.DEN0    AIF   ('&C' NE '0').ERRDEN\n         DDD0  7,=AL1(0,X'3B',0,1,0,1,X'03'),,,'DCB=DEN=0'\n         AGO   .DCBLOOP\n.DEN@    DDD0  6,=Y(X'3B',1,1),1,&C,'DCB=DEN=XL1 AT &C'\n         AGO   .DCBLOOP\n.DCBDENX AIF   ('&D' NE 'NCP').ERRDCB\n         AIF   (&@).NCP@\n         DDD0  7,=AL1(0,X'44',0,1,0,1,&C),,,'DCB=NCP=&C'\n         AGO   .DCBLOOP\n.NCP@    DDD0  6,=Y(X'44',1,1),1,&C,'DCB=NCP=AL1 AT &C'\n         AGO   .DCBLOOP\n.DCBREF  AIF   (&A NE 1).ERRDCB2  POSITIONAL PARAMETER\n         AIF   ('&C'(1,2) NE '*.').REFDSN\n&C       SETC  '&C'(3,K'&C-2)\n         AIF   (&@).DCBDDN@\n         DDD0  X'002D0001',&C,8,,'DCB=*.&C'\n         AGO   .DCBLOOP\n.DCBDDN@ DDD0  6,=Y(X'2D',1,8),8,&C,'DCB=*.CL8 AT &C'\n         AGO   .DCBLOOP\n.REFDSN  MNOTE *,'*,* DATASET REFERENCE ASSUMED IN DCB=&C'\n         AIF   (&@).DCBDSN@\n         DDD0  X'002C0001',&C,44,,'DSNAME REFERENCE  DCB=&C'\n         AGO   .DCBLOOP\n.DCBDSN@ DDD0  6,=Y(X'2C',1,44),44,&C,'DSNAME REFERENCE  DCB=CL44 AT &C*\n               '\n         AGO   .DCBLOOP\n.DCBX    AIF   ('&SUBSYS' EQ '').SUBSYSX\n&C       SETC  '&SUBSYS(1)'\n&K       SETA  K'&C\n         AIF   ('&C' EQ '').SUB1X\n         AIF   ('&C'(&K,1) NE '@').SUB1@X\n&C       SETC  '&C'(1,&K-1)\n         DDD0  6,=Y(X'5F',1,4),4,&C,'SUBSYS=(CL4 AT &C)'\n         AGO   .SUB1X\n.SUB1@X  DDD0  X'005F0001',&C,4,,'SUBSYS=(&C)'\n.SUB1X   ANOP\n&A       SETA  N'&SUBSYS+1\n         AIF   (&A LE 2).SUBSYSX\n         SPACE 1\n.ALOOP   AIF   (&A LE 2).AX\n&A       SETA  &A-1\n&D       SETC  '&SUBSYS(&A)   '\n         AIF   ('&D'(1,1) NE '''').DX\n&D       SETC  '&D'(2,K'&D-5).'   '\n.DX      ANOP\n&K       SETA  K'&D-3\n         AIF   ('&D'(&K,1) EQ '@').ERRSUB@\n.ERRSUBX ANOP\n&M       SETA  0\n&M1      SETA  0\n.M2LOOP  AIF   (&M1 GE 2).M2X\n&M1      SETA  &M1+1\n&M       SETA  &M+1\n         AIF   ('&D'(&M,2) NE '''''' AND '&D'(&M,2) NE '&&').M2LOOP\n&K       SETA  &K-1\n&M       SETA  &M+1\n         AGO   .M2LOOP\n.M2X     ANOP\n&C       SETC  '&D'(1,&M)\n.LLOOP   AIF   (&M GE K'&D-3).LX\n&L       SETA  &M+1\n&M1      SETA  0\n.M4LOOP  AIF   (&M1 GE 4).M4X\n&M1      SETA  &M1+1\n&M       SETA  &M+1\n         AIF   ('&D'(&M,2) NE '''''' AND '&D'(&M,2) NE '&&').M4LOOP\n&K       SETA  &K-1\n&M       SETA  &M+1\n         AGO   .M4LOOP\n.M4X     ANOP\n&C       SETC  '&C'',C'''.'&D'(&L,&M-&L+1)\n         AGO   .LLOOP\n.LX      AIF   (&K GT 67).ERRK67\n.K67X    ANOP\n&L       SETA  &K+2\n&Y       SETA  &Y+&L\n         MVC   ALOBLOCK-&Y.(&L),=A(&K*X'10000'+C'&C')\n         AGO   .ALOOP\n.AX      ANOP\n&A       SETA  N'&SUBSYS-1\n&Y       SETA  &Y+4\n         MVC   ALOBLOCK-&Y.(4),=Y(X'60',&A)\n         DDD0  ALOBLOCK-&Y,,,,'SUBSYS=(, )'\n.SUBSYSX MEXIT\n.ERRDUMM MNOTE 8,'INVALID POSITIONAL PARAMETER, &DUMMY.. IGNORED.'\n         AGO   .DUMMYX\n.ERREROP MNOTE 8,'INVALID EROPT, &C.. IGNORED.'\n         AGO   .DCBLOOP\n.ERRRECF MNOTE 8,'INVALID CHAR &D IN RECFM=&C.. RECFM IGNORED.'\n         AGO   .DCBLOOP\n.ERROPTC MNOTE 8,'INVALID CHAR &D IN OPTCD=&C.. OPTCD IGNORED.'\n         AGO   .DCBLOOP\n.ERRDCB2 MNOTE 8,'INVALID DCB PARAMETER, &C.. IGNORED.'\n         AGO   .DCBLOOP\n.ERRDCB  MNOTE 8,'INVALID DCB PARAMETER, &D=&C.. IGNORED.'\n         AGO   .DCBLOOP\n.ERRDSOR MNOTE 8,'DSORG=&C NOT SUPPORTED. IGNORED.'\n         AGO   .DCBLOOP\n.ERRDEN  MNOTE 8,'DEN=&C INVALID. IGNORED.'\n         AGO   .DCBLOOP\n.ERRSUB@ ANOP\n&C       SETC  '&D'(1,&K)\n         MNOTE *,'*,* SUBSYSTEM PARAMETER, ''&C'', TAKEN AS LITERAL'\n         AGO   .ERRSUBX\n.ERRK67  ANOP\n&D       SETC  '&D'(1,K'&D-3)\n         MNOTE 8,'SUBSYSTEM SUBPARAMETER, ''&D'', EXCEEDS 67 CHARACTERS*\n               . TRUNCATED.'\n&K       SETA  67\n         AGO   .K67X\n         MEND\n./ ADD NAME=DDD4     0100-03065-03065-2223-00220-00220-00000-DYNALLC\n         MACRO\n         DDD4  &SYSOUT,&DEST,&HOLD,&COPIES,&OUTLIM,&FCB,&UCS,          *\n               &BURST,&CHARS,&FLASH,&MODIFY\n         LCLA  &A,&K\n         LCLC  &C,&D\n         AIF   ('&SYSOUT' EQ '').SYSOUTX\n         AIF   (N'&SYSOUT GT 3).ERRSYS9\n&C       SETC  '&SYSOUT(1)'\n         AIF   ('&C' EQ '').SYSOU1X\n         AIF   ('&C' NE '*').SYSOUT1\n         DDD0  =Y(X'18',0),,,,'SYSOUT=*'\n         AGO   .SYSOU1X\n.SYSOUT1 AIF   ('&C'(K'&C,1) NE '@').SYSO1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'18',1,1),1,&C,'SYSOUT=CL1 AT &C'\n         AGO   .SYSOU1X\n.SYSO1@X DDD0  X'00180001',&C,1,,'SYSOUT=&C'\n.SYSOU1X AIF   (N'&SYSOUT LT 2).SYSOUTX\n&C       SETC  '&SYSOUT(2)'\n         AIF   ('&C' EQ '').SYSOU2X\n         AIF   ('&C'(K'&C,1) NE '@').SYSO2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'19',1,8),8,&C,'SYSOUT=(,CL8 AT &C)'\n         AGO   .SYSOU2X\n.SYSO2@X DDD0  X'00190001',&C,8,,'SYSOUT=(,&C)'\n.SYSOU2X AIF   ('&SYSOUT(3)' EQ '').SYSOUTX\n&C       SETC  '&SYSOUT(3)'\n         AIF   ('&C'(K'&C,1) NE '@').SYSO3@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1A',1,4),4,&C,'SYSOUT=(,,CL4 AT &C)'\n         AGO   .SYSOUTX\n.SYSO3@X DDD0  X'001A0001',&C,4,,'SYSOUT=(,,&C)'\n.SYSOUTX AIF   ('&DEST' EQ '').DESTX\n&C       SETC  '&DEST'\n         AIF   ('&C'(K'&C,1) NE '@').DEST@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'58',1,7),7,&C,'DEST=CL7 AT &C'\n         AGO   .DESTX\n.DEST@X  DDD0  X'00580001',&C,7,,'DEST=&C'\n.DESTX   AIF   ('&HOLD' EQ '' OR '&HOLD' EQ 'NO').HOLDX\n         AIF   ('&HOLD' NE 'YES').ERRHOLD\n         DDD0  =Y(X'59',0),,,,'HOLD=YES'\n.HOLDX   AIF   ('&COPIES' EQ '').COPIESX\n         AIF   (N'&COPIES GT 2).ERRCOP9\n&C       SETC  '&COPIES(1)'\n         AIF   ('&C' EQ '').COPIE1X\n         AIF   ('&C'(K'&C,1) NE '@').COPIE@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'1D',1,1),1,&C,'COPIES=AL1 AT &C'\n         AGO   .COPIE1X\n.COPIE@X DDD0  7,=AL1(0,X'1D',0,1,0,1,&C),,,'COPIES=&C'\n.COPIE1X AIF   (N'&COPIES LT 2).COPIESX\n&C       SETC  '&COPIES(2)'\n         AIF   ('&C'(1,1) EQ '(').COPIES2\n         DDD0  7,=AL1(0,X'66',0,1,0,1,&C),,,'COPIES=(,&C)  GROUP VALUE'\n         AGO   .COPIESX\n.COPIES2 ANOP\n&A       SETA  2\n.COPLOOP AIF   ('&C'(&A,1) EQ ',').COPLOPX\n&A       SETA  &A+1\n         AIF   (&A LT K'&C).COPLOOP\n.COPLOPX ANOP\n&D       SETC  '&D,0,1,'.'&C'(2,&A-2)\n&C       SETC  '&C'(&A,K'&C-&A+1)\n&K       SETA  &K+1\n         AIF   (K'&C GT 1).COPIES2\n&A       SETA  &K*3+4\n         DDD0  &A,=AL1(0,X'66',0,&K&D),,,'COPIES=(,&COPIES(2))  GROUP V*\n               ALUES'\n.COPIESX AIF   ('&OUTLIM' EQ '').OUTLIMX\n         AIF   ('&OUTLIM'(K'&OUTLIM,1) NE '@').OUTLI@X\n&C       SETC  '&OUTLIM'(1,K'&OUTLIM-1)\n         DDD0  6,=Y(X'1B',1,3),3,&C,'OUTLIM=AL3 AT &C'\n         AGO   .OUTLIMX\n.OUTLI@X DDD0  9,=AL3(X'001B00',X'010003',&OUTLIM),,,'OUTLIM=&OUTLIM'\n.OUTLIMX AIF   ('&FCB' EQ '').FCBX\n         AIF   (N'&FCB GT 2).ERRFCB9\n&C       SETC  '&FCB(1)'\n         AIF   ('&C' EQ '').FCB1X\n         AIF   ('&C'(K'&C,1) NE '@').FCB1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'25',1,4),4,&C,'FCB=(CL4 AT &C)'\n         AGO   .FCB1X\n.FCB1@X  DDD0  X'00250001',&FCB(1),4,,'FCB=(&FCB(1))'\n.FCB1X   AIF   ('&FCB(2)' EQ '').FCBX\n&C       SETC  '&FCB(2)'\n         AIF   ('&C' NE 'VERIFY').FCB2A\n         DDD0  7,=AL1(0,X'26',0,1,0,1,X'04'),,,'FCB=(,VERIFY)'\n         AGO   .FCBX\n.FCB2A   AIF   ('&C' NE 'ALIGN').FCB2@\n         DDD0  7,=AL1(0,X'26',0,1,0,1,X'08'),,,'FCB=(,ALIGN)'\n         AGO   .FCBX\n.FCB2@   AIF   ('&C'(K'&C,1) NE '@').ERRFCB\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'26',1,1),1,&C,'FCB=(,XL1 AT &C)'\n.FCBX    AIF   ('&UCS' EQ '').UCSX\n         AIF   (N'&UCS GT 3).ERRUCS9\n&C       SETC  '&UCS(1)'\n         AIF   ('&C' EQ '').UCS1X\n         AIF   ('&C'(K'&C,1) NE '@').UCS1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'29',1,4),4,&C,'UCS=(CL4 AT &C)'\n         AGO   .UCS1X\n.UCS1@X  DDD0  X'00290001',&C,4,,'UCS=(&C)'\n.UCS1X   AIF   ('&UCS(2)' EQ '').UCS2X\n         AIF   ('&UCS(2)' NE 'FOLD').ERRUCS2\n         DDD0  =Y(X'2A',0),,,,'UCS=(,FOLD)'\n.UCS2X   AIF   ('&UCS(3)' EQ '').UCSX\n         AIF   ('&UCS(3)' NE 'VERIFY').ERRUCS3\n         DDD0  =Y(X'2B',0),,,,'UCS=(,,VERIFY)'\n.UCSX    AIF   ('&BURST' EQ '').BURSTX\n         AIF   ('&BURST' NE 'YES' AND '&BURST' NE 'Y').BURSTYX\n         DDD0  7,=AL1(0,X'64',0,1,0,1,X'02'),,,'BURST=&BURST'\n         AGO   .BURSTX\n.BURSTYX AIF   ('&BURST' NE 'NO' AND '&BURST' NE 'N').BURSTNX\n         DDD0  7,=AL1(0,X'64',0,1,0,1,X'04'),,,'BURST=&BURST'\n         AGO   .BURSTX\n.BURSTNX AIF   ('&BURST'(K'&BURST,1) NE '@').ERRBURS\n&C       SETC  '&BURST'(1,K'&BURST-1)\n         DDD0  6,=Y(X'64',1,1),1,&C,'BURST=XL1 AT &C'\n.BURSTX  AIF   ('&CHARS' EQ '').CHARSX\n         AIF   (N'&CHARS GT 1).CHARMUL\n&C       SETC  '&CHARS(1)'\n         AIF   ('&C'(K'&C,1) NE '@').CHARS@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'65',1,4),4,&C,'CHARS=CL4 AT &C'\n         AGO   .CHARSX\n.CHARS@X DDD0  X'00650001',&C,4,,'CHARS=&CHARS'\n         AGO   .CHARSX\n.CHARMUL AIF   (N'&CHARS GT 4).ERRCHA9\n&C       SETC  ''\n.CHLOOP  ANOP\n&A       SETA  &A+1\n         AIF   (K'&CHARS(&A) LT 1).ERRCHA1\n         AIF   ('&CHARS(&A)'(K'&CHARS(&A),1) EQ '@').ERRCHA@\n         AIF   (K'&CHARS(&A) GT 4).ERRCHA4\n&C       SETC  '&C,4,C'''.'&CHARS(&A) '(1,2).''',C'''.'&CHARS(&A)   '(3*\n               ,2).''''\n         AIF   (&A LT N'&CHARS).CHLOOP\n&C       SETC  '&A&C'\n&A       SETA  &A*6+4\n         DDD0  &A,=AL2(X'65',&C),,,'CHARS=&CHARS'\n.CHARSX  AIF   ('&FLASH' EQ '').FLASHX\n         AIF   (N'&FLASH GT 2).ERRFLS9\n&C       SETC  '&FLASH(1)'\n         AIF   ('&C' EQ '').FLASH1X\n         AIF   ('&C'(K'&C,1) NE '@').FLAS1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'67',1,4),4,&C,'UCS=(CL4 AT &C)'\n         AGO   .FLASH1X\n.FLAS1@X DDD0  X'00670001',&C,4,,'FLASH=(&C)'\n.FLASH1X AIF   (N'&FLASH LT 2).FLASHX\n&C       SETC  '&FLASH(2)'\n         AIF   ('&C'(K'&C,1) NE '@').FLSH2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'68',1,1),1,&C,'FLASH=(,AL1 AT &C)  FORMS OVERLAY *\n               COUNT'\n         AGO   .FLASHX\n.FLSH2@X DDD0  7,=AL1(0,X'68',0,1,0,1,&C),,,'FLASH=(,&C)  FORMS OVERLAY*\n                COUNT'\n.FLASHX  AIF   ('&MODIFY' EQ '').MODIFYX\n         AIF   (N'&MODIFY GT 2).ERRMOD9\n&C       SETC  '&MODIFY(1)'\n         AIF   ('&C' EQ '').MODIF1X\n         AIF   ('&C'(K'&C,1) NE '@').MODI1@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'69',1,4),4,&C,'MODIFY=(CL4 AT &C)'\n         AGO   .MODIF1X\n.MODI1@X DDD0  X'00690001',&C,4,,'MODIFY=(&C)'\n.MODIF1X AIF   (N'&MODIFY LT 2).MODIFYX\n&C       SETC  '&MODIFY(2)'\n         AIF   ('&C'(K'&C,1) NE '@').MODI2@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'6A',1,1),1,&C,'MODIFY=(,XL1 AT &C)  TABLE REFEREN*\n               CE CHARACTER'\n         AGO   .MODIFYX\n.MODI2@X DDD0  7,=AL1(0,X'6A',0,1,0,1,&C),,,'MODIFY=(,&C)  TABLE REFERE*\n               NCE CHARACTER'\n.MODIFYX MEXIT\n.ERRSYS9 MNOTE 8,'ONLY THREE SUBPARAMETERS ALLOWED IN SYSOUT=&SYSOUT.. *\n               SYSOUT IGNORED.'\n         AGO   .SYSOUTX\n.ERRHOLD MNOTE 8,'HOLD=&HOLD INVALID. HOLD IGNORED.'\n         AGO   .HOLDX\n.ERRCOP9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN COPIES=&COPIES.. CO*\n               PIES IGNORED.'\n         AGO   .COPIESX\n.ERRFCB9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN FCB=&FCB.. FCB IGNO*\n               RED.'\n         AGO   .FCBX\n.ERRFCB  MNOTE 8,'INVALID VALUE, FCB=(,&C). IGNORED.'\n         AGO   .FCBX\n.ERRUCS9 MNOTE 8,'ONLY THREE SUBPARAMETERS ALLOWED IN UCS=&UCS.. UCS IG*\n               NORED.'\n         AGO   .UCSX\n.ERRUCS2 MNOTE 8,'INVALID VALUE, UCS=(,&UCS(2)). IGNORED.'\n         AGO   .UCS2X\n.ERRUCS3 MNOTE 8,'INVALID VALUE, UCS=(,,&UCS(3)). IGNORED.'\n         AGO   .UCSX\n.ERRBURS MNOTE 8,'BURST=&BURST INVALID. BURST IGNORED.'\n         AGO   .BURSTX\n.ERRCHA1 MNOTE 8,'NULL SUBPARAMETER IN CHARS=&CHARS NOT ALLOWED. CHARS *\n               IGNORED.'\n         AGO   .CHARSX\n.ERRCHA@ MNOTE 8,'ONLY ONE CHARACTER ARRANGEMENT TABLE NAME MAY BE SPEC*\n               IFIED WHEN USING ''@''. CHARS=&CHARS IGNORED.'\n         AGO   .CHARSX\n.ERRCHA4 MNOTE 8,'CHARACTER ARRANGEMENT TABLE NAMES MUST BE ONE TO FOUR*\n                CHARACTERS LONG. CHARS=&CHARS IGNORED.'\n         AGO   .CHARSX\n.ERRCHA9 MNOTE 8,'ONLY FOUR SUBPARAMETERS ALLOWED IN CHARS=&CHARS.. CHA*\n               RS IGNORED.'\n         AGO   .CHARSX\n.ERRFLS9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN FLASH=&FLASH.. FLAS*\n               H IGNORED.'\n         AGO   .FLASHX\n.ERRMOD9 MNOTE 8,'ONLY TWO SUBPARAMETERS ALLOWED IN MODIFY=&MODIFY.. MO*\n               DIFY IGNORED.'\n         AGO   .MODIFYX\n         MEND\n./ ADD NAME=DDD5     0100-03065-03065-2223-00110-00110-00000-DYNALLC\n         MACRO\n         DDD5  &DDNAME,&DSN,&DSNAME,&DISP\n         GBLB  &RTDDN,&CONCATB\n         LCLA  &A,&X\n         LCLC  &C,&D\n         AIF   ('&DDNAME' EQ '' OR '&DDNAME' EQ 'RETURN').DDNAMEQ\n         AIF   ('&DDNAME'(K'&DDNAME,1) NE '@').DDNAM@X\n&C       SETC  '&DDNAME'(1,K'&DDNAME-1)\n         DDD0  6,=Y(X'01',1,8),8,&C,'DDNAME CL8 AT &C'\n         AGO   .DDNAMEQ\n.DDNAM@X DDD0  X'00010001',&DDNAME,8,,'DDNAME IS &DDNAME'\n.DDNAMEQ AIF   (NOT &CONCATB AND '&DDNAME' NE 'RETURN').DDNAMEX\n         MVC   ALORTDDN(14),=Y(X'55',1,8,C'  ',C'  ',C'  ',C'  ')\n         DDD0  ALORTDDN,,,,'RETURN THE DDNAME'\n&RTDDN   SETB  1\n.DDNAMEX AIF   ('&DSN&DSNAME' EQ '').DSNAMEX\n&C       SETC  '&DSN'\n         AIF   ('&DSNAME' EQ '').DSNAMEB\n         AIF   ('&DSN' NE '').ERRDSN\n&C       SETC  '&DSNAME'\n.DSNAMEB AIF   ('&C'(1,1) EQ '*').ERRDREF\n&A       SETA  K'&C\n         AIF   ('&C'(&A,1) NE ')').DSNAME\n.MEMLOOP AIF   (&A LE 1).ERRMEM\n&A       SETA  &A-1\n         AIF   ('&C'(&A,1) NE ')').PARENX\n&X       SETA  &X+1\n.PARENX  AIF   ('&C'(&A,1) NE '(').MEMLOOP\n&X       SETA  &X-1\n         AIF   (&X GE 0).MEMLOOP\n&D       SETC  '&C'(&A+1,K'&C-&A-1)\n         AIF   ('&D'(K'&D,1) NE '@').MEMBE@X\n&D       SETC  '&D'(1,K'&D-1)\n         DDD0  6,=Y(X'03',1,8),8,&D,'DSN=...(CL8 AT &D)'\n         AGO   .MEMBERX\n.MEMBE@X DDD0  X'00030001',&D,8,,'DSN=...(&D)'\n.MEMBERX AIF   (&A  EQ 1).DSNAMEX\n&C       SETC  '&C'(1,&A-1)\n.DSNAME  AIF   ('&C'(K'&C,1) NE '@').DSNAM@X\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'02',1,44),44,&C,'DSNAME=CL44 AT &C'\n         AGO   .DSNAMEX\n.DSNAM@X DDD0  X'00020001',&C,44,,'DSN=&C'\n.DSNAMEX AIF   ('&DISP' EQ '').DISPX\n&C       SETC  '&DISP(1)'\n         AIF   ('&C' EQ '').STATUSX\n         AIF   ('&C' NE 'SHR' AND '&C' NE 'SHARE').STATUSA\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'08'),,,'DISP=(&C)'\n         AGO   .STATUSX\n.STATUSA AIF   ('&C' NE 'OLD').STATUSB\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'01'),,,'DISP=(OLD)'\n         AGO   .STATUSX\n.STATUSB AIF   ('&C' NE 'NEW').STATUSC\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'04'),,,'DISP=(NEW)'\n         AGO   .STATUSX\n.STATUSC AIF   ('&C' NE 'MOD').STATUSD\n         DDD0  7,=AL1(0,X'04',0,1,0,1,X'02'),,,'DISP=(MOD)'\n         AGO   .STATUSX\n.STATUSD AIF   ('&C'(K'&C,1) NE '@').ERRSTA\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'04',1,1),1,&C,'DISP=(XL1 AT &C)'\n.STATUSX AIF   ('&DISP(2)' EQ '').NDISPX\n&C       SETC  '&DISP(2)'\n         AIF   ('&C' NE 'CATLG').NDISPA\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'02'),,,'DISP=(,CATLG)'\n         AGO   .NDISPX\n.NDISPA  AIF   ('&C' NE 'DELETE').NDISPK\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'04'),,,'DISP=(,DELETE)'\n         AGO   .NDISPX\n.NDISPK  AIF   ('&C' NE 'KEEP').NDISPU\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'08'),,,'DISP=(,KEEP)'\n         AGO   .NDISPX\n.NDISPU  AIF   ('&C' NE 'UNCATLG').NDISP@\n         DDD0  7,=AL1(0,X'05',0,1,0,1,X'01'),,,'DISP=(,UNCATLG)'\n         AGO   .NDISPX\n.NDISP@  AIF   ('&C'(K'&C,1) NE '@').ERRNDIS\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'05',1,1),1,&C,'DISP=(,XL1 AT &C)'\n.NDISPX  AIF   ('&DISP(3)' EQ '').DISPX\n&C       SETC  '&DISP(3)'\n         AIF   ('&C' NE 'CATLG').CDISPA\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'02'),,,'DISP=(,,CATLG)'\n         AGO   .DISPX\n.CDISPA  AIF   ('&C' NE 'DELETE').CDISPB\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'04'),,,'DISP=(,,DELETE)'\n         AGO   .DISPX\n.CDISPB  AIF   ('&C' NE 'KEEP').CDISPU\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'08'),,,'DISP=(,,KEEP)'\n         AGO   .DISPX\n.CDISPU  AIF   ('&C' NE 'UNCATLG').CDISP@\n         DDD0  7,=AL1(0,X'06',0,1,0,1,X'01'),,,'DISP=(,,UNCATLG)'\n         AGO   .DISPX\n.CDISP@  AIF   ('&C'(K'&C,1) NE '@').ERRCDIS\n&C       SETC  '&C'(1,K'&C-1)\n         DDD0  6,=Y(X'06',1,1),1,&C,'DISP=(,,XL1 AT &C)'\n.DISPX   MEXIT\n.ERRDSN  MNOTE 12,'BOTH DSN= AND DSNAME= SPECIFIED. BOTH IGNORED.'\n         AGO   .DSNAMEX\n.ERRDREF MNOTE 8,'DSNAME BY DDNAME REFERENCE IN DSN=&C NOT SUPPORTED BY*\n                DYNAMIC ALLOCATION. DSN IGNORED.'\n         AGO   .DSNAMEX\n.ERRMEM  MNOTE 12,'INVALID DSNAME, &C'\n         AGO   .DSNAMEX\n.ERRSTA  MNOTE 12,'INVALID FIRST DISP PARAMETER, &C'\n         AGO   .STATUSX\n.ERRNDIS MNOTE 12,'INVALID SECOND DISP PARAMETER, &C'\n         AGO   .NDISPX\n.ERRCDIS MNOTE 12,'INVALID THIRD DISP VALUE, &C'\n         AGO   .DISPX\n         MEND\n./ ADD NAME=DDI      0100-03065-03065-2223-00093-00093-00000-DYNALLC\n         MACRO\n&DDNAME  DDI   &DISP=,                                                 *\n               &KEYADDS=,&EXIT=ALODFAIL\n         GBLA  &X,&Y,&H,&N,&R\n         GBLB  &DDDFAIL,&DDDD\n         LCLA  &A,&AD1,&AD2,&AD3\n         LCLC  &C,&CD1,&CD2,&CD3\n         AIF   (&DDDD).ERRDDDD\n&X       SETA  20 DISPLACEMENT FROM ALOBLOCK TO FIRST TEXT UNIT POINTER\n&Y       SETA  20         NEGATIVE DISTANCE FROM ALOBLOCK TO FIRST DATA\n&R       SETA  14                      FIRST REGISTER LOADED\n         DDD5  &DDNAME\n         AIF   ('&DISP' EQ '').DISPX\n&C       SETC  '&DISP(1)'\n         AIF   ('&C' EQ '').DISP1X\n         AIF   ('&C'(K'&C,1) EQ '@').DISP1@\n         MNOTE 8,'DISP=( ) MUST BE INDIRECT ADDRESS. DISP=(&C) IGNORED.*\n               '\n         AGO   .DISP1X\n.DISP1@  ANOP\n&CD1     SETC  '&C'(1,K'&C-1)\n         DDD0  7,=AL1(0,X'07',0,1,0,1,0),,,                            *\n               'DISP=(XL1 RETURNED AT &CD1)'\n&AD1     SETA  &Y-6\n.DISP1X  ANOP\n&C       SETC  '&DISP(2)'\n         AIF   ('&C' EQ '').DISP2X\n         AIF   ('&C'(K'&C,1) EQ '@').DISP2@\n         MNOTE 8,'DISP=(, ) MUST BE INDIRECT ADDRESS. DISP=(,&C) IGNORE*\n               D.'\n         AGO   .DISP2X\n.DISP2@  ANOP\n&CD2     SETC  '&C'(1,K'&C-1)\n         DDD0  7,=AL1(0,X'08',0,1,0,1,0),,,                            *\n               'DISP=(,XL1 RETURNED AT &CD2)'\n&AD2     SETA  &Y-6\n.DISP2X  ANOP\n&C       SETC  '&DISP(3)'\n         AIF   ('&C' EQ '').DISPX\n         AIF   ('&C'(K'&C,1) EQ '@').DISP3@\n         MNOTE 8,'DISP=(,, ) MUST BE INDIRECT ADDRESS. DISP=(,,&C) IGNO*\n               RED.'\n         AGO   .DISPX\n.DISP3@  ANOP\n&CD3     SETC  '&C'(1,K'&C-1)\n         DDD0  7,=AL1(0,X'09',0,1,0,1,0),,,                            *\n               'DISP=(,,XL1 RETURNED AT &CD3)'\n&AD3     SETA  &Y-6\n.DISPX   AIF   ('&KEYADDS' EQ '').KEYADDX\n&A       SETA  0\n.KEYLOOP AIF   (&A GE N'&KEYADDS).KEYADDX\n&A       SETA  &A+1\n&C       SETC  '&KEYADDS(&A)'\n         AIF   ('&C' EQ '').KEYLOOP\n         AIF   ('&C'(1,1) EQ '(').KEYADDR\n         DDD0  &C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDR DDD0  0&C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDX AIF   (&R NE 14).R14X\n&X       SETA  &X-4\n         AGO   .RX\n.R14X    AIF   (&R NE 15).R15X\n         ST    14,ALOBLOCK+&X\n         AGO   .RX\n.R15X    AIF   (&R NE 0).R0X\n         STM   14,15,ALOBLOCK+&X\n&X       SETA  &X+4\n         AGO   .RX\n.R0X     STM   14,0,ALOBLOCK+&X\n&X       SETA  &X+8\n.RX      OI    ALOBLOCK+&X,X'80'        SET END OF TEXT UNIT ADDR LIST\n         LA    0,X'0700'                LOAD VERB, FLAGS1\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n&DDDFAIL SETB  ('&EXIT' EQ 'ALODFAIL' OR &DDDFAIL)\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n         SPACE 1\n         AIF   (&AD1 EQ 0).D1X\n         MVC   &CD1.(1),ALOBLOCK-&AD1\n.D1X     AIF   (&AD2 EQ 0).D2X\n         MVC   &CD2.(1),ALOBLOCK-&AD2\n.D2X     AIF   (&AD3 EQ 0).D3X\n         MVC   &CD3.(1),ALOBLOCK-&AD3\n.D3X     AIF   (&H GE &Y).HX\n&H       SETA  &Y\n.HX      AIF   (&N GE &X).NX\n&N       SETA  &X\n.NX      MEXIT\n.ERRDDDD MNOTE 12,'DDI MAY NOT BE ISSUED AFTER DDDD'\n         MEND\n./ ADD NAME=DDTU     0100-03065-03065-2223-00271-00271-00000-DYNALLC\n         MACRO                                                          01675\n&DDNAME  DDTU  &DUMMY,&DSN=,&DSNAME=,&DISP=,&TERM=,&FREE=,             *01676*92\n               &UNIT=,&SPACE=,&MSVGP=,&VOL=,&LABEL=,&PROTECT=,         *01677*92\n               &DCB=,&SUBSYS=,                                         *01678*92\n               &SYSOUT=,&DEST=,&HOLD=,&COPIES=,&OUTLIM=,&FCB=,&UCS=,   *01679*90\n               &PASWORD=                                                01680*90\n         LCLA  &K,&A                                                    01681*53\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6                              01682*90\n         LCLC  &C,&D                                                    01683\n         AIF   ('&DDNAME' EQ '' OR '&DDNAME' EQ 'RETURN').DDNAMEQ       01684*90\n&DDNAME  DC    Y(X'01',1,8)            DDNAME                           01685*92\n.DDNAMEQ AIF   ('&DDNAME' NE 'RETURN').DDNAMEX                          01686*90\nRETURN   DC    Y(X'55',1,8)            RETURN THE DDNAME                01687*90\n.DDNAMEX AIF   ('&DSN&DSNAME' EQ '').DSNAMEX                            01688*90\n&C       SETC  '&DSN'                                                   01689*90\n         AIF   ('&DSNAME' EQ '').DSNAMEB                                01690*90\n         AIF   ('&DSN' NE '').ERRDSN                                    01691*90\n&C       SETC  '&DSNAME'                                                01692*90\n.DSNAMEB ANOP                                                           01693*90\n&A       SETA  K'&C                                                     01694*90\n         AIF   ('&C'(&A,1) NE ')').DSNAME                               01695*90\n.MEMLOOP AIF   (&A LE 1).ERRMEM                                         01696*92\n&A       SETA  &A-1                                                     01697*90\n         AIF   ('&C'(&A,1) NE '(').MEMLOOP                              01698*90\n&D       SETC  '&C'(&A+1,K'&C-&A-1)                                     01699*92\n&D       DC    Y(X'03',1,8)            DSN=...( )                       01700*92\n&C       SETC  '&C'(1,&A-1)                                             01701*92\n.DSNAME  AIF   ('&C' EQ '').DSNAMEX                                     01702*90\n&C       DC    Y(X'02',1,44)           DSN=                             01703*92\n.DSNAMEX AIF   ('&DISP' EQ '').DISPX                                    01704*90\n         AIF   ('&DISP(1)' EQ '').STATUSX                               01705*90\n&DISP(1) DC    Y(X'04',1,1)             DISP=( )                        01706*92\n.STATUSX AIF   ('&DISP(2)' EQ '').NDISPX                                01707*90\n&DISP(2) DC    Y(X'05',1,1)             DISP=(, )                       01708*92\n.NDISPX  AIF   (N'&DISP LT 3).DISPX                                     01709*90\n&DISP(3) DC    Y(X'06',1,1)             DISP=(,, )                      01710*92\n.DISPX   AIF   ('&TERM' EQ '').TERMX                                    01711*90\n&TERM    DC    Y(X'28',0)              TERM=TS                          01712*90\n.TERMX   AIF   ('&FREE' EQ '').FREEX                                    01713*90\n&FREE    DC    Y(X'1C',0)              FREE=CLOSE                       01714*90\n.FREEX   AIF   ('&UNIT&SPACE&MSVGP' EQ '').DDD1X                        01715*90\n         AIF   ('&UNIT' EQ '').UNITX                                    01716*90\n         AIF   ('&UNIT(1)' EQ '').UNIT1X                                01717*90\n&UNIT(1) DC    Y(X'15',1,8)            UNIT=( )                         01718*90\n.UNIT1X  AIF   ('&UNIT(2)' EQ '').UNIT2X                                01719*90\n         AIF   ('&UNIT(2)' NE 'P').UNITC                                01720*90\nP        DC    Y(X'17',0)              UNIT=(,P)  PARALLEL MOUNT        01721*90\n         AGO   .UNIT2X                                                  01722*90\n.UNITC   ANOP                                                           01723*90\n&UNIT(2) DC    Y(X'16',1,1)            UNIT=(, )  UNIT COUNT            01724*90\n.UNIT2X  AIF   ('&UNIT(3)' EQ '').UNITX                                 01725*90\n         MNOTE 8,'UNIT=(,,DEFER) NOT SUPPORTED BY DYNAMIC ALLOCATION.'  01726*90\n.UNITX   AIF   ('&SPACE' EQ '').SPACEX                                  01727*90\n&C       SETC  '&SPACE(1)'                                              01728*90\n         AIF   ('&C' EQ '').SPACE2                                      01729*90\n         AIF   ('&C' NE 'TRK').SPACE1C                                  01730*90\nTRK      DC    Y(X'07',0)              SPACE=(TRK)                      01731*92\n         AGO   .SPACE2                                                  01732*90\n.SPACE1C AIF   ('&C' NE 'CYL').SPACE1A                                  01733*90\nCYL      DC    Y(X'08',0)              SPACE=(CYL)                      01734*92\n         AGO   .SPACE2                                                  01735*90\n.SPACE1A ANOP                                                           01736*90\n&C       DC    Y(X'09',1,3)            SPACE=( )                        01737*92\n.SPACE2  AIF   ('&SPACE(2)' EQ '').SPACE2X                              01738*90\n&C       SETC  '&SPACE(2)'                                              01739*90\n         AIF   ('&C'(1,1) NE '(').SPACE2W                               01740*90\n&K       SETA  2                                                        01741*90\n.SPACE2A AIF   ('&C'(&K,1) EQ ',').SPACE2B                              01742*90\n&K       SETA  &K+1                                                     01743*90\n         AIF   (&K LT K'&C).SPACE2A                                     01744*90\n.SPACE2B AIF   (&K EQ 2).SPACE2C                                        01745*92\n&D       SETC  '&C'(2,&K-2)                                             01746*92\n&D       DC    Y(X'0A',1,3)            SPACE=(,( ))                     01747*90\n.SPACE2C AIF   (&K GE K'&C).SPACE2X                                     01748*90\n&K       SETA  &K+1                                                     01749*90\n&A       SETA  &K                                                       01750*90\n.SPACE2D AIF   ('&C'(&K,1) EQ ',').SPACE2E                              01751*90\n&K       SETA  &K+1                                                     01752*90\n         AIF   (&K LT K'&C).SPACE2D                                     01753*90\n.SPACE2E AIF   (&K EQ &A).SPACE2F                                       01754*90\n&D       SETC  '&C'(&A,&K-&A)                                           01755*90\n&D       DC    Y(X'0B',1,3)            SPACE=(,(, ))                    01756*90\n.SPACE2F AIF   (&K GE K'&C).SPACE2X                                     01757*90\n&K       SETA  &K+1                                                     01758*90\n         AIF   (&K GE K'&C).SPACE2X                                     01759*90\n&A       SETA  &K                                                       01760*90\n.SPACE2G AIF   ('&C'(&K,1) EQ ',').ERRSPA2                              01761*90\n&K       SETA  &K+1                                                     01762*90\n         AIF   (&K LT K'&C).SPACE2G                                     01763*90\n&D       SETC  '&C'(&A,&K-&A)                                           01764*90\n&D       DC    Y(X'0C',1,3)            SPACE=(,(,, ))                   01765*90\n         AGO   .SPACE2X                                                 01766*90\n.SPACE2W ANOP                                                           01767*90\n&C       DC    Y(X'0A',1,3)            SPACE=(,( ))                     01768*90\n.SPACE2X AIF   (N'&SPACE LE 3).SPACE3                                   01769*90\n&C       SETC  '&SPACE(5)'                                              01770*90\n&D       SETC  '&SPACE(4)'                                              01771*90\n         AIF   ('&C' EQ '').SPACE4                                      01772*90\n&C       DC    Y(X'0F',0)              SPACE=(,,,,ROUND)                01773*90\n.SPACE4  AIF   ('&D' EQ '').SPACE3                                      01774*90\n&D       DC    Y(X'0E',1,1)            SPACE=(,,, )                     01775*90\n.SPACE3  AIF   ('&SPACE(3)' EQ '').SPACEX                               01776*90\n&C       SETC  '&SPACE(3)'                                              01777*90\n&C       DC    Y(X'0D',0)              SPACE=(,,RLSE)                   01778*90\n.SPACEX  AIF   ('&MSVGP' EQ '').MSVGPX                                  01779*90\n&MSVGP   DC    Y(X'5E',1,8)            MSVGP=                           01780*90\n.MSVGPX  ANOP                                                           01781*90\n.DDD1X   AIF   ('&VOL&LABEL&PROTECT' EQ '').DDD2X                       01782*92\n         AIF   ('&VOL' EQ '').VOLX                                      01783*90\n&C       SETC  '&VOL(N'&VOL)'                                           01784*90\n         AIF   ('&C'(1,4) NE 'SER=').VOLREF                             01785*90\n&C       SETC  '&C'(5,K'&C-4)                                           01786*90\n&C       DC    Y(X'10',1,6)            VOL=SER=                         01787*90\n         AGO   .VOLKEYX                                                 01788*90\n.VOLREF  AIF   ('&C'(1,4) NE 'REF=').VOL4                               01789*90\n&C       SETC  '&C'(5,K'&C-4)                                           01790*90\n&C       DC    Y(X'14',1,44)           VOL=REF=                         01791*90\n.VOLKEYX AIF   (N'&VOL LE 1).VOLX                                       01792*90\n         AIF   (N'&VOL LE 2).VOL2X                                      01793*90\n         AIF   (N'&VOL LE 3).VOL3X                                      01794*90\n         AIF   (N'&VOL LE 4).VOL4X                                      01795*90\n.VOL4    AIF   ('&VOL(4)' EQ '').VOL4X                                  01796*90\n&VOL(4)  DC    Y(X'13',1,1)            VOL=(,,, )                       01797*90\n.VOL4X   AIF   ('&VOL(3)' EQ '').VOL3X                                  01798*90\n&VOL(3)  DC    Y(X'12',1,2)            VOL=(,, )                        01799*90\n.VOL3X   AIF   ('&VOL(2)' EQ '').VOL2X                                  01800*90\n         MNOTE 8,'VOL=(,RETAIN) NOT SUPPORTED BY DYNAMIC ALLOCATION'    01801*90\n.VOL2X   AIF   ('&VOL(1)' EQ '').VOLX                                   01802*90\n&VOL(1)  DC    Y(X'11',0)              VOL=(PRIVATE)                    01803*90\n.VOLX    AIF   ('&LABEL' EQ '').LABELX                                  01804*90\n&C       SETC  '&LABEL(N'&LABEL)'                                       01805*90\n         AIF   ('&C'(1,6) NE 'EXPDT=').LABELEX                          01806*90\n&C       SETC  '&C'(7,K'&C-6)                                           01807*90\n&C       DC    Y(X'22',1,5)            LABEL=EXPDT=                     01808*90\n         AGO   .LABKEYX                                                 01809*90\n.LABELEX AIF   ('&C'(1,6) NE 'RETPD=').LABELRX                          01810*90\n&C       SETC  '&C'(7,K'&C-6)                                           01811*90\n&C       DC    Y(X'23',1,2)            LABEL=RETPD=                     01812*90\n.LABKEYX AIF   (N'&LABEL LE 1).LABELX                                   01813*90\n         AIF   (N'&LABEL LE 2).LABEL2X                                  01814*90\n         AIF   (N'&LABEL LE 3).LABEL3X                                  01815*90\n         AIF   (N'&LABEL LE 4).LABEL4X                                  01816*90\n.LABELRX AIF   ('&LABEL(4)' EQ '').LABEL4X                              01817*90\n&C       SETC  '&LABEL(4)'                                              01818*90\n&C       DC    Y(X'21',1,1)            LABEL=(,,, )                     01819*90\n.LABEL4X AIF   ('&LABEL(3)' EQ '').LABEL3X                              01820*90\n&C       SETC  '&LABEL(3)'                                              01821*90\n&C       DC    Y(X'20',1,1)            LABEL=(,, )                      01822*90\n.LABEL3X AIF   ('&LABEL(2)' EQ '').LABEL2X                              01823*90\n&C       SETC  '&LABEL(2)'                                              01824*90\n&C       DC    Y(X'1E',1,1)            LABEL=(, )                       01825*90\n.LABEL2X AIF   ('&LABEL(1)' EQ '').LABELX                               01826*90\n&C       SETC  '&LABEL(1)'                                              01827*90\n&C       DC    Y(X'1F',1,2)            LABEL=( )                        01828*90\n.LABELX  AIF   ('&PROTECT' EQ '').PROTECX                               01829*92\n&PROTECT DC    Y(X'61',0)              PROTECT=YES                      01830*92\n.PROTECX ANOP                                                           01831*92\n.DDD2X   AIF   ('&DUMMY&DCB&SUBSYS' EQ '').DDD3X                        01832*92\n         AIF   ('&DUMMY' EQ '').DUMMYX                                  01833*90\n&DUMMY   DC    Y(X'24',0)              DUMMY                            01834*90\n.DUMMYX  AIF   ('&DCB' EQ '').DCBX                                      01835*90\n&A       SETA  N'&DCB+1                                                 01836*90\n.DCBLOOP AIF   (&A LE 1).DCBX                                           01837*90\n&A       SETA  &A-1                                                     01838*90\n&C       SETC  '&DCB(&A)'                                               01839*90\n         AIF   (K'&C LE 5).DCB4                                         01840*90\n         AIF   ('&C'(1,8) NE 'BLKSIZE=').BLKSIZX                        01841*90\n&C       SETC  '&C'(9,K'&C-8)                                           01842*90\n&C       DC    Y(X'30',1,2)            DCB=BLKSIZE=                     01843*92\n         AGO   .DCBLOOP                                                 01844*90\n.BLKSIZX AIF   ('&C'(6,1) NE '=').DCB7                                  01845*90\n&D       SETC  '&C'(7,K'&C-6)                                           01846*90\n&C       SETC  '&C'(1,5)                                                01847*90\n         AIF   ('&C' NE 'BUFNO').BUFNOX                                 01848*90\n&D       DC    Y(X'34',1,1)            DCB=BUFNO=                       01849*90\n         AGO   .DCBLOOP                                                 01850*90\n.BUFNOX  AIF   ('&C' NE 'RECFM').RECFMX                                 01851*90\n&D       DC    Y(X'49',1,1)            DCB=RECFM=                       01852*90\n         AGO   .DCBLOOP                                                 01853*90\n.RECFMX  AIF   ('&C' NE 'LRECL').LRECLX                                 01854*90\n&D       DC    Y(X'42',1,2)            DCB=LRECL=                       01855*90\n         AGO   .DCBLOOP                                                 01856*90\n.LRECLX  AIF   ('&C' NE 'DSORG').DSORGX                                 01857*90\n&D       DC    Y(X'3C',1,2)            DCB=DSORG=                       01858*92\n         AGO   .DCBLOOP                                                 01859*90\n.DSORGX  AIF   ('&C' NE 'EROPT').EROPTX                                 01860*90\n&D       DC    Y(X'3D',1,1)            DCB=EROPT=                       01861*90\n         AGO   .DCBLOOP                                                 01862*90\n.EROPTX  AIF   ('&C' NE 'LIMCT').ERRDCB                                 01863*90\n&D       DC    Y(X'41',1,3)            DCB=LIMCT=                       01864*90\n         AGO   .DCBLOOP                                                 01865*90\n.DCB7    AIF   ('&C'(1,7) NE 'KEYLEN=').DCB5                            01866*90\n&C       SETC  '&C'(8,K'&C-7)                                           01867*90\n&C       DC    Y(X'40',1,1)            DCB=KEYLEN=                      01868*90\n         AGO   .DCBLOOP                                                 01869*90\n.DCB5    AIF   ('&C'(1,5) NE 'BUFL=').DCB4                              01870*90\n&C       SETC  '&C'(6,K'&C-5)                                           01871*90\n&C       DC    Y(X'32',1,2)            DCB=BUFL=                        01872*90\n         AGO   .DCBLOOP                                                 01873*90\n.DCB4    AIF   ('&C'(4,1) NE '=').DCBREF                                01874*90\n&D       SETC  '&C'(5,K'&C-4)                                           01875*90\n&C       SETC  '&C'(1,3)                                                01876*90\n         AIF   ('&C' NE 'DEN').DCBDENX                                  01877*90\n&D       DC    Y(X'3B',1,1)            DCB=DEN=                         01878*90\n         AGO   .DCBLOOP                                                 01879*90\n.DCBDENX AIF   ('&C' NE 'NCP').ERRDCB                                   01880*90\n&D       DC    Y(X'44',1,1)            DCB=NCP=                         01881*90\n         AGO   .DCBLOOP                                                 01882*90\n.DCBREF  AIF   (&A NE 1).ERRDCB2  POSITIONAL PARAMETER                  01883*90\n         AIF   ('&C'(1,2) NE '*.').REFDSN                               01884*90\n&C       SETC  '&C'(3,K'&C-2)                                           01885*90\n&C       DC    Y(X'2D',1,8)            DCB=*. DDNAME REFERENCE          01886*90\n         AGO   .DCBLOOP                                                 01887*90\n.REFDSN  MNOTE 0,'DATASET REFERENCE ASSUMED IN DCB=&C'                  01888*90\n&C       DC    Y(X'2C',1,44)           DCB= DSNAME REFERENCE            01889*90\n         AGO   .DCBLOOP                                                 01890*90\n.DCBX    AIF   ('&SUBSYS' EQ '').SUBSYSX                                01891*92\n&C       SETC  '&SUBSYS(1)'                                             01892*92\n         AIF   ('&C' EQ '').SUB1X                                       01893*92\n&C       DC    Y(X'5F',1,4)            SUBSYS=( )                       01894*92\n.SUB1X   AIF   ('&SUBSYS(2)' EQ '').SUBSYSX                             01895*92\n&C       SETC  '&SUBSYS(2)'                                             01896*92\n&C       DC    Y(X'60',1,256)          SUBSYS=(, )                      01897*92\n.SUBSYSX ANOP                                                           01898*92\n.DDD3X   AIF   ('&SYSOUT&DEST&HOLD&COPIES&OUTLIM&FCB&UCS' EQ '').DDD4X  01899*90\n         AIF   ('&SYSOUT' EQ '').SYSOUTX                                01900*90\n         AIF   ('&SYSOUT(1)' EQ '').SYSOU1X                             01901*90\n&C       SETC  '&SYSOUT(1)'                                             01902*90\n&C       DC    Y(X'18',1,1)            SYSOUT=( )                       01903*90\n.SYSOU1X AIF   (N'&SYSOUT LE 1).SYSOUTX                                 01904*90\n&C       SETC  '&SYSOUT(2)'                                             01905*90\n         AIF   ('&C' EQ '').SYSOU2X                                     01906*90\n&C       DC    Y(X'19',1,8)            SYSOUT=(, )                      01907*90\n.SYSOU2X AIF   ('&SYSOUT(3)' EQ '').SYSOUTX                             01908*90\n&C       SETC  '&SYSOUT(3)'                                             01909*90\n&C       DC    Y(X'1A',1,4)            SYSOUT=(,, )                     01910*90\n.SYSOUTX AIF   ('&DEST' EQ '').DESTX                                    01911*90\n&DEST    DC    Y(X'58',1,7)            DEST=                            01912*92\n.DESTX   AIF   ('&HOLD' EQ '').HOLDX                                    01913*90\n&HOLD    DC    Y(X'59',0)              HOLD=YES                         01914*90\n.HOLDX   AIF   ('&COPIES' EQ '').COPIESX                                01915*90\n&COPIES  DC    Y(X'1D',1,1)            COPIES=                          01916*90\n.COPIESX AIF   ('&OUTLIM' EQ '').OUTLIMX                                01917*90\n&OUTLIM  DC    Y(X'1B',1,3)            OUTLIM=                          01918*90\n.OUTLIMX AIF   ('&FCB' EQ '').FCBX                                      01919*90\n         AIF   ('&FCB(1)' EQ '').FCB1X                                  01920*90\n&FCB(1)  DC    Y(X'25',1,4)            FCB=( )                          01921*90\n.FCB1X   AIF   ('&FCB(2)' EQ '').FCBX                                   01922*90\n&FCB(2)  DC    Y(X'26',1,1)            FCB=(, )                         01923*90\n.FCBX    AIF   ('&UCS' EQ '').UCSX                                      01924*90\n         AIF   ('&UCS(1)' EQ '').UCS1X                                  01925*90\n&UCS(1)  DC    Y(X'29',1,4)            UCS=( )                          01926*90\n.UCS1X   AIF   ('&UCS(2)' EQ '').UCS2X                                  01927*90\n&UCS(2)  DC    Y(X'2A',0)              UCS=(,FOLD)                      01928*90\n.UCS2X   AIF   ('&UCS(3)' EQ '').UCSX                                   01929*90\n&UCS(3)  DC    Y(X'2B',0)              UCS=(,,VERIFY)                   01930*90\n.UCSX    ANOP                                                           01931*90\n.DDD4X   AIF   ('&PASWORD' EQ '').PASWORX                               01932*90\n&PASWORD DC    Y(X'50',1,8)            PASWORD=                         01933*90\n.PASWORX MEXIT                                                          01934*90\n.ERRDSN  MNOTE 12,'BOTH DSN= AND DSNAME= SPECIFIED. BOTH IGNORED.'      01935*90\n         AGO   .DSNAMEX                                                 01936*90\n.ERRMEM  MNOTE 12,'INVALID DSNAME, &C'                                  01937*90\n         AGO   .DSNAMEX                                                 01938*90\n.ERRSPA2 MNOTE 8,'TOO MAY SUBPARAMETERS IN SECOND SPACE PARAMETER, &C'  01939*90\n         AGO   .SPACE2X                                                 01940*90\n.ERRDCB2 MNOTE 8,'INVALID DCB PARAMETER, &C.. IGNORING.'                01941*90\n         AGO   .DCBLOOP                                                 01942*90\n.ERRDCB  MNOTE 8,'INVALID DCB PARAMETER, &C=&D.. IGNORED.'              01943*90\n         AGO   .DCBLOOP                                                 01944*90\n         MEND                                                           01945\n./ ADD NAME=DYNALC   0100-03065-03065-2223-00549-00549-00000-DYNALLC\n***********************************************************************\n*        USAGE -THIS MACRO MADE BE USED  MULTIPLE TIMES IN ONE        *\n*              PROGRAM AND GENERATE UNIQUE LABELS VIA THE 'SUFFIX'    *\n*              PARAMETER.  PRIOR TO ISSUING SVC 99 REGISTER 1 MUST    *\n*              CONTAIN THE ADDRESS OF   THIS PARAMETER LIST.          *\n*              EX. -      PARMLIB   DYNALC DSNAME=SYS1.PARMLIB        *\n*                                   ... ANY OTHER CODE                *\n*                                   LA  R1,PARMLIB                    *\n*                                   SVC 99                            *\n*                                   ... ANY OTHER CODE                *\n*        DEFAULTS -THERE ARE NO DEFAULTS FOR ANY PARM.  THE ONLY      *\n*              PARMETERS THAT WILL BE GENERATED FOR DYNAMIC           *\n*              ALLOCATION ARE THE ONES THAT ARE SPECIFICALLY CODED.   *\n*              THE TYPE OF CALL TO DYNAMIC ALLOCATION DEFAULTS TO     *\n*              ALLOCATION.  BY CODING IN A VALUE FOR DEALLOC, THE     *\n*              PARAMETERS WILL DEALLOCATE THE RESOURCE INSTEAD OF     *\n*              ALLOCATING IT.                                         *\n*                                                                     *\n*        LABELS - LABELS HAVE BEEN PROVIDED FOR OFTEN USED FIELDS.    *\n*              FOR SVC 99 RB POINTER, THE LABELS GENERATED ARE THE    *\n*              IEFZB4D0 MACRO LABEL MINUS THE S99 PREFIX AND SUFFIXED *\n*              BY A UNIQUE 3 BYTE VALUE (AUTOMATICALLY SUPPLIED OR AS *\n*              SPECIFIED BY 'SUFFIX=XXX'.  FOR EACH TEXT UNIT FIELD,  *\n*              THE LABELS GENERATED ARE THE IEFZB4D2 MACRO LABEL      *\n*              MINUS THE DAL PREFIX AND SUFFIXED AS SPECIFIED ABOVE.  *\n***********************************************************************\n         MACRO\n&NAME    DYNALC                                                        X\n               &DSNAME=,       DATASET NAME               (1-44 BYTES) X\n               &DDNAME=,       DDNAME                      (1-8 BYTES) X\n               &MEMBER=,       MEMBER NAME/GDG NUMBER        \"    \"    X\n               &STATUS=,       DATASET STATUS        (OLD/MOD/NEW/SHR) X\n               &NDISP=,        DATASET NORMAL DISP   (KEEP/DELETE/ETC) X\n               &CDISP=,        DATASET COND. DISP      \"     \"     \"   X\n               &TYPSP=,        TYPE SPACE            (CYL/TRK/BLKSIZE) X\n               &PRIME=,        PRIMARY SPACE REQUIREMENT (ANY NUMERIC) X\n               &SECND=,        SECONDARY SPACE REQUIREMENT      \"      X\n               &DIR=,          DIRECTORY BLOCKS OR INDEX SPACE  \"      X\n               &RLSE=,         RELEASE UNUSED SPACE        (ANY VALUE) X\n               &SPFRM=,        SPACE FORM            (ALX/MXIG/CONTIG) X\n               &ROUND=,        ROUND BLOCKS TO CYLINDERS   (ANY VALUE) X\n               &VOLSER=,       VOLUME SERIAL               (1-6 BYTES) X\n               &VOLCNT=,       VOLUME COUNT                    (1-255) X\n               &UNIT=,         UNIT TYPE                   (1-8 BYTES) X\n               &MSVGP=,        MSVGP GROUP                   \"    \"    X\n               &SYSOUT=,       SYSOUT CLASS              (A-Z/0-9/ETC) X\n               &SPGNM=,        SYSOUT PGM NAME             (1-8 BYTES) X\n               &FORM=,         SYSOUT FORM NAME              \"    \"    X\n               &OUTLIM=,       SYSOUT OUTPUT LIMIT       (ANY NUMERIC) X\n               &FREE=,         FREE AT CLOSE                   (CLOSE) X\n               &COPIES=,       SYSOUT NUMBER OF COPIES         (1-255) X\n               &LABEL=,        LABEL TYPE           (SL/NL/AL/BLP/ETC) X\n               &DSSEQ=,        DATASET SEQUENCE NUMBER   (TAPE FILE #) X\n               &PASPR=,        PASSWORD PROTECTION               (R/W) X\n               &EXPDT=,        EXPIRATION DATE                 (YYDDD) X\n               &RETPD=,        RETENTION PERIOD          (ANY NUMERIC) X\n               &DUMMY=,        DUMMY DATASET               (ANY VALUE) X\n               &DCBDS=,        DSNAME OF MODEL DSCB           (DSNAME) X\n               &DCBDD=,        DDNAME OF MODEL DSCB           (DDNAME) X\n               &BLKSIZE=,      BLOCKSIZE                 (ANY NUMERIC) X\n               &DEN=,          TAPE DENSITY                  (1/2/3/4) X\n               &DSORG=,        DATASET ORG.         (PO/PS/DA/POU/ETC) X\n               &EROPT=,        ERROR OPTIONS             (ABE/SKP/ACC) X\n               &KEYLEN=,       KEY LENGTH                (ANY NUMERIC) X\n               &LRECL=,        LOGICAL RECORD LENGTH          \"        X\n               &OPTCD=,        OPTION CODE                   (B/W/C/Z) X\n               &RECFM=,        RECORD FORMAT       (F/FB/VB/VBA/U/ETC) X\n               &PASSWRD=,      PASSWORD                    (1-8 BYTES) X\n               &PERM=,         PERM ALLOC                  (ANY VALUE) X\n               &RETDD=,        RETURN DDNAME                    \"      X\n               &RETDS=,        RETURN DSNAME                    \"      X\n               &RETVOL=,       RETURN VOLSER                    \"      X\n               &FUNC=,         FOR PUNCH OUTPUT INTERPRETING       (I) X\n               &SUFFIX=,       UNIQUE SUFFIX FOR LABELS    (MAX LEN=3) X\n               &DEALLOC=       FOR DEALLOCATION            (ANY VALUE)\n         LCLA  &A1,&A2,&A3\n         LCLC  &X,&NM\n         AIF   (T'&SUFFIX EQ 'O').SETSFX\n         AIF   (K'&SUFFIX GT 3).SFXERR\n&X       SETC  '&SUFFIX'\n         AGO   .CONT\n.SFXERR  MNOTE 8,'SUFFIX=&SUFFIX LONGER THAN 3 BYTES, FIRST THREE USED'\n&X       SETC  '&SUFFIX'(1,3)\n         AGO   .CONT\n.SETSFX  ANOP\n&X       SETC  '&SYSNDX'(2,3)\n.CONT    ANOP\n         AIF   (T'&NAME NE 'O').SETRB\n         MNOTE 8,'REQUIRED LABEL MISSING ON MACRO CALL'\n.SETRB   ANOP\n&NAME    DC    A(DYNRB&X+X'80000000') POINTER TO REQUEST BLOCK\n         AIF   (T'&DEALLOC EQ 'O').ALOCCHK\nDYNRB&X  DC    AL1(20,2,0,0)       LENGTH, DEALLOC VERB, FLAGS1\n         AGO   .ERINCHK\n.ALOCCHK ANOP\nDYNRB&X  DC    AL1(20,1,0,0)       LENGTH, ALLOC VERB, FLAGS1\n.ERINCHK ANOP\nERROR&X  DC    AL2(0)              ERROR CODE\nINFO&X   DC    AL2(0)              INFORMATION CODE\nTUPTR&X  DC    A(TXTPP&X),AL4(0,0) TEXT UNIT POINTER, RSVD, FLAGS2\n&A1      SETA  1\n         AIF   (T'&DDNAME EQ 'O').DSNCHK\n         AIF   (K'&DDNAME GT 8).DDNERR\nTS&X&A1  DC    XL2'01',AL2(1,8)    DDNAME KEY, NUM, PARMLEN\nDDNAM&X  DC    CL8'&DDNAME'        DDNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .DSNCHK\n.DDNERR  MNOTE 8,'DDNAME=&DDNAME GREATER THAN 8 BYTES'\n.DSNCHK  AIF   (T'&DSNAME EQ 'O').MEMCHK\n         AIF   (K'&DSNAME GT 44).DSNERR\nTS&X&A1  DC    XL2'02',AL2(1,44)   DSNAME KEY, NUM, PARMLEN\nDSNAM&X  DC    CL44'&DSNAME'       DSNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .MEMCHK\n.DSNERR  MNOTE 8,'DSNAME=&DSNAME GREATER THAN 44 BYTES'\n.MEMCHK  AIF   (T'&MEMBER EQ 'O').STATCHK\n         AIF   (K'&MEMBER GT 8).MEMERR\nTS&X&A1  DC    XL2'03',AL2(1,8)    MEMBER/GDG KEY, NUM, PARMLEN\nMEMBR&X  DC    CL8'&MEMBER'        MEMBER NAME/GDG LEVEL FIELD\n&A1      SETA  &A1+1\n         AGO   .STATCHK\n.MEMERR  MNOTE 8,'MEMBER=&MEMBER GREATER THAN 8 BYTES'\n.STATCHK AIF   (T'&STATUS EQ 'O').NDSPCHK\nTS&X&A1  DC    XL2'04',AL2(1,1)    DATASET STATUS KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&STATUS' NE 'OLD').STA1CHK  OLD = X'01'\nSTATS&X  DC    XL1'01'             CONSTANT FOR DISP=OLD\n         AGO   .NDSPCHK\n.STA1CHK AIF   ('&STATUS' NE 'MOD').STA2CHK  MOD = X'02'\nSTATS&X  DC    XL1'02'             CONSTANT FOR DISP=MOD\n         AGO   .NDSPCHK\n.STA2CHK AIF   ('&STATUS' NE 'NEW').STA3CHK  NEW = X'04'\nSTATS&X  DC    XL1'04'             CONSTANT FOR DISP=NEW\n         AGO   .NDSPCHK\n.STA3CHK AIF   ('&STATUS' NE 'SHR').STAERR   SHR = X'08'\nSTATS&X  DC    XL1'08'             CONSTANT FOR DISP=SHR\n         AGO   .NDSPCHK\n.STAERR  MNOTE 8,'STATUS=&STATUS INVALID'\n.NDSPCHK AIF   (T'&NDISP EQ 'O').CDSPCHK\nTS&X&A1  DC    XL2'05',AL2(1,1)    NORMAL DISP KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&NDISP' NE 'UNCATLG').NDS1CHK UNCATLG = X'01'\nNDISP&X  DC    XL1'01'             CONSTANT FOR NORMAL DISP=UNCATLG\n         AGO   .CDSPCHK\n.NDS1CHK AIF   ('&NDISP' NE 'CATLG').NDS2CHK CATLG   = X'02'\nNDISP&X  DC    XL1'02'             CONSTANT FOR NORMAL DISP=CATLG\n         AGO   .CDSPCHK\n.NDS2CHK AIF   ('&NDISP' NE 'DELETE').NDS3CHK DELETE = X'04'\nNDISP&X  DC    XL1'04'             CONSTANT FOR NORMAL DISP=DELETE\n         AGO   .CDSPCHK\n.NDS3CHK AIF   ('&NDISP' NE 'KEEP').NDSERR   KEEP    = X'08'\nNDISP&X  DC    XL1'08'             CONSTANT FOR NORMAL DISP=KEEP\n         AGO   .CDSPCHK\n.NDSERR  MNOTE 8,'NDISP=&NDISP INVALID'\n.CDSPCHK AIF   (T'&CDISP EQ 'O').TSPCCHK\nTS&X&A1  DC    XL2'06',AL2(1,1)    COND DISP KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&CDISP' NE 'UNCATLG').CDS1CHK UNCATLG = X'01'\nCDISP&X  DC    XL1'01'             CONSTANT FOR COND DISP=UNCALTG\n         AGO   .TSPCCHK\n.CDS1CHK AIF   ('&CDISP' NE 'CATLG').CDS2CHK   CATLG   = X'02'\nCDISP&X  DC    XL1'02'             CONSTANT FOR COND DISP=CATLG\n         AGO   .TSPCCHK\n.CDS2CHK AIF   ('&CDISP' NE 'DELETE').CDS3CHK  DELETE  = X'04'\nCDISP&X  DC    XL1'04'             CONSTANT FOR COND DISP=DELETE\n         AGO   .TSPCCHK\n.CDS3CHK AIF   ('&CDISP' NE 'KEEP').CDSERR     KEEP    = X'08'\nCDISP&X  DC    XL1'08'             CONSTANT FOR COND DISP=KEEP\n         AGO   .TSPCCHK\n.CDSERR  MNOTE 8,'CDISP=&CDISP INVALID'\n.TSPCCHK AIF   (T'&TYPSP EQ 'O').PSPCCHK\n         AIF   ('&TYPSP' NE 'TRK').TSP1CHK  IF TYPE SPACE SPECIFICATION\nTS&X&A1  DC    XL2'07',AL2(0)      TRACK SPACE KEY, NUM\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TSP1CHK AIF   ('&TYPSP' NE 'CYL').TSP2CHK  NOT TRK OR CYL THEN\nTS&X&A1  DC    XL2'08',AL2(0)      CYLINDER SPACE KEY, NUM\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TSP2CHK AIF   (T'&TYPSP NE 'N').TYPERR\n&A3      SETA  &TYPSP\n         AIF   (&A3 GT 32768).TYPERR\nTS&X&A1  DC    XL2'09',AL2(1,3)    BLOCK SPACE KEY, NUM, PARMLEN\nBLKLN&X  DC    AL3(&TYPSP)         AVG BLOCK LENGTH FIELD\n&A1      SETA  &A1+1\n         AGO   .PSPCCHK\n.TYPERR  MNOTE 8,'TYPSP=&TYPSP INVALID OR GREATER THAN 32768'\n.PSPCCHK AIF   (T'&PRIME EQ 'O').DIRCCHK\n         AIF   (T'&PRIME NE 'N').PSPCERR\nTS&X&A1  DC    XL2'0A',AL2(1,3)    PRIME SPACE KEY, NUM, PARMLEN\nPRIME&X  DC    AL3(&PRIME)         PRIMARY SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .SSPCCHK\n.PSPCERR MNOTE 8,'PRIME=&PRIME INVALID'\n.SSPCCHK AIF   (T'&SECND EQ 'O').DIRCCHK\n         AIF   (T'&SECND NE 'N').SSPCERR\nTS&X&A1  DC    XL2'0B',AL2(1,3)    SECONDARY SPACE, NUM, PARMLEN\nSECND&X  DC    AL3(&SECND)         SECONDARY SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .DIRCCHK\n.SSPCERR MNOTE 8,'SECND=&SECND INVALID'\n.DIRCCHK AIF   (T'&DIR EQ 'O').RLSECHK\n         AIF   (T'&DIR NE 'N').DIRCERR\nTS&X&A1  DC    XL2'0C',AL2(1,3)    DIR SPACE KEY, NUM, PARMLEN\nDIR&X    DC    AL3(&DIR)           DIR SPACE FIELD\n&A1      SETA  &A1+1\n         AGO   .RLSECHK\n.DIRCERR MNOTE 8,'DIR=&DIR INVALID'\n.RLSECHK AIF   (T'&RLSE EQ 'O').FMSPCHK\nTS&X&A1  DC    XL2'0D',AL2(0)      RELEASE SPACE KEY, NUM\n&A1      SETA  &A1+1\n.FMSPCHK AIF   (T'&SPFRM EQ 'O').RNDCHK\nTS&X&A1  DC    XL2'0E',AL2(1,1)    SPACE FORM KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&SPFRM' NE 'ALX').FMS1CHK\nSPFRM&X  DC    XL1'02'             ALX SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMS1CHK AIF   ('&SPFRM' NE 'MXIG').FMS2CHK\nSPFRM&X  DC    XL1'04'             MXIG SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMS2CHK AIF   ('&SPFRM' NE 'CONTIG').FMSERR\nSPFRM&X  DC    XL1'02'             CONTIG SPACE FORM FIELD\n         AGO   .RNDCHK\n.FMSERR  ANOP\n         MNOTE 8,'SPFRM=&SPFRM INVALID'\n.RNDCHK  AIF   (T'&ROUND EQ 'O').VSERCHK\nTS&X&A1  DC    XL2'0F',AL2(0)      ROUND KEY, NUM\n&A1      SETA  &A1+1\n.VSERCHK AIF   (T'&VOLSER EQ 'O').VLCNCHK\n         AIF   (K'&VOLSER GT 6).VLSRERR\nTS&X&A1  DC    XL2'10',AL2(1,6)    VOLSER KEY, NUM, PARMLEN\nVLSER&X  DC    CL6'&VOLSER'        VOLUME SERIAL FIELD\n&A1      SETA  &A1+1\n         AGO   .VLCNCHK\n.VLSRERR MNOTE 8,'VOLSER=&VOLSER GREATER THAN 6 BYTES'\n.VLCNCHK AIF   (T'&VOLCNT EQ 'O').UNITCHK\n         AIF   (T'&VOLCNT NE 'N').VLCERR\n&A3      SETA  &VOLCNT\n         AIF   (&A3 GT 255).VLCERR\nTS&X&A1  DC    XL2'13',AL2(1,1)    VOLUME COUNT KEY, NUM, PARMLEN\nVLCNT&X  DC    AL1(&VOLCNT)        VOLUME COUNT FIELD\n&A1      SETA  &A1+1\n         AGO   .UNITCHK\n.VLCERR  MNOTE 8,'VOLCNT=&VOLCNT IS INVALID OR GREATER THAN 255'\n.UNITCHK AIF   (T'&UNIT EQ 'O').SCLSCHK\nTS&X&A1  DC    XL2'15',AL2(1,8)    UNIT TYPE KEY, NUM, PARMLEN\nUNIT&X   DC    CL8'&UNIT'          UNIT TYPE FIELD\n&A1      SETA  &A1+1\n.SCLSCHK AIF   (T'&SYSOUT EQ 'O').SYSPCHK\nTS&X&A1  DC    XL2'18',AL2(1,1)    SYSOUT CLASS KEY, NUM, PARMLEN\nSYSOU&X  DC    CL1'&SYSOUT'        SYSOUT CLASS FIELD\n&A1      SETA  &A1+1\n.SYSPCHK AIF   (T'&SPGNM EQ 'O').FORMCHK\n         AIF   (K'&SPGNM GT 8).SYSPERR\nTS&X&A1  DC    XL2'19',AL2(1,8)    SYSOUT PGM KEY, NUM, PARMLEN\nSPGNM&X  DC    CL8'&SPGNM'         SYSOUT PGM FIELD\n&A1      SETA  &A1+1\n         AGO   .FORMCHK\n.SYSPERR MNOTE 8,'SPGNM=&SPGNM IS GREATER THAN 8 BYTES'\n.FORMCHK AIF   (T'&FORM EQ 'O').OUTLCHK\n         AIF   (K'&FORM GT 4).FORMERR\nTS&X&A1  DC    XL2'1A',AL2(1,4)    SYSOUT FORM KEY, NUM, PARMLEN\nFMNO&X   DC    CL4'&FORM'          SYSOUT FORM NUMBER FIELD\n&A1      SETA  &A1+1\n         AGO   .OUTLCHK\n.FORMERR MNOTE 8,'FORM=&FORM IS GREATER THAN 4 BYTES'\n.OUTLCHK AIF   (T'&OUTLIM EQ 'O').FREECHK\nTS&X&A1  DC    XL2'1B',AL2(1,3)    OUTLIM KEY, NUM, PARMLEN\nOUTLM&X  DC    AL3(&OUTLIM)        OUTLIM PGM FIELD\n&A1      SETA  &A1+1\n.FREECHK AIF   (T'&FREE EQ 'O').COPYCHK\n         AIF   ('&FREE' NE 'CLOSE').FREERR\nTS&X&A1  DC    XL2'1C',AL2(0)      FREE=CLOSE KEY, NUM\n&A1      SETA  &A1+1               ALL ELSE WILL GENERATE MNOTE\n         AGO   .COPYCHK\n.FREERR  MNOTE 8,'FREE=&FREE INVALID'\n.COPYCHK AIF   (T'&COPIES EQ 'O').LABLCHK\n&A3      SETA  &COPIES\n         AIF   (&A3 GT 255).COPYERR\nTS&X&A1  DC    XL2'1D',AL2(1,1)    SYSOUT COPIES KEY, NUM, PARMLEN\nCOPYS&X  DC    AL1(&COPIES)        SYSOUT COPIES FIELD\n&A1      SETA  &A1+1\n         AGO   .LABLCHK\n.COPYERR MNOTE 8,'COPIES=&COPIES GREATER THAN 255'\n.LABLCHK AIF   (T'&LABEL EQ 'O').DSSQCHK\nTS&X&A1  DC    XL2'1E',AL2(1,1)    LABEL TYPE KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&LABEL' NE 'NL').LAB1CHK NL  = X'01'\nLABEL&X  DC    XL1'01'             LABEL = NL\n         AGO   .DSSQCHK\n.LAB1CHK AIF   ('&LABEL' NE 'SL').LAB2CHK SL  = X'02'\nLABEL&X  DC    XL1'2'              LABEL = SL\n         AGO   .DSSQCHK\n.LAB2CHK AIF   ('&LABEL' NE 'NSL').LAB3CHK NSL = X'04'\nLABEL&X  DC    XL1'04'             LABEL = NSL\n         AGO   .DSSQCHK\n.LAB3CHK AIF   ('&LABEL' NE 'SUL').LAB4CHK SUL = X'0A'\nLABEL&X  DC    XL1'0A'             LABEL = SUL\n         AGO   .DSSQCHK\n.LAB4CHK AIF   ('&LABEL' NE 'BLP').LAB5CHK BLP = X'10'\nLABEL&X  DC    XL1'10'             LABEL = BLP\n         AGO   .DSSQCHK\n.LAB5CHK AIF   ('&LABEL' NE 'LTM').LAB6CHK LTM = X'21'\nLABEL&X  DC    XL1'21'             LABEL = LTM\n         AGO   .DSSQCHK\n.LAB6CHK AIF   ('&LABEL' NE 'AL').LAB7CHK AL  = X'40'\nLABEL&X  DC    XL1'40'             LABEL = AL\n         AGO   .DSSQCHK\n.LAB7CHK AIF   ('&LABEL' NE 'AUL').LABERR  AUL = X'48'\nLABEL&X  DC    XL1'48'             LABEL = AUL\n         AGO   .DSSQCHK\n.LABERR  MNOTE 8,'LABEL=&LABEL INVALID'\n.DSSQCHK AIF   (T'&DSSEQ EQ 'O').PASSCHK\n         AIF   (T'&DSSEQ NE 'N').DSSQERR\n         AIF   (&DSSEQ GT 9999).DSSQERR\nTS&X&A1  DC    XL2'1F',AL2(1,2)    DSN SEQUNECE KEY, NUM, PARMLEN\nDSSEQ&X  DC    AL2(&DSSEQ)         DSN SEQUENCE FIELD\n&A1      SETA  &A1+1\n         AGO   .PASSCHK\n.DSSQERR MNOTE 8,'DSSEQ=&DSSEQ INVALID OR OUT OF RANGE'\n.PASSCHK AIF   (T'&PASPR EQ 'O').EXPDCHK\n         AIF   ('&PASPR' NE 'R' AND 'PASPR' NE 'W').PASPERR\nTS&X&A1  DC    XL2'20',AL2(1,1)    PASSWORD PROTECT KEY, NUM, PARMLEN\n         AIF   ('&PASPR' EQ 'R').PASSRD\nPASPR&X  DC    X'30'               WRITE PROTECTION\n&A1      SETA  &A1+1\n         AGO   .EXPDCHK\n.PASSRD  ANOP\nPASPR&X  DC    X'10'               READ/WRITE PROTECTION\n&A1      SETA  &A1+1\n         AGO   .EXPDCHK\n.PASPERR MNOTE 8,'PASPR=&PASPR INVALID-SHOULD BE \"R\" OR \"W\"'\n.EXPDCHK AIF   (T'&EXPDT EQ 'O').RETPCHK\n         AIF   (K'&EXPDT GT 5).EXPDERR\nTS&X&A1  DC    XL2'22',AL2(1,5)    EXPIRATION DATE KEY, NUM, PARMLEN\nEXPDT&X  DC    CL5'&EXPDT'         EXPIRATION DATE FIELD\n&A1      SETA  &A1+1\n         AGO   .RETPCHK\n.EXPDERR MNOTE 8,'EXPDT=&EXPDT GREATER THAN 5 BYTES'\n.RETPCHK AIF   (T'&RETPD EQ 'O').DUMMCHK\n         AIF   (T'&RETPD NE 'N').RETPERR\n&A3      SETA  &RETPD\n         AIF   (&RETPD GT 9999).RETPERR\nTS&X&A1  DC    XL2'23',AL2(1,2)    RETENTION PERIOD KEY, NUM, PARMLEN\nRETPD&X  DC    AL2(&RETPD)         RETENTION PERIOD FIELD\n&A1      SETA  &A1+1\n         AGO   .DUMMCHK\n.RETPERR MNOTE 8,'RETPD=&RETPD NOT NUMERIC OR GREATER THAN 9999'\n.DUMMCHK AIF   (T'&DUMMY EQ 'O').DCBSCHK\nTS&X&A1  DC    XL2'24',AL2(0)      DUMMY DATASET KEY, NUM\n&A1      SETA  &A1+1\n.DCBSCHK AIF   (T'&DCBDS EQ 'O').DCBDCHK\n         AIF   (K'&DCBDS GT 44).DCBSERR\nTS&X&A1  DC    XL2'2C',AL2(1,44)   DCB REFERENCE DSN KEY, NUM, PARMLEN\nDCBDS&X  DC    CL44'&DCBDS'        DCB REFERENCE DSNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .DCBDCHK\n.DCBSERR MNOTE 8,'DCBDS=&DCBDS GREATER THAN 44 BYTES'\n.DCBDCHK AIF   (T'&DCBDD EQ 'O').BLKSCHK\n         AIF   (K'&DCBDS GT 8).DCBDERR\nTS&X&A1  DC    XL2'2D',AL2(1,8)    DCB REFERENCE DDN KEY, NUM, PARMLEN\nDCBDS&X  DC    CL8'&DCBDD'         DCB REFERENCE DDNAME FIELD\n&A1      SETA  &A1+1\n         AGO   .BLKSCHK\n.DCBDERR MNOTE 8,'DCBDD=&DCBDD GREATER THAN 8 BYTES'\n.BLKSCHK AIF   (T'&BLKSIZE EQ 'O').DENSCHK\n         AIF   (T'&BLKSIZE NE 'N').BLKSERR\n&A3      SETA  &BLKSIZE\n         AIF   (&A3 GT 32768).BLKSERR\nTS&X&A1  DC    XL2'30',AL2(1,2)    BLOCKSIZE KEY, NUM, PARMLEN\nBLKSZ&X  DC    AL2(&BLKSIZE)       BLOCKSIZE FIELD\n&A1      SETA  &A1+1\n         AGO   .DENSCHK\n.BLKSERR MNOTE 8,'BLKSIZE=&BLKSIZE INVALID OR GREATER THAN 32768'\n.DENSCHK AIF   (T'&DEN EQ 'O').DSORCHK\nTS&X&A1  DC    XL2'3B',AL2(1,1)    DENSITY KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&DEN' NE '4').DEN1CHK DEN4 = X'D3'\nDEN&X    DC    XL1'D3'             DEN = 4\n         AGO   .DSORCHK\n.DEN1CHK AIF   ('&DEN' NE '3').DEN2CHK DEN3 = X'C3'\nDEN&X    DC    XL1'C3'             DEN = 3\n         AGO   .DSORCHK\n.DEN2CHK AIF   ('&DEN' NE '2').DEN3CHK DEN2 = X'83'\nDEN&X    DC    XL1'83'             DEN = 2\n         AGO   .DSORCHK\n.DEN3CHK AIF   ('&DEN' NE '1').DENERR  DEN1 = X'43'\nDEN&X    DC    XL1'43'             DEN = 1\n         AGO   .DSORCHK\n.DENERR  MNOTE 8,'DEN=&DEN INVALID'\n.DSORCHK AIF   (T'&DSORG EQ 'O').EROPCHK\nTS&X&A1  DC    XL2'3C',AL2(1,2)    DSORG KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&DSORG' NE 'PO').DSO1CHK DSORG PO = X'0200'\nDSORG&X  DC    XL2'0200'           DSORG = PO\n         AGO   .EROPCHK\n.DSO1CHK AIF   ('&DSORG' NE 'PS').DSO2CHK DSORG PS = X'4000'\nDSORG&X  DC    XL2'4000'           DSORG = PS\n         AGO   .EROPCHK\n.DSO2CHK AIF   ('&DSORG' NE 'DA').DSO3CHK DSORG DA = X'2000'\nDSORG&X  DC    XL2'2000'           DSORG = DA\n         AGO   .EROPCHK\n.DSO3CHK AIF   ('&DSORG' NE 'VS').DSO4CHK DSORG VS = X'0008'\nDSORG&X  DC    XL2'0008'           DSORG = VS\n         AGO   .EROPCHK\n.DSO4CHK AIF   ('&DSORG' NE 'POU').DSO5CHK DSORG POU = X'0300'\nDSORG&X  DC    XL2'0300'           DSORG = POU\n         AGO   .EROPCHK\n.DSO5CHK AIF   ('&DSORG' NE 'PSU').DSO6CHK DSORG PSU = X'4100'\nDSORG&X  DC    XL2'4100'           DSORG = PSU\n         AGO   .EROPCHK\n.DSO6CHK AIF   ('&DSORG' NE 'DAU').DSOERR  DSORG DAU = X'2100'\nDSORG&X  DC    XL2'2100'           DSORG = DAU\n         AGO   .EROPCHK\n.DSOERR  MNOTE 8,'DSORG=&DSORG INVALID'\n.EROPCHK AIF   (T'&EROPT EQ 'O').KEYLCHK\nTS&X&A1  DC    XL2'3D',AL2(1,1)    EROPT KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&EROPT' NE 'ABE').ERO1CHK EROPT ABE = X'20'\nEROPT&X  DC    XL1'20'             EROPT = ABE\n         AGO   .KEYLCHK\n.ERO1CHK AIF   ('&EROPT' NE 'SKP').ERO2CHK EROPT SKP = X'40'\nEROPT&X  DC    XL1'40'             EROPT = SKP\n         AGO   .KEYLCHK\n.ERO2CHK AIF   ('&EROPT' NE 'ACC').EROERR  EROPT ACC = X'80'\nEROPT&X  DC    XL1'80'             EROPT = ACC\n         AGO   .KEYLCHK\n.EROERR  MNOTE 8,'EROPT=&EROPT INVALID'\n.KEYLCHK AIF   (T'&KEYLEN EQ 'O').LRECCHK\nTS&X&A1  DC    XL2'40',AL2(1,1)    KEYLEN KEY, NUM, PARMLEN\nKYLEN&X  DC    AL1(&KEYLEN)        KEYLEN FIELD\n&A1      SETA  &A1+1\n.LRECCHK AIF   (T'&LRECL EQ 'O').OPTCCHK\nTS&X&A1  DC    XL2'42',AL2(1,2)    LRECL KEY, NUM, PARMLEN\nLRECL&X  DC    AL2(&LRECL)         LRECL FIELD\n&A1      SETA  &A1+1\n.OPTCCHK AIF   (T'&OPTCD EQ 'O').RECFCHK\nTS&X&A1  DC    XL2'45',AL2(1,1)    OPTCD KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&OPTCD' NE 'B').OPT1CHK OPTCD B = X'40'\nOPTCD&X  DC    XL1'40'             OPTCD = B\n         AGO   .RECFCHK\n.OPT1CHK AIF   ('&OPTCD' NE 'W').OPT2CHK OPTCD W = X'80'\nOPTCD&X  DC    XL1'80'             OPTCD = W\n         AGO   .RECFCHK\n.OPT2CHK AIF   ('&OPTCD' NE 'C').OPT3CHK OPTCD C = X'20'\nOPTCD&X  DC    XL1'20'             OPTCD = C\n         AGO   .RECFCHK\n.OPT3CHK AIF   ('&OPTCD' NE 'Z').OPTERR  OPTCD Z = X'04'\nOPTCD&X  DC    XL1'04'             OPTCD = Z\n         AGO   .RECFCHK\n.OPTERR  MNOTE 8,'OPTCD=&OPTCD INVALID'\n.RECFCHK AIF   (T'&RECFM EQ 'O').PASWCHK\nTS&X&A1  DC    XL2'49',AL2(1,1)    RECFM KEY, NUM, PARMLEN\n&A1      SETA  &A1+1\n         AIF   ('&RECFM' NE 'FBA').REC1CHK RECFM FBA = X'94'\nRECFM&X  DC    XL1'94'             RECFM = FBA\n         AGO   .PASWCHK\n.REC1CHK AIF   ('&RECFM' NE 'VBA').REC2CHK RECFM VBA = X'54'\nRECFM&X  DC    XL1'54'             RECFM = VBA\n         AGO   .PASWCHK\n.REC2CHK AIF   ('&RECFM' NE 'FB').REC3CHK RECFM FB = X'90'\nRECFM&X  DC    XL1'90'             RECFM = FB\n         AGO   .PASWCHK\n.REC3CHK AIF   ('&RECFM' NE 'VB').REC4CHK RECFM VB = X'50'\nRECFM&X  DC    XL1'50'             RECFM = VB\n         AGO   .PASWCHK\n.REC4CHK AIF   ('&RECFM' NE 'F').REC5CHK RECFM F = X'80'\nRECFM&X  DC    XL1'80'             RECFM = F\n         AGO   .PASWCHK\n.REC5CHK AIF   ('&RECFM' NE 'V').REC6CHK RECFM V = X'40'\nRECFM&X  DC    XL1'40'             RECFM = V\n         AGO   .PASWCHK\n.REC6CHK AIF   ('&RECFM' NE 'FBS').REC7CHK RECFM FBS = X'98'\nRECFM&X  DC    XL1'98'             RECFM = FBS\n         AGO   .PASWCHK\n.REC7CHK AIF   ('&RECFM' NE 'VBS').REC8CHK RECFM VBS = X'58'\nRECFM&X  DC    XL1'58'             RECFM = VBS\n         AGO   .PASWCHK\n.REC8CHK AIF   ('&RECFM' NE 'FA').REC9CHK RECFM FA = X'84'\nRECFM&X  DC    XL1'84'             RECFM = FA\n         AGO   .PASWCHK\n.REC9CHK AIF   ('&RECFM' NE 'VA').RECACHK RECFM VA = X'44'\nRECFM&X  DC    XL1'44'             RECFM = VA\n         AGO   .PASWCHK\n.RECACHK AIF   ('&RECFM' NE 'FBM').RECBCHK RECFM FBM = X'92'\nRECFM&X  DC    XL1'92'             RECFM = FBM\n         AGO   .PASWCHK\n.RECBCHK AIF   ('&RECFM' NE 'VBM').RECCCHK RECFM VBM = X'52'\nRECFM&X  DC    XL1'52'             RECFM = VBM\n         AGO   .PASWCHK\n.RECCCHK AIF   ('&RECFM' NE 'FBSA').RECDCHK RECFM FBSA = X'9C'\nRECFM&X  DC    XL1'9C'             RECFM = FBSA\n         AGO   .PASWCHK\n.RECDCHK AIF   ('&RECFM' NE 'U').RECFERR RECFM U = X'C0'\nRECFM&X  DC    XL1'C0'             RECFM = U\n         AGO   .PASWCHK\n.RECFERR MNOTE 8,'RECFM=&RECFM INVALID'\n.PASWCHK AIF   (T'&PASSWRD EQ 'O').PERMCHK\n         AIF   (K'&PASSWRD GT 8).PASWERR\nTS&X&A1  DC    XL2'50',AL2(1,8)    PASSWORD KEY, NUM, PARMLEN\nPASSW&X  DC    CL8'&PASSWRD'       PASSWORD\n&A1      SETA  &A1+1\n         AGO   .PERMCHK\n.PASWERR MNOTE 8,'PASSWRD=&PASSWRD GREATER THAN 8 BYTES'\n.PERMCHK AIF   (T'&PERM EQ 'O').RTDDCHK\nTS&X&A1  DC    XL2'52',AL2(0)      PERM ALLOC KEY, NUM\n&A1      SETA  &A1+1\n.RTDDCHK AIF   (T'&RETDD EQ 'O').RTDSCHK\nTS&X&A1  DC    XL2'55',AL2(1,8)    RETURN DDNAME, NUM, PARMLEN\nRTDDN&X  DC    CL8' '              RETURNED DDNAME\n&A1      SETA  &A1+1\n.RTDSCHK AIF   (T'&RETDS EQ 'O').FUNCCHK\nTS&X&A1  DC    XL2'56',AL2(1,44)   RETURN DSNAME, NUM, PARMLEN\nRTDSN&X  DC    CL44' '             RETURNED DSNAME\n&A1      SETA  &A1+1\n.FUNCCHK AIF   (T'&FUNC EQ 'O').RTVLCHK\n         AIF   ('&FUNC' NE 'I').FUNCERR\nTS&X&A1  DC    XL2'5A',AL2(1,1)    FUNCTION KEY, NUM, PARMLEN\nFUNC&X   DC    XL1'80'             INTERPRET FUNCTION FIELD\n&A1      SETA  &A1+1\n         AGO   .RTVLCHK\n.FUNCERR MNOTE 8,'FUNC=&FUNC NOT SUPPORTED BY MACRO'\n.RTVLCHK AIF   (T'&RETVOL EQ 'O').MSVGCHK\nTS&X&A1  DC    XL2'5D',AL2(1,6)    RETURN VOLSER, NUM, PARMLEN\nRTVOL&X  DC    CL6' '              RETURNED VOLSER\n&A1      SETA  &A1+1\n.MSVGCHK AIF   (T'&MSVGP EQ 'O').TUPLGEN\nTS&X&A1  DC    XL2'5E',AL2(1,8)    MSVGP KEY, NUM, PARMLEN\nMSVGP&X  DC    CL8'&MSVGP'         MSVGP FIELD\n&A1      SETA  &A1+1\n.TUPLGEN ANOP\n&A2      SETA  1\n&A1      SETA  &A1-1 BB\n         AIF   (&A1 GE 1).GENOK BB\n         MNOTE 8,'NO TEXT UNIT POINTERS WERE GENERATED' BB\n         MEXIT BB\n.GENOK   ANOP BB\n&NM      SETC  'TXTPP&X'\n.TULOOP  AIF   (&A2 EQ &A1).EOFGEN\n&NM      DC    A(TS&X&A2)          TEXT UNIT POINTER\n&NM      SETC  ' '\n&A2      SETA  &A2+1\n         AGO   .TULOOP\n.EOFGEN  AIF   (&A1 NE 1).SKIPCLR\n&NM      SETC  'TXTPP&X'\n.SKIPCLR ANOP\n&NM      DC    A(TS&X&A2+X'80000000') LAST TEXT UNIT POINTER\n         MEND\n./ ADD NAME=DYNSPACE 0100-03065-03065-2223-00052-00052-00000-DYNALLC\n         MACRO\n&NAME    DYNSPACE &TYPE\n.*\n.*    THIS IS AN INNER MACRO TO ALLOC/FREE.\n.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST\n.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY\n.*                         EACH, REMEMBERING THE LARGEST.\n.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.\n.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,\n.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,\n.*    OR BY BEGINWKA, IF THE LATTER IS USED.\n.*\n.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE\n.*     NAME DYNSPACE\n.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE\n.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL\n.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.\n.*\n.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL\n.*          DYNSPACE ADD\n.*     (NO NAME FIELD AND ONE OPERAND)\n.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE\n.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE\n.*     CURRENT REQUEST IS FOR A GREATER AMOUNT\n.*\n.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO\n.*     NAME OR OPERAND FIELD.\n.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME\n.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.\n.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.\n.*\n         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN\n         GBLC  &DYNP,&DYNSP\n         LCLA  &I\n         AIF   ('&NAME' NE '').NAME\n         AIF   ('&TYPE' EQ '').ALLOC\n.*   THE ACCUMULATE FUNCTION IS REQUIRED\n&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST\n         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT\n&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM\n         MEXIT\n.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT\n&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME\n.EXIT    MEXIT\n.ALLOC   AIF   ('&DYNSP' EQ '').EXIT\n*\n**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA\n*\n&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE\n&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0\n&DYNSPQ  SETA 0\n         MEND\n./ ADD NAME=FREE     0100-03065-03065-2223-00133-00133-00000-DYNALLC\n         MACRO\n&NAME    FREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,            X\n               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n&T       SETC  'A'\n&PAR     SETC  '&MF(2)+4'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)\n&T       SETC  'R'\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n&PAR     SETC  '4&MF(2)'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n&T       SETC  'A'\n&PAR     SETC  '&DYNP.RB'\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&SYSOUT' NE '').SYSOUT\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TUNALC  AIF   ('&UNALC' NE '').PERM\n.THOLD   AIF   ('&HOLD' NE '').HOLD\n         AGO   .SVC99\n.DSN     RCPFDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.SYSOUT  RCPFSYS &SYSOUT\n         AGO   .TDDN\n.DDN     RCPFDDN &DDN&F&FILE\n         AGO   .TDISP\n.DISP RCPFDISP &DISP\n         AGO   .TUNALC\n.PERM    RCPUNALC\n         AGO   .THOLD\n.HOLD    RCPFHOLD &HOLD\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n.DYNA    DYNALLOC\n         AIF   ('&ERROR' EQ '').RESERVE\n         AIF   ('&PAR' EQ '').LTR\n         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n.LTR     LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC DATA                             **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU11\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AGO   .DTU10\n.DTU11   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n./ ADD NAME=FREEDD   0100-03065-03065-2223-00085-00085-00000-DYNALLC\n         MACRO\n&DDNAME  FREEDD &DSN=,&DSNAME=,&DISP=,&SYSOUT=,&DEST=,&HOLD=,          *\n               &KEYADDS=,&TYPE=UNALLOC,&EXIT=ALODDERR\n         GBLA  &X,&Y,&H,&N,&R\n         GBLB  &CONCATB,&FREEB,&DDDFAIL,&DDDD\n         LCLA  &A\n         LCLC  &C,&D\n         AIF   (&DDDD).ERRDDDD\n         AIF   (&CONCATB).ERRCONC\n&X       SETA  20 DISPLACEMENT FROM ALOBLOCK TO FIRST TEXT UNIT POINTER\n&Y       SETA  20         NEGATIVE DISTANCE FROM ALOBLOCK TO FIRST DATA\n&R       SETA  14                      FIRST REGISTER LOADED\n&FREEB   SETB  1\n         AIF   ('&DDNAME&DSN&DSNAME&DISP' EQ '').DDD5X\n         AIF   ('&DDNAME' EQ 'RETURN').ERRRET\n.DDNAMEX AIF   ('&DISP(1)' NE '').ERRDIS1\n.DISP1X  AIF   ('&DISP(3)' NE '').ERRDIS3\n.DISP3X  DDD5  &DDNAME,&DSN,&DSNAME,&DISP\n.DDD5X   AIF   ('&SYSOUT&DEST&HOLD' EQ '').DDD4X\n         AIF   (N'&SYSOUT GT 1).ERRSYSO\n.SYSOUTX DDD4  &SYSOUT,&DEST,&HOLD\n         AIF   ('&HOLD' NE 'NO').DDD4X\n         DDD0  =Y(X'0A',0),,,,'HOLD=NO'\n.DDD4X   AIF   ('&KEYADDS' EQ '').KEYADDX\n&A       SETA  0\n.KEYLOOP AIF   (&A GE N'&KEYADDS).KEYADDX\n&A       SETA  &A+1\n&C       SETC  '&KEYADDS(&A)'\n         AIF   ('&C' EQ '').KEYLOOP\n         AIF   ('&C'(1,1) EQ '(').KEYADDR\n         DDD0  &C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDR DDD0  0&C,,,,'KEYADDS=&C'\n         AGO   .KEYLOOP\n.KEYADDX AIF   ('&TYPE' EQ 'EITHER' OR '&TYPE' EQ '').TYPEX\n         AIF   ('&TYPE' NE 'UNALLOC').TYPER\n.TYPEU   DDD0  =Y(X'07',0),,,,                                         *\n               'TYPE=UNALLOC  EVEN IF PERMANENTLY ALLOCATED'\n         AGO   .TYPEX\n.TYPER   AIF   ('&TYPE' NE 'REMOVE').ERRTYPE\n         DDD0  =Y(X'08',0),,,,'TYPE=REMOVE  IN-USE ATTRIBUTE'\n.TYPEX   AIF   (&R NE 14).R14X\n&X       SETA  &X-4\n         AGO   .RX\n.R14X    AIF   (&R NE 15).R15X\n         ST    14,ALOBLOCK+&X\n         AGO   .RX\n.R15X    AIF   (&R NE 0).R0X\n         STM   14,15,ALOBLOCK+&X\n&X       SETA  &X+4\n         AGO   .RX\n.R0X     STM   14,0,ALOBLOCK+&X\n&X       SETA  &X+8\n.RX      OI    ALOBLOCK+&X,X'80'        SET END OF TEXT UNIT ADDR LIST\n         LA    0,X'0220'               LOAD VERB, FLAGS1\n         AIF   ('&EXIT'(1,1) EQ '(').LREXIT\n&DDDFAIL SETB  ('&EXIT' EQ 'ALODDERR' OR &DDDFAIL)\n         LA    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n         AGO   .BALDDDD\n.LREXIT  LR    15,&EXIT                LOAD ERROR EXIT RTN ADDRESS\n.BALDDDD BAL   14,ALOROUT              LINK TO DDDD MACRO\n         AIF   (&H GE &Y).HX\n&H       SETA  &Y\n.HX      AIF   (&N GE &X).NX\n&N       SETA  &X\n.NX      MEXIT\n.ERRDDDD MNOTE 12,'FREEDD MAY NOT BE ISSUED AFTER DDDD'\n         MEXIT\n.ERRCONC MNOTE 12,'FREEDD MAY NOT BE ISSUED DURING CONCATENATION.'\n         MEXIT\n.ERRRET  MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT RETURN OF THE *\n               DDNAME.'\n         AGO   .DDNAMEX\n.ERRDIS1 MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT DISP=(&DISP(1)*\n               ).'\n         AGO   .DISP1X\n.ERRDIS3 MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT DISP=(,,&DISP(*\n               3)).'\n         AGO   .DISP3X\n.ERRSYSO MNOTE 12,'DYNAMIC UNALLOCATION DOES NOT SUPPORT SYSOUT=(,&SYSO*\n               UT(2),&SYSOUT(3)).'\n         AGO   .SYSOUTX\n.ERRTYPE MNOTE 8,'TYPE=&TYPE INVALID. TYPE IGNORED.'\n         AGO   .TYPEU\n         MEND\n./ ADD NAME=RCPBFRGS 0100-03065-03065-2223-00019-00019-00000-DYNALLC\n         MACRO\n         RCPBFRGS &BUFPTR,&WKREGS\n         GBLC  &RCPBFRP,&RCPBFR1,&RCPBFR2\n         AIF   ('&BUFPTR' EQ '').TGP\n&RCPBFRP SETC  '&BUFPTR'\n         AGO   .TWK1\n.TGP     AIF   ('&RCPBFRP' NE '').TWK1\n&RCPBFRP SETC  'R1'\n.TWK1    AIF   ('&WKREGS(1)' EQ '').TG1\n&RCPBFR1 SETC  '&WKREGS(1)'\n         AGO   .TWK2\n.TG1     AIF   ('&RCPBFR1' NE '').TWK2\n&RCPBFR1 SETC  'R14'\n.TWK2    AIF   ('&WKREGS(2)' EQ '').TG2\n&RCPBFR2 SETC  '&WKREGS(2)'\n         MEXIT\n.TG2     AIF   ('&RCPBFR2' NE '').EXIT\n&RCPBFR2 SETC  'R15'\n.EXIT    MEND\n./ ADD NAME=RCPBTU   0100-03065-03065-2223-00017-00017-00000-DYNALLC\n         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED\n.*  IN QUOTES\n.*\n&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           MOVE IN LENGTH\n         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT\n&L       SETA  &L+6\n         AIF   (&L/2 EQ (&L+1)/2).LOK\n&L       SETA  &L+1\n.LOK     RCPDINC &L\n         MEND\n./ ADD NAME=RCPBTU2  0100-03065-03065-2223-00019-00019-00000-DYNALLC\n         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         GBLA  &DTUPO\n         GBLC  &DYNP\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO BRANCH AROUND TEXT UNIT AND\n.*  CREATE TEXT UNIT\n.*\n&L       SETA  K'&PAR+8                GET LENGTH TO BRANCH AROUND\n         AIF   (&L/2 EQ (&L+1)/2).LOK  MAKE SURE LENGTH IS EVEN\n&L       SETA  &L+1\n.LOK     BAL   R14,*+&L                BRANCH AROUND TEXT UNIT\n&L       SETA  K'&PAR-2\n         DC    Y(&KEY,&NUM,&L),C&PAR   TEXT UNIT\n         LA    R14,0(R14)              CLEAR HIGH ORDER BYTE\n         ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n./ ADD NAME=RCPCKID  0100-03065-03065-2223-00045-00045-00000-DYNALLC\n         MACRO\n&NAME    RCPCKID              &CHECKID\n         GBLB  &RCPECT(2),&RCPPSCB(2)\n         GBLC  &RCPPRE\n         LCLC  &CHARVAR,&P\n         LCLA  &COUNTR,&L\n&P       SETC  '&RCPPRE'\n&RCPPSCB(1) SETB  1\n&RCPECT(1)  SETB  1\n         EJECT\n         SPACE 4\n***********************************************************************\n***  THE USERID OF THE USER IS CHECKED. IF IT IS NOT VALID, THE    ****\n***   COMMAND PRETENDS IT DOES NOT EXIST BY LINKING TO EXEC IN     ****\n***   THE SAME WAY THE TMP DOES IF IT CANNOT FIND THE COMMAND.     ****\n***********************************************************************\n         SPACE 3\n         L     R1,CPPLPSCB             LOAD ADDRESS OF PSCB\n         USING PSCB,R1                 PSCB ADDRESSABILITY\n.NID     ANOP\n&COUNTR  SETA  &COUNTR+1\n         AIF   ('&CHECKID(&COUNTR)' EQ '').ENDID\n&CHARVAR SETC  '&CHECKID(&COUNTR)'\n&L       SETA  K'&CHARVAR\n         AIF   ('&CHARVAR'(1,1) EQ '''').QCID\n         CLC   PSCBUSER(&L),=C'&CHARVAR'  IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.QCID    ANOP\n&L       SETA  &L-2\n         CLC   PSCBUSER(&L),=C&CHARVAR    IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.ENDID   L     R1,CPPLECT              LOAD ECT ADDRESS\n         SPACE 2\n         USING ECT,R1\n         MVC   ECTPCMD,&P.EXECN        MOVE IN COMMAND NAME\n         DROP  R1                      KILL ECT ADDRESSABILITY\n         L     R1,CPPLCBUF             LOAD CBUF ADDRESS\n         XC    2(2,R1),2(R1)           ZERO OFFSET FIELD\n         L     R1,&P.CPPL              RELOAD CPPL ADDRESS\n         XCTL  EPLOC=&P.EXECN\n&P.EXECN DC    CL8'EXEC'               NAME OF EXEC PROCESSOR\n&P.IDOK  DS    0H\n         MEND\n./ ADD NAME=RCPDDCB  0100-03065-03065-2223-00164-00164-00000-DYNALLC\n         MACRO\n         RCPDDCB &LRECL=,&BLKSIZE=,&RECFM=,&DEN=,&DSORG=,&KEYLEN=\n         GBLC  &DYNP\n         AIF   ('&DEN' EQ '').DSORG\n         SPACE\n***********************************************************************\n**   DCB DENSITY TEXT UNIT                                           **\n***********************************************************************\n         AIF   ('&DEN' EQ '0').DEN0\n         AIF   ('&DEN' EQ '1').DEN1\n         AIF   ('&DEN' EQ '2').DEN2\n         AIF   ('&DEN' EQ '3').DEN3\n         AIF   ('&DEN' EQ '4').DEN4\n         MNOTE 8,'DENSITY INVALID'\n         AGO   .DSORG\n.DEN0    ANOP\n         MVI   S99TUPAR,X'03'          SET PARAMETER\n         AGO   .DODEN\n.DEN1    ANOP\n         MVI   S99TUPAR,X'43'          SET PARAMETER\n         AGO   .DODEN\n.DEN2    ANOP\n         MVI   S99TUPAR,X'83'          SET PARAMETER\n         AGO   .DODEN\n.DEN3    ANOP\n         MVI   S99TUPAR,X'C3'          SET PARAMETER\n         AGO   .DODEN\n.DEN4    ANOP\n         MVI   S99TUPAR,X'D3'          SET PARAMETER\n         AGO   .DODEN\n.DODEN   ANOP\n         MVI   S99TUKEY+1,DALDEN       SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,1            SET LENGTH\n         RCPDINC 8\n.DSORG   AIF   ('&DSORG' EQ '').BLKSIZE\n         SPACE\n***********************************************************************\n**    DCB DSORG TEXT UNIT                                            **\n***********************************************************************\n         AIF   ('&DSORG' EQ 'PO').PO\n         AIF   ('&DSORG' EQ 'PS').PS\n         AIF   ('&DSORG' EQ 'PO').DA\n         MNOTE 8,'DSORG INVALID'\n         AGO   .BLKSIZE\n.PO      ANOP\n         MVC   S99TUPAR(2),=X'0200'    SET PARAMETER\n         AGO   .DODSORG\n.PS      ANOP\n         MVC   S99TUPAR(2),=X'4000'    SET PARAMETER\n         AGO   .DODSORG\n.DA      ANOP\n         MVC   S99TUPAR(2),=X'2000'    SET PARAMETER\n         AGO   .DODSORG\n.DODSORG ANOP\n         MVI   S99TUKEY+1,DALDSORG     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,2            SET LENGTH\n         RCPDINC 8\n.BLKSIZE ANOP\n         AIF   ('&BLKSIZE' EQ '').LRECL\n         SPACE\n***********************************************************************\n**    DCB BLKSIZE TEXT UNIT                                          **\n***********************************************************************\n         MVI   S99TUKEY+1,DALBLKSZ     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,2            SET LENGTH\n         MVC   S99TUPAR(2),=AL2(&BLKSIZE) SET PARAMETER\n         RCPDINC 10\n.LRECL   ANOP\n         AIF   ('&LRECL' EQ '').RECFM\n         SPACE\n***********************************************************************\n**    DCB LRECL TEXT UNIT                                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DALLRECL     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,2            SET LENGTH\n         MVC   S99TUPAR(2),=AL2(&LRECL) SET PARAMETER\n         RCPDINC 10\n.RECFM   ANOP\n         AIF   ('&RECFM' EQ '').KEYLEN\n         SPACE\n***********************************************************************\n**    DCB RECFM TEXT UNIT                                            **\n***********************************************************************\n         AIF   ('&RECFM' EQ 'F').RF\n         AIF   ('&RECFM' EQ 'FA').RFA\n         AIF   ('&RECFM' EQ 'FM').RFM\n         AIF   ('&RECFM' EQ 'FB').RFB\n         AIF   ('&RECFM' EQ 'FBM').RFBM\n         AIF   ('&RECFM' EQ 'FBA').RFBA\n         AIF   ('&RECFM' EQ 'V').RV\n         AIF   ('&RECFM' EQ 'VA').RVA\n         AIF   ('&RECFM' EQ 'VM').RVM\n         AIF   ('&RECFM' EQ 'VB').RVB\n         AIF   ('&RECFM' EQ 'VBM').RVBM\n         AIF   ('&RECFM' EQ 'VBA').RVBA\n         AIF   ('&RECFM' EQ 'U').RU\n         MNOTE 8,'INVALID RECFM'\n         AGO   .KEYLEN\n.RF      ANOP\n         MVI   S99TUPAR,X'80'\n         AGO   .DORECFM\n.RFA     ANOP\n         MVI   S99TUPAR,X'84'\n         AGO   .DORECFM\n.RFM     ANOP\n         MVI   S99TUPAR,X'82'\n         AGO   .DORECFM\n.RFB     ANOP\n         MVI   S99TUPAR,X'90'\n         AGO   .DORECFM\n.RFBA    ANOP\n         MVI   S99TUPAR,X'94'\n         AGO   .DORECFM\n.RFBM    ANOP\n         MVI   S99TUPAR,X'92'\n         AGO   .DORECFM\n.RFBS    ANOP\n         MVI   S99TUPAR,X'9A'\n         AGO   .DORECFM\n.RV      ANOP\n         MVI   S99TUPAR,X'40'\n         AGO   .DORECFM\n.RVA     ANOP\n         MVI   S99TUPAR,X'44'\n         AGO   .DORECFM\n.RVM     ANOP\n         MVI   S99TUPAR,X'42'\n         AGO   .DORECFM\n.RVB     ANOP\n         MVI   S99TUPAR,X'50'\n         AGO   .DORECFM\n.RVBA    ANOP\n         MVI   S99TUPAR,X'54'\n         AGO   .DORECFM\n.RVBM    ANOP\n         MVI   S99TUPAR,X'52'\n         AGO   .DORECFM\n.RVBS    ANOP\n         MVI   S99TUPAR,X'5A'\n         AGO   .DORECFM\n.RU      ANOP\n         MVI   S99TUPAR,X'C0'\n         AGO   .DORECFM\n.DORECFM ANOP\n         MVI   S99TUKEY+1,DALRECFM     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,1            SET LENGTH\n         RCPDINC 8\n.KEYLEN  ANOP\n         AIF   ('&KEYLEN' EQ '').EXIT\n         SPACE\n***********************************************************************\n**    DCB KEYLEN TEXT UNIT                                           **\n***********************************************************************\n         MVI   S99TUKEY+1,DALKYLEN     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER\n         MVI   S99TULNG+1,1            SET LENGTH\n         MVI   S99TUPAR,AL1(&KEYLEN)   SET PARAMETER\n         RCPDINC 8\n.EXIT    MEND\n./ ADD NAME=RCPDDN   0100-03065-03065-2223-00027-00027-00000-DYNALLC\n         MACRO\n         RCPDDN &DDN\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALDDNAM,1,&DDN\n         MEXIT\n.BTU     RCPTUBFR DALDDNAM,14,&DDN\n         MEND\n./ ADD NAME=RCPDDNRT 0100-03065-03065-2223-00012-00012-00000-DYNALLC\n         MACRO\n         RCPDDNRT\n         SPACE 1\n***********************************************************************\n**    DDNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            SET LENGTH FIELD\n         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n./ ADD NAME=RCPDEBUG 0100-03065-03065-2223-00019-00019-00000-DYNALLC\n         MACRO\n         RCPDEBUG &ON\n         GBLA  &RCPBGN#,&RCPSWS(10)\n         GBLB  &RCPDBUG\n         GBLC  &RCPPRE,&RCPWKDS,&RCPWKCS\n         AIF   ('&ON' EQ '').TSW\n&RCPDBUG SETB 1\n.TSW     AIF   (&RCPDBUG).DEBUG\n         MEXIT\n.DEBUG   MNOTE *,'RCPBGN# IS &RCPBGN#'\n         MNOTE *,'RCPSWS(1) IS &RCPSWS(1)'\n         MNOTE *,'RCPSWS(2) IS &RCPSWS(2)'\n         MNOTE *,'RCPSWS(3) IS &RCPSWS(3)'\n         MNOTE *,'RCPSWS(4) IS &RCPSWS(4)'\n         MNOTE *,'RCPSWS(5) IS &RCPSWS(5)'\n         MNOTE *,'RCPWKCS IS ''&RCPWKCS'''\n         MNOTE *,'RCPWKDS IS ''&RCPWKDS'''\n         MNOTE *,'RCPPRE IS ''&RCPPRE'''\n         MEND\n./ ADD NAME=RCPDEFER 0100-03065-03065-2223-00009-00009-00000-DYNALLC\n         MACRO\n         RCPDEFER\n         SPACE\n***********************************************************************\n**     DEFER VOLUME MOUNT TEXT ATTRIBUTE UNIT                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALDEFER     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n./ ADD NAME=RCPDFPL  0100-03065-03065-2223-00044-00044-00000-DYNALLC\n         MACRO\n         RCPDFPL\n         GBLC  &RCPPRE\n         GBLB  &RCPDFPL(2)\n         GBLB  &RCPDFPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPDFPL(2)).BYPDFPL\n&RCPDFPL(2) SETB 1\n         IKJDFPL\nL#DFPL   EQU   *-DFPL                  LENGTH OF DEFAULT PARAM LIST\n         IKJDFPB\nL#DFPB   EQU   *-DFPB                  LENGTH OF DEFAULT PARAM BLOCK\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPDFPL RCPDS\n&P.DFPL  DS    CL(L#DFPL)              RESERVE SPACE FOR DFPL\n&P.DFPB  DS    CL(L#DFPB)              RESERVE SPACE FOR DFPB\n&P.DSNB  DS    CL48                    RESERVE SPACE FOR DSNAME BUFFER\n         RCPDS\n         EJECT\n***********************************************************************\n***   THIS CODE GENERATES AN DEFAULT SERVICE ROUTINE PARAMETER LIST ***\n***       AND PARAMETER BLOCK                                       ***\n***********************************************************************\n         LA    R1,&P.DFPL              LOAD DFPL ADDRESS\n         USING DFPL,R1                 DFPL ADDRESSABLE\n         MVC   DFPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   DFPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,DFPLECB             AND STORE IN DFPL\n         LA    R15,&P.DFPB             LOAD DFBP ADDRESS\n         ST    R15,DFPLDFPB             AND STORE IT IN DFPB\n         DROP  R1\n         USING DFPB,R15                ADDRESS DFPB DSECT\n         XC    DFPB(L#DFPB),DFPB       CLEAR DEFAULT PARAMETER BLOCK\n         MVC   DFPBPSCB,CPPLPSCB       MOVE IN ADDRESS OF PSCB\n         LA    R1,&P.DSNB              LOAD DSNAME BUFFER ADDRESS\n         ST    R1,DFPBDSN               AND STORE IT INTO DFPB\n         MVI   DFPBCODE,DFPB04          SET ENTRY CODE\n         DROP  R15                     DFPB NO LONGER ADDRESSABLE\n         EJECT\n         MEND\n./ ADD NAME=RCPDINC  0100-03065-03065-2223-00013-00013-00000-DYNALLC\n         MACRO\n         RCPDINC &L1\n         GBLA  &DTUO,&DTUPO\n         GBLC  &DYNP\n         AIF   ('&L1' EQ '').T2\n         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT\n&DTUPO   SETA  &DTUPO+4\n&DTUO    SETA  &DTUO+&L1\n         MEXIT\n.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n./ ADD NAME=RCPDISP  0100-03065-03065-2223-00053-00053-00000-DYNALLC\n         MACRO\n         RCPDISP &DISP\n         LCLA  &I\n         LCLB  &B(4)\n         AIF   ('&DISP(1)' EQ '').TD2\n         SPACE\n***********************************************************************\n**     DATA SET INITIAL STATUS                                       **\n***********************************************************************\n&B(1)    SETB  ('&DISP(1)' EQ 'SHR')\n&B(2)    SETB  ('&DISP(1)' EQ 'NEW')\n&B(3)    SETB  ('&DISP(1)' EQ 'MOD')\n&B(4)    SETB  ('&DISP(1)' EQ 'OLD')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1\n         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'\n&B(1)    SETB  1\n.OK1     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')\n         RCPDINC 8\n.TD2     AIF   ('&DISP(2)' EQ '').TD3\n         SPACE\n***********************************************************************\n**    DATA SET NORMAL DISPOSITION                                    **\n***********************************************************************\n&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2\n         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'\n&B(1)    SETB  1\n.OK2     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.TD3     AIF   ('&DISP(3)' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   DATASET CONDITIONAL DISPOSITION                                 **\n***********************************************************************\n&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n./ ADD NAME=RCPDS    0100-03065-03065-2223-00026-00026-00000-DYNALLC\n         MACRO\n         RCPDS\n         GBLB  &RCPDSBR\n         GBLC  &RCPWKDS,&RCPWKCS,&RCPDS\n         AIF   ('&RCPDS' NE '').RESUME\n&RCPDS   SETC  '&SYSECT'\n         AIF   ('&RCPWKDS' EQ '').CSECT\n&RCPWKDS DSECT                         ENTER WORKAREA DSECT\n         MEXIT\n.CSECT   AIF   ('&RCPWKCS' EQ '').BRANCH\n&RCPWKCS CSECT                         ENTER WORKAREA CSECT\n         MEXIT\n.RESUME  AIF   (&RCPDSBR).BRTO\n&RCPDS   CSECT                         RESUME PROGRAM CSECT\n&RCPDS   SETC  ''\n         MEXIT\n.BRANCH  ANOP\n&RCPDS   SETC  'RCP&SYSNDX'\n&RCPDSBR SETB  1\n         B     &RCPDS                  BRANCH AROUND CONSTANTS\n         MEXIT\n.BRTO    ANOP\n&RCPDS   DS    0H\n&RCPDSBR SETB  0\n&RCPDS   SETC  ''\n         MEND\n./ ADD NAME=RCPDSECT 0100-03065-03065-2223-00011-00011-00000-DYNALLC\n         MACRO\n&NAME    RCPDSECT &LTORG=YES\n         AIF   ('&LTORG' NE 'YES').RCPDS\n***********************************************************************\n****                  LITERALS                                     ****\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n.RCPDS   RCPDS\n         MEND\n./ ADD NAME=RCPDSN   0100-03065-03065-2223-00068-00068-00000-DYNALLC\n         MACRO\n         RCPDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE DSNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         AIF   ('&DSN'  EQ '*').TERM\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 52\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.TERM    MVI   S99TUKEY+1,DALTERM\n         RCPDINC 4\n         MEXIT\n.BD      RCPTUBFR DALDSNAM,52,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DALDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   BUILD THE MEMBER NAME TEXT UNIT                                 **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DALMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DALMEMBR,1,&MEMBER\n.EXIT    MEND\n./ ADD NAME=RCPDSNPD 0100-03065-03065-2223-00009-00009-00000-DYNALLC\n         MACRO\n         RCPDSNPD &PDE\n         AIF   ('&PDE'(1,1) EQ '(').RPDE\n         RCPDSN &PDE,8+&PDE\n         RCPPSWD 16+&PDE\n         MEXIT\n.RPDE    RCPDSN &PDE,8&PDE\n         RCPPSWD 16(&PDE)\n         MEND\n./ ADD NAME=RCPDSNRT 0100-03065-03065-2223-00011-00011-00000-DYNALLC\n         MACRO\n         RCPDSNRT\n         SPACE\n***********************************************************************\n**    DSNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDSN     SET RETURN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,44           SET LENGTH FIELD\n         RCPDINC 52\n         MEND\n./ ADD NAME=RCPDSRGR 0100-03065-03065-2223-00012-00012-00000-DYNALLC\n         MACRO\n         RCPDSRGR\n         SPACE\n***********************************************************************\n**    DSORG RETURN TEXT UNIT                                         **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTORG     SET RETURN DSORG KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH FIELD\n         XC    S99TUPAR(2),S99TUPAR    INITIALIZE FIELD TO ZERO\n         RCPDINC 8\n         MEND\n./ ADD NAME=RCPDUMMY 0100-03065-03065-2223-00009-00009-00000-DYNALLC\n         MACRO\n         RCPDUMMY &DUMMY\n         SPACE\n***********************************************************************\n**      DUMMY DATASET TEXT UNIT                                      **\n***********************************************************************\n         MVI   S99TUPAR+1,DALDUMMY     MOVE IN DUMMY DS TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPENDD  0100-03065-03065-2223-00037-00037-00000-DYNALLC\n         MACRO\n&NAME    RCPENDD\n         GBLB  &RCPECT(2),&RCPUPT(2),&RCPPSCB(2),&RCPS99(2)\n         GBLC  &RCPPRE,&RCPWKDS,&RCPDS\n         LCLC  &P,&CS\n&CS      SETC  '&RCPDS'                PROGRAM CSECT\n         AIF   (NOT &RCPS99(1)).TDS\n         DYNSPACE\n.TDS     AIF   ('&RCPWKDS' EQ '').RCPDS\n         DS    0D                      ALIGN TO DOUBLEWORD\n&P       SETC  '&RCPPRE'\n&P.WKLEN EQU   *-&RCPWKDS              LENGTH OF WORK AREA\n.RCPDS   RCPDS\n         EJECT\n         AIF   (NOT &RCPECT(1) OR &RCPECT(2)).TRYUPT\n         IKJECT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPECT(2)     SETB           1\n.TRYUPT  AIF   (NOT &RCPUPT(1) OR &RCPUPT(2)).TRYPSCB\n         IKJUPT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPUPT(2) SETB  1\n.TRYPSCB AIF   (NOT &RCPPSCB(1) OR &RCPPSCB(2)).TRYS99\n         IKJPSCB\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPPSCB(2) SETB  1\n.TRYS99  AIF   (NOT &RCPS99(1) OR &RCPS99(2)).TRYREST\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPS99(2) SETB  1\n.TRYREST MEND\n./ ADD NAME=RCPFDDN  0100-03065-03065-2223-00027-00027-00000-DYNALLC\n         MACRO\n         RCPFDDN &DDN\n         GBLC &DYNP\n         SPACE\n***********************************************************************\n**        FREE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').B\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DUNDDNAM,1,&DDN\n         MEXIT\n.B       RCPTUBFR DUNDDNAM,14,&DDN\n         MEND\n./ ADD NAME=RCPFDISP 0100-03065-03065-2223-00020-00020-00000-DYNALLC\n         MACRO\n         RCPFDISP &DISP\n         LCLB  &B(4)\n         LCLA  &I\n         SPACE\n***********************************************************************\n**       OVERRIDING DISPOSITION                                      **\n***********************************************************************\n&B(1)    SETB  ('&DISP' EQ 'KEEP')\n&B(2)    SETB  ('&DISP' EQ 'DELETE')\n&B(3)    SETB  ('&DISP' EQ 'CATLG')\n&B(4)    SETB  ('&DISP' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP IS INVALID, DISP=KEEP USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DUNOVDSP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n./ ADD NAME=RCPFDSN\n         MACRO\n         RCPFDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**      FREE DATA SET TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DUNDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 52\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.BD      RCPTUBFR DUNDSNAM,52,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DUNDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**       FREE MEMBER NAME TEXT UNIT                                  **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DUNMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DUNMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DUNMEMBR,1,&MEMBER\n.EXIT    MEND\n./ ADD NAME=RCPFHOLD\n         MACRO\n         RCPFHOLD &H\n         AIF   ('&H' EQ 'YES').YES\n         AIF   ('&H' EQ 'NO').NO\n         MNOTE 4,'HOLD PARMETER VALUE INCORRECT - IGNORED'\n         MEXIT\n.YES     ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT HOLD TEXT UNIT                             **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEXIT\n.NO      ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT NO HOLD TEXT UNIT                          **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPFORUS\n         MACRO - TO SET UP SVC 99 TEXT UNIT 'FOR USER'\n         RCPFORUS &T\n         SPACE 1\n***********************************************************************\n**       'FOR USER' TEXT UNIT                                        **\n***********************************************************************\n         RCPVCHAR 0,8,&T,N=DALUSRID\n         MEND\n./ ADD NAME=RCPFREE\n         MACRO\n         RCPFREE &FREE\n         SPACE\n***********************************************************************\n**      UNALLOC AT CLOSE TEXT UNIT                                   **\n***********************************************************************\n         MVI   S99TUPAR+1,DALCLOSE     MOVE IN CLOSE TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPIOPL\n         MACRO\n&NAME    RCPIOPL\n         GBLC  &RCPPRE\n         GBLB  &RCPIOPL(2)\n         GBLB  &RCPSTPB(2),&RCPPTPB(2),&RCPPGPB(2),&RCPGTPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPIOPL(2)).BYPIOPL\n&RCPIOPL(2) SETB 1\n         IKJIOPL\nL#IOPL   EQU   *-IOPL                  LENGTH OF IO PARAM LIST\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPIOPL RCPDS\n&P.IOPL  DS    CL(L#IOPL)              RESERVE SPACE FOR IOPL\n         RCPDS\n         SPACE 5\n***********************************************************************\n***   THIS CODE GENERATES AN I/O SERVICE ROUTINE PARAMETER LIST     ***\n***********************************************************************\n         LA    R1,&P.IOPL              LOAD IOPL ADDRESS\n         USING IOPL,R1                 IOPL ADDRESSABLE\n         MVC   IOPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   IOPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,IOPLECB             AND STORE IN IOPL\n         DROP  R1\n  AIF (&RCPSTPB(1) OR &RCPGTPB(1) OR &RCPPGPB(1) OR &RCPPTPB(1)).I\n         MEXIT\n.I       EJECT\n         AIF   (NOT &RCPSTPB(1) OR &RCPSTPB(2)).TPT\n         IKJSTPB\n&RCPSTPB(2) SETB 1\nL#STPB   EQU   *-STPB         LENGTH OF STPB\n&SYSECT  CSECT\n.TPT     AIF   (NOT &RCPPTPB(1) OR &RCPPTPB(2)).TGT\n         IKJPTPB\n&RCPPTPB(2) SETB 1\nL#PTPB   EQU   *-PTPB         LENGTH OF PTPB\n&SYSECT  CSECT\n.TGT     AIF   (NOT &RCPGTPB(1) OR &RCPGTPB(2)).TPG\n         IKJGTPB\n&RCPGTPB(2) SETB 1\nL#GTPB   EQU   *-GTPB         LENGTH OF GTPB\n&SYSECT  CSECT\n.TPG     AIF   (NOT &RCPPGPB(1) OR &RCPPGPB(2)).STO\n         IKJPGPB\n&RCPPGPB(2) SETB 1\nL#PGPB   EQU   *-PGPB         LENGTH OF PGPB\n&SYSECT  CSECT\n.STO     SPACE 3\n&L       SETC  ''\n         RCPDS\n         AIF   (NOT &RCPSTPB(1)).XPT\n&P.STPB  DS    CL(L#STPB)              RESERVE SPACE FOR STPB\n&L       SETC  '&L.+L#STPB'\n.XPT     AIF   (NOT &RCPPTPB(1)).XGT\n&P.PTPB  DS    CL(L#PTPB)              RESERVE SPACE FOR PTPB\n&L       SETC  '&L.+L#PTPB'\n.XGT     AIF   (NOT &RCPGTPB(1)).XPG\n&P.GTPB  DS    CL(L#GTPB)              RESERVE SPACE FOR GTPB\n&L       SETC  '&L.+L#GTPB'\n.XPG     AIF   (NOT &RCPPGPB(1)).XC\n&P.PGPB  DS    CL(L#PGPB)              RESERVE SPACE FOR PGPB\n&L       SETC  '&L.+L#PGPB'\n.XC      RCPDS\n&L1      SETC  '&L'(2,K'&L-1)\n&L       SETC  '&P'.'&L1'(3,4)\n         XC    &L.(&L1.),&L            CLEAR IOPB AREA\n         MEND\n./ ADD NAME=RCPLINK\n         MACRO\n&NAME    RCPLINK &MODULE\n         LCLC  &OFFSET,&C\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&OFFSET  SETC  '736'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&OFFSET  SETC  '444'\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&OFFSET  SETC  '348'\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&OFFSET  SETC  '464'\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&OFFSET  SETC  '472'\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LINK USED'\n*\n         AGO   .LINK\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R15,&OFFSET.(R15)       LOAD MODULE ADDRESS\n         LTR   R15,R15                 IS MODULE ADDRESS THERE?\n&C       SETC  'RCP&SYSNDX'\n         BNM   &C.L                     IF NOT, BRANCH TO LINK\n         BALR  R14,R15                  ELSE BALR TO IT\n         B     &C.B                      AND BYPASS LINK\n&C.L     LINK  EP=&MODULE\n&C.B     DS    0H                      BRANCHED TO IF LINK BYPASSED\n         MEXIT\n.LINK    ANOP\n&NAME    LINK  EP=&MODULE\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEND\n./ ADD NAME=RCPLOAD\n         MACRO\n&NAME    RCPLOAD &MOD,&EP1\n         GBLC  &RCPPTEP,&RCPGTEP,&RCPPGEP\n         GBLC  &RCPDFEP,&RCPSTEP,&RCPPREP\n         GBLC  &RCPPRE\n         LCLA  &I,&J\n         LCLB  &EPXISTS\n         LCLC  &OFFSET,&C,&EP,&MODULE\n&EP      SETC  '&EP1'\n&MODULE  SETC  '&MOD'\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE'(K'&MOD,1) NE ')').NOBR\n&I       SETA  K'&MOD\n.LOOP    ANOP\n&I       SETA  &I-1\n         AIF   (&I LT 2).NOLB\n         AIF   ('&MOD'(&I,1) NE '(').LOOP\n&MODULE  SETC  '&MOD'(1,&I-1)\n&J       SETA  K'&MOD-1-&I\n&EP      SETC  '&MOD'(&I+1,&J)\n         RCPDS\n&EP      DS    F                       TO STORE MODULE ADDRESS\n         RCPDS\n.NOBR    ANOP\n&EPXISTS  SETB  ('&EP' NE '')\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n&RCPPREP SETC '&EP'\n         AIF   (&EPXISTS).START\n         RCPDS\n&RCPPREP SETC '&RCPPRE.PREP'\n&EP      SETC  '&RCPPREP'\n&RCPPREP DS    F                       TO HOLD ADDRESS OF IKJPARS\n         RCPDS\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&RCPDFEP SETC  '&EP'\n&OFFSET  SETC  '736'\n         AIF   (&EPXISTS).START\n&RCPDFEP SETC  '&RCPPRE.DFEP'\n         RCPDS\n&RCPDFEP DS    F                       ADDR OF DEFAULT SERVICE ROUTINE\n         RCPDS\n&EP      SETC  '&RCPDFEP'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&RCPPTEP SETC  '&EP'\n&OFFSET  SETC  '444'\n         AIF   (&EPXISTS).START\n&RCPPTEP SETC  '&RCPPRE.PTEP'\n&EP      SETC  '&RCPPTEP'\n         RCPDS\n&RCPPTEP DS    F                       ADDR OF PUTLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&RCPGTEP SETC  '&EP'\n&OFFSET  SETC  '348'\n         AIF   (&EPXISTS).START\n&RCPGTEP SETC  '&RCPPRE.GTEP'\n&EP      SETC  '&RCPGTEP'\n         RCPDS\n&RCPGTEP DS    F                       ADDR OF GETLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&RCPPGEP SETC  '&EP'\n&OFFSET  SETC  '464'\n         AIF   (&EPXISTS).START\n&RCPPGEP SETC  '&RCPPRE.PGEP'\n&EP      SETC  '&RCPPGEP'\n         RCPDS\n&RCPPGEP DS    F                       ADDR OF PUTGET ROUTINE\n         RCPDS\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&RCPSTEP SETC  '&EP'\n&OFFSET  SETC  '472'\n         AIF   (&EPXISTS).START\n&RCPSTEP SETC  '&RCPPRE.STEP'\n&EP      SETC  '&RCPSTEP'\n         RCPDS\n&RCPSTEP DS    F                       ADDR OF STACK ROUTINE\n         RCPDS\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LOAD USED'\n*\n         AGO   .LOAD\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R0,&OFFSET.(R15)        LOAD MODULE ADDRESS\n         LTR   R0,R0                   IS MODULE LOADED?\n&C       SETC  'RCP&SYSNDX'\n         BM    &C                      IF SO, BYPASS LOAD MACRO\n.LOAD    LOAD EP=&MODULE.\n         AIF   ('&EP' EQ '').EPERR\n&C       ST    R0,&EP                  STORE ENTRY POINT ADDRESS\n         MEXIT\n.EPERR   MNOTE 4,'EP RETURN FIELD NOT SPECIFIED'\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEXIT\n.NOLB    MNOTE 4,'INVALID MODULE NAME ''&MOD'''\n         MEND\n./ ADD NAME=RCPLOCSW\n*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLB  &RCPDSW3(20)   INVERT INDICATOR\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N\n         LCLB  &NOT\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8+8            INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n&NOT     SETB  0\n         AIF   ('&SW2'(1,1) NE '\u00ac' AND '&SW2'(1,1) NE '-').TNOT2\n&SW2     SETC  '&SW2'(2,K'&SW2-1)       REMOVE NOT SIGN\n&NOT     SETB  1                       INDICATE INVERT FUNCTION\n         AGO   .LOOP1A                 CONTINUE\n.TNOT2   AIF   (K'&SW2 LT 5).LOOP1A    CHECK LENGTH\n         AIF   ('&SW2'(1,4) NE 'NOT-').LOOP1A  WAS SWITCH INVERTED?\n&SW2     SETC  '&SW2'(5,K'&SW2-4)      STRIP OFF 'NOT-'\n&NOT     SETB  1                       INDICATE INVERTED\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n         AIF   (&RCPDSW3(&K) NE &NOT).SWL1  ENSURE INVERT BIT THE SAME\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NEWSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n&RCPDSW3(&RCPDSW0) SETB (&NOT)         SET INVERT INDICATOR\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&C       SETC  '&RCPGSWB(&I)'\n         AIF   (&L LT K'&C).LOOP2\n         AIF   ('&SW2'(1,K'&C) NE '&C').LOOP2\n&SW1     SETC  '&RCPGSWN(&I)'\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n./ ADD NAME=RCPLOCS1\n*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8              INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NENSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&SW1     SETC  '&RCPGSWN(&I)'\n         AIF   (&L LT K'&SW1).LOOP2\n         AIF   ('&SW1'(1,&L) NE '&SW2').LOOP2\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n./ ADD NAME=RCPLOCS2\n*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1                SWITCH BYTE NAME\n         GBLC  &RCPDSW2                SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH BIT\n&J       SETA  &RCPDSW#*8+8            ARRAY POS OF LAST SW BIT\n&I       SETA  8                       ARRAY POS-1 OF 1ST SW BIT\n.LOOP1   AIF   (&I GE &J).TGEN         IF SW NOT FOUND IN 1ST ARRAY,\n.*                                      GO SEARCH GENERIC NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&RCPDSW2').LOOP1  LOOK FOR MATCH\n.*\n.*       OK, WE'VE FOUND A MATCH.\n.*\n&I       SETA  (&I-1)/8               GET POS OF SWITCH BYTE\n&RCPDSW1 SETC  '&RCPDSWN(&I)'         MOVE IT TO EXIT PARM VAR\n&I       SETA  &I*8+1                 POINT TO 1ST SW BIT IN IT\n&J       SETA  &I+8                   POINT TO LAST SW BIT IN IT\n&M       SETA  N'&SW                  GET NO OF SWITCHES\n&L       SETA  1\n.*\n.*       NOW WE PROCESS SUBSEQUENT SWITCHES IN THE LIST\n.*\n.LOOP2   AIF   (&L GE &M).EXIT        EXIT WHEN FINISHED\n&L       SETA  &L+1                   POINT TO NEXT SW IN LIST\n&C       SETC  '&SW(&L)'               EXTRACT IT\n&RCPDSW2 SETC  '&RCPDSW2.+&C'           THEN APPEND TO PREVIOUS\n.*\n.*       NOW WE CHECK THAT THE SWITCH IS DECLARED IN THE SAME\n.*       BYTE AS THE FIRST.\n.*\n&N       SETA  &I-1                     POINT TO 1ST BIT POS MINUS 1\n.LOOP3   AIF   (&N GE &J).NM            IF SW NOT FOUND, ISSUE MNOTE\n&N       SETA  &N+1                     POINT TO NEXT\n         AIF   ('&C' NE '&RCPDSWB(&N)').LOOP3  SEARCH FOR MATCH\n         AGO   .LOOP2                   IF FOUND, GO PROCESS NEXT\n.NM      MNOTE 4,'WARNING: SWITCH ''&C'' NOT DECLARED IN SAME BYTE AS  X\n               SWITCH ''&SW(1)'' - LOGIC ERROR MAY OCCUR'\n         AGO   .LOOP2            CONTINUE FOR NEXT SWITCH BIT\n.*\n.*       IF THE SWITCH WAS NOT LOCATED IN THE EXPLICIT NAME ARRAY,\n.*       THE GENERIC NAME ARRAY IS SEARCHED.\n.*\n.TGEN    ANOP\n&I       SETA  0\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH\n&L       SETA  K'&RCPDSW2              GET LENGTH OF 1ST SW\n.LOOP4   AIF   (&I GE &RCPGSW#).ERROR  IF NOT SW NOT DECLARED, ERROR\n&I       SETA  &I+1\n&C       SETC  '&RCPGSWB(&I)'          GET GENERIC PREFIX\n&K       SETA  K'&C                    GET LENGTH OF GENERIC PREFIX\n         AIF   (&L LT &K).LOOP4         AND SKIP IF LEN OF SWITCH NAME\n.*                                          < LEN OF GENERIC PREFIX\n         AIF   ('&RCPDSW2'(1,&K) NE '&C').LOOP4  ALSO SKIP IF NO MATCH\n&RCPDSW1 SETC  '&RCPGSWN(&I)'          SAVE SWITCH BYTE NAME\n&I       SETA   1\n&J       SETA   N'&SW\n.LOOP5   AIF   (&I GE &J).EXIT         EXIT WHEN FINISHED\n&I       SETA   &I+1\n&RCPDSW2 SETC   '&RCPDSW2.+&SW(&I)'     APPEND THIS SWITCH\n         AIF    ('&SW(&I)    '(1,&K) EQ '&C').LOOP5 CHECK PREFIX\n         MNOTE 4,'WARNING: SWITCH ''&SW(&I)'' NOT GENERICALLY EQUAL TO X\n               SWITCH ''&SW(1)'''\n         AGO   .LOOP5\n.ERROR   MNOTE 8,'SWITCH ''&SW(1)'' NOT DECLARED'\n&RCPDSW1 SETC  ''             INDICATE ERROR\n.EXIT    MEND\n./ ADD NAME=RCPMCA\n         MACRO\n         RCPMCA &DSECT=YES\n         GBLC  &RCPPRE\n         GBLA  &RCPSWS(10)\n         LCLC  &P\n     RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPSWS(2) NE 2).DSECT\n&P.MCA   DS    0F                      MODULE COMMUNICATIONS AREA\n         AGO   .MCA2\n.DSECT   ANOP\n&P.MCA   DSECT                         MODULE COMMUNICATIONS AREA\n.MCA2    ANOP\n&P.XDS   DS    F                       ADDR OF EXTERNAL DUMMY SECTION\n         AIF   (&RCPSWS(3) LT 1).EXIT\n&P.A#GET DS    F                       ADDRESS OF LIFO GET ROUTINE\n&P.A#FRE DS    F                       ADDRESS OF LIFO FREE ROUTINE\n&P.#S    DS    F                       ADDRESS OF CURRENT LIFO STACK\n&P.#E    DS    F                       ADDRESS OF END OF LIFO STACK\n&P.#N    DS    F                       ADDRESS OF NEXT FREE AREA\n&P.#C    DS    F                       ADDRESS OF NEXT LIFO STACK\n&P.#L    DS    F                       LENGTH OF CURRENT LIFO STACK\n.EXIT    MEND\n./ ADD NAME=RCPMCLAS\n         MACRO\n         RCPMCLAS &MCLAS\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE MGMTCLAS TEXT UNIT                                    **\n***********************************************************************\n.MCLAS   RCPTUBFX DALMGCL,14,&MCLAS\n         MEND\n./ ADD NAME=RCPMSVGP\n         MACRO\n         RCPMSVGP &MSVGP\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE MSVGP TEXT UNIT                                       **\n***********************************************************************\n         AIF   ('&MSVGP'(K'&MSVGP,1) EQ '/').BTU\n         AIF   ('&MSVGP'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&MSVGP'(1,1) EQ '(').R\n         L     R14,&MSVGP              LOAD ADDRESS OF MSVGP\n         LH    R2,&MSVGP+4             LOAD LENGTH OF MSVGP\n         AGO   .STH\n.R       L     R14,0&MSVGP             LOAD ADDRESS OF MSVGP\n         LH    R2,4&MSVGP              LOAD LENGTH OF MSVGP\n.STH     STH   R2,S99TULNG             STORE MSVGP LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE MSVGP\n         MVI   S99TUKEY+1,DALMSVGP     MOVE IN MSVGP KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALMSVGP,1,&MSVGP\n         MEXIT\n.BTU     RCPTUBFR DALMSVGP,14,&MSVGP\n         MEND\n./ ADD NAME=RCPNTU\n         MACRO\n         RCPNTU &KEY,&LEN,&PAR\n.*\n.*     THIS IS AN ALLOC/FREE MACRO TEXT UNIT PROCESSOR SUBROUTINE\n.*     MACRO. IT BUILDS NUMERIC TYPE TEXT UNITS.\n.*\n         LCLA  &L,&R\n         LCLC  &C\n         GBLC  &RCPTYPE\n.*  ALLOC/FREE INNER MACRO TO SET UP NUMERIC TEXT UNITS\n&L       SETA  1                       DEFAULT LENGTH\n         AIF   ('&LEN' EQ '').NL\n&L       SETA  &LEN\n.NL      MVI   S99TUKEY+1,&KEY         SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           SET LENGTH FIELD\n         AIF   ('&PAR'(1,1) EQ '(').REG\n         RCPTYPE &PAR                  ANALYSE PARAMETER\n         AIF   ('&RCPTYPE' EQ 'N').NUMERIC\n&R       SETA  4-&L\n         MVC   S99TUPAR(&L),&R+&PAR    MOVE IN QUANTITY\n         RCPDINC 10\n         MEXIT\n.NUMERIC AIF   (&L EQ 1).NL1\n         MVC   S99TUPAR(&L.),=AL&L.(&PAR) MOVE IN QUANTITY\n&R       SETA  &L+6\n         AIF   (&R/2 EQ (&R+1)/2).LOK ENSURE LENGTH EVEN\n&R       SETA  &R+1\n.LOK     RCPDINC &R\n         MEXIT\n.NL1     MVI   S99TUPAR,&PAR           MOVE IN QUANTITY\n         RCPDINC 8\n         MEXIT\n.REG     ANOP\n&C       SETC  '&PAR'(2,K'&PAR-2)\n         AIF   (&L EQ 3).STCM\n         AIF   (&L EQ 2).STH\n         AIF   (&L EQ 1).STC\n         ST    &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STH     STH   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STC     STC   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STCM    STCM  &C,7,S99TUPAR           STORE TEXT UNIT QUANTITY\n.RCPDINC RCPDINC 10\n         MEND\n./ ADD NAME=RCPPERM\n         MACRO\n         RCPPERM\n         SPACE\n***********************************************************************\n**     PERMANENTLY ALLOCATED ATTRIBUTE TEXT UNIT                     **\n***********************************************************************\n         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n./ ADD NAME=RCPPPL\n         MACRO\n&NAME    RCPPPL &PCL=,&NOPARM=,&PARSERR=,&PDLREG=R11,                  X\n               &PDLNAME=,&PARSEP=,&PARSWKA=\n         GBLB  &RCPPPL(2),&RCPECT(2)\n         GBLC  &RCPPRE,&RCPPREP\n         LCLC  &P\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPPPL(2)).BPPL\n         EJECT\n         IKJPPL\nL#PPL    EQU   *-PPL                   LENGTH OF PPL\n&SYSECT  CSECT\n         SPACE 1\n&RCPPPL(2) SETB 1\n.BPPL    RCPDS\n&P.PPL   DS    CL(L#PPL)               RESERVE SPACE FOR PPL\n&P.PDLP  DS    F                       POINTER TO PDL\n         RCPDS\n         SPACE 6\n***********************************************************************\n***   THIS CODE GENERATES A PARSE PARAMETER LIST                    ***\n***********************************************************************\n         XC    &P.PDLP,&P.PDLP         ZERO PDL POINTER\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' NE '').PB2\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1                  ECT ADDRESSABLE\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)              NO, BRANCH OUT\n         SPACE\n.PB2     LA    R1,&P.PPL               LOAD PPL ADDRESS\n         USING PPL,R1\n         MVC   PPLUPT,CPPLUPT          MOVE IN UPT ADDRESS\n         MVC   PPLECT,CPPLECT          MOVE IN ECT ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE IN CBUF ADDRESS\n         LA    R15,&P.ECB              LOAD ATTN ECB ADDRESS\n         ST    R15,PPLECB              AND STORE IN PPL\n         LA    R15,&P.PDLP             LOAD PDL POINTER ADDRESS\n         ST    R15,PPLANS               AND STORE IN PPL\n         AIF   ('&PARSWKA' EQ '').PB3\n         AIF   ('&PARSWKA'(1,1) EQ '').PB4\n         LA    R15,&PARSWKA            LOAD ADDRESS OF WORK AREA\n         ST    R15,PPLUWA               AND STORE IN PPL\n         AGO   .PB3\n.PB4     ST    &PARSWKA(1),PPLUWA      STORE ADDRESS OF WORKAREA\n.PB3     AIF   ('&PCL' EQ '').EXIT\n         L     R15,=V(&PCL)            LOAD PCL ADDRESS\n         ST    R15,PPLPCL              AND STORE IN PPL\n         SPACE 2\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' EQ '').PB5\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)               NO, BRANCH OUT\n         SPACE\n.PB5     AIF   ('&SYSPARM' EQ 'MVT').MVTBYP\n         AIF   ('&RCPPREP' EQ '').NOPREP\n         L     R15,&RCPPREP            LOAD EP OF IKJPARS\n         BALR  R14,R15                  AND ENTER IT\n         AGO   .PRET\n.NOPREP  ANOP\n         L     R15,16                  LOAD CVT ADDRESS\n         TM    524(R15),X'80'          IS IKJPARS LOADED?\n         AIF   ('&PARSEP' EQ '').PBL1\n         BZ    &P.LOAD                  NO, BRANCH TO LOAD SVC\n         L     R15,524(15)             LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE ITS ADDRESS\n         BALR  R14,R15                 THEN BALR TO IT\n         B     &P.PLNKB                BYPASS LOAD SVC\n&P.LOAD  LOAD  EP=IKJPARS\n         LR    R15,R0                  LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE IT\n         BALR  R14,R15                 THEN BALR TO IT\n&P.PLNKB DS    0H\n         AGO   .PRET\n.PBL1    BZ    &P.PLINK                 NO, BRANCH TO LINK SVC\n         L     R15,524(R15)            ELSE LOAD ITS ADDRESS\n         BALR  R14,R15                  AND BALR TO IT\n         B     &P.PLNKB                BYPASS LINK SVC\n.MVTBYP  ANOP\n&P.PLINK LINK  EP=IKJPARS\n&P.PLNKB DS    0H\n.PRET    AIF   ('&PARSERR' EQ '').EXIT\n         SPACE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &PARSERR                 AND BRANCH ON NON-ZERO\n         SPACE\n         AIF   ('&PDLREG' EQ '' OR '&PDLNAME' EQ '').EXIT\n         L     &PDLREG,&P.PDLP         LOAD PDL ADDRESS\n         USING &PDLNAME,&PDLREG        PDL DSECT ADDRESSABLE\n.EXIT    MEND\n./ ADD NAME=RCPPROC\n         MACRO\n         RCPPROC &WKCSECT=,&WKDSECT=,                                  X\n               &REG1=,&REG0=,&ISA=,&SAVEPRE=,                          X\n               &SAVESUF=,&SP=\n         GBLA  &RCPSWS(10)\n         GBLC  &RCPPRE,&RCPWKCS,&RCPWKDS\n         GBLC  &RCPSPN\n         LCLC  &P,&C\n         RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   ('&WKCSECT' EQ '').TDS\n         SPACE\n         MNOTE 4,'WKCSECT= OPTION INVALID WITH PROC OPTION, '\n         MNOTE *,'    WKDSECT=  USED INSTEAD'\n&RCPWKDS SETC  '&WKCSECT'\n         AGO   .SETCS\n.TDS     AIF   ('&WKDSECT' EQ '').SYSECT\n&RCPWKDS SETC  '&WKDSECT'\n         AGO   .SETCS\n.SYSECT  ANOP\n&RCPWKDS SETC  '&SYSECT'\n.SET1    AIF   (K'&RCPWKDS LT 8).LOK\n&RCPWKDS SETC  '&RCPWKDS'(1,4)'&RCPWKDS'(6,3)'1'\n         AGO   .SETCS\n.LOK     ANOP\n&RCPWKDS SETC  '&RCPWKDS.1'\n.SETCS   ANOP\n&RCPWKCS SETC  ''\n&RCPSWS(4) SETA &RCPSWS(2)-1 SET W/A TO BE FREED OPT IF PROC(MAIN)\n         AIF   ('&ISA' EQ '').NISA\n&RCPSWS(3) SETA 1                      SET LIFO FLAG IF ISA SPEC\n.NISA    ANOP\n         SPACE 2\n         RCPDS\n         DS    9D                      SAVE AREA\n&P.RCODE DS    F                       RETURN CODE\n         RCPMCA\n         RCPDS\n         SPACE 2\n         AIF   ('&REG1' EQ '').TR0\n         LR    &REG1,R1                SAVE CONTENTS OF REG 1\n.TR0     AIF   ('&REG0' EQ '').TP\n         LR    &REG0,R0                SAVE CONTENTS OF REG 0\n.TP      AIF   (&RCPSWS(2) EQ 2).PROCMN   PROCMAIN OPTION\n         AIF   (&RCPSWS(3) EQ 1).PL    LIFO OPTION\n         L     R15,0(R13)              R15 -> MODULE COMMUNIC. AREA\n         L     R15,&P.XDS-&P.MCA(R15)  LOAD EXTERNAL DUMMY SECT ADDR\n         AL    R15,&P.QCON             GET OFFSET TO WORK AREA\n         ST    R15,8(R13)              CHAIN SAVE\n         ST    R13,4(R15)               AREAS TOGETHER\n         MVC   0(4,R15),0(R13)         COPY POINTER TO COMM AREA\n         LR    R13,R15                 LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13              ESTABLISH ADDRESSABLITY TO IT\n         MEXIT\n.PL      ANOP\n***********************************************************************\n*        GET WORKAREA FROM LIFO STACK                                 *\n***********************************************************************\n         #GET  LV=&P.WKLEN\n         ST    R1,8(R13)               CHAIN SAVE\n         ST    R13,4(R1)                AREAS TOGETHER\n         MVC   0(4,R1),0(R13)          PROPAGATE MODULE COMM. AREA ADDR\n         LR    R13,R1                  LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13             ESTABLISH ADDRESSABILITY TO IT\n         MEXIT\n.PROCMN  L     R0,&P.CXD               LOAD WORK AREA LENGTH\n         AIF   ('&SYSPARM' EQ 'MVT').MVT\n MNOTE *,'      GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE'\n         GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE\n         AGO   .CONT\n.MVT     AIF   ('&SP' EQ '').NOSP\n         ICM   R0,8,=AL1(&SP)          INSERT SUBPOOL NUMBER\n.NOSP    ANOP\n*        GETMAIN R,LV=(0)              OBTAIN A WORK AREA\n.CONT    ANOP\n&RCPSPN  SETC  '&SP'\n         LR    R15,R13                 SAVE CALLER'S SAVE AREA ADDR\n         LR    R13,R1                  LOAD EXT DUMMY SECTION ADDR\n         AL    R13,&P.QCON              ADD OFFSET TO WORK AREA\n         ST    R13,8(R15)              CHAIN SAVE\n         ST    R15,4(R13)               AREAS TOGETHER\n         USING &RCPWKDS,R13            GET WORKAREA ADDRESSABILITY\n         ST    R1,&P.XDS               STORE DUMMY SECTION ADDR IN     X\n                                         MODULE COMMUNICATIONS AREA\n         LA    R15,&P.MCA              STORE COMMUNICATIONS AREA ADDR\n         ST    R15,0(R13)               IN WORD 1 OF SAVE AREA\n         AIF   (&RCPSWS(3) EQ 0 AND '&ISA' EQ '').EXIT\n&RCPSWS(3) SETA 1                      SET LIFO IN CASE ONLY ISA SPEC\n&C       SETC  '&ISA'\n         AIF   ('&ISA' NE '').TK\n&C       SETC  '8192'\n         AGO   .NK\n.TK      AIF   ('&C'(K'&C,1) NE 'K').NK\n&C       SETC  '&C'(1,K'&C-1)'*1024'\n.NK      EJECT\n***********************************************************************\n**       INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS         **\n**       TO LIFO STACK AND LIFO GET/FREE ROUTINES                    **\n***********************************************************************\n         SPACE 1\n         MVC   &P.A#GET,=V(#####GET)   MOVE LIFO GET AND FREE\n         MVC   &P.A#FRE,=V(####FREE)    ROUTINE ADDRESSES TO MCA\n         L     R15,=Q(#####ISA)        COMPUTE LIFO STACK\n         AL    R15,&P.XDS               PSEUDO REGISTER OFFSET\n         ST    R15,&P.#S                 AND INITIALIZE POINTERS\n         ST    R15,&P.#N                  IN MODULE COMMUNICATIONS AREA\n         L     R14,=A(&C)              LOAD SIZE OF INITIAL STACK AREA\n         ST    R14,&P.#L               STORE THIS IN MCA\n         ALR   R15,R14                  THEN COMPUTE STACK END ADDRESS\n         ST    R15,&P.#E                 AND STORE THIS INTO MCA\n         EJECT\n***********************************************************************\n**       LIFO STACK GET/FREE ROUTINES                                **\n***********************************************************************\n         SPACE 1\n#####ISA DXD   CL(&C)                  DEFINE PSEUDO REGISTER FOR ISA\n         SPACE 1\n#####GET CSECT                         LIFO GET ROUTINE\n         USING *,R15\n         USING &P.MCA,R1\n         A     R0,&P.F7                ROUND LENGTH UP TO\n         N     R0,&P.F8                 A MULTIPLE OF 8\n         AL    R0,&P.#N                COMPUTE NEXT FREE LIFO SLOT ADDR\n         CL    R0,&P.#E                COMPARE TO STACK END ADDRESS\n         BH    &P.GA                    AND IF TOO BIG, BRANCH\n         LR    R15,R1                  PRESERVE MCA ADDRESS\n         USING &P.MCA,R15              NEW BASE\n         L     R1,&P.#N                LOAD ADDRESS OF SLOT\n         ST    R0,&P.#N                 AND STORE ADDRESS OF NEXT SLOT\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.GA    EQU   *                       IF CURRENT SLOT TOO SMALL\n*        ABEND 1000,DUMP                ABEND FOR NOW\n         ABEND 1000,DUMP\n         SPACE 2\n####FREE DS    0H                      LIFO FREE ROUTINE\n         ENTRY ####FREE\n         USING *,R15                   BASE ADDRESS\n         USING &P.MCA,R1               MCA ADDRESS\n         CL    R0,&P.#S                CHECK THAT\n         BL    &P.FA                    ADDRESS TO BE\n         CL    R0,&P.#E                  FREED IS WITHIN\n         BH    &P.FA                      BOUND OF CURRENT STACK\n         AL    R0,&P.F7                GET UPPER DOUBLE\n         N     R0,&P.F8                 WORD BOUNDARY\n         ST    R0,&P.#N                  AND UPDATE MCA\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.FA    EQU   *                       IF ADDRESS NOT WITHIN THIS STACK\n*        ABEND 1001,DUMP               ABEND\n         ABEND 1001,DUMP\n         SPACE 2\n&P.F7    DC    F'7'                    CONSTANTS\n&P.F8    DC    F'-8'                    TO ROUND UP TO DOUBLEWORD SIZE\n         DROP  R1,R15                  KILL ADDRESSABILITY\n&SYSECT  CSECT                         RESUME MAIN PROGRAM CSECT\n.EXIT    MEND\n./ ADD NAME=RCPPSWD\n         MACRO\n         RCPPSWD &PASSW\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE PASSWORD TEXT UNIT                                    **\n***********************************************************************\n         RCPVCHAR DALPASSW,14,&PASSW\n         MEND\n./ ADD NAME=RCPQNAME\n         MACRO\n         RCPQNAME &QNAME\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE QNAME TEXT UNIT                                       **\n***********************************************************************\n         RCPVCHAR DALQNAME,14,&QNAME\n         MEND\n./ ADD NAME=RCPRNGE\n         MACRO - BREAK A RANGE PARAMETER INTO TWO\n         RCPRNGE &P\n         GBLC  &RCPRNGE(2)\n         LCLA  &I,&J,&K\n&K       SETA  K'&P\n&RCPRNGE(1) SETC ''\n&RCPRNGE(2) SETC ''\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &K).NR\n         AIF   ('&P'(&I,1) NE '-' AND '&P'(&I,1) NE ':').LOOP\n&RCPRNGE(1) SETC '&P'(1,&I-1)\n&RCPRNGE(2) SETC '&P'(&I+1,&K-&I)\n         MEXIT\n.NR      ANOP\n&RCPRNGE(1) SETC '&P'\n         MEND\n./ ADD NAME=RCPSCLAS\n         MACRO\n         RCPSCLAS &SCLAS\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE STORCLAS TEXT UNIT                                    **\n***********************************************************************\n.BTU     RCPTUBFX DALSTCL,14,&SCLAS\n         MEND\n./ ADD NAME=RCPSPACE\n         MACRO\n         RCPSPACE &SPACE\n         GBLA  &RCPSUB#                NO OF SUBLIST ELEMENTS\n         GBLC  &RCPSUBL(100)           SUBLIST ELEMENTS\n.**********************************************************************\n.*    THIS IS AN ALLOC INNER MACRO TO BUILD THE ALLOCATION SPACE\n.*    QUANTITY TEXT UNIT. IT SHOULD BE SPECIFIED AS:-\n.*     SPACE=(TYPE,(PRIMARY,SECONDARY,DIRECTORY),RLSE,CONTIG,ROUND)\n.*   WHERE TYPE IS 'TRK', 'CYL', 'ABSTR' OR A BLOCK QUANTITY\n.*     'CYL' OR 'TRK' SHOULD NOT BE ENTERED IN QUOTES. THE BLOCK\n.*     QUANTITY CAN BE A NUMBER, A REGISTER (IN BRACKETS), OR THE\n.*     NAME OF A FULLWORD CONTAINING THE BLOCK SIZE.\n.**********************************************************************\n         AIF   ('&SPACE(1)' EQ '' OR '&SPACE(1)' EQ 'TRK').TRK\n         AIF   ('&SPACE(1)' EQ 'CYL').CYL\n***********************************************************************\n**        SPACE UNIT IN BLOCKS                                       **\n***********************************************************************\n         RCPNTU DALBLKLN,3,&SPACE(1)  GENERATE BLOCK UNIT TU\n         AGO   .TPRIME        GO TEST PRIME QUANTITY\n.TRK     ANOP  TRACK SPEC REQ OR DEFAULTED\n         SPACE\n***********************************************************************\n**       SPACE QUANTITY IN TRACKS                                    **\n***********************************************************************\n         MVI   S99TUKEY+1,DALTRK       SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TPRIME\n.CYL     ANOP  CYL QUANTITY\n         SPACE 1\n***********************************************************************\n**      SPACE UNIT IN CYLINDERS                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DALCYL       SET TEXT UNIT KEY\n         RCPDINC 4                     STORE TEXT UNIT ADDR\n.TPRIME  RCPSUBL &SPACE(2)             BREAK UP SUBLIST\n         AIF   (&RCPSUB# EQ 0).TCONTIG\n         AIF   ('&RCPSUBL(1)' EQ '').TSP2\n         SPACE\n***********************************************************************\n**       PRIMARY SPACE QUANTITY                                      **\n***********************************************************************\n         RCPNTU DALPRIME,3,&RCPSUBL(1)\n.TSP2    AIF   (&RCPSUB# LT 2).TCONTIG\n         AIF   ('&RCPSUBL(2)' EQ '').TSP3\n         SPACE\n***********************************************************************\n**       SECONDARY SPACE QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALSECND,3,&RCPSUBL(2)\n.TSP3    AIF   (&RCPSUB# LT 3).TCONTIG\n         AIF   ('&RCPSUBL(3)' EQ '').TCONTIG\n         SPACE\n***********************************************************************\n**       DIRECTORY BLOCK QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALDIR,3,&RCPSUBL(3)\n.TCONTIG AIF  ('&SPACE(3)' EQ 'CONTIG' OR '&SPACE(4)' EQ 'CONTIG').CON\n         AIF   ('&SPACE(3)' EQ 'MXIG' OR '&SPACE(4)' EQ 'MXIG').MXIG\n         AIF   ('&SPACE(3)' EQ 'ALX' OR '&SPACE(4)' EQ 'ALX').ALX\n.TRLSE   AIF   ('&SPACE(3)' EQ 'RLSE' OR '&SPACE(4)' EQ 'RLSE').RLSE\n.TROUND  AIF   ('&SPACE(4)'EQ'ROUND'OR'&SPACE(5)'EQ'ROUND').ROUND\n         MEXIT\n.CON     ANOP\n***********************************************************************\n**      CONTIGUOUS SPACE TEXT UNIT                                   **\n***********************************************************************\n         RCPNTU DALSPFRM,1,8\n         AGO   .TRLSE\n.MXIG    ANOP\n***********************************************************************\n**       MAXIMUM CONTIGUOUS SPACE TEXT UNIT                          **\n***********************************************************************\n         RCPNTU DALSPFRM,1,4\n         AGO   .TRLSE\n.ALX     ANOP\n***********************************************************************\n**       'ALX' SPACE TEXT UNIT                                       **\n***********************************************************************\n         RCPNTU DALSPFRM,1,2\n         AGO   .TRLSE\n.RLSE    ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRLSE      SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TROUND\n.ROUND   ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALROUND     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPSPEC\n         MACRO - SET UP USER DEFINED TEXT UNIT\n         RCPSPEC &T\n         LCLA  &I,&J\n&I       SETA  1\n&J       SETA  K'&T\n         SPACE\n***********************************************************************\n**       PROCESS SPECIAL TEXT UNITS                                  **\n***********************************************************************\n.LOOP    RCPVCHAR &T(&I),&T(&I+2),&T(&I+3),N=&T(&I+1)\n&I       SETA  &I+4\n         AIF   (&I LE &J).LOOP\n         MEND\n./ ADD NAME=RCPSR2\n         MACRO\n         RCPSR2 &A\n         GBLB  &RCPSR2\n         GBLC  &DYNP\n         LCLC  &C\n.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY\n.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND\n.*    GENERATES MOVE INSTRUCTION FOR EXECUTE\n         AIF   ('&A' NE '').UNSAVE\n         AIF   (&RCPSR2).EXIT\n&RCPSR2  SETB  1\n         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2\n         MEXIT\n.UNSAVE  AIF   (NOT &RCPSR2).EXIT\n         B     *+10                    SKIP NEXT INSTRUCTION\n&C       SETC  '&DYNP.MVC'\n&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE\n         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2\n&RCPSR2  SETB  0\n.EXIT    MEND\n./ ADD NAME=RCPSSREQ\n         MACRO\n         RCPSSREQ\n         SPACE 1\n***********************************************************************\n**       SUBSYSTEM REQUEST TEXT UNIT                                 **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DALSSREQ MOVE IN TEXT UNIT KEY\n         RCPDINC                   4\n         MEND\n./ ADD NAME=RCPSUBL\n         MACRO - BREAK DOWN A SUBLIST\n         RCPSUBL &L\n         GBLA  &RCPSUB#                NO OF ELEMENTS FOUND\n         GBLC  &RCPSUBL(100)           ELEMENTS\n         LCLA  &I,&J,&K\n&RCPSUB# SETA  0                       INITIALIZE\n         AIF   ('&L' EQ '').EXIT       EXIT IF NULL STRING\n         AIF   ('&L'(1,1) NE '(').NOSUB\n&K       SETA  K'&L-1\n&I       SETA  2\n&J       SETA  1\n.LOOP    ANOP\n&J       SETA  &J+1\n         AIF   (&J  GT &K).LAST\n         AIF   ('&L'(&J,1) NE ',').LOOP\n&RCPSUB# SETA &RCPSUB#+1\n         AIF   (&J EQ &I).NULL\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n&I       SETA  &J+1\n         AGO   .LOOP\n.NULL    ANOP\n&RCPSUBL(&RCPSUB#) SETC ''\n&I       SETA  &J+1\n         AGO   .LOOP\n.LAST    AIF   (&J EQ &I).LASTNUL\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n         AGO   .EXIT\n.LASTNUL ANOP\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC ''\n         AGO   .EXIT\n.NOSUB   ANOP\n&RCPSUBL(1) SETC '&L'\n&RCPSUB# SETA 1\n.EXIT    MEND\n./ ADD NAME=RCPSYSOU\n         MACRO\n         RCPSYSOU &CLASS,&COPIES=,&FREE=,&DEST=,&FORMS=,&FCB=,&CHARS=, X\n               &OUTDES=                                     *LBD 11/88*\n         GBLC  &DYNP\n         LCLC  &C\n         AIF   ('&CLASS(1)' EQ '').TPGN\n&C       SETC  '&CLASS(1)'\n         SPACE\n***********************************************************************\n**       SYSOUT CLASS TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&C'(1,1) EQ '''').Q\n         AIF   ('&C'(K'&C,1) EQ '/').BS\n         AIF   ('&C'(1,1) EQ '(').REG\n         L     R14,&C                  LOAD ADDRESS OF SYSOUT CLASS\n         MVC   S99TUPAR(1),0(R14)       AND MOVE IT TO TEXT UNIT\n         AGO   .SKEY\n.REG     MVC   S99TUPAR(1),0&C         MOVE SYSOUT CLASS TO TEXT UNIT\n.SKEY    MVI   S99TUKEY+1,DALSYSOU     SET SYSOUT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            SET LENGTH FIELD\n         RCPDINC 8\n         AGO   .TPGN\n.BS      RCPTUBFR DALSYSOU,14,&C\n         AGO   .TPGN\n.Q       RCPBTU DALSYSOU,1,&C\n.TPGN    AIF   ('&CLASS(2)' EQ '').TCOP\n         SPACE\n***********************************************************************\n**   SYSOUT PROGRAM NAME TEXT UNIT                                   **\n***********************************************************************\n&C       SETC  '&CLASS(2)'\n         RCPVCHAR DALSPGNM,14,&C\n.TCOP    AIF   ('&COPIES' EQ '').TFREE\n         SPACE\n***********************************************************************\n**    SYSOUT COPIES TEXT UNIT                                        **\n***********************************************************************\n         RCPNTU DALCOPYS,1,&COPIES\n.TFREE   AIF   ('&FREE' EQ '').TDEST\n         SPACE\n***********************************************************************\n**     FREE = CLOSE TEXT UNIT                                        **\n***********************************************************************\n         AIF   ('&FREE' EQ 'CLOSE').CLOSEOK\n         MNOTE 4,' **** FREE=&FREE INVALID, FREE=CLOSE USED'\n.CLOSEOK MVI   S99TUKEY+1,DALCLOSE     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n.TDEST   AIF   ('&DEST' EQ '').TFORMS\n         SPACE\n***********************************************************************\n**       SYSOUT DESTINATION TEXT UNIT                                **\n***********************************************************************\n         RCPVCHAR DALSUSER,14,&DEST\n.TFORMS  AIF   ('&FORMS' EQ '').TFCB\n         SPACE\n***********************************************************************\n**     SYSOUT FORMS NUMBER TEXT UNIT                                 **\n***********************************************************************\n         RCPVCHAR DALSFMNO,14,&FORMS\n.TFCB    AIF   ('&FCB' EQ '').TCHARS                        *LBD 11/88*\n         SPACE\n***********************************************************************\n**     SYSOUT FCB NAME TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALFCBIM,14,&FCB\n.TCHARS  AIF   ('&CHARS' EQ '').TOUTD                       *LBD 11/88*\n         SPACE\n***********************************************************************\n**     SYSOUT CHARS TEXT UNIT                                        **\n***********************************************************************\n         RCPVCHAR DALCHARS,14,&CHARS                        *LBD 11/88*\n         SPACE\n.TOUTD   AIF   ('&OUTDES' EQ '').EXIT                       *LBD 11/88*\n         SPACE\n***********************************************************************\n**     SYSOUT OUTPUT JCL STATEMENT REFERENCE TEXT UNIT               **\n***********************************************************************\n         RCPVCHR2 DALOUTPT,26,&OUTDES                       *LBD 11/88*\n.EXIT    MEND\n./ ADD NAME=RCPTERM\n         MACRO\n         RCPTERM\n         SPACE\n***********************************************************************\n**      TERM  DATASET TEXT UNIT                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DALTERM      MOVE IN TERM DS TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPTU\n         MACRO\n         RCPTU &TU            TEXT UNIT LIST\n         GBLA  &DTUPO         TEXT UNIT POINTER OFFSET\n         GBLC  &DYNP          ALLOC SYMBOL PREFIX\n         LCLA  &I,&J\n         LCLC  &C\n         SPACE 1\n***********************************************************************\n**       ADD SPECIAL TEXT UNITS                                      **\n***********************************************************************\n&J       SETA  N'&SYSLIST\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &J).EXIT\n         AIF   ('&TU(&I)'(1,1) EQ '(').R\n         LA    R15,&TU(&I)             LOAD TEXT UNIT ADDRESS\n         ST    R15,&DYNP.TUP+&DTUPO     AND STORE IT IN POINTER LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.R       ANOP\n&C       SETC  '&TU(&I)'(2,K'&TU(&I)-2)\n         ST    &C,&DYNP.TUP+&DTUPO     STORE TEXT UNIT ADDR IN PTR LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.EXIT    MEND\n./ ADD NAME=RCPTUBFR\n         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFR &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n./ ADD NAME=RCPTUBFX\n         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFX &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVC   S99TUKEY,=AL2(&KEY)     SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n.*&C1    SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),=C&C       MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n./ ADD NAME=RCPTXTL\n         MACRO - TO COUNT CHARACTERS IN A STRING\n         RCPTXTL &S\n         GBLA  &RCPTXTL\n         LCLA  &I,&K,&L\n&RCPTXTL SETA  0\n         AIF   (K'&S LT 3).MEND\n&RCPTXTL SETA  K'&S-2\n&L       SETA  &RCPTXTL\n&I       SETA  1\n.LOOP    ANOP\n&I       SETA  &I+1\n.LOOP2   AIF   (&I GT &L).MEND\n         AIF   ('&S'(&I,2) NE '''''' AND '&S'(&I,2) NE '&&').LOOP\n&I       SETA  &I+2\n&RCPTXTL SETA  &RCPTXTL-1\n         AGO   .LOOP2\n.MEND    MEND\n./ ADD NAME=RCPTYPE\n         MACRO\n         RCPTYPE &T\n         GBLC  &RCPTYPE\n         LCLA  &I,&K\n&K       SETA  K'&T\n&RCPTYPE SETC  ''\n         AIF   (&K EQ 0).EXIT\n&RCPTYPE SETC  'C'\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   ('&T'(&I,1) LT '0' OR '&T'(&I,1) GT '9').EXIT\n         AIF   (&I LT &K).LOOP\n&RCPTYPE SETC  'N'\n.EXIT    MEND\n./ ADD NAME=RCPUNALC\n         MACRO\n         RCPUNALC\n         SPACE 1\n***********************************************************************\n**     FREE EVEN IF PERMANENTLY ALLOCATED                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n./ ADD NAME=RCPUNIT\n         MACRO\n         RCPUNIT &U,&V\n         GBLC  &DYNP\n         AIF   ('&U' EQ '').TVOL\n         SPACE 1\n***********************************************************************\n**       UNIT NAME TEXT UNIT                                         **\n***********************************************************************\n         RCPVCHAR DALUNIT,14,&U\n.TVOL    AIF   ('&V' EQ '').EXIT\n         SPACE 1\n***********************************************************************\n**       VOLUME SERIAL TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALVLSER,14,&V\n.EXIT    MEND\n./ ADD NAME=RCPUNITC\n         MACRO\n         RCPUNITC &CNT\n         SPACE\n***********************************************************************\n**     UNIT ALLOCATION COUNT TEXT UNIT                               **\n***********************************************************************\n         RCPNTU DALUNCNT,1,&CNT\n         MEND\n./ ADD NAME=RCPVCHAR\n         MACRO\n         RCPVCHAR &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n./ ADD NAME=RCPVCHR2\n         MACRO\n         RCPVCHR2 &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVC   S99TUKEY,=AL2(&KEY)     MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n./ ADD NAME=RCPVOLRT\n         MACRO\n         RCPVOLRT\n         SPACE 1\n***********************************************************************\n**    VOLUME SERIAL RETURN TEXT UNIT                                 **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTVOL     SET RETURN VOLUME SERIAL KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,6            SET LENGTH FIELD\n         MVC   S99TUPAR(6),=CL6' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n./ ADD NAME=S99FAIL\n         MACRO\n&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=\n         GBLB  &RCPCPPL(2)             CP INDICATOR\n         GBLC  &RCPPRE\n         LCLB  &GEN\n         LCLC  &C\n&NAME    DS    0H\n         AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'\n.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS\n&GEN     SETB  1\n         AGO   .L\n.EXEC    AIF   ('&MF(2)' NE '').LISTOK\n         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'\n         MEXIT\n.LISTOK  AIF   ('&MF(3)' EQ '').TMF2\n&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST\n.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L\n         AIF   ('&MF(2)'(1,1) EQ '(').REG\n         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS\n         AGO   .L\n.REG     ANOP\n&C       SETC  '&MF(2)'(2,K'&MF(2)-2)\n         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR\n.L       AIF   ('&RB'(1,1) EQ '(').RBR\n         AIF   ('&RB' NE '').RBA\n         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'\n         MEXIT\n.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS\n         AGO   .RC\n.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK\n         ST    R14,0(R1)          AND STORE IN PLIST\n.RC      AIF   ('&RC'(1,1) EQ '(').RCR\n         LA    R14,&RC            LOAD ADDRESS OF RET CODE\n         ST    R14,4(R1)          AND STORE IN PLIST\n         AGO   .EFF02\n.RCR     ANOP\n.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD\n         ST    &RC(1),0(R14)      STORE RET CODE\n         ST    R14,4(R1)          AND STORE ITS ADDRESS\n.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0\n         ST    R14,8(R1)          STORE IT.\n         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID\n         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)          AND STORE IT\n         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER\n         AGO   .GO\n.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)         AND STORE IT\n         AIF   ('&CPPL' EQ '').DCPPL\n         AIF   ('&CPPL'(1,1) EQ '(').RCPPL\n         LA    R14,&CPPL          LOAD CPPL ADDRESS\n         ST    R14,16(R1)          AND STORE IT\n         AGO   .GO\n.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS\n         AGO   .GO\n.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL\n.GO      LINK  EP=IKJEFF18\n         AIF   (NOT &GEN).EXIT\n         SPACE 1\n         RCPDS\n&C SETC 'FAIL&SYSNDX'\n&C       DS    6F             RESERVE SPACE FOR PARAM LIST\n         RCPDS\n.EXIT    MEND\n./ ADD NAME=TESTOPEN\n         MACRO\n&NAME    TESTOPEN  &DCB,&BRANCH\n&NAME    LA    1,&DCB              REG 1 = DCB ADDRESS\n         TM    48(1),X'10'         TEST FOR SUCCESSFUL OPEN.\n         AIF   ('&BRANCH' EQ '').NOEXIT\n         BZ    &BRANCH             NOT OPEN BRANCH\n         MEXIT\n.NOEXIT  EQU   *                   OPEN OR NO BRANCH ADDR SPECIFIED\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPFDYN": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x06_\\x01\\x03\\x06_\"%r\\xa8r\\xa8\\x00\\x00\\xd4\\xc1\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-06T00:00:00", "modifydate": "2003-03-06T22:25:00", "lines": 29352, "newlines": 29352, "modlines": 0, "user": "MACLIB"}, "text": "./ ADD NAME=$$DOC    0100-03065-03065-2223-04691-04691-00000-ISPFDYN\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         ISPF Dialog Manager Assembler Macros\n                                     Version 2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                   Bob Zimmerman\n                                                   Development Technical Support\n                                                   CNA Insurance\n                                                   CNA Plaza - 8cs\n                                                   Chicago, Illinois 60685\n                                                   (312) 822 - 5719\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page i\n\n\n\n\n                                                               TABLE OF CONTENTS\n+                                                              _________________\n\n\n\n\n\n\n\n      ISPF Dialog Manager Assembler Macros - Overview . . . . . . . . . . . .  1\n\n           About Version 2.0  . . . . . . . . . . . . . . . . . . . . . . . .  2\n\n           Compatability and Restrictions . . . . . . . . . . . . . . . . . .  3\n\n\n\n      ISPF Dialog Manager Assembler Macros - General Syntax . . . . . . . . .  4\n\n           General Syntax . . . . . . . . . . . . . . . . . . . . . . . . . .  5\n\n           Macro Format (Standard, List and Execute form) . . . . . . . . . .  6\n\n           Accessing ISPLINK and ISPEXEC (CALL, LINK or LOAD) . . . . . . . .  7\n\n\n\n      ISPF Dialog Manager Assembler Macros - ISPF Macro . . . . . . . . . . .  8\n\n           Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n\n           ISPF DELETE  . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\n           ISPF LOAD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n\n           ISPF PARMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\n           ISPF SET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n\n           ISPF SUPPRESS  . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n\n\n\n      ISPF Dialog Manager Assembler Macros - Macro Syntax . . . . . . . . . . 20\n\n           BROWSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n\n           CONTROL  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n\n           DISPLAY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n\n           EDIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n\n           FTCLOSE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n\n           FTERASE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page ii\n\n\n\n\n           FTINCL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n\n           FTOPEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n\n           GETMSG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n\n           ISPEXEC  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n\n           ISREDIT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n\n           LOG  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n\n           SELECT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n\n           SETMSG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\n           TBADD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n\n           TBBOTTOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n\n           TBCLOSE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n\n           TBCREATE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n\n           TBDELETE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n\n           TBDISPL  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n\n           TBEND  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50\n\n           TBERASE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n\n           TBEXIST  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n\n           TBGET  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n\n           TBMOD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n\n           TBOPEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n\n           TBPUT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n\n           TBQUERY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n\n           TBSARG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\n\n           TBSAVE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n\n           TBSCAN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n\n           TBSKIP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n\n           TBSORT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n\n           TBSTATS  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n1\n\n\n      ISPF Dialog Manager Assembler Macros                              Page iii\n\n\n\n\n           TBTOP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n\n           TBVCLEAR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\n\n           VCOPY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n\n           VDEFINE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\n\n           VDELETE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n\n           VGET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n\n           VPUT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n\n           VREPLACE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n\n           VRESET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n\n\n\n      ISPF Dialog Manager Assembler Macros - Library Access Services  . . . . 77\n\n           LMCLOSE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n\n           LMERASE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n\n           LMFREE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n\n           LMGET  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n\n           LMINIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n\n           LMMADD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n\n           LMMDEL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n\n           LMMFIND  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86\n\n           LMMLIST  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n\n           LMMREN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n\n           LMMREP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\n\n           LMOPEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n\n           LMPUT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n\n           LMQUERY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n\n\n\n      ISPF Dialog Manager Assembler Macros - Appendices . . . . . . . . . . . 94\n\n           Appendix A - Example Program . . . . . . . . . . . . . . . . . . . 95\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page iv\n\n\n\n\n           Appendix B - Using the macros with existing programs . . . . . . . 97\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 1\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |            ISPF Dialog Manager Assembler Macros - Overview            |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 2\n      About Version 2.0\n\n\n\n      _______________________\n      |                     |\n      |                     |\n      |  About Version 2.0  |\n      |                     |\n      |_____________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      Because this is Version 2.0 of these macros, I am attempting to use them\n      as often as possible in my own installation, so I may \"debug\" them as\n      thoroughly as possible.  As IBM will attest, no amount of testing can take\n      out all of the bugs in a given product. Therefore, I encourage any users\n      making modifications or finding a bug to contact me.\n\n      The following is a history of the modifications throughout releases:\n\n            1.1 - Corrected internal dummy paramter problem.\n                  In ISPF Version II, when passing a dummy parameter that is\n                  expected to be numeric, for example, the TBSKIP operand, you\n                  must pass 4 bytes of spaces. This was corrected wherever\n                  applicable.\n\n            2.0 - Add all LAS and ISPF Version II services and support Keywords.\n                  TBSTATS, TBSORT and all LAS services are now supported.\n\n                  A user now specifies the macro using keywords, not positional\n                  parameters.  For example, instead of knowing the the 9th posi-\n                  tional parameter of the LMINIT service is the dataset name, a\n                  user can code DSN=.\n\n\n                  In addition, all services are now invoked using keywords.\n                  Instead of a user coding\n\n                       TBQUERY ,,,,,,,,CRP\n\n                  to retrieve the current CRP value, he must now code\n\n                       TBQUERY POSITION=CRP\n\n                  similar to the ISPEXEC interface.  The syntax of all macros\n                  are now identical to CLIST syntax.  For compatability with\n                  Version 1 of these macros, see the new macro ISPF SET in this\n                  manual.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 3\n      Compatability and Restrictions\n\n\n\n      ____________________________________\n      |                                  |\n      |                                  |\n      |  Compatability and Restrictions  |\n      |                                  |\n      |__________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The syntax of these macros has been designed so they are extremely flexi-\n      ble, and can be used with existing applications with no modification to\n      existing code.\n\n      There is one restriction with the use of these macros:  Assembler Version\n      H or later must be used because the internal symbols (global and local)\n      are longer than 8 bytes. I used these long symbols to simplify mainte-\n      nance.  In addition, they should not conflict with any other macro symbols\n      currently in use at an installation.\n\n\n      These macros support ISPF Version 2. They are fully compatible with ISPF\n      Version 1.  The macro set with this release does not include all of the\n      services available in ISPF Version 2. These services will be included in\n      future releases.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 4\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |         ISPF Dialog Manager Assembler Macros - General Syntax         |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 5\n      General Syntax\n\n\n\n      ____________________\n      |                  |\n      |                  |\n      |  General Syntax  |\n      |                  |\n      |__________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The ISPF Dialog Manager Assembler Macro syntax follows IBM conventions\n      found in XA Supervisor Services and Macro Instructions (GC28-1154-0).  A\n      synopsis of the important rules follows.\n\n\n          1.  All parameters listed in lowercase are to be replaced with a user\n              value.\n\n          2.  All parameters listed in uppercase are coded as shown. No user\n              symbol or value may be used.\n\n          3.  All parameters aligned on the left margin are required.\n\n          4.  All parameters indented from the left margin are optional.\n\n          5.  When a dataset name is required as an operand, the macro expects\n              standard TSO dsname syntax; i.e., dsname is either fully qualified\n              within apostrophes or unquoted (TSO prefix is automatically\n              inserted).\n\n\n      NOTE: This manual does not include description of the ISPF service func-\n            tions with the syntax of each macro.  For a full description of ISPF\n            Services, see the IBM manual Interactive System Productivity Facil-\n            ity - Dialog Management Services (SC34-2137-0).\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 6\n      Macro Format (Standard, List and Execute form)\n\n\n\n      ____________________________________________________\n      |                                                  |\n      |                                                  |\n      |  Macro Format (Standard, List and Execute form)  |\n      |                                                  |\n      |__________________________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      Standard form of the macros generates an in-line parameter list for all\n      calls to ISPLINK, like standard IBM macros.\n\n      The list form of all ISPF macros would be a standard \"CALL\" parameter-\n      list.  To simplify coding, the ISPF PARMS macro is provided to generate a\n      common parameter-list for all of the ISPF macros.  See the documentation\n      of ISPF PARMS macro in this manual for a full description of its uses.\n\n      The execute form of any macro may be selected by using the MF=E or\n      MF=(E,parmlist) keywords.  Parmlist is a symbol representing a list of\n      fullwords used to create a standard parameter-list.  If parmlist is omit-\n      ted, the default symbol SPFPARMS will be used.  This symbol is automati-\n      cally generated, with the appropriate number of fullwords, when using the\n      ISPF PARMS macro (documented elsewhere in this manual).\n\n      The parmlist option of MF=(E,parmlist) is available for compatability rea-\n      sons (in case you would like to incorporate these macros with existing\n      code).\n\n       ********  NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE  *********\n       *                                                                    *\n       *                                                                    *\n       *   In general, only request the execute form of the macro if you    *\n       *   are coding a reentrant program, or addressing a relocatable      *\n       *   storage area; then I recommend the MF=E format of the macro.     *\n       *   The MF=(E,parmlist) format was supplied for only to allow adding *\n       *   these macros to existing programs!!!!                            *\n       *                                                                    *\n       *                                                                    *\n       **********************************************************************\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 7\n      Accessing ISPLINK and ISPEXEC (CALL, LINK or LOAD)\n\n\n\n      ________________________________________________________\n      |                                                      |\n      |                                                      |\n      |  Accessing ISPLINK and ISPEXEC (CALL, LINK or LOAD)  |\n      |                                                      |\n      |______________________________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      When invoking an ISPF service from a dialog program, ISPLINK or ISPEXEC\n      may be accessed via a CALL, LINK, or LOAD.  Using the CALL macro requires\n      the ISPLINK module to be included in the load module composite.  Most\n      installations already have ISPLINK in its LPA and therefore this technique\n      can be a waste of storage.  In addition, if in a future release of ISPF,\n      ISPLINK is changed, you would have to relink all the existing dialogs.\n\n      Using the LINK or LOAD macro eliminates the above problem.  My recommenda-\n      tion is to do an initial LOAD of ISPLINK and save the entry address.\n\n      I have designed each macro with the special keyword LOAD to specify where\n      you have stored the entry address of the ISPLINK module.\n\n      In addition, the ISPF LOAD and ISPF DELETE macros (documented in this man-\n      ual) will LOAD and DELETE the ISPLINK module. Appendix A has a complete\n      example of how a typical program would LOAD ISPLINK, access ISPF services\n      and DELETE the ISPLINK module.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 8\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |           ISPF Dialog Manager Assembler Macros - ISPF Macro           |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 9\n      Overview\n\n\n\n      ______________\n      |            |\n      |            |\n      |  Overview  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      Certain common needs are found when coding any Dialog Program.  One need\n      is the access to the ISPF interfaces ISPLINK and ISPEXEC.  The ISPF macro\n      is designed as an 'environment' macro.  Some of its functions are listed\n      below.\n\n\n          1.  LOAD and DELETE the ISPF modules ISPLINK and ISPEXEC.\n\n          2.  Generate the List form of all ISPF macros.\n\n          3.  Supply all 'working-storage' needed for the ISPF environment.\n\n          4.  Suppress the generation of constants for compatability with exist-\n              ing programs.\n              (e.g. DISPLAY DC CL8'DISPLAY')\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 10\n      ISPF DELETE\n\n\n\n      _________________\n      |               |\n      |               |\n      |  ISPF DELETE  |\n      |               |\n      |_______________|\n\n\n\n\n      This ISPF macro will issue a DELETE for the ISPLINK and ISPEXEC modules.\n      This macro complements the ISPF LOAD macro used to LOAD the ISPLINK and\n      ISPEXEC modules for program access.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      DELETE             DELETE: Required keyword coded as shown.\n\n          ,ISPLINK=NO    default: YES\n          ,ISPLINK=YES\n\n          ,ISPEXEC=NO    default: NO\n          ,ISPEXEC=YES\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      DELETE             This keyword identifies the function of the ISPF\n                         macro.\n\n      ,ISPLINK=NO\n      ,ISPLINK=YES       This parameter specifies whether the ISPLINK module\n                         should be deleted or not. If it was never loaded it\n                         must not be deleted.\n\n                         The default is ISPLINK=YES. This corresponds to the\n                         default for the ISPF LOAD macro. See Appendix A for\n                         an example.\n\n      ,ISPEXEC=NO\n      ,ISPEXEC=YES       This parameter specifies whether the ISPEXEC module\n                         should be deleted or not. If it was never loaded it\n                         must not be deleted.\n\n                         The default is ISPEXEC=NO. This corresponds to the\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 11\n      ISPF DELETE\n\n\n\n                         default for the ISPF LOAD macro. See Appendix A for\n                         an example.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Delete the ISPLINK module.\n\n                                 ISPF DELETE\n\n      Example 2:         Operation: Delete only the ISPEXEC module.\n\n                                 ISPF DELETE,ISPLINK=NO,ISPEXEC=YES\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 12\n      ISPF LOAD\n\n\n\n      _______________\n      |             |\n      |             |\n      |  ISPF LOAD  |\n      |             |\n      |_____________|\n\n\n\n\n      This ISPF macro will issue a LOAD for the ISPLINK and ISPEXEC modules. In\n      addition it will store the entry address(es) of ISPLINK and ISPEXEC into\n      fullwords.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      LOAD               LOAD: Required keyword coded as shown.\n\n          ,ISPLINK=NO\n          ,ISPLINK=(YES,symbol)\n                         symbol: Address of a fullword used to store ISPLINK\n                         entry address.\n                         default: (YES,ISPLINK)\n\n          ,ISPEXEC=NO\n          ,ISPEXEC=(YES,symbol)\n                         symbol: Address of a fullword used to store ISPEXEC\n                         entry address.\n                         default: NO\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      LOAD               This keyword identifies the function of the ISPF\n                         macro.\n\n      ,ISPLINK=NO\n      ,ISPLINK=(YES,symbol)\n                         This parameter specifies whether the ISPLINK module\n                         should be loaded or not. After it is loaded, it will\n                         store the entry address into the fullword at the\n                         location of 'symbol'.\n\n                         The default is ISPLINK=(YES,ISPLINK). The symbol\n                         ISPLINK is generated by the ISPF PARMS macro. See\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 13\n      ISPF LOAD\n\n\n\n                         See Appendix A for an example.\n\n      ,ISPEXEC=NO\n      ,ISPEXEC=(YES,symbol)\n                         This parameter specifies whether the ISPEXEC module\n                         should be loaded or not. After it is loaded, it will\n                         store the entry address into the fullword at the\n                         location of 'symbol'.\n\n                         The default is ISPEXEC=NO. The symbol ISPEXEC is\n                         generated by the ISPF PARMS macro. See Appendix A\n                         for an example.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Load ISPLINK and store its entry point\n                         into the fullword labeled ISPLINK.\n\n                                 ISPF LOAD\n\n      Example 2:         Operation: Load only the ISPEXEC module. Store its\n                         entry point into the fullword labeled ISPFEP.\n\n                                 ISPF LOAD,ISPLINK=NO,ISPEXEC=(YES,ISPFEP)\n                         ISPFEP  DS   A               ISPEXEC ENTRY POINT\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 14\n      ISPF PARMS\n\n\n\n      ________________\n      |              |\n      |              |\n      |  ISPF PARMS  |\n      |              |\n      |______________|\n\n\n\n\n      For any dialog program, certain common working storage areas are required;\n      for example, a fullword for the ISPLINK entry address.  In addition, a\n      parameter-list is required when the execute form of any macros in this\n      manual are used.  This macro generates all common working storage areas.\n\n      NOTE: The parameter-list fields are only generated when an execute form of\n            an ISPF Service macro is used. Then, it is generated to the length\n            required by the largest parameter list required. See the description\n            of the  MINIMUM keyword that follows for more.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      PARMS              PARMS: Required keyword coded as shown.\n\n          ,LIST=symbol\n                         symbol: Symbol used as label for parameter-list.\n                         default: SPFPARMS.\n\n          ,ISPLINK=NO\n          ,ISPLINK=(YES,symbol)\n                         symbol: Symbol used as label of fullword for ISPLINK\n                         entry address.\n                         default: (YES,ISPLINK)\n\n          ,ISPEXEC=NO\n          ,ISPEXEC=(YES,symbol)\n                         symbol: Symbol used as label of fullword for ISPEXEC\n                         entry address.\n                         default: NO\n\n          ,MINIMUM=number\n                         number: Numeric value.\n\n          ,LASTCC=symbol\n                         symbol: Symbol used in equate to register 15.\n\n          ,COUNT=number\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 15\n      ISPF PARMS\n\n\n\n          ,FULL=NO\n          ,FULL=YES      default: NO\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      PARMS              This keyword identifies the function of the ISPF\n                         macro.\n\n      ,LIST=symbol\n                         This symbol specifies the label used for the\n                         parameter list generated (if any).\n\n                         When any macro in this manual is issued in its\n                         execute form, it defaults to use the parameter-list\n                         labeled SPFPARMS. Therefore the default value is\n                         SPFPARMS.\n\n      ,ISPLINK=NO\n      ,ISPLINK=(YES,symbol)\n                         Specifies whether or not to generate the fullword\n                         used to store the ISPLINK entry point address.  See\n                         the ISPF LOAD macro for more information.\n\n                         The default is ISPLINK=(YES,ISPLINK). This corres-\n                         ponds with the ISPF LOAD macro default.  See\n                         Appendix A for an example.\n\n      ,ISPEXEC=NO\n      ,ISPEXEC=(YES,symbol)\n                         Specifies whether or not to generate the fullword\n                         used to store the ISPEXEC entry point address.  See\n                         the ISPF LOAD macro for more information.\n\n                         The default is ISPEXEC=NO. This corresponds with the\n                         ISPF LOAD macro default.  See Appendix A for an\n                         example.\n\n      ,MINIMUM=number\n                         Normally, this macro will only generate a parameter\n                         list when it is needed (i.e., when an execute form\n                         of these macros has been used). When it does generate\n                         the parameter-list, it will only generate the amount\n                         of fullwords required by the used programs. For\n                         example, if the largest execute form macro used was\n                         the SELECT macro, it requires only 3 fullwords. If\n                         the largest execute form was the VDEFINE macro, it\n                         requires 7 fullwords.\n\n                         This keyword allows you to specify the minimum number\n                         of fullwords to be used. In addition, it will force\n                         the generation of the paramter list even if no\n                         execute form of a macro has been used.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 16\n      ISPF PARMS\n\n\n\n      ,LASTCC=symbol\n                         This parameter is supplied to support earlier\n                         versions of this macro.\n                         It will generate an equate for the symbol to register\n                         15. This allows the coding of \"LTR symbol,symbol\" as\n                         apposed to \"LTR 15,15\".\n\n      ,COUNT=number\n                         This parameter should not be used. It is supplied to\n                         support earlier versions of this macro.\n\n      ,FULL=NO\n      ,FULL=YES\n                         This parameter should not be used. It is supplied to\n                         support earlier versions of this macro.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Request the default working-storage areas.\n\n                                 ISPF PARMS\n\n      Example 2:         Operation: Request a minimum of 4 fullwords in the\n                         parameter list. Request the label for the ISPEXEC\n                         module to be generated.\n\n                                 ISPF PARMS,MINIMUM=4,ISPEXEC=YES\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 17\n      ISPF SET\n\n\n\n      ______________\n      |            |\n      |            |\n      |  ISPF SET  |\n      |            |\n      |____________|\n\n\n\n\n      In Version 2.0 of these macros, all services now support keyword. For\n      example, to display a panel, the user codes\n\n           DISPLAY PANEL='panel name'.\n\n      In Version 1.0 of these macros, these same services were positional. The\n      display of a panel would be coded as\n\n           DISPLAY 'panel name'.\n\n      This macro will allow the user to continue to maintain old programs using\n      the Version 1.0 syntax. Its intended use is only for compatability.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      SET                SET: Required keyword coded as shown.\n\n      ,LEVEL=1           LEVEL=1: Required as shown.\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      SET                This keyword identifies the function of the ISPF\n                         macro.\n\n      ,LEVEL=1           This parameter specifies the version of these macros\n                         that are being used in this assembly.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Allow assembly of a program coded under\n                         version 1.0 using the version 2.0 macros.\n\n                               ISPF SET,LEVEL=1\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 18\n      ISPF SUPPRESS\n\n\n\n      ___________________\n      |                 |\n      |                 |\n      |  ISPF SUPPRESS  |\n      |                 |\n      |_________________|\n\n\n\n\n      Normally, when using any macro documented in this manual, that macro will\n      generate a constant for the service invoked. For example, when issuing the\n      DISPLAY macro, it will generate the constant\n\n           DISPLAY DC CL8'DISPLAY'\n\n      The ISPF SUPPRESS macro suppresses the automatic generation of a constant\n      for compatability with existing programs.  Otherwise, its use is not\n      recommended.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      SUPPRESS           SUPPRESS: Required keyword coded as shown.\n\n      ,LIST=(keywords)   keywords: Any ISPF keyword supported by these macros.\n      ,LIST=ALL          For example, DISPLAY, CANCEL, TBDISPL, etc.\n                         ALL: will suppress all generation.\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      SUPPRESS           This keyword identifies the function of the ISPF\n                         macro.\n\n      ,LIST=(keywords)\n      ,LIST=ALL          This parameter specifies what constants should be\n                         suppressed by the ISPF macro. Keyword may be listed\n                         in a standard list form such as\n                         ISPF SUPPRESS,LIST=(keyword1,keyword2,keyword3).\n                         LIST=ALL suppresses all keywords.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 19\n      ISPF SUPPRESS\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Suppress the generation of the CONTROL,\n                         ERRORS and CANCEL constants.\n\n                               ISPF SUPPRESS,LIST=(CONTROL,ERRORS,CANCEL)\n\n      Example 2:         Operation: Suppress the list of all constants.\n\n                                 ISPF SUPPRESS,LIST=ALL\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 20\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |             ISPF Dialog Manager Assembler Macros - Syntax             |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 21\n      BROWSE\n\n\n\n      ____________\n      |          |\n      |          |\n      |  BROWSE  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede BROWSE.\n      BROWSE\n      b                  one or more blanks must follow BROWSE.\n\n      _________________________________________________________________________\n\n          DATASET=dsn    dsn: Dsname enclosed in apostrophes or a\n                         symbol addressing a 56 byte Dsname (TSO Syntax).\n\n          ,VOLUME=vol    vol: Volser enclosed in apostrophes or a symbol\n                         addressing a 6 byte volser.\n\n          ,PASSWORD=pass pass: Password enclosed in apostrophes or a symbol\n                         addressing an 8 byte password.\n\n          ,PANEL=panel   panel: Panel name enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,DATAID=id     id: Dataid name enclosed in apostrophes or a symbol\n                         addressing an 8 byte data id.\n\n          ,MEMBER=member member: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 22\n      BROWSE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Invoke ISPF Browse against the dataset\n                         'SYS1.MACLIB' which is in the system catalog.\n\n                                 BROWSE DATASET='''SYS1.MACLIB'''\n\n      Example 2:         Operation: Invoke ISPF Browse against the dataset\n                         'userid.MY.DATA' on volume TESTE1 and use the execute\n                         form of the macro. The default parmlist generated by\n                         the ISPF PARMS macro will be used.\n\n                                 BROWSE DATASET=DSNAME,VOLUME='TESTE1',  X\n                                     MF=E\n                         DSNAME  DC   CL56'MY.DATA'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 23\n      CONTROL\n\n\n\n      _____________\n      |           |\n      |           |\n      |  CONTROL  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede CONTROL.\n      CONTROL\n      b                  one or more blanks must follow CONTROL.\n\n      _________________________________________________________________________\n\n      type               type: Valid ISPF CONTROL type.\n                         Examples: DISPLAY, NONDISPL, or ERRORS.\n\n      ,mode              mode: Valid \"mode\" for CONTROL \"type\" specified.\n                         Example: END or ENTER for CONTROL DISPLAY.\n\n          ,linenum       linenum: Numeric value or symbol addressing a\n                         fullword. Valid only for DISPLAY \"type\".\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Invoke the equivalent of\n                         ISPEXEC CONTROL ERRORS CANCEL.\n\n                                 CONTROL ERRORS,CANCEL\n\n      Example 2:         Operation: Invoke the equivalent of\n                         ISPEXEC CONTROL DISPLAY LINE START(4)\n\n                                 CONTROL DISPLAY,LINE,4\n                         or\n                                 CONTROL DISPLAY,LINE,F4\n                         F4      DC  F'4'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 24\n      DISPLAY\n\n\n\n      _____________\n      |           |\n      |           |\n      |  DISPLAY  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede DISPLAY.\n      DISPLAY\n      b                  one or more blanks must follow DISPLAY.\n\n      _________________________________________________________________________\n\n          PANEL=panel    panel: Panel name enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,MSG=msg       msg: Message name enclosed in apostrophes or a symbol\n                         addressing an 8 byte message name.\n\n          ,CURSOR=field  field: Field name enclosed in apostrophes or a symbol\n                         addressing an 8 byte field name.\n\n          ,CSRPOS=csrpos csrpos: Numeric cursor position or a symbol\n                         addressing a fullword containing the cursor position.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Display panel named ABC.\n\n                         LOOP    DISPLAY PANEL='ABC'\n\n      Example 2:         Operation: Display panel ABC with the message name\n                         found at label MSG.\n\n                                 DISPLAY PANEL='ABC',MSG=MSG\n                         MSG     DC  CL8'MSG001'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 25\n      EDIT\n\n\n\n      __________\n      |        |\n      |        |\n      |  EDIT  |\n      |        |\n      |________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede EDIT.\n      EDIT\n      b                  one or more blanks must follow EDIT.\n\n      _________________________________________________________________________\n\n          DATASET=dsn    dsn: Dsname enclosed in apostrophes or a symbol\n                         addressing a 56 byte Dsname (TSO Syntax).\n\n          ,VOLUME=vol    vol: Volser enclosed in apostrophes or a symbol\n                         addressing a 6 byte volser.\n\n          ,PASSWORD=pass pass: Password enclosed in apostrophes or a symbol\n                         addressing an 8 byte password.\n\n          ,PANEL=panel   panel: Panel name enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,MACRO=macro   macro: Macro name enclosed in apostrophes or a symbol\n                         addressing an 8 byte initial macro.\n\n          ,PROFILE=prof  prof: Edit profile name enclosed in apostrophes or a\n                         symbol addressing an 8 byte edit profile.\n\n          ,DATAID=id     id: Dataid name enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 26\n      EDIT\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Invoke ISPF EDIT against 'SYS1.MACLIB'.\n                         Use the \"ASMB\" profile name.\n\n                                 EDIT DATASET='''SYS1.MACLIB''',         X\n                                      PROFILE='ASMB'\n\n      Example 2:         Operation: Invoke ISPF Edit against the dataset\n                         'userid.MY.DATA' on volume TESTE1 and use the execute\n                         form of the macro. The default parmlist generated by\n                         the ISPF PARMS macro will be used. The default\n                         profile will be used as well.\n\n                                 EDIT  DATASET=DSNAME,VOLUME='TESTE1',MF=E\n                         DSNAME  DC   CL56'MY.DATA'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 27\n      FTCLOSE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  FTCLOSE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTCLOSE.\n      FTCLOSE\n      b                  one or more blanks must follow FTCLOSE.\n\n      _________________________________________________________________________\n\n          NAME=member    member: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member name.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,NOREPL=keyw   keyw: Keyword NOREPL enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Close a File Tailoring output file that\n                         was open with FTOPEN TEMP.\n\n                                 FTCLOSE\n\n\n      Example 2:         Operation: Close a File Tailoring output file. The\n                         output should be routed to DDname 'OUTPUT' and the\n                         member name should be ABC. If the member currently\n                         exists, do not replace it.\n\n                                 FTCLOSE NAME='ABC',LIBRARY=DDNAME,      X\n                                      NOREPL='NOREPL'\n                         DDNAME  DC   CL8'OUTPUT'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 28\n      FTERASE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  FTERASE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTERASE.\n      FTERASE\n      b                  one or more blanks must follow FTERASE.\n\n      _________________________________________________________________________\n\n      member             member: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member name.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Erase the member ABC from the file\n                         currently allocated to ISPFILE.\n\n                                 FTERASE 'ABC'\n\n      Example 2:         Operation: Erase the member DEF from the file\n                         allocated to DDname 'OUTPUT'. Using the execute form\n                         of the macro.\n\n                                 FTERASE MEMBER,LIBRARY=DDNAME,MF=E\n                         MEMBER  DC   CL8'DEF'\n                         DDNAME  DC   CL8'OUTPUT'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 29\n      FTINCL\n\n\n\n      ____________\n      |          |\n      |          |\n      |  FTINCL  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTINCL.\n      FTINCL\n      b                  one or more blanks must follow FTINCL.\n\n      _________________________________________________________________________\n\n      skeleton           skeleton: Skeleton name enclosed in apostrophes or a\n                         symbol addressing an 8 byte skeleton name.\n\n          ,NOFT=keyw     keyw: Keyword NOFT enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Include the skeleton ABC with File\n                         Tailoring.\n\n                                 FTINCL 'ABC'\n\n      Example 2:         Operation: Include member ABC without File Tailoring.\n\n                                 FTINCL SKELETN,NOFT=NOFTVAL\n                         SKELETN DC   CL8'ABC'\n                         NOFTVAL DC   CL8'NOFT'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 30\n      FTOPEN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  FTOPEN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTOPEN.\n      FTOPEN\n      b                  one or more blanks must follow FTOPEN.\n\n      _________________________________________________________________________\n\n          ,TEMP=keyw     keyw: Keyword TEMP enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Open a temporary file tailoring file.\n\n                                 FTOPEN TEMP='TEMP'\n\n      Example 2:         Operation: Open the file tailoring file. Use the\n                         file currently allocated to ISPFILE.\n\n                                 FTOPEN ,\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 31\n      GETMSG\n\n\n\n      ____________\n      |          |\n      |          |\n      |  GETMSG  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede GETMSG.\n      GETMSG\n      b                  one or more blanks must follow GETMSG.\n\n      _________________________________________________________________________\n\n      MSG=msg            msg: Message name enclosed in apostrophes or a\n                         symbol addressing an 8 byte message name.\n\n          ,SHORTMSG=smsg smsg: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LONGMSG=lmsg  lmsg: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ALARM=alarm   alarm: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,HELP=help     help: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 32\n      GETMSG\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Get the short and long message text for\n                         the message called MSG001. Place the short message in\n                         variable SHORT, the long message text in variable\n                         LONG and the help panel name in HELP. No request for\n                         the alarm status is desired.\n\n                                 GETMSG MSG='MSG001',                    X\n                                     SHORTMSG='SHORT',                   X\n                                     LONGMSG='LONG',                     X\n                                     HELP='HELP'\n\n      Example 2:         Operation: Get the alarm status for message msg002.\n                         Store its value in variable alarm. Use the execute\n                         form of the macro.\n\n                                 GETMSG MSG='MSG002',ALARM='ALARM',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 33\n      ISPEXEC\n\n\n\n      _____________\n      |           |\n      |           |\n      |  ISPEXEC  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPEXEC.\n      ISPEXEC\n      b                  one or more blanks must follow ISPEXEC.\n\n      _________________________________________________________________________\n\n          length         length: Numeric value or symbol addressing a\n                         fullword. Valid only when buffer is coded as a\n                         symbol. Leave blank when coding the buffer parameter\n                         as a literal. The macro will calculate the length\n                         (see examples).\n\n          ,buffer        buffer: ISPF ISPEXEC service keywords enclosed in\n                         apostrophes or a symbol addressing a buffer area.\n                         When coding a symbol, the length field (above) is\n                         required.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 34\n      ISPEXEC\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Display the panel PANEL1.\n\n                                 ISPEXEC ,'DISPLAY PANEL(PANEL1)'\n\n      Example 2:         Operation: Issue the ISPF CONTROL command to inhibit\n                         split screen operation.\n\n                                 ISPEXEC 80,THEBUFER\n                         THEBUFER DC   CL80'CONTROL SPLIT DISABLE'\n\n      Example 3:         Operation: Issue the ISPF CONTROL command to inhibit\n                         split screen operation. This is the same as above.\n                         In this example, the assembler will calculate the\n                         length of the select buffer.\n\n                                 ISPEXEC BUFLEN,BUFTEXT\n                         BUFTEXT DC   C'CONTROL SPLIT DISABLE'\n                         TEMP    EQU  *-BUFTEXT\n                         BUFLEN  DC   A(TEMP)\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 35\n      ISREDIT\n\n\n\n      _____________\n      |           |\n      |           |\n      |  ISREDIT  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISREDIT.\n      ISREDIT\n      b                  one or more blanks must follow ISREDIT.\n\n      _________________________________________________________________________\n\n          length         length: Numeric value or symbol addressing a\n                         fullword. Valid only when buffer is coded as a\n                         symbol. Leave blank when coding the buffer parameter\n                         as a literal. The macro will calculate the length\n                         (see examples).\n\n          ,buffer        buffer: ISPF ISREDIT service keywords enclosed in\n                         apostrophes or a symbol addressing a buffer area.\n                         When coding a symbol, the length field (above) is\n                         required.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Issue equivalent to CLIST ISREDIT MACRO.\n\n                                 ISREDIT ,'MACRO (FLD1 FLD2) NOPROCESS'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 36\n      LOG\n\n\n\n      _________\n      |       |\n      |       |\n      |  LOG  |\n      |       |\n      |_______|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LOG.\n      LOG\n      b                  one or more blanks must follow LOG.\n\n      _________________________________________________________________________\n\n      MSG=msg            msg: Message name enclosed in apostrophes or a\n                         symbol addressing an 8 byte message name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Log the message called MSG001.\n\n                                 LOG MSG='MSG001'\n\n      Example 2:         Operation: Log the message called MSG001. Same as\n                         above example using a symbol to address the message\n                         name.\n\n                                 LOG MSG=MESSAGE\n                         MESSAGE DC   CL8'MSG001'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 37\n      SELECT\n\n\n\n      ____________\n      |          |\n      |          |\n      |  SELECT  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede SELECT.\n      SELECT\n      b                  one or more blanks must follow SELECT.\n\n      _________________________________________________________________________\n\n          length         length: Numeric value or symbol addressing a\n                         fullword. Valid only when buffer is coded as a\n                         symbol. Leave blank when coding the buffer parameter\n                         as a literal. The macro will calculate the length\n                         (see examples).\n\n          ,buffer        buffer: ISPF Select service keywords enclosed in\n                         apostrophes or a symbol addressing a buffer area.\n                         When coding a symbol, the length field (above) is\n                         required.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 38\n      SELECT\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Select the program called PGMA1.\n\n                                 SELECT  ,'PGM(PGMA1)'\n\n      Example 2:         Operation: Invoke the TSO command XYZ and specify\n                         that a new shared pool is to be created.\n\n                                 SELECT 80,SELBUF\n                         SELBUF  DC   CL80'CMD(XYZ) NEWPOOL'\n\n      Example 3:         Operation: Invoke the TSO command XYZ and specify\n                         that a new shared pool is to be created. This is the\n                         same as above. In this example, the assembler will\n                         calculate the length of the select buffer.\n\n                                 SELECT BUFLEN,BUFTEXT\n                         BUFTEXT DC   C'CMD(XYZ) NEWPOOL'\n                         TEMP    EQU  *-BUFTEXT\n                         BUFLEN  DC   A(TEMP)\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 39\n      SETMSG\n\n\n\n      ____________\n      |          |\n      |          |\n      |  SETMSG  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede SETMSG.\n      SETMSG\n      b                  one or more blanks must follow SETMSG.\n\n      _________________________________________________________________________\n\n      MSG=msg            msg: Message name enclosed in apostrophes or a symbol\n                         addressing an 8 byte message name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Add message ABC001 to the next panel\n                         displayed to the user.\n\n                                 SETMSG MSG='ABC001'\n\n      Example 2:         Operation: Add message ISPX001 to the next panel\n                         displayed to a user. Use the execute form of the\n                         macro.\n\n                                 SETMSG MSG='ISPX001',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 40\n      TBADD\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBADD  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBADD.\n      TBADD\n      b                  one or more blanks must follow TBADD.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVE=names    names: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,ORDER=keyw    ORDER: Keyword ORDER enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Add a row to the table TEMPTAB.\n\n                                 TBADD 'TEMPTAB'\n\n      Example 2:         Operation: Add a row to the table TEMPTAB. Use the\n                         execute form of the macro. In addition, specify the\n                         variable MYVAR as an extension variable and request\n                         that the row be added in sort order.\n\n                                 SETMSG TABLE,SAVE='(MYVAR)',            X\n                                     ORDER=ORDER,MF=E\n                         TABLE   DC   CL8'TEMPTAB'\n                         ORDER   DC   CL8'ORDER'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 41\n      TBBOTTOM\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBBOTTOM  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBBOTTOM.\n      TBBOTTOM\n      b                  one or more blanks must follow TBBOTTOM.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVENAME=sn   sn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,ROWID=rn      rn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 42\n      TBBOTTOM\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Set the CRP of MYTAB to the bottom. In\n                         addition, store the CRP into variable XYZ.\n\n                                 TBBOTTOM TABLE,POSITION='XYZ'\n                         TABLE   DC   CL8'MYTABL'\n\n      Example 2:         Operation: Set the CRP of MYTAB to the bottom.\n                         Requests that no variables are to be\n                         retrieved.\n\n                                 TBBOTTOM 'MYTAB',SAVE=VARNAME,          X\n                                     NOREAD='NOREAD'\n                         VARNAME DC   CL8' '\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 43\n      TBCLOSE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBCLOSE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBCLOSE.\n      TBCLOSE\n      b                  one or more blanks must follow TBCLOSE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,REPLCOPY      REPLCOPY: Optional keyword coded as shown.\n          ,NEWCOPY       NEWCOPY:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,NAME=,alt     alt: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,PAD=percent   percent: Numeric value or symbol addressing a\n                         fullword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 44\n      TBCLOSE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Close the table. Save the member in the\n                         file allocated to OUTPUT.\n\n                                 TBCLOSE TABLE,LIBRARY='OUTPUT'\n                         TABLE   DC   CL8'MYTABL'\n\n      Example 2:         Operation: Close the table as a new member.\n                         Pad the member by 10 percent.\n\n                                 TBCLOSE 'MYTAB',NEWCOPY,PAD=10\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 45\n      TBCREATE\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBCREATE  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBCREATE.\n      TBCREATE\n      b                  one or more blanks must follow TBCREATE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,KEYS=keylist  keylist: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,NAMES=names   names: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,WRITE=keyw    keyw: Keyword WRITE or NOWRITE enclosed in apos-\n                         trophes or a symbol addressing an 8 byte keyword.\n\n          ,REPLACE=kyw   kyw: Keyword REPLACE enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,SHARE=shr     shr: Keyword SHARE enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 46\n      TBCREATE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Create a table called MYTAB. The table is\n                         keyed by EMPLNO. The table contains the variable\n                         NAME, ADDRESS and CITY.\n\n                                 TBCREATE 'MYTAB',KEYS=KEYLIST,          X\n                                     NAMES='(NAME ADDRESS CITY)',        X\n                                     NOWRITE='NOWRITE'\n                         KEYLIST DC    C'(EMPLNO)'\n\n      Example 2:         Operation: Create a permanent table called MYTAB\n                         with only the variable XYZ in it. There are no keys.\n\n                                 TBCREATE 'MYTAB',NAMES='(XYZ)'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 47\n      TBDELETE\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBDELETE  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBDELETE.\n      TBDELETE\n      b                  one or more blanks must follow TBDELETE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Delete the current row from table XYZ.\n\n                                 TBDELETE 'XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 48\n      TBDISPL\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBDISPL  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBDISPL.\n      TBDISPL\n      b                  one or more blanks must follow TBDISPL.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,PANEL=panel   panel: Panel enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,MSG=msg       msg: Message name enclosed in apostrophes or a symbol\n                         addressing an 8 byte message name.\n\n          ,CURSOR=field  field: Field name enclosed in apostrophes or a symbol\n                         addressing an 8 byte field name.\n\n          ,CSRROW=rownum rownum: Numeric value or symbol addressing a\n                         fullword.\n\n          ,CSRPOS=csrpos csrpos: Numeric value or symbol addressing a\n                         fullword.\n\n          ,AUTOSEL=keyw  keyw: Keywords YES or NO enclosed in apostrophes or\n                         a symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 49\n      TBDISPL\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Display table TAB1 using panel PAN1.  MSG\n                         will contain the name of any error messages that\n                         should be issuted.\n\n                                 TBDISPL 'TAB1',PANEL='PAN1',MSG=MSG\n                         MSG     DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 50\n      TBEND\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBEND  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBEND.\n      TBEND\n      b                  one or more blanks must follow TBEND.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: End the table TAB1.\n\n                                 TBEND 'TAB1'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 51\n      TBERASE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBERASE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBERASE.\n      TBERASE\n      b                  one or more blanks must follow TBERASE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Erase member XYZ.\n\n                                 TBERASE MEMNAME\n                         MEMNAME DC    CL8'XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 52\n      TBEXIST\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBEXIST  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBEXIST.\n      TBEXIST\n      b                  one or more blanks must follow TBEXIST.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Determine if a row exists in a keyed\n                         table MYTAB.\n\n                                 TBEXIST 'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 53\n      TBGET\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBGET  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBGET.\n      TBGET\n      b                  one or more blanks must follow TBGET.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVENAME=var  var: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Get a row in the table MYTAB. Use the\n                         execute form of the macros.\n\n                                 TBGET 'MYTAB',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 54\n      TBMOD\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBMOD  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBMOD.\n      TBMOD\n      b                  one or more blanks must follow TBMOD.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVE=namelist namelist: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ORDER=keyw    keyw: Keyword ORDER enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Modify a row in the table MYTAB. The\n                         variables XY and ZZ are extension variables. Two\n                         coding examples follow. The first generates all\n                         storage constants for you.\n\n                                 TBMOD 'MYTAB',SAVE='(XY ZZ)'\n\n                                 TBMOD TABLE,SAVE=NAMES\n                         TABLE   DC   CL8'MYTAB'\n                         NAMES   DC   C'(XY ZZ)'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 55\n      TBOPEN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBOPEN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBOPEN.\n      TBOPEN\n      b                  one or more blanks must follow TBOPEN.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,WRITE=keyw    WRITE: Keywords WRITE or NOWRITE enclosed in apos-\n                         trophes or a symbol addressing the keyword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,SHARE=keyw2   keyw2: Keyword SHARE enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Open the table named MYTAB for read only\n                         and allow sharing between split screens.\n\n                                 TBOPEN 'MYTAB',WRITE='NOWRITE',         X\n                                     SHARE='SHARE'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 56\n      TBPUT\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBPUT  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBPUT.\n      TBPUT\n      b                  one or more blanks must follow TBPUT.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVE=namelist namelist: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ORDER=keyw    keyw: Keyword ORDER enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Update the current row in the table MYTAB.\n\n                                 TBPUT 'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 57\n      TBQUERY\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBQUERY  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBQUERY.\n      TBQUERY\n      b                  one or more blanks must follow TBQUERY.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,KEYS=keyname  keyname: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,NAMES=varname varname: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWNUM=rownum rownum: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,KEYNUM=keynum keynum: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,NAMENUM=namen namen: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,POSITION=crp  crp: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Return the current CRP for table XYZ in\n                         variable CRPVAR.\n\n                                 TBQUERY 'XYZ',POSITION='CRPVAR'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 58\n      TBSARG\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSARG  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSARG.\n      TBSARG\n      b                  one or more blanks must follow TBSARG.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,ARGLIST=names names: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,DIRECTION=dir dir: Keywords NEXT or PREVIOUS enclosed in apos-\n                         trophes or a symbol addressing the keyword.\n\n          ,NAMECOND=nc   nc: Condition list enclosed in apostrophes or a\n                         symbol addressing a condition list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Set a search argument in table MYTAB.\n                         Scan the table backwards.\n\n                                 TBSARG 'MYTAB',DIRECTION='PREVIOUS'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 59\n      TBSAVE\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSAVE  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSAVE.\n      TBSAVE\n      b                  one or more blanks must follow TBSAVE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,REPLCOPY      REPLCOPY: Optional keyword coded as shown.\n          ,NEWCOPY       NEWCOPY:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,NAME=altname  altname: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member name.\n\n          ,PAD=percent   percent: Numeric value or symbol addressing a\n                         fullword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Save the current table MYTAB. If it\n                         currently exists, replace it with this version and\n                         pad 25 percent space to the new version. Use the\n                         execute form of the macro.\n\n                                 TBSAVE 'MYTAB',REPLCOPY,PAD=PERCENT\n                         PERCENT DC    F'25'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 60\n      TBSCAN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSCAN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSCAN.\n      TBSCAN\n      b                  one or more blanks must follow TBSCAN.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,ARGLIST=args  args: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,SAVENAME=sn   sn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,DIRECTION=dir dir: Keywords NEXT or PREVIOUS enclosed in apos-\n                         trophes or a symbol addressing the keyword.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,CONDLIST=cl   cl: Condition list enclosed in apostrophes or a\n                         symbol addressing a condition list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 61\n      TBSCAN\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Scan the table MYTAB using the variables\n                         XY and ZZ. Default all other values. Use the execute\n                         form of the macro.\n\n                                 TBSCAN 'MYTAB',SAVE='(XY ZZ)',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 62\n      TBSKIP\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSKIP  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSKIP.\n      TBSKIP\n      b                  one or more blanks must follow TBSKIP.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,NUMBER=number number: Numeric value or symbol addressing a\n                         fullword. For negative values, the symbol form must\n                         be used.\n\n          ,SAVENAME=sn   sn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROW=row       row: Numeric value or symbol addressing a fullword.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Skip forward 2 rows in table MYTAB.\n\n                                 TBSKIP 'MYTAB',NUMBER=2\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 63\n      TBSORT\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSORT  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSORT.\n      TBSORT\n      b                  one or more blanks must follow TBSORT.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n      ,FIELDS=sort-list  sort-list: List of Sort keys as described in the\n                         ISPF Dialog Manager manual. The actual list may be\n                         specified enclosed in apostrophes or a symbol that\n                         addresses a sort-list may be specified.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Sort table ABC on fields ZIP and Name.\n\n                                 TBSORT 'ABC',                          X\n                                         FIELDS='(ZIP,N,A,NAME,C,A)\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 64\n      TBSTATS\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBSTATS  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSTATS.\n      TBSTATS\n      b                  one or more blanks must follow TBSTATS.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,CDATE=cdate   cdate: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,CTIME=ctime   ctime: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,UDATE=udate   udate: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,UTIME=utime   utime: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,USER=user     user: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWCREAT=rowv rowv: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWCURR=rowcu rowcu: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWUPD=rowupd rowupd: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,TABLEUPD=tabu tabu: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,SERVICE=serv  serv: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,RETCODE=rc    rc: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 65\n      TBSTATS\n\n\n\n          ,STATUS1=s1    s1: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATUS2=s2    s2: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATUS3=s3    s3: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LIBRARY=dd    dd: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Determine if table ABC is open in write\n                         mode.\n\n                                 TBSTATS 'ABC',STATUS1='ST1',           X\n                                       STATUS2='ST2'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 66\n      TBTOP\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBTOP  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBTOP.\n      TBTOP\n      b                  one or more blanks must follow TBTOP.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Set the current CRP of table MYTAB to top\n                         of the table.\n\n                                 TBTOP TABLE\n                         TABLE   DC    CL8'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 67\n      TBVCLEAR\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBVCLEAR  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBVCLEAR.\n      TBVCLEAR\n      b                  one or more blanks must follow TBVCLEAR.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Clear the current row in table MYTAB.\n\n                                 TBVCLEAR 'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 68\n      VCOPY\n\n\n\n      ___________\n      |         |\n      |         |\n      |  VCOPY  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VCOPY.\n      VCOPY\n      b                  one or more blanks must follow VCOPY.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n      ,(lengths)         (lengths): Numeric value or a list of numeric values;\n                         or a symbol addressing an array of fullwords.\n\n                         NOTE: The VCOPY service updates this array to reflect\n                         the length of data copied! This macro is not reusable\n                         when coding numeric values in place of a symbol.\n\n      ,value-array       value-array: Symbol addressing storage area mapping\n                         the variables in the name-list.\n\n          ,MOVE          MOVE: Optional keyword coded as shown.\n          ,LOCATE        LOCATE:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 69\n      VCOPY\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Copy the variable ZUSER from the ISPF\n                         pools into program storage. Copy only the address\n                         of the variable.\n\n                                 VCOPY '(ZUSER)',F4,ZUSERADD,LOCATE\n                         ZUSERADD DS   A\n                         F4       DC   F'4'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 70\n      VDEFINE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  VDEFINE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VDEFINE.\n      VDEFINE\n      b                  one or more blanks must follow VDEFINE.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n      ,storage           storage: Symbol addressing storage area mapping the\n                         variables in the name-list.\n\n      ,CHAR              CHAR: Optional keyword coded as shown.\n      ,FIXED             FIXED:  Optional keyword coded as shown.\n      ,BIT               BIT:  Optional keyword coded as shown.\n      ,HEX               HEX:  Optional keyword coded as shown.\n      ,USER              USER:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n      ,length            length: Numeric value or symbol addressing a\n                         fullword.\n\n          ,options       options: Option-list enclosed in apostrophes or a\n                         symbol addressing an option list.\n\n          ,userdata      userdata: Symbol addressing the user exit.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 71\n      VDEFINE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VDEFINE the variables XX and UYZ. They\n                         are character format. They are 10 bytes in length.\n                         Request the COPY option of the Vdefine service.\n\n                                 VDEFINE '(XX UYZ)',WORKAREA,            X\n                                       CHAR,10,'(COPY)'\n                         WORKAREA EQU  *\n                         XX       DC   CL10' '\n                         UYZ      DC   CL10' '\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 72\n      VDELETE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  VDELETE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VDELETE.\n      VDELETE\n      b                  one or more blanks must follow VDELETE.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VDELETE variables XX and UYZ.\n\n                                 VDELETE '(XX UYZ)'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 73\n      VGET\n\n\n\n      __________\n      |        |\n      |        |\n      |  VGET  |\n      |        |\n      |________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VGET.\n      VGET\n      b                  one or more blanks must follow VGET.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ASIS          ASIS: Optional keyword coded as shown.\n          ,SHARED        SHARED: Optional keyword coded as shown.\n          ,PROFILE       PROFILE: Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VGET variables XX and UYZ from the profile\n                         pool.\n\n                                 VGET '(XX UYZ)',PROFILE\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 74\n      VPUT\n\n\n\n      __________\n      |        |\n      |        |\n      |  VPUT  |\n      |        |\n      |________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VPUT.\n      VPUT\n      b                  one or more blanks must follow VPUT.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ASIS          ASIS: Optional keyword coded as shown.\n          ,SHARED        SHARED: Optional keyword coded as shown.\n          ,PROFILE       PROFILE: Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VPUT variables XX and UYZ into the profile\n                         pool.\n\n                                 VPUT '(XX UYZ)',PROFILE\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 75\n      VREPLACE\n\n\n\n      ______________\n      |            |\n      |            |\n      |  VREPLACE  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VREPLACE.\n      VREPLACE\n      b                  one or more blanks must follow VREPLACE.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n      ,(lengths)         (lengths): Numeric value or a list of numeric values;\n                         or a symbol addressing an array of fullwords.\n\n      ,value-array       value-array: Symbol addressing storage area mapping\n                         the variables in the name-list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VREPLACE variables XX and UYZ into the\n                         function pool.\n\n                                 VREPLACE '(XX UYZ)',(10,5),WORKAREA\n                         WORKAREA EQU *\n                         XX       DS  CL10\n                         UYZ      DS  CL5\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 76\n      VRESET\n\n\n\n      ____________\n      |          |\n      |          |\n      |  VRESET  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VRESET.\n      VRESET\n      b                  one or more blanks must follow VRESET.\n\n      _________________________________________________________________________\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Reset all variables in the current\n                         function pool.\n\n                                 VRESET ,\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 77\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |     ISPF Dialog Manager Assembler Macros - Library Access Services    |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 78\n      LMCLOSE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMCLOSE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMCLOSE.\n      LMCLOSE\n      b                  one or more blanks must follow LMCLOSE.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Close the dataid found at symbol DATAID.\n\n                                 LMCLOSE DATAID=DATAID\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 79\n      LMERASE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMERASE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMERASE.\n      LMERASE\n      b                  one or more blanks must follow LMERASE.\n\n      _________________________________________________________________________\n\n      PROJECT=project    project: Project name enclosed in apostrophes or a\n                         symbol addressing an 8 byte project name.\n\n      ,GROUP=group       group: Group name enclosed in apostrophes or a\n                         symbol addressing an 8 byte group name.\n\n      ,TYPE=type         type: Type name enclosed in apostrophes or a\n                         symbol addressing an 8 byte type name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Erase the file called 'A.B.C'\n\n                                 LMERASE PROJECT='A',GROUP='B',TYPE='C'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 80\n      LMFREE\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMFREE  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMFREE.\n      LMFREE\n      b                  one or more blanks must follow LMFREE.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Free the dataid found at symbol DATAID.\n\n                                 LMFREE DATAID=DATAID\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 81\n      LMGET\n\n\n\n      ___________\n      |         |\n      |         |\n      |  LMGET  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMGET.\n      LMGET\n      b                  one or more blanks must follow LMGET.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid.\n\n      ,MODE=mode         mode: Mode enclosed in apostrophes or a symbol\n                         addressing an 8 byte mode.\n\n      ,DATALOC=dataloc   dataloc: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n      ,DATALEN=datalen   datalen: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n      ,MAXLEN=maxlen     maxlen: Numeric value or a symbol addressing a\n                         fullword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Get the record for dataid ABC. The record\n                         should be stored in variable REC and the length of\n                         the record should be stored in variable RECLEN. The\n                         largest amount of data retrieved should be 80 bytes.\n\n                                 LMGET DATAID='ABC',MODE='INVAR',        X\n                                       DATALOC='REC',DATALEN='RECLEN',   X\n                                       MAXLEN=80\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 82\n      LMINIT\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMINIT  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMINIT.\n      LMINIT\n      b                  one or more blanks must follow LMINIT.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,PROJECT=proj  proj: Project name enclosed in apostrophes or a\n                         symbol addressing an 8 byte project name.\n\n          ,GROUP1=g1     g1: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,GROUP2=g2     g2: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,GROUP3=g3     g3: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,GROUP4=g4     g4: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,TYPE=type     type: Type name enclosed in apostrophes or a symbol\n                         addressing an 8 byte type name.\n\n          ,DATASET=dsn   dsn: Dataset name enclosed in apostrophes or a\n                         symbol addressing a 56 byte dataset name.\n\n          ,DDNAME=ddname ddname: DDname name enclosed in apostrophes or a\n                         symbol addressing an 8 byte DDname name.\n\n          ,VOLUME=vol    vol: Volser enclosed in apostrophes or a symbol\n                         addressing a 6 byte volser.\n\n          ,PASSWORD=pass pass: Password enclosed in apostrophes or a symbol\n                         addressing an 8 byte password.\n\n          ,ENQ=enq       enq: Enq type enclosed in apostrophes or a symbol\n                         addressing an 8 byte enq type.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 83\n      LMINIT\n\n\n\n          ,ORG=orgvar    orgvar: Variable enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Issue an LMINIT for the libraries that are\n                         currently allocated to ISPPLIB.\n\n                                 LMINIT DATAID='PLIB',DDNAME='ISPPLIB'\n\n      Example 2:         Operation: Invoke LMINIT for the dataset A.B.C. Use\n                         the execute form of the macro.\n\n                                 LMINIT DATAID='DSNID',DATASET=DSNAME,MF=E\n                         DSNAME  DC   CL56'A.B.C'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 84\n      LMMADD\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMADD  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMADD.\n      LMMADD\n      b                  one or more blanks must follow LMMADD.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Add member 'XYZ' to file.\n\n                                 LMMADD DATAID='ABC',MEMBER='XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 85\n      LMMDEL\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMDEL  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMDEL.\n      LMMDEL\n      b                  one or more blanks must follow LMMDEL.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Delete member 'XYZ'.\n\n                                 LMMDEL DATAID='ABC',MEMBER='XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 86\n      LMMFIND\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMMFIND  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMFIND.\n      LMMFIND\n      b                  one or more blanks must follow LMMFIND.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,LOCK='LOCK'   'LOCK': LOCK parameter enclosed in apostrophes as\n                         shown.\n\n          ,LRECL=lrecl   lrecl: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,RECFM=recfm   recfm: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,GROUP=group   group: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Check to see if member XYZ exists.\n\n                                 LMMFIND DATAID='ABC',MEMBER='XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 87\n      LMMLIST\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMMLIST  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMLIST.\n      LMMLIST\n      b                  one or more blanks must follow LMMLIST.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,OPTION=opt    opt: Option enclosed in apostrophes or a symbol\n                         addressing an 8 byte option.\n\n          ,MEMBER=memvar memvar: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Request a member name be returned in the\n                         variable MEMNAME and all ISPF statistics be returned\n                         as well.\n\n                                 LMMLIST DATAID='ABC',MEMBER='MEMNAME',  X\n                                     STATUS='YES'\n\n      Example 2:         Operation: Request all storage for the previous\n                         LMMLIST be freed.\n\n                                 LMMLIST DATAID='ABC',OPTION='FREE'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 88\n      LMMREN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMREN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMREN.\n      LMMREN\n      b                  one or more blanks must follow LMMREN.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,NEWNAME=new   new: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Rename member 'XYZ' to 'ABC'.\n\n                                 LMMREN DATAID='ABC',MEMBER='XYZ',       X\n                                       NEWNAME='ABC'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 89\n      LMMREP\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMREP  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMREP.\n      LMMREP\n      b                  one or more blanks must follow LMMREP.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Replace member 'xyz'\n\n                                 LMMREP DATAID='ABC',MEMBER='XYZ',       X\n                                       STATS='ON'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 90\n      LMOPEN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMOPEN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMOPEN.\n      LMOPEN\n      b                  one or more blanks must follow LMOPEN.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte Dataid name.\n\n          ,OPTION=INPUT  INPUT: Optional keyword coded as shown.\n          ,OPTION=OUTPUT OUTPUT:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LRECL=lrecl   lrecl: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,RECFM=recfm   recfm: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ORG=org       org: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Open a dataset for output. The dataid of\n                         the dataset is found at symbol DATAID.\n\n                                 LMOPEN DATAID=DATAID,OPTION=OUTPUT\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 91\n      LMPUT\n\n\n\n      ___________\n      |         |\n      |         |\n      |  LMPUT  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMPUT.\n      LMPUT\n      b                  one or more blanks must follow LMPUT.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte Dataid name.\n\n      ,MODE=mode         mode: Mode enclosed in apostrophes or a symbol\n                         addressing an 8 byte mode.\n\n      ,DATALOC=dataloc   dataloc: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n      ,DATALEN=datalen   datalen: Numeric value or symbol address a fullword.\n\n      ,NOBSCAN='NOBSCAN' NOBSCAN: Must be coded as shown in apostrophes.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Write to a dataset the current userid.\n\n                                 LMPUT DATAID=DATAID,DATALOC='ZUSER',    X\n                                       DATALEN=8\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 92\n      LMQUERY\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMQUERY  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMQUERY.\n      LMQUERY\n      b                  one or more blanks must follow LMQUERY.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid name.\n\n          ,PROJECT=proj  proj: Project name enclosed in apostrophes or a\n                         symbol addressing an 8 byte project name.\n\n          ,GROUP1=g1     g1: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,GROUP2=g2     g2: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,GROUP3=g3     g3: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,GROUP4=g4     g4: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,TYPE=type     type: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,DATASET=dsn   dsn: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,DDNAME=ddname ddname: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,VOLUME=vol    vol: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ENQ=enq       enq: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 93\n      LMQUERY\n\n\n\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Query the ddname for dataid ISR00009. The\n                         ddname, if any, should be returned in variable \"DDN\".\n\n                                 LMQUERY DATAID='ISR00009',DDNAME='DDN'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 94\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |           ISPF Dialog Manager Assembler Macros - Appendices           |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 95\n      Appendix A - Example Program\n\n\n\n      __________________________________\n      |                                |\n      |                                |\n      |  Appendix A - Example Program  |\n      |                                |\n      |________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The following is an example dialog program including macro expansions.  It\n      will display a panel called PANLEL1 and do some processing based on the\n      display.\n\n\n        *\n        *\n        * (standard entry code)\n        *\n        *\n                  ISPF  LOAD                     LOAD THE ISPLINK MODULE\n        +         CNOP  0,4                      * GENERATED BY LOAD MACRO *\n        +         LA    0,*+8                    LOAD PARAMETER INTO REG 0\n        +         B     *+12                     BRANCH AROUND CONSTANT(S)\n        +         DC    CL8'ISPLINK'             ENTRY POINT NAME\n        +         SR    1,1                      SHOW NO DCB PRESENT\n        +         SVC   8\n        +         ST    0,ISPLINK                STORE ISPLINK ADDRESS\n\n                  CONTROL ERRORS,CANCEL          SET ISPF ERROR MODE TO CANCEL\n        +         B     SPF0003\n        +CONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n        +ERRORS   DC    CL8'ERRORS'              CONTROL KEYWORD FOR ISPF\n        +CANCEL   DC    CL8'CANCEL'              CONTROL KEYWORD FOR ISPF\n        +SPF0003  DS    0H\n        +         CNOP  0,4\n        +         BAL   1,SPFE0003               BRANCH AROUND PARMLIST\n        +         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n        +         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n        +         DC    A(CANCEL+X'80000000')    ADDRESS OF CANCEL OPERAND\n        +SPFE0003 DS    0H\n        +         L     15,ISPLINK               GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n         LOOP     DISPLAY PANEL='PANELA'         DISPLAY PANEL CALLED PANELA\n        +LOOP     DS    0H\n        +         B     SPF0004\n        +DISPLAY  DC    CL8'DISPLAY'             DISPLAY KEYWORD FOR ISPF\n        +SPFP0005 DC    CL8'PANELA'              DISPLAY THIS PANEL\n        +SPFNULLC DC    CL8' '                   DUMMY ISPF FIELD\n        +SPFNULLF DC    F'0'                     DUMMY ISPF FIELD\n        +SPF0004  DS    0H\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 96\n      Appendix A - Example Program\n\n\n\n        +         CNOP  0,4\n        +         BAL   1,SPFE0004               BRANCH AROUND PARMLIST\n        +         DC    A(DISPLAY)               DISPLAY KEYWORD\n        +         DC    A(SPFP0004)              ADDRESS OF GENERATED PANEL\n        +         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n        +         DC    A(SPFNULLC)              DUMMY PARM FOR FIELD\n        +         DC    A(SPFNULLF+X'80000000')  DUMMY PARM FOR CSRPOS\n        +SPFE0004 DS    0H\n        +         L     15,ISPLINK               GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n                  LTR   15,15                    WAS END KEY HIT\n                  BNZ   EXITPGM                  IF SO, EXIT PROGRAM\n\n                  CONTROL ERRORS,RETURN          SET ISPF ERROR MODE TO CANCEL\n        +         B     SPF0005\n        +RETURN   DC    CL8'RETURN'              CONTROL KEYWORD FOR ISPF\n        +SPF0005  DS    0H\n        +         CNOP  0,4\n        +         BAL   1,SPFE0005               BRANCH AROUND PARMLIST\n        +         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n        +         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n        +         DC    A(RETURN+X'80000000')    ADDRESS OF CANCEL OPERAND\n        +SPFE0005 DS    0H\n        +         L     15,ISPLINK               GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n        *\n        * (other processing code)\n        * (go to display loop)\n\n        *\n        *         EXIT  PROGRAM CODE\n\n         EXITPGM  ISPF  DELETE\n        +         BAL   0,*+12                   LOAD ADDRESS OF EP SYMBOL\n        +         DC    CL8'ISPLINK'             EP SYMBOL\n        +         SVC   9                        ISSUE DELETE SVC\n\n        *\n        * (standard exit code)\n\n        *\n        *         WORKING STORAGE\n                  ISPF  PARMS                    GENERATE ISPF WORKING STORAGE\n        +ISPLINK  DS    A                        USED FOR ISPLINK ENTRY POINT\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 97\n      Appendix B - Using the macros with existing programs\n\n\n\n      __________________________________________________________\n      |                                                        |\n      |                                                        |\n      |  Appendix B - Using the macros with existing programs  |\n      |                                                        |\n      |________________________________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The following is an example dialog program.  The ISPLINK entry point is\n      already loaded into the address ISPADD.  The parameter-list is already\n      coded and labeled PARMLIST.  The execute form of the macro will be used.\n\n\n        *\n        *\n        * (regular program code)\n        *\n        *\n                  ISPF  SUPPRESS,LIST=(CONTROL,ERRORS,CANCEL)\n                  CONTROL ERRORS,CANCEL,LOAD=ISPADD\n        +         CNOP  0,4\n        +         BAL   1,SPFE0003               BRANCH AROUND PARMLIST\n        +         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n        +         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n        +         DC    A(CANCEL+X'80000000')    ADDRESS OF CANCEL OPERAND\n        +SPFE0003 DS    0H\n        +         L     15,ISPADD                GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n                  ISPF  SUPPRESS,LIST=DISPLAY\n                  DISPLAY PANEL='PANELA',MF=(E,PARMLIST)\n        +         B     SPF0004\n        +SPFP0005 DC    CL8'PANELA'              DISPLAY THIS PANEL\n        +SPFNULLC DC    CL8' '                   DUMMY ISPF FIELD\n        +SPFNULLF DC    F'0'                     DUMMY ISPF FIELD\n        +SPF0004  DS    0H\n        +         LA    14,DISPLAY               GET DISPLAY KEYWORD ADDRESS\n        +         LA    15,SPFP0004              GET GENERATED PANEL ADDRESS\n        +         LA    0,SPFNULLC               DUMMY PARM FOR MSG\n        +         LA    1,SPFNULLC               DUMMY PARM FOR FIELD\n        +         STM   14,1,PARMLIST            STORE INTO PARMLIST\n        +         LA    14,SPFNULLF              DUMMY PARM FOR CSRPOS\n        +         ST    14,PARMLIST+16           STORE INTO PARMLIST\n        +         OI    PARMLIST+16,X'80'        MARK LAST PARM\n        +         LA    1,PARMLIST               GET PARAMETER LIST ADDRESS\n        +         L     15,ISPADD                GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n./ ADD NAME=@        8512-85095-85095-1207-00429-00429-00000-ISPFDYN\n         MACRO\n         @     &LETTERS\n.* THIS MACRO IS USEFUL FOR INSERTING INTERESTING BLOCK-LETTER\n.* COMMENTS INTO YOUR ASSEMBLY PROGRAM.  TRY IT--YOU'LL LIKE IT.\n.**********************************************************************\n.*\n.* AIR FORCE DATA SERVICES CENTER--SYSTEMS SUPPORT DIRECTORATE\n.* ROOM 1D987, THE PENTAGON, WASHINGTON, DC 20330\n.* TELEPHONE: (AUTOVON) 225-1274/2478/1889\n.*     COMMERCIAL (703) 695-1274/2478/1889\n.*\n.**********************************************************************\n.* DATE INSTALLED: 790523\n.**********************************************************\n.** => CHANGE LOG: ENTER AUTHOR, DATE, SUMMARY OF CHANGE **\n.**********************************************************\n.* DATE OF LAST CHANGE:\n.*\n.**********************************************************************\n         LCLC  &A(50)\n         LCLC  &B(62),&C(62),&D(62),&E(62),&F(62),&G(62)\n         LCLA  &I,&J,&K\n&B(01)   SETC  'A'\n&B(02)   SETC  'B'\n&B(03)   SETC  'C'\n&B(04)   SETC  'D'\n&B(05)   SETC  'E'\n&B(06)   SETC  'F'\n&B(07)   SETC  'G'\n&B(08)   SETC  'H'\n&B(09)   SETC  'I'\n&B(10)   SETC  'J'\n&B(11)   SETC  'K'\n&B(12)   SETC  'L'\n&B(13)   SETC  'M'\n&B(14)   SETC  'N'\n&B(15)   SETC  'O'\n&B(16)   SETC  'P'\n&B(17)   SETC  'Q'\n&B(18)   SETC  'R'\n&B(19)   SETC  'S'\n&B(20)   SETC  'T'\n&B(21)   SETC  'U'\n&B(22)   SETC  'V'\n&B(23)   SETC  'W'\n&B(24)   SETC  'X'\n&B(25)   SETC  'Y'\n&B(26)   SETC  'Z'\n&B(27)   SETC  '#'\n&B(28)   SETC  ','\n&B(29)   SETC  '$'\n&B(30)   SETC  '0'\n&B(31)   SETC  '1'\n&B(32)   SETC  '2'\n&B(33)   SETC  '3'\n&B(34)   SETC  '4'\n&B(35)   SETC  '5'\n&B(36)   SETC  '6'\n&B(37)   SETC  '7'\n&B(38)   SETC  '8'\n&B(39)   SETC  '9'\n&B(40)   SETC  '@'\n&B(41)   SETC  '%'\n&B(42)   SETC  '*'\n&B(43)   SETC  '/'\n&B(44)   SETC  '-'\n&B(45)   SETC  '('\n&B(46)   SETC  ')'\n&B(47)   SETC  '&&'\n&B(48)   SETC  '+'\n&B(49)   SETC  '_'\n&B(50)   SETC  '\u00a2'\n&B(51)   SETC  '|'\n&B(52)   SETC  '>'\n&B(53)   SETC  ':'\n&B(54)   SETC  ';'\n&B(55)   SETC  '.'\n&B(56)   SETC  '?'\n&B(57)   SETC  '\"'\n&B(58)   SETC  '='\n&B(59)   SETC  '!'\n&B(60)   SETC  '<'\n&B(61)   SETC  '\u00ac'\n&B(62)   SETC  ' '\n&C(01)   SETC  '  A  '\n&D(01)   SETC  ' A A '\n&E(01)   SETC  'A   A'\n&F(01)   SETC  'AAAAA'\n&G(01)   SETC  'A   A'\n&C(02)   SETC  'BBBB '\n&D(02)   SETC  'B   B'\n&E(02)   SETC  'BBBB '\n&F(02)   SETC  'B   B'\n&G(02)   SETC  'BBBB '\n&C(03)   SETC  ' CCCC'\n&D(03)   SETC  'C    '\n&E(03)   SETC  'C    '\n&F(03)   SETC  'C    '\n&G(03)   SETC  ' CCCC'\n&C(04)   SETC  'DDDD '\n&D(04)   SETC  'D   D'\n&E(04)   SETC  'D   D'\n&F(04)   SETC  'D   D'\n&G(04)   SETC  'DDDD '\n&C(05)   SETC  'EEEEE'\n&D(05)   SETC  'E    '\n&E(05)   SETC  'EEEE '\n&F(05)   SETC  'E    '\n&G(05)   SETC  'EEEEE'\n&C(06)   SETC  'FFFFF'\n&D(06)   SETC  'F    '\n&E(06)   SETC  'FFFF '\n&F(06)   SETC  'F    '\n&G(06)   SETC  'F    '\n&C(07)   SETC  ' GGGG'\n&D(07)   SETC  'G    '\n&E(07)   SETC  'G  GG'\n&F(07)   SETC  'G   G'\n&G(07)   SETC  ' GGGG'\n&C(08)   SETC  'H   H'\n&D(08)   SETC  'H   H'\n&E(08)   SETC  'HHHHH'\n&F(08)   SETC  'H   H'\n&G(08)   SETC  'H   H'\n&C(09)   SETC  ' III '\n&D(09)   SETC  '  I  '\n&E(09)   SETC  '  I  '\n&F(09)   SETC  '  I  '\n&G(09)   SETC  ' III '\n&C(10)   SETC  '  JJJ'\n&D(10)   SETC  '   J '\n&E(10)   SETC  '   J '\n&F(10)   SETC  'J  J '\n&G(10)   SETC  ' JJ  '\n&C(11)   SETC  'K  K '\n&D(11)   SETC  'K K  '\n&E(11)   SETC  'KK   '\n&F(11)   SETC  'K K  '\n&G(11)   SETC  'K  K '\n&C(12)   SETC  'L    '\n&D(12)   SETC  'L    '\n&E(12)   SETC  'L    '\n&F(12)   SETC  'L    '\n&G(12)   SETC  'LLLLL'\n&C(13)   SETC  'M   M'\n&D(13)   SETC  'MM MM'\n&E(13)   SETC  'M M M'\n&F(13)   SETC  'M   M'\n&G(13)   SETC  'M   M'\n&C(14)   SETC  'N   N'\n&D(14)   SETC  'NN  N'\n&E(14)   SETC  'N N N'\n&F(14)   SETC  'N  NN'\n&G(14)   SETC  'N   N'\n&C(15)   SETC  'OOOOO'\n&D(15)   SETC  'O   O'\n&E(15)   SETC  'O   O'\n&F(15)   SETC  'O   O'\n&G(15)   SETC  'OOOOO'\n&C(16)   SETC  'PPPP '\n&D(16)   SETC  'P   P'\n&E(16)   SETC  'PPPP '\n&F(16)   SETC  'P    '\n&G(16)   SETC  'P    '\n&C(17)   SETC  ' QQQ '\n&D(17)   SETC  'Q   Q'\n&E(17)   SETC  'Q Q Q'\n&F(17)   SETC  'Q  Q '\n&G(17)   SETC  ' QQ Q'\n&C(18)   SETC  'RRRR '\n&D(18)   SETC  'R   R'\n&E(18)   SETC  'RRRR '\n&F(18)   SETC  'R  R '\n&G(18)   SETC  'R   R'\n&C(19)   SETC  ' SSSS'\n&D(19)   SETC  'S    '\n&E(19)   SETC  ' SSS '\n&F(19)   SETC  '    S'\n&G(19)   SETC  'SSSS '\n&C(20)   SETC  'TTTTT'\n&D(20)   SETC  '  T  '\n&E(20)   SETC  '  T  '\n&F(20)   SETC  '  T  '\n&G(20)   SETC  '  T  '\n&C(21)   SETC  'U   U'\n&D(21)   SETC  'U   U'\n&E(21)   SETC  'U   U'\n&F(21)   SETC  'U   U'\n&G(21)   SETC  ' UUU '\n&C(22)   SETC  'V   V'\n&D(22)   SETC  'V   V'\n&E(22)   SETC  'V   V'\n&F(22)   SETC  ' V V '\n&G(22)   SETC  '  V  '\n&C(23)   SETC  'W   W'\n&D(23)   SETC  'W   W'\n&E(23)   SETC  'W W W'\n&F(23)   SETC  'WW WW'\n&G(23)   SETC  'W   W'\n&C(24)   SETC  'X   X'\n&D(24)   SETC  ' X X '\n&E(24)   SETC  '  X  '\n&F(24)   SETC  ' X X '\n&G(24)   SETC  'X   X'\n&C(25)   SETC  'Y   Y'\n&D(25)   SETC  ' Y Y '\n&E(25)   SETC  '  Y  '\n&F(25)   SETC  '  Y  '\n&G(25)   SETC  '  Y  '\n&C(26)   SETC  'ZZZZZ'\n&D(26)   SETC  '   Z '\n&E(26)   SETC  '  Z  '\n&F(26)   SETC  ' Z   '\n&G(26)   SETC  'ZZZZZ'\n&C(27)   SETC  ' # # '\n&D(27)   SETC  '#####'\n&E(27)   SETC  ' # # '\n&F(27)   SETC  '#####'\n&G(27)   SETC  ' # # '\n&C(28)   SETC  '     '\n&D(28)   SETC  '     '\n&E(28)   SETC  '     '\n&F(28)   SETC  ' ,,  '\n&G(28)   SETC  '  ,  '\n&C(29)   SETC  ' $$$$'\n&D(29)   SETC  '$ $  '\n&E(29)   SETC  ' $$$ '\n&F(29)   SETC  '  $ $'\n&G(29)   SETC  '$$$$ '\n&C(30)   SETC  ' 000 '\n&D(30)   SETC  '0   0'\n&E(30)   SETC  '0   0'\n&F(30)   SETC  '0   0'\n&G(30)   SETC  ' 000 '\n&C(31)   SETC  '  1  '\n&D(31)   SETC  ' 11  '\n&E(31)   SETC  '  1  '\n&F(31)   SETC  '  1  '\n&G(31)   SETC  ' 111 '\n&C(32)   SETC  '2222 '\n&D(32)   SETC  '    2'\n&E(32)   SETC  '   2 '\n&F(32)   SETC  '  2  '\n&G(32)   SETC  '22222'\n&C(33)   SETC  '3333 '\n&D(33)   SETC  '    3'\n&E(33)   SETC  ' 333 '\n&F(33)   SETC  '    3'\n&G(33)   SETC  '3333 '\n&C(34)   SETC  '4  4 '\n&D(34)   SETC  '4  4 '\n&E(34)   SETC  '44444'\n&F(34)   SETC  '   4 '\n&G(34)   SETC  '   4 '\n&C(35)   SETC  '55555'\n&D(35)   SETC  '5    '\n&E(35)   SETC  '5555 '\n&F(35)   SETC  '    5'\n&G(35)   SETC  '5555 '\n&C(36)   SETC  ' 666 '\n&D(36)   SETC  '6    '\n&E(36)   SETC  '6666 '\n&F(36)   SETC  '6   6'\n&G(36)   SETC  ' 666 '\n&C(37)   SETC  '77777'\n&D(37)   SETC  '   7 '\n&E(37)   SETC  '  7  '\n&F(37)   SETC  '  7  '\n&G(37)   SETC  '  7  '\n&C(38)   SETC  ' 888 '\n&D(38)   SETC  '8   8'\n&E(38)   SETC  ' 888 '\n&F(38)   SETC  '8   8'\n&G(38)   SETC  ' 888 '\n&C(39)   SETC  ' 999 '\n&D(39)   SETC  '9   9'\n&E(39)   SETC  ' 9999'\n&F(39)   SETC  '    9'\n&G(39)   SETC  ' 999 '\n&C(40)   SETC  '@@@@ '\n&D(40)   SETC  '    @'\n&E(40)   SETC  '@@@ @'\n&F(40)   SETC  '@ @ @'\n&G(40)   SETC  '@@@@ '\n&C(41)   SETC  '%%  %'\n&D(41)   SETC  '   % '\n&E(41)   SETC  '  %  '\n&F(41)   SETC  ' %   '\n&G(41)   SETC  '%  %%'\n&C(42)   SETC  '* * *'\n&D(42)   SETC  ' *** '\n&E(42)   SETC  '*****'\n&F(42)   SETC  ' *** '\n&G(42)   SETC  '* * *'\n&C(43)   SETC  '    /'\n&D(43)   SETC  '   / '\n&E(43)   SETC  '  /  '\n&F(43)   SETC  ' /   '\n&G(43)   SETC  '/    '\n&C(44)   SETC  '     '\n&D(44)   SETC  '     '\n&E(44)   SETC  '-----'\n&F(44)   SETC  '     '\n&G(44)   SETC  '     '\n&C(45)   SETC  '   ( '\n&D(45)   SETC  '  (  '\n&E(45)   SETC  '  (  '\n&F(45)   SETC  '  (  '\n&G(45)   SETC  '   ( '\n&C(46)   SETC  ' )   '\n&D(46)   SETC  '  )  '\n&E(46)   SETC  '  )  '\n&F(46)   SETC  '  )  '\n&G(46)   SETC  ' )   '\n&C(47)   SETC  ' &&&&&& '\n&D(47)   SETC  '&&    '\n&E(47)   SETC  ' &&&&  '\n&F(47)   SETC  '&&   &&'\n&G(47)   SETC  ' &&&&&&&&'\n&C(48)   SETC  '  +  '\n&D(48)   SETC  '  +  '\n&E(48)   SETC  '+++++'\n&F(48)   SETC  '  +  '\n&G(48)   SETC  '  +  '\n&C(49)   SETC  '     '\n&D(49)   SETC  '     '\n&E(49)   SETC  '     '\n&F(49)   SETC  '     '\n&G(49)   SETC  '_____'\n&C(50)   SETC  '  *  '\n&D(50)   SETC  ' C*C '\n&E(50)   SETC  'C *  '\n&F(50)   SETC  ' C*C '\n&G(50)   SETC  '  *  '\n&C(51)   SETC  '  |  '\n&D(51)   SETC  '  |  '\n&E(51)   SETC  '  |  '\n&F(51)   SETC  '  |  '\n&G(51)   SETC  '  |  '\n&C(52)   SETC  ' >   '\n&D(52)   SETC  '  >  '\n&E(52)   SETC  '   > '\n&F(52)   SETC  '  >  '\n&G(52)   SETC  ' >   '\n&C(53)   SETC  ' ..  '\n&D(53)   SETC  ' ..  '\n&E(53)   SETC  '     '\n&F(53)   SETC  ' ..  '\n&G(53)   SETC  ' ..  '\n&C(54)   SETC  ' ..  '\n&D(54)   SETC  ' ..  '\n&E(54)   SETC  '     '\n&F(54)   SETC  ' ,,  '\n&G(54)   SETC  '  ,  '\n&C(55)   SETC  '     '\n&D(55)   SETC  '     '\n&E(55)   SETC  '     '\n&F(55)   SETC  ' ..  '\n&G(55)   SETC  ' ..  '\n&C(56)   SETC  ' ??? '\n&D(56)   SETC  '?   ?'\n&E(56)   SETC  '   ? '\n&F(56)   SETC  '  ?  '\n&G(56)   SETC  '  ?  '\n&C(57)   SETC  ' '' '' '\n&D(57)   SETC  '     '\n&E(57)   SETC  '     '\n&F(57)   SETC  '     '\n&G(57)   SETC  '     '\n&C(58)   SETC  '     '\n&D(58)   SETC  '====='\n&E(58)   SETC  '     '\n&F(58)   SETC  '====='\n&G(58)   SETC  '     '\n&C(59)   SETC  ' ||  '\n&D(59)   SETC  ' ||  '\n&E(59)   SETC  ' ||  '\n&F(59)   SETC  '     '\n&G(59)   SETC  ' ..  '\n&C(60)   SETC  '   < '\n&D(60)   SETC  '  <  '\n&E(60)   SETC  ' <   '\n&F(60)   SETC  '  <  '\n&G(60)   SETC  '   < '\n&C(61)   SETC  '     '\n&D(61)   SETC  '     '\n&E(61)   SETC  '\u00ac\u00ac\u00ac\u00ac\u00ac'\n&F(61)   SETC  '    \u00ac'\n&G(61)   SETC  '     '\n&C(62)   SETC  '     '\n&D(62)   SETC  '     '\n&E(62)   SETC  '     '\n&F(62)   SETC  '     '\n&G(62)   SETC  '     '\n&J       SETA  1\n&K       SETA  1\n         AIF   ('&LETTERS'(1,1) NE '''').JLOOP\n.LLOOP   ANOP\n&J       SETA  &J+1\n.JLOOP   AIF   (K'&LETTERS LT &J).END\n         AIF   (K'&LETTERS EQ &J AND '&LETTERS'(&J,1) EQ '''').END\n&I       SETA  1\n.COMP    AIF   ('&B(&I)' EQ '&LETTERS'(&J,1)).FND\n&I       SETA  &I+1\n         AIF   (&I LT 62).COMP\n.FND     ANOP\n&A(&K)   SETC  '&C(&I)'\n&A(&K+1) SETC  '&D(&I)'\n&A(&K+2) SETC  '&E(&I)'\n&A(&K+3) SETC  '&F(&I)'\n&A(&K+4) SETC  '&G(&I)'\n&K       SETA  &K+5\n         AIF   (&K LT 51).LLOOP\n.END     ANOP\n         SPACE 2\n         MNOTE *,'******************************************************\n               ****************'\n         MNOTE *,' '\n&I       SETA  1\n.REDO    MNOTE *,' &A(&I)  &A(&I+5)  &A(&I+10)  &A(&I+15)  &A(&I+20)  &*\n               A(&I+25)  &A(&I+30)  &A(&I+35)  &A(&I+40)  &A(&I+45)'\n&I       SETA  &I+1\n         AIF   (&I LT 6).REDO\n         MNOTE *,' '\n         MNOTE *,'******************************************************\n               ****************'\n         MEXIT\n         SPACE 4\n         MEND\n./ ADD NAME=@EDIT    8512-85095-85095-1207-00321-00321-00000-ISPFDYN\n         MACRO\n&NAME    @EDIT &DSN,                    DATASET NAME                   *\n               &VOL,                    VOLUME                         *\n               &PASS,                   PASSWORD                       *\n               &PANEL,                  PANEL ID                       *\n               &MACRO,                  MACRO NAME                     *\n               &PROF,                   PROFILE NAME                   *\n               &DATAID,                 DATA ID                        *\n               &MEMBER,                 MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFEDIT,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n.*       AIF   ('&DSN' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFEDIT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DSN' EQ '').CNT0\n         AIF   ('&DSN'(1,1) EQ '''').GENLIT\n.CNT0    AIF   ('&VOL' EQ '').CNT1\n         AIF   ('&VOL'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASS' EQ '').CNT2\n         AIF   ('&PASS'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AIF   ('&MACRO' EQ '').CNT6\n         AIF   ('&MACRO'(1,1) EQ '''').GENLIT\n.CNT6    AIF   ('&PROF' EQ '').CNT7\n         AIF   ('&PROF'(1,1) EQ '''').GENLIT\n.CNT7    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFEDIT).BYP20\nEDIT     DC    CL8'EDIT'                EDIT LITERAL FOR ISPF\n&SPFEDIT SETB 1\n.BYP20   ANOP\n         AIF   ('&DSN' EQ '').BYP30\n         AIF   ('&DSN'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DSN                 EDIT THIS DATASET NAME\n.BYP30   ANOP\n         AIF   ('&VOL' EQ '').BYP40\n         AIF   ('&VOL'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOL                  GENERATED VOLSER\n.BYP40   ANOP\n         AIF   ('&PASS' EQ '').BYP50\n         AIF   ('&PASS'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASS                 GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\n         AIF   ('&MACRO' EQ '').AYP60\n         AIF   ('&MACRO'(1,1) NE '''').AYP60\nSPFX&NDX DC    CL8&MACRO                GENERATED DATAID\n.AYP60   ANOP\n         AIF   ('&PROF' EQ '').AYP70\n         AIF   ('&PROF'(1,1) NE '''').AYP70\nSPFY&NDX DC    CL8&PROF                 GENERATED DATAID\n.AYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,EDIT                  GET ADDRESS OF EDIT KEYWORD\n         AIF   ('&DSN' EQ '').BYP85\n         AIF   ('&DSN'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DSN                  GET ADDRESS OF DATASET NAME\n         AGO   .BYP90\n.BYP85   ANOP\n         LA    15,SPFNULLC              GET DUMMY ADDRESS FOR DSN\n.BYP90   ANOP\n         AIF   ('&VOL' EQ '').BYP100\n         AIF   ('&VOL'(1,1) EQ '''').BYP110\n         LA    0,&VOL                   GET ADDRESS OF VOLSER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOLSER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLSER\n.BYP120  ANOP\n         AIF   ('&PASS' EQ '').BYP140\n         AIF   ('&PASS'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASS                  GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&MACRO' EQ '').BYP172\n         AIF   ('&MACRO'(1,1) EQ '''').BYP162\n         LA    15,&MACRO                GET ADDRESS OF MACRO\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFX&NDX              GET ADDRESS OF GENNED MACRO\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MACRO\n.BYP182  ANOP\n         AIF   ('&PROF' EQ '').BYP174\n         AIF   ('&PROF'(1,1) EQ '''').BYP164\n         LA    0,&PROF                  GET ADDRESS OF PROFILE\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFY&NDX               GET ADDRESS OF GENNED PROFILE\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROFILE\n.BYP184  ANOP\n         AIF   ('&DATAID' EQ '').AYP100\n         AIF   ('&DATAID'(1,1) EQ '''').AYP110\n         LA    1,&DATAID                GET ADDRESS OF DATAID\n         AGO   .AYP120\n.AYP100  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM OF DATAID\n         AGO   .AYP120\n.AYP110  ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENNED DATAID\n.AYP120  ANOP\n         STM   14,1,&TEMP+16            STORE PARMS\n         AIF   ('&MEMBER' EQ '').AYP170\n         AIF   ('&MEMBER'(1,1) EQ '''').AYP160\n         LA    14,&MEMBER               GET ADDRESS OF MEMBER\n         AGO   .AYP180\n.AYP160  ANOP\n         LA    14,SPFM&NDX              GET ADDRESS OF GENNED MEMBER\n         AGO   .AYP180\n.AYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.AYP180  ANOP\n         ST    14,&TEMP+32              STORE THE MEMBER PARMS\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(EDIT)                  EDIT LITERAL\n         AIF   ('&DSN' EQ '').BYP285\n         AIF   ('&DSN'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DSN\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DSN)                  ADDRESS OF DATASET NAME\n         AGO   .BYP290\n.BYP285  ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY DSN\n.BYP290  ANOP\n         AIF   ('&VOL' EQ '').BYP200\n         AIF   ('&VOL'(1,1) EQ '''').BYP210\n         DC    A(&VOL)                  ADDRESS OF VOLSER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLSER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLSER\n.BYP220  ANOP\n         AIF   ('&PASS' EQ '').BYP240\n         AIF   ('&PASS'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASS\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASS)                 ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&MACRO' EQ '').CYP320\n         AIF   ('&MACRO'(1,1) EQ '''').CYP310\n         DC    A(&MACRO)                ADDRESS OF MACRO\n         AGO   .CYP330\n.CYP310  ANOP\n         DC    A(SPFX&NDX)              ADDRESS OF GENNED MACRO\n         AGO   .CYP330\n.CYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MACRO\n.CYP330  ANOP\n         AIF   ('&PROF' EQ '').DYP320\n         AIF   ('&PROF'(1,1) EQ '''').DYP310\n         DC    A(&MACRO)                ADDRESS OF PROFILE\n         AGO   .DYP330\n.DYP310  ANOP\n         DC    A(SPFY&NDX)              ADDRESS OF GENNED PROFILE\n         AGO   .DYP330\n.DYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PROFILE\n.DYP330  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP384\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'REQUIRED DSNAME PARAMETER MISSING'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@FTCLOSE 8512-85095-85095-1207-00177-00177-00000-ISPFDYN\n         MACRO\n&NAME    @FTCLOSE &MEM,                 MEMBER NAME                    *\n               &LIB,                    LIBRARY NAME                   *\n               &NOREPLL,                NOREPL KEYWORD                 *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREPL\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&NOREPLL' NE '' AND                                   *\n               '&NOREPLL' NE 'NOREPL').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIB' EQ '').CNT2\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&NOREPLL' NE '' AND NOT &SPFNOREPL).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTCLOSE).BYP20\nFTCLOSE  DC    CL8'FTCLOSE'             ISPF KEYWORD\n&SPFFTCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   ('&NOREPLL' EQ '').BYP60\n         AIF   (&SPFNOREPL).BYP60\nNOREPL   DC    CL8'NOREPL'              ISPF KEYWORD\n&SPFNOREPL SETB 1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTCLOSE               GET ADDRESS OF FTCLOSE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIB' EQ '').BYP140\n         AIF   ('&LIB'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIB                   GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         AIF   ('&NOREPLL' EQ '').BYP170\n         LA    1,NOREPL                 GET ADDRESS OF NOREPL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NOREPL\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTCLOSE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIB' EQ '').BYP240\n         AIF   ('&LIB'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIB)                  ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\n         AIF   ('&NOREPLL' EQ '').BYP270\n         DC    A(NOREPL+X'80000000')    ADDRESS OF NOREPL KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR NOREPL\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR NOREPL - FOUND ''&NOREPLL'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@FTERASE 8512-85095-85095-1207-00157-00157-00000-ISPFDYN\n         MACRO\n&NAME    @FTERASE &MEM,                 MEMBER NAME                    *\n               &LIB,                    LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIB' EQ '').CNT2\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTERASE).BYP20\nFTERASE  DC    CL8'FTERASE'             ISPF KEYWORD\n&SPFFTERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTERASE               GET ADDRESS OF FTERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIB' EQ '').BYP140\n         AIF   ('&LIB'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIB                   GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIB' EQ '').BYP240\n         AIF   ('&LIB'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@FTINCL  8512-85095-85095-1207-00149-00149-00000-ISPFDYN\n         MACRO\n&NAME    @FTINCL &SKEL,                 MEMBER NAME                    *\n               &NOFTL,                  NOFT KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTINCL,&SPFDEBUG,&SPFVAR,&SPFNOFT\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&NOFTL' NE '' AND                                     *\n               '&NOFTL' NE 'NOFT').ERR1\n         AIF   ('&SKEL' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTINCL).GENLIT\n         AIF   ('&SKEL' EQ '').CNT1\n         AIF   ('&SKEL'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&NOFTL' NE '' AND NOT &SPFNOFT).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTINCL).BYP20\nFTINCL   DC    CL8'FTINCL'              ISPF KEYWORD\n&SPFFTINCL SETB 1\n.BYP20   ANOP\n         AIF   ('&SKEL' EQ '').BYP40\n         AIF   ('&SKEL'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SKEL                 GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&NOFTL' EQ '').BYP60\n         AIF   (&SPFNOFT).BYP60\nNOFT     DC    CL8'NOFT'                ISPF KEYWORD\n&SPFNOFT SETB  1\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTINCL                GET ADDRESS OF FTINCL KEYWORD\n         AIF   ('&SKEL' EQ '').BYP100\n         AIF   ('&SKEL'(1,1) EQ '''').BYP110\n         LA    15,&SKEL                 GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&NOFTL' EQ '').BYP170\n         LA    0,NOFT                   GET ADDRESS OF NOFT\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOFT\n.BYP180  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTINCL)                BROWSE LITERAL\n         AIF   ('&SKEL' EQ '').BYP200\n         AIF   ('&SKEL'(1,1) EQ '''').BYP210\n         DC    A(&SKEL)                 ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&NOFTL' EQ '').BYP270\n         DC    A(NOFT+X'80000000')      ADDRESS OF NOFT KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR NOFT\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR NOFT PARAMETER - FOUND ''&NOFTL'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SKELETON NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@FTOPEN  8512-85095-85095-1207-00118-00118-00000-ISPFDYN\n         MACRO\n&NAME    @FTOPEN &TEMPL,                TEMP KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTOPEN,&SPFDEBUG,&SPFVAR,&SPFTEMP\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEM\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TEMPL' NE '' AND                                     *\n               '&TEMPL' NE 'TEMP').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEM     SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEM     SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTOPEN).GENLIT\n         AIF   ('&TEMPL' NE '' AND NOT &SPFTEMP).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTOPEN).BYP20\nFTOPEN   DC    CL8'FTOPEN'              ISPF KEYWORD\n&SPFFTOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TEMPL' EQ '').BYP60\n         AIF   (&SPFTEMP).BYP60\nTEMP     DC    CL8'TEMP'                ISPF KEYWORD\n&SPFTEMP SETB  1\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTOPEN                GET ADDRESS OF FTOPEN KEYWORD\n         AIF   ('&TEMPL' EQ '').BYP170\n         LA    15,TEMP                  GET ADDRESS OF TEMP\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TEMP\n.BYP180  ANOP\n         STM   14,15,&TEM               STORE PARAMETERS\n         OI    &TEM+4,X'80'             MARK LAST PARM\n         LA    1,&TEM                   GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTOPEN)                BROWSE LITERAL\n         AIF   ('&TEMPL' EQ '').BYP270\n         DC    A(TEMP+X'80000000')      ADDRESS OF TEMP KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TEMP\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR TEMP PARM - FOUND ''&TEMPL'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@GETMSG  8512-85095-85095-1207-00254-00254-00000-ISPFDYN\n         MACRO\n&NAME   @GETMSG &MSG,                   MESSAGE NAME                   *\n               &SMSG,                   VAR FOR SHORT MESSAGE          *\n               &LMSG,                   VAR FOR LONG MESSAGE           *\n               &ALARM,                  VAR FOR ALARM VALUE            *\n               &HELP,                   VAR FOR HELP PANEL             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFGETMSG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&MSG' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFGETMSG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SMSG' EQ '').CNT2\n         AIF   ('&SMSG'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&LMSG' EQ '').CNT3\n         AIF   ('&LMSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ALARM' EQ '').CNT4\n         AIF   ('&ALARM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&HELP' EQ '').CNT5\n         AIF   ('&HELP'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFGETMSG).BYP20\nGETMSG   DC    CL8'GETMSG'              ISPF KEYWORD\n&SPFGETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP30\n         AIF   ('&MSG'(1,1) NE '''').BYP30\nSPFM&NDX DC    CL8&MSG                  GENERATED MESSAGE NAME\n.BYP30   ANOP\n         AIF   ('&SMSG' EQ '').BYP40\n         AIF   ('&SMSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SMSG                 GENERATED SHORT MESSAGE\n.BYP40   ANOP\n         AIF   ('&LMSG' EQ '').BYP50\n         AIF   ('&LMSG'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LMSG                 GENERATED LONG MESSAGE\n.BYP50   ANOP\n         AIF   ('&ALARM' EQ '').BYP60\n         AIF   ('&ALARM'(1,1) NE '''').BYP60\nSPFA&NDX DC    CL8&ALARM                GENERATED ALARM VAR FIELD\n.BYP60   ANOP\n         AIF   ('&HELP' EQ '').BYP70\n         AIF   ('&HELP'(1,1) NE '''').BYP70\nSPFH&NDX DC    CL8&HELP                 GENERATED HELP VAR FIELD\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,GETMSG                GET ADDRESS OF GETMSG KEYWORD\n.*\n         AIF   ('&MSG' EQ '').BYP1000\n         AIF   ('&MSG'(1,1) EQ '''').BYP1010\n         LA    15,&MSG                  GET ADDRESS OF MSG NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MSG\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MSG\n.BYP1050 ANOP\n.*\n         AIF   ('&SMSG' EQ '').BYP1100\n         AIF   ('&SMSG'(1,1) EQ '''').BYP1110\n         LA    0,&SMSG                  GET ADDRESS OF SHORT MSG\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SHORT MSG\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SHORT\n.BYP1150 ANOP\n.*\n         AIF   ('&LMSG' EQ '').BYP1200\n         AIF   ('&LMSG'(1,1) EQ '''').BYP1210\n         LA    1,&LMSG                  GET ADDRESS OF LONG MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LONG MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LONG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ALARM' EQ '').BYP1300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP1310\n         LA    14,&ALARM                GET ADDRESS OF ALARM NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ALARM\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFA&NDX              GET ADDRESS OF GENERATED ALARM\n.BYP1350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP1400\n         AIF   ('&HELP'(1,1) EQ '''').BYP1410\n         LA    15,&HELP                 GET ADDRESS OF HELP NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR HELP\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENERATED HELP\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(GETMSG)                GETMSG LITERAL\n.*\n         AIF   ('&MSG' EQ '').BYP2000\n         AIF   ('&MSG'(1,1) EQ '''').BYP2010\n         DC    A(&MSG)                  ADDRESS OF MSG NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2050 ANOP\n.*\n         AIF   ('&SMSG' EQ '').BYP2100\n         AIF   ('&SMSG'(1,1) EQ '''').BYP2110\n         DC    A(&SMSG)                 ADDRESS OF SHORT MSG\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SMSG SHORT MSG\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SHORT MSG\n.BYP2150 ANOP\n.*\n         AIF   ('&LMSG' EQ '').BYP2200\n         AIF   ('&LMSG'(1,1) EQ '''').BYP2210\n         DC    A(&LMSG)                 ADDRESS OF LONG MESSAGE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LONG MESSAGE\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LONG MES\n.BYP2250 ANOP\n.*\n         AIF   ('&ALARM' EQ '').BYP2300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP2310\n         DC    A(&ALARM)                ADDRESS OF ALARM NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALARM\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALARM\n.BYP2350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP2800\n         AIF   ('&HELP'(1,1) EQ '''').BYP2810\n         DC    A(&HELP+X'80000000')     ADDRESS OF HELP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR HELP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFH&NDX+X'80000000')  ADDRESS OF GENERATED HELP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE MESSAGE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@LOG     8512-85095-85095-1207-00125-00125-00000-ISPFDYN\n         MACRO\n&NAME    @LOG &MSG,                     MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLOG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLOG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFLOG).BYP20\nLOG      DC    CL8'LOG'                 ISPF KEYWORD\n&SPFLOG SETB   1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,LOG                   GET ADDRESS OF LOG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(LOG)                   BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@SETMSG  8512-85095-85095-1207-00125-00125-00000-ISPFDYN\n         MACRO\n&NAME    @SETMSG &MSG,                  MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFSETMSG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFSETMSG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFSETMSG).BYP20\nSETMSG   DC    CL8'SETMSG'              ISPF KEYWORD\n&SPFSETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,SETMSG                GET ADDRESS OF SETMSG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(SETMSG)                BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBADD   8512-85095-85095-1207-00181-00181-00000-ISPFDYN\n         MACRO\n&NAME    @TBADD &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ORDER,                  ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBADD,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' NE '' AND                                     *\n               '&ORDER' NE 'ORDER').ERR1\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBADD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' NE '' AND NOT &SPFORDER).GENLIT\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBADD).BYP20\nTBADD    DC    CL8'TBADD'               ISPF KEYWORD\n&SPFTBADD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   (&SPFORDER).BYP60\nORDER    DC    CL8'ORDER'               ISPF KEYWORD\n&SPFORDER SETB  1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBADD                 GET ADDRESS OF TBADD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         LA    1,ORDER                  GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBADD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         DC    A(ORDER+X'80000000')     ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'EXPECTED ORDER KEYWORD - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBBOTTO 8512-85095-85095-1207-00254-00254-00000-ISPFDYN\n         MACRO\n&NAME    @TBBOTTO &TABLE,               TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ROWID,                  ROW ID NAME                    *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &POS,                    POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBBOTTOM,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' NE '' AND                                    *\n               '&NOREAD' NE 'NOREAD').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBBOTTOM).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' NE '' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&POS' EQ '').CNT4\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POS' EQ '').CNT5\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBBOTTOM).BYP20\nTBBOTTOM DC    CL8'TBBOTTOM'            ISPF KEYWORD\n&SPFTBBOTTOM SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVE' EQ '').BYP40\n         AIF   ('&SAVE'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVE                 GENERATED SAVE NAME-LIST\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   (&SPFNOREAD).BYP60\nNOREAD   DC    CL8'NOREAD'              GENERATED NOREAD KEYWORD\n&SPFNOREAD SETB 1\n.BYP60   ANOP\n         AIF   ('&POS' EQ '').BYP70\n         AIF   ('&POS'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POS                  GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBBOTTOM              GET ADDRESS OF TBBOTTOM KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP1100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP1110\n         LA    0,&SAVE                  GET ADDRESS OF SAVE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         LA    14,NOREAD                GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n.BYP1350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP1400\n         AIF   ('&POS'(1,1) EQ '''').BYP1410\n         LA    15,&POS                  GET ADDRESS OF POS NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POS\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBBOTTOM)              TBBOTTOM LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP2100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP2110\n         DC    A(&SAVE)                 ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         DC    A(NOREAD)                ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n.BYP2350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP2400\n         AIF   ('&POS'(1,1) EQ '''').BYP2410\n         DC    A(&POS+X'80000000')      ADDRESS OF POS NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POS\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POS\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBCLOSE 8512-85095-85095-1207-00254-00254-00000-ISPFDYN\n         MACRO\n&NAME    @TBCLOSE &TABLE,               TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &ALT,                    ALTERNATE NAME FOR SAVE        *\n               &PER,                    PERCENT                        *\n               &LIB,                    LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&ALT' EQ '').CNT3\n         AIF   ('&ALT'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PER EQ 'N').GENLIT\n         AIF   ('&LIB' EQ '').CNT5\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCLOSE).BYP20\nTBCLOSE  DC    CL8'TBCLOSE'             ISPF KEYWORD\n&SPFTBCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&ALT' EQ '').BYP50\n         AIF   ('&ALT'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&ALT                  GENERATED ALT NAME\n.BYP50   ANOP\n         AIF   (T'&PER NE 'N').BYP60\nSPFP&NDX DC    F'&PER'                  GENERATED PERCENTAGE\n.BYP60   ANOP\n         AIF   ('&LIB' EQ '').BYP70\n         AIF   ('&LIB'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCLOSE               GET ADDRESS OF TBCLOSE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP1200\n         AIF   ('&ALT'(1,1) EQ '''').BYP1210\n         LA    1,&ALT                   GET ADDRESS OF ALT NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ALT\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED ALT\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PER' EQ '').BYP1300\n         AIF   (T'&PER EQ 'N').BYP1310\n         LA    14,&PER                  GET ADDRESS OF PERCENT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PERCENT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PERCT\n.BYP1350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1400\n         AIF   ('&LIB'(1,1) EQ '''').BYP1410\n         LA    15,&LIB                  GET ADDRESS OF LIB NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIB\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCLOSE)               TBCLOSE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP2200\n         AIF   ('&ALT'(1,1) EQ '''').BYP2210\n         DC    A(&ALT)                  ADDRESS OF ALT NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALT\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALT\n.BYP2250 ANOP\n.*\n         AIF   ('&PER' EQ '').BYP2300\n         AIF   (T'&PER EQ 'N').BYP2310\n         DC    A(&PER)                  ADDRESS OF PERCENT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PERCENT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PERCENT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2400\n         AIF   ('&LIB'(1,1) EQ '''').BYP2410\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIB NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIB\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIB\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY OR REPLCOPY EXPECTED AS KEYWORD - FOUND ''&N*\n               EWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBCREAT 8512-85095-85095-1207-00306-00306-00000-ISPFDYN\n         MACRO\n&LBL     @TBCREAT &TABLE,               TABLE NAME                     *\n               &KEYS,                   KEYS NAME LIST                 *\n               &NAME,                   NAMES NAME LIST                *\n               &WRITE,                  WRITE NOWRITE KEYWORD          *\n               &REP,                    REPLACE KEYWORD                *\n               &LIB,                    LIBRARY                        *\n               &SHARE,                  SHARE STATUS                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCREATE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFREPLACE,&SPFSHARE,&SPFWRITE,&SPFNOWRITE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LBL' EQ '').BYP10\n&LBL     DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&REP' NE '' AND '&REP' NE 'REPLACE').ERR2\n         AIF   ('&SHARE' NE '' AND '&SHARE' NE 'SHARE').ERR3\n         AIF   ('&WRITE' NE '' AND '&WRITE' NE 'WRITE' AND             *\n               '&WRITE' NE 'NOWRITE').ERR4\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCREATE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEYS' EQ '').CNT2\n         AIF   ('&KEYS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NAME' EQ '').CNT3\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&WRITE' EQ 'WRITE' AND NOT &SPFWRITE).GENLIT\n         AIF   ('&WRITE' EQ 'NOWRITE' AND NOT &SPFNOWRITE).GENLIT\n.CNT4    ANOP\n         AIF   ('&REP' NE '' AND NOT &SPFREPLACE).GENLIT\n         AIF   ('&LIB' EQ '').CNT6\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&SHARE' NE '' AND NOT &SPFSHARE).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCREATE).BYP20\nTBCREATE DC    CL8'TBCREATE'            ISPF KEYWORD\n&SPFTBCREATE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEYS' EQ '').BYP40\n         AIF   ('&KEYS'(1,1) NE '''').BYP40\nSPFK&NDX DC    C&KEYS                   GENERATED KEYS NAME LIST\n.BYP40   ANOP\n         AIF   ('&NAME' EQ '').BYP50\n         AIF   ('&NAME'(1,1) NE '''').BYP50\nSPFN&NDX DC    C&NAME                   GENERATED NAMELIST\n.BYP50   ANOP\n         AIF   ('&WRITE' EQ '').BYP60\n         AIF   ('&WRITE' NE 'WRITE' OR &SPFWRITE).BYP55\nWRITE    DC    CL8'WRITE'               ISPF KEYWORD\n&SPFWRITE SETB 1\n.BYP55   ANOP\n         AIF   ('&WRITE' NE 'NOWRITE' OR &SPFNOWRITE).BYP60\nNOWRITE  DC    CL8'NOWRITE'             ISPF KEYWORD\n&SPFNOWRITE SETB 1\n.BYP60   ANOP\n         AIF   ('&REP' EQ '').BYP70\n         AIF   (&SPFREPLACE).BYP70\nREPLACE  DC    CL8'REPLACE'             GENERATED REPLACE KEYWORD\n.BYP70   ANOP\n         AIF   ('&LIB' EQ '').BYP80\n         AIF   ('&LIB'(1,1) NE '''').BYP80\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP80   ANOP\n         AIF   ('&SHARE' EQ '').BYP90\n         AIF   (&SPFSHARE).BYP90\nSHARE    DC    CL8'SHARE'               GENERATED SHARE KEYWORD\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCREATE              GET ADDRESS OF TBCREATE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP1100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP1110\n         LA    0,&KEYS                  GET ADDRESS OF KEYS NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEYS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEYS\n.BYP1150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP1200\n         AIF   ('&NAME'(1,1) EQ '''').BYP1210\n         LA    1,&NAME                  GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFN&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&WRITE' EQ '').BYP1300\n         LA    14,&WRITE                GET ADDRESS OF WRITE NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR WRITE\n.BYP1350 ANOP\n.*\n         AIF   ('&REP' EQ '').BYP1400\n         LA    15,REPLACE               GET ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR REPLACE\n.BYP1450 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1500\n         AIF   ('&LIB'(1,1) EQ '''').BYP1510\n         LA    0,&LIB                   GET ADDRESS OF LIB NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIB\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP1600\n         LA    1,SHARE                  GET ADDRESS OF SHARE NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR SHARE\n         AGO   .BYP1650\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCREATE)              TBCREATE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP2100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP2110\n         DC    A(&KEYS)                 ADDRESS OF KEYS NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYS NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEYS\n.BYP2150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP2200\n         AIF   ('&NAME'(1,1) EQ '''').BYP2210\n         DC    A(&NAME)                 ADDRESS OF NAME LIST\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2300\n         DC    A(&WRITE)                ADDRESS OF WRITE KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE\n.BYP2350 ANOP\n.*\n         AIF   ('&REP' EQ '').BYP2400\n         DC    A(REPLACE)               ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR REP\n.BYP2450 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2500\n         AIF   ('&LIB'(1,1) EQ '''').BYP2510\n         DC    A(&LIB)                  ADDRESS OF LIB NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIB\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIB\n.BYP2550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2800\n         DC    A(SHARE+X'80000000')     ADDRESS OF SHARE KEYWORD\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'REPLACE KEYWORD EXPECTED - FOUND ''&REP'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'WRITE/NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBDISPL 8512-85095-85095-1207-00377-00377-00000-ISPFDYN\n         MACRO\n&NAME    @TBDISPL &TABLE,               TABLE NAME                     *\n               &PANEL,                  PANEL NAME                     *\n               &MSG,                    MESSAGE ID                     *\n               &FIELD,                  FIELD FOR CURSOR               *\n               &ROW,                    TABLE ROW NUMBER               *\n               &CSRPOS,                 CURSOR POSITION                *\n               &AUTOSEL,                AUTOSEL INDICATOR              *\n               &CRPROW,                 ROW POINTED TO BY CRP          *\n               &ROWID,                  SPECIAL ROWN NUMBER            *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBDISPL,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFYES,&SPFNO\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&AUTOSEL' NE '' AND '&AUTOSEL' NE 'YES' AND           *\n               '&AUTOSEL' NE 'NO').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBDISPL).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&PANEL' EQ '').CNT2\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&MSG' EQ '').CNT3\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&FIELD' EQ '').CNT4\n         AIF   ('&FIELD'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&ROW' EQ '').CNT5\n         AIF   ('&ROW'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&CSRPOS' EQ '').CNT6\n         AIF   ('&CSRPOS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&AUTOSEL' EQ 'YES' AND NOT &SPFYES).GENLIT\n         AIF   ('&AUTOSEL' EQ 'NO' AND  NOT &SPFNO).GENLIT\n.CNT7    ANOP\n         AIF   ('&CRPROW' EQ '').CNT8\n         AIF   ('&CRPROW'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&ROWID' EQ '').CNT9\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBDISPL).BYP20\nTBDISPL  DC    CL8'TBDISPL'             ISPF KEYWORD\n&SPFTBDISPL SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&PANEL' EQ '').BYP40\n         AIF   ('&PANEL'(1,1) NE '''').BYP40\nSPFP&NDX DC    CL8&PANEL                GENERATED PANEL NAME\n.BYP40   ANOP\n         AIF   ('&MSG' EQ '').BYP50\n         AIF   ('&MSG'(1,1) NE '''').BYP50\nSPFM&NDX DC    CL8&MSG                  GENERATED MSG NAME\n.BYP50   ANOP\n         AIF   ('&FIELD' EQ '').BYP60\n         AIF   ('&FIELD'(1,1) NE '''').BYP60\nSPFF&NDX DC    CL8&FIELD                GENERATED FIELD NAME\n.BYP60   ANOP\n         AIF   ('&ROW' EQ '').BYP70\n         AIF   ('&ROW'(1,1) NE '''').BYP70\nSPFR&NDX DC    CL8&ROW                  GENERATED ROW NAME\n.BYP70   ANOP\n         AIF   ('&CSRPOS' EQ '').BYP80\n         AIF   ('&CSRPOS'(1,1) NE '''').BYP80\nSPFC&NDX DC    CL8&CSRPOS               GENERATED CSRPOS\n.BYP80   ANOP\n         AIF   ('&AUTOSEL' EQ '').BYP90\n         AIF   ('&AUTOSEL' NE 'YES' OR &SPFYES).BYP85\nYES      DC    CL8'YES'                 ISPF KEYWORD\n&SPFYES  SETB  1\n.BYP85   ANOP\n         AIF   ('&AUTOSEL' NE 'NO' OR &SPFNO).BYP90\nNO       DC    CL8'NO'                  ISPF KEYWORD\n&SPFNO   SETB  1\n.BYP90   ANOP\n         AIF   ('&CRPROW' EQ '').BYP100\n         AIF   ('&CRPROW'(1,1) NE '''').BYP100\nSPFW&NDX DC    CL8&CRPROW               GENERATED CRPROW VALUE\n.BYP100  ANOP\n         AIF   ('&ROWID' EQ '').BYP110\n         AIF   ('&ROWID'(1,1) NE '''').BYP110\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VALUE\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBDISPL               GET ADDRESS OF TBDISPL KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP1100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP1110\n         LA    0,&PANEL                 GET ADDRESS OF PANEL NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFP&NDX               GET ADDRESS OF GENERATED PANEL\n.BYP1150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP1200\n         AIF   ('&MSG'(1,1) EQ '''').BYP1210\n         LA    1,&MSG                   GET ADDRESS OF MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFM&NDX               GET ADDRESS OF GENERATED MSG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&FIELD' EQ '').BYP1300\n         AIF   ('&FIELD'(1,1) EQ '''').BYP1310\n         LA    14,&FIELD                GET ADDRESS OF FIELD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR FIELD\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFF&NDX              GET ADDRESS OF GENERATED FIELD\n.BYP1350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP1400\n         AIF   ('&ROW'(1,1) EQ '''').BYP1410\n         LA    15,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP1500\n         AIF   ('&CSRPOS'(1,1) EQ '''').BYP1510\n         LA    0,&CSRPOS                GET ADDRESS OF CSRPOS NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFC&NDX               GET ADDRESS OF GENERATED CSRPOS\n.BYP1550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP1600\n         LA    1,&AUTOSEL               GET ADDRESS OF AUTOSEL NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR AUTOSEL\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&CRPROW' EQ '').BYP1700\n         AIF   ('&CRPROW'(1,1) EQ '''').BYP1710\n         LA    14,&CRPROW               GET ADDRESS OF CRPROW NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CRPROW\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFW&NDX              GET ADDRESS OF GENERATED CRPROW\n.BYP1750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1810\n         LA    15,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1850 ANOP\n         STM   14,15,&TEMP+32           STORE PARAMETERS INTO LIST\n         OI    &TEMP+36,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 10).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 10).BYPVARS\n&SPFVARS SETA  10\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBDISPL)               TBDISPL LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP2100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP2110\n         DC    A(&PANEL)                ADDRESS OF PANEL NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PANEL\n.BYP2150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP2200\n         AIF   ('&MSG'(1,1) EQ '''').BYP2210\n         DC    A(&MSG)                  ADDRESS OF MSG NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2250 ANOP\n.*\n         AIF   ('&FIELD' EQ '').BYP2300\n         AIF   ('&FIELD'(1,1) EQ '''').BYP2310\n         DC    A(&FIELD)                ADDRESS OF FIELD NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR FIELD\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFF&NDX)              ADDRESS OF GENERATED FIELD\n.BYP2350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2400\n         AIF   ('&ROW'(1,1) EQ '''').BYP2410\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP2500\n         AIF   ('&CSRPOS'(1,1) EQ '''').BYP2510\n         DC    A(&CSRPOS)               ADDRESS OF CSRPOS NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFC&NDX)              ADDRESS OF GENERATED CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP2600\n         DC    A(&AUTOSEL)              ADDRESS OF AUTOSEL NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR AUTOSEL\n.BYP2650 ANOP\n.*\n         AIF   ('&CRPROW' EQ '').BYP2700\n         AIF   ('&CRPROW'(1,1) EQ '''').BYP2710\n         DC    A(&CRPROW)               ADDRESS OF CRPROW NAME\n         AGO   .BYP2750\n.BYP2700 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CRPROW\n         AGO   .BYP2750\n.BYP2710 ANOP\n         DC    A(SPFW&NDX)              ADDRESS OF GENERATED CRPROW\n.BYP2750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2810\n         DC    A(&ROWID+X'80000000')    ADDRESS OF ROWID NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ROWID\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED ROWID\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID AUTOSEL VALUE - FOUND ''&AUTOSEL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBERASE 8512-85095-85095-1207-00157-00157-00000-ISPFDYN\n         MACRO\n&NAME    @TBERASE &MEM,                 MEMBER NAME                    *\n               &LIB,                    LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIB' EQ '').CNT2\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBERASE).BYP20\nTBERASE  DC    CL8'TBERASE'             ISPF KEYWORD\n&SPFTBERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBERASE               GET ADDRESS OF TBERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIB' EQ '').BYP140\n         AIF   ('&LIB'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIB                   GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIB' EQ '').BYP240\n         AIF   ('&LIB'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBGET   8512-85095-85095-1207-00254-00254-00000-ISPFDYN\n         MACRO\n&NAME    @TBGET &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ROWID,                  ROW ID NAME                    *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &POS,                    POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBGET,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' NE '' AND                                    *\n               '&NOREAD' NE 'NOREAD').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' NE '' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&POS' EQ '').CNT4\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POS' EQ '').CNT5\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBGET).BYP20\nTBGET DC       CL8'TBGET'               ISPF KEYWORD\n&SPFTBGET SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVE' EQ '').BYP40\n         AIF   ('&SAVE'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVE                 GENERATED SAVE NAME-LIST\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   (&SPFNOREAD).BYP60\nNOREAD   DC    CL8'NOREAD'              GENERATED NOREAD KEYWORD\n&SPFNOREAD SETB 1\n.BYP60   ANOP\n         AIF   ('&POS' EQ '').BYP70\n         AIF   ('&POS'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POS                  GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBGET                 GET ADDRESS OF TBGET KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP1100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP1110\n         LA    0,&SAVE                  GET ADDRESS OF SAVE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         LA    14,NOREAD                GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n.BYP1350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP1400\n         AIF   ('&POS'(1,1) EQ '''').BYP1410\n         LA    15,&POS                  GET ADDRESS OF POS NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POS\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBGET)                 TBGET LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP2100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP2110\n         DC    A(&SAVE)                 ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         DC    A(NOREAD)                ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n.BYP2350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP2400\n         AIF   ('&POS'(1,1) EQ '''').BYP2410\n         DC    A(&POS+X'80000000')      ADDRESS OF POS NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POS\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POS\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBMOD   8512-85095-85095-1207-00181-00181-00000-ISPFDYN\n         MACRO\n&NAME    @TBMOD &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ORDER,                  ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBMOD,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' NE '' AND                                     *\n               '&ORDER' NE 'ORDER').ERR1\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBMOD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' NE '' AND NOT &SPFORDER).GENLIT\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBMOD).BYP20\nTBMOD    DC    CL8'TBMOD'               ISPF KEYWORD\n&SPFTBMOD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   (&SPFORDER).BYP60\nORDER    DC    CL8'ORDER'               ISPF KEYWORD\n&SPFORDER SETB  1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBMOD                 GET ADDRESS OF TBMOD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         LA    1,ORDER                  GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBMOD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         DC    A(ORDER+X'80000000')     ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBOPEN  8512-85095-85095-1207-00222-00222-00000-ISPFDYN\n         MACRO\n&NAME    @TBOPEN &TABLE,                TABLE NAME                     *\n               &WRITE,                  WRITE/NOWRITE PARM             *\n               &LIB,                    LIBRARY                        *\n               &SHARE,                  SHARE OPERAND                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBOPEN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFSHARE,&SPFWRITE,&SPFNOWRITE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&SHARE' NE '' AND '&SHARE' NE 'SHARE').ERR2\n         AIF   ('&WRITE' NE '' AND '&WRITE' NE 'WRITE' AND             *\n               '&WRITE' NE 'NOWRITE').ERR3\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBOPEN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&WRITE' EQ 'WRITE' AND NOT &SPFWRITE).GENLIT\n         AIF   ('&WRITE' EQ 'NOWRITE' AND NOT &SPFNOWRITE).GENLIT\n         AIF   ('&LIB' EQ '').CNT3\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&SHARE' EQ '').CNT4\n         AIF   ('&SHARE'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBOPEN).BYP20\nTBOPEN   DC    CL8'TBOPEN'              ISPF KEYWORD\n&SPFTBOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&WRITE' EQ '').BYP40\n         AIF   ('&WRITE' NE 'WRITE' OR &SPFWRITE).BYP35\nWRITE    DC    CL8'WRITE'               ISPF KEYWORD\n&SPFWRITE SETB 1\n.BYP35   ANOP\n         AIF   ('&WRITE' NE 'NOWRITE' OR &SPFNOWRITE).BYP40\nNOWRITE  DC    CL8'NOWRITE'             ISPF KEYWORD\n&SPFNOWRITE SETB 1\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIB NAME\n.BYP50   ANOP\n         AIF   ('&SHARE' EQ '' OR &SPFSHARE).BYP60\nSHARE    DC    CL8'SHARE'               ISPF KEYWORD\n&SPFSHARE SETB 1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBOPEN                GET ADDRESS OF TBOPEN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP1100\n         LA    0,&WRITE                 GET ADDRESS OF WRITE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR WRITE\n.BYP1150 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1200\n         AIF   ('&LIB'(1,1) EQ '''').BYP1210\n         LA    1,&LIB                   GET ADDRESS OF LIB NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LIB\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&SHARE' EQ '').BYP1300\n         LA    14,SHARE                 GET ADDRESS OF FIELD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR FIELD\n.BYP1350 ANOP\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBOPEN)                TBOPEN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2100\n         DC    A(&WRITE)                ADDRESS OF WRITE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2200\n         AIF   ('&LIB'(1,1) EQ '''').BYP2210\n         DC    A(&LIB)                  ADDRESS OF LIB NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIB\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIB\n.BYP2250 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2300\n         DC    A(SHARE+X'80000000')     ADDRESS OF SHARE NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'WRITE NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBPUT   8512-85095-85095-1207-00181-00181-00000-ISPFDYN\n         MACRO\n&NAME    @TBPUT &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ORDER,                  ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBPUT,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' NE '' AND                                     *\n               '&ORDER' NE 'ORDER').ERR1\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' NE '' AND NOT &SPFORDER).GENLIT\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBPUT).BYP20\nTBPUT    DC    CL8'TBPUT'               ISPF KEYWORD\n&SPFTBPUT SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   (&SPFORDER).BYP60\nORDER    DC    CL8'ORDER'               ISPF KEYWORD\n&SPFORDER SETB  1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBPUT                 GET ADDRESS OF TBPUT KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         LA    1,ORDER                  GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBPUT)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         DC    A(ORDER+X'80000000')     ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBQUERY 8512-85095-85095-1207-00314-00314-00000-ISPFDYN\n         MACRO\n&NAME    @TBQUERY &TABLE,               TABLE NAME                     *\n               &KEY,                    KEY NAME                       *\n               &VAR,                    VAR NAME                       *\n               &ROW,                    NUMBER OF ROWS                 *\n               &KEYN,                   NUMBER OF KEYS                 *\n               &VARN,                   NUMBER OF NAMES                *\n               &CRP,                    CURRENT CRP                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBQUERY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBQUERY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEY' EQ '').CNT2\n         AIF   ('&KEY'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&VAR' EQ '').CNT3\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROW' EQ '').CNT4\n         AIF   ('&ROW'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&KEYN' EQ '').CNT5\n         AIF   ('&KEYN'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&VARN' EQ '').CNT6\n         AIF   ('&VARN'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&CRP' EQ '').CNT7\n         AIF   ('&CRP'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBQUERY).BYP20\nTBQUERY  DC    CL8'TBQUERY'             ISPF KEYWORD\n&SPFTBQUERY SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEY' EQ '').BYP40\n         AIF   ('&KEY'(1,1) NE '''').BYP40\nSPFK&NDX DC    CL8&KEY                  GENERATED KEY VAR NAME\n.BYP40   ANOP\n         AIF   ('&VAR' EQ '').BYP50\n         AIF   ('&VAR'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&VAR                  GENERATED VAR NAME\n.BYP50   ANOP\n         AIF   ('&ROW' EQ '').BYP60\n         AIF   ('&ROW'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROW                  GENERATED ROWNUM VAR\n.BYP60   ANOP\n         AIF   ('&KEYN' EQ '').BYP70\n         AIF   ('&KEYN'(1,1) NE '''').BYP70\nSPFE&NDX DC    CL8&KEYN                 GENERATED KEYNUM VAR\n.BYP70   ANOP\n         AIF   ('&VARN' EQ '').BYP80\n         AIF   ('&VARN'(1,1) NE '''').BYP80\nSPFA&NDX DC    CL8&VARN                 GENERATED VARNUM VAR\n.BYP80   ANOP\n         AIF   ('&CRP' EQ '').BYP90\n         AIF   ('&CRP'(1,1) NE '''').BYP90\nSPFC&NDX DC    CL8&CRP                  GENERATED CRP VAR\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBQUERY               GET ADDRESS OF TBQUERY KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEY' EQ '').BYP1100\n         AIF   ('&KEY'(1,1) EQ '''').BYP1110\n         LA    0,&KEY                   GET ADDRESS OF KEY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEY\n.BYP1150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1200\n         AIF   ('&VAR'(1,1) EQ '''').BYP1210\n         LA    1,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROW' EQ '').BYP1300\n         AIF   ('&ROW'(1,1) EQ '''').BYP1310\n         LA    14,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1350 ANOP\n.*\n         AIF   ('&KEYN' EQ '').BYP1400\n         AIF   ('&KEYN'(1,1) EQ '''').BYP1410\n         LA    15,&KEYN                 GET ADDRESS OF KEYNUM NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR KEYNUM\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFE&NDX              GET ADDRESS OF GENERATED KEY\n.BYP1450 ANOP\n.*\n         AIF   ('&VARN' EQ '').BYP1500\n         AIF   ('&VARN'(1,1) EQ '''').BYP1510\n         LA    0,&VARN                  GET ADDRESS OF VARN NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VARN\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED VARN\n.BYP1550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP1600\n         AIF   ('&CRP'(1,1) EQ '''').BYP1610\n         LA    1,&CRP                   GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CRP\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET ADDRESS OF GENERATED CRP\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBQUERY)               TBQUERY LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEY' EQ '').BYP2100\n         AIF   ('&KEY'(1,1) EQ '''').BYP2110\n         DC    A(&KEY)                  ADDRESS OF KEY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEY NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEY\n.BYP2150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2200\n         AIF   ('&VAR'(1,1) EQ '''').BYP2210\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2300\n         AIF   ('&ROW'(1,1) EQ '''').BYP2310\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2350 ANOP\n.*\n         AIF   ('&KEYN' EQ '').BYP2400\n         AIF   ('&KEYN'(1,1) EQ '''').BYP2410\n         DC    A(&KEYN)                 ADDRESS OF KEYN NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYN\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFE&NDX)              ADDRESS OF GENERATED KEYN\n.BYP2450 ANOP\n.*\n         AIF   ('&VARN' EQ '').BYP2500\n         AIF   ('&VARN'(1,1) EQ '''').BYP2510\n         DC    A(&VARN)                 ADDRESS OF VARN NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VARN\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED VARN\n.BYP2550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP2600\n         AIF   ('&CRP'(1,1) EQ '''').BYP2610\n         DC    A(&CRP+X'80000000')      ADDRESS OF CRP NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED AUTOSE\n.BYP2650 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBSARG  8512-85095-85095-1207-00225-00225-00000-ISPFDYN\n         MACRO\n&NAME    @TBSARG &TABLE,                TABLE NAME                     *\n               &VAR,                    NAME LIST                      *\n               &NEXT,                   NEXT OR PREVIOUS               *\n               &COND,                   NAME COND PAIRS                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSARG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEXT,&SPFPREVIOUS\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEXT' NE '' AND '&NEXT' NE 'NEXT' AND                *\n               '&NEXT' NE 'PREVIOUS').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSARG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&VAR' EQ '').CNT2\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NEXT' EQ 'NEXT' AND NOT &SPFNEXT).GENLIT\n         AIF   ('&NEXT' EQ 'PREVIOUS' AND NOT &SPFPREVIOUS).GENLIT\n         AIF   ('&COND' EQ '').CNT4\n         AIF   ('&COND'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSARG).BYP20\nTBSARG   DC    CL8'TBSARG'              ISPF KEYWORD\n&SPFTBSARG SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&VAR' EQ '').BYP40\n         AIF   ('&VAR'(1,1) NE '''').BYP40\nSPFV&NDX DC    C&VAR                    GENERATED NAMELIST\n.BYP40   ANOP\n         AIF   ('&NEXT' EQ '').BYP50\n         AIF   ('&NEXT' NE 'NEXT' OR &SPFNEXT).BYP45\nNEXT     DC    CL8'NEXT'                ISPF KEYWORD\n&SPFNEXT SETB  1\n.BYP45   ANOP\n         AIF   ('&NEXT' NE 'PREVIOUS' OR &SPFPREVIOUS).BYP50\nPREVIOUS DC    CL8'PREVIOUS'            ISPF KEYWORD\n&SPFPREVIOUS SETB  1\n.BYP50   ANOP\n         AIF   ('&COND' EQ '').BYP60\n         AIF   ('&COND'(1,1) NE '''').BYP60\nSPFC&NDX DC    C&COND                   GENERATED CONDITIONS\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSARG                GET ADDRESS OF TBSARG KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1100\n         AIF   ('&VAR'(1,1) EQ '''').BYP1110\n         LA    0,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1150 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP1200\n         LA    1,&NEXT                  GET ADDRESS OF KEYWORD\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&COND' EQ '').BYP1300\n         AIF   ('&COND'(1,1) EQ '''').BYP1310\n         LA    14,&COND                 GET ADDRESS OF COND NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1350 ANOP\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSARG)                TBSARG LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2100\n         AIF   ('&VAR'(1,1) EQ '''').BYP2110\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2150 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP2200\n         DC    A(&NEXT)                 ISPF KEYWORD\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n.BYP2250 ANOP\n.*\n         AIF   ('&COND' EQ '').BYP2300\n         AIF   ('&COND'(1,1) EQ '''').BYP2310\n         DC    A(&COND+X'80000000')     ADDRESS OF COND NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEXT/PREVIOUS KEYWORD EXPECTED - FOUND ''&NEXT'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBSAVE  8512-85095-85095-1207-00253-00253-00000-ISPFDYN\n         MACRO\n&NAME    @TBSAVE &TABLE,                TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &ALT,                    ALTERNATE NAME FOR SAVE        *\n               &PER,                    PERCENT                        *\n               &LIB,                    LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSAVE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSAVE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&ALT' EQ '').CNT3\n         AIF   ('&ALT'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PER EQ 'N').GENLIT\n         AIF   ('&LIB' EQ '').CNT5\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSAVE).BYP20\nTBSAVE   DC    CL8'TBSAVE'              ISPF KEYWORD\n&SPFTBSAVE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&ALT' EQ '').BYP50\n         AIF   ('&ALT'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&ALT                  GENERATED ALT NAME\n.BYP50   ANOP\n         AIF   (T'&PER NE 'N').BYP60\nSPFP&NDX DC    F'&PER'                  GENERATED PERCENTAGE\n.BYP60   ANOP\n         AIF   ('&LIB' EQ '').BYP70\n         AIF   ('&LIB'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSAVE                GET ADDRESS OF TBSAVE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP1200\n         AIF   ('&ALT'(1,1) EQ '''').BYP1210\n         LA    1,&ALT                   GET ADDRESS OF ALT NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ALT\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED ALT\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PER' EQ '').BYP1300\n         AIF   (T'&PER EQ 'N').BYP1310\n         LA    14,&PER                  GET ADDRESS OF PERCENT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PERCENT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PERCT\n.BYP1350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1400\n         AIF   ('&LIB'(1,1) EQ '''').BYP1410\n         LA    15,&LIB                  GET ADDRESS OF LIB NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIB\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSAVE)                TBSAVE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP2200\n         AIF   ('&ALT'(1,1) EQ '''').BYP2210\n         DC    A(&ALT)                  ADDRESS OF ALT NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALT\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALT\n.BYP2250 ANOP\n.*\n         AIF   ('&PER' EQ '').BYP2300\n         AIF   (T'&PER EQ 'N').BYP2310\n         DC    A(&PER)                  ADDRESS OF PERCENT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PERCENT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PERCENT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2400\n         AIF   ('&LIB'(1,1) EQ '''').BYP2410\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIB NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIB\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIB\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY/REPLCOPY EXPECTED - FOUND ''&NEWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBSCAN  8512-85095-85095-1207-00340-00340-00000-ISPFDYN\n         MACRO\n&NAME    @TBSCAN &TABLE,                TABLE NAME                     *\n               &ARG,                    ARGLIST                        *\n               &VAR,                    EXTENSION VAR LIST             *\n               &ROWID,                  SAVE THE ROWID                 *\n               &NEXT,                   NEXT OR PREVIOUS               *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &POS,                    POSITION OF CRP                *\n               &COND,                   CONDITIONS FOR SEARCH          *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSCAN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEXT,&SPFPREVIOUS,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEXT' NE '' AND '&NEXT' NE 'NEXT' AND                *\n               '&NEXT' NE 'PREVIOUS').ERR2\n         AIF   ('&NOREAD' NE '' AND '&NOREAD' NE 'NOREAD').ERR3\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSCAN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&ARG' EQ '').CNT2\n         AIF   ('&ARG'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&VAR' EQ '').CNT3\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&NEXT' EQ 'NEXT' AND NOT &SPFNEXT).GENLIT\n         AIF   ('&NEXT' EQ 'PREVIOUS' AND NOT &SPFPREVIOUS).GENLIT\n         AIF   ('&NOREAD' EQ 'NOREAD' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&POS' EQ '').CNT8\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&COND' EQ '').CNT9\n         AIF   ('&COND'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSCAN).BYP20\nTBSCAN   DC    CL8'TBSCAN'              ISPF KEYWORD\n&SPFTBSCAN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&ARG' EQ '').BYP40\n         AIF   ('&ARG'(1,1) NE '''').BYP40\nSPFA&NDX DC    C&ARG                    GENERATED ARG-LIST\n.BYP40   ANOP\n         AIF   ('&VAR' EQ '').BYP50\n         AIF   ('&VAR'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&VAR                  GENERATED VARIABLE NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   ('&NEXT' EQ '').BYP70\n         AIF   ('&NEXT' NE 'NEXT' OR &SPFNEXT).BYP65\nNEXT     DC    CL8'NEXT'                ISPF KEYWORD\n&SPFNEXT SETB  1\n.BYP65   ANOP\n         AIF   ('&NEXT' NE 'PREVIOUS' OR &SPFPREVIOUS).BYP70\nPREVIOUS DC    CL8'PREVIOUS'            ISPF KEYWORD\n&SPFPREVIOUS SETB  1\n.BYP70   ANOP\n         AIF   ('&NOREAD' EQ '' OR &SPFNOREAD).BYP80\nNOREAD   DC    CL8'NOREAD'              GENERATED CSRPOS\n.BYP80   ANOP\n         AIF   ('&POS' EQ '').BYP100\n         AIF   ('&POS'(1,1) NE '''').BYP100\nSPFP&NDX DC    CL8&POS                  GENERATED POSITION VAR\n.BYP100  ANOP\n         AIF   ('&COND' EQ '').BYP110\n         AIF   ('&COND'(1,1) NE '''').BYP110\nSPFC&NDX DC    C&COND                   GENERATED COND LIST\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSCAN                GET ADDRESS OF TBSCAN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&ARG' EQ '').BYP1100\n         AIF   ('&ARG'(1,1) EQ '''').BYP1110\n         LA    0,&ARG                   GET ADDRESS OF ARG LIST\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR ARG\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED ARG\n.BYP1150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1200\n         AIF   ('&VAR'(1,1) EQ '''').BYP1210\n         LA    1,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP1400\n         LA    15,&NEXT                 GET ADDRESS OF KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         LA    0,&NOREAD                GET ADDRESS OF KEYWORD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n.BYP1550 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP1600\n         AIF   ('&POS'(1,1) EQ '''').BYP1610\n         LA    1,&POS                   GET ADDRESS OF POS VAR NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR POS VAR\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFP&NDX               GET GENERATED POS VAR NAME\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&COND' EQ '').BYP1700\n         AIF   ('&COND'(1,1) EQ '''').BYP1710\n         LA    14,&COND                 GET ADDRESS OF COND NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1750 ANOP\n.*\n         ST    14,&TEMP+32              STORE PARAMETERS INTO LIST\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSCAN)                TBSCAN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&ARG' EQ '').BYP2100\n         AIF   ('&ARG'(1,1) EQ '''').BYP2110\n         DC    A(&ARG)                  ADDRESS OF ARG NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ARG NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ARG\n.BYP2150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2200\n         AIF   ('&VAR'(1,1) EQ '''').BYP2210\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP2400\n         DC    A(&NEXT)                 ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         DC    A(&NOREAD)               ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP2600\n         AIF   ('&POS'(1,1) EQ '''').BYP2610\n         DC    A(&POS)                  ADDRESS OF POS NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY PARM\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFP&NDX)              GENERATED POS VAR NAME\n.BYP2650 ANOP\n.*\n         AIF   ('&COND' EQ '').BYP2800\n         AIF   ('&COND'(1,1) EQ '''').BYP2810\n         DC    A(&COND+X'80000000')     ADDRESS OF COND NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEXT/PREVIOUS KEYWORDS EXPECTED - FOUND ''&NEXT'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=@TBSKIP  8512-85095-85095-1207-00308-00308-00000-ISPFDYN\n         MACRO\n&NAME    @TBSKIP &TABLE,                TABLE NAME                     *\n               &NUM,                    NUMBER                         *\n               &VAR,                    VARIABLE FOR EXT VARS          *\n               &ROWID,                  VARIABLE NAME FOR ROWID        *\n               &ROW,                    ROWID TO GET                   *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &CRP,                    CRP VARIABLE                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSKIP,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNOREAD,&SPFF1\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' NE '' AND '&NOREAD' NE 'NOREAD').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSKIP).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   (T'&NUM EQ 'N').GENLIT\n         AIF   ('&NUM' EQ '' AND NOT &SPFF1).GENLIT\n         AIF   ('&VAR' EQ '').CNT3\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   (T'&ROW EQ 'N').CNT5\n         AIF   ('&NOREAD' EQ 'NOREAD' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&CRP' EQ '').CNT8\n         AIF   ('&CRP'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSKIP).BYP20\nTBSKIP   DC    CL8'TBSKIP'              ISPF KEYWORD\n&SPFTBSKIP SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   (T'&NUM NE 'N').BYP40\nSPFN&NDX DC    F'&NUM'                  GENERATED NUMBER\n.BYP40   ANOP\n         AIF   ('&NUM' NE '' OR &SPFF1).BYP45\nSPFF1    DC    F'1'\n&SPFF1   SETB  1\n.BYP45   ANOP\n         AIF   ('&VAR' EQ '').BYP50\n         AIF   ('&VAR'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&VAR                  GENERATED EXT VAR NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   (T'&ROW NE 'N').BYP70\nSPFR&NDX DC    F'&ROW'                  GENERATED ROWID\n.BYP70   ANOP\n         AIF   ('&NOREAD' NE 'NOREAD' OR &SPFNOREAD).BYP80\nNOREAD   DC    CL8'NOREAD'              ISPF KEYWORD\n&SPFNOREAD SETB 1\n.BYP80   ANOP\n         AIF   ('&CRP' EQ '').BYP100\n         AIF   ('&CRP'(1,1) NE '''').BYP100\nSPFC&NDX DC    CL8&CRP                  GENERATED CRP VARIABLE NAME\n.BYP100  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSKIP                GET ADDRESS OF TBSKIP KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NUM' EQ '').BYP1100\n         AIF   (T'&NUM EQ 'N').BYP1110\n         LA    0,&NUM                   GET ADDRESS OF NUM FIELD\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFF1                  GET DUMMY PARM FOR NUM\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFN&NDX               GET ADDRESS OF GENERATED NUM\n.BYP1150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1200\n         AIF   ('&VAR'(1,1) EQ '''').BYP1210\n         LA    1,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP1400\n         AIF   (T'&ROW EQ 'N').BYP1410\n         LA    15,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         LA    0,&NOREAD                GET ADDRESS OF NOREAD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOREAD\n.BYP1550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP1600\n         AIF   ('&CRP'(1,1) EQ '''').BYP1610\n         LA    1,&AUTOSEL               GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR AUTOSEL\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET DUMMY PARM FOR AUTOSEL\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSKIP)                TBSKIP LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NUM' EQ '').BYP2100\n         AIF   ('&NUM'(1,1) EQ '''').BYP2110\n         DC    A(&NUM)                  ADDRESS OF NUM NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFF1)                 DUMMY PARM FOR NUM NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NUM\n.BYP2150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2200\n         AIF   ('&VAR'(1,1) EQ '''').BYP2210\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2400\n         AIF   ('&ROW'(1,1) EQ '''').BYP2410\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         DC    A(&NOREAD)               ADDRESS OF NOREAD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP2800\n         AIF   ('&CRP'(1,1) EQ '''').BYP2810\n         DC    A(&CRP+X'80000000')      ADDRESS OF CRP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED CRP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=ATEND    8512-86097-86097-1148-00031-00031-00000-ISPFDYN\n         MACRO\n         ATEND  &USRNAME\n         COPY  STRCGBLS\n         LCLB  &ATGEND            ATEND_GENNED                23009.\n         LCLB  &TDLGEND           TDL_GENNED                  23011.\n         LCLB  &FINREQD           FIN_LABEL_REQD              23014.\n         LCLC  &INFO              INFO                        23017.\n         STRCTRAC  ATEND                                      23019.\n         AIF   (&STRCNST GT &STRCNSL).FIN                     23021.\n         STRCVERF  DO,&USRNAME                                23025.\n         AIF   (&STRCERR).FIN                                 23030.\n&INFO    SETC '&STRCINF(&STRCNST)'                            23034.\n&ATGEND  SETB  ('&INFO'(6,1) EQ '1')                          23035.\n         AIF   (NOT &ATGEND).M041                             23037.\n         MNOTE 8,' STRC2301 MORE THAN ONE \"ATEND\" IN BLOCK'   23039.\n         MEXIT\n.M041    ANOP\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          23042.\n&TDLGEND SETB  ('&INFO'(5,1) EQ '1')                          23043.\n&FINREQD SETB  ('&INFO'(8,1) EQ '1')                          23045.\n         AIF   (&TDLGEND).M051                                23047.\n         STRCTDL\n         AGO   .M055                                          23051.\n.M051    B     &STRCPFX.FIN\n&FINREQD SETB  1                                              23053.\n.M055    AIF   (NOT &STRCEND(&STRCNST)).M062                  23056.\n&STRCPFX.END  DS    0H\n&STRCEND(&STRCNST)  SETB  0                                   23059.\n.M062    ANOP\n&STRCINF(&STRCNST)  SETC  '&INFO'(1,4)'11'.'&INFO'(7,1)'&FINREQD'\n.FIN     MEND\n./ ADD NAME=ATEXIT   8512-86097-86097-1148-00004-00004-00000-ISPFDYN\n         MACRO\n         ATEXIT  &USRNAME\n         ONEXIT  &USRNAME\n         MEND\n./ ADD NAME=BLEND    8512-86097-86097-1148-00042-00042-00000-ISPFDYN\n         MACRO\n         BLEND  &USRNAME,&RETURN=,&LINK=14,&RESTORE=,&RC=     43001.\n         COPY  STRCGBLS\n         LCLA  &I                 I                           43007.\n         LCLC  &X\n         STRCTRAC  BLEND\n         AIF   (&STRCNST LE &STRCNSL).M014                    43011.\n         STRCPOP\n         AGO   .M058                                          43014.\n.M014    AIF   (&STRCNST NE 0).M018                           43015.\n         MNOTE 8,' STRC4301 NO BLOCKS ACTIVE--\"BLEND\" IGNORED'\n         AGO   .M058                                          43018.\n.M018    ANOP\n&I       SETA  &STRCNST                                       43019.\n         AIF   ('&USRNAME' EQ '').M033                        43020.\n.M022    AIF   (&I LE 0 OR '&STRCNAM(&I)' EQ '&USRNAME').M027\n&I       SETA  &I-1                                           43024.\n         AGO   .M022                                          43025.\n.M027    AIF   (&I NE 0).M033                                 43027.\n         MNOTE 8,' STRC4302 NO BLOCK ACTIVE NAMED &USRNAME--\"BLEND\"'\n         MNOTE 0,'                IGNORED'                    43029.\n         MEXIT\n.M033    ANOP\n&X       SETC  '&STRCTYP(&STRCNST)'                           43034.\n         AIF   ('&X' NE 'IF').M039                            43036.\n         FI    &USRNAME                                       43037.\n         AGO   .M058                                          43038.\n.M039    AIF   ('&X' NE 'DO').M042                            43039.\n         OD    &USRNAME                                       43040.\n         AGO   .M058                                          43041.\n.M042    AIF   ('&X' NE 'CASE').M045                          43042.\n         ESAC  &USRNAME                                       43043.\n         AGO   .M058                                          43044.\n.M045    AIF   ('&X' NE 'DOCASE').M048                        43045.\n         ESACOD  &USRNAME                                     43046.\n         AGO   .M058                                          43047.\n.M048    AIF   ('&X' NE 'PROC').M052                          43048.\n         CORP  &USRNAME,RETURN=&RETURN,LINK=&LINK,                     *\n               RESTORE=&RESTORE,RC=&RC                        43049.\n         AGO   .M058                                          43051.\n.M052    STRCPOP\n.M058    MEND\n./ ADD NAME=BLOCK    8512-86097-86097-1148-00028-00028-00000-ISPFDYN\n         MACRO\n&USRNAME BLOCK\n         COPY  STRCGBLS\n         LCLC  &LABEL             LABEL                       41004.\n         STRCTRAC  BLOCK                                      41007.\n&USRNAME STRCPUSH  TYPEVAL=BLOCK                              41009.\n         AIF   (&STRCERR).FIN                                 41013.\n&LABEL   SETC  '&USRNAME'                                     41017.\n.*       CALL  BLOCK_TRACE_COUNTERS                           41018.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M056              41033.\n         AIF   (NOT &STRCDBC).M042                            41035.\n&LABEL   LH    1,&STRCPFX.BLC\n&LABEL   SETC  ''                                             41039.\n         LA    1,1(1)\n         STH   1,&STRCPFX.BLC\n.M042    ANOP\n&LABEL   B     &STRCPFX.GO\n&LABEL   SETC  '&STRCPFX.GO'                                  41045.\n         AIF   (NOT &STRCDBN).M051                            41047.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M051    AIF   (NOT &STRCDBC).M055                            41052.\n&STRCPFX.BLC  DC  H'0' BLOCK COUNT\n.M055    ANOP\n.M056    ANOP\n.*       CORP  BLOCK_TRACE_COUNTERS                           41057.\n         AIF   ('&LABEL' EQ '').FIN                           41022.\n&LABEL   DS    0H\n.FIN     MEND\n./ ADD NAME=BROWSE   8512-85095-85095-1207-00284-00284-00000-ISPFDYN\n         MACRO\n&NAME    BROWSE &P1,                                                   *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &DATASET=,               TSO DSNAME                     *\n               &VOLUME=,                VOLUME                         *\n               &PASSWORD=,              PASSWORD                       *\n               &PANEL=,                 PANEL ID                       *\n               &DATAID=,                DATA ID                        *\n               &MEMBER=,                MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFBROWSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @BROWSE &P1,&P2,&P3,&P4,&P5,&P6,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFBROWSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATASET' EQ '').CNT0\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT0    AIF   ('&VOLUME' EQ '').CNT1\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASSWORD' EQ '').CNT2\n         AIF   ('&PASSWORD'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFBROWSE).BYP20\nBROWSE   DC    CL8'BROWSE'              BROWSE LITERAL FOR ISPF\n&SPFBROWSE SETB 1\n.BYP20   ANOP\n         AIF   ('&DATASET' EQ '').BYP30\n         AIF   ('&DATASET'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DATASET             BROWSE THIS DATASET NAME\n.BYP30   ANOP\n         AIF   ('&VOLUME' EQ '').BYP40\n         AIF   ('&VOLUME'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOLUME               GENERATED VOLUME\n.BYP40   ANOP\n         AIF   ('&PASSWORD' EQ '').BYP50\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASSWORD             GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,BROWSE                GET ADDRESS OF BROWSE KEYWORD\n         AIF   ('&DATASET' EQ '').BYP85\n         AIF   ('&DATASET'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DATASET              GET ADDRESS OF DATASET NAME\n         AGO   .BYP90\n.BYP85   ANOP\n         LA    15,SPFNULLC              DUMMY PARM FOR DATASET NAME\n.BYP90   ANOP\n         AIF   ('&VOLUME' EQ '').BYP100\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP110\n         LA    0,&VOLUME                GET ADDRESS OF VOLUME\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOL\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n.BYP120  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP140\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASSWORD              GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&DATAID' EQ '').BYP172\n         AIF   ('&DATAID'(1,1) EQ '''').BYP162\n         LA    15,&DATAID               GET ADDRESS OF DATA ID\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFA&NDX              GET ADDRESS OF GENNED DATAID\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DATA ID\n.BYP182  ANOP\n         AIF   ('&MEMBER' EQ '').BYP174\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP164\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENNED MEMBER\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n.BYP184  ANOP\n         STM   14,0,&TEMP+16            STORE AS FIFTH PARM\n         OI    &TEMP+24,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 7).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 7).BYPVARS\n&SPFVARS SETA  7\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(BROWSE)                BROWSE LITERAL\n         AIF   ('&DATASET' EQ '').BYP285\n         AIF   ('&DATASET'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DATASET\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DATASET)              ADDRESS OF DATASET NAME\n         AGO   .BYP290\n.BYP285  ANOP\n         DC    A(SPFNULLC)              DUMMY  DATASET NAME\n.BYP290  ANOP\n         AIF   ('&VOLUME' EQ '').BYP200\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP210\n         DC    A(&VOLUME)               ADDRESS OF VOLUME\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLUME\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLUME\n.BYP220  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP240\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASSWORD\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASSWORD)             ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP184\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=CASE     8512-86097-86097-1148-00333-00333-00000-ISPFDYN\n         MACRO\n&USRNAME CASE  &REL=,&MASK=                                   33001.\n         COPY  STRCGBLS\n         LCLA  &CASECTR           CASE_COUNTER                33011.\n         LCLA  &COMPLB#           COMP_LABEL_NO               33013.\n         LCLA  &I                 I                           33015.\n         LCLB  &CLABREQ           CASE_LABEL_REQD             33017.\n         LCLB  &XRANGA            INDEX_RANGE_ASSURED         33019.\n         LCLB  &EQUAL             EQUAL_TEST_OUTSTANDING      33022.\n         LCLB  &RANGE             RANGE_TEST_OUTSTANDING      33026.\n         LCLB  &MISCFND           MISC_FOUND                  33031.\n         LCLB  &MULTOF4           MULTIPLESOF4                33032.\n         LCLB  &UNEXP             UNEXPECTED_OPERANDS_FOUND   33034.\n         LCLC  &CFORMAT           CASE_FORMAT                 33038.\n         LCLC  &MAMAPFX           MAMA_BLOCK_PREFIX           33040.\n         LCLC  &XADDR             INDEX_ADDR                  33041.\n         LCLC  &LABEL             LABEL                       33042.\n         LCLC  &COMPLAB           COMP_LABEL                  33043.\n         LCLC  &NXTCASE           NEXT_CASE                   33044.\n         LCLC  &XLENG             INDEX_LENGTH                33046.\n         LCLC  &X                 X                           33161.\n         LCLA  &MOM               MOM                         33162.\n         LCLC  &INSERT            INSERT                      33276.\n         LCLA  &BASE              BASE                        33363.\n         LCLA  &OP                OP                          33364.\n         LCLA  &LIMIT             LIMIT                       33365.\n         LCLA  &GUESS             GUESS                       33440.\n         LCLA  &OPCOUNT           OP_COUNT                    33496.\n         STRCTRAC  CASE\n.*       CALL  CASE_POSITION_CHECK                            33050.\n&STRCERR SETB  0                                              33134.\n         AIF   ('&STRCTYP(&STRCNST)' EQ 'DOCASE').M155        33135.\n         MNOTE 8,' STRC3301 \"CASE\" NOT IMMEDIATE DAUGHTER OF \"DOCASE\"'\n&STRCERR SETB  1                                              33138.\n         AIF   (&STRCNST LE 1).M155                           33139.\n         AIF   ('&STRCTYP(&STRCNST-1)' NE 'DOCASE').M145      33140.\n         MNOTE 8,' STRC3302 ASSUMING \"BLEND\" OMITTED--INSERTED'\n         BLEND\n&STRCERR SETB  0                                              33144.\n         AGO   .M155                                          33143.\n.M145    AIF   (&STRCNST LE 2).M155                           33146.\n         AIF   ('&STRCTYP(&STRCNST-2)' NE 'DOCASE').M155      33147.\n         MNOTE 8,' STRC3303 ASSUMING TWO \"BLENDS\" OMITTED--INSERTED'\n         BLEND\n         BLEND\n&STRCERR SETB  0                                              33152.\n.M155    ANOP\n.*       CORP  CASE_POSITION_CHECK                            33156.\n         AIF   (NOT &STRCERR).M058                            33053.\n         MNOTE 8,' STRC3304 \"CASE\" TREATED AS \"BLOCK\" MACRO'  33055.\n&USRNAME BLOCK\n         MEXIT\n.M058    ANOP\n&USRNAME STRCPUSH  TYPEVAL=CASE                               33059.\n         AIF   (&STRCERR).FIN                                 33063.\n         AIF   ('&REL&MASK' EQ '').M070                       33067.\n         MNOTE 8,' STRC3310 REL= OR MASK= NOT IN PARENTHESES--IGNORED'\n.M070    ANOP\n.*       CALL  CASE_GET_DOCASE_INFO                           33071.\n&MOM     SETA  &STRCNST-1                                     33164.\n&CASECTR SETA  &STRCOP1(&MOM)                                 33165.\n         AIF   ('&SYSLIST(1)' EQ 'MISC').M169                 33166.\n&CASECTR SETA  &CASECTR+1                                     33168.\n.M169    ANOP\n&XADDR   SETC  '&STRCOP2(&MOM)'                               33170.\n&CFORMAT SETC  '&STRCOP3(&MOM)'                               33171.\n&XLENG   SETC  '&STRCOP4(&MOM)'                               33172.\n&X       SETC  '&STRCINF(&MOM)'                               33173.\n&CLABREQ SETB  ('&X'(1,1) EQ '1')                             33174.\n&MISCFND SETB  ('&X'(2,1) EQ '1')                             33175.\n&MULTOF4 SETB  ('&X'(3,1) EQ '1')                             33176.\n&UNEXP   SETB  ('&X'(4,1) EQ '1')                             33177.\n&XRANGA  SETB  ('&X'(5,1) EQ '1')                             33178.\n&MAMAPFX SETC  '$&STRCBL#(&MOM)'                              33179.\n.*       CORP  CASE_GET_DOCASE_INFO                           33180.\n         AIF   ('&USRNAME' EQ '').M081                        33075.\n&USRNAME DS    0H\n.M081    AIF   ('&SYSLIST(1)' NE 'MISC').M086                 33082.\n.*       CALL  CASE_MISC_PROCESS                              33084.\n         AIF   (&CLABREQ).M546                                33541.\n         B     &MAMAPFX.C&CASECTR\n.M546    AIF   (NOT &MISCFND).M551                            33547.\n         MNOTE 8,' STRC3311 MULTIPLE MISC CASES IN DOCASE--THIS BLOCK'\n         MNOTE 0,'          IS DEAD CODE'                     33550.\n         AGO   .M557                                          33551.\n.M551    ANOP\n&LABEL   SETC  '&MAMAPFX.MSC'                                 33552.\n&MISCFND SETB  1                                              33556.\n.M557    AIF   (NOT &XRANGA).M562                             33558.\n         MNOTE 8,' STRC3308 \"DOCASE ...,ONLY\" INVALID WITH MISC'\n&XRANGA  SETB  0                                              33561.\n.M562    ANOP\n.*       CORP  CASE_MISC_PROCESS                              33563.\n         AGO   .M117                                          33086.\n.M086    AIF   ('&CFORMAT' EQ 'SIMPLE').M103                  33087.\n         AIF   ('&CFORMAT' EQ 'CONDTEST').M103                33087.\n.* THESE BRANCHES HAVE BEEN REVERSED FROM SOURCE;  SEE COMMENT\n.* ON LINE 33103. OF SOURCE.\n         AIF   (&STRCGNL GT &STRCGNX).M117                    33089.\n.*       CALL  CASE_PROCESS_COMPARE_OPERANDS                  33091.\n&I       SETA  1                                              33191.\n&COMPLB# SETA  &STRCCL#(&STRCGNL)                             33192.\n&EQUAL   SETB  0                                              33194.\n&RANGE   SETB  0                                              33194.\n.M195    AIF   (&I GT N'&SYSLIST).M241                        33195.\n         AIF   ('&CFORMAT' EQ 'SPARSE').M204                  33197.\n         AIF   ('&CFORMAT' EQ 'CHARCOMP').M204                33197.\n         AIF   (N'&SYSLIST(&I) GT 1).M200                     33197.\n         AIF   (T'&SYSLIST(&I) NE 'N').M204                   33197.\n         AIF   (&SYSLIST(&I) GE 0 AND &SYSLIST(&I) LE 255).M239\n         AGO   .M204                                          33197.\n.M200    AIF   (T'&SYSLIST(&I,1) NE 'N').M204                 33200.\n         AIF   (&SYSLIST(&I,1) LT 0 OR &SYSLIST(&I,1) GT 255).M204\n         AIF   (T'&SYSLIST(&I,2) NE 'N').M204                 33202.\n         AIF   (&SYSLIST(&I,2) GE 0 AND &SYSLIST(&I,2) LE 255).M239\n.M204    AIF   (NOT &EQUAL).M212                              33205.\n&LABEL   SETC  '&STRCPFX.BEG'                                 33207.\n         BE    &LABEL\n&EQUAL   SETB  0                                              33211.\n         AGO   .M228                                          33212.\n.M212    AIF   (NOT &RANGE).M220                              33213.\n&LABEL   SETC  '&STRCPFX.BEG'                                 33215.\n         BNH   &LABEL\n&RANGE   SETB  0                                              33219.\n         AGO   .M228                                          33220.\n.M220    AIF   (NOT &CLABREQ).M225                            33221.\n&COMPLAB SETC  '&MAMAPFX.C&COMPLB#'                           33223.\n.M225    ANOP\n&UNEXP   SETB  1                                              33226.\n.M228    ANOP\n.*       CALL  CASE_GEN_COMPARE                               33229.\n         AIF   ('&XADDR' NE '').M282                          33278.\n&COMPLAB LA    0,&SYSLIST(&I,1)\n         CR    1,0\n         AGO   .M304                                          33282.\n.M282    AIF   ('&CFORMAT' NE 'CHARCOMP').M300                33283.\n&INSERT  SETC  ''                                             33285.\n         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '=').M297            33286.\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '''').M291           33288.\n&INSERT  SETC  '=C'                                           33290.\n         AGO   .M297                                          33291.\n.M291    AIF    ('&SYSLIST(&I,1)'(K'&SYSLIST(&I,1),1) NE '''').M297\n&INSERT  SETC  '='                                            33294.\n.M297    ANOP\n&COMPLAB CLC   &XADDR.(&XLENG),&INSERT&SYSLIST(&I,1)\n         AGO   .M304                                          33300.\n.M300    ANOP\n&COMPLAB CLI   &XADDR,&SYSLIST(&I,1)\n.M304    AIF   ('&COMPLAB' EQ '').M310                        33305.\n&COMPLAB SETC  ''                                             33307.\n&COMPLB# SETA  &COMPLB#+1                                     33308.\n.M310    AIF   (N'&SYSLIST(&I) GT 1).M313                     33310.\n&EQUAL   SETB  1                                              33312.\n         AGO   .M353                                          33313.\n.M313    AIF   (N'&SYSLIST(&I) LE 2).M318                     33314.\n         MNOTE 8,' STRC3312 &SYSLIST(&I) INVALID--'           33316.\n         MNOTE 0,'                ONLY FIRST TWO SUBOPERANDS PROCESSED'\n.M318    ANOP\n&RANGE   SETB  1                                              33319.\n&COMPLAB SETC  '&MAMAPFX.C&COMPLB#'                           33321.\n         BL    &COMPLAB\n         AIF   ('&XADDR' NE '').M329                          33325.\n         LA    0,&SYSLIST(&I,2)\n         CR    1,0\n         AGO   .M353                                          33329.\n.M329    AIF   ('&CFORMAT' NE 'CHARCOMP').M349                33330.\n&INSERT  SETC  ''                                             33332.\n         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '=').M346            33335.\n         AIF   ('&SYSLIST(&I,2)'(1,1) NE '''').M340           33337.\n&INSERT  SETC  '=C'                                           33339.\n         AGO   .M346                                          33322\n.M340    AIF   ('&SYSLIST(&I,2)'(K'&SYSLIST(&I,2),1) NE '''').M346\n&INSERT  SETC  '='                                            33343.\n.M346    CLC   &XADDR.(&XLENG),&INSERT&SYSLIST(&I,2)\n         AGO   .M353                                          33349.\n.M349    CLI   &XADDR,&SYSLIST(&I,2)\n.M353    ANOP\n.*       CORP  CASE_GEN_COMPARE                               33354.\n.M239    ANOP\n&I       SETA  &I+1                                           33240.\n         AGO   .M195                                          33241.\n.M241    AIF   (NOT &EQUAL).M250                              33245.\n         BNE   &MAMAPFX.C&COMPLB#\n         AGO   .M257                                          33250.\n.M250    AIF   (NOT &RANGE).M257                              33251.\n         BH    &COMPLAB\n.M257    ANOP\n&STRCCL#(&STRCGNL)  SETA  &COMPLB#                            33258.\n.*       CORP  CASE_PROCESS_COMPARE_OPERANDS                  33260.\n         AIF   ('&CFORMAT' NE 'GENERAL').M117                 33096.\n.*       CALL  CASE_PROCESS_VECTOR_OPERANDS                   33098.\n&BASE    SETA  ((&STRCGNL-1)*256)+1                           33367.\n         AIF   (N'&SYSLIST LE 0).M426                         33369.\n&I       SETA  1                                              33371.\n.M372    AIF   (&I GT N'&SYSLIST).M424                        33372.\n         AIF   (T'&SYSLIST(&I,1) NE 'N').M422                 33374.\n&OP      SETA  &SYSLIST(&I,1)                                 33376.\n         AIF   (&OP GT 255 OR &OP LT 0).M422                  33377.\n  AIF  (T'&SYSLIST(&I,2) NE 'O' AND T'&SYSLIST(&I,2) NE 'N').M422\n         AIF   (N'&SYSLIST(&I) LE 2).M385                     33381.\n         MNOTE 8,' STRC3312 &SYSLIST(&I) INVALID--'           33383.\n         MNOTE 0,'                ONLY FIRST TWO SUBOPERANDS PROCESSED'\n.M385    AIF   (T'&SYSLIST(&I,2) NE 'N').M397                 33386.\n&LIMIT   SETA  &SYSLIST(&I,2)                                 33388.\n         AIF   (&LIMIT GT 255 OR &LIMIT LT 0).M422            33389.\n         AIF   (&LIMIT GE &OP).M399                           33391.\n         MNOTE 8,' STRC3305 &SYSLIST(&I) INVALID--&OP ASSUMED'\n&LIMIT   SETA  &OP                                            33395.\n         AGO   .M399                                          33397.\n.M397    ANOP\n&LIMIT   SETA  &OP                                            33398.\n.M399    ANOP\n         AIF   (&LIMIT LE &STRCMCV(&STRCGNL)).M403            33400.\n&STRCMCV(&STRCGNL)  SETA  &LIMIT                              33402.\n.M403    ANOP\n.M404    AIF   (&OP GT &LIMIT).M417                           33404.\n&STRCOCC(&BASE+&OP) SETB  1                                   33406.\n&MAMAPFX.G&OP  DS  0H\n         AIF   (&OP EQ &CASECTR).M411                         33408.\n&UNEXP   SETB  1                                              33410.\n.M411    AIF   (&OP/4*4 EQ &OP).M415                          33412.\n&MULTOF4 SETB  0                                              33414.\n.M415    ANOP\n&OP      SETA  &OP+1                                          33416.\n         AGO   .M404                                          33417.\n.M417    ANOP\n.M422    ANOP\n&I       SETA  &I+1                                           33423.\n         AGO   .M372                                          33424.\n.M424    AGO   .M431                                          33426.\n.M426    ANOP\n.*       CALL  CASE_ASSUMED_VECTOR_CASE                       33427.\n&GUESS   SETA  &STRCMCV(&STRCGNL)+1                           33442.\n         AIF   (&GUESS GT 0).M448                             33444.\n&GUESS   SETA  1                                              33446.\n.M448    ANOP\n&STRCMCV(&STRCGNL)  SETA  &GUESS                              33448.\n&STRCOCC(&BASE+&GUESS)  SETB  1                               33449.\n&MAMAPFX.G&GUESS  DS  0H\n         AIF   (NOT &UNEXP).M456                              33451.\n         MNOTE 4,' STRC3306 EARLIER UNEXPECTED OPERAND IMPLIES THIS'\n         MNOTE 0,'          TO BE CASE &GUESS'                33454.\n.M456    ANOP\n.*       CORP  CASE_ASSUMED_VECTOR_CASE                       33457.\n.M431    ANOP\n.*       CORP  CASE_PROCESS_VECTOR_OPERANDS                   33432.\n         AGO   .M117                                          33103.\n.M103    ANOP\n.*       CALL  CASE_SET_NAMES                                 33104.\n         AIF   (NOT &CLABREQ).M468                            33465.\n&LABEL   SETC  '&MAMAPFX.C&CASECTR'                           33467.\n.M468    ANOP\n&I       SETA  &CASECTR+1                                     33469.\n&NXTCASE SETC  '&MAMAPFX.C&I'                                 33470.\n.*       CORP  CASE_SET_NAMES                                 33471.\n         AIF   ('&CFORMAT' NE 'SIMPLE').M112                  33108.\n.*       CALL  CASE_BCT_GEN                                   33110.\n&LABEL   BCT   1,&NXTCASE\n&LABEL   SETC  ''                                             33477.\n         AIF   (T'&SYSLIST(1) EQ 'O').M491                    33478.\n         AIF   (T'&SYSLIST(1) NE 'N').M487                    33480.\n         AIF   (&SYSLIST(1) EQ &CASECTR).M491                 33482.\n         MNOTE 8,' STRC3307 OPERAND INVALID VALUE ON SIMPLE CASE &CASEC*\n               TR'                                            33485.\n         AGO   .M491                                          33487.\n.M487    MNOTE 8,' STRC3309 OPERAND MUST BE SELF-DEFINING TERM OR'\n         MNOTE 0,'          OMITTED ON SIMPLE CASE &CASECTR'  33488.\n.M491    ANOP\n.*       CORP  CASE_BCT_GEN                                   33492.\n         AGO   .M117                                          33112.\n.M112    ANOP\n.*       CALL  CASE_CONDTEST_GEN                              33113.\n&STRCUBL SETC  '&NXTCASE'                                     33499.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 33500.\n&STRCUFC SETB  1                                              33501.\n&STRCFLU SETB  0                                              33502.\n&STRCFRX SETA  1                                              33503.\n&STRCLSX SETA  N'&SYSLIST                                     33504.\n&STRCUID SETC  'T'                                            33506.\n&LABEL   STRCCEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     *\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        *\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     *\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    *\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    *\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    *\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    *\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    *\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    *\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    *\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    *\n               &SYSLIST(45),&SYSLIST(46),&SYSLIST(47),&SYSLIST(48),    *\n               &SYSLIST(49),&SYSLIST(50)                      33507.\n         AIF   (&STRCFLU).M529                                33527.\n&LABEL   SETC  ''                                             33531.\n         AGO   .M532                                          33532.\n.M529    ANOP\n&LABEL   SETC  '&STRCPFX.BEG'                                 33529.\n.M532    ANOP\n.*       CORP  CASE_CONDTEST_GEN                              33533.\n.M117    ANOP\n.*       CALL  CASE_TRACE_COUNTERS                            33118.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M601              33568.\n         AIF   (NOT &STRCDBC).M587                            33570.\n&LABEL   LH    1,&STRCPFX.CTR\n&LABEL   SETC  ''                                             33574.\n         LA    1,1(1)\n         STH   1,&STRCPFX.CTR\n         AIF   ('&SYSLIST(1)' EQ 'MISC' OR &CASECTR GT 255).M579\n&STRCHXI SETA  &CASECTR                                       33581.\n         STRCXHEX\n         MNOTE *,' STRC3313 CASE DEBUG ID=X''&STRCHXO'''      33583.\n         MVI   &MAMAPFX.LSC,X'&STRCHXO' CASE NUMBER FOR TRACING\n         AGO   .M586                                          33586.\n.M579    MVI   &MAMAPFX.LSC,X'FF'\n.M586    ANOP\n.M587    ANOP\n&LABEL   B     &STRCPFX.GO\n&LABEL   SETC  '&STRCPFX.GO'                                  33589.\n         AIF   (NOT &STRCDBN).M596                            33592.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M596    AIF   (NOT &STRCDBC).M601                            33597.\n&STRCPFX.CTR  DC  H'0' CASE COUNT\n.M601    ANOP\n.*       CORP  CASE_TRACE_COU NTER                            33602.\n.*       CALL  CASE_UPDATE_INFO                               33121.\n&MOM     SETA  &STRCNST-1                                     33609.\n&STRCINF(&MOM) SETC  '1&MISCFND&MULTOF4&UNEXP&XRANGA'         33611.\n&STRCOP1(&MOM)  SETC  '&CASECTR'                              33613.\n.*       CORP  CASE_UPDATE_INFO                               33616.\n         AIF   ('&LABEL' EQ '').M126                          33123.\n&LABEL   DS    0H\n.M126    ANOP\n.FIN     MEND\n./ ADD NAME=CASEND   8512-86097-86097-1148-00004-00004-00000-ISPFDYN\n         MACRO\n         CASEND  &USRNAME\n         ESAC   &USRNAME\n         MEND\n./ ADD NAME=CONTROL  8512-85095-85095-1207-00975-00975-00000-ISPFDYN\n         MACRO\n&NAME    CONTROL &TYPE,                 CONTROL TYPE                   *\n               &MODE,                   MODE WITHIN TYPE               *\n               &LINENUM,                LINENUM OF LINE START FUNC     *\n               &MF=I,                   MACRO FORMAT                   *\n               &LOAD=ISPLINK            ADDRESS OF ISPF MODULE\n.*\n.*********************************************************************\n.*       GLOBALS\n.*********************************************************************\n.*\n         GBLB  &SPFCONTROL,&SPFDISPLAY,&SPFNONDISPL\n         GBLB  &SPFLOCK,&SPFLINE,&SPFSM,&SPFREFRESH\n         GBLB  &SPFENTER,&SPFEND,&SPFCANCEL,&SPFRETURN\n         GBLB  &SPFNULLF,&SPFVAR\n         GBLB  &SPFERRORS,&SPFSPLIT,&SPFNOCMD\n         GBLB  &SPFSAVE,&SPFRESTORE\n         GBLB  &SPFENABLE,&SPFDISABLE,&SPFDEBUG\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYPTEMA\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYPTEMB\n.BYPTEMA ANOP\n&TEMP    SETC  '&MF(2)'\n.BYPTEMB ANOP\n         AIF   ('&NAME' EQ '').BYP0\n&NAME    DS    0H\n.BYP0    ANOP\n.*\n.*********************************************************************\n.*       GENERAL EDITS\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.*********************************************************************\n.*       EDIT THE &TYPE FIELD\n.*********************************************************************\n.*\n         AIF   ('&TYPE' EQ 'DISPLAY').DISP\n         AIF   ('&TYPE' EQ 'NONDISPL').NOND\n         AIF   ('&TYPE' EQ 'ERRORS').ERRO\n         AIF   ('&TYPE' EQ 'SPLIT').SPLI\n         AIF   ('&TYPE' EQ 'NOCMD').NOCM\n         AGO   .ERR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY\n.*********************************************************************\n.*\n.DISP    ANOP\n         AIF   ('&MODE' EQ 'LOCK').DISPLOCK\n         AIF   ('&MODE' EQ 'LINE').DISPLINE\n         AIF   ('&MODE' EQ 'SM').DISPSM\n         AIF   ('&MODE' EQ 'REFRESH').DISPREFR\n         AIF   ('&MODE' EQ 'SAVE').DISPSAVE\n         AIF   ('&MODE' EQ 'RESTORE').DISPREST\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LOCK\n.*********************************************************************\n.*\n.DISPLOCK ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN1\n         AIF   (NOT &SPFDISPLAY).GEN1\n         AIF   (NOT &SPFLOCK).GEN1\n         AGO   .BYPLIT1\n.GEN1    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP10   ANOP\n         AIF   (&SPFDISPLAY).BYP20\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP20   ANOP\n         AIF   (&SPFLOCK).BYP30\n&SPFLOCK SETB  1\nLOCK     DC    CL8'LOCK'                CONTROL KEYWORD FOR ISPF\n.BYP30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT1 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LOCK   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,LOCK                   GET ADDRESS OF LOCK OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n.BYPVAR1 ANOP\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LOCK   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(LOCK+X'80000000')      ADDRESS OF LOCK OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LINE\n.*********************************************************************\n.*\n.DISPLINE ANOP\n         AIF   (NOT &SPFCONTROL).GEN2\n         AIF   (NOT &SPFDISPLAY).GEN2\n         AIF   (NOT &SPFLINE).GEN2\n         AIF   (T'&LINENUM EQ 'N').GEN2\n         AIF   ('&LINENUM' EQ '' AND NOT &SPFNULLF).GEN2\n         AGO   .BYPLIT2\n.GEN2    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP110\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP110  ANOP\n         AIF   (&SPFDISPLAY).BYP120\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP120  ANOP\n         AIF   (&SPFLINE).BYP130\n&SPFLINE SETB  1\nLINE     DC    CL8'LINE'                CONTROL KEYWORD FOR ISPF\n.BYP130  ANOP\n         AIF   (T'&LINENUM NE 'N').BYP140\nSPFL&NDX DC    F'&LINENUM'              GENERATED SCREEN LINE NUMBER\n         AGO   .BYP150\n.BYP140  ANOP\n         AIF   ('&LINENUM' NE '').BYP150\n         AIF   (&SPFNULLF).BYP150\n&SPFNULLF SETB 1\nSPFNULLF DC    F'0'                     ISPF DUMMY FULLWORD GENERATED\n.BYP150  ANOP\nSPF&NDX  DS    0H\n.BYPLIT2 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LINE   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF2\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,LINE                   GET ADDRESS OF LINE OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP160\n         AIF   ('&LINENUM' EQ '').BYP170\n         LA    1,&LINENUM               GET ADDRESS OF LINE NUMBER\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LINE #\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLF               GET DUMMY FULLWORD FOR LINE #\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+12,X'80'           SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR2\n         AIF   (&SPFVARC LT 4).ERRVAR\n.BYVAR2  AIF   (&SPFVARS GE 4).BYPVAR1\n&SPFVARS SETA  4\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LINE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF2  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(LINE)                  ADDRESS OF LINE OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP185\n         AIF   ('&LINENUM' EQ '').BYP190\n         DC    A(&LINENUM+X'80000000')  ADDRESS OF LINE NUMBER\n         AGO   .BYP195\n.BYP185  ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LINE #\n         AGO   .BYP195\n.BYP190  ANOP\n         DC    A(SPFNULLF+X'80000000')  DUMMY FULLWORD FOR LINE #\n.BYP195  ANOP\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SM\n.*********************************************************************\n.*\n.DISPSM  ANOP\n         AIF   (NOT &SPFCONTROL).GEN3\n         AIF   (NOT &SPFDISPLAY).GEN3\n         AIF   (NOT &SPFSM).GEN3\n         AIF   (T'&LINENUM EQ 'N').GEN3\n         AIF   ('&LINENUM' EQ '' AND NOT &SPFNULLF).GEN3\n         AGO   .BYPLIT3\n.GEN3    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP210\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP210  ANOP\n         AIF   (&SPFDISPLAY).BYP220\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP220  ANOP\n         AIF   (&SPFSM).BYP230\n&SPFSM   SETB  1\nSM       DC    CL8'SM'                  CONTROL KEYWORD FOR ISPF\n.BYP230  ANOP\n         AIF   (T'&LINENUM NE 'N').BYP240\nSPFL&NDX DC    F'&LINENUM'              GENERATED SCREEN LINE NUMBER\n         AGO   .BYP250\n.BYP240  ANOP\n         AIF   ('&LINENUM' NE '').BYP250\n         AIF   (&SPFNULLF).BYP250\n&SPFNULLF SETB 1\nSPFNULLF DC    F'0'                     ISPF DUMMY FULLWORD GENERATED\n.BYP250  ANOP\nSPF&NDX  DS    0H\n.BYPLIT3 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SM     CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF3\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,SM                     GET ADDRESS OF SM OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP260\n         AIF   ('&LINENUM' EQ '').BYP270\n         LA    1,&LINENUM               GET ADDRESS OF LINE NUMBER\n         AGO   .BYP280\n.BYP260  ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LINE #\n         AGO   .BYP280\n.BYP270  ANOP\n         LA    1,SPFNULLF               GET DUMMY FULLWORD FOR LINE #\n.BYP280  ANOP\n         STM   14,1,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+12,X'80'           SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR3\n         AIF   (&SPFVARC LT 4).ERRVAR\n.BYVAR3  AIF   (&SPFVARS GE 4).BYPVAR1\n&SPFVARS SETA  4\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SM     CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF3  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(SM)                    ADDRESS OF SM OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP285\n         AIF   ('&LINENUM' EQ '').BYP290\n         DC    A(&LINENUM+X'80000000')  ADDRESS OF LINE NUMBER\n         AGO   .BYP295\n.BYP285  ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LINE #\n         AGO   .BYP295\n.BYP290  ANOP\n         DC    A(SPFNULLF+X'80000000')  DUMMY FULLWORD FOR LINE #\n.BYP295  ANOP\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY REFRESH\n.*********************************************************************\n.*\n.DISPREFR ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN4\n         AIF   (NOT &SPFDISPLAY).GEN4\n         AIF   (NOT &SPFREFRESH).GEN4\n         AGO   .BYPLIT4\n.GEN4    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP310\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP310  ANOP\n         AIF   (&SPFDISPLAY).BYP320\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP320  ANOP\n         AIF   (&SPFREFRESH).BYP330\n&SPFREFRESH SETB 1\nREFRESH  DC    CL8'REFRESH'             CONTROL KEYWORD FOR ISPF\n.BYP330  ANOP\nSPF&NDX  DS    0H\n.BYPLIT4 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY REFRESH CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF4\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,REFRESH                GET ADDRESS OF REFRESH OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR4\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR4  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY REFRESH CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF4  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(REFRESH+X'80000000')   ADDRESS OF REFRESH OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SAVE\n.*********************************************************************\n.*\n.DISPSAVE ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN5\n         AIF   (NOT &SPFDISPLAY).GEN5\n         AIF   (NOT &SPFSAVE).GEN5\n         AGO   .BYPLIT5\n.GEN5    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP410\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP410  ANOP\n         AIF   (&SPFDISPLAY).BYP420\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP420  ANOP\n         AIF   (&SPFSAVE).BYP430\n&SPFSAVE SETB  1\nSAVE     DC    CL8'SAVE'                CONTROL KEYWORD FOR ISPF\n.BYP430  ANOP\nSPF&NDX  DS    0H\n.BYPLIT5 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SAVE   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF5\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,SAVE                   GET ADDRESS OF SAVE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR5\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR5  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SAVE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF5  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(SAVE+X'80000000')      ADDRESS OF SAVE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY RESTORE\n.*********************************************************************\n.*\n.DISPREST ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN6\n         AIF   (NOT &SPFDISPLAY).GEN6\n         AIF   (NOT &SPFRESTORE).GEN6\n         AGO   .BYPLIT6\n.GEN6    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP510\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP510  ANOP\n         AIF   (&SPFDISPLAY).BYP520\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP520  ANOP\n         AIF   (&SPFRESTORE).BYP530\n&SPFRESTORE SETB 1\nRESTORE  DC    CL8'RESTORE'             CONTROL KEYWORD FOR ISPF\n.BYP530  ANOP\nSPF&NDX  DS    0H\n.BYPLIT6 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY RESTORE CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF6\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,RESTORE                GET ADDRESS OF RESTORE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR6\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR6  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY RESTORE CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF6  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(RESTORE+X'80000000')   ADDRESS OF RESTORE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL\n.*********************************************************************\n.*\n.NOND    ANOP\n         AIF   ('&MODE' EQ '').NONDENTE\n         AIF   ('&MODE' EQ 'ENTER').NONDENTE\n         AIF   ('&MODE' EQ 'END').NONDEND\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL ENTER\n.*********************************************************************\n.*\n.NONDENTE ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN10\n         AIF   (NOT &SPFNONDISPL).GEN10\n         AIF   (NOT &SPFENTER).GEN10\n         AGO   .BYPLIT10\n.GEN10   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYA10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYA10   ANOP\n         AIF   (&SPFNONDISPL).BYA20\n&SPFNONDISPL SETB 1\nNONDISPL DC    CL8'NONDISPL'            CONTROL KEYWORD FOR ISPF\n.BYA20   ANOP\n         AIF   (&SPFENTER).BYA30\n&SPFENTER SETB 1\nENTER    DC    CL8'ENTER'               CONTROL KEYWORD FOR ISPF\n.BYA30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT10 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL ENTER CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').NONMF1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,NONDISPL              GET ADDRESS OF NONDISPL\n         LA    0,ENTER                  GET ADDRESS OF ENTER OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BAVAR1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BAVAR1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISP ENTER  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.NONMF1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(NONDISPL)              ADDRESS OF NONDISPL OPERAND\n         DC    A(ENTER+X'80000000')     ADDRESS OF ENTER OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL END\n.*********************************************************************\n.*\n.NONDEND ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN20\n         AIF   (NOT &SPFNONDISPL).GEN20\n         AIF   (NOT &SPFEND).GEN20\n         AGO   .BYPLIT20\n.GEN20   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYB10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYB10   ANOP\n         AIF   (&SPFNONDISPL).BYB20\n&SPFNONDISPL SETB 1\nNONDISPL DC    CL8'NONDISPL'            CONTROL KEYWORD FOR ISPF\n.BYB20   ANOP\n         AIF   (&SPFEND).BYB30\n&SPFEND  SETB  1\nEND      DC    CL8'END'                 CONTROL KEYWORD FOR ISPF\n.BYB30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT20 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL END   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').NONMF2\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,NONDISPL              GET ADDRESS OF NONDISPL\n         LA    0,END                    GET ADDRESS OF END OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BAVAR2\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BAVAR2  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISP END    CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.NONMF2  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(NONDISPL)              ADDRESS OF NONDISPL OPERAND\n         DC    A(END+X'80000000')       ADDRESS OF END OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS\n.*********************************************************************\n.*\n.ERRO    ANOP\n         AIF   ('&MODE' EQ '').ERROCANC\n         AIF   ('&MODE' EQ 'CANCEL').ERROCANC\n         AIF   ('&MODE' EQ 'RETURN').ERRORETU\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL\n.*********************************************************************\n.*\n.ERROCANC ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN30\n         AIF   (NOT &SPFERRORS).GEN30\n         AIF   (NOT &SPFCANCEL).GEN30\n         AGO   .BYPLIT30\n.GEN30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYC10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYC10   ANOP\n         AIF   (&SPFERRORS).BYC20\n&SPFERRORS SETB 1\nERRORS   DC    CL8'ERRORS'              CONTROL KEYWORD FOR ISPF\n.BYC20   ANOP\n         AIF   (&SPFCANCEL).BYC30\n&SPFCANCEL SETB 1\nCANCEL   DC    CL8'CANCEL'              CONTROL KEYWORD FOR ISPF\n.BYC30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMF1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,ERRORS                GET ADDRESS OF ERRORS OPERAND\n         LA    0,CANCEL                 GET ADDRESS OF CANCEL OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAR1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAR1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMF1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n         DC    A(CANCEL+X'80000000')    ADDRESS OF CANCEL OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS RETURN\n.*********************************************************************\n.*\n.ERRORETU ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN40\n         AIF   (NOT &SPFERRORS).GEN40\n         AIF   (NOT &SPFRETURN).GEN40\n         AGO   .BYPLIT40\n.GEN40   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYB40\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYB40   ANOP\n         AIF   (&SPFERRORS).BYB50\n&SPFERRORS SETB 1\nERRORS   DC    CL8'ERRORS'              CONTROL KEYWORD FOR ISPF\n.BYB50   ANOP\n         AIF   (&SPFRETURN).BYB60\n&SPFRETURN SETB 1\nRETURN   DC    CL8'RETURN'              CONTROL KEYWORD FOR ISPF\n.BYB60   ANOP\nSPF&NDX  DS    0H\n.BYPLIT40 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMF2\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,ERRORS                GET ADDRESS OF ERRORS OPERAND\n         LA    0,RETURN                 GET ADDRESS OF RETURN OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAR2\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAR2  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMF2  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n         DC    A(RETURN+X'80000000')    ADDRESS OF RETURN OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT\n.*********************************************************************\n.*\n.SPLI    ANOP\n         AIF   ('&MODE' EQ '').SPLIENAB\n         AIF   ('&MODE' EQ 'ENABLE').SPLIENAB\n         AIF   ('&MODE' EQ 'DISABLE').SPLIDISA\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE\n.*********************************************************************\n.*\n.SPLIENAB ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEC30\n         AIF   (NOT &SPFSPLIT).GEC30\n         AIF   (NOT &SPFENABLE).GEC30\n         AGO   .BYPLIC30\n.GEC30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BCC10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BCC10   ANOP\n         AIF   (&SPFSPLIT).BCC20\n&SPFSPLIT SETB  1\nSPLIT    DC    CL8'SPLIT'               CONTROL KEYWORD FOR ISPF\n.BCC20   ANOP\n         AIF   (&SPFENABLE).BCC30\n&SPFENABLE SETB 1\nENABLE   DC    CL8'ENABLE'              CONTROL KEYWORD FOR ISPF\n.BCC30   ANOP\nSPF&NDX  DS    0H\n.BYPLIC30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMC1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,SPLIT                 GET ADDRESS OF SPLIT OPERAND\n         LA    0,ENABLE                 GET ADDRESS OF ENABLE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAC1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAC1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMC1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(SPLIT)                 ADDRESS OF SPLIT OPERAND\n         DC    A(ENABLE+X'80000000')    ADDRESS OF ENABLE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT DISABLE\n.*********************************************************************\n.*\n.SPLIDISA ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GED30\n         AIF   (NOT &SPFSPLIT).GED30\n         AIF   (NOT &SPFDISABLE).GED30\n         AGO   .BYPLID30\n.GED30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BCD10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BCD10   ANOP\n         AIF   (&SPFSPLIT).BCD20\n&SPFSPLIT SETB  1\nSPLIT    DC    CL8'SPLIT'               CONTROL KEYWORD FOR ISPF\n.BCD20   ANOP\n         AIF   (&SPFDISABLE).BCD30\n&SPFDISABLE SETB 1\nDISABLE  DC    CL8'DISABLE'             CONTROL KEYWORD FOR ISPF\n.BCD30   ANOP\nSPF&NDX  DS    0H\n.BYPLID30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT DISABLE  CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMD1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,SPLIT                 GET ADDRESS OF SPLIT OPERAND\n         LA    0,DISABLE                GET ADDRESS OF DISABLE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAD1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAD1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT DISABLE  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMD1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(SPLIT)                 ADDRESS OF SPLIT OPERAND\n         DC    A(DISABLE+X'80000000')   ADDRESS OF DISABLE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NOCMD\n.*********************************************************************\n.*\n.NOCM    ANOP\n         AIF   ('&MODE' EQ '').NOCMD\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NOCMD\n.*********************************************************************\n.*\n.NOCMD   ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEE30\n         AIF   (NOT &SPFNOCMD).GEE30\n         AGO   .BYPE30\n.GEE30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BCE10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BCE10   ANOP\n         AIF   (&SPFNOCMD).BCE20\n&SPFNOCMD SETB  1\nNOCMD    DC    CL8'NOCMD'               CONTROL KEYWORD FOR ISPF\n.BCE20   ANOP\nSPF&NDX  DS    0H\n.BYPE30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NOCMD          CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRME1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,NOCMD                 GET ADDRESS OF NOCMD OPERAND\n         STM   14,15,&TEMP              STORE PARAMETER LIST\n         OI    &TEMP+4,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAE1\n         AIF   (&SPFVARC LT 2).ERRVAR\n.BBVAE1  AIF   (&SPFVARS GE 2).BYPVAR1\n&SPFVARS SETA  2\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRME1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(NOCMD+X'80000000')     ADDRESS OF NOCMD OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       MACRO ERROR MESSAGES\n.*********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID SERVICE FOR CONTROL - FOUND ''&TYPE'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MODE FOR &TYPE SERVICE - FOUND ''&MODE'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'LINENUM NOT ALLOWED FOR &TYPE - FOUND ''&LINENUM'''\n         MEXIT\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=CORP     8512-86097-86097-1148-00294-00294-00000-ISPFDYN\n         MACRO\n&USRNAME CORP  &PROCNAM,&RETURN=,&LINK=14,&RESTORE=,&RC=      83001.\n         COPY  STRCGBLS\n         LCLA  &FRSAREG           FIRST_SAVEAREA_REG          83013.\n         LCLA  &OFFSET0           OFFSET_TO_GPR0              83016.\n         LCLB  &ANYSAVD           ANY_REGS_SAVED              83019.\n         LCLB  &DYNAMSA           DYNAMIC_SAVEAREA            83021.\n         LCLB  &BCKREQD           BCK_AREA_REQD               83023.\n         LCLB  &FRKNOWN           FIRST_VALUE_KNOWN           83024.\n         LCLB  &FRRESTK           FIRST_RESTORE_VALUE_KNOWN   83026.\n         LCLB  &OSLINK            OS_LINKAGE                  83028.\n         LCLC  &LABEL             LABEL                       83031.\n         LCLC  &OFF0STR           GPR0_OFFSET_STRING          83032.\n         LCLC  &FIRSTSV           FIRST_REG_SAVED             83033.\n         LCLC  &LASTSV            LAST_REG_SAVED              83033.\n         LCLC  &MULT              MULT                        83035.\n         LCLC  &COMMA2            COMMA2                      83035.\n         LCLC  &LOCPTR            LOCAL_POINTER               83037.\n         LCLC  &OSPTR             OS_POINTER                  83037.\n         LCLC  &RSTAREA           RESTORE_AREA                83037.\n         LCLC  &RCREG             RC_REG                      83040.\n         LCLC  &SVLENG            SAVE_LENGTH                 83042.\n         LCLC  &REST1,&REST2      REST1,REST2                 83043.\n         LCLC  &IDBYTE            PROC_ID_BYTE                83044.\n         LCLC  &PVDEBUG           PREVIOUS_DEBUG_VECTOR       83046.\n         LCLC  &X                 X                           83150.\n         LCLC  &CBOFF             CRP_BCK_OFFSET              83225.\n         LCLC  &SVOFF             SV_OFFSET                   83227.\n         LCLA  &OFFSET            OFFSET               83321. 83391.\n         LCLA  &I                 I                    83321. 83391.\n         LCLC  &LSTAREA           LAST_AREA                   83439.\n         LCLC  &FWDPTR            FWD_PTR                     83441.\n         LCLC  &TARGET            TARGET                      83442.\n         STRCTRAC  CORP                                       83050.\n         AIF   (&STRCNST LE &STRCNSL).M056                    83052.\n         STRCPOP\n         MEXIT\n.M056    STRCVERF  PROC,&PROCNAM                              83057.\n         AIF   (&STRCERR).FIN                                 83069.\n&LABEL   SETC  '&USRNAME'                                     83071.\n.*       CALL  CORP_GET_PROC_INFO                             83074.\n&FIRSTSV SETC  '&STRCOP1(&STRCNST)'                           83152.\n&LASTSV  SETC  '&STRCOP2(&STRCNST)'                           83153.\n&X       SETC  '&STRCINF(&STRCNST)'(1,2)                      83154.\n&OFFSET0 SETA  &X-50                                          83155.\n         AIF   (&OFFSET0 GE 0).M160                           83156.\n&OFF0STR SETC  '-&OFFSET0'                                    83158.\n         AGO   .M162                                          83160.\n.M160    ANOP\n&OFF0STR SETC  '+&OFFSET0'                                    83161.\n.M162    ANOP\n&X       SETC  '&STRCINF(&STRCNST)'                           83154.\n&OSLINK  SETB  ('&X'(3,1) EQ '1')                             83163.\n&DYNAMSA SETB  ('&X'(4,1) EQ '1')                             83164.\n&FRKNOWN SETB  ('&X'(5,1) EQ '1')                             83165.\n&SVLENG  SETC  '&STRCOP3(&STRCNST)'                           83166.\n&PVDEBUG SETC  '&STRCOP4(&STRCNST)'                           83167.\n&ANYSAVD SETB  ('&FIRSTSV' NE '')                             83168.\n&IDBYTE  SETC  '&X'(6,2)                                      83169.\n         AIF   ('&X'(8,1) EQ '0').M173                        83170.\n&STRCPFX SETC  '$P&IDBYTE'                                    83172.\n         AGO   .M175                                          83173.\n.M173    ANOP\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          83174.\n.M175    AIF   (&FRKNOWN).M177                                83176.\n&FRSAREG SETA  14                                             83180.\n         AGO   .M181                                          83181.\n.M177    ANOP\n&FRSAREG SETA  &FIRSTSV                                       83178.\n.M181    ANOP\n.*       CORP  CORP_GET_PROC_INFO                             83182.\n.*       CALL  CORP_SET_RESTORE_RANGE                         83079.\n&REST1   SETC  '&FIRSTSV'                                     83191.\n&REST2   SETC  '&LASTSV'                                      83192.\n&MULT    SETC  'M'                                            83193.\n&COMMA2  SETC  ','                                            83194.\n&FRRESTK SETB  (&FRKNOWN)                                     83195.\n         AIF   (&ANYSAVD).M203                                83198.\n         AIF   ('&RESTORE' EQ '').M211                        83200.\n         MNOTE 8,' STRC8301 NO REGISTERS SAVED--RESTORE IGNORED'\n         AGO   .M211                                          83203.\n.M203    AIF   ('&RESTORE' EQ '').M211                        83204.\n&REST1   SETC  '&RESTORE(1)'                                  83206.\n&REST2   SETC  '&RESTORE(2)'                                  83207.\n&FRRESTK SETB  (T'&RESTORE(1) EQ 'N')                         83208.\n.M211    AIF   ('&REST2' NE '').M215                          83212.\n&MULT    SETC  ''                                             83214.\n&COMMA2  SETC  ''                                             83214.\n.M215    ANOP\n&RSTAREA SETC  'SV'                                           83216.\n.*       CORP  CORP_SET_RESTORE_RANGE                         83217.\n.*       CALL  CORP_GEN_EXIT_LABEL                            83082.\n         AIF   (NOT &STRCXIT(&STRCNST)).M507                  83492.\n         AIF   ('&LABEL' EQ '').M497                          83494.\n&LABEL   DS    0H\n.M497    ANOP\n&LABEL   SETC  '&STRCPFX.XIT'                                 83498.\n         AIF   ('&STRCXSV' NE '').M502                        83499.\n&STRCXSV SETC  '0'                                            83501.\n.M502    MNOTE &STRCXSV,' STRC8303 ONE OR MORE EXIT''S REFERENCE THIS P*\n               OINT'                                          83503.\n         MNOTE &STRCXSV,'          VIA &LABEL'                83505.\n&STRCXIT(&STRCNST)  SETB  0                                   83505.\n.M507    ANOP\n.*       CORP  CORP_GEN_EXIT_LABEL                            83508.\n         AIF   (NOT &OSLINK).M095                             83085.\n.*       CALL  CORP_RESTORE_REG13                             83087.\n         AIF   (NOT &DYNAMSA).M268                            83264.\n&LABEL   LR    1,13\n&LABEL   SETC  ''                                             83267.\n.M268    AIF   (&STRCSFP AND '&IDBYTE' EQ '01').M271          83269.\n&LABEL   L     13,4(13)\n         AGO   .M274                                          83274.\n.M271    ANOP\n&LABEL   L     13,$FIRSTSV+4\n.M274    ANOP\n&LABEL   SETC  ''                                             83275.\n.*       CORP  CORP_RESTORE_REG13                             83276.\n         AIF   (NOT &DYNAMSA).M100                            83090.\n.*       CALL  CORP_FREE_DYNAM_SAVEAREA                       83092.\n&LABEL   LA    0,(&SVLENG)*4\n&LABEL   SETC  ''                                             83384.\n*        FREEMAIN  R,LV=(0),A=(1)\n         FREEMAIN  R,LV=(0),A=(1)                             83385.\n.*       CORP  CORP_FREE_DYNAM_SAVEAREA                       83386.\n         AGO   .M100                                          83095.\n.M095    ANOP\n.*       CALL  CORP_DEBUGGING_STORES                          83096.\n         AIF   (NOT &STRCDCV).M256                            83230.\n         AIF   (NOT &STRCDST).M236                            83232.\n&SVOFF   SETC  '+12'                                          83234.\n&CBOFF   SETC  '+12'                                          83235.\n         AGO   .M244                                          83236.\n.M236    ANOP\n&CBOFF   SETC  ''                                             83237.\n         AIF   (&STRCDPC).M239                                83238.\n&SVOFF   SETC  ''                                             83242.\n         AGO   .M243                                          83243.\n.M239    ANOP\n&SVOFF   SETC  '+4'                                           83240.\n.M243    ANOP\n.M244    ANOP\n&LABEL   STM   14,12,&STRCPFX.CRP&CBOFF\n&LABEL   SETC  ''                                             83247.\n    AIF  ('&RETURN' EQ '' AND ('&RC' EQ '' OR '&RC' EQ 'NONE')).M255\n&BCKREQD SETB  1                                              83250.\n         MVC   &STRCPFX.BCK&CBOFF.(&SVLENG*4),&STRCPFX.SV&SVOFF\n&RSTAREA SETC  'BCK'                                          83254.\n.M255    ANOP\n.M256    ANOP\n.*       CORP  CORP_DEBUGGING_STORES                          83257.\n.M100    ANOP\n.*       CALL  CORP_SET_RETURN_CODE                           83101.\n&RCREG   SETC  ''                                             83283.\n         AIF   ('&RC' NE '').M293                             83284.\n         AIF   (NOT &OSLINK).M311                             83286.\n&LABEL   SR    15,15\n&LABEL   SETC  ''                                             83290.\n&RCREG   SETC  '15'                                           83291.\n         AGO   .M311                                          83293.\n.M293    AIF   ('&RC'(1,1) NE '(').M298                       83294.\n&RCREG   SETC  '&RC(1)'                                       83296.\n         AGO   .M311                                          83298.\n.M298    AIF   ('&RC' EQ 'NONE').M311                         83299.\n         AIF   ('&RC' NE '0').M304                            83301.\n&LABEL   SR    15,15\n         AGO   .M306                                          83304.\n.M304    ANOP\n&LABEL   LA    15,&RC\n.M306    ANOP\n&LABEL   SETC  ''                                             83307.\n&RCREG   SETC  '15'                                           83308.\n.M311    ANOP\n.*       CORP  CORP_SET_RETURN_CODE                           83312.\n.*       CALL  CORP_SAVE_RETURNING_REGS                       83105.\n         AIF   (NOT &ANYSAVD).M378                            83323.\n         AIF   (&OSLINK).M326                                 83325.\n&OSPTR   SETC  ''                                             83330.\n&LOCPTR  SETC  '&STRCPFX&RSTAREA+'                            83331.\n         AGO   .M332                                          83332.\n.M326    ANOP\n&OSPTR   SETC  '(13)'                                         83327.\n&LOCPTR  SETC  ''                                             83328.\n.M332    AIF   ('&RCREG' EQ '').M348                          83333.\n         AIF   (&FRSAREG GE 14).M342                          83335.\n         AIF   ('&RCREG' EQ '15').M348                        83337.\n&LABEL   LR    15,&RCREG\n&LABEL   SETC  ''                                             83340.\n         AGO   .M348                                          83342.\n.M342    ANOP\n&OFFSET  SETA  (&OFFSET0-1)*4                                 83343.\n&LABEL   ST    &RCREG,&LOCPTR&OFFSET&OSPTR\n&LABEL   SETC  ''                                             83346.\n.M348    AIF   ('&FRSAREG' EQ '14' OR N'&RETURN EQ 0).M353    83349.\n         MNOTE 4,' STRC8302 WARNING--NO CHECK MADE TO INSURE RETURNING'\n         MNOTE 0,'          REGISTERS ARE AMONG THOSE SAVED IN'\n         MNOTE 0,'          TRUNCATED SAVE AREA'              83352.\n.M353    ANOP\n&I       SETA  1                                              83354.\n.M355    AIF   (&I GT N'&RETURN).M378                         83355.\n         AIF   (T'&RETURN(&I) NE 'N').M362                    83357.\n&OFFSET  SETA  (&OFFSET0+&RETURN(&I)-((&RETURN(&I)+2)/16*16))*4\n&LABEL   ST    &RETURN(&I),&LOCPTR&OFFSET&OSPTR\n         AGO   .M373                                          83362.\n.M362    AIF   (&FRSAREG GE 14).M368                          83363.\n&LABEL   ST    &RETURN(&I),&LOCPTR.(&RETURN(&I)&OFF0STR)*4&OSPTR\n         AGO   .M373                                          83368.\n.M368    ANOP\n&LABEL   ST    &RETURN(&I),&LOCPTR.(&RETURN(&I)&OFF0STR-((&RETURN(&I)+2:\n               )/16*16))*4&OSPTR\n.M373    ANOP\n&I       SETA  &I+1                                           83374.\n&LABEL   SETC  ''                                             83375.\n         AGO   .M355                                          83376.\n.M378    ANOP\n.*       CORP  CORP_SAVE_RETURNING_REGS                       83379.\n         AIF   (&OSLINK OR NOT &STRCDST).M116                 83112.\n&LABEL   MVI   &STRCPFX.SV,X'FF'\n&LABEL   SETC  ''                                             83115.\n.M116    ANOP\n.*       CALL  CORP_RESTORE_REGISTERS                         83117.\n         AIF   (NOT &ANYSAVD).M415                            83393.\n         AIF   (NOT &FRRESTK).M401                            83395.\n&I       SETA  &REST1                                         83397.\n&OFFSET  SETA  (&OFFSET0+&I-((&I+2)/16*16))*4                 83398.\n&LABEL   L&MULT  &REST1,&REST2&COMMA2&LOCPTR&OFFSET&OSPTR\n         AGO   .M413                                          83401.\n.M401    AIF   (&FRSAREG GE 14).M407                          83402.\n&LABEL   L&MULT  &REST1,&REST2&COMMA2&LOCPTR.(&REST1&OFF0STR)*4&OSPTR\n         AGO   .M413                                          83407.\n.M407    ANOP\n&LABEL   L&MULT  &REST1,&REST2&COMMA2&LOCPTR.(&REST1&OFF0STR-((&REST1+2:\n               )/16*16))*4&OSPTR\n.M413    ANOP\n&LABEL   SETC  ''                                             83414.\n.M415    ANOP\n.*       CORP  CORP_RESTORE_REGISTERS                         83416.\n         AIF   (NOT &OSLINK).M123                             83119.\n&LABEL   MVI   12(13),X'FF'\n&LABEL   SETC  ''                                             83122.\n.M123    AIF   ('&LINK' EQ 'NONE').M129                       83125.\n&LABEL   BR    &LINK\n&LABEL   SETC  ''                                             83128.\n.M129    ANOP\n.*       CALL  CORP_GEN_CRP_BCK_AREAS                         83130.\n         AIF   (&OSLINK OR NOT &STRCDCV).M485                 83444.\n         AIF   ('&LINK' NE 'NONE').M451                       83446.\n&TARGET  SETC  '&STRCPFX.FIN'                                 83448.\n&LABEL   B     &TARGET\n&LABEL   SETC  '&TARGET'                                      83450.\n.M451    ANOP\n&LSTAREA SETC  '&STRCPFX.CRP'                                 83452.\n&LSTAREA DS    0F\n         AIF   (NOT &STRCDST).M467                            83454.\n         DC    X'FC&IDBYTE.0000'\n         AIF   (&BCKREQD).M458                                83457.\n&FWDPTR  SETC  '&STRCPFX.FWD'                                 83461.\n         AGO   .M462                                          83462.\n.M458    ANOP\n&FWDPTR  SETC  '&STRCPFX.BCK'                                 83459.\n.M462    ANOP\n&STRCPSP EQU   &STRCPFX.CRP\n         DC    A(&STRCPSA,&FWDPTR)\n.M467    DC    15F'0'\n         AIF   (NOT &BCKREQD).M482                            83469.\n&LSTAREA SETC  '&STRCPFX.BCK'                                 83471.\n&LSTAREA DS    0F\n         AIF   (NOT &STRCDST).M480                            83474.\n         DC    X'FB&IDBYTE.0000'\n&FWDPTR  SETC  '&STRCPFX.FWD'                                 83478.\n         DC    A(&STRCPFX.CRP,&FWDPTR)\n.M480    DC    (&SVLENG)F'0'\n.M482    ANOP\n&STRCPSP SETC  '&FWDPTR'                                      83483.\n&STRCPSA SETC  '&LSTAREA'                                     83484.\n.M485    ANOP\n.*       CORP  CORP_GEN_CRP_BCK_AREAS                         83486.\n         AIF   ('&LABEL' EQ '').M136                          83132.\n&LABEL   DS    0H\n&LABEL   SETC  ''                                             83135.\n.M136    STRCPOP\n.*       CALL  CORP_RESTORE_DEBUG_ENVIRONMENT                 83140.\n         AIF   ('&PVDEBUG' EQ '').M433                        83423.\n&STRCDBN SETB  ('&PVDEBUG'(1,1) EQ '1')                       83425.\n&STRCDPN SETB  ('&PVDEBUG'(2,1) EQ '1')                       83426.\n&STRCDLB SETB  ('&PVDEBUG'(3,1) EQ '1')                       83427.\n&STRCDBC SETB  ('&PVDEBUG'(4,1) EQ '1')                       83428.\n&STRCDPC SETB  ('&PVDEBUG'(5,1) EQ '1')                       83429.\n&STRCDPT SETB  ('&PVDEBUG'(6,1) EQ '1')                       83430.\n&STRCDCV SETB  ('&PVDEBUG'(7,1) EQ '1')                       83431.\n&STRCDST SETB  ('&PVDEBUG'(8,1) EQ '1')                       83432.\n.M433    ANOP\n.*       CORP  CORP_RESTORE_DEBUG_ENVIRONMENT                 83434.\n.FIN     MEND\n./ ADD NAME=DO       8512-86097-86097-1148-00492-00492-00000-ISPFDYN\n         MACRO\n&USRNAME DO    &REL=,&MASK=                                   21001.\n         COPY  STRCGBLS\n         LCLA  &WHX               WHILE_INDEX                 21031.\n         LCLA  &WHXEND            WHILE_END_INDEX             21034.\n         LCLA  &UNX               UNTIL_INDEX                 21035.\n         LCLA  &UNXEND            UNTIL_END_INDEX             21035.\n         LCLA  &OPF               OPERAND_FORMAT              21036.\n         LCLA  &I                 I                           21038.\n         LCLA  &LB                LB                          21039.\n         LCLA  &LASTOP            LASTOP                      21041.\n         LCLB  &WHPRES            WHILE_PRESENT               21045.\n         LCLB  &UNPRES            UNTIL_PRESENT               21045.\n         LCLB  &LBLABRQ           LB_LABEL_REQ                21048.\n         LCLB  &WHCTEST           WHILE_COND_TEST             21050.\n         LCLB  &UNCTEST           UNTIL_COND_TEST             21050.\n         LCLB  &CONDREQ           THIS_CONDITIONAL_REQD       21052.\n         LCLC  &LBOPID            LB_OPCODE_ID                21057.\n         LCLC  &LBOP1             LB_OPERAND1                 21059.\n         LCLC  &LBOP2             LB_OPERAND2                 21059.\n         LCLC  &LBLOGIC           LB_LOGIC_OP                 21061.\n         LCLC  &LBTYPE            LOOPING_BRANCH_TYPE         21064.\n         LCLC  &LABEL             LABEL                       21067.\n         LCLC  &FIRSTID           FIRST_ID                    21069.\n         LCLC  &MAINOP            MAIN_OP                     21071.\n         LCLA  &OPCOUNT           OPERAND_COUNT               21385.\n         LCLA  &PASS              PASS                        21587.\n         LCLC  &B8,&B10,&B11      B8, B10, B11                21776.\n         LCLC  &X                 MACRO TEMPORARY\n         STRCTRAC  DO                                         21075.\n&USRNAME STRCPUSH  TYPEVAL=DO                                 21077.\n         AIF   (&STRCERR).FIN                                 21081.\n         AIF   ('&REL&MASK' EQ '').M088                       21085.\n         MNOTE 8,' STRC2113 REL= OR MASK= NOT IN PARENTHESES--IGNORED'\n.M088    ANOP\n&LABEL   SETC  '&USRNAME'                                     21089.\n.* CALL DO_SCAN_OPERANDS                                      21090.\n.* CALL DO_FIND_KEYWORDS_AND_PRESENCE                         21137.\n&WHX     SETA  0                                              21166.\n&UNX     SETA  0                                              21166.\n         AIF   ('&SYSLIST(1)' EQ 'WHILE' OR '&SYSLIST(1)' EQ 'UNTIL'   *\n               OR '&SYSLIST(1)' EQ 'FOREVER'                           *\n               OR '&SYSLIST(1)' EQ '').M171                   21167.\n         MNOTE 8,' STRC2108 FIRST OPERAND MUST BE \"WHILE\", \"UNTIL\",'\n         MNOTE 0,'          \"FOREVER\", OR OMITTED'            21169.\n.M171    ANOP\n&I       SETA  1                                              21173.\n&LASTOP  SETA  N'&SYSLIST                                     21174.\n.M175    AIF   (&I GT &LASTOP).M202                           21175.\n         AIF   ('&SYSLIST(&I)' NE 'WHILE').M186               21177.\n         AIF   (&WHX NE 0).M182                               21179.\n&WHX     SETA  &I                                             21181.\n         AGO   .M185                                          21182.\n.M182    MNOTE 8,' STRC2101 OPERANDS AFTER SECOND \"WHILE\" IGNORED'\n&LASTOP  SETA  &I-1                                           21184.\n.M185    AGO   .M197                                          21185.\n.M186    AIF   ('&SYSLIST(&I)' NE 'UNTIL').M196               21187.\n         AIF   (&UNX NE 0).M192                               21189.\n&UNX     SETA  &I                                             21191.\n         AGO   .M195                                          21192.\n.M192    MNOTE 8,' STRC2102 OPERANDS AFTER SECOND \"UNTIL\" IGNORED'\n&LASTOP  SETA  &I-1                                           21194.\n.M195    ANOP\n.M196    ANOP\n.M197    ANOP\n&I       SETA  &I+1                                           21198.\n         AGO   .M175                                          21199.\n.M202    AIF   (&WHX LE 1 OR &UNX LE 1).M205                  21202.\n         MNOTE 8,' STRC2114 SUPERFLUOUS LOOPING GROUP IGNORED'\n.M205    ANOP\n&UNPRES  SETB  (&UNX GT 0)                                    21214.\n&WHPRES SETB (&WHX GT 0 OR &UNX GT 1 OR (NOT &UNPRES AND &LASTOP GT 0))\n.* CORP DO_FIND_KEYWORDS_AND_PRESENCE                         21220.\n.* CALL DO_FIND_END_INDEXES_AND_MAIN_OP                       21142.\n&MAINOP  SETC  ''                                             21230.\n&WHXEND  SETA  &LASTOP                                        21231.\n&UNXEND  SETA  &LASTOP                                        21231.\n         AIF   (&LASTOP NE 1).M235                            21232.\n         AIF   ('&SYSLIST(1)' NE 'FOREVER').M235              21232.\n&WHPRES  SETB  0                                              21234.\n&UNPRES  SETB  0                                              21234.\n         AGO   .M299                                          21235.\n.M235    AIF   (NOT &WHPRES).M279                             21236.\n         AIF   (NOT &UNPRES).M273                             21238.\n&I       SETA  &WHX-1                                         21240.\n         AIF   (&UNX GE &WHX).M248                            21241.\n&UNXEND  SETA  &I-1                                           21243.\n         AIF ('&SYSLIST(&I)' EQ 'AND' OR '&SYSLIST(&I)' EQ 'OR').M247\n&UNXEND  SETA  &I                                             21246.\n.M247    AGO   .M255                                          21247.\n.M248    ANOP\n&I       SETA  &UNX-1                                         21249.\n&WHXEND  SETA  &I-1                                           21250.\n         AIF ('&SYSLIST(&I)' EQ 'AND' OR '&SYSLIST(&I)' EQ 'OR').M254\n&WHXEND  SETA  &I                                             21253.\n.M254    ANOP\n.M255    AIF   (&WHX NE &WHXEND).M264                         21256.\n         MNOTE 8,' STRC2109 WHILE TEST IS VOID--IGNORED'      21262.\n&WHPRES  SETB  0                                              21263.\n         AGO   .M272                                          21264.\n.M264    AIF   (&UNX NE &UNXEND).M272                         21265.\n         MNOTE 8,' STRC2111 UNTIL TEST IS VOID--IGNORED'      21269.\n&UNPRES  SETB  0                                              21270.\n.M272    AGO   .M278                                          21272.\n.M273    AIF   (&WHX NE &WHXEND).M278                         21274.\n&WHPRES  SETB  0                                              21276.\n.M278    AGO   .M284                                          21278.\n.M279    AIF   (NOT (&UNPRES AND &UNX EQ &UNXEND)).M284       21280.\n&UNPRES  SETB  0                                              21282.\n.M284    AIF   (NOT (&WHPRES AND &UNPRES)).M298               21285.\n&MAINOP  SETC  'AND'                                          21287.\n         AIF   ('&SYSLIST(&I)' NE 'OR').M291                  21288.\n&MAINOP  SETC  'OR'                                           21290.\n         AGO   .M298                                          21291.\n.M291    AIF   ('&SYSLIST(&I)' EQ 'AND').M298                 21292.\n         MNOTE 8,' STRC2110 LOGIC OPERATOR BETWEEN \"WHILE\" AND \"UNTIL\"'\n         MNOTE 0,'          OMITTED--\"AND\" ASSUMED'           21294.\n.M298    ANOP\n.M299    ANOP\n.* CORP DO_FIND_END_INDEXES_AND_MAIN_OP                       21300.\n.* CALL DO_LOOPING_BRANCH_AND_FIRST_OPERAND                   21147.\n&LB      SETA  0                                              21309.\n&LBTYPE  SETC  'NONE'                                         21310.\n         AIF   (NOT &UNPRES).M326                             21311.\n&I       SETA  &UNX+1                                         21313.\n&UNX     SETA  &I                                             21313.\n&X       SETC  '&SYSLIST(&I,1)'                               21316.\n       AIF ('&X' NE 'BCT' AND '&X' NE 'BXLE' AND '&X' NE 'BXH').M323\n&LBTYPE  SETC  'UNTIL'                                        21318.\n&UNCTEST SETB  (&UNXEND GT &I)                                21319.\n&LB      SETA  &I                                             21320.\n         AGO   .M325                                          21323.\n.M323    ANOP\n&UNCTEST SETB  1                                              21324.\n.M325    AGO   .M330                                          21326.\n.M326    ANOP\n&UNX     SETA  0                                              21327.\n&UNXEND  SETA  0                                              21327.\n&UNCTEST SETB  0                                              21328.\n.M330    AIF   (NOT &WHPRES).M365                             21331.\n&I       SETA  &WHX+1                                         21333.\n&WHX     SETA  &I                                             21333.\n&X       SETC  '&SYSLIST(&I,1)'                               21336.\n       AIF ('&X' NE 'BCT' AND '&X' NE 'BXLE' AND '&X' NE 'BXH').M362\n         AIF   ('&LBTYPE' NE 'NONE').M355                     21338.\n&LBTYPE  SETC  'WHILE'                                        21340.\n&WHCTEST SETB  (&WHXEND GT &I)                                21341.\n&LB      SETA  &I                                             21342.\n         AIF   ('&X' NE 'BCT').M349                           21345.\n         MNOTE 4,' STRC2103 WARNING--\"WHILE,(BCT,...\" WILL LOOP ONE'\n         MNOTE 0,'          LESS TIME THAN VALUE IN REGISTER' 21347.\n.M349    AIF   ('&MAINOP' NE 'OR').M354                       21350.\n         MNOTE 4,' STRC2104 WARNING--LOOPING BRANCH MAY NOT BE'\n         MNOTE 0,'          EXECUTED ON EVERY ITERATION'      21352.\n.M354    AGO   .M361                                          21354.\n.M355    MNOTE 8,' STRC2105 TWO LOOPING BRANCHES INVALID IN \"DO\"--'\n         MNOTE 0,'          \"WHILE\" IGNORED'                  21357.\n&WHPRES  SETB  0                                              21358.\n&WHCTEST SETB  0                                              21358.\n&MAINOP  SETC  ''                                             21359.\n&WHX     SETA  0                                              21360.\n&WHXEND  SETA  0                                              21360.\n.M361    AGO   .M364                                          21361.\n.M362    ANOP\n&WHCTEST SETB  1                                              21363.\n.M364    AGO   .M368                                          21365.\n.M365    ANOP\n&WHX     SETA  0                                              21366.\n&WHXEND  SETA  0                                              21366.\n&WHCTEST SETB  0                                              21367.\n.M368    ANOP\n.* CALL DO_LOOPING_BRANCH_PROCESS                             21369.\n&LBOPID  SETC  ''                                             21387.\n&LBOP1   SETC  ''                                             21387.\n&LBOP2   SETC  ''                                             21387.\n&LBLOGIC SETC  ''                                             21387.\n         AIF   (&LB EQ 0).M432                                21389.\n&LBOPID  SETC  '&SYSLIST(&LB,1)'                              21391.\n         AIF   ('&LBOPID' NE 'BCT').M395                      21392.\n&OPCOUNT SETA  2                                              21394.\n         AGO   .M397                                          21395.\n.M395    ANOP\n&OPCOUNT SETA  3                                              21396.\n.M397    AIF   (N'&SYSLIST(&LB) NE 1).M401                    21398.\n         MNOTE 8,' STRC2112 PARENTHESES OMITTED AROUND &SYSLIST(&LB)'\n         AGO   .M432                                          21401.\n.M401    ANOP\n&LBOP1   SETC  '&SYSLIST(&LB,2)'                              21402.\n&LBOP2   SETC  '&SYSLIST(&LB,3)'                              21403.\n         AIF   (N'&SYSLIST(&LB) EQ &OPCOUNT).M407             21404.\n         MNOTE 8,' STRC2106 INVALID NUMBER OF OPERANDS FOR &LBOPID'\n.M407    ANOP\n&LB      SETA  &LB+1                                          21408.\n         AIF   ('&LBTYPE' EQ 'WHILE' AND &WHCTEST).M413       21411.\n         AIF   (NOT ('&LBTYPE' EQ 'UNTIL' AND &UNCTEST)).M432\n.M413    ANOP\n&LBLOGIC SETC  '&SYSLIST(&LB)'                                21414.\n         AIF   ('&LBLOGIC' NE 'AND' AND '&LBLOGIC' NE 'OR').M418\n&LB      SETA  &LB+1                                          21417.\n         AGO   .M422                                          21418.\n.M418    MNOTE 8,' STRC2107 &LBLOGIC INVALID AFTER LOOPING BRANCH--'\n         MNOTE 0,'          \"AND\" INSERTED'                   21419.\n&LBLOGIC SETC  'AND'                                          21421.\n.M422    AIF   ('&LBTYPE' NE 'WHILE').M426                    21423.\n&WHX     SETA  &LB                                            21425.\n         AGO   .M432                                          21426.\n.M426    ANOP\n&UNX     SETA  &LB                                            21427.\n.M432    ANOP\n&LBLABRQ SETB  ('&LBTYPE' EQ 'WHILE')                         21433.\n.* CORP DO_LOOPING_BRANCH_PROCESS                             21434.\n.* CORP DO_LOOPING_BRANCH_AND_FIRST_OPERAND                   21372.\n.* CALL DO_SET_FORMAT                                         21153.\n.*   SOME CODE FROM DO_INFO_SAVE HAS BEEN MOVED HERE TO SIMPLIFY\n.*   SETTING &B8, &B10, AND &B11.\n&B8      SETC  'W'                                            21780.\n&B10     SETC  '0'                                            21781.\n&B11     SETC  '0'                                            21781.\n         AIF   (NOT &WHPRES).M535                             21440.\n         AIF   ('&LBTYPE' NE 'WHILE').M489                    21442.\n&B8      SETC  'U'                                            21789.\n         AIF   (NOT &WHCTEST).M472                            21444.\n         AIF   ('&LBLOGIC' NE 'AND').M459                     21446.\n&B10     SETC  'W'                                            21805.\n&B11     SETC  'N'                                            21818.\n         AIF   (NOT &UNPRES).M456                             21448.\n         AIF   ('&MAINOP' NE 'AND').M453                      21450.\n&OPF     SETA  15                                             21452.\n         AGO   .ENDSET\n.M453    ANOP\n&OPF     SETA  16                                             21454.\n         AGO   .ENDSET\n.M456    ANOP\n&OPF     SETA  13                                             21457.\n&B8      SETC  'L'                                            21793.\n         AGO   .ENDSET\n.M459    ANOP\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'W'                                            21821.\n         AIF   (NOT &UNPRES).M468                             21460.\n         AIF   ('&MAINOP' NE 'AND').M465                      21462.\n&OPF     SETA  17                                             21464.\n         AGO   .ENDSET\n.M465    ANOP\n&OPF     SETA  18                                             21466.\n         AGO   .ENDSET\n.M468    ANOP\n&OPF     SETA  14                                             21469.\n&B8      SETC  'L'                                            21793.\n         AGO   .ENDSET\n.M472    ANOP\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'N'                                            21818.\n         AIF   (NOT &UNPRES).M481                             21473.\n         AIF   ('&MAINOP' NE 'AND').M478                      21475.\n&OPF     SETA  11                                             21477.\n         AGO   .ENDSET\n.M478    ANOP\n&OPF     SETA  12                                             21479.\n         AGO   .ENDSET\n.M481    ANOP\n&OPF     SETA  10                                             21482.\n&B8      SETC  'L'                                            21793.\n         AGO   .ENDSET\n.M489    AIF   ('&LBTYPE' NE 'UNTIL').M518                    21490.\n&B8      SETC  'L'                                            21793.\n         AIF   (NOT &UNCTEST).M510                            21492.\n         AIF   ('&LBLOGIC' NE 'AND').M502                     21494.\n&B11     SETC  'U'                                            21811.\n         AIF   ('&MAINOP' NE 'AND').M499                      21496.\n&OPF     SETA  7                                              21498.\n&B10     SETC  'W'                                            21818.\n         AGO   .ENDSET\n.M499    ANOP\n&OPF     SETA  9                                              21500.\n&B10     SETC  'B'                                            21821.\n         AGO   .ENDSET\n.M502    ANOP\n&B10     SETC  'U'                                            21824.\n         AIF   ('&MAINOP' NE 'AND').M506                      21503.\n&OPF     SETA  6                                              21505.\n&B11     SETC  'N'                                            21805.\n         AGO   .ENDSET\n.M506    ANOP\n&OPF     SETA  8                                              21507.\n&B11     SETC  'W'                                            21808.\n         AGO   .ENDSET\n.M510    AIF   ('&MAINOP' NE 'AND').M514                      21511.\n&OPF     SETA  4                                              21513.\n&B10     SETC  'W'                                            21805.\n&B11     SETC  'N'                                            21818.\n         AGO   .ENDSET\n.M514    ANOP\n&OPF     SETA  5                                              21515.\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'W'                                            21821.\n         AGO   .ENDSET\n.M518    AIF   (NOT &UNPRES).M527                             21519.\n&B8      SETC  'U'                                            21789.\n         AIF   ('&MAINOP' NE 'AND').M524                      21521.\n&OPF     SETA  2                                              21523.\n         AGO   .ENDSET\n.M524    ANOP\n&OPF     SETA  3                                              21525.\n         AGO   .ENDSET\n.M527    ANOP\n&OPF     SETA  1                                              21528.\n         AGO   .ENDSET\n.M535    AIF   (NOT &UNPRES).M554                             21536.\n         AIF   ('&LBTYPE' NE 'UNTIL').M551                    21538.\n&B8      SETC  'L'                                            21793.\n         AIF   (NOT &UNCTEST).M548                            21540.\n         AIF   ('&LBLOGIC' NE 'AND').M545                     21542.\n&OPF     SETA  22                                             21544.\n&B10     SETC  'B'                                            21811.\n&B11     SETC  'U'                                            21818.\n         AGO   .ENDSET\n.M545    ANOP\n&OPF     SETA  21                                             21546.\n&B10     SETC  'U'                                            21808.\n&B11     SETC  'N'                                            21824.\n         AGO   .ENDSET\n.M548    ANOP\n&OPF     SETA  19                                             21549.\n&B10     SETC  'B'                                            21808.\n&B11     SETC  'N'                                            21818.\n         AGO   .ENDSET\n.M551    ANOP\n&OPF     SETA  20                                             21552.\n&B8      SETC  'U'                                            21789.\n         AGO   .ENDSET\n.M554    ANOP\n&OPF     SETA  0                                              21555.\n&B8      SETC  'B'                                            21796.\n.ENDSET  ANOP\n.* CORP DO_SET_FORMAT                                         21558.\n.* CORP DO_SCAN_OPERANDS                                      21158.\n   AIF   (&OPF EQ 0 OR &OPF EQ 10 OR &OPF EQ 12 OR &OPF EQ 19).M098\n&STRCEND(&STRCNST)  SETB  1                                   21097.\n.M098    AIF   (NOT &STRCDBC).M104                            21099.\n&LABEL   SR    1,1\n&LABEL   SETC  ''                                             21102.\n         STH   1,&STRCPFX.DOL\n.M104    AIF   (&OPF EQ 0).M113                               21105.\n.* CALL DO_BRANCH_FOR_LOOP_ENTRY                              21107.\n         AIF   (&OPF GT 9).M571                               21566.\n         AIF   (&OPF LT 2).M581                               21566.\n         AIF   (&OPF GT 3 AND &OPF LT 6).M581                 21566.\n&LABEL   B     &STRCPFX.W1\n         AGO   .CLEARLB\n.M571    AIF   (&OPF GT 18).M576                              21571.\n&LABEL   B     &STRCPFX.LPB\n         AGO   .CLEARLB\n.M576    AIF   (&OPF EQ 19).M581                              21576.\n&LABEL   B     &STRCPFX.BEG\n.CLEARLB ANOP\n&LABEL   SETC  ''\n.M581    ANOP\n.* CORP DO_BRANCH_FOR_LOOP_ENTRY                              21582.\n.* CALL DO_GENERATE_ALL_CONDITIONAL_TESTS                     21110.\n&PASS    SETA  1                                              21589.\n.M590    AIF   (&PASS GT 2).M634                              21590.\n         AIF   (&PASS NE 1).M595                              21592.\n.* CALL DO_UNTIL_PREPROCESS                                   21594.\n&CONDREQ SETB  (&UNCTEST)                                     21643.\n         AIF   (NOT &UNCTEST).M672                            21644.\n&STRCFRX SETA  &UNX                                           21646.\n&STRCLSX SETA  &UNXEND                                        21647.\n&STRCUBL SETC  '&STRCPFX.END'                                 21649.\n&STRCUFL SETC  '&STRCPFX.W1'                                  21650.\n&STRCUFC SETB  0                                              21652.\n&STRCUID SETC  'U'                                            21653.\n&FIRSTID SETC  '&STRCPFX.U1'                                  21654.\n         AIF   (&OPF NE 3 AND &OPF NE 8 AND &OPF NE 9).M661   21657.\n&STRCUFC SETB  1                                              21658.\n&STRCUBL SETC  '&STRCPFX.BEG'                                 21659.\n         AGO   .M671                                          21660.\n.M661    AIF   (&OPF NE 11 AND &OPF NE 15 AND &OPF NE 17).M664\n&STRCUFL SETC  '&STRCPFX.LPB'                                 21662.\n         AGO   .M671                                          21663.\n.M664    AIF   (&OPF NE 12 AND &OPF NE 16 AND &OPF NE 18).M668\n&STRCUBL SETC  '&STRCPFX.LPB'                                 21665.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 21666.\n         AGO   .M671                                          21667.\n.M668    AIF   (&OPF LT 20).M671                              21664 .\n&STRCUFL SETC  '&STRCPFX.BEG'                                 21669.\n.M671    ANOP\n.M672    ANOP\n.* CORP DO_UNTIL_PREPROCESS                                   21673.\n         AGO   .M597                                          21595.\n.M595    ANOP\n.* CALL DO_WHILE_PREPROCESS                                   21596.\n&CONDREQ SETB  (&WHCTEST)                                     21680.\n         AIF   (NOT &WHCTEST).M692                            21681.\n&STRCFRX SETA  &WHX                                           21683.\n&STRCLSX SETA  &WHXEND                                        21684.\n&STRCUBL SETC  '&STRCPFX.END'                                 21685.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 21687.\n&STRCUFC SETB  1                                              21689.\n&STRCUID SETC  'W'                                            21690.\n&FIRSTID SETC  '&STRCPFX.W1'                                  21691.\n.M692    ANOP\n.* CORP DO_WHILE_PREPROCESS                                   21693.\n.M597    ANOP\n         AIF   (NOT &STRCDDM).M608                            DEBUGMACS\n         MNOTE *,' STRC2199 CONDREQ=&CONDREQ,FRX=&STRCFRX,LSX=&STRCLSX,*\n               UBL=&STRCUBL,UFL=&STRCUFL'                     DEBUGMACS\n.M608    AIF   (NOT &CONDREQ).M632                            21608.\n.* CALL DO_GENERATE_CONDITIONAL_SET                           21610.\n&STRCFLU SETB  0                                              21704.\n         AIF   ('&LABEL' EQ '').M718                          21705.\n         AIF   ('&FIRSTID' NE '').M712                        21707.\n&FIRSTID SETC  '&LABEL'                                       21711.\n         AGO   .M716                                          21712.\n.M712    ANOP\n&LABEL   DS    0H\n.M716    ANOP\n&LABEL   SETC  ''                                             21717.\n.M718    ANOP\n&FIRSTID STRCCEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     *\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        *\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     *\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    *\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    *\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    *\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    *\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    *\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    *\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    *\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    *\n               &SYSLIST(45),&SYSLIST(46),&SYSLIST(47),&SYSLIST(48),    *\n               &SYSLIST(49),&SYSLIST(50)                      21719.\n.* CORP DO_GENERATE_CONDITIONAL_SET                           21736.\n         AIF   (&PASS NE 1).M626                              21619.\n.* CALL DO_UNTIL_POSTPROCESS                                  21622.\n         AIF   (&OPF EQ 11).M748                              21747.\n         AIF   (&OPF LT 15 OR &OPF GT 18).M751                21747.\n.M748    B     &STRCUFL\n.M751    ANOP\n.* CORP DO_UNTIL_POSTPROCESS                                  21752.\n.M626    AIF   (NOT &STRCFLU).M631                            21627.\n&LABEL   SETC  '&STRCUFL'                                     21629.\n.M631    ANOP\n.M632    ANOP\n&PASS    SETA  &PASS+1                                        21633.\n         AGO   .M590                                          21634.\n.M634    ANOP\n.* CORP DO_GENERATE_ALL_CONDITIONAL_TESTS                     21636.\n.M113    ANOP\n.* CALL DO_LABEL_BLOCK                                        21114.\n         AIF   (&OPF EQ 0 OR &OPF EQ 3 OR &OPF EQ 5).M760     21759.\n         AIF   (&OPF LT 8 OR &OPF EQ 13 OR &OPF EQ 15).M770   21759.\n.M760    AIF   ('&LABEL' EQ '&STRCPFX.BEG').M770              21760.\n         AIF   ('&LABEL' EQ '').M767                          21763.\n&LABEL   DS    0H\n.M767    ANOP\n&LABEL   SETC  '&STRCPFX.BEG'                                 21767.\n.M770    ANOP\n.* CORP DO_LABEL_BLOCK                                        21771.\n.* CALL DO_INFO_SAVE                                          21116.\n.*   LINES 21780. THROUGH 21827. SETTING &B8, &B10, AND &B11 DEPENDING\n.*   ON &OPF MOVED TO DO_SET_FORMAT.\n&STRCINF(&STRCNST)  SETC  '&B8&B10&B11&LBLABRQ.0000'          21828.\n&STRCOP1(&STRCNST)  SETC  '&LBOP1'                            21835.\n&STRCOP2(&STRCNST)  SETC  '&LBOP2'                            21836.\n&STRCOP3(&STRCNST)  SETC  '&LBOPID'                           21837.\n.* CORP DO_INFO_SAVE                                          21838.\n.* CALL DO_TRACE_COUNTERS                                     21119.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M869              21844.\n         AIF   (NOT &STRCDBC).M855                            21846.\n&LABEL   LH    1,&STRCPFX.DOL\n&LABEL   SETC  ''                                             21849.\n         LA    1,1(1)\n         STH   1,&STRCPFX.DOL\n         LH    1,&STRCPFX.DTR\n         LA    1,1(1)\n         STH   1,&STRCPFX.DTR\n.M855    ANOP\n&LABEL   B     &STRCPFX.GO\n&LABEL   SETC  '&STRCPFX.GO'                                  21858.\n         AIF   (NOT &STRCDBN).M864                            21859.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M864    AIF   (NOT &STRCDBC).M868                            21864.\n&STRCPFX.DOL  DC  H'0' CURRENT LOOP COUNT\n&STRCPFX.DTR  DC  H'0' OVERALL LOOP COUNT\n.M868    ANOP\n.M869    ANOP\n.* CORP DO_TRACE_COUNTERS                                     21870.\n         AIF   ('&LABEL' EQ '').M124                          21121.\n&LABEL   DS    0H\n.M124    ANOP\n.FIN     MEND\n./ ADD NAME=DOCASE   8512-86097-86097-1148-00142-00142-00000-ISPFDYN\n         MACRO\n&USRNAME DOCASE  &INDEX,&OPTION,&RANGE                        31001.\n         COPY  STRCGBLS\n         LCLB  &BRCASE1           BRANCH_TO_CASE1             31009.\n         LCLB  &XRANGA            INDEX_RANGE_ASSURED         31012.\n         LCLC  &XREG              INDEX_REG                   31016.\n         LCLC  &XLENG             INDEX_LENGTH                31018.\n         LCLC  &XTYPE             INDEX_TYPE                  31020.\n         LCLC  &CFORMAT           CASE_FORMAT                 31023.\n         LCLC  &LABEL             LABEL                       31029.\n         LCLC  &XADDR             INDEX_ADDR                  31031.\n         LCLA  &I,&J              I,J                         31192.\n         LCLC  &X                 X                           31228.\n         STRCTRAC  DOCASE                                     31040.\n&USRNAME STRCPUSH  TYPEVAL=DOCASE,ENDVAL=1                    31042.\n         AIF   (&STRCERR).FIN                                 31048.\n&LABEL   SETC  '&USRNAME'                                     31052.\n.*       CALL  DOCASE_EXTRACT_OPERANDS                        31054.\n         AIF   ('&OPTION' NE 'SIMPLE' AND '&OPTION' NE 'SPARSE').M089\n&CFORMAT SETC  '&OPTION'                                      31088.\n         AGO   .M112                                          31089.\n.M089    AIF   ('&OPTION' NE 'ONLY').M094                     31090.\n&XRANGA  SETB  1                                              31092.\n         AGO   .M098                                          31093.\n.M094    AIF   ('&OPTION' EQ '' OR '&OPTION' EQ 'IFANY').M098\n         MNOTE 8,' STRC3102 &OPTION INVALID SECOND OPERAND--IGNORED'\n.M098    AIF   ('&INDEX' NE '').M103                          31100.\n&CFORMAT SETC  'CONDTEST'                                     31102.\n         AGO   .M112                                          31103.\n.M103    ANOP\n&CFORMAT SETC  'GENERAL'                                      31104.\n         AIF  ('&INDEX(1)' NE 'IFANY' AND '&INDEX(1)' NE 'ONLY').M112\n         MNOTE 4,' STRC3101 WARNING--\"&INDEX(1)\" ASSUMED AS INDEX'\n         MNOTE 0,'          USE \"DOCASE ,&INDEX(1)\" FOR RANGE SPEC'\n.M112    AIF   ('&RANGE' NE 'ONLY').M116                      31113.\n&XRANGA  SETB  1                                              31115.\n         AGO   .M122                                          31116.\n.M116    AIF   ('&RANGE' EQ '' OR '&RANGE' EQ 'IFANY').M122\n         MNOTE 8,' STRC3103 \"&RANGE\" INVALID THIRD OPERAND--IGNORED'\n.M122    ANOP\n&XLENG   SETC  '0'                                            31123.\n         AIF   (N'&INDEX NE 1).M130                           31124.\n         AIF   ('&INDEX'(1,1) NE '(').M130                    31124.\n&XREG    SETC  '&INDEX(1)'                                    31128.\n&XTYPE   SETC  'R'                                            31129.\n         AGO   .M146                                          31130.\n.M130    ANOP\n&XREG    SETC  ''                                             31131.\n         AIF   (N'&INDEX LE 1).M143                           31132.\n&XTYPE   SETC  '&INDEX(2)'                                    31134.\n  AIF  ('&XTYPE' EQ 'W' OR '&XTYPE' EQ 'H' OR '&XTYPE' EQ 'B').M146\n&XLENG   SETC  '&XTYPE'                                       31139.\n&XTYPE   SETC  'B'                                            31140.\n&CFORMAT SETC  'CHARCOMP'                                     31141.\n         AGO   .M146                                          31143.\n.M143    ANOP\n&XTYPE   SETC  'W'                                            31144.\n.M146    ANOP\n.*       CORP  DOCASE_EXTRACT_OPERANDS                        31147.\n         AIF   ('&CFORMAT' EQ 'CONDTEST').M070                31057.\n.*       CALL  DOCASE_INDEX_TO_REG1                           31059.\n&XADDR   SETC  ''                                             31155.\n         AIF   ('&XTYPE' NE 'R').M165                         31158.\n         AIF   ('&XREG' EQ '1').M184                          31159.\n&LABEL   LR    1,&XREG\n&LABEL   SETC  ''                                             31162.\n         AGO   .M184                                          31164.\n.M165    AIF   ('&XTYPE' NE 'W').M169                         31165.\n&LABEL   L     1,&INDEX(1)\n&LABEL   SETC  ''                                             31167.\n         AGO   .M184                                          31168.\n.M169    AIF   ('&XTYPE' NE 'H').M173                         31169.\n&LABEL   LH    1,&INDEX(1)\n&LABEL   SETC  ''                                             31171.\n         AGO   .M184                                          31172.\n.M173    AIF   ('&XTYPE' NE 'B').M184                         31173.\n         AIF   ('&CFORMAT' NE 'SIMPLE').M179                  31174.\n&LABEL   SR    1,1\n&LABEL   SETC  ''                                             31177.\n         IC    1,&INDEX(1)\n         AGO   .M184                                          31179.\n.M179    ANOP\n&XADDR   SETC  '&INDEX(1)'                                    31180.\n.M184    ANOP\n.*       CORP  DOCASE_INDEX_TO_REG1                           31185.\n         AIF   ('&CFORMAT' EQ 'SIMPLE').M070                  31063.\n.*       CALL  DOCASE_GENERAL_SETUP                           31065.\n         AIF   ('&CFORMAT' NE 'GENERAL').M200                 31194.\n&LABEL   B     &STRCPFX.BEG\n&LABEL   SETC  ''                                             31198.\n&BRCASE1 SETB  1                                              31199.\n.M200    ANOP\n&STRCGNL SETA  &STRCGNL+1                                     31201.\n         AIF   (&STRCGNL GT &STRCGNX).M219                    31202.\n&STRCMCV(&STRCGNL)  SETA  0-1                                 31204.\n&STRCCL#(&STRCGNL)  SETA  1                                   31206.\n&J       SETA  &STRCGNL*256                                   31208.\n&I       SETA  &J-255                                         31209.\n         AIF   ('&CFORMAT' NE 'GENERAL').M218                 31210.\n.M212    AIF   (&I GT &J).M218                                31212.\n&STRCOCC(&I)  SETB  0                                         31214.\n&I       SETA  &I+1                                           31215.\n         AGO   .M212                                          31216.\n.M218    AGO   .M223                                          31219.\n.M219    MNOTE 12,' STRC3104 GENERAL/SPARSE/CHARCOMP DOCASE NESTING'\n         MNOTE 0,'           LEVEL &STRCGNL EXCEEDS MAXIMUM OF &STRCGNX*\n               --'\n         MNOTE 0,'           MACROS MUST BE MODIFIED'         31220.\n.M223    ANOP\n.*       CORP  DOCASE_GENERAL_SETUP                           31224.\n.M070    ANOP\n.*       CALL  DOCASE_DEBUG_STUFF                             31071.\n         AIF   (NOT (&STRCDBC OR &STRCDBN)).M258              31230.\n         AIF   (&BRCASE1).M248                                31232.\n         AIF   ('&CFORMAT' NE 'GENERAL').M242                 31236.\n&X       SETC  'BEG'                                          31241.\n         AGO   .M244                                          31242.\n.M242    ANOP\n&X       SETC  'C1'                                           31243.\n.M244    ANOP\n&LABEL   B     &STRCPFX&X\n&BRCASE1 SETB  1                                              31246.\n&LABEL   SETC  ''                                             31247.\n.M248    AIF   (NOT &STRCDBN).M252                            31249.\n         DC    C'&STRCNAM(&STRCNST)'\n.M252    AIF   (NOT &STRCDBC).M256                            31253.\n&STRCPFX.LSC  DC  X'00' LAST CASE NUMBER\n.M256    ANOP\n         DS    0H\n.M258    ANOP\n.*       CORP  DOCASE_DEBUG_STUFF                             31259.\n.*       CALL  DOCASE_INFO_SAVE                               31073.\n&STRCOP1(&STRCNST)  SETC  '0'                                 31266.\n&STRCOP2(&STRCNST)  SETC  '&XADDR'                            31267.\n&STRCOP3(&STRCNST)  SETC  '&CFORMAT'                          31268.\n&STRCOP4(&STRCNST)  SETC  '&XLENG'                            31269.\n&STRCINF(&STRCNST)  SETC  '&BRCASE1.010&XRANGA'               31270.\n.*       CORP  DOCASE_INFOR_SAVE                              31282.\n         AIF   ('&LABEL' EQ '').M079                          31076.\n&LABEL   DS    0H\n.M079    ANOP\n.FIN     MEND\n./ ADD NAME=DOCASEND 8512-86097-86097-1148-00004-00004-00000-ISPFDYN\n         MACRO\n         DOCASEND  &USRNAME\n         ESACOD  &USRNAME\n         MEND\n./ ADD NAME=DOEND    8512-86097-86097-1148-00004-00004-00000-ISPFDYN\n         MACRO\n         DOEND  &USRNAME\n         OD     &USRNAME\n         MEND\n./ ADD NAME=EDIT     8512-85095-85095-1207-00347-00347-00000-ISPFDYN\n         MACRO\n&NAME    EDIT &P1,                                                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &P8,                                                    *\n               &DATASET=,               DATASET NAME                   *\n               &VOLUME=,                VOLUME                         *\n               &PASSWORD=,              PASSWORD                       *\n               &PANEL=,                 PANEL ID                       *\n               &MACRO=,                 MACRO NAME                     *\n               &PROFILE=,               PROFILE NAME                   *\n               &DATAID=,                DATA ID                        *\n               &MEMBER=,                MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFEDIT,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @EDIT &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AIF   ('&P8' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n.*       AIF   ('&DATASET' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFEDIT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATASET' EQ '').CNT0\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT0    AIF   ('&VOLUME' EQ '').CNT1\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASSWORD' EQ '').CNT2\n         AIF   ('&PASSWORD'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AIF   ('&MACRO' EQ '').CNT6\n         AIF   ('&MACRO'(1,1) EQ '''').GENLIT\n.CNT6    AIF   ('&PROFILE' EQ '').CNT7\n         AIF   ('&PROFILE'(1,1) EQ '''').GENLIT\n.CNT7    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFEDIT).BYP20\nEDIT     DC    CL8'EDIT'                EDIT LITERAL FOR ISPF\n&SPFEDIT SETB 1\n.BYP20   ANOP\n         AIF   ('&DATASET' EQ '').BYP30\n         AIF   ('&DATASET'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DATASET             EDIT THIS DATASET\n.BYP30   ANOP\n         AIF   ('&VOLUME' EQ '').BYP40\n         AIF   ('&VOLUME'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOLUME               GENERATED VOLUME\n.BYP40   ANOP\n         AIF   ('&PASSWORD' EQ '').BYP50\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASSWORD             GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\n         AIF   ('&MACRO' EQ '').AYP60\n         AIF   ('&MACRO'(1,1) NE '''').AYP60\nSPFX&NDX DC    CL8&MACRO                GENERATED DATAID\n.AYP60   ANOP\n         AIF   ('&PROFILE' EQ '').AYP70\n         AIF   ('&PROFILE'(1,1) NE '''').AYP70\nSPFY&NDX DC    CL8&PROFILE              GENERATED DATAID\n.AYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,EDIT                  GET ADDRESS OF EDIT KEYWORD\n         AIF   ('&DATASET' EQ '').BYP85\n         AIF   ('&DATASET'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DATASET              GET ADDRESS OF DATASET\n         AGO   .BYP90\n.BYP85   ANOP\n         LA    15,SPFNULLC              GET DUMMY ADDRESS FOR DATASET\n.BYP90   ANOP\n         AIF   ('&VOLUME' EQ '').BYP100\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP110\n         LA    0,&VOLUME                GET ADDRESS OF VOLUME\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOLUME\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n.BYP120  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP140\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASSWORD              GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&MACRO' EQ '').BYP172\n         AIF   ('&MACRO'(1,1) EQ '''').BYP162\n         LA    15,&MACRO                GET ADDRESS OF MACRO\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFX&NDX              GET ADDRESS OF GENNED MACRO\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MACRO\n.BYP182  ANOP\n         AIF   ('&PROFILE' EQ '').BYP174\n         AIF   ('&PROFILE'(1,1) EQ '''').BYP164\n         LA    0,&PROFILE               GET ADDRESS OF PROFILE\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFY&NDX               GET ADDRESS OF GENNED PROFILE\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROFILE\n.BYP184  ANOP\n         AIF   ('&DATAID' EQ '').AYP100\n         AIF   ('&DATAID'(1,1) EQ '''').AYP110\n         LA    1,&DATAID                GET ADDRESS OF DATAID\n         AGO   .AYP120\n.AYP100  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM OF DATAID\n         AGO   .AYP120\n.AYP110  ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENNED DATAID\n.AYP120  ANOP\n         STM   14,1,&TEMP+16            STORE PARMS\n         AIF   ('&MEMBER' EQ '').AYP170\n         AIF   ('&MEMBER'(1,1) EQ '''').AYP160\n         LA    14,&MEMBER               GET ADDRESS OF MEMBER\n         AGO   .AYP180\n.AYP160  ANOP\n         LA    14,SPFM&NDX              GET ADDRESS OF GENNED MEMBER\n         AGO   .AYP180\n.AYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.AYP180  ANOP\n         ST    14,&TEMP+32              STORE THE MEMBER PARMS\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(EDIT)                  EDIT LITERAL\n         AIF   ('&DATASET' EQ '').BYP285\n         AIF   ('&DATASET'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DATASET\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DATASET)              ADDRESS OF DATASET\n         AGO   .BYP290\n.BYP285  ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY DATASET\n.BYP290  ANOP\n         AIF   ('&VOLUME' EQ '').BYP200\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP210\n         DC    A(&VOLUME)               ADDRESS OF VOLUMESER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLUME\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLUME\n.BYP220  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP240\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASSWORD\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASSWORD)             ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&MACRO' EQ '').CYP320\n         AIF   ('&MACRO'(1,1) EQ '''').CYP310\n         DC    A(&MACRO)                ADDRESS OF MACRO\n         AGO   .CYP330\n.CYP310  ANOP\n         DC    A(SPFX&NDX)              ADDRESS OF GENNED MACRO\n         AGO   .CYP330\n.CYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MACRO\n.CYP330  ANOP\n         AIF   ('&PROFILE' EQ '').DYP320\n         AIF   ('&PROFILE'(1,1) EQ '''').DYP310\n         DC    A(&MACRO)                ADDRESS OF PROFILE\n         AGO   .DYP330\n.DYP310  ANOP\n         DC    A(SPFY&NDX)              ADDRESS OF GENNED PROFILE\n         AGO   .DYP330\n.DYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PROFILE\n.DYP330  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP384\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'REQUIRED DATASET PARAMETER MISSING'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=EDREC    8512-85095-85224-1153-00223-00223-00001-ISPFDYN\n         MACRO\n&NAME    EDREC &TYPE,                   TYPE OF RECOVERY               *\n               &PASS,                   PASSWORD                       *\n               &DATA,                   DATA ID                        *\n               &CMD,                    COMMAND NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFEDREC,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TYPE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFEDREC).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TYPE' EQ '').CNT1\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&PASS' EQ '').CNT2\n         AIF   ('&PASS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DATA' EQ '').CNT3\n         AIF   ('&DATA'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&CMD' EQ '').CNT4\n         AIF   ('&CMD'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFEDREC).BYP20\nEDREC    DC    CL8'EDREC'               ISPF KEYWORD\n&SPFEDREC SETB 1\n.BYP20   ANOP\n         AIF   ('&TYPE' EQ '').BYP30\n         AIF   ('&TYPE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TYPE                 GENERATED RECOVERY TYPE\n.BYP30   ANOP\n         AIF   ('&PASS' EQ '').BYP40\n         AIF   ('&PASS'(1,1) NE '''').BYP40\nSPFP&NDX DC    CL8&PASS                 GENERATED PASSWORD\n.BYP40   ANOP\n         AIF   ('&DATA' EQ '').BYP50\n         AIF   ('&DATA'(1,1) NE '''').BYP50\nSPFD&NDX DC    CL8&DATA                 GENERATED DATA ID\n.BYP50   ANOP\n         AIF   ('&CMD' EQ '').BYP60\n         AIF   ('&CMD'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&CMD                  GENERATED COMMAND NAME\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,EDREC                 GET ADDRESS OF EDREC KEYWORD\n.*\n         AIF   ('&TYPE' EQ '').BYP1000\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1010\n         LA    15,&TYPE                 GET ADDRESS OF TYPE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TYPE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TYPE\n.BYP1050 ANOP\n.*\n         AIF   ('&PASS' EQ '').BYP1100\n         AIF   ('&PASS'(1,1) EQ '''').BYP1110\n         LA    0,&PASS                  GET ADDRESS OF PASSWORD\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n.BYP1150 ANOP\n.*\n         AIF   ('&DATA' EQ '').BYP1200\n         AIF   ('&DATA'(1,1) EQ '''').BYP1210\n         LA    1,&DATA                  GET ADDRESS OF DATA NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR DATA\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFD&NDX               GET ADDRESS OF GENERATED DATA\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&CMD' EQ '').BYP1300\n         AIF   ('&CMD'(1,1) EQ '''').BYP1310\n         LA    14,&CMD                  GET ADDRESS OF CMD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CMD\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED CMD\n.BYP1350 ANOP\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(EDREC)                 EDREC LITERAL\n.*\n         AIF   ('&TYPE' EQ '').BYP2000\n         AIF   ('&TYPE'(1,1) EQ '''').BYP2010\n         DC    A(&TYPE)                 ADDRESS OF TYPE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TYPE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TYPE\n.BYP2050 ANOP\n.*\n         AIF   ('&PASS' EQ '').BYP2100\n         AIF   ('&PASS'(1,1) EQ '''').BYP2110\n         DC    A(&PASS)                 ADDRESS OF PASS NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASS NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASS\n.BYP2150 ANOP\n.*\n         AIF   ('&DATA' EQ '').BYP2200\n         AIF   ('&DATA'(1,1) EQ '''').BYP2210\n         DC    A(&DATA)                 ADDRESS OF DATA NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DATA\n.BYP2250 ANOP\n.*\n         AIF   ('&CMD' EQ '').BYP2800\n         AIF   ('&CMD'(1,1) EQ '''').BYP2810\n         DC    A(&CMD+X'80000000')      ADDRESS OF CMD NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CMD\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED CMD\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TYPE OF EDIT RECOVERY IS MISSING'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=ELSE     8512-86097-86097-1148-00030-00030-00000-ISPFDYN\n         MACRO\n&USRNAME ELSE  &BLEND=                                        13001.\n         COPY  STRCGBLS\n         LCLA  &ELSEBL#           ELSE_BLOCK_NUMBER           13008.\n         LCLC  &IFXLAB            IF_EXIT_LABEL               13011.\n         STRCTRAC  ELSE                                       13014.\n         AIF   (&STRCNST GT &STRCNSL).FIN                     13016.\n         STRCVERF  IF,&BLEND                                  13020.\n         AIF   (&STRCERR).FIN                                 13025.\n         AIF   ('&STRCOP2(&STRCNST)' NE 'ELSE').M033          13029.\n         MNOTE 8,' STRC1302 ELSE HAS ALREADY BEEN GENERATED FOR THIS IF*\n               '                                              13031.\n         MEXIT\n.M033    AIF   ('&STRCOP1(&STRCNST)' EQ  '').M041             13034.\n         AIF   ('&STRCOP1(&STRCNST)' EQ '&USRNAME').M041      13034.\n         MNOTE 8,' STRC1301 ELSE=&STRCOP1(&STRCNST) SPECIFIED ON IF BLO*\n               CK &STRCNAM(&STRCNST)'                         13038.\n         MEXIT\n.M041    ANOP\n&ELSEBL# SETA  &STRCLB#+1                                     13042.\n         B     $&ELSEBL#.END\n         AIF   (NOT &STRCXIT(&STRCNST)).M051                  13046.\n&IFXLAB  SETC  '$&STRCBL#(&STRCNST)XIT'                       13048.\n&STRCXIT(&STRCNST)  SETB  0                                   13049.\n.M051    STRCPOP\n&USRNAME STRCPUSH  TYPEVAL=IF,ENDVAL=1,OP2VAL=ELSE,OP3VAL=&IFXLAB\n         AIF   ('&USRNAME' EQ '').M069                        13065.\n&USRNAME DS    0H\n.M069    ANOP\n.FIN     MEND\n./ ADD NAME=ESAC     8512-86097-86097-1148-00011-00011-00000-ISPFDYN\n         MACRO\n         ESAC  &USRNAME                                       35001.\n         COPY  STRCGBLS\n         STRCTRAC  ESAC                                       35005.\n         AIF   (&STRCNST GT &STRCNSL).M023                    35007.\n         STRCVERF  CASE,&USRNAME                              35009.\n         AIF   (&STRCERR).FIN                                 35019.\n.M023    STRCPOP\n         AIF   (&STRCNST GT &STRCNSL).FIN                     35028.\n         B     $&STRCBL#(&STRCNST)END\n.FIN     MEND\n./ ADD NAME=ESACOD   8512-86097-86097-1148-00160-00160-00000-ISPFDYN\n         MACRO\n         ESACOD  &USRNAME                                     37001.\n         COPY  STRCGBLS\n         LCLA  &CASECTR           CASE_COUNTER                37009.\n         LCLA  &T                 T                           37010.\n         LCLA  &COMPLB#           COMP_LABEL_NO               37011.\n         LCLA  &MAXSD             MAX_SD_VALUE                37012.\n         LCLA  &BASE              BASE                        37013.\n         LCLB  &MISCFND           MISC_FOUND                  37015.\n         LCLB  &MULTOF4           MULTIPLESOF4                37016.\n         LCLB  &XRANGA            INDEX_RANGE_ASSURED         37018.\n         LCLB  &ANYCOMP           ANY_COMP_CASES              37021.\n         LCLB  &ANYSELF           ANY_SELFDEF_CASES           37023.\n         LCLB  &RANGREQ           RANGE_TEST_REQD             37025.\n         LCLC  &CFORMAT           CASE_FORMAT                 37028.\n         LCLC  &XADDR             INDEX_ADDR                  37030.\n         LCLC  &NOCASE            NOCASE                      37031.\n         LCLC  &LABEL             LABEL                       37033.\n         LCLA  &I                 I                    37185. 37238.\n         LCLA  &INCR              INCR                        37238.\n         STRCTRAC  ESACOD                                     37038.\n         AIF   (&STRCNST GT &STRCNSL).M083                    37040.\n         STRCVERF  DOCASE,&USRNAME                            37042.\n         AIF   (&STRCERR).FIN                                 37052.\n.*       CALL  ESACOD_INFO_UNPACK                             37056.\n&CASECTR SETA  &STRCOP1(&STRCNST)                             37096.\n&XADDR   SETC  '&STRCOP2(&STRCNST)'                           37097.\n&CFORMAT SETC  '&STRCOP3(&STRCNST)'                           37098.\n&MISCFND SETB  ('&STRCINF(&STRCNST)'(2,1) EQ '1')             37099.\n&MULTOF4 SETB  ('&STRCINF(&STRCNST)'(3,1) EQ '1')             37100.\n&XRANGA  SETB  ('&STRCINF(&STRCNST)'(5,1) EQ '1')             37101.\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          37102.\n.*       CORP  ESACOD_INFO_UNPACK                             37103.\n         AIF   ('&CFORMAT' NE 'GENERAL').M064                 37060.\n.*       CALL  ESACOD_GENERAL_CASE_CHOICE                     37062.\n.*       CALL  ESACOD_GENERAL_CASE_INFO                       37109.\n&I       SETA  &STRCGNL                                       37187.\n&STRCGNL SETA  &I-1                                           37188.\n         AIF   (&I LE &STRCGNX).M192                          37189.\n&STRCERR SETB  1                                              37191.\n         AGO   .M199                                          37192.\n.M192    ANOP\n&MAXSD   SETA  &STRCMCV(&I)                                   37193.\n&ANYSELF SETB  (&MAXSD GE 0)                                  37194.\n&COMPLB# SETA  &STRCCL#(&I)                                   37195.\n&ANYCOMP SETB  (&COMPLB# GT 1)                                37196.\n&BASE    SETA  ((&I-1)*256)+1                                 37197.\n&STRCERR SETB  0                                              37198.\n.M199    ANOP\n.*       CORP  ESACOD_GENERAL_CASE_INFO                       37200.\n         AIF   (&STRCERR).M131                                37112.\n         AIF   (NOT &ANYSELF).M121                            37114.\n.*       CALL  ESACOD_SELFDEF_GEN                             37116.\n&LABEL   SETC  '&STRCPFX.BEG'                                 37156.\n         AIF   (NOT &ANYCOMP).M163                            37160.\n&NOCASE  SETC  '&STRCPFX.C1'                                  37161.\n         AGO   .M170                                          37162.\n.M163    AIF   (NOT &MISCFND).M166                            37163.\n&NOCASE  SETC  '&STRCPFX.MSC'                                 37164.\n         AGO   .M170                                          37165.\n.M166    ANOP\n&NOCASE  SETC  '&STRCPFX.END'                                 37167.\n.M170    ANOP\n&RANGREQ SETB  ((NOT &XRANGA) OR &ANYCOMP)                    37170.\n         AIF   (NOT &RANGREQ).M176                            37171.\n.*       CALL  ESACOD_OUT_OF_RANGE_CHECK                      37173.\n         AIF   ('&XADDR' NE '').M224                          37207.\n&LABEL   LTR   1,1\n         AIF   (&STRCOCC(&BASE)).M211                         37210.\n         BNP   &NOCASE\n         AGO   .M215                                          37215.\n.M211    BM    &NOCASE\n.M215    C     1,&STRCPFX.SIZ\n         BH    &NOCASE\n         AIF   (NOT &MULTOF4).M232                            37218.\n         LA    0,B'00000011'\n         NR    0,1\n         BNZ   &NOCASE\n         AGO   .M232                                          37224.\n.M224    ANOP\n&LABEL   CLI   &XADDR,&MAXSD\n         BH    &NOCASE\n         AIF   (NOT &MULTOF4).M232                            37227.\n         TM    &XADDR,B'00000011'\n         BNZ   &NOCASE\n.M232    ANOP\n&LABEL   SETC  ''                                             37233.\n.*       CORP  ESACOD_OUT_OF_RANGE_CHECK                      37234.\n.M176    ANOP\n.*       CALL  ESACOD_BRVCT_GEN                               37177.\n         AIF   ('&XADDR' EQ '').M245                          37240.\n&LABEL   SR    1,1\n&LABEL   SETC  ''                                             37243.\n         IC    1,&XADDR\n.M245    AIF   (NOT &MULTOF4).M249                            37246.\n&INCR    SETA  4                                              37248.\n         AGO   .M253                                          37249.\n.M249    ANOP\n&INCR    SETA  1                                              37250.\n&LABEL   SLA   1,2\n&LABEL   SETC  ''                                             37252.\n.M253    AIF   (&STRCOCC(&BASE) OR '&XADDR' NE '').M256       37254.\n&LABEL   B     *(1)\n&I       SETA  &INCR                                          37260.\n         AGO   .M262                                          37262.\n.M256    ANOP\n&LABEL   B     *+4(1)\n&I       SETA  0                                              37257.\n.M262    ANOP\n&LABEL   SETC  ''                                             37263.\n.M264    AIF   (&I GT &MAXSD).M273                            37264.\n         AIF   (&STRCOCC(&BASE+&I)).M267                      37266.\n         B     &NOCASE\n         AGO   .M271                                          37271.\n.M267    B     &STRCPFX.G&I\n.M271    ANOP\n&I       SETA  &I+&INCR                                       37272.\n         AGO   .M264                                          37273.\n.M273    AIF   (NOT &RANGREQ OR '&XADDR' NE '').M280          37276.\n&STRCPFX.SIZ  DC  F'&MAXSD'\n.M280    AIF   (NOT &ANYCOMP).M290                            37281.\n         AIF   (&MISCFND).M284                                37283.\n&STRCPFX.C&COMPLB#  DS  0H\n         AGO   .M290                                          37290.\n.M284    ANOP\n&STRCPFX.C&COMPLB#  EQU  &STRCPFX.MSC\n.M290    ANOP\n.*       CORP  ESACOD_BRVCT_GEN                               37291.\n.*       CORP  ESACOD_SELFDEF_GEN                             37180.\n         AGO   .M131                                          37121.\n.M121    AIF   (NOT &ANYCOMP).M128                            37123.\n.*       CALL  ESACOD_GENERAL_SYMB_ONLY                       37125.\n&STRCPFX.BEG  EQU  &STRCPFX.C1\n         AIF   (&MISCFND).M143                                37142.\n&STRCPFX.C&COMPLB#  DS  0H\n         AGO   .M148                                          37148.\n.M143    ANOP\n&STRCPFX.C&COMPLB#  EQU  &STRCPFX.MSC\n.M148    ANOP\n.*       CORP  ESACOD_GENERAL_SYMB_ONLY                       37149.\n         AGO   .M131                                          37128.\n.M128    MNOTE 8,' STRC3701 DOCASE CONTAINS NO VALID CASES'   37130.\n.M131    ANOP\n.*       CORP  ESACOD_GENERAL_CASE_CHOICE                     37133.\n         AGO   .M083                                          37064.\n.M064    ANOP\n  AIF  ('&CFORMAT' NE 'SPARSE' AND '&CFORMAT' NE 'CHARCOMP').M071\n&T       SETA  &STRCCL#(&STRCGNL)                             37067.\n&STRCGNL SETA  &STRCGNL-1                                     37069.\n         AGO   .M074                                          37071.\n.M071    ANOP\n&T       SETA  &CASECTR+1                                     37072.\n.M074    AIF   (&MISCFND).M076                                37075.\n&STRCPFX.C&T  DS  0H\n         AGO   .M081                                          37081.\n.M076    ANOP\n&STRCPFX.C&T  EQU  &STRCPFX.MSC\n.M081    ANOP\n.M083    STRCPOP\n.FIN     MEND\n./ ADD NAME=EXIT     8512-86097-86097-1148-00009-00009-00000-ISPFDYN\n         MACRO\n&USRNAME EXIT  &XTARGET                                       55001.\n         COPY  STRCGBLS\n         STRCTRAC  EXIT                                       55004.\n         AIF   (&STRCNST GT &STRCNSL).M018                    55006.\n         STRCXFND  &XTARGET                                   55010.\n         AIF   (&STRCERR).M018                                55014.\n&USRNAME B     &STRCUBL\n.M018    MEND\n./ ADD NAME=FI       8512-86097-86097-1148-00013-00013-00000-ISPFDYN\n         MACRO\n         FI    &USRNAME                                       15001.\n         COPY  STRCGBLS\n         STRCTRAC  FI                                         15005.\n         AIF   (&STRCNST LE &STRCNSL).M012                    15007.\n         STRCPOP\n         MEXIT\n.M012    STRCVERF  IF,&USRNAME                                15012.\n         AIF   (&STRCERR).FIN                                 15022.\n         AIF   ('&STRCOP1(&STRCNST)' EQ '').M031              15026.\n         MNOTE 8,' STRC1501 ELSE BLOCK \"&STRCOP1(&STRCNST)\" NOT FOUND'\n.M031    STRCPOP  &STRCOP3(&STRCNST)                          15031.\n.FIN     MEND\n./ ADD NAME=FINAL    8512-86097-86097-1148-00021-00021-00000-ISPFDYN\n         MACRO\n         FINAL\n         COPY  STRCGBLS\n         STRCTRAC  FINAL\n.M008    AIF   (&STRCNST LE 0).M021                           53008.\n         AIF   (&STRCNST LE &STRCNSL).M013                    53010.\n         MNOTE 8,' STRC5301 BLEND OF OUTSTANDING BLOCK ASSUMED'\n         AGO   .M016                                          53013.\n.M013    MNOTE 8,' STRC5301 BLEND OF &STRCNAM(&STRCNST) ASSUMED'\n.M016    BLEND\n         AGO   .M008                                          53021.\n.M021    AIF   (NOT &STRCSFP).M033                            53023.\n         AIF   ('&STRCPSP' NE '$FIRSTSV').M029                53025.\n$FIRSTSV DC    0F'0',X'FFFFFFFF',A(0,0) DUMMY SAVEAREA\n$LASTSAV EQU   $FIRSTSV\n         AGO   .M033                                          53029.\n.M029    ANOP\n$LASTSAV EQU   &STRCPSA\n&STRCPSP EQU   0\n.M033    ANOP\n         MEND\n./ ADD NAME=FTCLOSE  8512-85095-85095-1207-00200-00200-00000-ISPFDYN\n         MACRO\n&LABEL   FTCLOSE &P1,                                                  *\n               &P2,                                                    *\n               &P3,                                                    *\n               &NAME=,                  MEMBER                         *\n               &LIBRARY=,               LIBRARY                        *\n               &NOREPL=,                ISPF KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         AIF   ('&SPFLVL' NE '1').NL1\n&LABEL   @FTCLOSE &P1,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&NOREPL' EQ '').K1\n         AIF   ('&NOREPL'(1,1) NE '''' OR '&NOREPL' EQ '''NOREPL''').K1\n         MNOTE 4,'WARNING - NOREPL KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&NAME' EQ '').CNT1\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIBRARY' EQ '').CNT2\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&NOREPL' EQ '').CNT3\n         AIF   ('&NOREPL'(1,1) EQ '''').GENLIT\n.CNT3    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTCLOSE).BYP20\nFTCLOSE  DC    CL8'FTCLOSE'             ISPF KEYWORD\n&SPFFTCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&NAME' EQ '').BYP40\n         AIF   ('&NAME'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&NAME                 GENERATED MEMBER\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   ('&NOREPL' EQ '').BYP60\n         AIF   ('&NOREPL'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOREPL               ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTCLOSE               GET ADDRESS OF FTCLOSE KEYWORD\n         AIF   ('&NAME' EQ '').BYP100\n         AIF   ('&NAME'(1,1) EQ '''').BYP110\n         LA    15,&NAME                 GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP140\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIBRARY               GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         AIF   ('&NOREPL' EQ '').BYP170\n         AIF   ('&NOREPL'(1,1) EQ '''').BYP175\n         LA    1,&NOREPL                GET ADDRESS OF KEYWORD\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR KEYWORD\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFX&NDX               GET GENNED NOREPL\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTCLOSE)               BROWSE LITERAL\n         AIF   ('&NAME' EQ '').BYP200\n         AIF   ('&NAME'(1,1) EQ '''').BYP210\n         DC    A(&NAME)                 ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP240\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIBRARY)              ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\n         AIF   ('&NOREPL' EQ '').BYP270\n         AIF   ('&NOREPL'(1,1) EQ '''').BYP275\n         DC    A(&NOREPL+X'80000000')   ADDRESS OF KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR KEYWORD\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED NOREPL KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=FTERASE  8512-85095-85095-1207-00169-00169-00000-ISPFDYN\n         MACRO\n&NAME    FTERASE &MEM,                  MEMBER NAME (POSITIONAL)       *\n               &P2,                                                    *\n               &LIBRARY=,               LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @FTERASE &MEM,&P2,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIBRARY' EQ '').CNT2\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTERASE).BYP20\nFTERASE  DC    CL8'FTERASE'             ISPF KEYWORD\n&SPFFTERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED NAME\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTERASE               GET ADDRESS OF FTERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP140\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIBRARY               GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP240\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=FTINCL   8512-85095-85095-1207-00170-00170-00000-ISPFDYN\n         MACRO\n&NAME    FTINCL &SKEL,                  (POSITIONAL MEMBER NAME)       *\n               &P2,                                                    *\n               &NOFT=,                  NOFT KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTINCL,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @FTINCL &SKEL,&P2,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&SKEL' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&NOFT' EQ '').K1\n         AIF   ('&NOFT'(1,1) NE '''' OR '&NOFT' EQ '''NOFT''').K1\n         MNOTE 4,'WARNING - NOFT KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTINCL).GENLIT\n         AIF   ('&SKEL' EQ '').CNT1\n         AIF   ('&SKEL'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NOFT' EQ '').CNT2\n         AIF   ('&NOFT'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTINCL).BYP20\nFTINCL   DC    CL8'FTINCL'              ISPF KEYWORD\n&SPFFTINCL SETB 1\n.BYP20   ANOP\n         AIF   ('&SKEL' EQ '').BYP40\n         AIF   ('&SKEL'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SKEL                 GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&NOFT' EQ '').BYP60\n         AIF   ('&NOFT'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOFT                 NOFT KEYWORD\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTINCL                GET ADDRESS OF FTINCL KEYWORD\n         AIF   ('&SKEL' EQ '').BYP100\n         AIF   ('&SKEL'(1,1) EQ '''').BYP110\n         LA    15,&SKEL                 GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&NOFT' EQ '').BYP170\n         AIF   ('&NOFT'(1,1) EQ '''').BYP175\n         LA    0,&NOFT                  GET ADDRESS OF NOFT\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOFT\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    0,SPFX&NDX               GET GENNED NOFT KWYWORD\n.BYP180  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTINCL)                BROWSE LITERAL\n         AIF   ('&SKEL' EQ '').BYP200\n         AIF   ('&SKEL'(1,1) EQ '''').BYP210\n         DC    A(&SKEL)                 ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&NOFT' EQ '').BYP270\n         AIF   ('&NOFT'(1,1) EQ '''').BYP275\n         DC    A(&NOFT+X'80000000')     ADDRESS OF NOFT KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR NOFT\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED NOFT KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SKELETON NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=FTOPEN   8512-85095-85095-1207-00137-00137-00000-ISPFDYN\n         MACRO\n&NAME    FTOPEN &P1,&TEMP=,             TEMP KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTOPEN,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEM\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @FTOPEN &P1,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEM     SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEM     SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&TEMP' EQ '').K1\n         AIF   ('&TEMP'(1,1) NE '''' OR '&TEMP' EQ '''TEMP''').K1\n         MNOTE 4,'WARNING - TEMP KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTOPEN).GENLIT\n         AIF   ('&TEMP' EQ '').CNT1\n         AIF   ('&TEMP'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTOPEN).BYP20\nFTOPEN   DC    CL8'FTOPEN'              ISPF KEYWORD\n&SPFFTOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TEMP' EQ '').BYP60\n         AIF   ('&TEMP'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&TEMP                 ISPF TEMP KEYWORD\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTOPEN                GET ADDRESS OF FTOPEN KEYWORD\n         AIF   ('&TEMP' EQ '').BYP170\n         AIF   ('&TEMP'(1,1) EQ '''').BYP175\n         LA    15,&TEMP                 GET ADDRESS OF TEMP\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TEMP\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    15,SPFX&NDX              GET GENNED TEMP KEYWORD\n.BYP180  ANOP\n         STM   14,15,&TEM               STORE PARAMETERS\n         OI    &TEM+4,X'80'             MARK LAST PARM\n         LA    1,&TEM                   GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTOPEN)                BROWSE LITERAL\n         AIF   ('&TEMP' EQ '').BYP270\n         AIF   ('&TEMP'(1,1) EQ '''').BYP275\n         DC    A(&TEMP+X'80000000')     ADDRESS OF TEMP KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TEMP\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED TEMP KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR TEMP PARM - FOUND ''&TEMP'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=GETMSG   8512-85095-85095-1207-00274-00274-00000-ISPFDYN\n         MACRO\n&NAME    GETMSG &P1,                                                   *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &MSG=,                   MESSAGE NAME                   *\n               &SHORTMSG=,              VAR FOR SHORT MESSAGE          *\n               &LONGMSG=,               VAR FOR LONG MESSAGE           *\n               &ALARM=,                 VAR FOR ALARM VALUE            *\n               &HELP=,                  VAR FOR HELP PANEL             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFGETMSG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @GETMSG &P1,&P2,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&MSG' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFGETMSG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SHORTMSG' EQ '').CNT2\n         AIF   ('&SHORTMSG'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&LONGMSG' EQ '').CNT3\n         AIF   ('&LONGMSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ALARM' EQ '').CNT4\n         AIF   ('&ALARM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&HELP' EQ '').CNT5\n         AIF   ('&HELP'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFGETMSG).BYP20\nGETMSG   DC    CL8'GETMSG'              ISPF KEYWORD\n&SPFGETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP30\n         AIF   ('&MSG'(1,1) NE '''').BYP30\nSPFM&NDX DC    CL8&MSG                  GENERATED MESSAGE NAME\n.BYP30   ANOP\n         AIF   ('&SHORTMSG' EQ '').BYP40\n         AIF   ('&SHORTMSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SHORTMSG             GENERATED SHORT MESSAGE\n.BYP40   ANOP\n         AIF   ('&LONGMSG' EQ '').BYP50\n         AIF   ('&LONGMSG'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LONGMSG              GENERATED LONG MESSAGE\n.BYP50   ANOP\n         AIF   ('&ALARM' EQ '').BYP60\n         AIF   ('&ALARM'(1,1) NE '''').BYP60\nSPFA&NDX DC    CL8&ALARM                GENERATED ALARM VAR FIELD\n.BYP60   ANOP\n         AIF   ('&HELP' EQ '').BYP70\n         AIF   ('&HELP'(1,1) NE '''').BYP70\nSPFH&NDX DC    CL8&HELP                 GENERATED HELP VAR FIELD\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,GETMSG                GET ADDRESS OF GETMSG KEYWORD\n.*\n         AIF   ('&MSG' EQ '').BYP1000\n         AIF   ('&MSG'(1,1) EQ '''').BYP1010\n         LA    15,&MSG                  GET ADDRESS OF MESSAGE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MSG\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MSG\n.BYP1050 ANOP\n.*\n         AIF   ('&SHORTMSG' EQ '').BYP1100\n         AIF   ('&SHORTMSG'(1,1) EQ '''').BYP1110\n         LA    0,&SHORTMSG              GET ADDRESS OF SHORT MSG\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SHORT MSG\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SHORT\n.BYP1150 ANOP\n.*\n         AIF   ('&LONGMSG' EQ '').BYP1200\n         AIF   ('&LONGMSG'(1,1) EQ '''').BYP1210\n         LA    1,&LONGMSG               GET ADDRESS OF LONG MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LONG MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LONG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ALARM' EQ '').BYP1300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP1310\n         LA    14,&ALARM                GET ADDRESS OF ALARM NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ALARM\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFA&NDX              GET ADDRESS OF GENERATED ALARM\n.BYP1350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP1400\n         AIF   ('&HELP'(1,1) EQ '''').BYP1410\n         LA    15,&HELP                 GET ADDRESS OF HELP NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR HELP\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENERATED HELP\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(GETMSG)                GETMSG LITERAL\n.*\n         AIF   ('&MSG' EQ '').BYP2000\n         AIF   ('&MSG'(1,1) EQ '''').BYP2010\n         DC    A(&MSG)                  ADDRESS OF MESSAGE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2050 ANOP\n.*\n         AIF   ('&SHORTMSG' EQ '').BYP2100\n         AIF   ('&SHORTMSG'(1,1) EQ '''').BYP2110\n         DC    A(&SHORTMSG)             ADDRESS OF SHORT MSG\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SHORT MSG\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SHORT MSG\n.BYP2150 ANOP\n.*\n         AIF   ('&LONGMSG' EQ '').BYP2200\n         AIF   ('&LONGMSG'(1,1) EQ '''').BYP2210\n         DC    A(&LONGMSG)              ADDRESS OF LONG MESSAGE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LONG MESSAGE\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LONG MES\n.BYP2250 ANOP\n.*\n         AIF   ('&ALARM' EQ '').BYP2300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP2310\n         DC    A(&ALARM)                ADDRESS OF ALARM NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALARM\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALARM\n.BYP2350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP2800\n         AIF   ('&HELP'(1,1) EQ '''').BYP2810\n         DC    A(&HELP+X'80000000')     ADDRESS OF HELP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR HELP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFH&NDX+X'80000000')  ADDRESS OF GENERATED HELP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE MESSAGE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=GRTERM   8512-85095-85095-1207-00094-00094-00000-ISPFDYN\n         MACRO\n&NAME    GRTERM &LOAD=ISPLINK,          ISPF ADDRESS                   *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFGRTERM,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFGRTERM).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFGRTERM).BYP20\nGRTERM   DC    CL8'GRTERM'              ISPF KEYWORD\n&SPFGRTERM SETB 1\n.BYP20   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,GRTERM                GET ADDRESS OF GRTERM KEYWORD\n         ST    14,&TEMP                 STORE PARAMETERS INTO LIST\n         OI    &TEMP,X'80'              MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 0).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 0).BYPVARS\n&SPFVARS SETA  0\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(GRTERM+X'80000000')    GRTERM LITERAL\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=IF       8512-86097-86097-1148-00125-00125-00000-ISPFDYN\n         MACRO\n&USRNAME IF    &REL=,&MASK=,&EXIT=,&ELSE=                     11001.\n         COPY  STRCGBLS\n         LCLB  &VALIDX            VALID_EXIT                  11012.\n         LCLC  &XLABEL            EXIT_LABEL                  11016.\n         LCLC  &LABEL             LABEL                       11018.\n         LCLC  &HOLD              HOLD                        11121.\n         LCLC  &TARGET            TARGET                      11209.\n         STRCTRAC   IF                                        11020.\n&USRNAME STRCPUSH   TYPEVAL=IF,OP1VAL=&ELSE,ENDVAL=1          11022.\n         AIF   (&STRCERR).FIN                                 11030.\n         AIF   ('&REL&MASK' EQ '').M037                       11034.\n         MNOTE 8,' STRC1102 REL= OR MASK= NOT IN PARENTHESES--IGNORED'\n.M037    ANOP\n&LABEL   SETC  '&USRNAME'                                     11038.\n&VALIDX  SETB  ('&EXIT' NE '')                                11040.\n         AIF   ('&SYSLIST(1,1)' NE 'ASYNCH').M045             11042.\n.*       CALL  IF_ASYNCH_BRANCH                               11044.\n         AIF   (NOT &VALIDX).M084                             11080.\n         MNOTE 8,' STRC1101 EXIT= IGNORED WITH \"ASYNCH\"'      11082.\n&VALIDX  SETB  0                                              11083.\n.M084    ANOP\n&LABEL   B     &STRCPFX.END\n&LABEL   SETC  ''                                             11087.\n.*       CORP  IF_ASYNCH_BRANCH                               11088.\n         AGO   .M060                                          11045.\n.M045    ANOP\n.*       CALL  IF_SET_CONDITIONAL_TEST_SPECS                  11046.\n&STRCUBL SETC  '&STRCPFX.END'                                 11106.\n&STRCUFL SETC  '&STRCPFX.BEG'                                 11109.\n&STRCUFC SETB  1                                              11111.\n&STRCFLU SETB  0                                              11113.\n.*       CORP  IF_SET_CONDITIONAL_TEST_SPECS                  11114.\n         AIF   (NOT &VALIDX).M056                             11050.\n.*       CALL  IF_EXIT_SPECS                                  11052.\n         AIF   ('&ELSE' EQ '').M127                           11123.\n         MNOTE 8,' STRC1103 EXIT= IGNORED WITH ELSE='         11125.\n&VALIDX  SETB  0                                              11126.\n         AGO   .M160                                          11127.\n.M127    ANOP\n&HOLD    SETC  '&STRCUBL'                                     11128.\n         STRCXFND  &EXIT                                      11130.\n         AIF   (NOT &STRCDBC).M145                            11136.\n&XLABEL  SETC  '&STRCUBL'                                     11138.\n&STRCUBL SETC  '&HOLD'                                        11139.\n         AGO   .M159                                          11145.\n.M145    ANOP\n&STRCUFL SETC  '&STRCPFX'                                     11146.\n&STRCUFC SETB  0                                              11147.\n&STRCEND(&STRCNST)  SETB  0                                   11148.\n         AIF   (NOT &STRCERR).M159                            11149.\n&STRCUBL SETC  '&STRCPFX'                                     11154.\n&STRCFLU SETB  1                                              11155.\n&STRCERR SETB  0                                              11157.\n.M159    ANOP\n.M160    ANOP\n.*       CORP  IF_EXIT_SPECS                                  11161.\n.M056    ANOP\n.*       CALL  IF_CONDITIONAL_GENERATOR                       11057.\n&STRCFRX SETA  1                                              11173.\n&STRCLSX SETA  N'&SYSLIST                                     11174.\n&STRCUID SETC  'I'                                            11177.\n         AIF   (NOT &STRCDDM).M180                            DEBUGMACS\n         MNOTE *,' STRC1199 CALL CEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(*\n               3),&SYSLIST(4),&SYSLIST(5),...'                DEBUGMACS\n.M180    ANOP\n&LABEL   STRCCEP  &SYSLIST(1),&SYSLIST(2),&SYSLIST(3),&SYSLIST(4),     *\n               &SYSLIST(5),&SYSLIST(6),&SYSLIST(7),&SYSLIST(8),        *\n               &SYSLIST(9),&SYSLIST(10),&SYSLIST(11),&SYSLIST(12),     *\n               &SYSLIST(13),&SYSLIST(14),&SYSLIST(15),&SYSLIST(16),    *\n               &SYSLIST(17),&SYSLIST(18),&SYSLIST(19),&SYSLIST(20),    *\n               &SYSLIST(21),&SYSLIST(22),&SYSLIST(23),&SYSLIST(24),    *\n               &SYSLIST(25),&SYSLIST(26),&SYSLIST(27),&SYSLIST(28),    *\n               &SYSLIST(29),&SYSLIST(30),&SYSLIST(31),&SYSLIST(32),    *\n               &SYSLIST(33),&SYSLIST(34),&SYSLIST(35),&SYSLIST(36),    *\n               &SYSLIST(37),&SYSLIST(38),&SYSLIST(39),&SYSLIST(40),    *\n               &SYSLIST(41),&SYSLIST(42),&SYSLIST(43),&SYSLIST(44),    *\n               &SYSLIST(45),&SYSLIST(46),&SYSLIST(47),&SYSLIST(48),    *\n               &SYSLIST(49),&SYSLIST(50)                      11180.\n         AIF   (&STRCFLU).M200                                11198.\n&LABEL   SETC  ''                                             11202.\n         AGO   .M203                                          11203.\n.M200    ANOP\n&LABEL   SETC  '&STRCUFL'                                     11200.\n.M203    ANOP\n.*       CORP  IF_CONDITIONAL_GENERATOR                       11204.\n.M060    ANOP\n.*       CALL  IF_BLOCK_COUNT                                 11061.\n         AIF   ('&SYSLIST(1,1)' NE 'ASYNCH').M219             11211.\n         AIF   (NOT &STRCDBN).M218                            11213.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M218    AGO   .M258                                          11218.\n.M219    AIF   (NOT (&STRCDBC OR &STRCDBN)).M257              11220.\n         AIF   (NOT (&STRCDBC)).M229                          11222.\n&LABEL   LH    1,&STRCPFX.IFC\n&LABEL   SETC  ''                                             11226.\n         LA    1,1(1)\n         STH   1,&STRCPFX.IFC\n.M229    AIF   ('&XLABEL' NE '').M235                         11231.\n&TARGET  SETC  '&STRCPFX.GO'                                  11233.\n         AGO   .M239                                          11235.\n.M235    ANOP\n&TARGET  SETC  '&XLABEL'                                      11236.\n.M239    ANOP\n&LABEL   B     &TARGET\n         AIF   ('&XLABEL' NE '').M245                         11241.\n&LABEL   SETC  '&TARGET'                                      11243.\n         AGO   .M247                                          11245.\n.M245    ANOP\n&LABEL   SETC  ''                                             11246.\n.M247    ANOP\n         AIF   (NOT &STRCDBN).M252                            11248.\n         DC    C'&STRCNAM(&STRCNST)',0H'0'\n.M252    AIF   (NOT &STRCDBC).M256                            11253.\n&STRCPFX.IFC  DC  H'0' IF COUNT\n.M256    ANOP\n.M257    ANOP\n.M258    ANOP\n.*       CORP  IF_BLOCK_COUNT                                 11259.\n         AIF   ('&LABEL' EQ '').M067                          11064.\n&LABEL   DS    0H\n.M067    AIF   (NOT &VALIDX).M073                             11068.\n         FI\n.M073    ANOP\n.FIN     MEND\n./ ADD NAME=IFEND    8512-86097-86097-1148-00004-00004-00000-ISPFDYN\n         MACRO\n         IFEND  &USRNAME\n         FI     &USRNAME\n         MEND\n./ ADD NAME=ISPEXEC  8512-85095-85095-1207-00143-00143-00000-ISPFDYN\n         MACRO\n&NAME    ISPEXEC &BUFLEN,               MEMBER NAME                    *\n               &BUF,                    LIBRARY NAME                   *\n               &LOAD=ISPEXEC,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         LCLA  &LEN\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&BUF' EQ '').ERR1\n         AIF   ('&BUF'(1,1) EQ '''' AND '&BUFLEN' NE '').WARN\n.CONT    ANOP\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (T'&BUFLEN EQ 'N').GENLIT\n.CNT1    AIF   ('&BUF' EQ '').CNT2\n         AIF   ('&BUF'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   ('&BUFLEN' EQ '').BYP40\n         AIF   (T'&BUFLEN NE 'N').BYP40\n         AIF   ('&BUF'(1,1) EQ '''').BYP40\nSPFL&NDX DC    F'&BUFL'                 BUFFER LENGTH GENERATED\n.BYP40   ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP50\n         CNOP  0,4\n&LEN     SETA  K'&BUF+3\n&LEN     SETA  &LEN/4*4\nSPFB&NDX DC    CL&LEN&BUF               GENERATED ISPEXEC BUFFER\nSPFL&NDX DC    F'&LEN'                  GENERATED ISPEXEC LENGTH\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         AIF   ('&BUFLEN' EQ '').BYP100\n         AIF   ('&BUF'(1,1) EQ '''').BYP100\n         AIF   (T'&BUF EQ 'N').BYP100\n         LA    15,&BUFLEN               GET ADDRESS OF BUFFER LENGTH\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED LENGTH\n.BYP120  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP130\n         LA    0,SPFB&NDX               GET ADDRESS OF GENERATED BUF\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&BUF                   GET ADDRESS OF BUFFER\n         AGO   .BYP150\n.BYP150  ANOP\n         STM   15,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         AIF   ('&BUFLEN' EQ '').BYP200\n         AIF   ('&BUF'(1,1) EQ '''').BYP200\n         AIF   (T'&BUFLEN EQ 'N').BYP200\n         DC    A(&BUFLEN)               ADDRESS OF BUFFER LENGTH\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENNED LENGTH\n.BYP220  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP230\n         DC    A(SPFB&NDX+X'80000000')  ADDRESS OF GENERATED BUFFER\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&BUF+X'80000000')      ADDRESS OF BUFFER\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BUFFER FOR ISPEXEC COMMAND IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.WARN    ANOP\n         MNOTE 4,'BUFFER LENGTH IS IGNORED FOR LITERAL BUFFER'\n         AGO   .CONT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=ISPF     8512-85095-85095-1207-00236-00236-00000-ISPFDYN\n         MACRO\n&NAME    ISPF  &FUNC,                   FUNCTION REQUESTED             *\n               &LIST=SPFPARMS,          FOR ALL FUNCTIONS              *\n               &COUNT=,                 COUNT OF PARM ADDRESSES        *\n               &MINIMUM=,               MINIMUM COUNT OF PARMS         *\n               &ISPLINK=(YES,ISPLINK),  GENERATE ISPLINK FULLWORD      *\n               &ISPEXEC=(NO),           GENERATE ISPEXEC FULLWORD      *\n               &FULL=NO,                GENERATE UNSTRING WORK AREA    *\n               &LEVEL=2,                LEVEL OF MACROS IN USE         *\n               &LASTCC=                 GENERATE EQUATE IN PARMS\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLOAD,&SPFDELETE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         LCLA  &CNT,&LMT\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       EDIT  GENERAL PARAMETERS\n.**********************************************************************\n.*\n         AIF   ('&COUNT' NE '' AND                                     *\n               T'&COUNT NE 'N').ERROR5\n         AIF   ('&MINIMUM' NE '' AND                                   *\n               T'&MINIMUM NE 'N').ERROR5A\n         AIF   ('&ISPLINK(1)' NE 'YES' AND                             *\n               '&ISPLINK(1)' NE 'NO').ERROR6\n         AIF   ('&ISPEXEC(1)' NE 'YES' AND                             *\n               '&ISPEXEC(1)' NE 'NO').ERROR7\n         AIF   ('&FULL' NE 'YES' AND                                   *\n               '&FULL' NE 'NO').ERROR8\n         AIF   ('&MINIMUM' EQ '' OR &MINIMUM LE &SPFVARS).CONT11\n&SPFVARS SETA  &MINIMUM\n.CONT11  ANOP\n.*\n.**********************************************************************\n.*       EDIT FUNCTION\n.**********************************************************************\n.*\n         AIF   ('&FUNC' EQ 'PARMS').PARMS\n         AIF   ('&FUNC' EQ 'LOAD').LOAD\n         AIF   ('&FUNC' EQ 'DELETE').DEL\n         AIF   ('&FUNC' EQ 'DEBUG').DEBUG\n         AIF   ('&FUNC' EQ 'DEBUGOFF').DEBUGOFF\n         AIF   ('&FUNC' EQ 'SUPPRESS').SUPRESS\n         AIF   ('&FUNC' EQ 'RESET').RESET\n         AIF   ('&FUNC' EQ 'SET').SET\n         AGO   .ERROR1\n.*\n.**********************************************************************\n.*       ISPF PARMS FUNCTION\n.**********************************************************************\n.*\n.PARMS   ANOP\n         AIF   (&SPFLOAD AND &SPFDELETE).PARMSG\n         MNOTE 4,'        NO ISPF LOAD AND DELETE HAS BEEN DONE'\n.*\n.**********************************************************************\n.*       GENERATE ISPF PARMS AREA\n.**********************************************************************\n.*\n.PARMSG  AIF   ('&NAME' EQ '').BYP0\n&NAME    DS    0H\n.BYP0    AIF   ('&LIST' EQ '').BYP1\n         AIF   ('&COUNT' NE '').PARMSD\n         AIF   (&SPFVARS EQ 0).DONTGEN\n&LIST    DS    &SPFVARS.F               ISPF PARAMETER LIST\n.DONTGEN ANOP\n&SPFVARC SETA  &SPFVARS\n&SPFVAR  SETB  1\n         AGO   .BYP1\n.PARMSD  ANOP\n         AIF   (&COUNT LT &SPFVARS).ERRVAR\n&LIST    DS    &COUNT.F                 ISPF PARAMETER LIST\n&SPFVARC SETA  &COUNT\n&SPFVAR  SETB  1\n.BYP1    ANOP\n         AIF   ('&ISPLINK(1)' EQ 'NO').BYP2\n&TEMP    SETC  '&ISPLINK(2)'\n         AIF   ('&TEMP' NE '').CONT1\n&TEMP    SETC  'ISPLINK'\n.CONT1   ANOP\n&TEMP    DS    A                        CONTAINS ISPLINK ADDRESS\n.BYP2    ANOP\n         AIF   ('&ISPEXEC(1)' EQ 'NO').BYP3\n&TEMP    SETC  '&ISPEXEC(2)'\n         AIF   ('&TEMP' NE '').CONT2\n&TEMP    SETC  'ISPEXEC'\n.CONT2   ANOP\n&TEMP    DS    A                        CONTAINS ISPEXEC ADDRESS\n.BYP3    ANOP\n         AIF   ('&FULL' EQ 'NO').BYP4\nSPFCMD   DS    CL80                     COMMAND RETURNED FROM UNSTRING\nSPFCMDP  DS    19CL80                   PARMS RETURNED FROM UNSTRING\nSPFCOUNT DS    F                        NUMBER OF PARMS RETURNED\n.BYP4    ANOP\n         AIF   ('&LASTCC' EQ '').BYP5\n&LASTCC  EQU   15                       EQUATE REG 15 TO LASTCC\n.BYP5    ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF LOAD FUNCTION\n.**********************************************************************\n.*\n.LOAD    ANOP\n.*\n.**********************************************************************\n.*       GENERATE ISPF LOAD AREA\n.**********************************************************************\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n&SPFLOAD SETB  1\n         AIF   ('&ISPLINK(1)' NE 'YES').BYP11\n         LOAD  EP=ISPLINK               LOAD ISPLINK\n         AIF   ('&ISPLINK(2)' EQ '').BYP11\n         ST    0,&ISPLINK(2)            STORE ISPLINK ADDRESS\n.BYP11   ANOP\n         AIF   ('&ISPEXEC(1)' NE 'YES').BYP12\n         LOAD  EP=ISPEXEC               LOAD ISPEXEC\n         AIF   ('&ISPEXEC(2)' EQ '').BYP12\n         ST    0,&ISPEXEC(2)            STORE ISPEXEC ADDRESS\n.BYP12   ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF DELETE FUNCTION\n.**********************************************************************\n.*\n.DEL     ANOP\n.*\n.**********************************************************************\n.*       GENERATE ISPF LOAD AREA\n.**********************************************************************\n.*\n         AIF   ('&NAME' EQ '').BYP20\n&NAME    DS    0H\n.BYP20   ANOP\n&SPFDELETE SETB  1\n         AIF   ('&ISPLINK(1)' NE 'YES').BYP21\n         DELETE EP=ISPLINK              DEL ISPLINK\n.BYP21   ANOP\n         AIF   ('&ISPEXEC(1)' NE 'YES').BYP22\n         DELETE EP=ISPEXEC              LOAD ISPLINK\n.BYP22   ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF DEBUG FUNCTION\n.**********************************************************************\n.*\n.DEBUG   ANOP\n&SPFDEBUG SETB 1\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF DEBUGOFF FUNCTION\n.**********************************************************************\n.*\n.DEBUGOFF ANOP\n&SPFDEBUG SETB 0\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF SUPRESS AND GENERATE CODE\n.**********************************************************************\n.*\n.SUPRESS ANOP\n&CNT     SETA  1\n&LMT     SETA  N'&LIST\n.SUPLOOP ANOP\n         AIF   (&CNT GT &LMT).SUPEXIT\n         ISPFSUPP &LIST(&CNT)\n&CNT     SETA  &CNT+1\n         AGO   .SUPLOOP\n.SUPEXIT ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF RESET CODE\n.**********************************************************************\n.*\n.RESET   ANOP\n&CNT     SETA  1\n&LMT     SETA  N'&LIST\n.SUPLOO2 ANOP\n         AIF   (&CNT GT &LMT).SUPEXI2\n         ISPFREST &LIST(&CNT)\n&CNT     SETA  &CNT+1\n         AGO   .SUPLOO2\n.SUPEXI2 ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF SET LEVEL CODE\n.**********************************************************************\n.*\n.SET     ANOP\n&SPFLVL  SETC  '&LEVEL'\n         MEXIT\n.*\n.**********************************************************************\n.*       ERRORS ISSUED FROM MACRO\n.**********************************************************************\n.*\n.ERROR1  ANOP\n         MNOTE 16,'INVALID ISPF FUNCTION - FOUND ''&FUNC'''\n         MEXIT\n.ERROR5  ANOP\n         MNOTE 16,'COUNT= VALUE MUST BE NUMERIC - FOUND ''&COUNT'''\n         MEXIT\n.ERROR5A ANOP\n         MNOTE 16,'MINIMUM= VALUE MUST BE NUMERIC - FOUND ''&MINIMUM'''\n         MEXIT\n.ERROR6  ANOP\n         MNOTE 16,'ISPLINK= VALUE MUST BE YES OR NO - FOUND ''&ISPLINK(*\n               1)'''\n         MEXIT\n.ERROR7  ANOP\n         MNOTE 16,'ISPEXEC= VALUE MUST BE YES OR NO - FOUND ''&ISPEXEC(*\n               1)'''\n         MEXIT\n.ERROR8  ANOP\n         MNOTE 16,'FULL= VALUE MUST BE YES OR NO - FOUND ''&FULL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'COUNT= COUNT IS NOT LARGE ENOUGH FOR LARGEST LIST'\n         MEXIT\n         MEND\n./ ADD NAME=ISPFREST 8512-85095-85095-1208-00534-00534-00000-ISPFDYN\n         MACRO\n         ISPFREST &VAR\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFASIS\n         GBLB  &SPFBIT\n         GBLB  &SPFBROWSE\n         GBLB  &SPFCANCEL\n         GBLB  &SPFCHAR\n         GBLB  &SPFCONTROL\n         GBLB  &SPFDISABLE\n         GBLB  &SPFDISPLAY\n         GBLB  &SPFEDIT\n         GBLB  &SPFEDREC\n         GBLB  &SPFENABLE\n         GBLB  &SPFENTER\n         GBLB  &SPFEND\n         GBLB  &SPFERRORS\n         GBLB  &SPFFIXED\n         GBLB  &SPFFTCLOSE\n         GBLB  &SPFFTERASE\n         GBLB  &SPFFTINCL\n         GBLB  &SPFFTOPEN\n         GBLB  &SPFGETMSG\n         GBLB  &SPFGRTERM\n         GBLB  &SPFHEX\n         GBLB  &SPFISPEXEC\n         GBLB  &SPFISREDIT\n         GBLB  &SPFLINE\n         GBLB  &SPFLOCK\n         GBLB  &SPFLOG\n         GBLB  &SPFLOCATE\n         GBLB  &SPFMOVE\n         GBLB  &SPFNEWCOPY\n         GBLB  &SPFNEXT\n         GBLB  &SPFNO\n         GBLB  &SPFNOCMD\n         GBLB  &SPFNOFT\n         GBLB  &SPFNONDISPL\n         GBLB  &SPFNOREAD\n         GBLB  &SPFNOREPL\n         GBLB  &SPFNOWRITE\n         GBLB  &SPFORDER\n         GBLB  &SPFPREVIOUS\n         GBLB  &SPFPROFILE\n         GBLB  &SPFREFRESH\n         GBLB  &SPFREPLCOPY\n         GBLB  &SPFREPLACE\n         GBLB  &SPFRESTORE\n         GBLB  &SPFRETURN\n         GBLB  &SPFSAVE\n         GBLB  &SPFSELECT\n         GBLB  &SPFSETMSG\n         GBLB  &SPFSHARE\n         GBLB  &SPFSHARED\n         GBLB  &SPFSM\n         GBLB  &SPFSPLIT\n         GBLB  &SPFTBADD\n         GBLB  &SPFTBBOTTOM\n         GBLB  &SPFTBCLOSE\n         GBLB  &SPFTBCREATE\n         GBLB  &SPFTBDELETE\n         GBLB  &SPFTBDISPL\n         GBLB  &SPFTBEND\n         GBLB  &SPFTBERASE\n         GBLB  &SPFTBEXIST\n         GBLB  &SPFTBGET\n         GBLB  &SPFTBMOD\n         GBLB  &SPFTBOPEN\n         GBLB  &SPFTBPUT\n         GBLB  &SPFTBQUERY\n         GBLB  &SPFTBSARG\n         GBLB  &SPFTBSAVE\n         GBLB  &SPFTBSCAN\n         GBLB  &SPFTBSKIP\n         GBLB  &SPFTBSORT\n         GBLB  &SPFTBSTATS\n         GBLB  &SPFTBTOP\n         GBLB  &SPFTBVCLEAR\n         GBLB  &SPFTEMP\n         GBLB  &SPFUSER\n         GBLB  &SPFVCOPY\n         GBLB  &SPFVDEFINE\n         GBLB  &SPFVDELETE\n         GBLB  &SPFVGET\n         GBLB  &SPFVPUT\n         GBLB  &SPFVREPLACE\n         GBLB  &SPFVRESET\n         GBLB  &SPFWRITE\n         GBLB  &SPFYES\n.*\n.**********************************************************************\n.*       AIF CODE\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ASIS' AND '&VAR' NE 'ALL').B50\n&SPFASIS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B50     ANOP\n.*\n         AIF   ('&VAR' NE 'BIT' AND '&VAR' NE 'ALL').B60\n&SPFBIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B60     ANOP\n.*\n         AIF   ('&VAR' NE 'BROWSE' AND '&VAR' NE 'ALL').B100\n&SPFBROWSE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B100    ANOP\n.*\n         AIF   ('&VAR' NE 'CANCEL' AND '&VAR' NE 'ALL').B110\n&SPFCANCEL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B110    ANOP\n.*\n         AIF   ('&VAR' NE 'CHAR' AND '&VAR' NE 'ALL').B115\n&SPFCHAR SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B115    ANOP\n.*\n         AIF   ('&VAR' NE 'CONTROL' AND '&VAR' NE 'ALL').B200\n&SPFCONTROL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B200    ANOP\n.*\n         AIF   ('&VAR' NE 'DISABLE' AND '&VAR' NE 'ALL').B210\n&SPFDISABLE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B210    ANOP\n.*\n         AIF   ('&VAR' NE 'DISPLAY' AND '&VAR' NE 'ALL').B300\n&SPFDISPLAY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B300    ANOP\n.*\n         AIF   ('&VAR' NE 'EDIT' AND '&VAR' NE 'ALL').B400\n&SPFEDIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B400    ANOP\n.*\n         AIF   ('&VAR' NE 'EDREC' AND   '&VAR' NE 'ALL').B500\n&SPFEDREC SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B500    ANOP\n.*\n         AIF   ('&VAR' NE 'END' AND     '&VAR' NE 'ALL').B510\n&SPFEND SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B510    ANOP\n.*\n         AIF   ('&VAR' NE 'ENABLE' AND  '&VAR' NE 'ALL').B515\n&SPFENABLE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B515    ANOP\n.*\n         AIF   ('&VAR' NE 'ENTER' AND   '&VAR' NE 'ALL').B520\n&SPFENTER SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B520    ANOP\n.*\n         AIF   ('&VAR' NE 'ERRORS' AND  '&VAR' NE 'ALL').B525\n&SPFERRORS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B525    ANOP\n.*\n         AIF   ('&VAR' NE 'FIXED' AND   '&VAR' NE 'ALL').B550\n&SPFFIXED SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B550    ANOP\n.*\n         AIF   ('&VAR' NE 'FTCLOSE' AND '&VAR' NE 'ALL').B600\n&SPFFTCLOSE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B600    ANOP\n.*\n         AIF   ('&VAR' NE 'FTERASE' AND '&VAR' NE 'ALL').B700\n&SPFFTERASE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B700    ANOP\n.*\n         AIF   ('&VAR' NE 'FTINCL' AND '&VAR' NE 'ALL').B800\n&SPFFTINCL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B800    ANOP\n.*\n         AIF   ('&VAR' NE 'FTOPEN' AND '&VAR' NE 'ALL').B900\n&SPFFTOPEN SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B900    ANOP\n.*\n         AIF   ('&VAR' NE 'GETMSG' AND '&VAR' NE 'ALL').B1000\n&SPFGETMSG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1000   ANOP\n.*\n         AIF   ('&VAR' NE 'GRTERM' AND '&VAR' NE 'ALL').B1100\n&SPFGRTERM SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1100   ANOP\n.*\n         AIF   ('&VAR' NE 'HEX' AND '&VAR' NE 'ALL').B1125\n&SPFHEX SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1125   ANOP\n.*\n         AIF   ('&VAR' NE 'ISPEXEC' AND '&VAR' NE 'ALL').B1150\n&SPFISPEXEC SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1150   ANOP\n.*\n         AIF   ('&VAR' NE 'ISREDIT' AND '&VAR' NE 'ALL').B1200\n&SPFISREDIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1200   ANOP\n.*\n         AIF   ('&VAR' NE 'LINE' AND '&VAR' NE 'ALL').B1250\n&SPFLINE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1250   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCK' AND '&VAR' NE 'ALL').B1275\n&SPFLOCK SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1275   ANOP\n.*\n         AIF   ('&VAR' NE 'LOG' AND '&VAR' NE 'ALL').B1300\n&SPFLOG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1300   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCATE' AND '&VAR' NE 'ALL').B1310\n&SPFLOCATE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1310   ANOP\n.*\n         AIF   ('&VAR' NE 'MOVE' AND '&VAR' NE 'ALL').B1320\n&SPFMOVE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1320   ANOP\n.*\n         AIF   ('&VAR' NE 'NEWCOPY' AND '&VAR' NE 'ALL').B1400\n&SPFNEWCOPY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1400   ANOP\n.*\n         AIF   ('&VAR' NE 'NEXT' AND '&VAR' NE 'ALL').B1410\n&SPFNEXT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1410   ANOP\n.*\n         AIF   ('&VAR' NE 'NO' AND '&VAR' NE 'ALL').B1500\n&SPFNO SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1500   ANOP\n.*\n         AIF   ('&VAR' NE 'NOCMD' AND '&VAR' NE 'ALL').B1510\n&SPFNOCMD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1510   ANOP\n.*\n         AIF   ('&VAR' NE 'NOFT' AND '&VAR' NE 'ALL').B1515\n&SPFNOFT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1515   ANOP\n.*\n         AIF   ('&VAR' NE 'NONDISPL' AND '&VAR' NE 'ALL').B1520\n&SPFNONDISPL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1520   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREAD' AND '&VAR' NE 'ALL').B1522\n&SPFNOREAD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1522   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREPL' AND '&VAR' NE 'ALL').B1524\n&SPFNOREPL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1524   ANOP\n.*\n         AIF   ('&VAR' NE 'NOWRITE' AND '&VAR' NE 'ALL').B1600\n&SPFNOWRITE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1600   ANOP\n.*\n         AIF   ('&VAR' NE 'ORDER' AND '&VAR' NE 'ALL').B1601\n&SPFORDER SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1601   ANOP\n.*\n         AIF   ('&VAR' NE 'PREVIOUS' AND '&VAR' NE 'ALL').B1605\n&SPFPREVIOUS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1605   ANOP\n.*\n         AIF   ('&VAR' NE 'PROFILE' AND '&VAR' NE 'ALL').B1607\n&SPFPROFILE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1607   ANOP\n.*\n         AIF   ('&VAR' NE 'REFRESH' AND '&VAR' NE 'ALL').B1610\n&SPFREFRESH SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1610   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLCOPY' AND '&VAR' NE 'ALL').B1612\n&SPFREPLCOPY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1612   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLACE' AND '&VAR' NE 'ALL').B1614\n&SPFREPLACE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1614   ANOP\n.*\n         AIF   ('&VAR' NE 'RESTORE' AND '&VAR' NE 'ALL').B1620\n&SPFRESTORE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1620   ANOP\n.*\n         AIF   ('&VAR' NE 'SAVE' AND '&VAR' NE 'ALL').B1630\n&SPFSAVE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1630   ANOP\n.*\n         AIF   ('&VAR' NE 'SELECT' AND '&VAR' NE 'ALL').B1700\n&SPFSELECT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1700   ANOP\n.*\n         AIF   ('&VAR' NE 'SETMSG' AND '&VAR' NE 'ALL').B1800\n&SPFSETMSG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1800   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARE' AND '&VAR' NE 'ALL').B1805\n&SPFSHARE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1805   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARED' AND '&VAR' NE 'ALL').B1807\n&SPFSHARED SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1807   ANOP\n.*\n         AIF   ('&VAR' NE 'SPLIT' AND '&VAR' NE 'ALL').B1810\n&SPFSPLIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1810   ANOP\n.*\n         AIF   ('&VAR' NE 'TBADD' AND '&VAR' NE 'ALL').B1900\n&SPFTBADD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBBOTTOM' AND '&VAR' NE 'ALL').B2000\n&SPFTBBOTTOM SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCLOSE' AND '&VAR' NE 'ALL').B2100\n&SPFTBCLOSE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCREATE' AND '&VAR' NE 'ALL').B2200\n&SPFTBCREATE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDELETE' AND '&VAR' NE 'ALL').B2300\n&SPFTBDELETE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDISPL' AND '&VAR' NE 'ALL').B2400\n&SPFTBDISPL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEND' AND '&VAR' NE 'ALL').B2500\n&SPFTBEND SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBERASE' AND '&VAR' NE 'ALL').B2600\n&SPFTBERASE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEXIST' AND '&VAR' NE 'ALL').B2700\n&SPFTBEXIST SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2700   ANOP\n.*\n         AIF   ('&VAR' NE 'TBGET' AND '&VAR' NE 'ALL').B2800\n&SPFTBGET SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBMOD' AND '&VAR' NE 'ALL').B2900\n&SPFTBMOD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBOPEN' AND '&VAR' NE 'ALL').B3000\n&SPFTBOPEN SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBPUT' AND '&VAR' NE 'ALL').B3100\n&SPFTBPUT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBQUERY' AND '&VAR' NE 'ALL').B3200\n&SPFTBQUERY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSARG' AND '&VAR' NE 'ALL').B3300\n&SPFTBSARG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSAVE' AND '&VAR' NE 'ALL').B3400\n&SPFTBSAVE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSCAN' AND '&VAR' NE 'ALL').B3500\n&SPFTBSCAN SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSKIP' AND '&VAR' NE 'ALL').B3600\n&SPFTBSKIP SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSORT' AND '&VAR' NE 'ALL').B3700\n&SPFTBSORT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3700   ANOP\n         AIF   ('&VAR' NE 'TBSTATS' AND '&VAR' NE 'ALL').B3750\n&SPFTBSTATS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3750   ANOP\n.*\n         AIF   ('&VAR' NE 'TBTOP' AND '&VAR' NE 'ALL').B3800\n&SPFTBTOP SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBVCLEAR' AND '&VAR' NE 'ALL').B3900\n&SPFTBVCLEAR SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3900   ANOP\n.*\n         AIF   ('&VAR' NE 'TEMP' AND '&VAR' NE 'ALL').B3950\n&SPFTEMP SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3950   ANOP\n.*\n         AIF   ('&VAR' NE 'USER' AND '&VAR' NE 'ALL').B3955\n&SPFUSER SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3955   ANOP\n.*\n         AIF   ('&VAR' NE 'VCOPY' AND '&VAR' NE 'ALL').B4000\n&SPFVCOPY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4000   ANOP\n.*\n         AIF   ('&VAR' NE 'VDEFINE' AND '&VAR' NE 'ALL').B4100\n&SPFVDEFINE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4100   ANOP\n.*\n         AIF   ('&VAR' NE 'VDELETE' AND '&VAR' NE 'ALL').B4200\n&SPFVDELETE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4200   ANOP\n.*\n         AIF   ('&VAR' NE 'VGET' AND '&VAR' NE 'ALL').B4300\n&SPFVGET SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4300   ANOP\n.*\n         AIF   ('&VAR' NE 'VPUT' AND '&VAR' NE 'ALL').B4400\n&SPFVPUT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4400   ANOP\n.*\n         AIF   ('&VAR' NE 'VREPLACE' AND '&VAR' NE 'ALL').B4500\n&SPFVREPLACE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4500   ANOP\n.*\n         AIF   ('&VAR' NE 'VRESET' AND '&VAR' NE 'ALL').B4600\n&SPFVRESET SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4600   ANOP\n.*\n         AIF   ('&VAR' NE 'WRITE' AND '&VAR' NE 'ALL').B4700\n&SPFWRITE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4700   ANOP\n.*\n         AIF   ('&VAR' NE 'YES' AND '&VAR' NE 'ALL').B4800\n&SPFYES SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4800   ANOP\n.*\n.*\n.**********************************************************************\n.*       CHECK FOR ERRORS\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ALL').ERR1\n.EXIT    MEXIT\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR LIST - FOUND ''&VAR'''\n         AGO   .EXIT\n         MEND\nX        CSECT\n         ISPF  SUPPRESS,LIST=CONTROL\n         CONTROL ERRORS,CANCEL\n         ISPF  RESET,LIST=CONTROL\n         CONTROL ERRORS,CANCEL\n         END\n./ ADD NAME=ISPFSUPP 8512-85095-85095-1208-00631-00631-00000-ISPFDYN\n         MACRO\n         ISPFSUPP &VAR\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFASIS\n         GBLB  &SPFBIT\n         GBLB  &SPFBROWSE\n         GBLB  &SPFCANCEL\n         GBLB  &SPFCHAR\n         GBLB  &SPFCONTROL\n         GBLB  &SPFDISABLE\n         GBLB  &SPFDISPLAY\n         GBLB  &SPFEDIT\n         GBLB  &SPFEDREC\n         GBLB  &SPFENABLE\n         GBLB  &SPFENTER\n         GBLB  &SPFEND\n         GBLB  &SPFERRORS\n         GBLB  &SPFFIXED\n         GBLB  &SPFFTCLOSE\n         GBLB  &SPFFTERASE\n         GBLB  &SPFFTINCL\n         GBLB  &SPFFTOPEN\n         GBLB  &SPFGETMSG\n         GBLB  &SPFGRTERM\n         GBLB  &SPFHEX\n         GBLB  &SPFINPUT\n         GBLB  &SPFISPEXEC\n         GBLB  &SPFISREDIT\n         GBLB  &SPFLINE\n         GBLB  &SPFLOCK\n         GBLB  &SPFLOG\n         GBLB  &SPFLOCATE\n         GBLB  &SPFMOVE\n         GBLB  &SPFNEWCOPY\n         GBLB  &SPFNEXT\n         GBLB  &SPFNO\n         GBLB  &SPFNOCMD\n         GBLB  &SPFNOFT\n         GBLB  &SPFNONDISPL\n         GBLB  &SPFNOREAD\n         GBLB  &SPFNOREPL\n         GBLB  &SPFNOWRITE\n         GBLB  &SPFORDER\n         GBLB  &SPFOUTPUT\n         GBLB  &SPFPREVIOUS\n         GBLB  &SPFPROFILE\n         GBLB  &SPFREFRESH\n         GBLB  &SPFREPLCOPY\n         GBLB  &SPFREPLACE\n         GBLB  &SPFRESTORE\n         GBLB  &SPFRETURN\n         GBLB  &SPFSAVE\n         GBLB  &SPFSELECT\n         GBLB  &SPFSETMSG\n         GBLB  &SPFSHARE\n         GBLB  &SPFSHARED\n         GBLB  &SPFSM\n         GBLB  &SPFSPLIT\n         GBLB  &SPFTBADD\n         GBLB  &SPFTBBOTTOM\n         GBLB  &SPFTBCLOSE\n         GBLB  &SPFTBCREATE\n         GBLB  &SPFTBDELETE\n         GBLB  &SPFTBDISPL\n         GBLB  &SPFTBEND\n         GBLB  &SPFTBERASE\n         GBLB  &SPFTBEXIST\n         GBLB  &SPFTBGET\n         GBLB  &SPFTBMOD\n         GBLB  &SPFTBOPEN\n         GBLB  &SPFTBPUT\n         GBLB  &SPFTBQUERY\n         GBLB  &SPFTBSARG\n         GBLB  &SPFTBSAVE\n         GBLB  &SPFTBSCAN\n         GBLB  &SPFTBSKIP\n         GBLB  &SPFTBSORT\n         GBLB  &SPFTBSTATS\n         GBLB  &SPFTBTOP\n         GBLB  &SPFTBVCLEAR\n         GBLB  &SPFTEMP\n         GBLB  &SPFUSER\n         GBLB  &SPFVCOPY\n         GBLB  &SPFVDEFINE\n         GBLB  &SPFVDELETE\n         GBLB  &SPFVGET\n         GBLB  &SPFVPUT\n         GBLB  &SPFVREPLACE\n         GBLB  &SPFVRESET\n         GBLB  &SPFWRITE\n         GBLB  &SPFYES\n.*\n         GBLB  &SPFLMCLOSE\n         GBLB  &SPFLMERASE\n         GBLB  &SPFLMFREE\n         GBLB  &SPFLMGET\n         GBLB  &SPFLMINIT\n         GBLB  &SPFLMMADD\n         GBLB  &SPFLMMDEL\n         GBLB  &SPFLMMFIND\n         GBLB  &SPFLMMLIST\n         GBLB  &SPFLMMREN\n         GBLB  &SPFLMMREP\n         GBLB  &SPFLMOPEN\n         GBLB  &SPFLMPUT\n         GBLB  &SPFLMQUERY\n         GBLB  &SPFLMRENAME\n.*\n.**********************************************************************\n.*       AIF CODE\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ASIS' AND '&VAR' NE 'ALL').B50\n&SPFASIS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B50     ANOP\n.*\n         AIF   ('&VAR' NE 'BIT' AND '&VAR' NE 'ALL').B60\n&SPFBIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B60     ANOP\n.*\n         AIF   ('&VAR' NE 'BROWSE' AND '&VAR' NE 'ALL').B100\n&SPFBROWSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B100    ANOP\n.*\n         AIF   ('&VAR' NE 'CANCEL' AND '&VAR' NE 'ALL').B110\n&SPFCANCEL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B110    ANOP\n.*\n         AIF   ('&VAR' NE 'CHAR' AND '&VAR' NE 'ALL').B115\n&SPFCHAR SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B115    ANOP\n.*\n         AIF   ('&VAR' NE 'CONTROL' AND '&VAR' NE 'ALL').B200\n&SPFCONTROL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B200    ANOP\n.*\n         AIF   ('&VAR' NE 'DISABLE' AND '&VAR' NE 'ALL').B210\n&SPFDISABLE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B210    ANOP\n.*\n         AIF   ('&VAR' NE 'DISPLAY' AND '&VAR' NE 'ALL').B300\n&SPFDISPLAY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B300    ANOP\n.*\n         AIF   ('&VAR' NE 'EDIT' AND '&VAR' NE 'ALL').B400\n&SPFEDIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B400    ANOP\n.*\n         AIF   ('&VAR' NE 'EDREC' AND   '&VAR' NE 'ALL').B500\n&SPFEDREC SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B500    ANOP\n.*\n         AIF   ('&VAR' NE 'END' AND     '&VAR' NE 'ALL').B510\n&SPFEND SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B510    ANOP\n.*\n         AIF   ('&VAR' NE 'ENABLE' AND  '&VAR' NE 'ALL').B515\n&SPFENABLE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B515    ANOP\n.*\n         AIF   ('&VAR' NE 'ENTER' AND   '&VAR' NE 'ALL').B520\n&SPFENTER SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B520    ANOP\n.*\n         AIF   ('&VAR' NE 'ERRORS' AND  '&VAR' NE 'ALL').B525\n&SPFERRORS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B525    ANOP\n.*\n         AIF   ('&VAR' NE 'FIXED' AND   '&VAR' NE 'ALL').B550\n&SPFFIXED SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B550    ANOP\n.*\n         AIF   ('&VAR' NE 'FTCLOSE' AND '&VAR' NE 'ALL').B600\n&SPFFTCLOSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B600    ANOP\n.*\n         AIF   ('&VAR' NE 'FTERASE' AND '&VAR' NE 'ALL').B700\n&SPFFTERASE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B700    ANOP\n.*\n         AIF   ('&VAR' NE 'FTINCL' AND '&VAR' NE 'ALL').B800\n&SPFFTINCL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B800    ANOP\n.*\n         AIF   ('&VAR' NE 'FTOPEN' AND '&VAR' NE 'ALL').B900\n&SPFFTOPEN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B900    ANOP\n.*\n         AIF   ('&VAR' NE 'GETMSG' AND '&VAR' NE 'ALL').B1000\n&SPFGETMSG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1000   ANOP\n.*\n         AIF   ('&VAR' NE 'GRTERM' AND '&VAR' NE 'ALL').B1100\n&SPFGRTERM SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1100   ANOP\n.*\n         AIF   ('&VAR' NE 'HEX' AND '&VAR' NE 'ALL').B1125\n&SPFHEX SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1125   ANOP\n.*\n         AIF   ('&VAR' NE 'INPUT' AND '&VAR' NE 'ALL').B1140\n&SPFINPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1140   ANOP\n.*\n         AIF   ('&VAR' NE 'ISPEXEC' AND '&VAR' NE 'ALL').B1150\n&SPFISPEXEC SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1150   ANOP\n.*\n         AIF   ('&VAR' NE 'ISREDIT' AND '&VAR' NE 'ALL').B1200\n&SPFISREDIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1200   ANOP\n.*\n         AIF   ('&VAR' NE 'LINE' AND '&VAR' NE 'ALL').B1250\n&SPFLINE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1250   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCK' AND '&VAR' NE 'ALL').B1275\n&SPFLOCK SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1275   ANOP\n.*\n         AIF   ('&VAR' NE 'LOG' AND '&VAR' NE 'ALL').B1300\n&SPFLOG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1300   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCATE' AND '&VAR' NE 'ALL').B1310\n&SPFLOCATE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1310   ANOP\n.*\n         AIF   ('&VAR' NE 'MOVE' AND '&VAR' NE 'ALL').B1320\n&SPFMOVE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1320   ANOP\n.*\n         AIF   ('&VAR' NE 'NEWCOPY' AND '&VAR' NE 'ALL').B1400\n&SPFNEWCOPY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1400   ANOP\n.*\n         AIF   ('&VAR' NE 'NEXT' AND '&VAR' NE 'ALL').B1410\n&SPFNEXT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1410   ANOP\n.*\n         AIF   ('&VAR' NE 'NO' AND '&VAR' NE 'ALL').B1500\n&SPFNO SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1500   ANOP\n.*\n         AIF   ('&VAR' NE 'NOCMD' AND '&VAR' NE 'ALL').B1510\n&SPFNOCMD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1510   ANOP\n.*\n         AIF   ('&VAR' NE 'NOFT' AND '&VAR' NE 'ALL').B1515\n&SPFNOFT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1515   ANOP\n.*\n         AIF   ('&VAR' NE 'NONDISPL' AND '&VAR' NE 'ALL').B1520\n&SPFNONDISPL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1520   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREAD' AND '&VAR' NE 'ALL').B1522\n&SPFNOREAD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1522   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREPL' AND '&VAR' NE 'ALL').B1524\n&SPFNOREPL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1524   ANOP\n.*\n         AIF   ('&VAR' NE 'NOWRITE' AND '&VAR' NE 'ALL').B1600\n&SPFNOWRITE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1600   ANOP\n.*\n         AIF   ('&VAR' NE 'ORDER' AND '&VAR' NE 'ALL').B1601\n&SPFORDER SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1601   ANOP\n.*\n         AIF   ('&VAR' NE 'OUTPUT' AND '&VAR' NE 'ALL').B1602\n&SPFOUTPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1602   ANOP\n.*\n         AIF   ('&VAR' NE 'PREVIOUS' AND '&VAR' NE 'ALL').B1605\n&SPFPREVIOUS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1605   ANOP\n.*\n         AIF   ('&VAR' NE 'PROFILE' AND '&VAR' NE 'ALL').B1607\n&SPFPROFILE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1607   ANOP\n.*\n         AIF   ('&VAR' NE 'REFRESH' AND '&VAR' NE 'ALL').B1610\n&SPFREFRESH SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1610   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLCOPY' AND '&VAR' NE 'ALL').B1612\n&SPFREPLCOPY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1612   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLACE' AND '&VAR' NE 'ALL').B1614\n&SPFREPLACE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1614   ANOP\n.*\n         AIF   ('&VAR' NE 'RESTORE' AND '&VAR' NE 'ALL').B1620\n&SPFRESTORE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1620   ANOP\n.*\n         AIF   ('&VAR' NE 'SAVE' AND '&VAR' NE 'ALL').B1630\n&SPFSAVE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1630   ANOP\n.*\n         AIF   ('&VAR' NE 'SELECT' AND '&VAR' NE 'ALL').B1700\n&SPFSELECT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1700   ANOP\n.*\n         AIF   ('&VAR' NE 'SETMSG' AND '&VAR' NE 'ALL').B1800\n&SPFSETMSG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1800   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARE' AND '&VAR' NE 'ALL').B1805\n&SPFSHARE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1805   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARED' AND '&VAR' NE 'ALL').B1807\n&SPFSHARED SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1807   ANOP\n.*\n         AIF   ('&VAR' NE 'SPLIT' AND '&VAR' NE 'ALL').B1810\n&SPFSPLIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1810   ANOP\n.*\n         AIF   ('&VAR' NE 'TBADD' AND '&VAR' NE 'ALL').B1900\n&SPFTBADD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBBOTTOM' AND '&VAR' NE 'ALL').B2000\n&SPFTBBOTTOM SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCLOSE' AND '&VAR' NE 'ALL').B2100\n&SPFTBCLOSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCREATE' AND '&VAR' NE 'ALL').B2200\n&SPFTBCREATE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDELETE' AND '&VAR' NE 'ALL').B2300\n&SPFTBDELETE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDISPL' AND '&VAR' NE 'ALL').B2400\n&SPFTBDISPL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEND' AND '&VAR' NE 'ALL').B2500\n&SPFTBEND SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBERASE' AND '&VAR' NE 'ALL').B2600\n&SPFTBERASE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEXIST' AND '&VAR' NE 'ALL').B2700\n&SPFTBEXIST SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2700   ANOP\n.*\n         AIF   ('&VAR' NE 'TBGET' AND '&VAR' NE 'ALL').B2800\n&SPFTBGET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBMOD' AND '&VAR' NE 'ALL').B2900\n&SPFTBMOD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBOPEN' AND '&VAR' NE 'ALL').B3000\n&SPFTBOPEN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBPUT' AND '&VAR' NE 'ALL').B3100\n&SPFTBPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBQUERY' AND '&VAR' NE 'ALL').B3200\n&SPFTBQUERY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSARG' AND '&VAR' NE 'ALL').B3300\n&SPFTBSARG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSAVE' AND '&VAR' NE 'ALL').B3400\n&SPFTBSAVE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSCAN' AND '&VAR' NE 'ALL').B3500\n&SPFTBSCAN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSKIP' AND '&VAR' NE 'ALL').B3600\n&SPFTBSKIP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSORT' AND '&VAR' NE 'ALL').B3700\n&SPFTBSORT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3700   ANOP\n         AIF   ('&VAR' NE 'TBSTATS' AND '&VAR' NE 'ALL').B3750\n&SPFTBSTATS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3750   ANOP\n.*\n         AIF   ('&VAR' NE 'TBTOP' AND '&VAR' NE 'ALL').B3800\n&SPFTBTOP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBVCLEAR' AND '&VAR' NE 'ALL').B3900\n&SPFTBVCLEAR SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3900   ANOP\n.*\n         AIF   ('&VAR' NE 'TEMP' AND '&VAR' NE 'ALL').B3950\n&SPFTEMP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3950   ANOP\n.*\n         AIF   ('&VAR' NE 'USER' AND '&VAR' NE 'ALL').B3955\n&SPFUSER SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3955   ANOP\n.*\n         AIF   ('&VAR' NE 'VCOPY' AND '&VAR' NE 'ALL').B4000\n&SPFVCOPY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4000   ANOP\n.*\n         AIF   ('&VAR' NE 'VDEFINE' AND '&VAR' NE 'ALL').B4100\n&SPFVDEFINE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4100   ANOP\n.*\n         AIF   ('&VAR' NE 'VDELETE' AND '&VAR' NE 'ALL').B4200\n&SPFVDELETE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4200   ANOP\n.*\n         AIF   ('&VAR' NE 'VGET' AND '&VAR' NE 'ALL').B4300\n&SPFVGET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4300   ANOP\n.*\n         AIF   ('&VAR' NE 'VPUT' AND '&VAR' NE 'ALL').B4400\n&SPFVPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4400   ANOP\n.*\n         AIF   ('&VAR' NE 'VREPLACE' AND '&VAR' NE 'ALL').B4500\n&SPFVREPLACE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4500   ANOP\n.*\n         AIF   ('&VAR' NE 'VRESET' AND '&VAR' NE 'ALL').B4600\n&SPFVRESET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4600   ANOP\n.*\n         AIF   ('&VAR' NE 'WRITE' AND '&VAR' NE 'ALL').B4700\n&SPFWRITE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4700   ANOP\n.*\n         AIF   ('&VAR' NE 'YES' AND '&VAR' NE 'ALL').B4800\n&SPFYES SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4800   ANOP\n.*\n         AIF   ('&VAR' NE 'LMCLOSE' AND '&VAR' NE 'ALL').B4900\n&SPFLMCLOSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4900   ANOP\n.*\n         AIF   ('&VAR' NE 'LMERASE' AND '&VAR' NE 'ALL').B5000\n&SPFLMERASE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5000   ANOP\n.*\n         AIF   ('&VAR' NE 'LMFREE' AND  '&VAR' NE 'ALL').B5100\n&SPFLMFREE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5100   ANOP\n.*\n         AIF   ('&VAR' NE 'LMGET' AND   '&VAR' NE 'ALL').B5200\n&SPFLMGET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5200   ANOP\n.*\n         AIF   ('&VAR' NE 'LMINIT' AND  '&VAR' NE 'ALL').B5300\n&SPFLMINIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5300   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMADD' AND  '&VAR' NE 'ALL').B5400\n&SPFLMMADD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5400   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMDEL' AND  '&VAR' NE 'ALL').B5500\n&SPFLMMDEL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5500   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMFIND' AND '&VAR' NE 'ALL').B5600\n&SPFLMMFIND SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5600   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMLIST' AND '&VAR' NE 'ALL').B5700\n&SPFLMMLIST SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5700   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMREN' AND  '&VAR' NE 'ALL').B5800\n&SPFLMMREN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5800   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMREP' AND  '&VAR' NE 'ALL').B5900\n&SPFLMMREP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5900   ANOP\n.*\n         AIF   ('&VAR' NE 'LMOPEN' AND  '&VAR' NE 'ALL').B6000\n&SPFLMOPEN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6000   ANOP\n.*\n         AIF   ('&VAR' NE 'LMPUT' AND   '&VAR' NE 'ALL').B6100\n&SPFLMPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6100   ANOP\n.*\n         AIF   ('&VAR' NE 'LMQUERY' AND '&VAR' NE 'ALL').B6200\n&SPFLMQUERY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6200   ANOP\n.*\n         AIF   ('&VAR' NE 'LMRENAME' AND '&VAR' NE 'ALL').B6300\n&SPFLMRENAME SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6300   ANOP\n.*\n.*\n.**********************************************************************\n.*       CHECK FOR ERRORS\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ALL').ERR1\n.EXIT    MEXIT\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR LIST - FOUND ''&VAR'''\n         AGO   .EXIT\n         MEND\n./ ADD NAME=ISREDIT  8512-85095-85095-1208-00150-00150-00000-ISPFDYN\n         MACRO\n&NAME    ISREDIT &BUFLEN,               MEMBER NAME                    *\n               &BUF,                    LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFISREDIT,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         LCLA  &LEN\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&BUF' EQ '').ERR1\n         AIF   ('&BUF'(1,1) EQ '''' AND '&BUFLEN' NE '').WARN\n.CONT    ANOP\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFISREDIT).GENLIT\n         AIF   (T'&BUFLEN EQ 'N').GENLIT\n.CNT1    AIF   ('&BUF' EQ '').CNT2\n         AIF   ('&BUF'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFISREDIT).BYP20\nISREDIT  DC    CL8'ISREDIT'             ISPF KEYWORD\n&SPFISREDIT SETB 1\n.BYP20   ANOP\n         AIF   ('&BUFLEN' EQ '').BYP40\n         AIF   (T'&BUFLEN NE 'N').BYP40\n         AIF   ('&BUF'(1,1) EQ '''').BYP40\nSPFL&NDX DC    F'&BUFLEN'               BUFFER LENGTH GENERATED\n.BYP40   ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP50\n         CNOP  0,4\n&LEN     SETA  K'&BUF+3\n&LEN     SETA  &LEN/4*4\nSPFB&NDX DC    CL&LEN&BUF               GENERATED ISREDIT BUFFER\nSPFL&NDX DC    F'&LEN'                  GENERATED ISREDIT LENGTH\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,ISREDIT               GET ADDRESS OF ISREDIT KEYWORD\n         AIF   ('&BUFLEN' EQ '').BYP100\n         AIF   ('&BUF'(1,1) EQ '''').BYP100\n         AIF   (T'&BUFLEN EQ 'N').BYP100\n         LA    15,&BUFLEN               GET ADDRESS OF BUFFER LENGTH\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED LENGTH\n.BYP120  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP130\n         LA    0,SPFB&NDX               GET ADDRESS OF GENERATED BUF\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&BUF                   GET ADDRESS OF BUFFER\n         AGO   .BYP150\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(ISREDIT)               BROWSE LITERAL\n         AIF   ('&BUFLEN' EQ '').BYP200\n         AIF   ('&BUF'(1,1) EQ '''').BYP200\n         AIF   (T'&BUFLEN EQ 'N').BYP200\n         DC    A(&BUFLEN)               ADDRESS OF BUFFER LENGTH\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENNED LENGTH\n.BYP220  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP230\n         DC    A(SPFB&NDX+X'80000000')  ADDRESS OF GENERATED BUFFER\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&BUF+X'80000000')      ADDRESS OF BUFFER\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BUFFER FOR ISREDIT COMMAND IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.WARN    ANOP\n         MNOTE 4,'BUFFER LENGTH IS IGNORED FOR LITERAL BUFFER'\n         AGO   .CONT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMCLOSE  8512-85095-85095-1208-00150-00150-00000-ISPFDYN\n         MACRO\n&LABEL   LMCLOSE &DATAID=,              DATAID NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMCLOSE              GLOBAL FOR LMCLOSE LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMCLOSE).BYP20\nLMCLOSE  DC    CL8'LMCLOSE'             ISPF KEYWORD\n&SPFLMCLOSE SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMCLOSE               GET ADDRESS OF LMCLOSE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         STM   14,15,&TEMP              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMCLOSE)               GET ADDRESS OF LMCLOSE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID+X'80000000')   GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX+X'80000000')  GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMERASE  8512-85095-85095-1208-00218-00218-00000-ISPFDYN\n         MACRO\n&LABEL   LMERASE &PROJECT=,             PROJECT NAME                   *\n               &GROUP=,                 VARIABLE FOR GROUP             *\n               &TYPE=,                  LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMERASE              GLOBAL FOR LMERASE LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&PROJECT' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&PROJECT'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&GROUP' EQ '').CNT2\n         AIF   ('&GROUP'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&TYPE' EQ '').CNT6\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMERASE).BYP20\nLMERASE  DC    CL8'LMERASE'             ISPF KEYWORD\n&SPFLMERASE SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP30\n         AIF   ('&PROJECT'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&PROJECT              GENERATED PROJECT NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BYP50\n         AIF   ('&GROUP'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&GROUP                GROUP NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP90\n         AIF   ('&TYPE'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&TYPE                 TYPE OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMERASE               GET ADDRESS OF LMERASE KEYWORD\n.*\n.*\n         AIF   ('&PROJECT'(1,1) EQ '''').BYP1010\n         LA    15,&PROJECT              GET ADDRESS OF PROJECT NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED PROJECT\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BYP1200\n         AIF   ('&GROUP'(1,1) EQ '''').BYP1210\n         LA    0,&GROUP                 GET ADDRESS OF GROUP VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED GROUP\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP1100\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1110\n         LA    1,&TYPE                  GET ADDRESS OF &TYPE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR TYPE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED TYPE\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMERASE)               GET ADDRESS OF LMERASE KEYWORD\n.*\n.*\n         AIF   ('&PROJECT'(1,1) EQ '''').BY1010\n         DC    A(&PROJECT)              GET ADDRESS OF PROJECT NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED PROJECT\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BY1200\n         AIF   ('&GROUP'(1,1) EQ '''').BY1210\n         DC    A(&GROUP)                GET ADDRESS OF GROUP VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED GROUP\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BY1600\n         AIF   ('&TYPE'(1,1) EQ '''').BY1610\n         DC    A(&TYPE+X'80000000')     GET ADDRESS OF TYPE VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR TYPE\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED TYPE\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'PROJECT NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMFREE   8512-85095-85095-1208-00150-00150-00000-ISPFDYN\n         MACRO\n&LABEL   LMFREE &DATAID=,               DATAID NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMFREE               GLOBAL FOR LMFREE LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMFREE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMFREE).BYP20\nLMFREE   DC    CL8'LMFREE'              ISPF KEYWORD\n&SPFLMFREE SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMFREE                GET ADDRESS OF LMFREE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         STM   14,15,&TEMP              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMFREE)                GET ADDRESS OF LMFREE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID+X'80000000')   GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX+X'80000000')  GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMGET    8512-85095-85095-1208-00284-00284-00000-ISPFDYN\n         MACRO\n&LABEL   LMGET &DATAID=,                DATAID NAME                    *\n               &MODE=,                  MODE                           *\n               &DATALOC=,                                              *\n               &DATALEN=,                                              *\n               &MAXLEN=,                                               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMGET                GLOBAL FOR LMGET LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&MODE' EQ '').CNT2\n         AIF   ('&MODE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DATALOC' EQ '').CNT3\n         AIF   ('&DATALOC'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&DATALEN' EQ '').CNT4\n         AIF   ('&DATALEN'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   (T'&MAXLEN EQ 'N').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMGET).BYP20\nLMGET    DC    CL8'LMGET'               ISPF KEYWORD\n&SPFLMGET SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP40\n         AIF   ('&MODE'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&MODE                 MODE TYPE\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP50\n         AIF   ('&DATALOC'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&DATALOC              DATALOC VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP60\n         AIF   ('&DATALEN'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&DATALEN              DATALEN VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   (T'&MAXLEN NE 'N').BYP70\nSPFD&NDX DC    F'&MAXLEN'               MAXLEN\n.BYP70   ANOP\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMGET                 GET ADDRESS OF LMGET KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP1100\n         AIF   ('&MODE'(1,1) EQ '''').BYP1110\n         LA    0,&MODE                  GET ADDRESS OF &MODE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MODE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET GENNED MODE\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BYP1210\n         LA    1,&DATALOC               GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR DATALOC\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED DATALOC\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP1300\n         AIF   ('&DATALEN'(1,1) EQ '''').BYP1310\n         LA    14,&DATALEN              GET ADDRESS OF DATALEN VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATALEN\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED DATALEN\n.BYP1350 ANOP\n.*\n.*\n         AIF   (T'&MAXLEN EQ 'N').BYP1410\n         AIF   ('&MAXLEN' EQ '').BYP1400\n         LA    15,&MAXLEN               GET ADDRESS OF MAXLEN\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MAXLEN\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED MAXLEN\n.BYP1450 ANOP\n.*\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMGET)                 GET ADDRESS OF LMGET KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BY1100\n         AIF   ('&MODE'(1,1) EQ '''').BY1110\n         DC    A(&MODE)                 GET ADDRESS OF &MODE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MODE\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET GENNED MODE\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BY1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BY1210\n         DC    A(&DATALOC)              GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALOC\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED DATALOC\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BY1300\n         AIF   ('&DATALEN'(1,1) EQ '''').BY1310\n         DC    A(&DATALEN)              GET ADDRESS OF DATALEN VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALEN\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED DATALEN\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&MAXLEN' EQ '').BY1400\n         AIF   (T'&MAXLEN EQ 'N').BY1410\n         DC    A(&MAXLEN+X'80000000')   GET ADDRESS OF MAXLEN VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR MAXLEN\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX+X'80000000')  GET ADDRESS OF GENNED MAXLEN\n.BY1450 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMINIT   8512-85095-85095-1208-00568-00568-00000-ISPFDYN\n         MACRO\n&LABEL   LMINIT &DATAID=,               DATAID NAME                    *\n               &PROJECT=,               PROJECT NAME                   *\n               &GROUP1=,                GROUP 1 NAME                   *\n               &GROUP2=,                GROUP 2 NAME                   *\n               &GROUP3=,                GROUP 3 NAME                   *\n               &GROUP4=,                GROUP 4 NAME                   *\n               &TYPE=,                  TYPE                           *\n               &DATASET=,               DATASET NAME                   *\n               &DDNAME=,                DDNAME                         *\n               &VOLUME=,                VOL SER                        *\n               &PASSWORD=,              PASSWORD                       *\n               &ENQ=,                   ENQ TYPE                       *\n               &ORG=,                   ORGANIZATION                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMINIT               GLOBAL FOR LMINIT LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMINIT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&PROJECT' EQ '').CNT1\n         AIF   ('&PROJECT'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&GROUP1' EQ '').CNT2\n         AIF   ('&GROUP1'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&GROUP2' EQ '').CNT3\n         AIF   ('&GROUP2'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&GROUP3' EQ '').CNT4\n         AIF   ('&GROUP3'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&GROUP4' EQ '').CNT5\n         AIF   ('&GROUP4'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&TYPE' EQ '').CNT6\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&DATASET' EQ '').CNT7\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&DDNAME' EQ '').CNT8\n         AIF   ('&DDNAME'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&VOLUME' EQ '').CNT9\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AIF   ('&PASSWORD' EQ '').CNT10\n         AIF   ('&PASSWORD'(1,1) EQ '''').GENLIT\n.CNT10   ANOP\n         AIF   ('&ENQ' EQ '').CNT11\n         AIF   ('&ENQ'(1,1) EQ '''').GENLIT\n.CNT11   ANOP\n         AIF   ('&ORG' EQ '').CNT12\n         AIF   ('&ORG'(1,1) EQ '''').GENLIT\n.CNT12   ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMINIT).BYP20\nLMINIT   DC    CL8'LMINIT'              ISPF KEYWORD\n&SPFLMINIT SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP40\n         AIF   ('&PROJECT'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&PROJECT              PROJECT VARIABLE NAME\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP50\n         AIF   ('&GROUP1'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&GROUP1               GROUP1 VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP60\n         AIF   ('&GROUP2'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&GROUP2               GROUP2 VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP70\n         AIF   ('&GROUP3'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&GROUP3               GROUP3 VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP80\n         AIF   ('&GROUP4'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&GROUP4               USERE VARIABLE NAME\n.BYP80   ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP90\n         AIF   ('&TYPE'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&TYPE                 TYPE VARIABLE NAME\n.BYP90   ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP100\n         AIF   ('&DATASET'(1,1) NE '''').BYP100\nSPFG&NDX DC    CL56&DATASET             DATASET NAME\n.BYP100  ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP110\n         AIF   ('&DDNAME'(1,1) NE '''').BYP110\nSPFH&NDX DC    CL8&DDNAME               DDNAME VARIABLE NAME\n.BYP110  ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP120\n         AIF   ('&VOLUME'(1,1) NE '''').BYP120\nSPFI&NDX DC    CL6&VOLUME               VOLUME VARIABLE NAME\n.BYP120  ANOP\n.*\n.*\n         AIF   ('&PASSWORD' EQ '').BYP130\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP130\nSPFJ&NDX DC    CL8&PASSWORD             PASSWORD VARIABLE NAME\n.BYP130  ANOP\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP140\n         AIF   ('&ENQ'(1,1) NE '''').BYP140\nSPFK&NDX DC    CL8&ENQ                  ENQ VARIABLE NAME\n.BYP140  ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP150\n         AIF   ('&ORG'(1,1) NE '''').BYP150\nSPFL&NDX DC    CL8&ORG                  ORG VARIABLE NAME\n.BYP150  ANOP\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMINIT                GET ADDRESS OF LMINIT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BYP1110\n         LA    0,&PROJECT               GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROJECT\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED PROJECT\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BYP1210\n         LA    1,&GROUP1                GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR GROUP1\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED GROUP1\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BYP1310\n         LA    14,&GROUP2               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR GROUP2\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED GROUP2\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BYP1410\n         LA    15,&GROUP3               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR GROUP3\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED GROUP3\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BYP1510\n         LA    0,&GROUP4                GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP4\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED GROUP4\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP1600\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1610\n         LA    1,&TYPE                  ADDRESS OF TYPE VARIABLE\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR TYPE\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED TYPE\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP1700\n         AIF   ('&DATASET'(1,1) EQ '''').BYP1710\n         LA    14,&DATASET              ADDRESS OF DATASET NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATASET\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFG&NDX              GET ADDRESS OF GENNED DATASET\n.BYP1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BYP1810\n         LA    15,&DDNAME               ADDRESS OF DDNAME VARIABLE\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DDNAME\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENNED DDNAME\n.BYP1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP1910\n         LA    0,&VOLUME                ADDRESS OF VOLUME VARIABLE\n         AGO   .BYP1950\n.BYP1900 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n         AGO   .BYP1950\n.BYP1910 ANOP\n         LA    0,SPFI&NDX               GET ADDRESS OF GENNED VOLUME\n.BYP1950 ANOP\n.*\n.*\n         AIF   ('&PASSWORD' EQ '').BYP2000\n         AIF   ('&PASSWORD'(1,1) EQ '''').BYP2010\n         LA    1,&PASSWORD              ADDRESS OF PASSWORD VARIABLE\n         AGO   .BYP2050\n.BYP2000 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n         AGO   .BYP2050\n.BYP2010 ANOP\n         LA    1,SPFJ&NDX               GET ADDRESS OF GENNED PASSWORD\n.BYP2050 ANOP\n.*\n.*\n         STM   14,1,&TEMP+32            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP2100\n         AIF   ('&ENQ'(1,1) EQ '''').BYP2110\n         LA    14,&ENQ                  ADDRESS OF ENQ VARIABLE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ENQ\n         AGO   .BYP2150\n.BYP2110 ANOP\n         LA    14,SPFK&NDX              GET ADDRESS OF GENNED ENQ\n.BYP2150 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP2200\n         AIF   ('&ORG'(1,1) EQ '''').BYP2210\n         LA    15,&ORG                  ADDRESS OF ORG VARIABLE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ORG\n         AGO   .BYP2250\n.BYP2210 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED ORG\n.BYP2250 ANOP\n.*\n.*\n         STM   14,15,&TEMP+48           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+52,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 14).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 14).BYPVARS\n&SPFVARS SETA  14\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMINIT)                GET ADDRESS OF LMINIT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BY1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BY1110\n         DC    A(&PROJECT)              GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR PROJECT\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED PROJECT\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BY1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BY1210\n         DC    A(&GROUP1)               GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP1\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED GROUP1\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BY1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BY1310\n         DC    A(&GROUP2)               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP2\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED GROUP2\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BY1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BY1410\n         DC    A(&GROUP3)               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP3\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED GROUP3\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BY1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BY1510\n         DC    A(&GROUP4)               GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP4\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED GROUP4\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BY1600\n         AIF   ('&TYPE'(1,1) EQ '''').BY1610\n         DC    A(&TYPE)                 ADDRESS OF TYPE VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR TYPE\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX)              GET ADDRESS OF GENNED TYPE\n.BY1650 ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BY1700\n         AIF   ('&DATASET'(1,1) EQ '''').BY1710\n         DC    A(&DATASET)              ADDRESS OF DATASET NAME\n         AGO   .BY1750\n.BY1700 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATASET\n         AGO   .BY1750\n.BY1710 ANOP\n         DC    A(SPFG&NDX)              GET ADDRESS OF GENNED DATASET\n.BY1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BY1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BY1810\n         DC    A(&DDNAME)               ADDRESS OF DDNAME VARIABLE\n         AGO   .BY1850\n.BY1800 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DDNAME\n         AGO   .BY1850\n.BY1810 ANOP\n         DC    A(SPFH&NDX)              GET ADDRESS OF GENNED DDNAME\n.BY1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BY1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BY1910\n         DC    A(&VOLUME)               ADDRESS OF VOLUME VARIABLE\n         AGO   .BY1950\n.BY1900 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR VOLUME\n         AGO   .BY1950\n.BY1910 ANOP\n         DC    A(SPFI&NDX)              GET ADDRESS OF GENNED VOLUME\n.BY1950 ANOP\n.*\n.*\n         AIF   ('&PASSWORD' EQ '').BY2000\n         AIF   ('&PASSWORD'(1,1) EQ '''').BY2010\n         DC    A(&PASSWORD)             ADDRESS OF PASSWORD VARIABLE\n         AGO   .BY2050\n.BY2000 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR PASSWORD\n         AGO   .BY2050\n.BY2010 ANOP\n         DC    A(SPFJ&NDX)              GET ADDRESS OF GENNED PASSWORD\n.BY2050 ANOP\n.*\n.*\n         AIF   ('&ENQ' EQ '').BY2100\n         AIF   ('&ENQ'(1,1) EQ '''').BY2110\n         DC    A(&ENQ)                  ADDRESS OF ENQ VARIABLE\n         AGO   .BY2150\n.BY2100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ENQ\n         AGO   .BY2150\n.BY2110 ANOP\n         DC    A(SPFK&NDX)              GET ADDRESS OF GENNED ENQ\n.BY2150 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BY2200\n         AIF   ('&ORG'(1,1) EQ '''').BY2210\n         DC    A(&ORG+X'80000000')      ADDRESS OF ORG VARIABLE\n         AGO   .BY2250\n.BY2200 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR ORG\n         AGO   .BY2250\n.BY2210 ANOP\n         DC    A(SPFL&NDX+X'80000000')  GET ADDRESS OF GENNED ORG\n.BY2250 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMMADD   8512-85095-85095-1208-00218-00218-00000-ISPFDYN\n         MACRO\n&LABEL   LMMADD &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &STATS=,                 LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMADD               GLOBAL FOR LMMADD LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMADD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&STATS' EQ '').CNT6\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMADD).BYP20\nLMMADD   DC    CL8'LMMADD'              ISPF KEYWORD\n&SPFLMMADD SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP90\n         AIF   ('&STATS'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&STATS                STATS OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMADD                GET ADDRESS OF LMMADD KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1100\n         AIF   ('&STATS'(1,1) EQ '''').BYP1110\n         LA    1,&STATS                 GET ADDRESS OF &STATS\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED STATS\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMADD)                GET ADDRESS OF LMMADD KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1600\n         AIF   ('&STATS'(1,1) EQ '''').BY1610\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMMDEL   8512-85095-85095-1208-00186-00186-00000-ISPFDYN\n         MACRO\n&LABEL   LMMDEL &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMDEL               GLOBAL FOR LMMDEL LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMDEL).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMDEL).BYP20\nLMMDEL   DC    CL8'LMMDEL'              ISPF KEYWORD\n&SPFLMMDEL SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMDEL                GET ADDRESS OF LMMDEL KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         STM   14,0,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMDEL)                GET ADDRESS OF LMMDEL KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER+X'80000000')   GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX+X'80000000')  GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMMFIND  8512-85095-85095-1208-00352-00352-00000-ISPFDYN\n         MACRO\n&LABEL   LMMFIND &DATAID=,              DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &LOCK=,                  LOCK OPTION                    *\n               &LRECL=,                 VARIABLE FOR LRECL             *\n               &RECFM=,                 VARIABLE FOR RECFM             *\n               &GROUP=,                 VARIABLE FOR GROUP             *\n               &STATS=,                 VARIABLE FOR STATS             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMFIND              GLOBAL FOR LMMFIND LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMFIND).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&LOCK' EQ '').CNT1\n         AIF   ('&LOCK'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&LRECL' EQ '').CNT3\n         AIF   ('&LRECL'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&RECFM' EQ '').CNT4\n         AIF   ('&RECFM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&GROUP' EQ '').CNT5\n         AIF   ('&GROUP'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&STATS' EQ '').CNT6\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMFIND).BYP20\nLMMFIND  DC    CL8'LMMFIND'             ISPF KEYWORD\n&SPFLMMFIND SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&LOCK' EQ '').BYP40\n         AIF   ('&LOCK'(1,1) NE '''').BYP40\nSPFB&NDX DC    CL8&LOCK                 LOCK OPTION\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP60\n         AIF   ('&LRECL'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&LRECL                LRECL VARIABLE NAME\n.BYP60   ANOP\n         AIF   ('&RECFM' EQ '').BYP70\n         AIF   ('&RECFM'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&RECFM                RECFM VARIABLE NAME\n.BYP70   ANOP\n         AIF   ('&GROUP' EQ '').BYP80\n         AIF   ('&GROUP'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&GROUP                GROUP VARIABLE NAME\n.BYP80   ANOP\n         AIF   ('&STATS' EQ '').BYP90\n         AIF   ('&STATS'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&STATS                STATS OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMFIND               GET ADDRESS OF LMMFIND KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&LOCK' EQ '').BYP1100\n         AIF   ('&LOCK'(1,1) EQ '''').BYP1110\n         LA    1,&LOCK                  GET ADDRESS OF &LOCK\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LOCK\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED LOCK\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP1300\n         AIF   ('&LRECL'(1,1) EQ '''').BYP1310\n         LA    14,&LRECL                GET ADDRESS OF LRECL VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR LRECL\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED LRECL\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BYP1400\n         AIF   ('&RECFM'(1,1) EQ '''').BYP1410\n         LA    15,&RECFM                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR RECFM\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED RECFM\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BYP1500\n         AIF   ('&GROUP'(1,1) EQ '''').BYP1510\n         LA    0,&GROUP                 GET ADDRESS OF GROUP VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED GROUP\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1600\n         AIF   ('&STATS'(1,1) EQ '''').BYP1610\n         LA    1,&STATS                 GET ADDRESS OF STATS KEYWORD\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATS\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED STATS\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMFIND)               GET ADDRESS OF LMMFIND KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&LOCK' EQ '').BY1100\n         AIF   ('&LOCK'(1,1) EQ '''').BY1110\n         DC    A(&LOCK)                 GET ADDRESS OF &LOCK\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR LOCK\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFB&NDX)              GENNED LOCK\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BY1300\n         AIF   ('&LRECL'(1,1) EQ '''').BY1310\n         DC    A(&LRECL)                GET ADDRESS OF LRECL VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR LRECL\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED LRECL\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BY1400\n         AIF   ('&RECFM'(1,1) EQ '''').BY1410\n         DC    A(&RECFM)                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR RECFM\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED RECFM\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BY1500\n         AIF   ('&GROUP'(1,1) EQ '''').BY1510\n         DC    A(&GROUP)                GET ADDRESS OF GROUP VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED GROUP\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1600\n         AIF   ('&STATS'(1,1) EQ '''').BY1610\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMMLIST  8512-85095-85095-1208-00260-00260-00000-ISPFDYN\n         MACRO\n&LABEL   LMMLIST &DATAID=,              DATAID NAME                    *\n               &OPTION=,                OPTION OF INPUT OR OUTPUT      *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &STATS=,                 VARIABLE FOR STATS             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMLIST              GLOBAL FOR LMMLIST LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMLIST).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&OPTION' EQ '').CNT1\n         AIF   ('&OPTION'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&STATS' EQ '').CNT3\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMLIST).BYP20\nLMMLIST  DC    CL8'LMMLIST'             ISPF KEYWORD\n&SPFLMMLIST SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP40\n         AIF   ('&OPTION'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&OPTION               OPTION TYPE\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&MEMBER               MEMBER VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP60\n         AIF   ('&STATS'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&STATS                STATS VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMLIST               GET ADDRESS OF LMMLIST KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP1100\n         AIF   ('&OPTION'(1,1) EQ '''').BYP1110\n         LA    0,&OPTION                GET ADDRESS OF &OPTION\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR OPTION\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GENNED OPTION\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    1,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1300\n         AIF   ('&STATS'(1,1) EQ '''').BYP1310\n         LA    14,&STATS                GET ADDRESS OF STATS VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR STATS\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED STATS\n.BYP1350 ANOP\n.*\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMLIST)               GET ADDRESS OF LMMLIST KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BY1100\n         AIF   ('&OPTION'(1,1) EQ '''').BY1110\n         DC    A(&OPTION)               GET ADDRESS OF &OPTION\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR OPTION\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GENNED OPTION\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1300\n         AIF   ('&STATS'(1,1) EQ '''').BY1310\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1350 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID OPTION - EXPECTED INPUT OR OUTPUT - FOUND ''*\n               &OPTION'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMMREN   8512-85095-85095-1208-00218-00218-00000-ISPFDYN\n         MACRO\n&LABEL   LMMREN &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &NEWNAME=,               LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMREN               GLOBAL FOR LMMREN LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMREN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NEWNAME' EQ '').CNT6\n         AIF   ('&NEWNAME'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMREN).BYP20\nLMMREN   DC    CL8'LMMREN'              ISPF KEYWORD\n&SPFLMMREN SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&NEWNAME' EQ '').BYP90\n         AIF   ('&NEWNAME'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&NEWNAME              NEWNAME OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMREN                GET ADDRESS OF LMMREN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&NEWNAME' EQ '').BYP1100\n         AIF   ('&NEWNAME'(1,1) EQ '''').BYP1110\n         LA    1,&NEWNAME               GET ADDRESS OF &NEWNAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NEWNAME\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED NEWNAME\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMREN)                GET ADDRESS OF LMMREN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&NEWNAME' EQ '').BY1600\n         AIF   ('&NEWNAME'(1,1) EQ '''').BY1610\n         DC    A(&NEWNAME+X'80000000')  GET ADDRESS OF NEWNAME VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR NEWNAME\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED NEWNAME\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMMREP   8512-85095-85095-1208-00218-00218-00000-ISPFDYN\n         MACRO\n&LABEL   LMMREP &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &STATS=,                 LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMREP               GLOBAL FOR LMMREP LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMREP).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&STATS' EQ '').CNT6\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMREP).BYP20\nLMMREP   DC    CL8'LMMREP'              ISPF KEYWORD\n&SPFLMMREP SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP90\n         AIF   ('&STATS'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&STATS                STATS OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMREP                GET ADDRESS OF LMMREP KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1100\n         AIF   ('&STATS'(1,1) EQ '''').BYP1110\n         LA    1,&STATS                 GET ADDRESS OF &STATS\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED STATS\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMREP)                GET ADDRESS OF LMMREP KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1600\n         AIF   ('&STATS'(1,1) EQ '''').BY1610\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMOPEN   8512-85095-85095-1208-00291-00291-00000-ISPFDYN\n         MACRO\n&LABEL   LMOPEN &DATAID=,               DATAID NAME                    *\n               &OPTION=,                OPTION OF INPUT OR OUTPUT      *\n               &LRECL=,                 VARIABLE FOR LRECL             *\n               &RECFM=,                 VARIABLE FOR RECFM             *\n               &ORG=,                   VARIABLE FOR DSORG             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMOPEN               GLOBAL FOR LMOPEN LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMOPEN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&OPTION' EQ '').CNT1\n         AIF   ('&OPTION'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&LRECL' EQ '').CNT2\n         AIF   ('&LRECL'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&RECFM' EQ '').CNT3\n         AIF   ('&RECFM'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ORG' EQ '').CNT4\n         AIF   ('&ORG'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMOPEN).BYP20\nLMOPEN   DC    CL8'LMOPEN'              ISPF KEYWORD\n&SPFLMOPEN SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP40\n         AIF   ('&OPTION'(1,1) NE '''').BYP40\nSPFX&NDX DC    CL8&OPTION               OPTION KEYWORD\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP50\n         AIF   ('&LRECL'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&LRECL                LRECL VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BYP60\n         AIF   ('&RECFM'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&RECFM                RECFM VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP70\n         AIF   ('&ORG'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&ORG                  ORG VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMOPEN                GET ADDRESS OF LMOPEN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP1100\n         AIF   ('&OPTION'(1,1) EQ '''').BYP1110\n         LA    0,&OPTION                GET ADDRESS OF OPTION\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR OPTION\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFX&NDX               GET ADDRESS OF GENNED OPTION\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP1200\n         AIF   ('&LRECL'(1,1) EQ '''').BYP1210\n         LA    1,&LRECL                 GET ADDRESS OF LRECL VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LRECL\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED LRECL\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&RECFM' EQ '').BYP1300\n         AIF   ('&RECFM'(1,1) EQ '''').BYP1310\n         LA    14,&RECFM                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR RECFM\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED RECFM\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP1400\n         AIF   ('&ORG'(1,1) EQ '''').BYP1410\n         LA    15,&ORG                  GET ADDRESS OF ORG VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ORG\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED ORG\n.BYP1450 ANOP\n.*\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMOPEN)                GET ADDRESS OF LMOPEN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BY1100\n         AIF   ('&OPTION'(1,1) EQ '''').BY1110\n         DC    A(&OPTION)               GET ADDRESS OF OPTION\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR OPTION\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFX&NDX)              GET ADDRESS OF GENNED OPTION\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BY1200\n         AIF   ('&LRECL'(1,1) EQ '''').BY1210\n         DC    A(&LRECL)                GET ADDRESS OF LRECL VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR LRECL\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED LRECL\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BY1300\n         AIF   ('&RECFM'(1,1) EQ '''').BY1310\n         DC    A(&RECFM)                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR RECFM\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED RECFM\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BY1400\n         AIF   ('&ORG'(1,1) EQ '''').BY1410\n         DC    A(&ORG+X'80000000')      GET ADDRESS OF ORG VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR ORG\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX+X'80000000')  GET ADDRESS OF GENNED ORG\n.BY1450 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID OPTION - EXPECTED INPUT OR OUTPUT - FOUND ''*\n               &OPTION'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMPUT    8512-85095-85095-1208-00289-00289-00000-ISPFDYN\n         MACRO\n&LABEL   LMPUT &DATAID=,                DATAID NAME                    *\n               &MODE=,                  MODE                           *\n               &DATALOC=,                                              *\n               &DATALEN=,                                              *\n               &NOBSCAN=,                                              *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMPUT                GLOBAL FOR LMPUT LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&MODE' EQ '').CNT2\n         AIF   ('&MODE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DATALOC' EQ '').CNT3\n         AIF   ('&DATALOC'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&DATALEN' EQ '').CNT4\n         AIF   (T'&DATALEN EQ 'N').GENLIT\n.CNT4    ANOP\n         AIF   ('&NOBSCAN' EQ '').CNT5\n         AIF   ('&NOBSCAN'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMPUT).BYP20\nLMPUT    DC    CL8'LMPUT'               ISPF KEYWORD\n&SPFLMPUT SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP40\n         AIF   ('&MODE'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&MODE                 MODE TYPE\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP50\n         AIF   ('&DATALOC'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&DATALOC              DATALOC VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP60\n         AIF   (T'&DATALEN NE 'N').BYP60\nSPFC&NDX DC    F'&DATALEN'              DATALEN VALUE\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&NOBSCAN' EQ '').BYP70\n         AIF   ('&NOBSCAN'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&NOBSCAN              NOSCAN KEYWORD\n.BYP70   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMPUT                 GET ADDRESS OF LMPUT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP1100\n         AIF   ('&MODE'(1,1) EQ '''').BYP1110\n         LA    0,&MODE                  GET ADDRESS OF &MODE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MODE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET GENNED MODE\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BYP1210\n         LA    1,&DATALOC               GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR DATALOC\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED DATALOC\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP1300\n         AIF   (T'&DATALEN EQ 'N').BYP1310\n         LA    14,&DATALEN              GET ADDRESS OF DATALEN\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATALEN\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED DATALEN\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&NOBSCAN' EQ '').BYP1400\n         AIF   ('&NOBSCAN'(1,1) EQ '''').BYP1410\n         LA    15,&NOBSCAN              GET ADDRESS OF NOBSCAN\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NOBSCAN\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED NOBSCAN\n.BYP1450 ANOP\n.*\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMPUT)                 GET ADDRESS OF LMPUT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BY1100\n         AIF   ('&MODE'(1,1) EQ '''').BY1110\n         DC    A(&MODE)                 GET ADDRESS OF &MODE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MODE\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET GENNED MODE\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BY1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BY1210\n         DC    A(&DATALOC)              GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALOC\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED DATALOC\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BY1300\n         AIF   (T'&DATALEN EQ 'N').BY1310\n         DC    A(&DATALEN)              GET ADDRESS OF DATALEN\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALEN\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED DATALEN\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&NOBSCAN' EQ '').BY1400\n         AIF   ('&NOBSCAN'(1,1) EQ '''').BY1410\n         DC    A(&NOBSCAN+X'80000000')  GET ADDRESS OF NOBSCAN VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR NOBSCAN\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX+X'80000000')  GET ADDRESS OF GENNED NOBSCAN\n.BY1450 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LMQUERY  8512-85095-85095-1208-00514-00514-00000-ISPFDYN\n         MACRO\n&LABEL   LMQUERY &DATAID=,              DATAID NAME                    *\n               &PROJECT=,               PROJECT NAME                   *\n               &GROUP1=,                GROUP 1 NAME                   *\n               &GROUP2=,                GROUP 2 NAME                   *\n               &GROUP3=,                GROUP 3 NAME                   *\n               &GROUP4=,                GROUP 4 NAME                   *\n               &TYPE=,                  TYPE                           *\n               &DATASET=,               DATASET NAME                   *\n               &DDNAME=,                DDNAME                         *\n               &VOLUME=,                VOL SER                        *\n               &ENQ=,                   ENQ TYPE                       *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMQUERY              GLOBAL FOR LMQUERY LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMQUERY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&PROJECT' EQ '').CNT1\n         AIF   ('&PROJECT'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&GROUP1' EQ '').CNT2\n         AIF   ('&GROUP1'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&GROUP2' EQ '').CNT3\n         AIF   ('&GROUP2'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&GROUP3' EQ '').CNT4\n         AIF   ('&GROUP3'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&GROUP4' EQ '').CNT5\n         AIF   ('&GROUP4'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&TYPE' EQ '').CNT6\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&DATASET' EQ '').CNT7\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&DDNAME' EQ '').CNT8\n         AIF   ('&DDNAME'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&VOLUME' EQ '').CNT9\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AIF   ('&ENQ' EQ '').CNT11\n         AIF   ('&ENQ'(1,1) EQ '''').GENLIT\n.CNT11   ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMQUERY).BYP20\nLMQUERY  DC    CL8'LMQUERY'             ISPF KEYWORD\n&SPFLMQUERY SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP40\n         AIF   ('&PROJECT'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&PROJECT              PROJECT VARIABLE NAME\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP50\n         AIF   ('&GROUP1'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&GROUP1               GROUP1 VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP60\n         AIF   ('&GROUP2'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&GROUP2               GROUP2 VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP70\n         AIF   ('&GROUP3'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&GROUP3               GROUP3 VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP80\n         AIF   ('&GROUP4'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&GROUP4               USERE VARIABLE NAME\n.BYP80   ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP90\n         AIF   ('&TYPE'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&TYPE                 TYPE VARIABLE NAME\n.BYP90   ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP100\n         AIF   ('&DATASET'(1,1) NE '''').BYP100\nSPFG&NDX DC    CL8&DATASET              DATASET VARIABLE NAME\n.BYP100  ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP110\n         AIF   ('&DDNAME'(1,1) NE '''').BYP110\nSPFH&NDX DC    CL8&DDNAME               DDNAME VARIABLE NAME\n.BYP110  ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP120\n         AIF   ('&VOLUME'(1,1) NE '''').BYP120\nSPFI&NDX DC    CL8&VOLUME               VOLUME VARIABLE NAME\n.BYP120  ANOP\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP140\n         AIF   ('&ENQ'(1,1) NE '''').BYP140\nSPFK&NDX DC    CL8&ENQ                  ENQ VARIABLE NAME\n.BYP140  ANOP\n.*\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMQUERY               GET ADDRESS OF LMQUERY KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BYP1110\n         LA    0,&PROJECT               GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROJECT\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED PROJECT\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BYP1210\n         LA    1,&GROUP1                GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR GROUP1\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED GROUP1\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BYP1310\n         LA    14,&GROUP2               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR GROUP2\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED GROUP2\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BYP1410\n         LA    15,&GROUP3               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR GROUP3\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED GROUP3\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BYP1510\n         LA    0,&GROUP4                GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP4\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED GROUP4\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP1600\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1610\n         LA    1,&TYPE                  ADDRESS OF TYPE VARIABLE\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR TYPE\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED TYPE\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP1700\n         AIF   ('&DATASET'(1,1) EQ '''').BYP1710\n         LA    14,&DATASET              ADDRESS OF DATASET VARIABLE\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATASET\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFG&NDX              GET ADDRESS OF GENNED DATASET\n.BYP1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BYP1810\n         LA    15,&DDNAME               ADDRESS OF DDNAME VARIABLE\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DDNAME\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENNED DDNAME\n.BYP1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP1910\n         LA    0,&VOLUME                ADDRESS OF VOLUME VARIABLE\n         AGO   .BYP1950\n.BYP1900 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n         AGO   .BYP1950\n.BYP1910 ANOP\n         LA    0,SPFI&NDX               GET ADDRESS OF GENNED VOLUME\n.BYP1950 ANOP\n.*\n.*\n         LA    1,SPFNULLC               GET DUMMY PARM 1\n         STM   14,1,&TEMP+32            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         LA    14,SPFNULLC              GET DUMMY PARM 2\n         LA    15,SPFNULLC              GET DUMMY PARM 3\n         LA    0,SPFNULLC               GET DUMMY PARM 4\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP2100\n         AIF   ('&ENQ'(1,1) EQ '''').BYP2110\n         LA    1,&ENQ                   ADDRESS OF ENQ VARIABLE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ENQ\n         AGO   .BYP2150\n.BYP2110 ANOP\n         LA    1,SPFK&NDX               GET ADDRESS OF GENNED ENQ\n.BYP2150 ANOP\n.*\n.*\n         STM   14,1,&TEMP+48            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+60,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 16).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 16).BYPVARS\n&SPFVARS SETA  16\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMQUERY)               GET ADDRESS OF LMQUERY KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BY1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BY1110\n         DC    A(&PROJECT)              GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR PROJECT\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED PROJECT\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BY1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BY1210\n         DC    A(&GROUP1)               GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP1\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED GROUP1\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BY1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BY1310\n         DC    A(&GROUP2)               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP2\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED GROUP2\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BY1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BY1410\n         DC    A(&GROUP3)               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP3\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED GROUP3\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BY1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BY1510\n         DC    A(&GROUP4)               GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP4\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED GROUP4\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BY1600\n         AIF   ('&TYPE'(1,1) EQ '''').BY1610\n         DC    A(&TYPE)                 ADDRESS OF TYPE VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR TYPE\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX)              GET ADDRESS OF GENNED TYPE\n.BY1650 ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BY1700\n         AIF   ('&DATASET'(1,1) EQ '''').BY1710\n         DC    A(&DATASET)              ADDRESS OF DATASET VARIABLE\n         AGO   .BY1750\n.BY1700 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATASET\n         AGO   .BY1750\n.BY1710 ANOP\n         DC    A(SPFG&NDX)              GET ADDRESS OF GENNED DATASET\n.BY1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BY1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BY1810\n         DC    A(&DDNAME)               ADDRESS OF DDNAME VARIABLE\n         AGO   .BY1850\n.BY1800 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DDNAME\n         AGO   .BY1850\n.BY1810 ANOP\n         DC    A(SPFH&NDX)              GET ADDRESS OF GENNED DDNAME\n.BY1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BY1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BY1910\n         DC    A(&VOLUME)               ADDRESS OF VOLUME VARIABLE\n         AGO   .BY1950\n.BY1900 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR VOLUME\n         AGO   .BY1950\n.BY1910 ANOP\n         DC    A(SPFI&NDX)              GET ADDRESS OF GENNED VOLUME\n.BY1950 ANOP\n.*\n.*\n         DC    A(SPFNULLC)              DUMMY PARM 1\n         DC    A(SPFNULLC)              DUMMY PARM 2\n         DC    A(SPFNULLC)              DUMMY PARM 3\n         DC    A(SPFNULLC)              DUMMY PARM 4\n.*\n.*\n         AIF   ('&ENQ' EQ '').BY2100\n         AIF   ('&ENQ'(1,1) EQ '''').BY2110\n         DC    A(&ENQ+X'80000000')      ADDRESS OF ENQ VARIABLE\n         AGO   .BY2150\n.BY2100 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR ENQ\n         AGO   .BY2150\n.BY2110 ANOP\n         DC    A(SPFK&NDX+X'80000000')  GET ADDRESS OF GENNED ENQ\n.BY2150 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=LOG      8512-85095-85095-1208-00136-00136-00000-ISPFDYN\n         MACRO\n&NAME    LOG   &P1,&MSG=,               MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLOG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @LOG &P1,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLOG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFLOG).BYP20\nLOG      DC    CL8'LOG'                 ISPF KEYWORD\n&SPFLOG SETB   1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,LOG                   GET ADDRESS OF LOG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(LOG)                   BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=OD       8512-86097-86097-1148-00020-00020-00000-ISPFDYN\n         MACRO\n         OD    &USRNAME                                       27001.\n         COPY  STRCGBLS\n         LCLB  &TDLGEND           TDL_GENNED                  27005.\n         LCLB  &FINREQD           FIN_LABEL_REQD              27007.\n         LCLC  &INFO              INFO                        27010.\n         STRCTRAC  OD                                         27012.\n         AIF   (&STRCNST GT &STRCNSL).M044                    27014.\n         STRCVERF  DO,&USRNAME                                27016.\n         AIF   (&STRCERR).FIN                                 27026.\n&INFO    SETC  '&STRCINF(&STRCNST)'                           27030.\n&TDLGEND SETB  ('&INFO'(5,1) EQ '1')                          27031.\n&FINREQD SETB  ('&INFO'(8,1) EQ '1')                          27032.\n         AIF   (&TDLGEND).M038                                27033.\n         STRCTDL\n         AGO   .M044                                          27038.\n.M038    AIF   (NOT &FINREQD).M044                            27039.\n$&STRCBL#(&STRCNST)FIN  DS    0H\n.M044    STRCPOP\n.FIN     MEND\n./ ADD NAME=ONEND    8512-86097-86097-1148-00004-00004-00000-ISPFDYN\n         MACRO\n         ONEND  &USRNAME\n         ATEND  &USRNAME\n         MEND\n./ ADD NAME=ONEXIT   8512-86097-86097-1148-00036-00036-00000-ISPFDYN\n         MACRO\n         ONEXIT  &USRNAME\n         COPY  STRCGBLS\n         LCLB  &ONGEND            ONEXIT_GENNED               25009.\n         LCLB  &TDLGEND           TDL_GENNED                  25011.\n         LCLB  &FINREQD           FIN_LABEL_REQD              25014.\n         LCLC  &INFO              INFO                        25017.\n         STRCTRAC  ONEXIT                                     25019.\n         AIF   (&STRCNST GT &STRCNSL).FIN                     25021.\n         STRCVERF  DO,&USRNAME                                25025.\n         AIF   (&STRCERR).FIN                                 25030.\n&INFO    SETC  '&STRCINF(&STRCNST)'                           25034.\n&ONGEND  SETB  ('&INFO'(7,1) EQ '1')                          25035.\n         AIF   (NOT &ONGEND).M041                             25037.\n         MNOTE 8,' STRC2501 MORE THAN ONE \"ONEXIT\" IN BLOCK'  25039.\n         MEXIT\n.M041    AIF   (&STRCXIT(&STRCNST)).M046                      25042.\n         MNOTE 8,' STRC2502 NO EXIT FOR THIS \"DO\"'            25044.\n         MEXIT\n.M046    ANOP\n&FINREQD SETB  ('&INFO'(8,1) EQ '1')                          25047.\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          25049.\n&TDLGEND SETB  ('&INFO'(5,1) EQ '1')                          25050.\n         AIF   (&TDLGEND).M059                                25052.\n         STRCTDL\n         AIF   (NOT &STRCTFT).M063                            25055.\n         B     &STRCPFX.END\n&STRCEND(&STRCNST)  SETB  1                                   25057.1\n         AGO   .M063                                          25059.\n.M059    B     &STRCPFX.FIN\n&FINREQD SETB  1                                              25061.\n.M063    ANOP\n&STRCPFX.XIT  DS    0H\n&STRCXIT(&STRCNST)  SETB  0                                   25065.\n&STRCINF(&STRCNST)  SETC  '&INFO'(1,4)'1'.'&INFO'(6,1)'1&FINREQD'\n.FIN     MEND\n./ ADD NAME=OUTSECT  8605-84053-84053-1052-00025-00025-00000-ISPFDYN\n         MACRO\n&N       OUTSECT\n         GBLC  &EQC,&RCC,&SAVEC\n.*\n         L     &EQC.15,&RCC            RETRIEVE RETURN CODE\n         L     &EQC.13,4(&EQC.13)      POINT TO CALLER'S SAVEAREA\n         ST    &EQC.15,16(&EQC.13)     STORE IN REG 15 SLOT\n.*\n         AIF   ('&SAVEC' NE 'DYNAM').T1\n.*\n.* FREE DYNAMIC SAVE AREA\n.*\n***\n*** FREEMAIN ISSUED FOR DYNAMICALLY OBTAINED SAVEAREA.\n***\n         L     &EQC.1,8(&EQC.13)       FREEMAIN ADDR FROM LSA PTR\n         LA    &EQC.0,72               LENGTH VALUE TO R0\n         FREEMAIN  R,LV=(&EQC.0),A=(&EQC.1)\n         SPACE 2\n.T1      ANOP\n         LM    &EQC.14,&EQC.12,12(&EQC.13)   RESTORE CALLER'S REGS\n         BR    &EQC.14                       RETURN\n         SPACE 2\n&RCC     DC    F'0'                    RETURN CODE\n         MEND\n./ ADD NAME=OUTSUB   8605-83363-84053-1048-00009-00009-00000-ISPFDYN\n         MACRO\n         OUTSUB\n         GBLC  &GLBL,&LREG\n         SPACE\n&GLBL.X  EQU   *\n         L     &LREG,&GLBL.SV        RETRIEVE LINK REG\n         BR    &LREG                 RETURN\n         SPACE 3\n         MEND\n./ ADD NAME=PROC     8512-86097-86097-1148-00670-00670-00000-ISPFDYN\n         MACRO\n&USRNAME PROC  &LINKAGE=,&ID=,&BASE=,&WORK=,&SAVE=,&DEBUG=,   81001.   *\n               &EXIT=,&DSECT=\n         COPY  STRCGBLS\n         LCLB  &PROC1             FIRST_PROC                  81010.\n         LCLB  &FRKNOWN           FIRST_VALUE_KNOWN           81012.\n         LCLB  &OSLINK            OS_LINKAGE                  81014.\n         LCLB  &SPECPFX           SPECIAL_PREFIX              81016.\n         LCLB  &USING13           USING13                     81018.\n         LCLB  &MULTIBS           MULTIBASE                   81019.\n         LCLB  &WORKUSD           WORKREG_USED                81021.\n         LCLC  &COMMA2            COMMA2                      81024.\n         LCLC  &MULT              MULT                        81024.\n         LCLC  &FIRST,&LAST       FIRST, LAST                 81027.\n         LCLC  &LABEL             LABEL                       81028.\n         LCLC  &LOCPTR            LOCAL_POINTER               81029.\n         LCLC  &OSPTR             OS_POINTER                  81029.\n         LCLC  &PVDEBUG           PREVIOUS_DEBUG_VECTOR       81031.\n         LCLC  &IDBYTE            PROC_ID_BYTE                81033.\n         LCLC  &SVLENG            SAVE_LENGTH                 81035.\n         LCLC  &SVTYPE            SAVE_TYPE                   81037.\n         LCLC  &SAVEREG           SAVEREG                     81039.\n         LCLC  &WORKREG           WORKREG                     81041.\n         LCLA  &OFFSET            OFFSET                      81043.\n         LCLA  &OFFSET0           OFFSET_TO_GPR0              81045.\n         LCLA  &SAF,&SAL          SAF, SAL                    81046.\n         LCLB  &GLOBAL            GLOBAL                      81173.\n         LCLB  &STVALUE           SAVETRACE_VALUE             81176.\n         LCLB  &STCHECK           SAVETRACE_CHECK             81178.\n         LCLA  &I                 I      81165. 81401. 81518. 81948.\n.*                                       81890. 81595.1       81966.\n         LCLC  &SECT              SECT                        81350.\n         LCLC  &QUOTE             QUOTE                       81351.\n         LCLC  &TARGET            TARGET                      81352.\n         LCLA  &LENGTH            LENGTH                      81354.\n         LCLB  &INLINE            INLINE_SAVEAREA             81614.\n         LCLC  &BASEREG           BASEREG                     81617.\n         LCLC  &X                 X                           81763.\n         LCLC  &FWDPTR            FWD_PTR                     81836.\n         LCLB  &PCTWVEC           PCT_GENNED_WITH_VECTOR      81867.\n         LCLC  &SPOT              COUNT_SPOT                  81869.\n         LCLA  &J                 J            81595.1 81890. 81966.\n         LCLB  &BIT               MACRO TEMPORARY\n         STRCTRAC  PROC                                       81051.\n&USRNAME STRCPUSH  TYPEVAL=PROC                               81053.\n         AIF   (&STRCERR).FIN                                 81057.\n&LABEL   SETC  '&USRNAME'                                     81061.\n.*       CALL  PROC_SCAN_OPTIONS                              81063.\n&OSLINK  SETB  ('&LINKAGE(1)' NE '')                          81114.\n         AIF   ('&LINKAGE(1)' EQ 'OS' OR '&LINKAGE(1)' EQ '').M119\n         MNOTE 8,' STRC8101 LINKAGE=&LINKAGE(1) INVALID--\"OS\" ASSUMED'\n.M119    AIF   ('&LINKAGE(2)' EQ 'CSECT' OR '&LINKAGE(2)' EQ '').M123\n         MNOTE 8,' STRC8102 SECOND LINKAGE OPERAND IGNORED'   81122.\n.M123    ANOP\n&WORKREG SETC  '&WORK'                                        81124.\n         AIF   ('&WORK' NE 'NONE' AND '&WORK' NE '').M135     81125.\n         AIF   (&OSLINK).M131                                 81129.\n&WORKREG SETC  '1'                                            81133.\n         AGO   .M135                                          81134.\n.M131    ANOP\n&WORKREG SETC  '2'                                            81131.\n.M135    AIF   ('&EXIT' EQ '').M1363                          81136.\n&STRCXSV SETC  '&EXIT'                                        81136.2\n.M1363   ANOP\n&PROC1   SETB  (NOT &STRCNFP)                                 81138.\n&STRCNFP SETB  1                                              81139.\n.*       CALL  PROC_DEBUG_SET                                 81144.\n&GLOBAL  SETB  0                                              81182.\n&PVDEBUG SETC '&STRCDBN&STRCDPN&STRCDLB&STRCDBC&STRCDPC&STRCDPT&STRCDCV*\n               &STRCDST'                                      81183.\n&I       SETA  1                                              81193.\n.M194    AIF   (&I GT N'&DEBUG).M307                          81194.\n&X       SETC  '&DEBUG(&I)'                                   81196.\n         AIF   ('&X' NE 'GLOBAL' AND '&X' NE 'GBL').M201      81198.\n&GLOBAL  SETB  1                                              81199.\n         AGO   .M305                                          81200.\n.M201    AIF   ('&X'(1,1) EQ 'N').SETOFF                      81201.\n         AIF   ('&X' NE 'BLOCKNAM' AND '&X' NE 'BN').M210     81201.\n&STRCDBN SETB  1                                              81202.\n         AGO   .M305                                          81206.\n.M210    AIF   ('&X' NE 'PROCNAME' AND '&X' NE 'PN').M219     81210.\n&STRCDPN SETB  1                                              81211.\n         AGO   .M305                                          81215.\n.M219    AIF   ('&X' NE 'LISTBLOC' AND '&X' NE 'LB').M227     81219.\n&STRCDLB SETB  1                                              81220.\n         AGO   .M305                                          81223.\n.M227    AIF   ('&X' NE 'BLOCKCOU' AND '&X' NE 'BC').M235     81227.\n&STRCDBC SETB  1                                              81228.\n         AGO   .M305                                          81231.\n.M235    AIF   ('&X' NE 'PROCCOUN' AND '&X' NE 'PC').M244     81235.\n&STRCDPC SETB  1                                              81236.\n         AGO   .M305                                          81243.\n.M244    AIF   ('&X' NE 'PROCTRAC' AND '&X' NE 'PT').M253     81244.\n&STRCDPT SETB  1                                              81245.\n         AGO   .M305                                          81249.\n.M253    AIF   ('&X' NE 'CORPVALU' AND '&X' NE 'CV').M262     81253.\n&STRCDCV SETB  1                                              81254.\n         AGO   .M305                                          81258.\n.M262    AIF   ('&X' NE 'SAVETRAC' AND '&X' NE 'ST').M274     81262.\n&STVALUE SETB  1                                              81266.\n&STCHECK SETB  1                                              81267.\n         AGO   .M305                                          81269.\n.M274    AIF   ('&X' NE 'ALL').M286                           81274.\n&STRCDBN SETB  1                                       \"ALL\"  81275.\n&STRCDPN SETB  1                                              81275.\n&STRCDLB SETB  1                                              81275.\n&STRCDBC SETB  1                                              81275.\n&STRCDPC SETB  1                                              81275.\n&STRCDPT SETB  1                                              81275.\n&STRCDCV SETB  1                                              81275.\n&STVALUE SETB  1                                              81275.\n&STCHECK SETB  1                                              81280.\n         AGO   .M305                                          81281.\n.M286    AIF   ('&X' NE 'MACRONAM' AND '&X' NE 'MN').M294     81286.\n&STRCDMN SETB  1                                              81287.\n         AGO   .M305                                          81290.\n.M294    AIF   ('&X' NE 'DEBUGMAC' AND '&X' NE 'DM').M302     81294.\n&STRCDDM SETB  1                                              81295.\n         AGO   .M305                                          81298.\n.SETOFF  AIF   ('&X' NE 'NOBLOCKN' AND '&X' NE 'NBN').M216    81207.\n&STRCDBN SETB  0                                              81208.\n         AGO   .M305                                          81209.\n.M216    AIF   ('&X' NE 'NOPROCNA' AND '&X' NE 'NPN').M224    81216.\n&STRCDPN SETB  0                                              81217.\n         AGO   .M305                                          81218.\n.M224    AIF   ('&X' NE 'NOLISTBL' AND '&X' NE 'NLB').M232    81224.\n&STRCDLB SETB  0                                              81225.\n         AGO   .M305                                          81226.\n.M232    AIF   ('&X' NE 'NOBLOCKC' AND '&X' NE 'NBC').M240    81232.\n&STRCDBC SETB  0                                              81233.\n         AGO   .M305                                          81234.\n.M240    AIF   ('&X' NE 'NOPROCCO' AND '&X' NE 'NPC').M250    81240.\n&STRCDPC SETB  0                                              81241.\n         AGO   .M305                                          81242.\n.M250    AIF   ('&X' NE 'NOPROCTR' AND '&X' NE 'NPT').M259    81250.\n&STRCDPT SETB  0                                              81251.\n         AGO   .M305                                          81252.\n.M259    AIF   ('&X' NE 'NOCORPVA' AND '&X' NE 'NCV').M270    81259.\n&STRCDCV SETB  0                                              81260.\n         AGO   .M305                                          81261.\n.M270    AIF   ('&X' NE 'NOSAVETR' AND '&X' NE 'NST').M274N N 81270.\n&STVALUE SETB  0                                              81271.\n&STCHECK SETB  1                                              81272.\n         AGO   .M305                                          81273.\n.M274N   AIF   ('&X' NE 'NONE').M291                  \"NONE\"  81274.\n&STRCDBN SETB  0                                      \"NONE\"  81275.\n&STRCDPN SETB  0                                              81275.\n&STRCDLB SETB  0                                              81275.\n&STRCDBC SETB  0                                              81275.\n&STRCDPC SETB  0                                              81275.\n&STRCDPT SETB  0                                              81275.\n&STRCDCV SETB  0                                              81275.\n&STVALUE SETB  0                                              81275.\n&STCHECK SETB  1                                              81280.\n         AGO   .M305                                          81281.\n.M291    AIF   ('&X' NE 'NOMACRON' AND '&X' NE 'NMN').M299    81291.\n&STRCDMN SETB  0                                              81292.\n         AGO   .M305                                          81293.\n.M299    AIF   ('&X' NE 'NODEBUGM' AND '&X' NE 'NDM').M302    81299.\n&STRCDDM SETB  0                                              81300.\n         AGO   .M305                                          81301.\n.M302    MNOTE 8,' STRC8104 DEBUG=&DEBUG(&I) INVALID--IGNORED'\n.M305    ANOP\n&I       SETA  &I+1                                           81306.\n         AGO   .M194                                          81307.\n.M307    AIF   (NOT &STCHECK).M335                            81310.\n         AIF   (&STVALUE).M313                                81312.\n&STRCDST SETB  0                                              81333.\n         AGO   .M335                                          81334.\n.M313    AIF   (NOT &PROC1).M324                              81314.\n         AIF   (NOT &OSLINK).M321                             81316.\n&STRCSFP SETB  1                                              81318.\n&STRCDST SETB  1                                              81319.\n         MNOTE 4,' STRC8103 WARNING--SAVETRACE REQUIRES \"FINAL\" MACRO'\n         AGO   .M335                                          81321.\n.M321    MNOTE 8,' STRC8106 SAVETRACE REQUIRES FIRST PROC TO BE'\n         MNOTE 0,'          LINKAGE=OS'                       81322.\n         AGO   .M335                                          81324.\n.M324    AIF   (&STRCSFP).M326                                81325.\n         MNOTE 8,' STRC8105 SAVETRACE MUST BE SPECIFIED ON FIRST PROC'\n         AGO   .M335                                          81330.\n.M326    ANOP\n&STRCDST SETB  1                                              81327.\n.M335    AIF   (NOT &GLOBAL).M340                             81336.\n&PVDEBUG SETC  ''                                             81338.\n.M340    ANOP\n.*       CORP  PROC_DEBUG_SET                                 81341.\n&SPECPFX SETB  ((&STRCDST OR &STRCDPT OR &STRCDPC) AND &STRCPCT LT 254)\n         AIF   (NOT &SPECPFX).M162                            81151.\n&STRCPCT SETA  &STRCPCT+1                                     81153.\n&STRCHXI SETA  &STRCPCT                                       81155.\n         STRCXHEX\n&IDBYTE  SETC  '&STRCHXO'                                     81157.\n&STRCPFX SETC  '$P&IDBYTE'                                    81158.\n         MNOTE *,' STRC8108 PROC &STRCNAM(&STRCNST), DEBUG ID=X''&IDBYT*\n               E'''                                           81160.\n         AGO   .M164                                          81162.\n.M162    ANOP\n&IDBYTE  SETC  '00'                                           81163.\n.M164    ANOP\n.*       CORP  PROC_SCAN_OPTIONS                              81165.\n.*       CALL  PROC_HEADER                                    81068.\n         AIF   ('&LINKAGE(2)' NE 'CSECT').M361                81356.\n&LABEL   CSECT\n&LABEL   SETC  ''                                             81359.\n         USING *,15\n.M361    ANOP\n         AIF   (NOT (((&OSLINK OR '&ID' NE '') AND                     *\n               '&ID' NE 'NONE') OR &STRCDPN)).M413            81362.\n&TARGET  SETC  '&STRCPFX.AA'                                  81365.\n&LABEL   B     &TARGET\n&LABEL   SETC  '&TARGET'                                      81368.\n         AIF ('&ID' NE '' AND '&ID' NE '*' AND '&ID' NE 'NONE').M393\n         AIF   ('&USRNAME' NE '').M380                        81371.\n         AIF   (&OSLINK).M375                                 81373.\n&SECT    SETC  '&STRCNAM(&STRCNST)'                           81377.\n         AGO   .M378                                          81377.\n.M375    ANOP\n&SECT    SETC  '$PRIVATE'                                     81375.\n.M378    ANOP\n&LENGTH  SETA  8                                              81379.\n         AGO   .M383                                          81380.\n.M380    ANOP\n&SECT    SETC  '&USRNAME'                                     81381.\n&LENGTH  SETA  K'&USRNAME                                     81382.\n.M383    AIF   (&OSLINK).M385                                 81384.\n&LENGTH  SETA  ((&LENGTH+1)/2)*2                              81390.\n         DC    CL&LENGTH'&SECT'\n         AGO   .M392                                          81392.\n.M385    ANOP\n&LENGTH  SETA  ((&LENGTH/2)*2)+1                              81386.\n         DC    AL1(&LENGTH),CL&LENGTH'&SECT'\n.M392    AGO   .M412                                          81393.\n.M393    ANOP\n&QUOTE   SETC  ''''                                           81394.\n&LENGTH  SETA  0                                              81395.\n         AIF   ('&ID'(1,1) NE '''').M400                      81396.\n&QUOTE   SETC  ''                                             81398.\n&LENGTH  SETA  0-2                                            81399.\n.M400    AIF   (&OSLINK).M403                                 81402.\n&LENGTH  SETA  ((K'&ID+1)/2)*2+&LENGTH                        81408.\n         DC    CL&LENGTH&QUOTE&ID&QUOTE\n         AGO   .M411                                          81411.\n.M403    ANOP\n&LENGTH  SETA  ((K'&ID/2)*2)+1+&LENGTH                        81403.\n         DC    AL1(&LENGTH),CL&LENGTH&QUOTE&ID&QUOTE\n.M411    ANOP\n.M412    ANOP\n.M413    ANOP\n.*       CORP  PROC_HEADER                                    81414.\n.*       CALL  PROC_REG_SAVE                                  81071.\n&FIRST   SETC  ''                                             81424.\n&LAST    SETC  ''                                             81424.\n&OFFSET  SETA  0                                              81425.\n&OFFSET0 SETA  0                                              81425.\n&SAF     SETA  0                                              81425.\n&SAL     SETA  0                                              81425.\n         AIF   ('&SAVE' NE 'NONE').M436                       81427.\n         AIF   (NOT &STRCDST).M474                            81429.\n&SVTYPE  SETC  'FULL'                                         81431.\n&SVLENG  SETC  '15'                                           81432.\n&LABEL   STM   14,12,&STRCPFX.SV+12\n&LABEL   SETC  ''                                             81434.\n         AGO   .M474                                          81436.\n.M436    ANOP\n.*       CALL  PROC_SET_SAVE_INFO                             81437.\n&FRKNOWN SETB  1                                              81487.\n&MULT    SETC  'M'                                            81488.\n&COMMA2  SETC  ','                                            81489.\n         AIF   (T'&SAVE(1) NE 'O').M496                       81491.\n&FIRST   SETC  '14'                                           81493.\n&SAF     SETA  14                                             81493.\n&LAST    SETC  '12'                                           81494.\n&SAL     SETA  12                                             81494.\n         AGO   .M527                                          81496.\n.M496    AIF   (T'&SAVE(1) NE 'N').M503                       81497.\n&SAF     SETA  &SAVE(1)                                       81499.\n&FIRST   SETC  '&SAF'                                         81500.\n         AGO   .M507                                          81503.\n.M503    ANOP\n&FIRST   SETC  '&SAVE(1)'                                     81504.\n&SAF     SETA  14                                             81505.\n&FRKNOWN SETB  0                                              81506.\n.M507    AIF   (T'&SAVE(2) NE 'O').M517                       81508.\n&LAST    SETC  ''                                             81510.\n&MULT    SETC  ''                                             81510.\n&COMMA2  SETC  ''                                             81510.\n         AIF   (&FRKNOWN).M512                                81511.\n&SAL     SETA  12                                             81515.\n         AGO   .M516                                          81516.\n.M512    ANOP\n&SAL     SETA  &SAF                                           81513.\n.M516    AGO   .M526                                          81517.\n.M517    AIF   (T'&SAVE(2) NE 'N').M522                       81518.\n&SAL     SETA  &SAVE(2)                                       81520.\n&LAST    SETC  '&SAL'                                         81521.\n         AGO   .M526                                          81522.\n.M522    ANOP\n&LAST    SETC  '&SAVE(2)'                                     81523.\n&SAL     SETA  12                                             81524.\n.M526    ANOP\n.M527    ANOP\n.*       CORP  PROC_SET_SAVE_INFO                             81528.\n.*       CALL  PROC_DECIDE_SAVE_TYPE                          81446.\n         AIF   (NOT &OSLINK).M559                             81542.\n&OSPTR   SETC  '(13)'                                         81544.\n&LOCPTR  SETC  ''                                             81545.\n         AIF   ('&SAVE(3)' NE 'NONE').M549                    81546.\n&SVTYPE  SETC  'NONE'                                         81548.\n         AGO   .M598                                          81549.\n.M549    ANOP\n&SVTYPE  SETC  'OSSAVE'                                       81550.\n&OFFSET0 SETA  5                                              81551.\n&OFFSET  SETA  5                                              81551.\n         AIF   ('&SAVE(4)' NE '').M555                        81552.\n&SVLENG  SETC  '18'                                           81554.\n         AGO   .M598                                          81555.\n.M555    ANOP\n&SVLENG  SETC  '&SAVE(4)'                                     81556.\n         AGO   .M598                                          81559.\n.M559    ANOP\n&OSPTR   SETC  ''                                             81560.\n&LOCPTR  SETC  '&STRCPFX.SV+'                                 81561.\n         AIF   (NOT &STRCDST).M568                            81562.\n&SVTYPE  SETC  'FULL'                                         81564.\n&SVLENG  SETC  '15'                                           81565.\n&OFFSET  SETA  5                                              81567.\n&OFFSET0 SETA  5                                              81567.\n         AGO   .M598                                          81568.\n.M568    ANOP\n&I       SETA  &SAL-((&SAL+2)/16*16)-&SAF+((&SAF+2)/16*16)+1  81569.\n&SVLENG  SETC  '&I'                                           81570.\n         AIF   (&SAF NE 14).M582                              81572.\n         AIF   (&STRCDPC).M576                                81574.\n&SVTYPE  SETC  'NORML'                                        81579.\n&OFFSET  SETA  2                                              81580.\n&OFFSET0 SETA  2                                              81580.\n         AGO   .M598                                          81581.\n.M576    ANOP\n&SVTYPE  SETC  'NORMLHDR'                                     81576.\n&OFFSET  SETA  3                                              81577.\n&OFFSET0 SETA  3                                              81577.\n         AGO   .M598                                          81578.\n.M582    AIF   (&STRCDPC).M584                                81583.\n&SVTYPE  SETC  'TRUNC'                                        81588.\n&OFFSET  SETA  0                                              81589.\n         AGO   .M590                                          81590.\n.M584    ANOP\n&SVTYPE  SETC  'TRUNCHDR'                                     81585.\n&OFFSET  SETA  1                                              81586.\n.M590    ANOP\n&OFFSET0 SETA  &OFFSET-&SAF                                   81591.\n         AIF   (&SAF LE 13).M598                              81592.\n&OFFSET0 SETA  &OFFSET0+16                                    81594.\n.M598    AIF   (NOT &FRKNOWN OR '&SVTYPE'(1,5) EQ 'TRUNC').M608\n&OFFSET  SETA  &OFFSET0+&SAF                                  81603.\n         AIF   (&SAF LE 13).M608                              81604.\n&OFFSET  SETA  &OFFSET-16                                     81606.\n.M608    ANOP\n.*       CORP  PROC_DECIDE_SAVE_TYPE                          81609.\n         AIF   ('&SVTYPE' NE 'FULL').M461                     81457.\n&LABEL   STM   14,12,&STRCPFX.SV+12\n         AGO   .M472                                          81461.\n.M461    AIF   (&FRKNOWN).M463                                81462.\n&LABEL   ST&MULT  &FIRST,&LAST&COMMA2&LOCPTR.(&FIRST+&OFFSET-((&FIRST+2:\n               )/16*16))*4&OSPTR\n         AGO   .M471                                          81471.\n.M463    ANOP\n&I       SETA  &OFFSET*4                                      81464.\n&LABEL   ST&MULT  &FIRST,&LAST&COMMA2&LOCPTR&I&OSPTR\n.M471    ANOP\n.M472    ANOP\n&LABEL   SETC  ''                                             81473.\n.M474    ANOP\n.*       CORP  PROC_REG_SAVE                                  81475.\n.*       CALL  PROC_ESTABLISH_BASE                            81074.\n     AIF  ('&BASE' EQ 'NONE' OR NOT (&OSLINK OR '&BASE' NE '')).M696\n&BASEREG SETC  '&BASE(1)'                                     81623.\n&INLINE  SETB  ('&SAVE' NE 'NONE' AND '&SAVE(3)' EQ '')       81624.\n         AIF   ('&BASEREG' NE '13' OR &INLINE OR &OSLINK).M630\n         MNOTE 8,' STRC8109 REGISTER 13 INVALID--IGNORED'     81627.\n&BASEREG SETC  ''                                             81628.\n.M630    AIF   ('&BASEREG' NE '').M647                        81630.\n         AIF   (NOT (&INLINE AND &OSLINK)).M644               81632.\n&BASEREG SETC  '&WORKREG'                                     81634.\n&USING13 SETB  1                                              81637.\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M642           81638.\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81641.\n.M642    ANOP\n&WORKUSD SETB  1                                              81643.\n         AGO   .M647                                          81644.\n.M644    ANOP\n&BASEREG SETC  '12'                                           81645.\n.M647    ANOP\n&J       SETA  0                                              81648.\n&I       SETA  2                                              81649.\n.M650    AIF   (&I GT N'&BASE).M662                           81650.\n         AIF   ('&BASE(&I)' NE '13').M655                     81652.\n         MNOTE 8,' STRC8109 REGISTER 13 INVALID--IGNORED'     81654.\n         AGO   .M659                                          81655.\n.M655    ANOP\n&LABEL   L     &BASE(&I),&STRCPFX.MBR+&J\n&LABEL   SETC  ''                                             81658.\n.M659    ANOP\n&I       SETA  &I+1                                           81660.\n&J       SETA  &J+4                                           81661.\n         AGO   .M650                                          81662.\n.M662    AIF   (NOT &INLINE).M675                             81664.\n         AIF   (NOT &OSLINK).M671                             81666.\n         CNOP  0,4\n.M671    ANOP\n&TARGET  SETC  '&STRCPFX.BB'                                  81672.\n&LABEL   BAL   &BASEREG,&TARGET\n&LABEL   SETC  '&TARGET'                                      81674.\n         AGO   .M678                                          81675.\n.M675    ANOP\n&LABEL   BALR  &BASEREG,0\n&LABEL   SETC  ''                                             81677.\n.M678    AIF   (&USING13).M682                                81679.\n         USING *,&BASEREG\n.M682    AIF   (N'&BASE LE 1).M696                            81683.\n&STRCPFX.MBP  EQU  *\n&MULTIBS SETB  1                                              81686.\n&J       SETA  4096                                           81687.\n&I       SETA  2                                              81688.\n.M689    AIF   (&I GT N'&BASE).M696                           81689.\n         USING *+&J,&BASE(&I)\n&I       SETA  &I+1                                           81692.\n&J       SETA  &J+4096                                        81693.\n         AGO   .M689                                          81694.\n.M696    ANOP\n.*       CORP  PROC_ESTABLISH_BASE                            81697.\n.*       CALL  PROC_GEN_SAVE_AREA                             81078.\n         AIF   ('&SVTYPE' NE 'OSSAVE').M709                   81703.\n.*       CALL  PROC_GEN_OSSAVE_AREA                           81705.\n.*       CALL  PROC_DEFINE_NEW_OSSAVE                         81725.\n&X       SETC  ''                                             81765.\n&SAVEREG SETC  '&WORKREG'                                     81766.\n         AIF   ('&SAVE(3)' NE 'DYNAM').M789                   81767.\n&LABEL   LA    0,(&SVLENG)*4\n&LABEL   SETC  ''                                             81770.\n         AIF   ('&WORK' EQ 'NONE').M774                       81771.\n         LR    &WORKREG,1\n.M774    ANOP\n*        GETMAIN  R,LV=(0)\n         GETMAIN  R,LV=(0)                                    81775.\n         LR    0,&WORKREG\n         LR    &WORKREG,1\n         AIF   ('&WORK' NE 'NONE').M785                       81778.\n         L     1,24(13)\n         AIF   ('&FIRST' EQ '14' AND '&LAST' EQ '12').M787    81781.\n         MNOTE 4,' STRC8107 REG 1 MUST BE AMONG THOSE SAVED'  81783.\n         AGO   .M787                                          81785.\n.M785    LR    1,0\n.M787    ANOP\n&WORKUSD SETB  1                                              81788.\n         AGO   .M829                                          81789.\n.M789    AIF   ('&SAVE(3)' NE '').M819                        81790.\n         AIF   ('&LABEL' NE '').M802                          81792.\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M797           81794.\n         LR    0,&WORKREG\n.M797    ANOP\n&WORKUSD SETB  1                                              81798.\n         CNOP  0,4\n&LABEL   SETC  '&STRCPFX.CC'                                  81800.\n         BAL   &WORKREG,&LABEL\n         AGO   .M808                                          81802.\n.M802    ANOP\n&X       SETC  '&STRCPFX.ISV'                                 81803.\n         AIF   (&USING13).M808                                81804.\n&SAVEREG SETC  '&BASEREG'                                     81806.\n.M808    AIF   (&STRCDPT AND &PROC1).M810                     81809.\n&X       DC    (&SVLENG)F'0'\n         AGO   .M816                                          81816.\n.M810    ANOP\n&X       DC    A($TRACE),(&SVLENG-1)F'0'\n.M816    ANOP                                                 81816.\n.*       CALL  PROC_MULTIBASE_GEN (COPY A)                    81817.\n         AIF   (NOT &MULTIBS).M989A                           81969.\n         AIF   ('&LABEL' NE '').M975AA                        81971.\n&LABEL   SETC  '&STRCPFX.FF'                                  81973.\n         B     &LABEL\n.M975AA  ANOP\n&I       SETA  2                                              81976.\n&J       SETA  4096                                           81977.\n&X       SETC  '&STRCPFX.MBR'                                 81978.\n.M979A   AIF   (&I GT N'&BASE).M986A                          81979.\n&X       DC    A(&STRCPFX.MBP+&J)\n&X       SETC  ''                                             81983.\n&I       SETA  &I+1                                           81984.\n&J       SETA  &J+4096                                        81985.\n         AGO   .M979A                                         81986.\n.M986A   ANOP\n&MULTIBS SETB  0                                              81988.\n.M989A   ANOP\n.*       CORP  PROC_MULTIBASE_GEN (COPY A)                    81990.\n         AGO   .M829                                          81819.\n.M819    AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M824           81820.\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81823.\n.M824    ANOP\n&WORKUSD SETB  1                                              81825.\n&LABEL   LA    &WORKREG,&SAVE(3)\n&LABEL   SETC  ''                                             81827.\n.M829    ANOP\n.*       CORP  PROC_DEFINE_NEW_OSSAVE                         81831.\n         AIF   (NOT (&STRCDST AND &PROC1)).M737               81728.\n&LABEL   ST    13,$FIRSTSV+4\n&LABEL   SETC  ''                                             81732.\n         MVC   8(4,13),=A($FIRSTSV)\n         L     13,=A($LASTSAV)\n&STRCPSP SETC  '$FIRSTSV'                                     81735.\n&STRCPSA SETC  '0'                                            81736.\n.M737    ANOP\n&LABEL   ST    &SAVEREG,8(13)\n&LABEL   SETC  ''                                             81739.\n         ST    13,4(&SAVEREG)\n         LR    13,&SAVEREG\n         AIF   (NOT &USING13).M745                            81742.\n         USING &STRCPFX.ISV,13\n.M745    AIF   (NOT (&STRCDPT AND &PROC1 AND '&SAVE(3)' NE '')).M756\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M752           81749.\n         LR    0,&WORKREG\n.M752    LA    &WORKREG,$TRACE\n         ST    &WORKREG,0(13)\n&WORKUSD SETB  1                                              81755.\n.M756    ANOP\n.*       CORP  PROC_GEN_OSSAVE_AREA                           81757.\n         AGO   .M717                                          81709.\n.M709    AIF   (('&SAVE' EQ 'NONE' OR '&SVTYPE' EQ 'NONE') AND         *\n               NOT &STRCDST).M717                             81710.\n.*       CALL  PROC_GEN_LOCAL_SAVEAREA                        81713.\n         AIF   ('&LABEL' NE '').M842                          81838.\n&LABEL   SETC  '&STRCPFX.DD'                                  81840.\n         B     &LABEL\n.M842    ANOP\n&STRCPFX.SV  DS  0F\n         AIF   ('&SVTYPE' NE 'FULL' AND '&SVTYPE' NE 'NORMLHDR' AND    *\n               '&SVTYPE' NE 'TRUNCHDR').M848                  81844.\n         DC    X'FF&IDBYTE.0000' FLAG (FF=FINISHED,FE=ENTERED), ID, COU*\n               NT\n.M848    AIF   ('&SVTYPE' NE 'FULL').M860                     81849.\n&FWDPTR  SETC  '&STRCPFX.NXT'                                 81851.\n&STRCPSP EQU   &STRCPFX.SV\n         DC    A(&STRCPSA,&FWDPTR)\n&STRCPSP SETC  '&FWDPTR'                                      81856.\n&STRCPSA SETC  '&STRCPFX.SV'                                  81858.\n.M860    DC    (&SVLENG)F'0'\n.*       CALL  PROC_MULTIBASE_GEN (COPY B)                    81862.\n         AIF   (NOT &MULTIBS).M989B                           81969.\n         AIF   ('&LABEL' NE '').M975BB                        81971.\n&LABEL   SETC  '&STRCPFX.FF'                                  81973.\n         B     &LABEL\n.M975BB  ANOP\n&I       SETA  2                                              81976.\n&J       SETA  4096                                           81977.\n&X       SETC  '&STRCPFX.MBR'                                 81978.\n.M979B   AIF   (&I GT N'&BASE).M986B                          81979.\n&X       DC    A(&STRCPFX.MBP+&J)\n&X       SETC  ''                                             81983.\n&I       SETA  &I+1                                           81984.\n&J       SETA  &J+4096                                        81985.\n         AGO   .M979B                                         81986.\n.M986B   ANOP\n&MULTIBS SETB  0                                              81988.\n.M989B   ANOP\n.*       CORP  PROC_MULTIBASE_GEN (COPY B)                    81990.\n.*       CORP  PROC_GEN_LOCAL_SAVEAREA                        81863.\n.M717    ANOP\n.*       CORP  PROC_GEN_SAVEAREA                              81718.\n.*       CALL  PROC_MULTIBASE_GEN (COPY C)                    81082.\n         AIF   (NOT &MULTIBS).M989C                           81969.\n         AIF   ('&LABEL' NE '').M975CC                        81971.\n&LABEL   SETC  '&STRCPFX.FF'                                  81973.\n         B     &LABEL\n.M975CC  ANOP\n&I       SETA  2                                              81976.\n&J       SETA  4096                                           81977.\n&X       SETC  '&STRCPFX.MBR'                                 81978.\n.M979C   AIF   (&I GT N'&BASE).M986C                          81979.\n&X       DC    A(&STRCPFX.MBP+&J)\n&X       SETC  ''                                             81983.\n&I       SETA  &I+1                                           81984.\n&J       SETA  &J+4096                                        81985.\n         AGO   .M979C                                         81986.\n.M986C   ANOP\n&MULTIBS SETB  0                                              81988.\n.M989C   ANOP\n.*       CORP  PROC_MULTIBASE_GEN (COPY C)                    81990.\n.*       CALL  PROC_DEBUG_STUFF                               81084.\n         AIF   (NOT &STRCDPT).M907                            81871.\n         AIF   (NOT &STRCTVG).M886                            81873.\n         AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M879           81875.\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81878.\n.M879    ANOP\n&LABEL   L     &WORKREG,=A($TRACE)\n         MVC   0(256,&WORKREG),1(&WORKREG)\n         MVI   256(&WORKREG),X'&IDBYTE'\n&WORKUSD SETB  1                                              81885.\n         AGO   .M905                                          81886.\n.M886    AIF   ('&LABEL' NE '').M891                          81887.\n&LABEL   SETC  '&STRCPFX.EE'                                  81889.\n         B     &LABEL\n.M891    DC    C'$TRACE'\n$TRACE   DC    258X'FF'\n&STRCTVG SETB  1                                              81894.\n         AIF   (NOT ((&STRCDPC OR &STRCDBC) AND &PROC1)).M902\n&STRCPFX.PCT  DC  H'0' PROC COUNT\n&PCTWVEC SETB  1                                              81901.\n.M902    ANOP\n&LABEL   MVC   $TRACE(256),$TRACE+1\n         MVI   $TRACE+256,X'&IDBYTE'\n.M905    ANOP\n&LABEL   SETC  ''                                             81906.\n.M907    AIF   (NOT (&STRCDPC OR &STRCDBC)).M938              81908.\n         AIF   (NOT &OSLINK AND                                        *\n               ('&SAVE' NE 'NONE' OR &STRCDST)).M923          81910.\n         AIF   (&PCTWVEC).M921                                81912.\n         AIF   ('&LABEL' NE '').M918                          81914.\n         NOP   0\n&STRCPFX.PCT  EQU  *-2 PROC COUNT\n         AGO   .M921                                          81918.\n.M918    ANOP\n&STRCPFX.PCT  DC  H'0' PROC COUNT\n.M921    ANOP\n&SPOT    SETC  'PCT'                                          81922.\n         AGO   .M925                                          81923.\n.M923    ANOP\n&SPOT    SETC  'SV+2'                                         81924.\n.M925    AIF   ('&WORK' NE 'NONE' OR &WORKUSD).M930\n&LABEL   LR    0,&WORKREG\n&LABEL   SETC  ''                                             81929.\n.M930    ANOP\n&LABEL   LH    &WORKREG,&STRCPFX&SPOT\n&LABEL   SETC  ''                                             81933.\n         LA    &WORKREG,1(&WORKREG)\n         STH   &WORKREG,&STRCPFX&SPOT\n&WORKUSD SETB  1                                              81937.\n.M938    AIF   (&OSLINK OR NOT &STRCDST).M943                 81939.\n&LABEL   MVI   &STRCPFX.SV,X'FE'\n&LABEL   SETC  ''                                             81942.\n.M943    ANOP\n.*       CORP  PROC_DEBUG_STUFF                               81944.\n         AIF   (NOT ('&WORK' EQ 'NONE' AND &WORKUSD)).M091    81086.\n&LABEL   LR    &WORKREG,0\n&LABEL   SETC  ''                                             81090.\n.M091    AIF   ('&LABEL' EQ '').M095                          81092.\n&LABEL   DS    0H\n.M095    AIF   ('&LINKAGE(2)' NE 'CSECT').M100                81096.\n         DROP  15\n.M100    ANOP\n.*       CALL  PROC_INFO_SAVE                                 81101.\n&STRCOP1(&STRCNST)  SETC  '&FIRST'                            81951.\n&STRCOP2(&STRCNST)  SETC  '&LAST'                             81952.\n&STRCOP3(&STRCNST)  SETC  '&SVLENG'                           81953.\n&STRCOP4(&STRCNST)  SETC  '&PVDEBUG'                          81954.\n&I       SETA  &OFFSET0+50                                    81955.\n&BIT     SETB  ('&SAVE(3)' EQ 'DYNAM')                        81957.\n&STRCINF(&STRCNST)  SETC  '&I&OSLINK&BIT&FRKNOWN&IDBYTE&SPECPFX'\n         AIF   (NOT &STRCDDM).M960                            DEBUGMACS\n         MNOTE *,' STRC8199 PROC SAVES OP1=&FIRST,OP2=&LAST,OP3=&SVLENG*\n               ,OP4=&PVDEBUG,INF=&STRCINF(&STRCNST)'          DEBUGMACS\n.M960    ANOP\n.*       CORP  PROC_INFO_SAVE                                 81960.\n.FIN     ANOP\n         AIF   ('&DSECT' EQ '').EXITPRO\n         USING &DSECT,13\n.EXITPRO MEND\n./ ADD NAME=PROCEND  8512-86097-86097-1148-00005-00005-00000-ISPFDYN\n         MACRO\n&USRNAME PROCEND  &PROCNAM,&RETURN=,&LINK=14,&RESTORE=,&RC=\n&USRNAME CORP     &PROCNAM,RETURN=&RETURN,LINK=&LINK,                  *\n               RESTORE=&RESTORE,RC=&RC\n         MEND\n./ ADD NAME=SELECT   8512-85095-85095-1208-00128-00128-00000-ISPFDYN\n         MACRO\n&NAME    SELECT &BUFLEN,                BUFFER LENGTH (POS)            *\n               &BUF,                    BUFFER ADDRESS (POS)           *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFSELECT               WAS A SELECT GENERATED\n         GBLB  &SPFDEBUG                DEBUG MODE SWITCH\n         GBLB  &SPFVAR                  WAS ISPF PARMS ISSUED\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS REQUIRED\n         GBLA  &SPFVARC                 NUMBER OF FULLWORDS USED\n         LCLC  &NDX                     REDEFINE MACRO INDEX SYSNDX\n         LCLC  &P1                      INTERNAL- FIRST CALL PARM\n         LCLC  &P2                      INTERNAL- SECOND CALL PARM\n         LCLA  &LEN                     INTERNAL- LENGTH OF BUFFER GEN\n.*\n.**********************************************************************\n.*       SET INTERNAL GLOBALS\n.**********************************************************************\n.*\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&BUF' EQ '').ERR1\n         AIF   ('&BUF'(1,1) EQ '''' AND '&BUFLEN' NE '').WARN\n.CONT    AIF   ('&MF(1)' NE 'I' AND '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFSELECT).GENLIT\n         AIF   ('&BUFLEN' EQ '').CNT1\n         AIF   (T'&BUFLEN EQ 'N' AND '&BUFLEN'(1,1) NE '(').GENLIT\n.CNT1    AIF   ('&BUF' EQ '').CNT2\n         AIF   ('&BUF'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFSELECT).BYP20\nSELECT   DC    CL8'SELECT'              ISPF KEYWORD\n&SPFSELECT SETB 1\n.BYP20   ANOP\n         AIF   ('&BUFLEN' EQ '').BYP40\n         AIF   (T'&BUFLEN NE 'N' OR '&BUFLEN'(1,1) EQ '(').BYP40\n         AIF   ('&BUF'(1,1) EQ '''').BYP40\nSPFL&NDX DC    F'&BUFLEN'               BUFFER LENGTH GENERATED\n.BYP40   ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP50\n         CNOP  0,4\n&LEN     SETA  K'&BUF+3\n&LEN     SETA  &LEN/4*4\nSPFB&NDX DC    CL&LEN&BUF               GENERATED SELECT BUFFER\nSPFL&NDX DC    F'&LEN'                  GENERATED SELECT LENGTH\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&BUFLEN' EQ '').BYP100\n         AIF   ('&BUF'(1,1) EQ '''').BYP100\n         AIF   (T'&BUFLEN EQ 'N' AND '&BUFLEN'(1,1) NE '(').BYP100\n&P1      SETC  '&BUFLEN'\n         AGO   .BYP120\n.BYP100  ANOP\n&P1      SETC  'SPFL&NDX'\n.BYP120  ANOP\n         AIF   ('&BUF'(1,1) EQ '(').BYP130\n         AIF   ('&BUF'(1,1) NE '''').BYP130\n&P2      SETC  'SPFB&NDX'\n         AGO   .BYP150\n.BYP130  ANOP\n&P2      SETC  '&BUF'\n.BYP150  ANOP\n         L     15,&LOAD                 LOAD ADDRESS OF ISPLINK\n         AIF   ('&MF(1)' EQ 'E' AND '&MF(2)' EQ '').CALL2\n         CALL  (15),(SELECT,&P1,&P2),VL,MF=&MF\n         AGO   .VARIT\n.CALL2   ANOP\n         CALL  (15),(SELECT,&P1,&P2),VL,MF=(E,SPFPARMS)\n.VARIT   AIF   (NOT &SPFVAR).BYVAR      WAS ISPF PARMS ISSUED\n         AIF   (&SPFVARC LT 3).ERRVAR   WAS PARMLIST TOO LITTLE\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS  SET PARMLIST SIZE TO AT LEAST\n&SPFVARS SETA  3                        3 FULLWORDS\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BUFFER FOR SELECT COMMAND IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR5    ANOP\n         MNOTE 16,'SELECT BUFFER MAY BE REGISTER ONLY WHEN MF=E'\n         MEXIT\n.WARN    ANOP\n         MNOTE 4,'BUFFER LENGTH IS IGNORED FOR LITERAL BUFFER'\n         AGO   .CONT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=SETMSG   8512-85095-85095-1208-00136-00136-00000-ISPFDYN\n         MACRO\n&NAME    SETMSG &P1,&MSG=,              MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFSETMSG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @SETMSG &P1,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFSETMSG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFSETMSG).BYP20\nSETMSG   DC    CL8'SETMSG'              ISPF KEYWORD\n&SPFSETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,SETMSG                GET ADDRESS OF SETMSG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(SETMSG)                BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=STRCCEP  8512-86097-86097-1148-00140-00140-00000-ISPFDYN\n         MACRO\n&FIRSTID STRCCEP\n         COPY  STRCGBLS\n         LCLA  &CCOUNT            COND_COUNT                  97013.\n         LCLA  &DEPTH             DEPTH                       97015.\n         LCLA  &INDEX             INDEX                       97017.\n         LCLA  &OPCOUNT           OP_COUNT                    97019.\n         LCLA  &NXINDEX           NEXT_INDEX                  97021.\n         LCLA  &NXDEPTH           NEXT_DEPTH                  97023.\n         LCLA  &LADEPTH           LA_DEPTH                    97024.\n         LCLA  &I                 I                           97025.\n         LCLB  &ANDOR             AND_OR_OUTSTANDING          97028.\n         LCLB  &LOCFC             LOCAL_FALLTHRU_CONDITION    97030.\n         LCLB  &LOCLAB(20)        LOCAL_LABEL_REQD            97033.\n         LCLC  &LABEL             LABEL                       97036.\n         LCLC  &LOCBR             LOCAL_BRANCH_LABEL          97037.\n         LCLC  &LOOKFOR           LOOKFOR                     97181.\n         LCLA  &MXDEPTH           MAX_DEPTH                   97183.\n         LCLA  &TARGET            TARGET                      97185.\n         STRCTRAC  STRCCEP                                    97041.\n         AIF   (NOT &STRCDDM).M043                            DEBUGMACS\n         MNOTE *,' STRCCEP SYSLIST=&SYSLIST(1),&SYSLIST(2),&SYSLIST(3),*\n               &SYSLIST(4),&SYSLIST(5),...'                   DEBUGMACS\n.M043    ANOP\n&LABEL   SETC  '&FIRSTID'                                     97043.\n&CCOUNT  SETA  0                                              97045.\n&DEPTH   SETA  0                                              97046.\n&INDEX   SETA  &STRCFRX                                       97047.\n.M048    AIF   (&INDEX GT &STRCLSX).M087                      97048.\n.*       CALL  CEP_FIND_NEXT_CONDITION                        97050.\n&STRCERR SETB  0                                              97106.\n.M107    AIF   (&INDEX GT &STRCLSX).M111                      97107.\n  AIF  ('&SYSLIST(&INDEX)' NE '<' AND '&SYSLIST(&INDEX)' NE '+').M111\n&DEPTH   SETA  &DEPTH+1                                       97109.\n&INDEX   SETA  &INDEX+1                                       97110.\n         AGO   .M107                                          97111.\n.M111    AIF   ('&SYSLIST(&INDEX)'(1,1) EQ '(').M119          97114.\n         MNOTE 8,' STRC9706 SYNTAX ERROR--LOOKING FOR SIMPLE' 97116.\n         MNOTE 0,'          CONDITIONAL, FOUND \"&SYSLIST(&INDEX)\"'\n&STRCERR SETB  1                                              97118.\n.M119    ANOP\n&CCOUNT  SETA  &CCOUNT+1                                      97120.\n.*       CORP  CEP_FIND_NEXT_CONDITION                        97121.\n         AIF   (&STRCERR).FIN                                 97054.\n&ANDOR   SETB  0                                              97058.\n.*       CALL  CEP_LOOKAHEAD                                  97059.\n&STRCERR SETB  0                                              97133.\n&LADEPTH SETA  &DEPTH                                         97134.\n&I       SETA  &INDEX+1                                       97135.\n.M136    AIF   (&I GT &STRCLSX).M145                          97136.\n         AIF   ('&SYSLIST(&I)' NE '>' AND '&SYSLIST(&I)' NE '/').M145\n&I       SETA  &I+1                                           97138.\n         AIF   (&LADEPTH LE 0).M142                           97139.\n&LADEPTH SETA  &LADEPTH-1                                     97141.\n         AGO   .M144                                          97142.\n.M142    MNOTE 8,' STRC9705 SUPERFLUOUS BRACKET IGNORED'      97143.\n.M144    AGO   .M136                                          97145.\n.M145    ANOP\n&NXINDEX SETA  &I+1                                           97148.\n&NXDEPTH SETA  &LADEPTH                                       97150.\n         AIF   (&I LE &STRCLSX).M155                          97151.\n&LOCBR   SETC  '&STRCUBL'                                     97153.\n&LOCFC   SETB  (&STRCUFC)                                     97154.\n         AGO   .M166                                          97155.\n.M155    AIF   ('&SYSLIST(&I)' NE 'AND' AND                            *\n               '&SYSLIST(&I)' NE 'OR').M161                   97156.\n.*       CALL  CEP_SCAN_FOR_BRANCH                            97158.\n&ANDOR   SETB  1                                              97188.\n         AIF   ('&SYSLIST(&I)' NE 'AND').M194                 97189.\n&LOCFC   SETB  1                                              97191.\n&LOOKFOR SETC  'OR'                                           97192.\n&MXDEPTH SETA  &LADEPTH                                       97193.\n         AGO   .M203                                          97194.\n.M194    ANOP\n&LOCFC   SETB  0                                              97195.\n         AIF   (&LADEPTH NE 0).M200                           97196.\n&I       SETA  &STRCLSX+1                                     97198.\n.M200    ANOP\n&LOOKFOR SETC  'AND'                                          97201.\n&MXDEPTH SETA  &LADEPTH-1                                     97202.\n.M203    ANOP\n&I       SETA  &I+1                                           97204.\n&TARGET  SETA  &CCOUNT+1                                      97205.\n.M206    AIF   (&I GT &STRCLSX).M236                          97206.\n  AIF  ('&SYSLIST(&I)' EQ '&LOOKFOR' AND &LADEPTH LE &MXDEPTH).M236\n         AIF   ('&SYSLIST(&I)' NE '<' AND '&SYSLIST(&I)' NE '+').M212\n&LADEPTH SETA  &LADEPTH+1                                     97211.\n         AGO   .M234                                          97212.\n.M212    AIF   ('&SYSLIST(&I)' NE '>' AND '&SYSLIST(&I)' NE '/').M219\n         AIF   (&LADEPTH LE 0).M234                           97215.\n&LADEPTH SETA  &LADEPTH-1                                     97217.\n         AGO   .M234                                          97219.\n.M219    AIF   ('&SYSLIST(&I)'(1,1) NE '(').M224              97219.\n&TARGET  SETA  &TARGET+1                                      97222.\n         AGO   .M234                                          97223.\n.M224    AIF ('&SYSLIST(&I)' EQ 'AND' OR '&SYSLIST(&I)' EQ 'OR').M234\n         MNOTE 8,' STRC9704 SYNTAX ERROR--\"&SYSLIST(&I)\" INVALID'\n&STRCERR SETB  1                                              97228.\n&I       SETA  &STRCLSX+1                                     97229.\n.M234    ANOP\n&I       SETA  &I+1                                           97235.\n         AGO   .M206                                          97236.\n.M236    AIF   (&I LE &STRCLSX).M251                          97239.\n         AIF   (NOT(('&LOOKFOR' EQ 'OR' AND NOT &STRCUFC) OR           *\n               ('&LOOKFOR' EQ 'AND' AND &STRCUFC))).M248      97241.\n&LOCBR   SETC  '&STRCUFL'                                     97246.\n&STRCFLU SETB  1                                              97247.\n         AGO   .M257                                          97248.\n.M248    ANOP\n&LOCBR   SETC  '&STRCUBL'                                     97249.\n         AGO   .M257                                          97251.\n.M251    ANOP\n&LOCBR   SETC  '&STRCPFX&STRCUID&TARGET'                      97252.\n&LOCLAB(&TARGET)  SETB  1                                     97253.\n.M257    ANOP\n.*       CORP  CEP_SCAN_FOR_BRANCH                            97258.\n         AGO   .M166                                          97161.\n.M161    MNOTE 8,' STRC9703 SYNTAX ERROR--LOOKING FOR \"AND\" OR \"OR\",'\n         MNOTE 0,'          FOUND \"&SYSLIST(&I)\"'             97162.\n&STRCERR SETB  1                                              97164.\n.M166    ANOP\n.*       CORP  CEP_LOOKAHEAD                                  97167.\n         AIF   (&STRCERR).FIN                                 97066.\n         AIF   (NOT &LOCLAB(&CCOUNT)).M073                    97070.\n&LABEL   SETC  '&STRCPFX&STRCUID&CCOUNT'                      97022.\n.M073    ANOP\n&OPCOUNT SETA  N'&SYSLIST(&INDEX)                             97074.\n&LABEL   STRCSCND &SYSLIST(&INDEX,1),&SYSLIST(&INDEX,2),               *\n               &SYSLIST(&INDEX,3),&SYSLIST(&INDEX,4),                  *\n               &SYSLIST(&INDEX,5),&LOCBR,&LOCFC,&OPCOUNT      97075.\n&LABEL   SETC  ''                                             97084.\n&INDEX   SETA  &NXINDEX                                       97085.\n&DEPTH   SETA  &NXDEPTH                                       97086.\n         AGO   .M048                                          97087.\n.M087    AIF   (NOT &ANDOR).M093                              97090.\n         MNOTE 8,' STRC9701 INSUFFICIENT OPERANDS'            97092.\n.M093    AIF   (&DEPTH EQ 0).M097                             97094.\n         MNOTE 8,' STRC9702 INSUFFICIENT BRACKETS'            97096.\n.M097    ANOP\n.FIN     MEND\n./ ADD NAME=STRCGBLS 8512-86097-86097-1148-00057-00057-00000-ISPFDYN\n.*\n.*             GLOBAL VARIABLE SYMBOLS\n.*\n.* GENERAL\n         GBLA  &STRCPCT           PROC_COUNTER                  137.\n         GBLA  &STRCLB#           LAST_BLOCK_NO                 139.\n         GBLA  &STRCHXI           HEX_IN                        141.\n         GBLB  &STRCERR           ERROR_OCCURRED                144.\n         GBLB  &STRCTFT           TDL_FALLTHRU_OCCURS           146.\n         GBLB  &STRCNFP           NOT_FIRST_PROC                149.\n         GBLB  &STRCSFP           SAVETRACE_ON_FIRST_PROC       151.\n         GBLB  &STRCTVG           TRACE_VECTOR_GENNED           153.\n         GBLC  &STRCPFX           BLOCK_LABEL_PREFIX            158.\n         GBLC  &STRCXSV           EXIT_SEVERITY                 160.\n         GBLC  &STRCHEX(16)       HEX                           162.\n         GBLC  &STRCHXO           HEX_OUT                       163.\n         GBLC  &STRCPSA           PREV_SAVETRACE_AREA           164.\n         GBLC  &STRCPSP           PREV_SAVETRACE_PTR            166.\n.* DEBUG FLAGS\n         GBLB  &STRCDBC           DEBUG_BLOCKCOUNTS_REQD        173.\n         GBLB  &STRCDBN           DEBUG_BLOCKNAMES_REQD         175.\n         GBLB  &STRCDCV           DEBUG_CORPVALUES_REQD         177.\n         GBLB  &STRCDDM           DEBUG_DEBUGMACROS_REQD        179.\n         GBLB  &STRCDLB           DEBUG_LISTBLOCKS_REQD         181.\n         GBLB  &STRCDMN           DEBUG_MACRONAMES_REQD         184.\n         GBLB  &STRCDPC           DEBUG_PROCCOUNTS_REQD         187.\n         GBLB  &STRCDPN           DEBUG_PROCNAMES_REQD          189.\n         GBLB  &STRCDPT           DEBUG_PROCTRACE_REQD          191.\n         GBLB  &STRCDST           DEBUG_SAVETRACE_REQD          193.\n.* MAIN STACK\n         GBLA  &STRCNST           CURRENT_NEST_LEVEL            200.\n         GBLA  &STRCNSL           NESTING_LIMIT                 202.\n         GBLA  &STRCBL#(100)      BLOCK_NUMBER                  203.\n         GBLB  &STRCEND(100)      END_LABEL_REQD                206.\n         GBLB  &STRCXIT(100)      EXIT_LABEL_REQD               208.\n         GBLC  &STRCNAM(100)      BLOCK_NAME                    212.\n         GBLC  &STRCTYP(100)      BLOCK_TYPE                    215.\n         GBLC  &STRCOP1(100)      OPERAND1                      217.\n         GBLC  &STRCOP2(100)      OPERAND2                      217.\n         GBLC  &STRCOP3(100)      OPERAND3                      217.\n         GBLC  &STRCOP4(100)      OPERAND4                      217.\n         GBLC  &STRCINF(100)      INFORMATION                   217.\n.* GCASE STACK\n         GBLA  &STRCMCV(9)        MAX_CASE_VALUE                230.\n         GBLA  &STRCCL#(9)        NEXT_COMP_LABEL_NO            231.\n         GBLA  &STRCGNL           GCASE_NEST_LEVEL              233.\n         GBLA  &STRCGNX           GCASE_NEST_LIMIT              236.\n         GBLB  &STRCOCC(2304)     CASE_OCCURS                   240.\n.* CEP PSEUDOS\n         GBLA  &STRCFRX           FIRST_INDEX                   247.\n         GBLA  &STRCLSX           LAST_INDEX                    248.\n         GBLB  &STRCUFC           ULTIMATE_FALLTHRU_CONDITION   253.\n         GBLB  &STRCFLU           FALLTHRU_LABEL_USED           256.\n         GBLC  &STRCUBL           ULTIMATE_BRANCH_LABEL         260.\n         GBLC  &STRCUFL           ULTIMATE_FALLTHRU_LABEL       263.\n         GBLC  &STRCUID           UNIQUE_LABEL_ID               269.\n.*\n./ ADD NAME=STRCPOP  8512-86097-86097-1148-00025-00025-00000-ISPFDYN\n         MACRO\n         STRCPOP  &OLDEXIT                                    92002.\n         COPY  STRCGBLS\n         STRCTRAC  STRCPOP                                    92005.\n         AIF   (&STRCNST GT &STRCNSL).M037                    92007.\n         AIF   (NOT &STRCEND(&STRCNST)).M012                  92011.\n$&STRCBL#(&STRCNST)END  DS  0H\n.M012    AIF   (NOT &STRCXIT(&STRCNST) AND '&OLDEXIT' EQ '').M028\n         AIF   ('&STRCXSV' NE '').M018                        92015.\n&STRCXSV SETC  '0'                                            92017.\n.M018    MNOTE &STRCXSV,' STRC9201 ONE OR MORE EXIT''S REFERENCE THIS P*\n               OINT'                                          92020.\n         AIF   (NOT &STRCXIT(&STRCNST)).M024                  92021.\n         MNOTE &STRCXSV,'          VIA $&STRCBL#(&STRCNST)XIT'\n$&STRCBL#(&STRCNST)XIT  DS  0H\n.M024    AIF   ('&OLDEXIT' EQ '').M028                        92025.\n         MNOTE &STRCXSV,'          VIA &OLDEXIT'\n&OLDEXIT DS    0H\n.M028    AIF   (NOT &STRCDLB).M037                            92030.\n         MNOTE *,' STRC9202 END OF BLOCK &STRCBL#(&STRCNST)(&STRCNAM(&S*\n               TRCNST)) AT DEPTH &STRCNST'                    92033.\n         MNOTE *,'****************************************************'\n.M037    ANOP\n&STRCNST SETA  &STRCNST-1                                     92038.\n         MEND\n./ ADD NAME=STRCPUSH 8512-86097-86097-1148-00042-00042-00000-ISPFDYN\n         MACRO\n&NAMEVAL STRCPUSH  &TYPEVAL=,&OP1VAL=,&OP2VAL=,&OP3VAL=,      93001.   *\n               &OP4VAL=,&INFVAL=,&ENDVAL=0                    93001.\n         COPY  STRCGBLS\n         STRCTRAC  STRCPUSH                                   93013.\n&STRCNSL SETA  100                                            93015.\n&STRCGNX SETA  9                                              39016.1\n&STRCERR SETB  0                                              93021.\n&STRCNST SETA  &STRCNST+1                                     93022.\n         AIF   (&STRCNST LE &STRCNSL).M028                    93023.\n         MNOTE 12,' STRC9301 BLOCK NESTING LIMIT OF &STRCNSL EXCEEDED'\n         MNOTE 0,'           MACROS MUST BE MODIFIED'         93025.\n&STRCERR SETB  1                                              93027.\n         AGO   .M059                                          93028.\n.M028    ANOP\n&STRCLB# SETA  &STRCLB#+1                                     93029.\n&STRCBL#(&STRCNST)  SETA  &STRCLB#                            93031.\n&STRCXIT(&STRCNST)  SETB  0                                   93032.\n&STRCTYP(&STRCNST)  SETC  '&TYPEVAL'                          93033.\n&STRCOP1(&STRCNST)  SETC  '&OP1VAL'                           93034.\n&STRCOP2(&STRCNST)  SETC  '&OP2VAL'                           93035.\n&STRCOP3(&STRCNST)  SETC  '&OP3VAL'                           93036.\n&STRCOP4(&STRCNST)  SETC  '&OP4VAL'                           93037.\n&STRCINF(&STRCNST)  SETC  '&INFVAL'                           93038.\n&STRCEND(&STRCNST)  SETB  ('&ENDVAL' EQ '1')                  93039.\n&STRCNAM(&STRCNST)  SETC  '&NAMEVAL'                          93040.\n         AIF   ('&NAMEVAL' NE '').M044                        93041.\n&STRCNAM(&STRCNST)  SETC  'BLK&STRCLB#'                       93043.\n.M044    ANOP\n&STRCPFX SETC  '$&STRCLB#'                                    93045.\n         AIF   (&STRCNST LE 1).M52                            93046.\n         AIF   ('&STRCTYP(&STRCNST-1)' NE 'DOCASE' OR                  *\n               '&TYPEVAL' EQ 'CASE').M52                      93046.\n         MNOTE 8,' STRC9302 NON-CASE BLOCK IMMEDIATELY SURROUNDED'\n         MNOTE 0,'                BY DOCASE INVALID'\n.M52     AIF   (NOT &STRCDLB).M058                            93053.\n         MNOTE *,'****************************************************'\n         MNOTE *,' STRC9302 START OF BLOCK &STRCLB#.(&STRCNAM(&STRCNST)*\n               ) AT DEPTH &STRCNST'                           93056.\n.M058    ANOP\n.M059    ANOP\n         MEND\n./ ADD NAME=STRCSCND 8512-86097-86097-1148-00070-00070-00000-ISPFDYN\n         MACRO\n&LABEL   STRCSCND  &OPCODE,&OPER1,&OPER2,&OPER3,&OPER4,&BRANCH,        *\n               &FALTHRU,&OPCOUNT                              94001.\n         COPY  STRCGBLS\n         LCLC  &LOCMASK           LOCAL_MASK                  94013.\n         LCLC  &LOCREL            LOCAL_REL                   94013.\n         LCLC  &BCTAG             BC_TAG                      94014.\n         STRCTRAC  STRCSCND                                   94016.\n.*       CALL  SIMPCOND_GET_MASK_OR_REL                       94018.\n         AIF   (&OPCOUNT NE 0).M079                           94075.\n         MNOTE 8,' STRC9403 NO CONDITION SPECIFIED--\"MASK=0\" ASSUMED'\n&LOCMASK SETC  '0'                                            94078.\n         AGO   .M109                                          94079.\n.M079    AIF   ('&SYSLIST(&OPCOUNT)'(1,5) NE 'MASK=').M083    94080.\n&LOCMASK SETC  '&SYSLIST(&OPCOUNT)'(6,8)                      94082.\n         AGO   .M109                                          94083.\n.M083    AIF   ('&SYSLIST(&OPCOUNT)'(1,4) NE 'REL=').M087     94084.\n&LOCREL  SETC  '&SYSLIST(&OPCOUNT)'(5,8)                      94086.\n         AGO   .M089                                          94087.\n.M087    ANOP\n&LOCREL  SETC  '&SYSLIST(&OPCOUNT)'                           94088.\n.M089    AIF   ('&LOCREL' NE 'GT').M095                       94092.\n&LOCREL  SETC  'H'                                            94093.\n         AGO   .M109                                          94094.\n.M095    AIF   ('&LOCREL' NE 'GE').M098                       94095.\n&LOCREL  SETC  'NL'                                           94096.\n         AGO   .M109                                          94097.\n.M098    AIF   ('&LOCREL' NE 'EQ').M101                       94098.\n&LOCREL  SETC  'E'                                            94099.\n         AGO   .M109                                          94100.\n.M101    AIF   ('&LOCREL' NE 'LT').M104                       94101.\n&LOCREL  SETC  'L'                                            94102.\n         AGO   .M109                                          94103.\n.M104    AIF   ('&LOCREL' NE 'LE').M109                       94104.\n&LOCREL  SETC  'NH'                                           94105.\n.M109    ANOP\n.*       CORP  SIMPCOND_GET_MASK_OR_REL                       94110.\n         AIF   (&OPCOUNT NE 1).M027                           94024.\n&BCTAG   SETC  '&LABEL'                                       94025.\n         AGO   .M046                                          94026.\n.M027    AIF   (&OPCOUNT NE 2).M031                           94027.\n         MNOTE 8,' STRC9401 INSUFFICIENT OPERANDS FOR TEST \"&OPCODE\"'\n         AGO   .M046                                          94030.\n.M031    AIF   (&OPCOUNT NE 3).M034                           94031.\n&LABEL   &OPCODE  &OPER1\n         AGO   .M046                                          94033.\n.M034    AIF   (&OPCOUNT NE 4).M038                           94034.\n&LABEL   &OPCODE  &OPER1,&OPER2\n         AGO   .M046                                          94037.\n.M038    AIF   (&OPCOUNT NE 5).M042                           94038.\n&LABEL   &OPCODE  &OPER1,&OPER2,&OPER3\n         AGO   .M046                                          94041.\n.M042    MNOTE 8,' STRC9402 SUPERFLUOUS OPERANDS FOR TEST \"&OPCODE\"'\n&LABEL   &OPCODE  &OPER1,&OPER2,&OPER3\n.M046    AIF   ('&LOCMASK' NE '').M059                        94047.\n         AIF   ('&FALTHRU' EQ '0').M057                       94049.\n         AIF   ('&LOCREL'(1,1) NE 'N').M054                   94051.\n&LOCREL  SETC  '&LOCREL'(2,7)                                 94053.\n         AGO   .M057                                          94054.\n.M054    ANOP\n&LOCREL  SETC  'N&LOCREL'                                     94055.\n.M057    ANOP\n&BCTAG   B&LOCREL    &BRANCH\n         AGO   .M067                                          94059.\n.M059    AIF   ('&FALTHRU' EQ '0').M064                       94060.\n&BCTAG   BC    X'F'-(&LOCMASK),&BRANCH\n         AGO   .M067                                          94064.\n.M064    ANOP\n&BCTAG   BC    &LOCMASK,&BRANCH\n.M067    MEND\n./ ADD NAME=STRCTDL  8512-86097-86097-1148-00045-00045-00000-ISPFDYN\n         MACRO\n         STRCTDL\n         COPY  STRCGBLS\n         LCLB  &LBLABRQ           LB_LABEL_REQ                98007.\n         LCLC  &X                 X                           98010.\n         LCLC  &LABEL             LABEL                       98011.\n         LCLC  &BR8,&BR10,&BR11   BRANCH8,BRANCH10,BRANCH11   98012.\n         LCLC  &LBOPCOD           LB_OPCODE                   98014.\n         LCLC  &OPER1,&OPER2      OPER1,OPER2                 98014.\n         STRCTRAC  STRCTDL                                    98017.\n&X       SETC  '&STRCINF(&STRCNST)'                           98019.\n&BR8     SETC  '&X'(1,1)                                      98020.\n&BR10    SETC  '&X'(2,1)                                      98021.\n&BR11    SETC  '&X'(3,1)                                      98022.\n&LBLABRQ SETB  ('&X'(4,1) EQ '1')                             98023.\n&OPER1   SETC  '&STRCOP1(&STRCNST)'                           98024.\n&OPER2   SETC  '&STRCOP2(&STRCNST)'                           98025.\n&LBOPCOD SETC  '&STRCOP3(&STRCNST)'                           98026.\n&STRCPFX SETC  '$&STRCBL#(&STRCNST)'                          98027.\n         AIF   (NOT &LBLABRQ).M033                            98028.\n&LABEL   SETC  '&STRCPFX.LPB'                                 98030.\n.M033    AIF   ('&BR8' NE 'W' AND '&BR8' NE 'U').M038         98035.\n         B     &STRCPFX&BR8.1\n         AGO   .M044                                          98037.\n.M038    AIF   ('&BR8' NE 'B').M044                           98038.\n         B     &STRCPFX.BEG\n.M044    ANOP\n&STRCTFT SETB  0                                              98045.\n         AIF   ('&LBOPCOD' EQ '').M072                        98046.\n&STRCTFT SETB  1                                              98048.\n         AIF   ('&BR10' NE 'B').M053                          98050.\n&X       SETC  'BEG'                                          98052.\n         AGO   .M055                                          98053.\n.M053    ANOP\n&X       SETC  '&BR10.1'                                      98054.\n.M055    AIF   ('&LBOPCOD' NE 'BCT').M060                     98056.\n&LABEL   BCT   &OPER1,&STRCPFX&X\n         AGO   .M063                                          98060.\n.M060    ANOP\n&LABEL   &LBOPCOD   &OPER1,&OPER2,&STRCPFX&X\n.M063    AIF   ('&BR11' EQ 'N').M071                          98064.\n         B     &STRCPFX&BR11.1\n&STRCTFT SETB  0                                              98069.\n.M071    ANOP\n.M072    MEND\n./ ADD NAME=STRCTRAC 8512-86097-86097-1148-00006-00006-00000-ISPFDYN\n         MACRO\n         STRCTRAC  &MACNAME                                   95001.\n         COPY  STRCGBLS\n         AIF   (NOT &STRCDMN).M007                            95004.\n         MNOTE  *,' STRC9500 &MACNAME'                        95006.\n.M007    MEND\n./ ADD NAME=STRCVERF 8512-86097-86097-1148-00053-00053-00000-ISPFDYN\n         MACRO\n         STRCVERF  &REQTYPE,&REQNAME                          96001.\n         COPY  STRCGBLS\n         LCLA  &I                 I                           96006.\n         STRCTRAC  STRCVERF                                   96008.\n&STRCERR SETB  0                                              96010.\n         AIF   ('&REQNAME' NE '').M043                        96011.\n         AIF   (&STRCNST GT 0).M017                           96013.\n         MNOTE 8,' STRC9607 NO BLOCKS ACTIVE--MACRO IGNORED'  96015.\n&STRCERR SETB  1                                              96016.\n         AGO   .M076                                          96017.\n.M017    AIF   (&STRCNST LT 1).M076                           96018.\n         AIF   ('&STRCTYP(&STRCNST)' EQ '&REQTYPE').M076      96018.\n         AIF   (&STRCNST LT 2).M027                           96021.\n         AIF   ('&STRCTYP(&STRCNST-1)' NE '&REQTYPE').M027    96021.\n         MNOTE 8,' STRC9601 ONE BLEND ASSUMED TO GET TO \"&REQTYPE\" BLOC*\n               K'                                             96024.\n         BLEND\n         AGO   .M076                                          96027.\n.M027    AIF   (&STRCNST LT 3).M035                           96028.\n         AIF   ('&STRCTYP(&STRCNST-2)' NE '&REQTYPE').M035    96028.\n         MNOTE 8,' STRC9602 TWO BLENDS ASSUMED TO GET TO \"&REQTYPE\" BLO*\n               CK'                                            96031.\n         BLEND\n         BLEND\n         AGO   .M076                                          96035.\n.M035    MNOTE 8,' STRC9603 CURRENT BLOCK IS NOT \"&REQTYPE\" BLOCK'\n         MNOTE 0,'          MACRO IGNORED'                    96037.\n&STRCERR SETB  1                                              96038.\n         AGO   .M076                                          96043.\n.M043    ANOP\n&I       SETA  &STRCNST                                       96044.\n.M045    AIF   (&I LE 0).M048                                 96045.\n         AIF   ('&REQNAME' EQ '&STRCNAM(&I)').M048            96045.\n&I       SETA  &I-1                                           96046.\n         AGO   .M045                                          96048.\n.M048    AIF   (&I GT 0).M054                                 96050.\n         MNOTE 8,' STRC9604 NO ACTIVE BLOCK NAMED \"&REQNAME\"' 96052.\n&STRCERR SETB  1                                              96053.\n         AGO   .M076                                          96054.\n.M054    AIF   ('&REQTYPE' EQ '&STRCTYP(&I)').M060            96055.\n         MNOTE 8,' STRC9605 BLOCK \"&REQNAME\" IS NOT A \"&REQTYPE\" BLOCK'\n         MNOTE 0,'          MACRO IGNORED'                    96057.\n&STRCERR SETB  1                                              96059.\n         AGO   .M076                                          96060.\n.M060    ANOP\n.M061    AIF   (&STRCNST LE &I).M070                          96061.\n         MNOTE 8,' STRC9606 END OF BLOCK \"&REQNAME\" IMPLIES END OF'\n         MNOTE 0,'          BLOCK \"&STRCNAM(&STRCNST)\"'       96063.\n         BLEND\n         AGO   .M061                                          96070.\n.M070    ANOP\n.M076    MEND\n./ ADD NAME=STRCXFND 8512-86097-86097-1148-00047-00047-00000-ISPFDYN\n         MACRO\n         STRCXFND  &REQNAME                                   91001.\n         COPY  STRCGBLS\n         LCLA  &I                 I                           91006.\n         STRCTRAC  STRCXFND                                   91008.\n&STRCERR SETB  0                                              91010.\n&I       SETA  &STRCNST-1                                     91012.\n         AIF   ('&REQNAME' EQ '' OR '&REQNAME' EQ '*').M021   91013.\n.M015    AIF   (&I LE 0).M019                                 91015.\n         AIF   ('&REQNAME' EQ '&STRCNAM(&I)').M019            91015.\n         AIF   ('&STRCTYP(&I)' EQ 'PROC').M019                91015.\n&I       SETA  &I-1                                           91018.\n         AGO   .M015                                          91019.\n.M019    ANOP\n.M021    AIF   (&I LE 0).M024                                 91022.\n         AIF   ('&REQNAME' EQ '&STRCNAM(&I)').M041            91023.\n         AIF   ('&REQNAME' EQ '' OR '&REQNAME' EQ '*').M041   91023.\n.M024    ANOP\n&STRCERR SETB  1                                              91025.\n         AIF   ('&REQNAME' NE '' AND '&REQNAME' NE '*').M029\n         MNOTE 8,' STRC9101 EXIT MACRO NOT SUFFICIENTLY NESTED'\n         AGO   .M057                                          91029.\n.M029    AIF   ('&REQNAME' NE '&STRCNAM(&STRCNST)').M033      91030.\n         MNOTE 8,' STRC9103 EXIT TO IMMEDIATELY SURROUNDING BLOCK'\n         MNOTE 0,'          INVALID'                          91032.\n         AGO   .M057                                          91033.\n.M033    MNOTE 8,' STRC9102 NO BLOCK ACTIVE NAMED \"&REQNAME\"' 91034.\n         AIF   (&I LE 0).M038                                 91035.\n         MNOTE 0,'          WITHIN PROC \"&STRCNAM(&I)\"'       91037.\n.M038    AGO   .M057                                          91038.\n.M041    AIF   ('&STRCTYP(&I)' NE 'DO').M049                  91042.\n         AIF   ('&STRCINF(&I)'(6,2) EQ '00').M049             91044.\n         MNOTE 8,' STRC9104 EXIT TO DO BLOCK INVALID WITHIN ATEND OR'\n         MNOTE 0,'                ONEXIT'                     91046.\n&STRCERR SETB  1                                              91047.\n         AGO   .M057                                          91048.\n.M049    AIF   ('&STRCTYP(&I)' NE 'PROC').M053                91049.\n         AIF   ('&STRCINF(&I)'(8,1) NE '1').M053              91049.\n&STRCUBL SETC  '&STRCINF(&I)'(6,2)                            91051.\n&STRCUBL SETC  '$P&STRCUBL.XIT'                               91051.\n         AGO   .M054                                          91052.\n.M053    ANOP\n&STRCUBL SETC  '$&STRCBL#(&I)XIT'                             91053.\n.M054    ANOP\n&STRCXIT(&I)  SETB  1                                         91055.\n.M057    ANOP\n         MEND\n./ ADD NAME=STRCXHEX 8512-86097-86097-1148-00027-00027-00000-ISPFDYN\n         MACRO\n         STRCXHEX\n         COPY  STRCGBLS\n         LCLA  &I,&J              I, J                        99004.\n         STRCTRAC  STRCXHEX                                   99006.\n         AIF   ('&STRCHEX(1)' EQ '0').M014                    99008.\n&STRCHEX(1)  SETC  '0'                                        99010.\n&STRCHEX(2)  SETC  '1'                                        99010.\n&STRCHEX(3)  SETC  '2'                                        99010.\n&STRCHEX(4)  SETC  '3'                                        99010.\n&STRCHEX(5)  SETC  '4'                                        99011.\n&STRCHEX(6)  SETC  '5'                                        99011.\n&STRCHEX(7)  SETC  '6'                                        99011.\n&STRCHEX(8)  SETC  '7'                                        99011.\n&STRCHEX(9)  SETC  '8'                                        99012.\n&STRCHEX(10) SETC  '9'                                        99012.\n&STRCHEX(11) SETC  'A'                                        99012.\n&STRCHEX(12) SETC  'B'                                        99012.\n&STRCHEX(13) SETC  'C'                                        99013.\n&STRCHEX(14) SETC  'D'                                        99013.\n&STRCHEX(15) SETC  'E'                                        99013.\n&STRCHEX(16) SETC  'F'                                        99013.\n.M014    ANOP\n&I       SETA  &STRCHXI/16                                    99015.\n&J       SETA  &STRCHXI-&I*16+1                               99016.\n&STRCHXO SETC  '&STRCHEX(&I+1)&STRCHEX(&J)'                   99017.\n         MEND\n./ ADD NAME=TBADD    8512-85095-85095-1208-00206-00206-00000-ISPFDYN\n         MACRO\n&NAME    TBADD &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ORDER=,                 ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBADD,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBADD &TABLE,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&ORDER' EQ '').K1\n         AIF   ('&ORDER'(1,1) NE '''' OR '&ORDER' EQ '''ORDER''').K1\n         MNOTE 4,'WARNING - ORDER KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBADD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&ORDER' EQ '').CNT3\n         AIF   ('&ORDER'(1,1) EQ '''').GENLIT\n.CNT3    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBADD).BYP20\nTBADD    DC    CL8'TBADD'               ISPF KEYWORD\n&SPFTBADD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   ('&ORDER'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&ORDER                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBADD                 GET ADDRESS OF TBADD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         AIF   ('&ORDER'(1,1) EQ '''').BYP175\n         LA    1,&ORDER                 GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFX&NDX               GET GENNED ORDER KEYWORD\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBADD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         AIF   ('&ORDER'(1,1) EQ '''').BYP275\n         DC    A(&ORDER+X'80000000')    ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED ORDER KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'EXPECTED ORDER KEYWORD - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBBOTTOM 8512-85095-85095-1208-00283-00283-00000-ISPFDYN\n         MACRO\n&NAME    TBBOTTOM &TABLE,               TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ROWID=,                 ROW ID NAME                    *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBBOTTOM,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBBOTTO &TABLE,&P2,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' EQ '').K1\n         AIF   ('&NOREAD'(1,1) NE '''' OR '&NOREAD' EQ '''NOREAD''').K1\n         MNOTE 4,'WARNING - NOREAD KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBBOTTOM).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' EQ '').CNT3A\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT3A   ANOP\n         AIF   ('&POSITION' EQ '').CNT4\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POSITION' EQ '').CNT5\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBBOTTOM).BYP20\nTBBOTTOM DC    CL8'TBBOTTOM'            ISPF KEYWORD\n&SPFTBBOTTOM SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVE' EQ '').BYP40\n         AIF   ('&SAVE'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVE                 GENERATED SAVE NAME-LIST\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   ('&NOREAD'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOREAD               GENERATED NOREAD KEYWORD\n.BYP60   ANOP\n         AIF   ('&POSITION' EQ '').BYP70\n         AIF   ('&POSITION'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POSITION             GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBBOTTOM              GET ADDRESS OF TBBOTTOM KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP1100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP1110\n         LA    0,&SAVE                  GET ADDRESS OF SAVE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1305\n         LA    14,&NOREAD               GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFX&NDX              GENNED KEYWORD FOR NOREAD\n.BYP1350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1410\n         LA    15,&POSITION             GET ADDRESS OF POSITION NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POSITION\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBBOTTOM)              TBBOTTOM LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP2100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP2110\n         DC    A(&SAVE)                 ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2305\n         DC    A(&NOREAD)               ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFX&NDX)              GENNED KEYWORD FOR NOREAD\n.BYP2350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2410\n         DC    A(&POSITION+X'80000000') ADDRESS OF POSITION NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POSITION\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POSITION\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBCLOSE  8512-85095-85095-1208-00270-00270-00000-ISPFDYN\n         MACRO\n&LABEL   TBCLOSE &TABLE,                TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &NAME=,                  NAME FOR SAVE                  *\n               &PAD=,                   PAD AMOUNT                     *\n               &LIBRARY=,               LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBCLOSE &TABLE,&NEWCOPY,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&NAME' EQ '').CNT3\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PAD EQ 'N').GENLIT\n         AIF   ('&LIBRARY' EQ '').CNT5\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCLOSE).BYP20\nTBCLOSE  DC    CL8'TBCLOSE'             ISPF KEYWORD\n&SPFTBCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&NAME' EQ '').BYP50\n         AIF   ('&NAME'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&NAME                 GENERATED NAME NAME\n.BYP50   ANOP\n         AIF   (T'&PAD NE 'N').BYP60\nSPFP&NDX DC    F'&PAD'                  GENERATED PAD AMOUNT\n.BYP60   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP70\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCLOSE               GET ADDRESS OF TBCLOSE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP1200\n         AIF   ('&NAME'(1,1) EQ '''').BYP1210\n         LA    1,&NAME                  GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PAD' EQ '').BYP1300\n         AIF   (T'&PAD EQ 'N').BYP1310\n         LA    14,&PAD                  GET ADDRESS OF PAD AMOUNT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PAD AMT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PAD\n.BYP1350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1410\n         LA    15,&LIBRARY              GET ADDRESS OF LIBRARY NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCLOSE)               TBCLOSE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP2200\n         AIF   ('&NAME'(1,1) EQ '''').BYP2210\n         DC    A(&NAME)                 ADDRESS OF NAME NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&PAD' EQ '').BYP2300\n         AIF   (T'&PAD EQ 'N').BYP2310\n         DC    A(&PAD)                  ADDRESS OF PAD AMOUNT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PAD AMOUNT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PAD AMT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2410\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY OR REPLCOPY EXPECTED AS KEYWORD - FOUND ''&N*\n               EWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBCREATE 8512-85095-85095-1208-00361-00361-00000-ISPFDYN\n         MACRO\n&LBL     TBCREATE &TABLE,               TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &KEYS=,                  KEYS NAME LIST                 *\n               &NAMES=,                 NAMES NAME LIST                *\n               &WRITE=,                 WRITE NOWRITE KEYWORD          *\n               &REPLACE=,               REPLACE KEYWORD                *\n               &LIBRARY=,               LIBRARY                        *\n               &SHARE=,                 SHARE STATUS                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCREATE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBCREAT &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LBL' EQ '').BYP10\n&LBL     DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&REPLACE' EQ '').K1\n         AIF   ('&REPLACE'(1,1) NE '''').K1\n         AIF   ('&REPLACE' EQ '''REPLACE''').K1\n         MNOTE 4,'WARNING - REPLACE KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n         AIF   ('&SHARE' EQ '').K2\n         AIF   ('&SHARE'(1,1) NE '''' OR '&SHARE' EQ '''SHARE''').K2\n         MNOTE 4,'WARNING - SHARE KEYWORD EXPECTED IN QUOTES'\n.K2      ANOP\n         AIF   ('&WRITE' EQ '').K3\n         AIF   ('&WRITE'(1,1) NE '''').K3\n         AIF   ('&WRITE' EQ '''WRITE''').K3\n         AIF   ('&WRITE' EQ '''NOWRITE''').K3\n         MNOTE 4,'WARNING - WRITE KEYWORD EXPECTED WRITE OR NOWRITE IN *\n               QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCREATE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEYS' EQ '').CNT2\n         AIF   ('&KEYS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NAMES' EQ '').CNT3\n         AIF   ('&NAMES'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&WRITE' EQ '').CNT4\n         AIF   ('&WRITE'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&REPLACE' EQ '').CNT5\n         AIF   ('&REPLACE'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&LIBRARY' EQ '').CNT6\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&SHARE' EQ '').CNT7\n         AIF   ('&SHARE'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCREATE).BYP20\nTBCREATE DC    CL8'TBCREATE'            ISPF KEYWORD\n&SPFTBCREATE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEYS' EQ '').BYP40\n         AIF   ('&KEYS'(1,1) NE '''').BYP40\nSPFK&NDX DC    C&KEYS                   GENERATED KEYS NAME LIST\n.BYP40   ANOP\n         AIF   ('&NAMES' EQ '').BYP50\n         AIF   ('&NAMES'(1,1) NE '''').BYP50\nSPFN&NDX DC    C&NAMES                  GENERATED NAMELIST\n.BYP50   ANOP\n         AIF   ('&WRITE' EQ '').BYP60\n         AIF   ('&WRITE'(1,1) NE '''').BYP60\nSPFW&NDX DC    CL8&WRITE                GENERATED WRITE KEYWORD\n.BYP60   ANOP\n         AIF   ('&REPLACE' EQ '').BYP70\n         AIF   ('&REPLACE'(1,1) NE '''').BYP70\nSPFR&NDX DC    CL8&REPLACE              GENERATED REPLACE KEYWORD\n.BYP70   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP80\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP80\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP80   ANOP\n         AIF   ('&SHARE' EQ '').BYP90\n         AIF   ('&SHARE'(1,1) NE '''').BYP90\nSPFS&NDX DC    CL8&SHARE                GENERATED SHARE KEYWORD\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCREATE              GET ADDRESS OF TBCREATE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP1100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP1110\n         LA    0,&KEYS                  GET ADDRESS OF KEYS NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEYS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEYS\n.BYP1150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP1200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP1210\n         LA    1,&NAMES                 GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFN&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&WRITE' EQ '').BYP1300\n         AIF   ('&WRITE'(1,1) EQ '''').BYP1305\n         LA    14,&WRITE                GET ADDRESS OF WRITE NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR WRITE\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFW&NDX              GET GENNED WRITE KEYWORD\n.BYP1350 ANOP\n.*\n         AIF   ('&REPLACE' EQ '').BYP1400\n         AIF   ('&REPLACE'(1,1) EQ '''').BYP1405\n         LA    15,&REPLACE              GET ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR REPLACE\n         AGO   .BYP1450\n.BYP1405 ANOP\n         LA    15,SPFR&NDX              GET GENNED REPLACE KEYWORD\n.BYP1450 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1510\n         LA    0,&LIBRARY               GET ADDRESS OF LIB NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIB\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP1600\n         AIF   ('&SHARE'(1,1) EQ '''').BYP1605\n         LA    1,&SHARE                 GET ADDRESS OF SHARE NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR SHARE\n         AGO   .BYP1650\n.BYP1605 ANOP\n         LA    1,SPFS&NDX               GET GENNED SHARE KEYWORD\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCREATE)              TBCREATE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP2100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP2110\n         DC    A(&KEYS)                 ADDRESS OF KEYS NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYS NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEYS\n.BYP2150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP2200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP2210\n         DC    A(&NAMES)                ADDRESS OF NAME LIST\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2300\n         AIF   ('&WRITE'(1,1) EQ '''').BYP2305\n         DC    A(&WRITE)                ADDRESS OF WRITE KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFW&NDX)              GENNED WRITE KEYWORD\n.BYP2350 ANOP\n.*\n         AIF   ('&REPLACE' EQ '').BYP2400\n         AIF   ('&REPLACE'(1,1) EQ '''').BYP2405\n         DC    A(&REPLACE)              ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR REPLACE\n         AGO   .BYP2450\n.BYP2405 ANOP\n         DC    A(SPFR&NDX)              GENNED REPLACE KEYWORD\n.BYP2450 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2510\n         DC    A(&LIBRARY)              ADDRESS OF LIB NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIB\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIB\n.BYP2550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2800\n         AIF   ('&SHARE'(1,1) EQ '''').BYP2805\n         DC    A(&SHARE+X'80000000')    ADDRESS OF SHARE KEYWORD\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n         AGO   .BYP2850\n.BYP2805 ANOP\n         DC    A(SPFS&NDX+X'80000000')  GENNED SHARE KEYWORD\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'REPLACE KEYWORD EXPECTED - FOUND ''&REP'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'WRITE/NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBDELETE 8512-85095-85095-1208-00126-00126-00000-ISPFDYN\n         MACRO\n&NAME    TBDELETE &TABLE,               TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBDELETE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBDELETE).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBDELETE).BYP20\nTBDELETE DC    CL8'TBDELETE'            ISPF KEYWORD\n&SPFTBDELETE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBDELETE              GET ADDRESS OF TBDELETE KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBDELETE)              BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBDISPL  8512-85095-85095-1208-00407-00407-00000-ISPFDYN\n         MACRO\n&NAME    TBDISPL &TABLE,                TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &P8,                                                    *\n               &P9,                                                    *\n               &PANEL=,                 PANEL NAME                     *\n               &MSG=,                   MESSAGE ID                     *\n               &CURSOR=,                CURSOR POSITION                *\n               &CSRROW=,                TABLE ROW NUMBER               *\n               &CSRPOS=,                CSR POSITION                   *\n               &AUTOSEL=,               AUTOSEL INDICATOR              *\n               &POSITION=,              ROW POINTED TO BY CRP          *\n               &ROWID=,                 SPECIAL ROWN NUMBER            *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBDISPL,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBDISPL &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,                      *\n               &P8,&P9,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AIF   ('&P8' NE '').LVLERR\n         AIF   ('&P9' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&AUTOSEL' EQ '').K3\n         AIF   ('&AUTOSEL'(1,1) NE '''').K3\n         AIF   ('&AUTOSEL' EQ '''YES''').K3\n         AIF   ('&AUTOSEL' EQ '''NO''').K3\n         MNOTE 4,'WARNING - AUTOSEL KEYWORD EXPECTED TO BE YES OR NO'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBDISPL).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&PANEL' EQ '').CNT2\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&MSG' EQ '').CNT3\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&CURSOR' EQ '').CNT4\n         AIF   ('&CURSOR'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&CSRROW' EQ '').CNT5\n         AIF   (T'&CSRROW EQ 'N').GENLIT\n.CNT5    ANOP\n         AIF   ('&CSRPOS' EQ '').CNT6\n         AIF   (T'&CSRPOS EQ 'N').GENLIT\n.CNT6    ANOP\n         AIF   ('&AUTOSEL' EQ '').CNT7\n         AIF   ('&AUTOSEL'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&POSITION' EQ '').CNT8\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&ROWID' EQ '').CNT9\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBDISPL).BYP20\nTBDISPL  DC    CL8'TBDISPL'             ISPF KEYWORD\n&SPFTBDISPL SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&PANEL' EQ '').BYP40\n         AIF   ('&PANEL'(1,1) NE '''').BYP40\nSPFP&NDX DC    CL8&PANEL                GENERATED PANEL NAME\n.BYP40   ANOP\n         AIF   ('&MSG' EQ '').BYP50\n         AIF   ('&MSG'(1,1) NE '''').BYP50\nSPFM&NDX DC    CL8&MSG                  GENERATED MSG NAME\n.BYP50   ANOP\n         AIF   ('&CURSOR' EQ '').BYP60\n         AIF   ('&CURSOR'(1,1) NE '''').BYP60\nSPFF&NDX DC    CL8&CURSOR               GENERATED CURSOR NAME\n.BYP60   ANOP\n         AIF   ('&CSRROW' EQ '').BYP70\n         AIF   (T'&CSRROW NE 'N').BYP70\nSPFR&NDX DC    F'&CSRROW'               GENERATED ROW NUMBER\n.BYP70   ANOP\n         AIF   ('&CSRPOS' EQ '').BYP80\n         AIF   (T'&CSRPOS NE 'N').BYP80\nSPFC&NDX DC    F'&CSRPOS'               GENERATED CSRPOS\n.BYP80   ANOP\n         AIF   ('&AUTOSEL' EQ '').BYP90\n         AIF   ('&AUTOSEL'(1,1) NE '''').BYP90\nSPFX&NDX DC    CL8&AUTOSEL              ISPF KEYWORD\n.BYP90   ANOP\n         AIF   ('&POSITION' EQ '').BYP100\n         AIF   ('&POSITION'(1,1) NE '''').BYP100\nSPFW&NDX DC    CL8&POSITION             GENERATED POSITION VALUE\n.BYP100  ANOP\n         AIF   ('&ROWID' EQ '').BYP110\n         AIF   ('&ROWID'(1,1) NE '''').BYP110\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VALUE\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF CURSOR\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBDISPL               GET ADDRESS OF TBDISPL KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP1100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP1110\n         LA    0,&PANEL                 GET ADDRESS OF PANEL NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFP&NDX               GET ADDRESS OF GENERATED PANEL\n.BYP1150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP1200\n         AIF   ('&MSG'(1,1) EQ '''').BYP1210\n         LA    1,&MSG                   GET ADDRESS OF MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFM&NDX               GET ADDRESS OF GENERATED MSG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&CURSOR' EQ '').BYP1300\n         AIF   ('&CURSOR'(1,1) EQ '''').BYP1310\n         LA    14,&CURSOR               GET ADDRESS OF CURSOR NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CURSOR\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFF&NDX              GET ADDRESS OF GENERATED CURSOR\n.BYP1350 ANOP\n.*\n         AIF   ('&CSRROW' EQ '').BYP1400\n         AIF   (T'&CSRROW EQ 'N').BYP1410\n         LA    15,&CSRROW               GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP1500\n         AIF   (T'&CSRPOS EQ 'N').BYP1510\n         LA    0,&CSRPOS                GET ADDRESS OF CSRPOS NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFC&NDX               GET ADDRESS OF GENERATED CSRPOS\n.BYP1550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP1600\n         AIF   ('&AUTOSEL'(1,1) EQ '''').BYP1605\n         LA    1,&AUTOSEL               GET ADDRESS OF AUTOSEL NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR AUTOSEL\n         AGO   .BYP1650\n.BYP1605 ANOP\n         LA    1,SPFX&NDX               GET GENNED AUTOSEL VALUE\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&POSITION' EQ '').BYP1700\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1710\n         LA    14,&POSITION             GET ADDRESS OF POSITION NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR POSITION\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFW&NDX              GET ADDRESS OF GENERATED CRPROW\n.BYP1750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1810\n         LA    15,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1850 ANOP\n         STM   14,15,&TEMP+32           STORE PARAMETERS INTO LIST\n         OI    &TEMP+36,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 10).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 10).BYPVARS\n&SPFVARS SETA  10\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBDISPL)               TBDISPL LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP2100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP2110\n         DC    A(&PANEL)                ADDRESS OF PANEL NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PANEL\n.BYP2150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP2200\n         AIF   ('&MSG'(1,1) EQ '''').BYP2210\n         DC    A(&MSG)                  ADDRESS OF MSG NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2250 ANOP\n.*\n         AIF   ('&CURSOR' EQ '').BYP2300\n         AIF   ('&CURSOR'(1,1) EQ '''').BYP2310\n         DC    A(&CURSOR)               ADDRESS OF CURSOR NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CURSOR\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFF&NDX)              ADDRESS OF GENERATED CURSOR\n.BYP2350 ANOP\n.*\n         AIF   ('&CSRROW' EQ '').BYP2400\n         AIF   (T'&CSRROW EQ 'N').BYP2410\n         DC    A(&CSRROW)               ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP2500\n         AIF   (T'&CSRPOS EQ 'N').BYP2510\n         DC    A(&CSRPOS)               ADDRESS OF CSRPOS NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFC&NDX)              ADDRESS OF GENERATED CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP2600\n         AIF   ('&AUTOSEL'(1,1) EQ '''').BYP2605\n         DC    A(&AUTOSEL)              ADDRESS OF AUTOSEL NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR AUTOSEL\n         AGO   .BYP2650\n.BYP2605 ANOP\n         DC    A(SPFX&NDX)              GENNED AUTOSEL KEYWORD\n.BYP2650 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2700\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2710\n         DC    A(&POSITION)             ADDRESS OF POSITION NAME\n         AGO   .BYP2750\n.BYP2700 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR POSITION\n         AGO   .BYP2750\n.BYP2710 ANOP\n         DC    A(SPFW&NDX)              ADDRESS OF GENERATED POSITION\n.BYP2750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2810\n         DC    A(&ROWID+X'80000000')    ADDRESS OF ROWID NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ROWID\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED ROWID\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBEND    8512-85095-85095-1208-00126-00126-00000-ISPFDYN\n         MACRO\n&NAME    TBEND &TABLE,                  TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBEND,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBEND).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBEND).BYP20\nTBEND DC       CL8'TBEND'               ISPF KEYWORD\n&SPFTBEND SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBEND                 GET ADDRESS OF TBEND KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBEND)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBERASE  8512-85095-85095-1208-00169-00169-00000-ISPFDYN\n         MACRO\n&NAME    TBERASE &MEM,                  MEMBER NAME                    *\n               &P2,                                                    *\n               &LIBRARY=,               LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBERASE &MEM,&P2,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIBRARY' EQ '').CNT2\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBERASE).BYP20\nTBERASE  DC    CL8'TBERASE'             ISPF KEYWORD\n&SPFTBERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBERASE               GET ADDRESS OF TBERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP140\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIBRARY               GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP240\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBEXIST  8512-85095-85095-1208-00126-00126-00000-ISPFDYN\n         MACRO\n&NAME    TBEXIST &TABLE,                TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBEXIST,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBEXIST).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBEXIST).BYP20\nTBEXIST DC     CL8'TBEXIST'             ISPF KEYWORD\n&SPFTBEXIST SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBEXIST               GET ADDRESS OF TBEXIST KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBEXIST)               ISPF KEYWORD\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBGET    8512-85095-85095-1208-00284-00284-00000-ISPFDYN\n         MACRO\n&NAME    TBGET &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &SAVENAME=,              SAVE NAME-LIST                 *\n               &ROWID=,                 ROW ID NAME                    *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBGET,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBGET &TABLE,&P2,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' EQ '').K3\n         AIF   ('&NOREAD'(1,1) NE '''').K3\n         AIF   ('&NOREAD' EQ '''NOREAD''').K3\n         MNOTE 4,'WARNING - NOREAD KEYWORD EXPECTED NOREAD IN QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVENAME' EQ '').CNT2\n         AIF   ('&SAVENAME'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' EQ '').CNT3A\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT3A   ANOP\n         AIF   ('&POSITION' EQ '').CNT4\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POSITION' EQ '').CNT5\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBGET).BYP20\nTBGET DC       CL8'TBGET'               ISPF KEYWORD\n&SPFTBGET SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVENAME' EQ '').BYP40\n         AIF   ('&SAVENAME'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVENAME             GENERATED SAVE\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   ('&NOREAD'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOREAD               GENERATED NOREAD KEYWORD\n.BYP60   ANOP\n         AIF   ('&POSITION' EQ '').BYP70\n         AIF   ('&POSITION'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POSITION             GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBGET                 GET ADDRESS OF TBGET KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP1100\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP1110\n         LA    0,&SAVENAME              GET ADDRESS OF SAVE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1305\n         LA    14,&NOREAD               GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFX&NDX              GENNED NOREAD KEYWORD\n.BYP1350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1410\n         LA    15,&POSITION             GET ADDRESS OF POSITION NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POSITION\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBGET)                 TBGET LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP2100\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP2110\n         DC    A(&SAVENAME)             ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2305\n         DC    A(&NOREAD)               ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFX&NDX)              GENNED NOREAD KEYWORD\n.BYP2350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2410\n         DC    A(&POSITION+X'80000000') ADDRESS OF POSITION NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POSITION\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POSITION\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBMOD    8512-85095-85095-1208-00206-00206-00000-ISPFDYN\n         MACRO\n&NAME    TBMOD &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ORDER=,                 ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBMOD,&SPFDEBUG,&SPFVAR,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBMOD &TABLE,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' EQ '').K3\n         AIF   ('&ORDER'(1,1) NE '''').K3\n         AIF   ('&ORDER' EQ '''ORDER''').K3\n         MNOTE 4,'WARNING - ORDER KEYWORD EXPECTED ENCLOSED IN QUOTES'\n.K3      ANOP\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBMOD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' EQ '').CNT1A\n         AIF   ('&ORDER'(1,1) EQ '''').GENLIT\n.CNT1A   AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBMOD).BYP20\nTBMOD    DC    CL8'TBMOD'               ISPF KEYWORD\n&SPFTBMOD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   ('&ORDER'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&ORDER                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBMOD                 GET ADDRESS OF TBMOD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         AIF   ('&ORDER'(1,1) EQ '''').BYP175\n         LA    1,&ORDER                 GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFX&NDX               GENNED ORDER KEYWORD\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBMOD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         AIF   ('&ORDER'(1,1) EQ '''').BYP275\n         DC    A(&ORDER+X'80000000')    ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED ORDER KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBOPEN   8512-85095-85095-1208-00258-00258-00000-ISPFDYN\n         MACRO\n&NAME    TBOPEN &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &WRITE=,                 WRITE/NOWRITE PARM             *\n               &LIBRARY=,               LIBRARY                        *\n               &SHARE=,                 SHARE OPERAND                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBOPEN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFSHARE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBOPEN &TABLE,&P2,&P3,&P4,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&WRITE' EQ '').K3\n         AIF   ('&WRITE'(1,1) NE '''').K3\n         AIF   ('&WRITE' EQ '''WRITE''').K3\n         AIF   ('&WRITE' EQ '''NOWRITE''').K3\n         MNOTE 4,'WARNING - WRITE KEYWORD EXPECTED WRITE OR NOWRITE IN *\n               QUOTES'\n.K3      ANOP\n         AIF   ('&SHARE' EQ '').K2\n         AIF   ('&SHARE'(1,1) NE '''').K2\n         AIF   ('&SHARE' EQ '''SHARE''').K2\n         MNOTE 4,'WARNING - SHARE KEYWORD EXPECTED ENCLOSED IN QUOTES'\n.K2      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBOPEN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&WRITE' EQ '').CNT2\n         AIF   ('&WRITE'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&LIBRARY' EQ '').CNT3\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&SHARE' EQ '').CNT4\n         AIF   ('&SHARE'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBOPEN).BYP20\nTBOPEN   DC    CL8'TBOPEN'              ISPF KEYWORD\n&SPFTBOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&WRITE' EQ '').BYP40\n         AIF   ('&WRITE'(1,1) NE '''').BYP40\nSPFW&NDX DC    CL8&WRITE                ISPF KEYWORD\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY NAME\n.BYP50   ANOP\n         AIF   ('&SHARE' EQ '').BYP60\n         AIF   ('&SHARE'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&SHARE                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBOPEN                GET ADDRESS OF TBOPEN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP1100\n         AIF   ('&WRITE'(1,1) EQ '''').BYP1105\n         LA    0,&WRITE                 GET ADDRESS OF WRITE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR WRITE\n         AGO   .BYP1150\n.BYP1105 ANOP\n         LA    0,SPFW&NDX               GENNED WRITE KEYWORD\n.BYP1150 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1200\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1210\n         LA    1,&LIBRARY               GET ADDRESS OF LIBRARY NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&SHARE' EQ '').BYP1300\n         AIF   ('&SHARE'(1,1) EQ '''').BYP1305\n         LA    14,&SHARE                GET ADDRESS OF FIELD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR FIELD\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFX&NDX              GENNED SHARE KEYWORD\n.BYP1350 ANOP\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBOPEN)                TBOPEN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2100\n         AIF   ('&WRITE'(1,1) EQ '''').BYP2105\n         DC    A(&WRITE)                ADDRESS OF WRITE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE NAME\n         AGO   .BYP2150\n.BYP2105 ANOP\n         DC    A(SPFW&NDX)              WRITE KEYWORD\n.BYP2150 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2200\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2210\n         DC    A(&LIBRARY)              ADDRESS OF LIBRARY NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIBRARY\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIBRARY\n.BYP2250 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2300\n         AIF   ('&SHARE'(1,1) EQ '''').BYP2305\n         DC    A(&SHARE+X'80000000')    ADDRESS OF SHARE NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED SHARE KEYWORD\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'WRITE NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBPUT    8512-85095-85095-1208-00206-00206-00000-ISPFDYN\n         MACRO\n&NAME    TBPUT &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ORDER=,                 ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBPUT,&SPFDEBUG,&SPFVAR,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBPUT &TABLE,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' EQ '').K3\n         AIF   ('&ORDER'(1,1) NE '''').K3\n         AIF   ('&ORDER' EQ '''ORDER''').K3\n         MNOTE 4,'WARNING - ORDER KEYWORD EXPECTED ENCLOSED IN QUOTES'\n.K3      ANOP\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' EQ '').CNT1A\n         AIF   ('&ORDER'(1,1) EQ '''').GENLIT\n.CNT1A   AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBPUT).BYP20\nTBPUT    DC    CL8'TBPUT'               ISPF KEYWORD\n&SPFTBPUT SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   ('&ORDER'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&ORDER                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBPUT                 GET ADDRESS OF TBPUT KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         AIF   ('&ORDER'(1,1) EQ '''').BYP175\n         LA    1,&ORDER                 GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFX&NDX               GENNED ORDER KEYWORD\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBPUT)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         AIF   ('&ORDER'(1,1) EQ '''').BYP275\n         DC    A(&ORDER+X'80000000')    ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED ORDER KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBQUERY  8512-85095-85095-1208-00320-00320-00000-ISPFDYN\n         MACRO\n&NAME    TBQUERY &TABLE,                TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &KEYS=,                  KEY NAME                       *\n               &NAMES=,                 NAMES NAME                     *\n               &ROWNUM=,                NUMBER OF ROWS                 *\n               &KEYNUM=,                NUMBER OF KEYS                 *\n               &NAMENUM=,               NUMBER OF NAMES                *\n               &POSITION=,              CURRENT CRP                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBQUERY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBQUERY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEYS' EQ '').CNT2\n         AIF   ('&KEYS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NAMES' EQ '').CNT3\n         AIF   ('&NAMES'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWNUM' EQ '').CNT4\n         AIF   ('&ROWNUM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&KEYNUM' EQ '').CNT5\n         AIF   ('&KEYNUM'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&NAMENUM' EQ '').CNT6\n         AIF   ('&NAMENUM'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&POSITION' EQ '').CNT7\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBQUERY).BYP20\nTBQUERY  DC    CL8'TBQUERY'             ISPF KEYWORD\n&SPFTBQUERY SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEYS' EQ '').BYP40\n         AIF   ('&KEYS'(1,1) NE '''').BYP40\nSPFK&NDX DC    CL8&KEYS                 GENERATED KEY NAMES NAME\n.BYP40   ANOP\n         AIF   ('&NAMES' EQ '').BYP50\n         AIF   ('&NAMES'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&NAMES                GENERATED NAMES NAME\n.BYP50   ANOP\n         AIF   ('&ROWNUM' EQ '').BYP60\n         AIF   ('&ROWNUM'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROWNUM               GENERATED ROWNUM NAMES\n.BYP60   ANOP\n         AIF   ('&KEYNUM' EQ '').BYP70\n         AIF   ('&KEYNUM'(1,1) NE '''').BYP70\nSPFE&NDX DC    CL8&KEYNUM               GENERATED KEYNUM NAMES\n.BYP70   ANOP\n         AIF   ('&NAMENUM' EQ '').BYP80\n         AIF   ('&NAMENUM'(1,1) NE '''').BYP80\nSPFA&NDX DC    CL8&NAMENUM              GENERATED VARNUM NAMES\n.BYP80   ANOP\n         AIF   ('&POSITION' EQ '').BYP90\n         AIF   ('&POSITION'(1,1) NE '''').BYP90\nSPFC&NDX DC    CL8&POSITION             GENERATED CRP NAMES\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBQUERY               GET ADDRESS OF TBQUERY KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP1100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP1110\n         LA    0,&KEYS                  GET ADDRESS OF KEY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEY\n.BYP1150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP1200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP1210\n         LA    1,&NAMES                 GET ADDRESS OF NAMES NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAMES\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED NAMES\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWNUM' EQ '').BYP1300\n         AIF   ('&ROWNUM'(1,1) EQ '''').BYP1310\n         LA    14,&ROWNUM               GET ADDRESS OF ROW NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1350 ANOP\n.*\n         AIF   ('&KEYNUM' EQ '').BYP1400\n         AIF   ('&KEYNUM'(1,1) EQ '''').BYP1410\n         LA    15,&KEYNUM               GET ADDRESS OF KEYNUM NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR KEYNUM\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFE&NDX              GET ADDRESS OF GENERATED KEY\n.BYP1450 ANOP\n.*\n         AIF   ('&NAMENUM' EQ '').BYP1500\n         AIF   ('&NAMENUM'(1,1) EQ '''').BYP1510\n         LA    0,&NAMENUM               GET ADDRESS OF VARN NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VARN\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED VARN\n.BYP1550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1610\n         LA    1,&POSITION              GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CRP\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET ADDRESS OF GENERATED CRP\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFQ&NDX               BRANCH AROUND LITERALS\n         DC    A(TBQUERY)               TBQUERY LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP2100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP2110\n         DC    A(&KEYS)                 ADDRESS OF KEY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEY NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEY\n.BYP2150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP2200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP2210\n         DC    A(&NAMES)                ADDRESS OF NAMES NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMES\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED NAMES\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWNUM' EQ '').BYP2300\n         AIF   ('&ROWNUM'(1,1) EQ '''').BYP2310\n         DC    A(&ROWNUM)               ADDRESS OF ROW NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2350 ANOP\n.*\n         AIF   ('&KEYNUM' EQ '').BYP2400\n         AIF   ('&KEYNUM'(1,1) EQ '''').BYP2410\n         DC    A(&KEYNUM)               ADDRESS OF KEYN NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYN\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFE&NDX)              ADDRESS OF GENERATED KEYN\n.BYP2450 ANOP\n.*\n         AIF   ('&NAMENUM' EQ '').BYP2500\n         AIF   ('&NAMENUM'(1,1) EQ '''').BYP2510\n         DC    A(&NAMENUM)              ADDRESS OF VARN NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VARN\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED VARN\n.BYP2550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2610\n         DC    A(&POSITION+X'80000000') ADDRESS OF CRP NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED AUTOSE\n.BYP2650 ANOP\nSPFQ&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBSARG   8512-85095-85095-1208-00245-00245-00000-ISPFDYN\n         MACRO\n&NAME    TBSARG &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &ARGLIST=,               NAME LIST                      *\n               &DIRECTION=,             NEXT OR PREVIOUS               *\n               &NAMECOND=,              NAME COND PAIRS                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSARG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSARG &TABLE,&P2,&P3,&P4,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&DIRECTION' EQ '').K3\n         AIF   ('&DIRECTION'(1,1) NE '''').K3\n         AIF   ('&DIRECTION' EQ '''NEXT''').K3\n         AIF   ('&DIRECTION' EQ '''PREVIOUS''').K3\n         MNOTE 4,'WARNING - DIRECTION KEYWORD EXPECTED NEXT OR PREVIOUS*\n                ENCLOSED IN QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSARG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&ARGLIST' EQ '').CNT2\n         AIF   ('&ARGLIST'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DIRECTION' EQ '').CNT3\n         AIF   ('&DIRECTION'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&NAMECOND' EQ '').CNT4\n         AIF   ('&NAMECOND'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSARG).BYP20\nTBSARG   DC    CL8'TBSARG'              ISPF KEYWORD\n&SPFTBSARG SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&ARGLIST' EQ '').BYP40\n         AIF   ('&ARGLIST'(1,1) NE '''').BYP40\nSPFV&NDX DC    C&ARGLIST                GENERATED NAMELIST\n.BYP40   ANOP\n         AIF   ('&DIRECTION' EQ '').BYP50\n         AIF   ('&DIRECTION'(1,1) NE '''').BYP50\nSPFD&NDX DC    CL8&DIRECTION            ISPF KEYWORD\n.BYP50   ANOP\n         AIF   ('&NAMECOND' EQ '').BYP60\n         AIF   ('&NAMECOND'(1,1) NE '''').BYP60\nSPFC&NDX DC    C&NAMECOND               GENERATED CONDITIONS\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSARG                GET ADDRESS OF TBSARG KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP1100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP1110\n         LA    0,&ARGLIST               GET ADDRESS OF VAR NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1150 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP1200\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP1205\n         LA    1,&DIRECTION             GET ADDRESS OF KEYWORD\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM\n         AGO   .BYP1250\n.BYP1205 ANOP\n         LA    1,SPFD&NDX               GENNED NEXT/PREVIOUS KEYWORD\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NAMECOND' EQ '').BYP1300\n         AIF   ('&NAMECOND'(1,1) EQ '''').BYP1310\n         LA    14,&NAMECOND             GET ADDRESS OF COND NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1350 ANOP\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSARG)                TBSARG LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP2100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP2110\n         DC    A(&ARGLIST)              ADDRESS OF VAR NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2150 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP2200\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP2205\n         DC    A(&DIRECTION)            ISPF KEYWORD\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n         AGO   .BYP2250\n.BYP2205 ANOP\n         DC    A(SPFD&NDX)              GENNED NEXT/PREVIOUS KEYWORD\n.BYP2250 ANOP\n.*\n         AIF   ('&NAMECOND' EQ '').BYP2300\n         AIF   ('&NAMECOND'(1,1) EQ '''').BYP2310\n         DC    A(&NAMECOND+X'80000000') ADDRESS OF COND NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBSAVE   8512-85095-85095-1208-00270-00270-00000-ISPFDYN\n         MACRO\n&LABEL   TBSAVE &TABLE,                 TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &NAME=,                  NAME FOR SAVE                  *\n               &PAD=,                   PAD AMOUNT                     *\n               &LIBRARY=,               LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSAVE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSAVE &TABLE,&NEWCOPY,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSAVE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&NAME' EQ '').CNT3\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PAD EQ 'N').GENLIT\n         AIF   ('&LIBRARY' EQ '').CNT5\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSAVE).BYP20\nTBSAVE   DC    CL8'TBSAVE'              ISPF KEYWORD\n&SPFTBSAVE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&NAME' EQ '').BYP50\n         AIF   ('&NAME'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&NAME                 GENERATED NAME NAME\n.BYP50   ANOP\n         AIF   (T'&PAD NE 'N').BYP60\nSPFP&NDX DC    F'&PAD'                  GENERATED PAD AMOUNT\n.BYP60   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP70\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSAVE                GET ADDRESS OF TBSAVE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP1200\n         AIF   ('&NAME'(1,1) EQ '''').BYP1210\n         LA    1,&NAME                  GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PAD' EQ '').BYP1300\n         AIF   (T'&PAD EQ 'N').BYP1310\n         LA    14,&PAD                  GET ADDRESS OF PAD AMOUNT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PAD AMT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PAD\n.BYP1350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1410\n         LA    15,&LIBRARY              GET ADDRESS OF LIBRARY NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSAVE)                TBSAVE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP2200\n         AIF   ('&NAME'(1,1) EQ '''').BYP2210\n         DC    A(&NAME)                 ADDRESS OF NAME NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&PAD' EQ '').BYP2300\n         AIF   (T'&PAD EQ 'N').BYP2310\n         DC    A(&PAD)                  ADDRESS OF PAD AMOUNT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PAD AMOUNT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PAD AMT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2410\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY OR REPLCOPY EXPECTED AS KEYWORD - FOUND ''&N*\n               EWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBSCAN   8512-85095-85095-1208-00382-00382-00000-ISPFDYN\n         MACRO\n&NAME    TBSCAN &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &P8,                                                    *\n               &ARGLIST=,               ARGLIST                        *\n               &SAVENAME=,              EXTENSION VAR LIST             *\n               &ROWID=,                 SAVE THE ROWID                 *\n               &DIRECTION=,             NEXT OR PREVIOUS               *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              POSITION OF CRP                *\n               &CONDLIST=,              CONDITIONS FOR SEARCH          *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSCAN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSCAN &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,&P8,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AIF   ('&P8' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&DIRECTION' EQ '').K3\n         AIF   ('&DIRECTION'(1,1) NE '''').K3\n         AIF   ('&DIRECTION' EQ '''NEXT''').K3\n         AIF   ('&DIRECTION' EQ '''PREVIOUS''').K3\n         MNOTE 4,'WARNING - DIRECTION KEYWORD EXPECTED NEXT OR PREVIOUS*\n                ENCLOSED IN QUOTES'\n.K3      ANOP\n         AIF   ('&NOREAD' EQ '').K2\n         AIF   ('&NOREAD'(1,1) NE '''').K2\n         AIF   ('&NOREAD' EQ '''NOREAD''').K2\n         MNOTE 4,'WARNING - NOREAD KEYWORD EXPECTED NOREAD IN QUOTES'\n.K2      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSCAN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&ARGLIST' EQ '').CNT2\n         AIF   ('&ARGLIST'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&SAVENAME' EQ '').CNT3\n         AIF   ('&SAVENAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&DIRECTION' EQ '').CNT5\n         AIF   ('&DIRECTION'(1,1) EQ '''').GENLIT\n.CNT5    AIF   ('&NOREAD' EQ '').CNT6\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT6    AIF   ('&POSITION' EQ '').CNT8\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&CONDLIST' EQ '').CNT9\n         AIF   ('&CONDLIST'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSCAN).BYP20\nTBSCAN   DC    CL8'TBSCAN'              ISPF KEYWORD\n&SPFTBSCAN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&ARGLIST' EQ '').BYP40\n         AIF   ('&ARGLIST'(1,1) NE '''').BYP40\nSPFA&NDX DC    C&ARGLIST                GENERATED ARGLIST-LIST\n.BYP40   ANOP\n         AIF   ('&SAVENAME' EQ '').BYP50\n         AIF   ('&SAVENAME'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&SAVENAME             GENERATED VARIABLE NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   ('&DIRECTION' EQ '').BYP70\n         AIF   ('&DIRECTION'(1,1) NE '''').BYP70\nSPFD&NDX  DC   CL8&DIRECTION            ISPF KEYWORD\n.BYP70   ANOP\n         AIF   ('&NOREAD' EQ '').BYP80\n         AIF   ('&NOREAD'(1,1) NE '''').BYP80\nSPFN&NDX DC    CL8&NOREAD               ISPF KEYWORD\n.BYP80   ANOP\n         AIF   ('&POSITION' EQ '').BYP100\n         AIF   ('&POSITION'(1,1) NE '''').BYP100\nSPFP&NDX DC    CL8&POSITION             GENERATED POSITION VAR\n.BYP100  ANOP\n         AIF   ('&CONDLIST' EQ '').BYP110\n         AIF   ('&CONDLIST'(1,1) NE '''').BYP110\nSPFC&NDX DC    C&CONDLIST               GENERATED COND LIST\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSCAN                GET ADDRESS OF TBSCAN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP1100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP1110\n         LA    0,&ARGLIST               GET ADDRESS OF ARGLIST LIST\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR ARGLIST\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED ARG\n.BYP1150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP1200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP1210\n         LA    1,&SAVENAME              GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP1400\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP1405\n         LA    15,&DIRECTION            GET ADDRESS OF KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1405 ANOP\n         LA    15,SPFD&NDX              GET GENNED NEXT/PREVIOUS\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1505\n         LA    0,&NOREAD                GET ADDRESS OF KEYWORD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n         AGO   .BYP1550\n.BYP1505 ANOP\n         LA    0,SPFN&NDX               GET GENNED NOREAD KEYWORD\n.BYP1550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1610\n         LA    1,&POSITION              GET ADDRESS OF POS VAR NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR POS VAR\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFP&NDX               GET GENERATED POS VAR NAME\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&CONDLIST' EQ '').BYP1700\n         AIF   ('&CONDLIST'(1,1) EQ '''').BYP1710\n         LA    14,&CONDLIST             GET ADDRESS OF COND NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1750 ANOP\n.*\n         ST    14,&TEMP+32              STORE PARAMETERS INTO LIST\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSCAN)                TBSCAN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP2100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP2110\n         DC    A(&ARGLIST)              ADDRESS OF ARGLIST NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ARGLIST NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ARGLIST\n.BYP2150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP2200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP2210\n         DC    A(&SAVENAME)             ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP2400\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP2405\n         DC    A(&DIRECTION)            ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2405 ANOP\n         DC    A(SPFD&NDX)              GENNED NEXT/PREVIOUS\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2505\n         DC    A(&NOREAD)               ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n         AGO   .BYP2550\n.BYP2505 ANOP\n         DC    A(SPFN&NDX)              GENNED NOREAD KEYWORD\n.BYP2550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2610\n         DC    A(&POSITION)             ADDRESS OF POS NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY PARM\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFP&NDX)              GENERATED POS VAR NAME\n.BYP2650 ANOP\n.*\n         AIF   ('&CONDLIST' EQ '').BYP2800\n         AIF   ('&CONDLIST'(1,1) EQ '''').BYP2810\n         DC    A(&CONDLIST+X'80000000') ADDRESS OF COND NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBSKIP   8512-85133-85339-1341-00345-00345-00001-ISPFDYN\n         MACRO\n&NAME    TBSKIP &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &NUMBER=SPFNULLC,        NUMBER                         *\n               &SAVENAME=,              VARIABLE FOR EXT VARS          *\n               &ROWID=,                 VARIABLE NAME FOR ROWID        *\n               &ROW=,                   ROWID TO GET                   *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              CRP VARIABLE                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSKIP,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNOREAD,&SPFF1\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSKIP &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' EQ '').K3\n         AIF   ('&NOREAD'(1,1) NE '''').K3\n         AIF   ('&NOREAD' EQ '''NOREAD''').K3\n         MNOTE 4,'WARNING - NOREAD KEYWORD INVALID - EXPECTED NOREAD EN*\n               CLOSED IN QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSKIP).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   (T'&NUMBER EQ 'N').GENLIT\n         AIF   ('&NUMBER' EQ '' AND NOT &SPFF1).GENLIT\n         AIF   ('&SAVENAME' EQ '').CNT3\n         AIF   ('&SAVENAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   (T'&ROW EQ 'N').GENLIT\n         AIF   ('&NOREAD' EQ '').CNT6\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&POSITION' EQ '').CNT8\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSKIP).BYP20\nTBSKIP   DC    CL8'TBSKIP'              ISPF KEYWORD\n&SPFTBSKIP SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   (T'&NUMBER NE 'N').BYP40\nSPFN&NDX DC    F'&NUMBER'               GENERATED NUMBER\n.BYP40   ANOP\n         AIF   ('&NUMBER' NE '' OR &SPFF1).BYP45\nSPFF1    DC    F'1'\n&SPFF1   SETB  1\n.BYP45   ANOP\n         AIF   ('&SAVENAME' EQ '').BYP50\n         AIF   ('&SAVENAME'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&SAVENAME             GENERATED EXT VAR NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   (T'&ROW NE 'N').BYP70\nSPFR&NDX DC    F'&ROW'                  GENERATED ROWID\n.BYP70   ANOP\n         AIF   ('&NOREAD' EQ '').BYP80\n         AIF   ('&NOREAD'(1,1) NE '''').BYP80\nSPFX&NDX DC    CL8&NOREAD               ISPF KEYWORD\n.BYP80   ANOP\n         AIF   ('&POSITION' EQ '').BYP100\n         AIF   ('&POSITION'(1,1) NE '''').BYP100\nSPFC&NDX DC    CL8&POSITION             GENERATED CRP VARIABLE NAME\n.BYP100  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSKIP                GET ADDRESS OF TBSKIP KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NUMBER' EQ '').BYP1100\n         AIF   (T'&NUMBER EQ 'N').BYP1110\n         LA    0,&NUMBER                GET ADDRESS OF NUMBER FIELD\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFF1                  GET DUMMY PARM FOR NUMBER\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFN&NDX               GET ADDRESS OF GENERATED NUMBER\n.BYP1150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP1200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP1210\n         LA    1,&SAVENAME              GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP1400\n         AIF   (T'&ROW EQ 'N').BYP1410\n         LA    15,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1505\n         LA    0,&NOREAD                GET ADDRESS OF NOREAD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOREAD\n         AGO   .BYP1550\n.BYP1505 ANOP\n         LA    0,SPFX&NDX               GENNED NOREAD KEYWORD\n.BYP1550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1610\n         LA    1,&POSITION              GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR POS\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET DUMMY PARM FOR POS\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSKIP)                TBSKIP LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NUMBER' EQ '').BYP2100\n         AIF   (T'&NUMBER EQ 'N').BYP2110\n         DC    A(&NUMBER)               ADDRESS OF NUMBER NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFF1)                 DUMMY PARM FOR NUMBER NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NUMBER\n.BYP2150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP2200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP2210\n         DC    A(&SAVENAME)             ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2400\n         AIF   ('&ROW'(1,1) EQ '''').BYP2410\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2505\n         DC    A(&NOREAD)               ADDRESS OF NOREAD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n         AGO   .BYP2550\n.BYP2505 ANOP\n         DC    A(SPFX&NDX)              GENNED NOREAD KEYWORD\n.BYP2550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2800\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2810\n         DC    A(&POSITION+X'80000000') ADDRESS OF CRP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED CRP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBSORT   8512-85095-85095-1208-00157-00157-00000-ISPFDYN\n         MACRO\n&NAME    TBSORT &TABLE,                 TABLE NAME                     *\n               &FIELDS=,                FIELDS NAME-LIST               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSORT,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&FIELDS' EQ '').ERR4\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSORT).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&FIELDS' EQ '').CNT2\n         AIF   ('&FIELDS'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSORT).BYP20\nTBSORT   DC    CL8'TBSORT'              ISPF KEYWORD\n&SPFTBSORT SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&FIELDS' EQ '').BYP50\n         AIF   ('&FIELDS'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&FIELDS                 GENERATED SORT KEYS\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSORT                GET ADDRESS OF TBSORT KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&FIELDS' EQ '').BYP140\n         AIF   ('&FIELDS'(1,1) EQ '''').BYP130\n         LA    0,&FIELDS                GET ADDRESS OF SORT KEYS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENNED FIELDS\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SORT KEY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSORT)                BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&FIELDS' EQ '').BYP240\n         AIF   ('&FIELDS'(1,1) EQ '''').BYP230\n         DC    A(&FIELDS+X'80000000')   ADDRESS OF FIELDS\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED SORT KEYS\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SORT KEYS\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'SORT KEYS ARE REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBSTATS  8512-85095-85095-1208-00673-00673-00000-ISPFDYN\n         MACRO\n&LABEL   TBSTATS &TABLE,                TABLE NAME                     *\n               &CDATE=,                 CREATE DATE                    *\n               &CTIME=,                 CREATE TIME                    *\n               &UDATE=,                 UPDATE DATE                    *\n               &UTIME=,                 UPDATE TIME                    *\n               &USER=,                  USER ID                        *\n               &ROWCREAT=,              ROWS CREATED                   *\n               &ROWCURR=,               CURRENT NUMBER OF ROWS         *\n               &ROWUPD=,                ROWS UPDATED                   *\n               &TABLEUPD=,              TABLE UPDATED                  *\n               &SERVICE=,               LAST SERVICE                   *\n               &RETCODE=,               RETURN CODE                    *\n               &STATUS1=,               STATUS 1                       *\n               &STATUS2=,               STATUS 2                       *\n               &STATUS3=,               STATUS 3                       *\n               &LIBRARY=,               DDNAME FOR TABLE               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSTATS              GLOBAL FOR TBSTATS LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSTATS).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n         AIF   ('&CDATE' EQ '').CNT1\n         AIF   ('&CDATE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&CTIME' EQ '').CNT2\n         AIF   ('&CTIME'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&UDATE' EQ '').CNT3\n         AIF   ('&UDATE'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&UTIME' EQ '').CNT4\n         AIF   ('&UTIME'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&USER' EQ '').CNT5\n         AIF   ('&USER'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&ROWCREAT' EQ '').CNT6\n         AIF   ('&ROWCREAT'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&ROWCURR' EQ '').CNT7\n         AIF   ('&ROWCURR'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&ROWUPD' EQ '').CNT8\n         AIF   ('&ROWUPD'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&TABLEUPD' EQ '').CNT9\n         AIF   ('&TABLEUPD'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AIF   ('&SERVICE' EQ '').CNT10\n         AIF   ('&SERVICE'(1,1) EQ '''').GENLIT\n.CNT10   ANOP\n         AIF   ('&RETCODE' EQ '').CNT11\n         AIF   ('&RETCODE'(1,1) EQ '''').GENLIT\n.CNT11   ANOP\n         AIF   ('&STATUS1' EQ '').CNT12\n         AIF   ('&STATUS1'(1,1) EQ '''').GENLIT\n.CNT12   ANOP\n         AIF   ('&STATUS2' EQ '').CNT13\n         AIF   ('&STATUS2'(1,1) EQ '''').GENLIT\n.CNT13   ANOP\n         AIF   ('&STATUS3' EQ '').CNT14\n         AIF   ('&STATUS3'(1,1) EQ '''').GENLIT\n.CNT14   ANOP\n         AIF   ('&LIBRARY' EQ '').CNT15\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT15   ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFTBSTATS).BYP20\nTBSTATS  DC    CL8'TBSTATS'             ISPF KEYWORD\n&SPFTBSTATS SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&CDATE' EQ '').BYP40\n         AIF   ('&CDATE'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&CDATE                CDATE VARIABLE NAME\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&CTIME' EQ '').BYP50\n         AIF   ('&CTIME'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&CTIME                CTIME VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&UDATE' EQ '').BYP60\n         AIF   ('&UDATE'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&UDATE                UDATE VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&UTIME' EQ '').BYP70\n         AIF   ('&UTIME'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&UTIME                UTIME VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\n         AIF   ('&USER' EQ '').BYP80\n         AIF   ('&USER'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&USER                 USERE VARIABLE NAME\n.BYP80   ANOP\n.*\n.*\n         AIF   ('&ROWCREAT' EQ '').BYP90\n         AIF   ('&ROWCREAT'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&ROWCREAT             ROWCREAT VARIABLE NAME\n.BYP90   ANOP\n.*\n.*\n         AIF   ('&ROWCURR' EQ '').BYP100\n         AIF   ('&ROWCURR'(1,1) NE '''').BYP100\nSPFG&NDX DC    CL8&ROWCURR              ROWCURR VARIABLE NAME\n.BYP100  ANOP\n.*\n.*\n         AIF   ('&ROWUPD' EQ '').BYP110\n         AIF   ('&ROWUPD'(1,1) NE '''').BYP110\nSPFH&NDX DC    CL8&ROWUPD               ROWUPD VARIABLE NAME\n.BYP110  ANOP\n.*\n.*\n         AIF   ('&TABLEUPD' EQ '').BYP120\n         AIF   ('&TABLEUPD'(1,1) NE '''').BYP120\nSPFI&NDX DC    CL8&TABLEUPD             TABLEUPD VARIABLE NAME\n.BYP120  ANOP\n.*\n.*\n         AIF   ('&SERVICE' EQ '').BYP130\n         AIF   ('&SERVICE'(1,1) NE '''').BYP130\nSPFJ&NDX DC    CL8&SERVICE              SERVICE VARIABLE NAME\n.BYP130  ANOP\n.*\n.*\n         AIF   ('&RETCODE' EQ '').BYP140\n         AIF   ('&RETCODE'(1,1) NE '''').BYP140\nSPFK&NDX DC    CL8&RETCODE              RETCODE VARIABLE NAME\n.BYP140  ANOP\n.*\n.*\n         AIF   ('&STATUS1' EQ '').BYP150\n         AIF   ('&STATUS1'(1,1) NE '''').BYP150\nSPFL&NDX DC    CL8&STATUS1              STATUS1 VARIABLE NAME\n.BYP150  ANOP\n.*\n.*\n         AIF   ('&STATUS2' EQ '').BYP160\n         AIF   ('&STATUS2'(1,1) NE '''').BYP160\nSPFM&NDX DC    CL8&STATUS2              STATUS2 VARIABLE NAME\n.BYP160  ANOP\n.*\n.*\n         AIF   ('&STATUS3' EQ '').BYP170\n         AIF   ('&STATUS3'(1,1) NE '''').BYP170\nSPFN&NDX DC    CL8&STATUS3              STATUS3 VARIABLE NAME\n.BYP170  ANOP\n.*\n.*\n         AIF   ('&LIBRARY' EQ '').BYP180\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP180\nSPFO&NDX DC    CL8&LIBRARY              LIBRARY NAME\n.BYP180  ANOP\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,TBSTATS               GET ADDRESS OF TBSTATS KEYWORD\n.*\n.*\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&CDATE' EQ '').BYP1100\n         AIF   ('&CDATE'(1,1) EQ '''').BYP1110\n         LA    0,&CDATE                 GET ADDRESS OF CDATE VARIABLE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CDATE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED CDATE\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&CTIME' EQ '').BYP1200\n         AIF   ('&CTIME'(1,1) EQ '''').BYP1210\n         LA    1,&CTIME                 GET ADDRESS OF CTIME VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CTIME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED CTIME\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&UDATE' EQ '').BYP1300\n         AIF   ('&UDATE'(1,1) EQ '''').BYP1310\n         LA    14,&UDATE                GET ADDRESS OF UDATE VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR UDATE\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED UDATE\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&UTIME' EQ '').BYP1400\n         AIF   ('&UTIME'(1,1) EQ '''').BYP1410\n         LA    15,&UTIME                GET ADDRESS OF UTIME VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR UTIME\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED UTIME\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&USER' EQ '').BYP1500\n         AIF   ('&USER'(1,1) EQ '''').BYP1510\n         LA    0,&USER                  GET ADDRESS OF USER VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR USER\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED USER\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&ROWCREAT' EQ '').BYP1600\n         AIF   ('&ROWCREAT'(1,1) EQ '''').BYP1610\n         LA    1,&ROWCREAT              ADDRESS OF ROWCREAT VARIABLE\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWCREAT\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED ROWCREAT\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&ROWCURR' EQ '').BYP1700\n         AIF   ('&ROWCURR'(1,1) EQ '''').BYP1710\n         LA    14,&ROWCURR              ADDRESS OF ROWCURR VARIABLE\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWCURR\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFG&NDX              GET ADDRESS OF GENNED ROWCURR\n.BYP1750 ANOP\n.*\n.*\n         AIF   ('&ROWUPD' EQ '').BYP1800\n         AIF   ('&ROWUPD'(1,1) EQ '''').BYP1810\n         LA    15,&ROWUPD               ADDRESS OF ROWUPD VARIABLE\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROWUPD\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENNED ROWUPD\n.BYP1850 ANOP\n.*\n.*\n         AIF   ('&TABLEUPD' EQ '').BYP1900\n         AIF   ('&TABLEUPD'(1,1) EQ '''').BYP1910\n         LA    0,&TABLEUPD              ADDRESS OF TABLEUPD VARIABLE\n         AGO   .BYP1950\n.BYP1900 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR TABLEUPD\n         AGO   .BYP1950\n.BYP1910 ANOP\n         LA    0,SPFI&NDX               GET ADDRESS OF GENNED TABLEUPD\n.BYP1950 ANOP\n.*\n.*\n         AIF   ('&SERVICE' EQ '').BYP2000\n         AIF   ('&SERVICE'(1,1) EQ '''').BYP2010\n         LA    1,&SERVICE               ADDRESS OF SERVICE VARIABLE\n         AGO   .BYP2050\n.BYP2000 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR SERVICE\n         AGO   .BYP2050\n.BYP2010 ANOP\n         LA    1,SPFJ&NDX               GET ADDRESS OF GENNED SERVICE\n.BYP2050 ANOP\n.*\n.*\n         STM   14,1,&TEMP+32            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&RETCODE' EQ '').BYP2100\n         AIF   ('&RETCODE'(1,1) EQ '''').BYP2110\n         LA    14,&RETCODE              ADDRESS OF RETCODE VARIABLE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR RETCODE\n         AGO   .BYP2150\n.BYP2110 ANOP\n         LA    14,SPFK&NDX              GET ADDRESS OF GENNED RETCODE\n.BYP2150 ANOP\n.*\n.*\n         AIF   ('&STATUS1' EQ '').BYP2200\n         AIF   ('&STATUS1'(1,1) EQ '''').BYP2210\n         LA    15,&STATUS1              ADDRESS OF STATUS1 VARIABLE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR STATUS1\n         AGO   .BYP2250\n.BYP2210 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED STATUS1\n.BYP2250 ANOP\n.*\n.*\n         AIF   ('&STATUS2' EQ '').BYP2300\n         AIF   ('&STATUS2'(1,1) EQ '''').BYP2310\n         LA    0,&STATUS2               ADDRESS OF STATUS2 VARIABLE\n         AGO   .BYP2350\n.BYP2300 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR STATUS2\n         AGO   .BYP2350\n.BYP2310 ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENNED STATUS2\n.BYP2350 ANOP\n.*\n.*\n         AIF   ('&STATUS3' EQ '').BYP2400\n         AIF   ('&STATUS3'(1,1) EQ '''').BYP2410\n         LA    1,&STATUS3               ADDRESS OF STATUS3 VARIABLE\n         AGO   .BYP2450\n.BYP2400 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATUS3\n         AGO   .BYP2450\n.BYP2410 ANOP\n         LA    1,SPFN&NDX               GET ADDRESS OF GENNED STATUS3\n.BYP2450 ANOP\n.*\n.*\n         STM   14,1,&TEMP+48            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2510\n         LA    14,&LIBRARY              ADDRESS OF LIBRARY VARIABLE\n         AGO   .BYP2550\n.BYP2500 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP2550\n.BYP2510 ANOP\n         LA    14,SPFO&NDX              GET ADDRESS OF GENNED LIBRARY\n.BYP2550 ANOP\n.*\n.*\n         ST    14,&TEMP+64              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+64,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 17).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 17).BYPVARS\n&SPFVARS SETA  17\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(TBSTATS)               GET ADDRESS OF TBSTATS KEYWORD\n.*\n.*\n         AIF   ('&TABLE'(1,1) EQ '''').BY1010\n         DC    A(&TABLE)                GET ADDRESS OF TABLE NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFT&NDX)              GET ADDRESS OF GENERATED TABLE\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&CDATE' EQ '').BY1100\n         AIF   ('&CDATE'(1,1) EQ '''').BY1110\n         DC    A(&CDATE)                GET ADDRESS OF CDATE VARIABLE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR CDATE\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED CDATE\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&CTIME' EQ '').BY1200\n         AIF   ('&CTIME'(1,1) EQ '''').BY1210\n         DC    A(&CTIME)                GET ADDRESS OF CTIME VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR CTIME\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED CTIME\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&UDATE' EQ '').BY1300\n         AIF   ('&UDATE'(1,1) EQ '''').BY1310\n         DC    A(&UDATE)                GET ADDRESS OF UDATE VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR UDATE\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED UDATE\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&UTIME' EQ '').BY1400\n         AIF   ('&UTIME'(1,1) EQ '''').BY1410\n         DC    A(&UTIME)                GET ADDRESS OF UTIME VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR UTIME\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED UTIME\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&USER' EQ '').BY1500\n         AIF   ('&USER'(1,1) EQ '''').BY1510\n         DC    A(&USER)                 GET ADDRESS OF USER VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR USER\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED USER\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&ROWCREAT' EQ '').BY1600\n         AIF   ('&ROWCREAT'(1,1) EQ '''').BY1610\n         DC    A(&ROWCREAT)             ADDRESS OF ROWCREAT VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ROWCREAT\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX)              GET ADDRESS OF GENNED ROWCREAT\n.BY1650 ANOP\n.*\n.*\n         AIF   ('&ROWCURR' EQ '').BY1700\n         AIF   ('&ROWCURR'(1,1) EQ '''').BY1710\n         DC    A(&ROWCURR)              ADDRESS OF ROWCURR VARIABLE\n         AGO   .BY1750\n.BY1700 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ROWCURR\n         AGO   .BY1750\n.BY1710 ANOP\n         DC    A(SPFG&NDX)              GET ADDRESS OF GENNED ROWCURR\n.BY1750 ANOP\n.*\n.*\n         AIF   ('&ROWUPD' EQ '').BY1800\n         AIF   ('&ROWUPD'(1,1) EQ '''').BY1810\n         DC    A(&ROWUPD)               ADDRESS OF ROWUPD VARIABLE\n         AGO   .BY1850\n.BY1800 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ROWUPD\n         AGO   .BY1850\n.BY1810 ANOP\n         DC    A(SPFH&NDX)              GET ADDRESS OF GENNED ROWUPD\n.BY1850 ANOP\n.*\n.*\n         AIF   ('&TABLEUPD' EQ '').BY1900\n         AIF   ('&TABLEUPD'(1,1) EQ '''').BY1910\n         DC    A(&TABLEUPD)             ADDRESS OF TABLEUPD VARIABLE\n         AGO   .BY1950\n.BY1900 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR TABLEUPD\n         AGO   .BY1950\n.BY1910 ANOP\n         DC    A(SPFI&NDX)              GET ADDRESS OF GENNED TABLEUPD\n.BY1950 ANOP\n.*\n.*\n         AIF   ('&SERVICE' EQ '').BY2000\n         AIF   ('&SERVICE'(1,1) EQ '''').BY2010\n         DC    A(&SERVICE)              ADDRESS OF SERVICE VARIABLE\n         AGO   .BY2050\n.BY2000 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR SERVICE\n         AGO   .BY2050\n.BY2010 ANOP\n         DC    A(SPFJ&NDX)              GET ADDRESS OF GENNED SERVICE\n.BY2050 ANOP\n.*\n.*\n         AIF   ('&RETCODE' EQ '').BY2100\n         AIF   ('&RETCODE'(1,1) EQ '''').BY2110\n         DC    A(&RETCODE)              ADDRESS OF RETCODE VARIABLE\n         AGO   .BY2150\n.BY2100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR RETCODE\n         AGO   .BY2150\n.BY2110 ANOP\n         DC    A(SPFK&NDX)              GET ADDRESS OF GENNED RETCODE\n.BY2150 ANOP\n.*\n.*\n         AIF   ('&STATUS1' EQ '').BY2200\n         AIF   ('&STATUS1'(1,1) EQ '''').BY2210\n         DC    A(&STATUS1)              ADDRESS OF STATUS1 VARIABLE\n         AGO   .BY2250\n.BY2200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR STATUS1\n         AGO   .BY2250\n.BY2210 ANOP\n         DC    A(SPFL&NDX)              GET ADDRESS OF GENNED STATUS1\n.BY2250 ANOP\n.*\n.*\n         AIF   ('&STATUS2' EQ '').BY2300\n         AIF   ('&STATUS2'(1,1) EQ '''').BY2310\n         DC    A(&STATUS2)              ADDRESS OF STATUS2 VARIABLE\n         AGO   .BY2350\n.BY2300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR STATUS2\n         AGO   .BY2350\n.BY2310 ANOP\n         DC    A(SPFM&NDX)              GET ADDRESS OF GENNED STATUS2\n.BY2350 ANOP\n.*\n.*\n         AIF   ('&STATUS3' EQ '').BY2400\n         AIF   ('&STATUS3'(1,1) EQ '''').BY2410\n         DC    A(&STATUS3)              ADDRESS OF STATUS3 VARIABLE\n         AGO   .BY2450\n.BY2400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR STATUS3\n         AGO   .BY2450\n.BY2410 ANOP\n         DC    A(SPFN&NDX)              GET ADDRESS OF GENNED STATUS3\n.BY2450 ANOP\n.*\n.*\n         AIF   ('&LIBRARY' EQ '').BY2500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BY2510\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY VARIABLE\n         AGO   .BY2550\n.BY2500 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR LIBRARY\n         AGO   .BY2550\n.BY2510 ANOP\n         DC    A(SPFO&NDX+X'80000000')  GET ADDRESS OF GENNED LIBRARY\n.BY2550 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBTOP    8512-85095-85095-1208-00126-00126-00000-ISPFDYN\n         MACRO\n&NAME    TBTOP &TABLE,                  TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBTOP,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBTOP).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBTOP).BYP20\nTBTOP DC       CL8'TBTOP'               ISPF KEYWORD\n&SPFTBTOP SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBTOP                 GET ADDRESS OF TBTOP KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBTOP)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TBVCLEAR 8512-85095-85095-1208-00126-00126-00000-ISPFDYN\n         MACRO\n&NAME    TBVCLEAR &TABLE,               TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBVCLEAR,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBVCLEAR).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBVCLEAR).BYP20\nTBVCLEAR DC    CL8'TBVCLEAR'            ISPF KEYWORD\n&SPFTBVCLEAR SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBVCLEAR              GET ADDRESS OF TBVCLEAR KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBVCLEAR)              BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=TPUTE    8512-85095-85095-1208-00006-00006-00000-ISPFDYN\n         MACRO\n&NAME    TPUTE &COMMAND,&PARMS=\n         LCLA  &NDX\n&NDX     SETA  K'&COMMAND-2\n&NAME    TPUT  =C&COMMAND,&NDX,&PARMS\n         MEND\n./ ADD NAME=VCOPY    8512-85095-85095-1208-00231-00231-00000-ISPFDYN\n         MACRO\n&NAME    VCOPY &VAR,                    NAME LIST                      *\n               &LEN,                    LENGTH ARRAY                   *\n               &VAL,                    VALUE ARRAYS                   *\n               &MOVE,                   FIELD FOR CURSOR               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVCOPY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFLOCATE,&SPFMOVE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLA  &COUNT,&LIMIT\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&LEN' EQ '').ERR2\n         AIF   ('&VAL' EQ '').ERR3\n         AIF   ('&VAL'(1,1) EQ '''').ERR3\n         AIF   ('&MOVE' NE '' AND '&MOVE' NE 'MOVE' AND                *\n               '&MOVE' NE 'LOCATE').ERR4\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVCOPY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&LEN' EQ '').CNT2\n         AIF   (T'&LEN EQ 'N').GENLIT\n         AIF   (N'&LEN GT 1).GENLIT\n.CNT2    ANOP\n         AIF   ('&MOVE' EQ '').CNT4\n         AIF   ('&MOVE' EQ 'MOVE' AND NOT &SPFMOVE).GENLIT\n         AIF   ('&MOVE' EQ 'LOCATE' AND NOT &SPFLOCATE).GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVCOPY).BYP20\nVCOPY    DC    CL8'VCOPY'               ISPF KEYWORD\n&SPFVCOPY SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED NAME LIST{\n.BYP30   ANOP\n         AIF   ('&LEN' EQ '').BYP40\n         AIF   (T'&LEN NE 'N' AND N'&LEN EQ 1).BYP40\n&COUNT   SETA  1\nSPFL&NDX DC    F'&LEN(1)'\n.BYP32   ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT N'&LEN).BYP40\n         DC    F'&LEN(&COUNT)'\n         AGO   .BYP32\n.BYP40   ANOP\n         AIF   ('&MOVE' EQ '').BYP90\n         AIF   ('&MOVE' NE 'MOVE' OR &SPFMOVE).BYP85\nMOVE     DC    CL8'MOVE'                ISPF KEYWORD\n&SPFMOVE SETB  1\n.BYP85   ANOP\n         AIF   ('&MOVE' NE 'LOCATE' OR &SPFLOCATE).BYP90\nLOCATE   DC    CL8'LOCATE'              ISPF KEYWORD\n&SPFLOCATE SETB 1\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VCOPY                 GET ADDRESS OF VCOPY KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF NAMELIST\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NAMELIST\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED NAME\n.BYP1050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP1110\n         LA    0,&LEN                   GET ADDRESS OF LENGTH ARRAY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LENGTH\n.BYP1150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP1200\n         AIF   ('&VAL'(1,1) EQ '''').BYP1210\n         LA    1,&VAL                   GET ADDRESS OF VALUE ADDRESS\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VALUE ADDRE\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED VALUE\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n         AIF   ('&MOVE' EQ '').BYP1600\n         LA    14,&MOVE                 GET ADDRESS OF KEYWORD\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR AUTOSEL\n.BYP1650 ANOP\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VCOPY)                 VCOPY LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF NAMELIST\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMELIST\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED NAMELIST\n.BYP2050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP2110\n         DC    A(&LEN)                  ADDRESS OF LENGTH ARRAY\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LENGTHS\n.BYP2150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP2200\n         AIF   ('&VAL'(1,1) EQ '''').BYP2210\n         DC    A(&VAL)                  ADDRESS OF STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)\n.BYP2250 ANOP\n         AIF   ('&MOVE' EQ '').BYP2600\n         DC    A(&MOVE+X'80000000')     ADDRESS OF KEYWORD\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR KEYWORD\n.BYP2650 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'VCOPY REQUIRES A NAME LIST'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'VCOPY REQUIRES A LENGTH ARRAY'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'VCOPY REQUIRES STORAGE ADDRESS TO STORE DATA IN'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'EXPECTED MOVE/LOCATE KEYWORD - FOUND ''&MOVE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=VDEFINE  8512-85095-85095-1208-00267-00267-00000-ISPFDYN\n         MACRO\n&LBL     VDEFINE &NAME,                 NAME LIST                      *\n               &VAR,                    POINTER TO STORAGE             *\n               &FOR,                    FORMAT OF DATA                 *\n               &LEN,                    LENGTH OF FIELD                *\n               &OPT,                    OPTIONS LIST                   *\n               &USER,                   USER DATA FOR EXIT             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVDEFINE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFCHAR,&SPFFIXED,&SPFBIT,&SPFHEX,&SPFUSER\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LBL' EQ '').BYP10\n&LBL     DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&NAME' EQ '').ERR1\n         AIF   ('&VAR' EQ '').ERR2\n         AIF   ('&VAR'(1,1) EQ '''').ERR3\n         AIF   ('&FOR' NE '' AND                                       *\n               '&FOR' NE 'CHAR' AND                                    *\n               '&FOR' NE 'BIT' AND                                     *\n               '&FOR' NE 'FIXED' AND                                   *\n               '&FOR' NE 'USER' AND                                    *\n               '&FOR' NE 'HEX').ERR4\n         AIF   ('&LEN' EQ '').ERR5\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVDEFINE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&NAME' EQ '').CNT1\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&FOR' EQ 'CHAR' AND NOT &SPFCHAR).GENLIT\n         AIF   ('&FOR' EQ 'BIT' AND NOT &SPFBIT).GENLIT\n         AIF   ('&FOR' EQ 'FIXED' AND NOT &SPFFIXED).GENLIT\n         AIF   ('&FOR' EQ 'USER' AND NOT &SPFUSER).GENLIT\n         AIF   ('&FOR' EQ 'HEX' AND NOT &SPFHEX).GENLIT\n         AIF   ('&LEN' EQ '').CNT3\n         AIF   (T'LEN EQ 'N').GENLIT\n.CNT3    ANOP\n         AIF   ('&OPT' EQ '').CNT4\n         AIF   ('&OPT'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVDEFINE).BYP20\nVDEFINE  DC    CL8'VDEFINE'             ISPF KEYWORD\n&SPFVDEFINE SETB 1\n.BYP20   ANOP\n         AIF   ('&NAME' EQ '').BYP30\n         AIF   ('&NAME'(1,1) NE '''').BYP30\nSPFN&NDX DC    C&NAME                   GENERATED NAME LIST\n.BYP30   ANOP\n         AIF   ('&FOR' EQ 'CHAR' AND &SPFCHAR).BYP40\n         AIF   ('&FOR' EQ 'FIXED' AND &SPFFIXED).BYP40\n         AIF   ('&FOR' EQ 'BIT' AND &SPFBIT).BYP40\n         AIF   ('&FOR' EQ 'USER' AND &SPFUSER).BYP40\n         AIF   ('&FOR' EQ 'HEX' AND &SPFHEX).BYP40\n&FOR     DC    CL8'&FOR'                ISPF KEYWORD\n         AIF   ('&FOR' NE 'CHAR').BYP32\n&SPFCHAR SETB  1\n.BYP32   ANOP\n         AIF   ('&FOR' NE 'FIXED').BYP33\n&SPFFIXED SETB  1\n.BYP33   ANOP\n         AIF   ('&FOR' NE 'CHAR').BYP34\n&SPFCHAR SETB  1\n.BYP34   ANOP\n         AIF   ('&FOR' NE 'BIT').BYP35\n&SPFBIT SETB  1\n.BYP35   ANOP\n         AIF   ('&FOR' NE 'USER').BYP36\n&SPFUSER SETB  1\n.BYP36   ANOP\n         AIF   ('&FOR' NE 'HEX').BYP40\n&SPFHEX  SETB  1\n.BYP40   ANOP\n         AIF   ('&LEN' EQ '').BYP50\n         AIF   (T'&LEN NE 'N').BYP50\nSPFL&NDX DC    F'&LEN'                  GENERATED LENGTH\n.BYP50   ANOP\n         AIF   ('&OPT' EQ '').BYP60\n         AIF   ('&OPT'(1,1) NE '''').BYP60\nSPFO&NDX DC    C&OPT                    GENERATED OPTION LIST\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VDEFINE               GET ADDRESS OF VDEFINE KEYWORD\n.*\n         AIF   ('&NAME' EQ '').BYP1000\n         AIF   ('&NAME'(1,1) EQ '''').BYP1010\n         LA    15,&NAME                 GET ADDRESS OF NAMELIST\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NAMELIST\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFN&NDX              GET ADDRESS OF GENERATED NAME\n.BYP1050 ANOP\n.*\n         LA    0,&VAR                   GET ADDRESS OF STORAGE\n.*\n         LA    1,&FOR                   GET ADDRESS OF FORMAT\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   (T'&LEN EQ 'N').BYP1310\n         LA    14,&LEN                  GET ADDRESS OF LENGTH\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFL&NDX              GET ADDRESS OF GENERATED LEN\n.BYP1350 ANOP\n.*\n         AIF   ('&OPT' EQ '').BYP1400\n         AIF   ('&OPT'(1,1) EQ '''').BYP1410\n         LA    15,&OPT                  GET ADDRESS OF OPTION LIST\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR OPTION\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFO&NDX              GET ADDRESS OF GENERATED OPT\n.BYP1450 ANOP\n.*\n         AIF   ('&USER' EQ '').BYP1500\n         LA    0,&USER                  GET ADDRESS OF USER DATA\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               DUMMY USER DATA\n.BYP1550 ANOP\n.*\n         STM   14,0,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+24,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 7).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 7).BYPVARS\n&SPFVARS SETA  7\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VDEFINE)               VDEFINE LITERAL\n.*\n         AIF   ('&NAME' EQ '').BYP2000\n         AIF   ('&NAME'(1,1) EQ '''').BYP2010\n         DC    A(&NAME)                 ADDRESS OF NAMELIST\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMELIST\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NAMELIST\n.BYP2050 ANOP\n.*\n         DC    A(&VAR)                  ADDRESS OF STORAGE AREA\n.*\n         DC    A(&FOR)                  ADDRESS OF FORMAT TYPE\n.*\n         AIF   (T'&LEN EQ 'N').BYP2310\n         DC    A(&LEN)                  ADDRESS OF LENGTH\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LENGTH\n.BYP2350 ANOP\n.*\n         AIF   ('&OPT' EQ '').BYP2400\n         AIF   ('&OPT'(1,1) EQ '''').BYP2410\n         DC    A(&OPT)                  ADDRESS OF OPT NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR OPT\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFO&NDX)              ADDRESS OF GENERATED OPT\n.BYP2450 ANOP\n.*\n         AIF   ('&USER' EQ '').BYP2800\n         DC    A(&USER+X'80000000')     ADDRESS OF ROWID NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ROWID\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'NAME LIST IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'AN ADDRESS POINTING TO STORAGE MAPPING VARIABLES IS *\n               REQUIRED'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'AN ADDRESS POINTING TO STORAGE MAPPING VARIABLES IS *\n               REQUIRED - MUST NOT BE A LITERAL'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'INVALID FORMAT SPECIFIED'\n         MEXIT\n.ERR5    ANOP\n         MNOTE 16,'LENGTH FIELD IS REQUIRED'\n         MEXIT\n.ERR6    ANOP\n         MNOTE 16,'USER DATA FIELD MUST NOT BE A LITERAL'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=VDELETE  8512-85095-85095-1208-00129-00129-00000-ISPFDYN\n         MACRO\n&NAME    VDELETE &VAR,                  NAMELIST                       *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVDELETE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVDELETE).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVDELETE).BYP20\nVDELETE  DC    CL8'VDELETE'             ISPF KEYWORD\n&SPFVDELETE SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED VAR LIST\n.BYP30   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VDELETE               GET ADDRESS OF VDELETE KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF VAR NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR VAR\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED VAR\n.BYP1050 ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS INTO LIST\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VDELETE)               VDELETE LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR+X'80000000')      ADDRESS OF VAR NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR VAR NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX+X'80000000')  ADDRESS OF GENERATED VAR\n.BYP2050 ANOP\n.*\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE NAME LIST PARAMETER IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=VGET     8512-85095-85095-1208-00171-00171-00000-ISPFDYN\n         MACRO\n&NAME    VGET &VAR,                     NAMELIST                       *\n               &POOL,                   VARIABLE POOL                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVGET,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFASIS,&SPFSHARED,&SPFPROFILE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&POOL' NE '' AND '&POOL' NE 'ASIS' AND                *\n               '&POOL' NE 'SHARED' AND  '&POOL' NE 'PROFILE').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&POOL' EQ 'ASIS' AND NOT &SPFASIS).GENLIT\n         AIF   ('&POOL' EQ 'PROFILE' AND NOT &SPFPROFILE).GENLIT\n         AIF   ('&POOL' EQ 'SHARED' AND NOT &SPFSHARED).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVGET).BYP20\nVGET     DC    CL8'VGET'                ISPF KEYWORD\n&SPFVGET SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED VAR LIST\n.BYP30   ANOP\n         AIF   ('&POOL' EQ '').BYP90\n         AIF   ('&POOL' NE 'ASIS' OR &SPFASIS).BYP82\nASIS     DC    CL8'ASIS'                ISPF KEYWORD\n&SPFASIS SETB  1\n.BYP82   ANOP\n         AIF   ('&POOL' NE 'PROFILE' OR &SPFPROFILE).BYP84\nPROFILE  DC    CL8'PROFILE'             ISPF KEYWORD\n&SPFPROFILE SETB 1\n.BYP84   ANOP\n         AIF   ('&POOL' NE 'SHARED' OR  &SPFSHARED).BYP90\nSHARED   DC    CL8'SHARED'              ISPF KEYWORD\n&SPFSHARED SETB 1\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VGET                  GET ADDRESS OF VGET KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF VAR NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR VAR\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED VAR\n.BYP1050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP1100\n         LA    0,&POOL                  GET POOL TYPE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n.BYP1150 ANOP\n.*\n         STM   14,0,&TEMP               STORE PARAMETERS INTO LIST\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VGET)                  VGET LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP2100\n         DC    A(&POOL+X'80000000')     POOL TYPE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR PANEL NAME\n.BYP2150 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE NAME LIST PARAMETER IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID POOL SPECIFIED - FOUND ''&POOL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=VPUT     8512-85095-85095-1208-00171-00171-00000-ISPFDYN\n         MACRO\n&NAME    VPUT &VAR,                     NAMELIST                       *\n               &POOL,                   VARIABLE POOL                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVPUT,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFASIS,&SPFSHARED,&SPFPROFILE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&POOL' NE '' AND '&POOL' NE 'ASIS' AND                *\n               '&POOL' NE 'SHARED' AND  '&POOL' NE 'PROFILE').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&POOL' EQ 'ASIS' AND NOT &SPFASIS).GENLIT\n         AIF   ('&POOL' EQ 'PROFILE' AND NOT &SPFPROFILE).GENLIT\n         AIF   ('&POOL' EQ 'SHARED' AND NOT &SPFSHARED).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVPUT).BYP20\nVPUT     DC    CL8'VPUT'                ISPF KEYWORD\n&SPFVPUT SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED VAR LIST\n.BYP30   ANOP\n         AIF   ('&POOL' EQ '').BYP90\n         AIF   ('&POOL' NE 'ASIS' OR &SPFASIS).BYP82\nASIS     DC    CL8'ASIS'                ISPF KEYWORD\n&SPFASIS SETB  1\n.BYP82   ANOP\n         AIF   ('&POOL' NE 'PROFILE' OR &SPFPROFILE).BYP84\nPROFILE  DC    CL8'PROFILE'             ISPF KEYWORD\n&SPFPROFILE SETB 1\n.BYP84   ANOP\n         AIF   ('&POOL' NE 'SHARED' OR  &SPFSHARED).BYP90\nSHARED   DC    CL8'SHARED'              ISPF KEYWORD\n&SPFSHARED SETB 1\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VPUT                  GET ADDRESS OF VPUT KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF VAR NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR VAR\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED VAR\n.BYP1050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP1100\n         LA    0,&POOL                  GET POOL TYPE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n.BYP1150 ANOP\n.*\n         STM   14,0,&TEMP               STORE PARAMETERS INTO LIST\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VPUT)                  VPUT LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP2100\n         DC    A(&POOL+X'80000000')     POOL TYPE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR PANEL NAME\n.BYP2150 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE NAME LIST PARAMETER IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID POOL SPECIFIED - FOUND ''&POOL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=VREPLACE 8512-85095-85095-1208-00195-00195-00000-ISPFDYN\n         MACRO\n&NAME    VREPLACE &VAR,                 NAME LIST                      *\n               &LEN,                    LENGTH ARRAY                   *\n               &VAL,                    VALUE ARRAYS                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVREPLACE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLA  &COUNT,&LIMIT\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&LEN' EQ '').ERR2\n         AIF   ('&VAL' EQ '').ERR3\n         AIF   ('&VAL'(1,1) EQ '''').ERR3\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVREPLACE).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&LEN' EQ '').CNT2\n         AIF   (T'&LEN EQ 'N').GENLIT\n         AIF   (N'&LEN GT 1).GENLIT\n.CNT2    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVREPLACE).BYP20\nVREPLACE DC    CL8'VREPLACE'            ISPF KEYWORD\n&SPFVREPLACE SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED NAME LIST{\n.BYP30   ANOP\n         AIF   ('&LEN' EQ '').BYP40\n         AIF   (T'&LEN NE 'N' AND N'&LEN EQ 1).BYP40\n&COUNT   SETA  1\nSPFL&NDX DC    F'&LEN(1)'\n.BYP32   ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT N'&LEN).BYP40\n         DC    F'&LEN(&COUNT)'\n         AGO   .BYP32\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VREPLACE              GET ADDRESS OF VREPLACE KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF NAMELIST\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NAMELIST\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED NAME\n.BYP1050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP1110\n         LA    0,&LEN                   GET ADDRESS OF LENGTH ARRAY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LENGTH\n.BYP1150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP1200\n         AIF   ('&VAL'(1,1) EQ '''').BYP1210\n         LA    1,&VAL                   GET ADDRESS OF VALUE ADDRESS\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VALUE ADDRE\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED VALUE\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VREPLACE)              VREPLACE LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF NAMELIST\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMELIST\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED NAMELIST\n.BYP2050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP2110\n         DC    A(&LEN)                  ADDRESS OF LENGTH ARRAY\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LENGTHS\n.BYP2150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP2200\n         AIF   ('&VAL'(1,1) EQ '''').BYP2210\n         DC    A(&VAL+X'80000000')      ADDRESS OF STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX+X'80000000')\n.BYP2250 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'NAME LIST IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'LENGTH VALUES OR ADDRESS REQUIRED'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'VALUE ADDRESS REQUIRED'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'EXPECTED MOVE/LOCATE KEYWORD - FOUND ''&MOVE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=VRESET   8512-85095-85095-1208-00094-00094-00000-ISPFDYN\n         MACRO\n&NAME    VRESET &LOAD=ISPLINK,          ISPF ADDRESS                   *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVRESET,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVRESET).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVRESET).BYP20\nVRESET   DC    CL8'VRESET'              ISPF KEYWORD\n&SPFVRESET SETB 1\n.BYP20   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VRESET                GET ADDRESS OF VRESET KEYWORD\n         ST    14,&TEMP                 STORE PARAMETERS INTO LIST\n         OI    &TEMP,X'80'              MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 0).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 0).BYPVARS\n&SPFVARS SETA  0\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VRESET+X'80000000')    VRESET LITERAL\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n./ ADD NAME=WS       8512-86097-86097-1148-00024-00024-00000-ISPFDYN\n         MACRO\n&NAME    WS    &TYPE,                   DSECT NAME AND BEGIN/END       *\n               &LENGTH=WSLEN            WHAT TO CALL LENGTH OF DSECT\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n         GBLC  &WS$NAME\n         GBLC  &WS$CAME\n         AIF   ('&TYPE' EQ 'BEGIN').BEG\n         AIF   ('&TYPE' EQ 'END').END\n         MNOTE 16,'INVALID TYPE FOUND - EXPECTED BEGIN OR END'\n         MEXIT\n.BEG     ANOP\n&WS$NAME SETC  '&NAME'\n&WS$CAME SETC  '&SYSECT'\n&WS$NAME DSECT ,\nSAVEAREA DS    18F\n         MEXIT\n.END     ANOP\n         DS    0D\nWS$LEN   EQU   *-&WS$NAME\n&LENGTH  EQU   (WS$LEN+2)/4\n&WS$CAME CSECT ,\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT615/FILE615.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT615", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}