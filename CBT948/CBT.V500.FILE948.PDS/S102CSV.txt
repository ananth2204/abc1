/* this REXX can be used to trap DB2 commands submitted on a DB2  */
/* or trace all the SQL statement with Host variable Input values.*/
/* It is very useful if you can't get SQL statement text trace    */
/* from your monitor (site limitations ...)                       */
/* Of course, you have to start the appropriate trace, see below  */
/*                                                                */
/*Rexx*/
numeric digits 15
/*-------------------------------------------------------------*/
/* Extract smf 102 records - written by Nguyen Duc Tuan        */
/*                                      ndt.db2Ã gmail.com      */
/* These IFCIDs are available only in Performance trace        */
/*   4 may 2016     Release 1.0                                */
/*  12 Aug 2016     Release 2.0 Process SQL Stmt               */
/*  29 Nov 2016     Release 2.1 Process IFCID 366              */
/*  13 Apr 2017     Release 2.2 Process IFCID 376 & update 366 */
/*                  IFCID376 is just an aggregated version of  */
/*                  IFCID366 , the mapping is identical        */
/*-------------------------------------------------------------*/
/*-------------------------------------------------------------*/
/*Comment : Change datasets high level identifier              */
/*Notes : Ifcid 63 (sql text) is available only for dynamic sql*/
/*        (Spufi or Rexx for example)                          */
/*        For static SQL, there is no ifcid 350 or 63 produced */
/*        it seems that for static SQL, stmtno is provided and */
/*        we have to go to syspackstmt to get the SQL text     */
/*        Ifcid 53 is the ifcid to get sqlcode                 */
/*        Ifcid 58 is produced only for dynamic SQL (DESCRIBE) */
/*-------------------------------------------------------------*/
ARG hlq modex   /*PROCESS THIS DB2 SUBSYS ONLY */

db2_cmd='N'       /* process ifcid 090 DB2 cmd ? */
/* -STA TRACE(PERFM) DEST(SMF) CLASS(30) IFCID(90) */
/* -STA TRACE(PERFM) DEST(SMF) CLASS(30) IFCID(108,109) */
Bind      ='N'    /* process ifcid 108/109 : Bind operations ? */
/* -STA TRACE(PERFM) DEST(SMF) CLASS(30) IFCID(108,109) */
Stmt_cache='N'  /* process stmt_cache ? IFCID 316,317,318,400,401 */
sql_text  ='N'    /* process Sql statement IFCID 63,64,247  */
/* Ifcid 53 and 58 is for sqlca (in particular sqlcode) */
/* -STA TRACE(PERFM) DEST(SMF) AUTHID(WSYNGUD) CLASS(30) IFCID(63,64,2
   47,53,58)*/
IFC366='N'        /* process ifcid 366 Built in Function report */
IFC376='N'        /* process ifcid 376 Unsupported fonctions    */
IFC224='N'        /* process ifcid 224 invalids xproc */
IFC342='N'        /* process ifcid 342 workfile usage */
select
    when modex = 'CMD'    then db2_cmd='Y'
    when modex = 'BIND'   then Bind='Y'
    when modex = 'STMTC'  then Stmt_cache='Y'
    when modex = 'SQLTXT' then sql_text='Y'
    when modex = 'IFC366' then IFC366='Y'
    when modex = 'IFC376' then IFC376='Y'
    when modex = 'IFC224' then IFC224='Y'
    when modex = 'IFC342' then IFC342='Y'
    otherwise  do
         say 'Missing or wrong argument :' modex
         exit 8
       end
end /* end select */
say ' '
say 'Processing for SMF102 - All subsystems'

repSQL = 'N'
if stmt_cache = 'Y' | sql_text = 'Y' then repSQL = 'Y'
repIncompat = 'N'
if IFC376     = 'Y' | IFC366   = 'Y' then repIncompat = 'Y'

call alloc_file
/* init compteurs divers */
call init_var
/* WRITE report header */
CALL write_header

/* START PROCESSING */
DO FOREVER
  /* read SMF record one by one   */
  "EXECIO 1 DISKR INP"
  IF RC > 0 THEN DO
            if rc =  2 then
             do
              SAY ''
              SAY 'End of input SMF file rc=' RC
              rcalloc = rc
             end
             else do
              SAY ''
              SAY 'Error while reading SMF file rc=' RC
              rcalloc = 8
             end
              leave
            END
  PARSE PULL INPUT_REC
  reci=reci+1
  OFFSET = 1
  /* Decode SMF header */
  CALL DSNDQWST
  /* record SMF records period   */
  if min_time > run_fmt_time then min_time=run_fmt_time
  if max_time < run_fmt_time then max_time=run_fmt_time

  /* process only smf102 */
  IF (sm102RTY = 102    ) THEN
  DO
    recs=recs+1
    /*sauvegarde offset_self car on le reutilise */
    offset_selfdef= offset
    /* Get   pointer to product section */
    offset = C2D(SUBSTR(INPUT_REC,OFFSET,4))
      temp   = offset_selfdef+4
      prod_len = C2D(SUBSTR(INPUT_REC,temp,2))
      temp=temp+2
      prod_rep = C2D(SUBSTR(INPUT_REC,temp,2))
    offset = offset - 4 + 1
    /* Process product section*/
    Call DSNDQWHS
    offset=offset_selfdef
    /* record all ifcid in smf for analysis : unexploited data ? */
    call record_ifcid

    Select
         When ifcid     = 53 & sql_text = 'Y' then
                            Do
                                say 'process IFCID 53'
                                /* SQLCA most used */
                                CALL QW0058
                                OFFSET = offset_save
                            end
         When ifcid     = 58 & sql_text = 'Y' then
                            Do
                                say 'process IFCID 58'
                                /* SQLCA     */
                                CALL QW0058
                                OFFSET = offset_save
                            end
         When ifcid     = 63 & sql_text = 'Y' then
                            Do
                                say 'process IFCID 63'
                                /* SQL stmt - dynamic SQL */
                                CALL QW0063
                                OFFSET = offset_save
                            end
         When ifcid     = 247 & sql_text = 'Y' then
                            Do
                                say 'process IFCID 247'
                                /* Host Var  */
                                CALL QW0247
                                OFFSET = offset_save
                            end
         When ifcid     = 350 & sql_text = 'Y' then
                            Do
                                /* Long sql text - dynamic */
                                CALL QW0350
                                OFFSET = offset_save
                            end
         When ifcid     = 366 & IFC366   = 'Y' then
                            Do
                                /* Incompatible functions usage */
                                CALL QW0366
                                call Write_IFC366
                                OFFSET = offset_save
                            end
         When ifcid     = 376 & IFC376   = 'Y' then
                            Do
                                /* Incompatible functions usage */
                                CALL QW0366
                                call Write_IFC366
                                OFFSET = offset_save
                            end
         When ifcid     = 224 & IFC224   = 'Y' then
                            Do
                                /* Invalid XProc  */
                                CALL QW0224
                                call Write_IFC224
                                OFFSET = offset_save
                            end
         When ifcid     = 90 & db2_cmd = 'Y' then
                            Do
                                /* get command text */
                                CALL QW0090
                                /* get authid and the rest */
                                call DSNDQWHC
                                /*write report */
                                call Write_REPCMD
                                OFFSET = offset_save
                            end
         When ifcid     = 108 & Bind = 'Y' then
                            Do
                                /* get Bind details */
                                CALL QW0108
                                /* get authid and the rest */
                                call DSNDQWHC
                                /*write report */
                                call Write_REPBnd
                                OFFSET = offset_save
                            end
         When ifcid     = 109 & Bind = 'Y' then
                            Do
                                /* get Bind Return code */
                                CALL QW0109
                                /* get authid and the rest */
                                call DSNDQWHC
                                /*write report */
                                call Write_REPBNDRC
                                OFFSET = offset_save
                            end
         When ifcid     = 401 & stmt_cache = 'Y' then
                            Do
                                /* get static SQL stats*/
                                CALL init_sql
                                CALL QW0401
                                /*write report */
                                call write_RepSql
                                OFFSET = offset_save
                            end
         When ifcid     = 316 & stmt_cache = 'Y' then
                            Do
                                /* get dynamic SQL stats*/
                                CALL init_sql
                                CALL QW0316
                                /*write report */
                                call write_RepSql
                                OFFSET = offset_save
                            end
         When ifcid     = 342 & IFC342   = 'Y' then
                            Do
                                /* get workfile usage  stats*/
                                CALL QW0342
                                /*write report */
                                call write_IFC342
                                OFFSET = offset_save
                            end
         otherwise
                do
                     nop
                  /* say 'ifcid' ifcid 'not processed' */
                end
    end   /* select */

  END /*    IF SM102RTY = 102  */
END
call close_all

say "Input records =" reci
say "Output records=" reco
say 'SMF period : ' min_time "/" max_time

call report_ifcid
/*-------------------------------------------------*/
/* F20 End of program display counters and figures */
/*-------------------------------------------------*/

EXIT rcalloc

/*---------------------------------------*/
/* End of program body- Routines section */
/*---------------------------------------*/


QW0090:
numeric digits 15
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 090 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       QW0090LN =c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2
       QW0090CT = SUBSTR(INPUT_REC,OFFSET_d,qw0090ln-2)
  return
QW0108:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 108 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* plan name if applicable */
       QW0108PN =SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +8 +2
       /* Bind type */
       QW0108T  = SUBSTR(INPUT_REC,OFFSET_d,1)
       offset_d = offset_d +10
       /* Owner */
       QW0108OW = SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +8
       /* Type  */
       QW0108TY = SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +8  + 8 + 2 + 16
       /* Pack. name */
       QW0108PK = SUBSTR(INPUT_REC,OFFSET_d,36)
       say 'packname =' QW0108PK
       offset_d = offset_d + 126 /* real len of pack name*/
  return
QW0109:
numeric digits 15
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 108 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* Return code  */
       QW0109RC =c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
  return

QW0350:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 0350 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       offset_d=offset_d+4 /* skip data */
       say ' '
       say '---- Begin Long SQL Text ----'
       /* Total len */
       QW0350TL =c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       say '350/Total Len             :' QW0350TL
       offset_d = offset_d +4
       QW0350TY = SUBSTR(INPUT_REC,OFFSET_d,2)
       select
           when qw0350ty='8000'x then sqltype='Dynamic'
           when qw0350ty='4000'x then sqltype='Static'
           otherwise
           do
                say 'qw0350ty contents error unexpected value',
                          qw0350ty
                exit(8)
           end
       end
       say '350/Sql type              :' sqltype
       offset_d = offset_d +2
       /* statement identifier QW0350SI
       stmtid   =  c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       say '350/stmtid=' stmtid */
       offset_d = offset_d +8
       /*Source CCSID */
       ccsid    = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       say '350/Original parser CCSID :' ccsid
       offset_d = offset_d +2
       /* len of the following */
       QW0350SPL=  c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       len = QW0350SPL -2
       offset_d = offset_d +2
       QW0350SP =      SUBSTR(INPUT_REC,OFFSET_d,len)
       xx= '350/Sql len/Text          :' len '/' || ,
                        space(QW0350SP) ||'/'
       say xx
  /*   say 'offset_d 350 after stmtid =' offset_d
       say  'Display Input_Rec below'
       say  SUBSTR(INPUT_REC,1,100)
       say  SUBSTR(INPUT_REC,101,100)
       say  SUBSTR(INPUT_REC,201,100)
       say  SUBSTR(INPUT_REC,301,100)
       say  SUBSTR(INPUT_REC,401,100)
       say  SUBSTR(INPUT_REC,501,100)
       say  SUBSTR(INPUT_REC,601,100)
       say  SUBSTR(INPUT_REC,701,100) */
  return
QW0366:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /* offset_d of the ifcid data for use later*/
       offset_ifc = offset_d
       /*offset_d points to the IFCID 0366 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* Function code */
       QW0366FN =c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       select
           when QW0366FN=1 then
               FnTxt='V9 CHAR(decimal-expr)'
           when QW0366FN=2 then
               FnTxt='V9 VARCHAR(decimal-expr)-CAST decimal as CHAR',
                     '/VARCHAR'
           when QW0366FN=3 then
               FnTxt='Unsupported char. string representation ',
                     'of a timestamp'
           when QW0366FN=7 then
               FnTxt='Unsupported Cast because DDF_COMPARTIBILITY ',
                     'zparm value'
           when QW0366FN=8 then
               FnTxt='DDF_COMPARTIBILITY=SP_PARMS_xJV and match ',
                     'output data is returned'
           when QW0366FN=9 then
               FnTxt='TIMEZONE ignored because of',
                     ' DDF_COMPARTIBILITY zparm value'
           when QW0366FN=10 then
               FnTxt='Pre v10 version of  ',
                     'LTRIM, RTRIM or STRIP has been executed'
           when QW0366FN=11 then
               FnTxt='SELECT INTO with UNION UNION ALL EXCEPT ALL ',
                     'INTERSECT INTERSECT ALL OPERATOR'
           when QW0366FN=1104 then
               FnTxt='CLIENT_ACCTNG SPECIAL REGISTER WAS SET FOR ',
                     'A VALUE NOT SUPPORTED IN V11'
           when QW0366FN=1105 then
               FnTxt='CLIENT_APPLNAME SPECIAL REGISTER WAS SET FOR ',
                     'A VALUE NOT SUPPORTED IN V11'
           when QW0366FN=1106 then
               FnTxt='CLIENT_USERID SPECIAL REGISTER WAS SET FOR ',
                     'A VALUE NOT SUPPORTED IN V11'
           when QW0366FN=1107 then
               FnTxt='CLIENT_WRKSTNNAME SPECIAL REGISTER WAS SET FOR ',
                     'A VALUE NOT SUPPORTED IN V11'
           when QW0366FN=1109 then
               FnTxt='CAST string as Timestamp'
           otherwise
           do
               FnTxt =QW0366FN
           end
       end
       offset_d = offset_d +4
       /* Statement number in the query */
       QW0366SN =c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       offset_d = offset_d +4
       /* Planname */
       QW0366PL =SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +8
       /* ConToken */
       QW0366TS =c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* Statement Id */
       QW0366SI =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
         /* statement identifier QW0350SI
         stmtid   =  c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
         say '366/stmtid=' stmtid */
       /* Statement type */
       QW0366TY =SUBSTR(INPUT_REC,OFFSET_d,2)
       offset_d = offset_d +2
       select
           when qw0366ty='8000'x then sqltype='Dynamic'
           when qw0366ty='4000'x then sqltype='Static'
           otherwise
           do
                say 'qw0366ty contents error unexpected value',
                          qw0366ty
                exit(8)
           end
       end
       /* Section Number */
       QW0366SE =c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2
       /* Offset to Collid */
       QW0366PC_Off =c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       QW0366PC_Off = QW0366PC_Off + offset_ifc
       offset_d = offset_d +2
       /* Offset to Package */
       QW0366PN_Off =c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       QW0366PN_Off = QW0366PN_Off + offset_ifc
       offset_d = offset_d +2
       /*Version Len */
       QW0366VL = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2
       /*Version  */
       QW0366VN = SUBSTR(INPUT_REC,OFFSET_d,qw0366VL)
       /* len of the following */
       QW0366PC_Len= c2d(SUBSTR(INPUT_REC,QW0366PC_Off,2))
       offset_d = QW0366PC_Off + 2
       QW0366PC = SUBSTR(INPUT_REC,OFFSET_d,QW0366PC_Len)
       /* len of the following */
       QW0366PN_Len= c2d(SUBSTR(INPUT_REC,QW0366PN_Off,2))
       offset_d = QW0366PN_Off + 2
       QW0366PN = SUBSTR(INPUT_REC,OFFSET_d,QW0366PN_Len)
  return
QW0342:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /* offset_d of the ifcid data for use later*/
       offset_ifc = offset_d
       /*offset_d points to the IFCID 0342 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* WF type  */
       QW0342TY = SUBSTR(INPUT_REC,OFFSET_d,4)
       offset_d = offset_d +4
       /* DBID */
       QW0342DB = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2
       /* PSID */
       QW0342PS = c2d(subSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2
       /* Current space usage in KB */
       QW0342CT =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* Max     space usage in KB */
       QW0342MT =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8+16
       /* Agent token */
       QW0342AT = c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
  return
QW0224:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 0224 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* Nb cols       */
       QW0224CL =c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       offset_d = offset_d +4
       /* Pgm  */
       QW0224PN =SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +8
       /* Collid   */
       QW0224CI =SUBSTR(INPUT_REC,OFFSET_d,18)
  return
QW0063:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 0063 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       offset_d=offset_d+2 /* skip data */
       QW0063LL =c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2
       QW0063ST = SUBSTR(INPUT_REC,OFFSET_d,QW0063LL-2)
       say ' '
       say '---- Begin Dynamic SQL ----'
       xx= '63/SQL Text             >' ||  space(QW0063ST) || '<'
       say xx
       offset_d = offset_d + QW0063LL /* skip statement type*/
       /* statement identifier QW0063SI
       stmtid   =  c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       say '63/stmtid=' stmtid */
       offset_d = offset_d +8
       /*Source CCSID */
       ccsid    = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       say '63/Original parser CCSID :' ccsid
  /*   say 'offset_d 063 after stmtid =' offset_d
       say  'Display Input_Rec below'
       say  SUBSTR(INPUT_REC,1,100)
       say  SUBSTR(INPUT_REC,101,100)
       say  SUBSTR(INPUT_REC,201,100)
       say  SUBSTR(INPUT_REC,301,100)
       say  SUBSTR(INPUT_REC,401,100)
       say  SUBSTR(INPUT_REC,501,100)
       say  SUBSTR(INPUT_REC,601,100)
       say  SUBSTR(INPUT_REC,701,100) */
  return
QW0247:
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 0247 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* location */
       QW0247LN =SUBSTR(INPUT_REC,OFFSET_d,16)
       offset_d = offset_d +16
       /* Collid   */
       QW0247PC =SUBSTR(INPUT_REC,OFFSET_d,18)
       say ' '
       say '---- begin host variable ----'
       offset_d = offset_d +18
       /* Package name */
       QW0247PN =SUBSTR(INPUT_REC,OFFSET_d,18)
       xx= '247/Collid/Program       :' ,
                  strip(QW0247PC)|| '/' || strip(qw0247pn)
       say xx
       /* Consitency token (Contoken in sysibm.syspackstmt) */
       offset_d = offset_d +18
       /* Divers */
       offset_d = offset_d +8+2
       /* Number of entries in SQLDA */
       QW0247NE =c2d(SUBSTR(INPUT_REC,OFFSET_D,2))
       offset_d = offset_d +2
       /* Len of each SQLDA entry */
       QW0247LE =c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d +2+1+1
       /* Statement number = STMNO in SYSPACKSTMT */
       QW0247SN = c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       say '247/STMTNO               :'  qw0247sn
       offset_d = offset_d + 4
       offset_d = offset_d + 8 /* H + H + H then 0000x ?? */
       /* jump Qw0247LN_D Dsect */
       /* Begin SQLDA entry */
       /* Data type (defined in SQLTYPE Manual SQL Reference */
       QW0247TY = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       select
           when QW0247TY = 388 then VTYPE='TIME'
           when QW0247TY = 389 then VTYPE='TIME'
           when QW0247TY = 392 then VTYPE='TS'
           when QW0247TY = 393 then VTYPE='TS'
           when QW0247TY > 403 & QW0247TY < 414 then VTYPE='xLOB'
           when QW0247TY =448 then VTYPE='VARCHAR'
           when QW0247TY =449 then VTYPE='VARCHAR'
           when QW0247TY =452 then VTYPE='CHAR'
           when QW0247TY =453 then VTYPE='CHAR'
           when QW0247TY =484 then VTYPE='DEC'
           when QW0247TY =485 then VTYPE='DEC'
           when QW0247TY =492 then VTYPE='BINT'
           when QW0247TY =493 then VTYPE='BINT'
           when QW0247TY =496 then VTYPE='INT'
           when QW0247TY =497 then VTYPE='INT'
           otherwise do
               say '247/Data type QW0247 not Processed yet' QW0247TY
               VTYPE='UNKNOWN'
             end
       end /* end select */
       offset_d = offset_d + 2
       say '247/Datatype/vtype       :',
                                 qw0247TY '/' vtype
       if VTYPE = 'DEC' then
       do
          /* Precision if Decimal */
          QW0247LP = c2d(SUBSTR(INPUT_REC,OFFSET_d,1))
          say '    247/Decimal Precision    :'  qw0247LP
          offset_d = offset_d + 1
          /* Scale     if Decimal */
          QW0247LS = c2d(SUBSTR(INPUT_REC,OFFSET_d,1))
          say '    247/DEC Scale            :'   qw0247LS
          offset_d = offset_d + 1
       end
       else
       do
          offset_d = offset_d + 2
       end
       /* skip */
       offset_d = offset_d + 20
       /* SQLDA Entry No */
       QW0247NO = c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       xx= '247/Entry No/Total       :' qw0247no ||  '/' || qw0247NE
       say xx
       offset_d = offset_d + 40

       /* QW0247B DSECT */
       QW0247LL = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       offset_d = offset_d + 2
       xx= '247/Host Var below Text is in Unicode ||'
       say xx
       select
          when  VTYPE = 'VARCHAR' then
             do
               len      = c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
               offset_d = offset_d + 2
               hv       = SUBSTR(INPUT_REC,OFFSET_d,len)
               xx= '247/Host Var. value/len  >' ,
                             ||  hv || '<' || len || '/'
             end
          when  VTYPE = 'CHAR' then
            do
              Null_ind = SUBSTR(INPUT_REC,OFFSET_d,1)
              if Null_ind = '00'x then  Null_ind = 'N'
                                  else  Null_ind = 'Y'
              len   = qw0247ll-2
              hv    = SUBSTR(INPUT_REC,OFFSET_d+1,len)
              xx= '247/Null/Host Var. value/Len   :',
                          ||  null_ind || '>' || hv ||'<'|| len|| '/'
            end
          when  VTYPE = 'DEC' then
            do
              len   = qw0247ll-2
              hv       = c2x(SUBSTR(INPUT_REC,OFFSET_d,len))
              xx= '     247/Host Var. value Hexa/len   >',
                        ||             hv ||'<'|| len|| '/'
            end
          otherwise
            do
              len   = qw0247ll-2
              hv       = SUBSTR(INPUT_REC,OFFSET_d,len)
              xx= '247/Host Var. value/len        >',
                        ||             hv ||'<'|| len|| '/'
            end
       end /* end select */
       say  xx
   /*  say  'INPUT_REC display below'
       say  SUBSTR(INPUT_REC,1,99 )
       say  SUBSTR(INPUT_REC,100,099)
       say  SUBSTR(INPUT_REC,200,099)
       say  SUBSTR(INPUT_REC,300,099)
       say  SUBSTR(INPUT_REC,400,099)
       say  SUBSTR(INPUT_REC,500,099)
       say  SUBSTR(INPUT_REC,600,099)
       say  SUBSTR(INPUT_REC,700,099) */

  return

QW0058:
       /* lot of things in common with IFCID 0247 */
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /*offset_d points to the IFCID 0058 data to process */
       offset = offset +4
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* location */
       QW0058LN =SUBSTR(INPUT_REC,OFFSET_d,16)
       offset_d = offset_d +16
       /* Collid   */
       QW0058PC =SUBSTR(INPUT_REC,OFFSET_d,18)
       say ' '
       say '---- End SQL ---- ifcid :' ifcid
       offset_d = offset_d +18
       /* Package name */
       QW0058PN =SUBSTR(INPUT_REC,OFFSET_d,18)
       xx= ifcid || '/Collid/Program       :',
               strip(QW0058PC) || '/' || strip(qw0058pn)
       say xx
       /* Consitency token (Contoken in sysibm.syspackstmt) */
       offset_d = offset_d +18
       /* Divers */
       offset_d = offset_d +8+2
       /* SQLCA
       QW0058SQ =    SUBSTR(INPUT_REC,OFFSET_D,136)
       say '058/SQLCA 1-50           >'|| substr(qw0058sq,1,50)||'<'
       say '058/SQLCA 51-100         >'|| substr(qw0058sq,51,50)||'<'
       say '058/SQLCA 101-136        >'|| substr(qw0058sq,101,36)||'<'
       say '058/SQLCA 101-136        >'|| substr(qw0058sq,101,36)||'<'
       offset_d = offset_d +136+2 */
       /* jump to SQLCODE */
       offset_d = offset_d +8+4
       sqlcode  =x2d(c2x(SUBSTR(INPUT_REC,OFFSET_d,4)),8)
       xx= ifcid ||'/Sqlcode              :' sqlcode
       say xx
       offset_d = offset_d +4+120
       /* Statement number  */
       QW0058SN = c2d(SUBSTR(INPUT_REC,OFFSET_d,4))
       offset_d = offset_d + 4
       offset_d = offset_d + 22 + 2
       /* SQL Type */
       QW0058TOS= SUBSTR(INPUT_REC,OFFSET_d,1)
       select
           when QW0058TOS = '01'x then sqltype='FETCH'
           when QW0058TOS = '10'x then sqltype='Insert'
           when QW0058TOS = '11'x then sqltype='SELECT INTO'
           when QW0058TOS = '20'x then sqltype='UPDATE NONCURSOR'
           when QW0058TOS = '21'x then sqltype='UPDATE CURSOR'
           when QW0058TOS = '30'x then sqltype='MERGE'
           when QW0058TOS = '40'x then sqltype='DELETE NONCURSOR'
           when QW0058TOS = '41'x then sqltype='DELETE CURSOR'
           when QW0058TOS = '50'x then sqltype='TRUNCATE'
           when QW0058TOS = '80'x then sqltype='PREPARE NONCURSOR'
           when QW0058TOS = '81'x then sqltype='PREPARE CURSOR'
           when QW0058TOS = '91'x then sqltype='OPEN'
           when QW0058TOS = 'A1'x then sqltype='CLOSE'
           otherwise do
               xx= ifcid||'/SQL type QW0058 not Processed yet',
                                QW0058TOS
               sqltype='UNKNOWN'
             end
       end /* end select */
       xx= ifcid||'/Statement number/type:'  qw0058sn || '/' sqltype
       say xx
       offset_d = offset_d + 1
    /* say  'INPUT_REC display below'
       say  SUBSTR(INPUT_REC,1,99 )
       say  SUBSTR(INPUT_REC,100,099)
       say  SUBSTR(INPUT_REC,200,099)
       say  SUBSTR(INPUT_REC,300,099)
       say  SUBSTR(INPUT_REC,400,099)
       say  SUBSTR(INPUT_REC,500,099)
       say  SUBSTR(INPUT_REC,600,099)
       say  SUBSTR(INPUT_REC,700,099) */

  return

QW0316:
       SQLType='DY'
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /* offset_d of the ifcid data for use later*/
       offset_ifc=offset_d
       /*offset_d points to the IFCID 316 data to process */
       offset = offset +4
       /* length of data section*/
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* How many  data section ?*/
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2

       /* skip the first 24 bytes*/
       offset_d = offset_d +24
       /* nbr users */
       say 'CurrUsers' suBSTR(INPUT_REC,OFFSET_d,8)
       CurrUsers = C2D(SUBSTR(INPUT_REC,OFFSET_d,8))
       say 'CurrUsers' CurrUsers
       offset_d = offset_d +24
       /* nbr execs */
       nbr_execs =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr reads */
       nbr_reads=c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr gp    */
       nbr_gp =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr examined rows */
       nbr_ER =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr rows Processed */
       nbr_pr =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr sorts */
       nbr_sort =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr ix scans */
       nbr_ixscan =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr TS scans*/
       nbr_tsscan =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr Parallel groups created*/
       nbr_PG =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr buffer sync writes*/
       nbr_syncwr =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* db2 elapsed   */
       elapse = c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       elapse   = x2d(substr(elapse,1,13))
       elapse   = elapse  /1000000
       /* skip ... */
       /* pgm name      */
       offset_d = offset_d +70
       len=c2d(SUBSTR(INPUT_REC,OFFSET_d,2))
       pgm_name = SUBSTR(INPUT_REC,OFFSET_d+2,len)
       offset_d = offset_d +46
       tran_name = SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +32
       end_user  = SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +16
       wrkstation= SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +68
       table_name= strip(SUBSTR(INPUT_REC,OFFSET_d,8)) || '.' ||,
                   strip(SUBSTR(INPUT_REC,OFFSET_d+10,8))
       offset_d = offset_d +32
       /* db2 cpu (including ziip) */
       cputime  = c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       cputime  = x2d(substr(cputime,1,13))
       cputime  = cputime     /1000000
       offset_d = offset_d +8*7
       /* RID list failed Limit    */
       rid_limit= c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* RID list failed Storage  */
       rid_stor = c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       ssid_sql = SUBSTR(INPUT_REC,OFFSET_d,8)
       offset_d = offset_d +80+4+8
       sql_stmt = '"' || SUBSTR(INPUT_REC,OFFSET_d,64) || '"'
       return
QW0401:
       SQLType='ST'
       offset_save=offset
       /* offset= offset of self definition section*/
       /* offset= offset + 8 : bypass pointer to Product  Section*/
       /* Pointer 4 bytes + Len 2 bytes + Repeat factor 2 bytes  */
       offset=offset+4+2+2 /*pointer to data section 1*/
       /*take the contents pointed by the offset */
       offset_d= C2D(SUBSTR(INPUT_REC,OFFSET,4))
       offset_d=offset_d -4+1
       /* offset_QW0401 will be used later */
       /* offset_d of the ifcid data for use later*/
       offset_ifc=offset_d
       /*offset_d points to the IFCID 401 data to process */
       offset = offset +4
       /* length of data section*/
       len     = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       offset = offset +2
       /* How many  data section ?*/
       repeat  = C2D(SUBSTR(INPUT_REC,OFFSET,2))
       say 'repeat data section401=' repeat
       offset = offset +2
    /*   say 'offset 401/len/rep' offset_d len repeat
         say 'ifc401='
         say SUBSTR(INPUT_REC,OFFSET_d,100)
         say SUBSTR(INPUT_REC,OFFSET_d+101,100)
         say SUBSTR(INPUT_REC,OFFSET_d+201,100)
         say SUBSTR(INPUT_REC,OFFSET_d+301,100) */
       StmtId =C2D(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr execs */
       nbr_execs =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr reads */
       nbr_reads =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr gp    */
       nbr_gp =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr examined rows */
       nbr_ER =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr rows Processed */
       nbr_pr =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr sorts */
       nbr_sort =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr ix scans */
       nbr_ixscan =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr TS scans*/
       nbr_tsscan =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr buffer writes*/
       nbr_syncwr =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* nbr Parallel groups created*/
       nbr_PG =c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* db2 elapsed   */
       elapse   = c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       elapse   = x2d(substr(elapse,1,13))
       elapse   = elapse  /1000000
       offset_d = offset_d +8
       /* db2 cpu (including ziip) */
       cputime  = c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       cputime  = x2d(substr(cputime,1,13))
       cputime  = cputime /1000000
       offset_d = offset_d +8
       /* wait time for sync IO    */
       wait_sio = c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       wait_sio = x2d(substr(wait_sio,1,13))
       wait_sio = wait_sio/1000000
       offset_d = offset_d +8 * 6
       /* RID list failed Limit    */
       rid_limit= c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       /* RID list failed Storage  */
       rid_stor = c2d(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8*6
       pkg_token= c2x(SUBSTR(INPUT_REC,OFFSET_d,8))
       offset_d = offset_d +8
       QW0401CL_Off=C2D(SUBSTR(INPUT_REC,offset_d,2))
       QW0401CL_Off=QW0401CL_Off + offset_ifc
       len=C2D(SUBSTR(INPUT_REC,QW0401CL_Off,2))
       Collid      =SUBSTR(INPUT_REC,QW0401CL_Off+2,len)
       offset_d = offset_d +2
       QW0401PK_Off=C2D(SUBSTR(INPUT_REC,offset_d,2))
       QW0401PK_Off=QW0401PK_Off + offset_ifc
       len=C2D(SUBSTR(INPUT_REC,QW0401PK_Off,2))
       /* package name */
       Pgm_name    =SUBSTR(INPUT_REC,QW0401PK_Off+2,len)
       offset_d = offset_d +2
       tunits=SUBSTR(INPUT_REC,offset_d,8)
       call stck tunits
       say timestamp  Tsdate tstime
       offset_d = offset_d +8
       offset_d = offset_d +10
       tunits=SUBSTR(INPUT_REC,offset_d,8)
       call stck tunits
       say timestamp  Tsdate tstime
       offset_d = offset_d +8
return

/* MAP  PRODUCT SECTION */
DSNDQWHS:
  QWHSLEN = C2D(SUBSTR(INPUT_REC,OFFSET,2))
  /* go to the next prod section header  */
  if qwhslen < prod_len  then
              offset_corr = offset + qwhslen
        else
              offset_corr = 0

  OFFSET = OFFSET + 2
  QWHSTYP = C2D(SUBSTR(INPUT_REC,OFFSET,1))
   /* say 'header len' QWHSLEN, */
   /*     'header type' QWHSTYP */
  OFFSET = OFFSET + 2
  /* QWHSIID DS XL2 IFCID */
  QWHSIID = C2D(SUBSTR(INPUT_REC,OFFSET,2))
  IFCID=QWHSIID
  OFFSET = OFFSET + 2
  QWHSNSDA =C2D(SUBSTR(INPUT_REC,OFFSET,1))
  OFFSET = OFFSET + 6
  /* QWHSSSID DS CL4 SUBSYSTEM NAME */
  QWHSSSID = SUBSTR(INPUT_REC,OFFSET,4)
  OFFSET = OFFSET + 47
  /* QWHSSID MVS NAME */
  QWHSSID = SUBSTR(INPUT_REC,OFFSET,4)
  /* TOTAL LENGTH = 86 */

  RETURN

/* correlation header QWHCTYP = 2 */
DSNDQWHC:
  QWHCLEN = C2D(SUBSTR(INPUT_REC,offset_corr,2))
  offset_corr = offset_corr + 2
  QWHCTYP = C2D(SUBSTR(INPUT_REC,offset_corr,1))
  /* process type 2 only */
  if QWHCTYP >< 2 then return
  /* process type 2 product header */
  offset_corr = offset_corr + 2
  /* authid */
  QWHCAID      = SUBSTR(INPUT_REC,offset_corr,8)
  offset_corr = offset_corr + 8
  /* corrid */
  QWHCCV  = SUBSTR(INPUT_REC,offset_corr,12)
  offset_corr = offset_corr + 12
  /* Connid */
  QWHCCN = SUBSTR(INPUT_REC,offset_corr,8)
  offset_corr = offset_corr + 8
  /* Check rex100 which decode more fields from the correlation */
  /* header */
  say 'Corr :' SUBSTR(INPUT_REC,offset_corr,100)
  return

GET_FMT_TIME:
  RUN_HH = sm102TME % 360000
  RUN_HH = RIGHT(RUN_HH,2,'0')
  RUN_MIN = sm102TME % 6000 - RUN_HH*60
  RUN_MIN = RIGHT(RUN_MIN,2,'0')
  RUN_SEC = sm102TME % 100 - RUN_HH *3600 - RUN_MIN*60
  RUN_SEC = RIGHT(RUN_SEC,2,'0')
  RUN_FMT_TIME = RUN_HH||':'||RUN_MIN||':'||RUN_SEC
  RETURN

write_header:
  if repIncompat   = 'Y' then
  do
    say 'CSV file ' oufC     ' will be produced'
    queue "Lpar,ssid,date,time,Hour,",
           "Fntype,StmNo,Plan,StmId,StmType,SectNo,Collid,Pack,",
           "Version,ConToken"

    "EXECIO" queued() "DISKW OUFC"
  end
  if IFC224  = 'Y' then
  do
    say 'CSV file ' oufC     ' will be produced'
    queue "Lpar,ssid,date,time,Hour,",
           "NbCols,Collid,Pgm"

    "EXECIO" queued() "DISKW OUFC"
  end
  if IFC342  = 'Y' then
  do
    say 'CSV file ' oufC     ' will be produced'
    queue "Lpar,ssid,date,time,Hour,",
           "Type,DBID,PSID,CurKB,MaxKB,AgentTok"

    "EXECIO" queued() "DISKW OUFC"
  end
  if db2_cmd = 'Y' then
  do
    say 'CSV file ' oufC     ' will be produced'
    queue "Lpar,ssid,date,time,Hour,",
           "CmdTxt,Authid,Corrid,Connid,"

    "EXECIO" queued() "DISKW OUFC"
  end
  if Bind    = 'Y' then
  do
    say 'CSV file ' oufC     ' will be produced'
    queue "Lpar,ssid,date,time,Hour,",
           "PLan,BindType,Owner,Type,Pack,rc,Authid,Corrid,Connid,"

    "EXECIO" queued() "DISKW OUFC"
  end
  if stmt_cache = 'Y' | sql_text = 'Y' then
  do
    say 'CSV file ' oufS     ' will be produced'
    queue "Lpar,ssid,date,time,Hour,",
       "Type,Elapse,Cpu,Execs,SyncRead,SyncWwr,GP,ExRows,ProcRows,",
       "Sort,IxScan,TsScan,ParaGrp,",
       "RIDLim,RIDStor,PgmName,Collid,PkgToken,StmtID,",
       "CurrUsrs,TranName,EndUser,WkStation,TbName,SQLTxt,"

    "EXECIO" queued() "DISKW OUFS"
  end
  return


Write_REPBND:
 if Bind = 'Y' then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || '"' || strip(QW0108PN) || '"'     || ','   ,
    || QW0108T      || ','   ,  /*bind type */
    || QW0108OW     || ','   ,  /*Owner     */
    || QW0108TY     || ','   ,  /*Type      */
    || '"' || strip(QW0108PK) || '"'     || ','   ,
    || ' '          || ','   , /* return code */
    || QWHCAID      || ','   ,
    || QWHCCV       || ','   ,
    || QWHCCN       || ','

   "EXECIO" queued() "DISKW OUFC"
 end
return
Write_REPBNDRC:
 if Bind = 'Y' then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || ' '          || ','   ,
    || ' '          || ','   ,
    || ' '          || ','   ,
    || ' '          || ','   ,
    || ' '          || ','   ,
    || QW0109RC    || ','   , /* return code */
    || QWHCAID      || ','   ,
    || QWHCCV       || ','   ,
    || QWHCCN       || ','

   "EXECIO" queued() "DISKW OUFC"
 end
return
Write_IFC366:
 if repIncompat  = 'Y' then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || '"' || FnTxt || '"' || ','   ,
    || QW0366SN     || ','   ,
    || QW0366PL     || ','   ,
    || QW0366SI     || ','   ,
    || sqltype      || ','   ,
    || QW0366SE     || ','   ,
    || QW0366PC     || ','   ,
    || QW0366PN     || ','   ,
    || QW0366VN     || ','   ,
    || QW0366TS

   "EXECIO" queued() "DISKW OUFC"
 end
return
Write_IFC224:
 if IFC224  = 'Y' then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || QW0224CL     || ','   ,
    || strip(QW0224CI)     || ','   ,
    || strip(QW0224PN) || ','

   "EXECIO" queued() "DISKW OUFC"
 end
return
Write_IFC342:
 if IFC342  = 'Y' then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || QW0342TY     || ','   ,
    || QW0342DB     || ','   ,
    || QW0342PS     || ','   ,
    || QW0342CT     || ','   ,
    || QW0342MT     || ','   ,
    || QW0342AT

   "EXECIO" queued() "DISKW OUFC"
 end
return
Write_REPCMD:
 if db2_cmd = 'Y' then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || '"' || strip(QW0090CT) || '"'     || ','   ,
    || QWHCAID      || ','   ,
    || QWHCCV       || ','   ,
    || QWHCCN       || ','

   "EXECIO" queued() "DISKW OUFC"
 end
return
Write_RepSQL:
 if repSQL =    'Y'  then do
    reco= reco+ 1
    /*rows in excel format */
    queue sm102sid  || ',' || sm102ssi || ','  ,
    || sm102dte     || ','   ,
    || run_fmt_time || ','   ,
    || run_hh       || ','   ,
    || SQLType      || ','   ,
    || Elapse       || ','   ,
    || Cputime      || ','   ,
    || nbr_execs    || ','   ,
    || nbr_reads    || ','   ,
    || nbr_syncwr   || ','   ,
    || nbr_gp       || ','   ,
    || nbr_er       || ','   ,
    || nbr_pr       || ','   ,
    || nbr_sort     || ','   ,
    || nbr_ixscan   || ','   ,
    || nbr_tsscan   || ','   ,
    || nbr_pg       || ','   ,
    || rid_limit    || ','   ,
    || rid_stor     || ','   ,
    || pgm_name     || ','   ,
    || Collid       || ','   ,
    || pkg_token    || ','   ,
    || stmtid       || ','   ,
    || CurrUsers    || ','   ,
    || tran_name    || ','   ,
    || end_user     || ','   ,
    || wrkstation   || ','   ,
    || table_name   || ','   ,
    || sql_stmt     || ','

   "EXECIO" queued() "DISKW OUFS"
 end
return


/* SMF HEADER */
DSNDQWST:
   OFFSET = OFFSET + 1
   /* sm102RTY DS XL1 RECORD TYPE X'66' OR 102 */
   sm102RTY = C2D(SUBSTR(INPUT_REC,OFFSET,1))
   OFFSET = OFFSET + 1
   /* sm102TME DS XL4 TIME SMF MOVED RECORD */
   sm102TME = C2D(SUBSTR(INPUT_REC,OFFSET,4))
   CALL GET_FMT_TIME
   OFFSET = OFFSET + 4
   field    = C2X(SUBSTR(INPUT_REC,OFFSET,4))
     parse value field with 1 . 2 c 3 yy 5 ddd 8 .
     if (c = 0) then
       yyyy = '19'||yy
     else
       yyyy = '20'||yy
   sm102dte    = yyyy||'.'||ddd
   /* sauvegarde de la date traitee */
   OFFSET = OFFSET + 4
   sm102sid = SUBSTR(INPUT_REC,OFFSET,4)
   OFFSET = OFFSET + 4
   /* sm102SSI DS CL4 SUBSYSTEM ID */
   sm102ssi = SUBSTR(INPUT_REC,OFFSET,4)
   OFFSET = OFFSET + 10
   /* TOTAL LENGTH = 28 */
   return

record_ifcid:
   found=0
   do i = 1 to nbr_ifcid
      if ifcid_st.i = ifcid then
         do
            found=1
            ifcid_count.i=ifcid_count.i+1
            leave
         end
   end
   /* not found : add new ifcid to list*/
   if found=0 then
      do
         nbr_ifcid = nbr_ifcid + 1
         ifcid_st.nbr_ifcid = ifcid
         ifcid_count.nbr_ifcid = 1
      end
   return
report_ifcid:
  say ' '
  say ' '
  say 'List of ifcids read in this SMF file :' nbr_ifcid
  say '   Ifcid/Description/Count'
  do i=1 to nbr_ifcid
      Select
           When ifcid_st.i = 04 then
                      ifcid_desc='Trace stop'
           When ifcid_st.i = 05 then
                      ifcid_desc='Trace stop'
           When ifcid_st.i = 22 then
                      ifcid_desc='Mini Bind'
           When ifcid_st.i = 53 then
                      ifcid_desc='End SQL-SQLCA - Processed'
           When ifcid_st.i = 58 then
                      ifcid_desc='End SQL-SQLCA - Processed'
           When ifcid_st.i = 59 then
                      ifcid_desc='Start Fetch'
           When ifcid_st.i = 63 then
                      ifcid_desc='SQL text - Processed'
           When ifcid_st.i = 64 then
                      ifcid_desc='Prepare Start'
           When ifcid_st.i = 65 then
                      ifcid_desc='Open cursor'
           When ifcid_st.i = 66 then
                      ifcid_desc='Close cursor'
           When ifcid_st.i = 90 then
                      ifcid_desc='Start Command'
           When ifcid_st.i = 95 then
                      ifcid_desc='Sort start'
           When ifcid_st.i = 96 then
                      ifcid_desc='Sort stop'
           When ifcid_st.i = 105 then
                      ifcid_desc='DBDID OBID translat'
           When ifcid_st.i = 106 then
                      ifcid_desc='System init parms'
           When ifcid_st.i = 108 then
                      ifcid_desc='Start Bind - Processed'
           When ifcid_st.i = 109 then
                      ifcid_desc='End Bind - Processed '
           When ifcid_st.i = 112 then
                      ifcid_desc='Thread alloc'
           When ifcid_st.i = 172 then
                      ifcid_desc='DeadLock, timeout'
           When ifcid_st.i = 173 then
                      ifcid_desc='CL2 time'
           When ifcid_st.i = 177 then
                      ifcid_desc='Pkg alloc'
           When ifcid_st.i = 196 then
                      ifcid_desc='Timeout data'
           When ifcid_st.i = 224 then
                      ifcid_desc='Invalid SPROC - Processed'
           When ifcid_st.i = 247 then
                      ifcid_desc='Host variables - Processed'
           When ifcid_st.i = 254 then
                      ifcid_desc='CF structure cache stats'
           When ifcid_st.i = 258 then
                      ifcid_desc='Dataset extend activity'
           When ifcid_st.i = 313 then
                      ifcid_desc='Uncomm. UR'
           When ifcid_st.i = 316 then
                      ifcid_desc='DSC stats -Processed'
           When ifcid_st.i = 337 then
                      ifcid_desc='Lock Escalation'
           When ifcid_st.i = 342 then
                      ifcid_desc='Workfile Usage'
           When ifcid_st.i = 350 then
                      ifcid_desc='SQL text (log) - Processed'
           When ifcid_st.i = 366 then
                      ifcid_desc='Incompat.funct.exec. - Processed'
           When ifcid_st.i = 376 then
                      ifcid_desc='Incompat.funct.exec. - Processed'
           When ifcid_st.i = 401 then
                      ifcid_desc='Static SQL stats - Processed'
           otherwise
                      ifcid_desc='Unknow'

      end   /* select */
     xx= '   ' || ifcid_st.i ||'/'||ifcid_desc||'/' ||ifcid_count.i
     say xx
   end /* end do */
   return
init_var:
  /* compteurs input/output */
  nbr_ifcid = 0
  reco= 0
  reci= 0
  recs= 0
  min_time='23:59:59'
  if repSQL =    'Y'  then call init_sql
  return
init_sql:
    StmtId =-1
    CurrUsers=-1
    tran_name='NA'
    end_user='NA'
    wrkstation='NA'
    table_name='NA'
    sql_stmt='NA'
    pkg_token='NA'
    collid='NA'
  return

alloc_file:
  /* Input file : SMF extract sorted
  oufl = hlq || '.SMFEXTP'
     Input file
   "ALLOC DD(INP) SHR  bufno(20)" */
  if db2_cmd = 'Y' then
  do
       oufl = "'" || hlq || '.REPORT' || "'"
       "DELETE" oufl "PURGE"

       "ALLOC DD(OUFC) DS("OUFl") NEW CATALOG REUSE" ,
       "LRECL(300) RECFM(V B) TRACKS SPACE(50,50)"
       rcalloc = rc
       if rcalloc <> 0 then Do
            say "**********************************************"
            say "   Error allocating REPCMD file" rcalloc
            say "   Abnormal end  "
            say "**********************************************"
            Exit 8
       end
  end /* db2_cmd = 'Y' */
  if IFC224  = 'Y' then
  do
       oufl = "'" || hlq || '.IFC224' || "'"
       "DELETE" oufl "PURGE"

       "ALLOC DD(OUFC) DS("OUFl") NEW CATALOG REUSE" ,
       "LRECL(300) RECFM(V B) TRACKS SPACE(50,50)"
       rcalloc = rc
       if rcalloc <> 0 then Do
            say "**********************************************"
            say "   Error allocating IFC224 file" rcalloc
            say "   Abnormal end  "
            say "**********************************************"
            Exit 8
       end
  end /* IFC224  = 'Y' */
  if IFC342  = 'Y' then
  do
       oufl = "'" || hlq || '.IFC342' || "'"
       "DELETE" oufl "PURGE"

       "ALLOC DD(OUFC) DS("OUFl") NEW CATALOG REUSE" ,
       "LRECL(200) RECFM(V B) TRACKS SPACE(50,50)"
       rcalloc = rc
       if rcalloc <> 0 then Do
            say "**********************************************"
            say "   Error allocating IFC342 file" rcalloc
            say "   Abnormal end  "
            say "**********************************************"
            Exit 8
       end
  end /* IFC342  = 'Y' */
  if repIncompat  = 'Y' then
  do
       oufl = "'" || hlq || '.IFC3X6'  || "'"
       "DELETE" oufl "PURGE"

       "ALLOC DD(OUFC) DS("OUFl") NEW CATALOG REUSE" ,
       "LRECL(300) RECFM(V B) TRACKS SPACE(50,50)"
       rcalloc = rc
       if rcalloc <> 0 then Do
            say "**********************************************"
            say "   Error allocating IFC3X6 file" rcalloc
            say "   Abnormal end  "
            say "**********************************************"
            Exit 8
       end
  end /* IFC3X6  = 'Y' */
  if Bind    = 'Y' then
  do
       oufl = "'" || hlq || '.REPORT.BND' || "'"
       "DELETE" oufl "PURGE"

       "ALLOC DD(OUFC) DS("OUFl") NEW CATALOG REUSE" ,
       "LRECL(300) RECFM(V B) TRACKS SPACE(50,50)"
       rcalloc = rc
       if rcalloc <> 0 then Do
            say "**********************************************"
            say "   Error allocating REPCMD file" rcalloc
            say "   Abnormal end  "
            say "**********************************************"
            Exit 8
       end
  end /* Bind    = 'Y' */

  if repSQL =    'Y'  then
  do
       /* Report dataset on output */
       oufs = "'" || hlq || '.REPORT.SQL' || "'"
       "DELETE" oufS "PURGE"

       "ALLOC FI(OUFs) DA("oufs") NEW CATALOG REUSE" ,
       "LRECL(300) RECFM(V B) TRACKS SPACE(50,50)"
       rcalloc = rc
       if rcalloc <> 0 then Do
            say "**********************************************"
            say "   Error allocating repSQL file" rcalloc
            say "   Abnormal end  "
            say "**********************************************"
            Exit 8
       end
  end /* stmt_cache    */

  RETURN
close_all:
  if repSQL =    'Y'  then
  do
    "EXECIO" queued() "DISKW OUFs ( FINIS"
    "FREE DD(OUFs)"
  end
  if db2_cmd='Y' then
  do
    "EXECIO" queued() "DISKW OUFC ( FINIS"
    "FREE DD(OUFC)"
  end
  "EXECIO 0 DISKR oufi (STEM INL. FINIS"
  "FREE DD(oufi)"
  return
stck:
Arg TUNITS
  TIMESTAMP = Copies(0,26)  /* force result length=26 */
  Address linkpgm "BLSUXTOD TUNITS TIMESTAMP"
  /* variable Timestamp has the value of timestamp */
  TSDate=substr(timestamp,1,10)
  TSTime=substr(timestamp,12,08)
  return
