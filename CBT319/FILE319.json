{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011745000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE319.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE319.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x03'", "DS1TRBAL": "b'\\xbe\\xfc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02o\\x00\\x01\\x02o\\x00\\x05\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"SMF1415": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET CBT918     AT LEVEL 002 AS OF 12/07/82\n*          DATA SET CBT918     AT LEVEL 002 AS OF 10/01/78              00001\n         MACRO                                                          00002\n         $REGS                                                          00003\n         GBLB  &PRORG                                                   00004\n         AIF   (&PRORG).MEX2                                            00005\n&PRORG   SETB  1                                                        00006\n         SPACE                                                          00007\nR0       EQU   0                                                        00008\nR1       EQU   1                                                        00009\nR2       EQU   2                                                        00010\nR3       EQU   3                                                        00011\nR4       EQU   4                                                        00012\nR5       EQU   5                                                        00013\nR6       EQU   6                                                        00014\nR7       EQU   7                                                        00015\nR8       EQU   8                                                        00016\nR9       EQU   9                                                        00017\nR10      EQU   10                                                       00018\nR11      EQU   11                                                       00019\nR12      EQU   12                                                       00020\nR13      EQU   13                                                       00021\nR14      EQU   14                                                       00022\nR15      EQU   15                                                       00023\n SPACE                                                                  00024\nREG0     EQU   0                                                        00025\nREG1     EQU   1                                                        00026\nREG2     EQU   2                                                        00027\nREG3     EQU   3                                                        00028\nREG4     EQU   4                                                        00029\nREG5     EQU   5                                                        00030\nREG6     EQU   6                                                        00031\nREG7     EQU   7                                                        00032\nREG8     EQU   8                                                        00033\nREG9     EQU   9                                                        00034\nREG10    EQU   10                                                       00035\nREG11    EQU   11                                                       00036\nREG12    EQU   12                                                       00037\nREG13    EQU   13                                                       00038\nREG14    EQU   14                                                       00039\nREG15    EQU   15                                                       00040\n SPACE                                                                  00041\n.MEX2    ANOP                                                           00042\n       MEND                                                             00043\n         MACRO                                                          00044\n&LABEL   $PROLOG &LV=0                                                  00045\n.********************************************************************** 00046\n.*                                                                      00047\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY           00048\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD          00049\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE               00050\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS            00051\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:                00052\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE        00053\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE        00054\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA   00055\n.*                                             REG 10 IS BASE           00056\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES    00057\n.*                                                                      00058\n.********************************************************************** 00059\n         LCLA  &AA,&AB,&AC                                              00060\n         GBLB  &PRORG                                                   00061\n&AC      SETA  4096                                                     00062\n&LABEL   CSECT                                                          00063\n         B     32(R15)             BRANCH AROUND                        00064\n         DC    AL1(26)                                                  00065\n         DC    CL8'&LABEL'         CSECT NAME                           00066\n         DC    C'-'                                                     00067\n         DC    CL8'&SYSDATE'       COMPILE DATE                         00068\n         DC    C'-'                                                     00069\n         DC    CL8'&SYSTIME'       COMPILE TIME                         00070\n         CNOP  0,4                 ALIGNMENT                            00071\n         STM   R14,R12,12(R13)     SAVE REGISTERS                       00072\n         LR    R12,R15             LOAD BASE REG                        00073\n         USING &LABEL,R12          INFORM ASSEMBLER                     00074\n         AIF   (&LV GT 4023).MERR                                       00075\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE      00076\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER       00077\n         AIF   (&LV+72 LE 256).XC2                                      00078\n         AIF   (&LV+72 LE 512).XC1                                      00079\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE             00080\n         LR    R2,R1               SAVE POINTER IN EVEN REG             00081\n         LA    R4,1(R1)            SET RECEIVING POINTER                00082\n         LR    R5,R0               SET RECEIVING LENGTH                 00083\n         BCTR  R5,R0               DECREMENT LENGTH                     00084\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE                00085\n         LA    R3,1                SET SENDING LENGTH                   00086\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'          00087\n         AGO   .STORE                                                   00088\n.XC1     ANOP                                                           00089\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA                 00090\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA                 00091\n         AGO   .STORE                                                   00092\n.XC2     ANOP                                                           00093\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA                 00094\n.STORE   ANOP                                                           00095\n         ST    R13,4(R1)           SAVE BACK CHAIN                      00096\n         ST    R1,8(R13)           SET FORWARD CHAIN                    00097\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS            00098\n         L     R15,16(R13)         RESTORE REG 15                       00099\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH                 00100\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN         00101\n         LR    R13,R11             SET SAVEAREA POINTER                 00102\n         AIF   (N'&SYSLIST EQ 0).MEND                                   00103\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT                          00104\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT                           00105\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG              00106\n         DROP  R12                 DROP ASSUMED BASE REG                00107\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER                     00108\n.SKIPIT  ANOP                                                           00109\n&AA      SETA  2                                                        00110\n.LOOP    ANOP                                                           00111\n         AIF   (&AA GT N'&SYSLIST).MEXIT                                00112\n&AB      SETA  &AA-1                                                    00113\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG    00114\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG    00115\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER                00116\n&AC      SETA  &AC+4096                                                 00117\n&AA      SETA  &AA+1                                                    00118\n         AGO   .LOOP                                                    00119\n.MEXIT   ANOP                                                           00120\n         AIF   (&PRORG).MEX2                                            00121\n         SPACE                                                          00122\n         $REGS                                                          00123\n         SPACE                                                          00124\n.MEX2    ANOP                                                           00125\n&AA      SETA  &LV+72                                                   00126\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'                    00127\n         MEXIT                                                          00128\n.MEND    ANOP                                                           00129\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'                  00130\n         AGO   .MEXIT                                                   00131\n.MERR    ANOP                                                           00132\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'                         00133\n         AGO   .MEXIT                                                   00134\n         MEND                                                           00135\n         MACRO                                                          00136\n&LABEL   $EPILOG &RC                                                    00137\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS                 00138\n         L     R13,4(R13)          GET BACK CHAIN POINTER               00139\n         L     R0,16(R13)          GET SAVEAREA LENGTH                  00140\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA                        00141\n         AIF   (T'&RC EQ 'O').SPEC                                      00142\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS                 00143\n         LA    R15,&RC             SET RETURN CODE                      00144\n         AGO   .MEND                                                    00145\n.SPEC    ANOP                                                           00146\n         L     R14,12(R13)         LOAD RETURN ADDRESS                  00147\n         LM    R0,R12,20(R13)      RESTORE CALLERS REGS                 00148\n.MEND    ANOP                                                           00149\n         BR    R14                 RETURN TO CALLER                     00150\n         MEND                                                           00151\n         MACRO                                                          00152\n&SYM     SYSPRINT &HEADER1=,&HEADER2=,&LINES=78,&DDNAME=SYSPRINT,      X00153\n               &LRECL=121                                               00154\n         AIF   (K'&SYM EQ 0).NOSYM                                      00155\n         AIF   (K'&SYM GT 5).ERRSYM                                     00156\n         AIF   (K'&DDNAME GT 8).DDNERR                                  00157\n         AIF   ('&LRECL' GT '133').ERRLEN                               00158\n         MNOTE *,'DCB = DDNAME=&DDNAME,LRECL=&LRECL,LINES=&LINES'       00159\n         AIF   ('&HEADER1' EQ '').HD1                                   00160\n         MNOTE *,'    &HEADER1 IS FIRST HEADER LINE'                    00161\n         AIF   ('&HEADER2' EQ '').HD2                                   00162\n         MNOTE *,'    &HEADER2 IS SECOND HEADER LINE'                   00163\n.HD2     MNOTE *,'    THE FIRST BYTE OF ANY BUFFER SPECIFIED WILL'      00164\n         MNOTE *,'    BE USED BY THIS ROUTINE FOR ASA CHARACTERS'       00165\n         MNOTE *,'    AND UNPREDICTABLE RESULTS MAY OCCUR IF USED.'     00166\n         CNOP  0,4                                                      00167\n&SYM     NOP   DRC&SYSNDX.C .          NOP BRANCH SET AFTER OPEN        00168\n         NOP   DRC&SYSNDX.D .          NOP BRANCH SET AFTER OPEN        00169\n         OI    &SYM.+5,C'0' .          SET NOP TO BRANCH                00170\n         OI    &SYM.+1,C'0' .          SET FIRST NOP TO BRANCH          00171\n         STM   14,2,DRC&SYSNDX.B .     SAVE USERS REGS                  00172\n         LA    1,DRC&SYSNDX.A .        LOAD ADDRESS OF OPEN LIST        00173\n         SVC   19 .                    ISSUE OPEN SVC                   00174\n         AIF   ('&HEADER1' EQ '').HD4                                   00175\nDRC&SYSNDX.F MVI &HEADER1,C'1' .       SET CARRIAGE CONTROL             00176\n         PUT   &SYM.DCB,&HEADER1                                        00177\n         AIF   ('&HEADER2' EQ '').HD5                                   00178\n         MVI   &HEADER2,C'-' .         SET TRIPLE SPACE AFTER SKIP      00179\n         PUT   &SYM.DCB,&HEADER2                                        00180\n         AGO   .HD5                                                     00181\n.HD4     L     15,DRC&SYSNDX.B+12 .    GET POINTER TO RECORD            00182\nDRC&SYSNDX.E MVI 0(15),C'1' .            SKIP TO ONE FIRST TIME         00183\n         LA    2,&LINES.+1 .           GET LINE COUNT                   00184\n         AGO   .HD55                                                    00185\n.HD5     L     15,DRC&SYSNDX.B+12 .    PICK UP DATA POINTER             00186\n         MVI   0(15),C'0' .            SET DOUBLE SPACE AFTER SK97      00187\n         LA    2,&LINES.+1 .           PICK UP LINE COUNT               00188\n.HD55    ANOP                                                           00189\nDRC&SYSNDX.G BCT 2,DRC&SYSNDX.H .      BR TO PRINT FOR NUMBER OF LINES  00190\n         AIF   ('&HEADER1' NE '').HD6                                   00191\n         B     DRC&SYSNDX.E .          START NEW PAGE                   00192\n         AGO   .P4                                                      00193\n.HD6     B     DRC&SYSNDX.F .          GO TO DO SKIP AND PRINT HDR      00194\n.P4      ANOP                                                           00195\nDRC&SYSNDX.H PUT &SYM.DCB,(15)                                          00196\n         ST    2,DRC&SYSNDX.J .        SAVE THE LINE COUNT              00197\n         LM    14,2,DRC&SYSNDX.B .     RESTORE USERS REGS               00198\n         MVI   0(1),C' ' .             PLACE BLANK INTO CARRIAGE CONTR  00199\n         MVC   1(&LRECL.-1,1),0(1) .   CLEAR THE BUFFER                 00200\n         BR    14 .                    RETURN                           00201\n SPACE                                                                  00202\nDRC&SYSNDX.D STM 14,2,DRC&SYSNDX.B .   SAVE REGS ALWAYS                 00203\n         AIF   ('&HEADER1' EQ '').P6                                    00204\n         B     DRC&SYSNDX.F .          GO TO HEADER ROUTINE             00205\n         AGO   .P5                                                      00206\n.P6     ANOP                                                            00207\n         L     15,DRC&SYSNDX.B+12 .    PICK UP POINTER TO DATA          00208\n         B     DRC&SYSNDX.E .          GO TO HEADER RTN                 00209\n.P5      ANOP                                                           00210\nDRC&SYSNDX.C STM 14,2,DRC&SYSNDX.B .   SAVE REGS ALWAYS                 00211\n         L     2,DRC&SYSNDX.J .        RESTORE THE LINE COUNTER         00212\n         L     15,DRC&SYSNDX.B+12 .    PICK UP POINTER TO DATA          00213\n         MVI   0(15),C' ' .            MOVE X'40' TO ASA                00214\n         B     DRC&SYSNDX.G .          GO TEST FOR LINE COUNT           00215\nDRC&SYSNDX.M CLC &SYM.DCB+62(2),=H'0' . IS BLOCK SIZE THERE             00216\n         BNE   DRC&SYSNDX.L .          IF SO SKIP                       00217\n         MVC   &SYM.DCB+62(2),=H'&LRECL'  .     MOVE IN DEFAULT SIZE    00218\nDRC&SYSNDX.L BR 14 .               RETURN TO OPEN                       00219\n SPACE                                                                  00220\nDRC&SYSNDX.B DC 5F'0' .                PRINT RTNS SAVE AREA             00221\nDRC&SYSNDX.J DC F'0' .                 SAVE FOR LINE COUNTER            00222\nDRC&SYSNDX.K DC X'85' .                EXIT LIST FOR OPEN               00223\n         DC    AL3(DRC&SYSNDX.M) .     POINTER TO THE EXIT ROUTINE      00224\nDRC&SYSNDX.A DC AL1(143) .             OPTION BYTE FOR OPEN             00225\n         DC    AL3(&SYM.DCB) .         DCB ADCON FOR OPEN               00226\n SPACE                                                                  00227\n&SYM.DCB DCB DDNAME=&DDNAME,LRECL=&LRECL,RECFM=FBA,EXLST=DRC&SYSNDX.K, X00228\n               DSORG=PS,MACRF=(PM)                                      00229\n         MEXIT                                                          00230\n.HD1     AIF   ('&HEADER2' EQ '').HD2                                   00231\n         MNOTE 8,'8,*** HEADER2 INVALID WITHOUT HEADER1 SPECIFIED'      00232\n         MEXIT                                                          00233\n.ERRLEN MNOTE 8,'8,*** LRECL TOO LARGE FOR SYSPRINT'                    00234\n         MEXIT                                                          00235\n.NOSYM  MNOTE 8,'8,*** SYSPRINT MACRO MUST HAVE A LABEL'                00236\n         MEXIT                                                          00237\n.ERRSYM MNOTE 8,'8,*** LABEL ON SYSPRINT MACRO MUST BE LESS THAN SIX'   00238\n         MEXIT                                                          00239\n.DDNERR MNOTE 8,'8 *** MAXIMUM DDNAME SIZE IS EIGHT CHARACTERS'         00240\n         MEXIT                                                          00241\n.BUFERR  MNOTE 8,'8,*** NO BUFFER SUPPLIED, EXECUTION IMPOSSIBLE'       00242\n.END     MEND                                                           00243\n         PRINT NOGEN                                                    00244\n*********************************************************************** 00245\n*                                                                       00246\n*        THIS PROGRAM REQUIRES SYS1.AMODGEN IN THE COMPILER SYSLIB      00247\n*                                                                       00248\n*        THIS PROGRAM EXTRACTS SMF TYPE 14 AND 15 RECORDS AND           00249\n*        PROVIDES A REPORT SUMMARIZING THEM.  ADDITIONALLY, IF A        00250\n*        POST PROCESSOR PROGRAM IS TO BE RUN, THE REFORMATTED DATA      00251\n*        IS LEFT IN THE FILE USED AS 'SORTIN'.  THE DATA WILL HAVE      00252\n*        BEEN RESTRUCTURED (AS DEFINED BY THE 'SORT RECORD DSECT').     00253\n*                                                                       00254\n*        IF THE 'MERG' OPTION IS USED, ALL DATASETS WITH LIKE NAMES     00255\n*        ARE MERGED INTO A SINGLE ENTRY (INCLUDING GDG DATASETS)        00256\n*        AND RECORDS WRITTEN BY THE SAME PROGRAM AT THE SAME            00257\n*        TIME WILL HAVE BEEN DECOLATED (IN CASES WHERE A FILE IS        00258\n*        OPENED MORE THAN ONCE WITHIN A JOB-STEP THE RESULTANT          00259\n*        SMF RECORDS ARE CUMMULATIVE).  THE RECORDS PRODUCED WILL       00260\n*        CONTAIN ACTUAL (TOTAL) EXCP COUNTS AS DEFINED BY THE 'OUTREC'  00261\n*        DSECT DESCRIPTION.                                             00262\n*                                                                       00263\n*        IF THE OPTIONAL EXIT-ROUTINE IS USED, THE CONTENTS OF THE      00264\n*        'SORTIN' FILE WHICH IS LEFT WILL BE DEPENDENT UPON THE         00265\n*        SELECTION DONE BY THAT ROUTINE.  PARMS MAY BE USED FREEFORM    00266\n*        (IN ANY ORDER) EXCEPT 'MOD-NAME' MUST BE LAST IF USED.         00267\n*                                                                       00268\n*        THE FOLLOWING LOCAL CONSTANTS MAY BE CHANGED TO YOUR           00269\n*        SPECIFICATIONS IF REQUIRED.  THEY ARE USED TO CALCULATE        00270\n*        A NEW BLOCKING FACTOR (AND SUBSEQUENT EXCP SAVINGS).           00271\n*                                                                       00272\n         LCLA      &TBLK,&DBLK                                          00273\n&TBLK    SETA      32767         SUGGESTED BLKSIZE FOR TAPE FILES       00274\n&DBLK    SETA      19069         SUGGESTED BLKSIZE FOR DISK FILES       00275\n*                                                                       00276\n*                                                                       00277\n*********************************************************************** 00278\n         EJECT                                                          00279\n*********************************************************************** 00280\n*                                                                       00281\n*        THE FOLLOWING ARE THE AVAILABLE 'PARM' OPTIONS:                00282\n*                                                                       00283\n*             NOPARM       WILL CAUSE 'ALL' OF THE INPUT TO BE          00284\n*                          REFORMATTED TO THE OUTPUT 'SORTIN' DD        00285\n*                          CARD ALLOWING THE USER SPECIALIZED           00286\n*                          SELECTION VIA A USER PROGRAM.  A REPORT      00287\n*                          CONTAINING THE FIRST 2500 ENTRIES WILL       00288\n*                          BE LISTED IF THE USER PROVIDES A SORT        00289\n*                          CONTROL STATEMENT IN 'SORTCNTL'.             00290\n*                                                                       00291\n*             PARM='MOD-NAME' WILL CAUSE 'ALL' OF THE INPUT TO BE       00292\n*                          REFORMATTED AND PASSED TO THE NAMED MODULE   00293\n*                          FOR SELECTION.  UPON RETURN, IF R15 = ZERO,  00294\n*                          THE RECORD IS PROCESSED AS BELOW.  IF        00295\n*                          NON-ZERO, THE RECORD IS IGNORED (SKIPPED).   00296\n*                          UPON ENTRY TO THE EXIT ROUTINE, REGISTER     00297\n*                          ONE WILL POINT TO THE COMPOSIT RECORD AND    00298\n*                          REGISTER ELEVEN WILL POINT TO THE INPUT SMF  00299\n*                          RECORD.  THE FORMAT OF THE COMPOSIT RECORD   00300\n*                          IS DESCRIBED BELOW.                          00301\n*             PARM='MERG'  WILL CAUSE THE MERGING OF RECORDS THAT       00302\n*                          HAVE DUPLICTE DATASET NAMES INCLUDING GDG'S  00303\n*                          ('SORTIN' WILL CONTAIN MERGED RECORDS).      00304\n*                          THE EXCP COUNT AND EXCP SAVINGS FIELDS       00305\n*                          WILL BE ADDED FORMING A CUMULATIVE COUNT     00306\n*                          IN EACH RECORD AND DUPLICATE RECORDS WILL    00307\n*                          BE SKIPPED.  THE CPU SAVINGS MAY THEN BE     00308\n*                          CALCULATED ON THE MERGED RECORD COUNTS.      00309\n*                                                                       00310\n*             PARM='DISK'  WILL CAUSE SELECTION OF DISK FILE RECORDS    00311\n*                          ONLY.                                        00312\n*             PARM='TAPE'  WILL CAUSE SELECTION OF TAPE FILE RECORDS    00313\n*                          ONLY.                                        00314\n*             PARM='TEMP'  WILL CAUSE SELECTION OF TEMPORARY DATASET    00315\n*                          RECORDS ONLY.                                00316\n*             PARM='PERM'  WILL CAUSE SELECTION OF PERMANENT DATASET    00317\n*                          RECORDS ONLY.                                00318\n*             PARM='FULL'  WILL CAUSE 'ALL' OF THE INPUT TO BE          00319\n*                          LISTED IN THE OPTIONAL REPORT (IF USED).     00320\n*                                                                       00321\n*        OPTIONALLY, A DD CARD DEFINED AS 'SORTCNTL' MAY BE USED TO     00322\n*        PROVIDE THE 'SYSIN' INPUT FOR SORT AND A REPORT CONTAINING     00323\n*        THE FIRST 2500 RECORDS WILL BE PRODUCED (UNLESS THE 'FULL'     00324\n*        PARM IS USED).                                                 00325\n*                                                                       00326\n*        IF THE 'SORTCNTL' DD CARD IS NOT PROVIDED, THEN THE 'SORTIN'   00327\n*        FILE WILL CONTAIN THE REFORMATTED RECORDS FOR SUBSEQUENT       00328\n*        PROCESSING BY A POST PROCESSOR OR USER MODULE AND NO REPORT    00329\n*        WILL BE GENERATED.                                             00330\n*                                                                       00331\n*********************************************************************** 00332\n         EJECT                                                          00333\n*********************************************************************** 00334\n*                                                                       00335\n*        THE FOLLOWING JCL MAY BE USED TO EXECUTE THIS ROUTINE          00336\n*        AFTER INSURING THAT IT FITS YOUR INSTALLATION.                 00337\n*                                                                       00338\n* //SMF1415 JOB CLASS=A,NOTIFY=TSO001,MSGCLASS=A                        00339\n* //SMF1415  EXEC PGM=SMF1415,PERFORM=1                                 00340\n* //SYSUT1 DD DISP=SHR,DSN=SMF.HIST.DATA        <=== INPUT SMF FILE     00341\n* //SYSPRINT DD SYSOUT=*                        <=== OUTPUT REPORT      00342\n* //*                                                                   00343\n* //SYSOUT   DD SYSOUT=*                        <=== SORT LISTING       00344\n* //SORTIN   DD UNIT=VIO,SPACE=(CYL,(45))       <=== WORK FILE FOR RPT  00345\n* //*                                  OR OUTPUT FILE FOR POST-PROCESS  00346\n* //SORTOUT  DD UNIT=VIO,SPACE=(CYL,(45))       <=== WORK FILE          00347\n* //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE          00348\n* //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE          00349\n* //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE          00350\n* //SORTWK04 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE          00351\n* //SORTWK05 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE          00352\n* //SORTWK06 DD UNIT=SYSDA,SPACE=(CYL,(10))     <=== WORK FILE          00353\n* //SYSIN    DD UNIT=VIO,SPACE=(CYL,(45))       <=== WORK FILE          00354\n* //SORTCNTL DD *    <=== TO PROVIDE REPORT LISTING SORTED AS BELOW     00355\n*  SORT FIELDS=(92,8,CH,D)                      <=== EXCP SAVINGS       00356\n*                                                                       00357\n*********************************************************************** 00358\n         EJECT                                                          00359\nSMF1415  $PROLOG R11,R12                                                00360\n*---------------------------------------------------------------------- 00361\n*                                                                       00362\n*                     INITIALIZATION                                    00363\n*                                                                       00364\n*---------------------------------------------------------------------- 00365\nENTRY010 DS    0H                                                       00366\n         OI    OPTFLG,TAPE+DISK+TEMP+PERM SET DEFAULTS                  00367\n         L     R1,0(R1)         GET PARM POINTER                        00368\n         LH    R2,0(R1)         GET PARM SIZE                           00369\n         LTR   R2,R2            ANY PARM GIVEN?                         00370\n         BZ    HHH010           NO, TAKE DEFAULT                        00371\nAAA010   CLC   2(4,R1),=C'FULL' REQUEST FOR 'ALL' OPTION?               00372\n         BNE   BBB010           NO, CHECK NEXT OPTION                   00373\n         OI    OPTFLG,ALL       SET OPTFLG                              00374\n         B     GGG010           CONTINUE                                00375\nBBB010   CLC   2(4,R1),=C'TAPE' ONLY TAPE DATASETS REQUESTED?           00376\n         BNE   CCC010           NO, CHECK NEXT OPTION                   00377\n         NI    OPTFLG,X'FF'-DISK RESET OPTFLG                           00378\n         B     GGG010           CONTINUE                                00379\nCCC010   CLC   2(4,R1),=C'DISK' ONLY DISK DATASETS REQUESTED?           00380\n         BNE   DDD010           NO, CHECK NEXT PARM                     00381\n         NI    OPTFLG,X'FF'-TAPE RESET OPTFLG                           00382\n         B     GGG010           CONTINUE                                00383\nDDD010   CLC   2(4,R1),=C'TEMP' ONLY TEMP DATASETS REQUESTED?           00384\n         BNE   EEE010           NO, CHECK NEXT OPTION                   00385\n         NI    OPTFLG,X'FF'-PERM RESET OPTFLG                           00386\n         B     GGG010           CONTINUE                                00387\nEEE010   CLC   2(4,R1),=C'PERM' ONLY PERM DATASETS REQUESTED?           00388\n         BNE   MMM010           NO, CHECK NEXT                          00389\n         NI    OPTFLG,X'FF'-TEMP RESET OPTFLG                           00390\n         B     GGG010           CONTINUE                                00391\nMMM010   CLC   2(4,R1),=C'MERG' MERGE DUPLICATE NAMES?                  00392\n         BNE   FFF010           NO, CHECK IF MODULE NAME                00393\n         OI    OPTFLG,MERGE     YES, SET OPTFLG                         00394\n         B     GGG010           CONTINUE                                00395\nFFF010   BCTR  R2,0             DECREMENT PARM SIZE (MODULE NAME)       00396\n         EX    R2,EXITMOVE      MOVE MODULE NAME                        00397\n         BLDL  0,BLDLLIST       DOES MODULE NAME EXIST?                 00398\n         LTR   R15,R15          CHECK RETCODE                           00399\n         BNZ   ERROR010         NO, INVALID PARM                        00400\n         LOAD  EPLOC=EXITNAME   YES, LOAD SAME                          00401\n         ST    R0,EXITRTN       SAVE ADDRESS OF MODULE                  00402\n         B     HHH010           BEGIN (MODULE NAME MUST BE LAST PARM)   00403\nGGG010   LA    R1,5(R1)         BUMP TO NEXT POSSIBLE PARM              00404\n         SH    R2,=H'5'         DECREMENT FOR PROCESSED PARM            00405\n         BP    AAA010           BRANCH IF MORE PARMS                    00406\n         B     HHH010           CONTINUE                                00407\nEXITMOVE MVC   EXITNAME(0),2(R1) MOVE MODULE NAME                       00408\nERROR010 WTO   'SMFPOST - INVALID PARM SPECIFIED',                     X00409\n               ROUTCDE=11       INFORM USER                             00410\n         OI    RETCODE+3,16     SET RETURN CODE                         00411\n         B     RETURN           RETURN TO THE SYSTEM                    00412\nHHH010   TM    OPTFLG,DISK+TAPE+ALL WAS ANYTHING SELECTED?              00413\n         BNZ   EXIT010          YES, PARMS DONE                         00414\n         TM    OPTFLG,TEMP+PERM WAS ANYTHING SELECTED?                  00415\n         BNZ   EXIT010          YES, LETS GO                            00416\n         WTO   'SMFPOST - INVALID PARM (TEMP AND PERM OR DISK AND TAPE X00417\n               ARE MUTUALLY EXCLUSIVE',ROUTCDE=11                       00418\n         B     RETURN            ALL DONE                               00419\nEXIT010  OPEN  (SYSUT1,,SORTIN,(OUTPUT),SYSIN,(OUTPUT)) OPEN FILES      00420\n         EJECT                                                          00421\n*---------------------------------------------------------------------- 00422\n*                                                                       00423\n*              GET A RECORD AND DETERMINE IF IT SHOULD BE PROCESSED     00424\n*                                                                       00425\n*---------------------------------------------------------------------- 00426\nENTRY020 DS    0H                                                       00427\n         USING SMFTYP14,R10                                             00428\n         GET   SYSUT1             GET AN SMF RECORD                     00429\n         LR    R10,R1             ADDR OF RECORD                        00430\n         MVI   OT$SMFTY,C'I'      SET DEFAULT TYPE                      00431\n         CLI   SMF14RTY,X'0E'     TYPE 14 RECORD ?                      00432\n         BE    AAA020             YES - CONTINUE                        00433\n         CLI   SMF14RTY,X'0F'     TYPE 15 RECORD ?                      00434\n         BNE   ENTRY020           NO - GET NEXT RECORD                  00435\n         MVI   OT$SMFTY,C'O'      SET RECORD TYPE                       00436\nAAA020   CLI   SMFUCBTY+2,X'20'   IS THIS DISK?                         00437\n         BNE   BBB020             NO CHECK FOR TAPE                     00438\n         TM    OPTFLG,DISK        YES, WAS DISK REQUESTED?              00439\n         BO    CCC020             YES, PROCESS DISK                     00440\n         B     ENTRY020           NO GET NEXT RECORD                    00441\nBBB020   CLI   SMFUCBTY+2,X'80'   IS THIS TAPE?                         00442\n         BNE   ENTRY020           NO, IGNORE NON-DISK/NON-TAPE          00443\n         TM    OPTFLG,TAPE        YES, WAS DISK REQUESTED?              00444\n         BNO   ENTRY020           NO GET NEXT RECORD                    00445\nCCC020   TM    SMF14RIN,SMF14TDS  IS THIS A TEMPORARY DATA SET ?        00446\n         BNO   DDD020             NO, CHECK PERM                        00447\n         TM    OPTFLG,TEMP        WERE TEMPORARIES REQUESTED?           00448\n         BNO   ENTRY020           NO, IGNORE IT                         00449\n         B     EXIT020            YES, PROCESS IT                       00450\nDDD020   TM    OPTFLG,PERM        WERE PERMANENTS REQUESTED?            00451\n         BNO   ENTRY020           NO, IGNORE IT                         00452\nEXIT020  EQU   *                                                        00453\n         MVC   OT$RSD,SMF14RSD    READER DATE                           00454\n         MVC   OT$RST,SMF14RST    READER TIME                           00455\n         MVC   OT$DATE,SMF14DTE   RECORD DATE                           00456\n         MVC   OT$TIME,SMF14TME   RECORD TIME                           00457\n         EJECT                                                          00458\n*---------------------------------------------------------------------- 00459\n*                                                                       00460\n*        JOBNAME, DDNAME, DS TYPE                                       00461\n*                                                                       00462\n*---------------------------------------------------------------------- 00463\n         MVC   OT$JOBNM,SMF14JBN  MOVE JOBNAME                          00464\n         MVC   OT$DDNAM,SMFTIOE5  AND DD NAME FOR THIS DSN              00465\n         MVC   OT$DSNAM,JFCBDSNM  DATA SET NAME                         00466\n         MVI   OT$TEMP,C' '       CLEAR FIELD                           00467\n         TM    SMF14RIN,SMF14TDS  IS THIS A TEMPORARY DATA SET ?        00468\n         BZ    AAA030             NO -                                  00469\n         MVI   OT$TEMP,C'T'       YES - SET INDICATOR                   00470\nAAA030   EQU   *                                                        00471\n         TM    SMF14RIN,SMF14VIO  IS THIS A VIO DATA SET ?              00472\n         BZ    EXIT030            NO -                                  00473\n         MVI   OT$TEMP,C'V'       YES - SET INDICATOR                   00474\nEXIT030  EQU   *                                                        00475\n         SPACE 3                                                        00476\n*---------------------------------------------------------------------- 00477\n*                                                                       00478\n*        DISP OF DATA SET                                               00479\n*                                                                       00480\n*---------------------------------------------------------------------- 00481\n         TM    JFCBIND2,JFCNEW    DISP=NEW ?                            00482\n         BNO   AAA040             NO -                                  00483\n         MVI   OT$DISP,C'N'       YES - MOVE IN 'NEW'                   00484\n         B     EXIT040                                                  00485\nAAA040   EQU   *                                                        00486\n         TM    JFCBIND2,JFCMOD    DISP=MOD ?                            00487\n         BNO   BBB040             NO -                                  00488\n         MVI   OT$DISP,C'M'       YES - MOVE IN 'MOD'                   00489\n         B     EXIT040                                                  00490\nBBB040   EQU   *                                                        00491\n         TM    JFCBIND2,JFCOLD    DISP=OLD ?                            00492\n         BNO   CCC040             NO -                                  00493\n         MVI   OT$DISP,C'O'       YES - MOVE IN 'OLD'                   00494\nCCC040   EQU   *                                                        00495\n         TM    JFCBIND2,JFCSHARE  DISP=SHR ?                            00496\n         BNO   EXIT040            NO -                                  00497\n         MVI   OT$DISP,C'S'       YES - MOVE IN 'SHR'                   00498\nEXIT040  EQU   *                                                        00499\n         EJECT                                                          00500\n*---------------------------------------------------------------------- 00501\n*                                                                       00502\n*                             DSORG                                     00503\n*                                                                       00504\n*---------------------------------------------------------------------- 00505\n         TM    JFCDSRG1,JFCORGIS  ISAM ?                                00506\n         BZ    AAA050             NO -                                  00507\n         MVC   OT$DSORG,=C'IS'    YES -                                 00508\n         B     EXIT050                                                  00509\nAAA050   EQU   *                                                        00510\n         TM    JFCDSRG1,JFCORGPS  SEQUENTIAL ?                          00511\n         BZ    BBB050             NO -                                  00512\n         MVC   OT$DSORG,=C'PS'    YES -                                 00513\n         B     EXIT050                                                  00514\nBBB050   EQU   *                                                        00515\n         TM    JFCDSRG1,JFCORGDA  BDAM ?                                00516\n         BZ    CCC050             NO -                                  00517\n         MVC   OT$DSORG,=C'DA'    YES -                                 00518\n         B     EXIT050                                                  00519\nCCC050   EQU   *                                                        00520\n         TM    JFCDSRG1,JFCORGCX  BTAM ?                                00521\n         BZ    DDD050             NO -                                  00522\n         MVC   OT$DSORG,=C'BT'    YES -                                 00523\n         B     EXIT050                                                  00524\nDDD050   EQU   *                                                        00525\n         TM    JFCDSRG1,JFCORGPO  PDS  ?                                00526\n         BZ    EEE050             NO -                                  00527\n         MVC   OT$DSORG,=C'PO'    YES -                                 00528\n         B     EXIT050                                                  00529\nEEE050   EQU   *                                                        00530\n         TM    JFCDSRG2,JFCORGTX  TCAM ?                                00531\n         BZ    FFF050             NO -                                  00532\n         MVC   OT$DSORG,=C'TC'    YES -                                 00533\n         B     EXIT050                                                  00534\nFFF050   EQU   *                                                        00535\n         TM    JFCDSRG2,JFCORGAM  VSAM ?                                00536\n         BZ    EXIT050            NO -                                  00537\n         MVC   OT$DSORG,=C'VS'    YES -                                 00538\nEXIT050  EQU   *                                                        00539\n         EJECT                                                          00540\n*---------------------------------------------------------------------- 00541\n*                                                                       00542\n*                  SPACE ALLOCATION                                     00543\n*                                                                       00544\n*---------------------------------------------------------------------- 00545\n         XR    R1,R1              CLEAR R1                              00546\n         ICM   R1,7,JFCBPQTY      PRIMARY ALLOCATION                    00547\n         CVD   R1,DBLWRD          CHANGE TO PACK DECIMAL                00548\n         MVC   WORK8,EDIT7        MOVE EDIT PATTERN  9999999            00549\n         ED    WORK8,DBLWRD+4     UNPK                                  00550\n         MVC   OT$PQTY,WORK8+1    CHANGE SIGN                           00551\n*                                                                       00552\n         XR    R1,R1              CLEAR R1                              00553\n         ICM   R1,7,JFCBSQTY      SECONDARY ALLOCATION                  00554\n         CVD   R1,DBLWRD          CHANGE TO PACK DECIMAL                00555\n         MVC   WORK8,EDIT7        MOVE EDIT PATTERN  9999999            00556\n         ED    WORK8,DBLWRD+4     UNPK                                  00557\n         MVC   OT$SQTY,WORK8+1    CHANGE SIGN                           00558\n*                                                                       00559\n         CLI   JFCBCTRI,JFCBABS   ABSOLUTE TRACK ADDRESS ?              00560\n         BNE   AAA070             NO -                                  00561\n         MVI   OT$ALOC,C'A'       YES -                                 00562\n         B     EXIT070                                                  00563\nAAA070   EQU   *                                                        00564\n         TM    JFCBCTRI,JFCBAVR   AVERAGE BLOCK ?                       00565\n         BZ    BBB070             NO -                                  00566\n         MVI   OT$ALOC,C'B'       YES -                                 00567\n         B     EXIT070                                                  00568\nBBB070   EQU   *                                                        00569\n         TM    JFCBCTRI,JFCBTRK   TRACK ALLOCATION ?                    00570\n         BZ    CCC070             NO -                                  00571\n         MVI   OT$ALOC,C'T'       YES -                                 00572\n         B     EXIT070                                                  00573\nCCC070   EQU   *                                                        00574\n         TM    JFCBCTRI,JFCBCYL   CYLINDER ALLOCATION ?                 00575\n         BZ    EXIT070            NO -                                  00576\n         MVI   OT$ALOC,C'C'       YES -                                 00577\n         B     EXIT070                                                  00578\nEXIT070  EQU   *                                                        00579\n         EJECT                                                          00580\n*---------------------------------------------------------------------- 00581\n*                                                                       00582\n*                  CHANNEL/UNIT ADDRESS                                 00583\n*                                                                       00584\n*---------------------------------------------------------------------- 00585\n         LA    R1,SMFUCBCH        CHAN/UNIT ADDR                        00586\n         ST    R1,HXDATA          STORE IN PARM LIST                    00587\n         MVC   HXLNGTH,=F'2'      LENGTH OF DATA TO BE TRANSLATED       00588\n         MVC   HXOUT,=A(DBLWRD)   ADDR OF AREA FOR XLATED DATA          00589\n         LA    R1,HXPARMS         PARMS FOR HEXLATE PROGRAM             00590\n         L     R15,HXPGM          EPA OF TRANSLATE ROUTINE              00591\n         BALR  R14,R15                                                  00592\n         LTR   R15,R15            ANY ERRORS ?                          00593\n         BNZ   ERROR1             YES - TO ERROR ROUTINE                00594\n         MVC   OT$CUA,DBLWRD+1    MOVE TO OUTPUT RECORD                 00595\n         SPACE 2                                                        00596\n*---------------------------------------------------------------------- 00597\n*                                                                       00598\n*                  RECORD FORMAT                                        00599\n*                                                                       00600\n*---------------------------------------------------------------------- 00601\n         MVC   OT$RECFM,=CL3' '   CLEAR RECFM FIELD                     00602\n         TM    JFCRECFM,JFCUND    UNDEFINED?                            00603\n         BNO   AAA080             NO                                    00604\n         MVI   OT$RECFM,C'U'      INDICATE RECFM                        00605\n         B     EXIT080            ALLDONE                               00606\nAAA080   TM    JFCRECFM,JFCFIX    FIXED?                                00607\n         BZ    BBB080             NO                                    00608\n         MVI   OT$RECFM,C'F'      INDICATE RECFM                        00609\n         TM    JFCRECFM,JFCRFB    BLOCKED?                              00610\n         BZ    CCC080             NO                                    00611\n         MVI   OT$RECFM+1,C'B'    INDICATE BLOCKED                      00612\n         TM    JFCRECFM,JFCRFS    SPANNED?                              00613\n         BZ    EXIT080            ALLDONE                               00614\n         MVI   OT$RECFM+2,C'S'    INDICATE SPANNED                      00615\n         B     EXIT080            ALLDONE                               00616\nBBB080   TM    JFCRECFM,JFCVAR    VARIABLE                              00617\n         BZ    EXIT080            ALLDONE                               00618\n         MVI   OT$RECFM,C'V'      INDICATE RECFM                        00619\n         TM    JFCRECFM,JFCRFB    BLOCKED?                              00620\n         BZ    CCC080             NO                                    00621\n         MVI   OT$RECFM+1,C'B'    INDICATE BLOCKED                      00622\n         TM    JFCRECFM,JFCRFS    SPANNED?                              00623\n         BZ    EXIT080            ALLDONE                               00624\n         MVI   OT$RECFM+2,C'S'    INDICATE SPANNED                      00625\n         B     EXIT080            ALLDONE                               00626\nCCC080   TM    JFCRECFM,JFCRFS    SPANNED?                              00627\n         BZ    EXIT080            ALLDONE                               00628\n         MVI   OT$RECFM+1,C'S'    INDICATE SPANNED                      00629\nEXIT080  EQU   *                                                        00630\n         EJECT                                                          00631\n*---------------------------------------------------------------------- 00632\n*                                                                       00633\n*                  VOL SER  AND UNIT TYPE                               00634\n*                                                                       00635\n*---------------------------------------------------------------------- 00636\n         MVC   OT$VOLSR,SMFSRTEV  VOLUME SERIAL NUMBER                  00637\n         LA    R7,UNITTBL         UNIT TYPE TABLE                       00638\n         LA    R8,8               TABLE ELEMENT LENGTH                  00639\n         LA    R9,UNTBLEND-8      END OF TABLE ADDRESS - 8              00640\nLOOP090  EQU   *                                                        00641\n         CLC   0(2,R7),SMFUCBTY+2 FIND UCBTYPE IN TABLE                 00642\n         BE    AAA090             FOUND                                 00643\n         BXLE  R7,R8,LOOP090      LOOP THRU TABLE                       00644\nAAA090   EQU   *                                                        00645\n         MVC   OT$DEVC,2(R7)      MOVE DEVICE DESCRIPTION TO OUT REC    00646\n         B     EXIT090                                                  00647\nUNITTBL  DS    0F                                                       00648\n         DC    X'2006',C'2305-1'                                        00649\n         DC    X'2007',C'2305-2'                                        00650\n         DC    X'2008',C'2314  '                                        00651\n         DC    X'2009',C'3330  '                                        00652\n         DC    X'200A',C'3340  '                                        00653\n         DC    X'200B',C'3350  '                                        00654\n         DC    X'200D',C'3330-1'                                        00655\n         DC    X'200E',C'3380  '                                        00656\n         DC    X'8001',C'2400  '                                        00657\n         DC    X'8003',C'3400  '                                        00658\nUNTBLEND DC    X'0000',C'XXXXXX'                                        00659\nEXIT090  EQU   *                                                        00660\n*---------------------------------------------------------------------- 00661\n*                                                                       00662\n*                  MACRO INSTRUCTION REFERENCE (MACRF)                  00663\n*                                                                       00664\n*---------------------------------------------------------------------- 00665\n         MVI   OT$MACRF,C' '      CLEAR OUTPUT RECORD FIELD             00666\n         TM    SMFDCBMF,X'80'     IS THIS EXCP ACCESS?                  00667\n         BZ    AAA095             NO, CONTINUE                          00668\n         MVI   OT$MACRF,C'E'      INDICATE MACRF                        00669\n         B     EXIT095            ALL DONE                              00670\nAAA095   TM    SMFDCBMF,X'40'     IS THIS GET ACCESS?                   00671\n         BZ    BBB095             NO, CONTINUE                          00672\n         MVI   OT$MACRF,C'G'      INDICATE MACRF                        00673\n         B     EXIT095            ALL DONE                              00674\nBBB095   TM    SMFDCBMF+1,X'40'   IS THIS PUT ACCESS?                   00675\n         BZ    CCC095             NO, CONTINUE                          00676\n         MVI   OT$MACRF,C'P'      INDICATE MACRF                        00677\n         B     EXIT095            ALL DONE                              00678\nCCC095   TM    SMFDCBMF,X'20'     IS THIS READ ACCESS?                  00679\n         BZ    DDD095             NO, CONTINUE                          00680\n         MVI   OT$MACRF,C'R'      INDICATE MACRF                        00681\n         B     EXIT095            ALL DONE                              00682\nDDD095   TM    SMFDCBMF+1,X'20'   IS THIS WRITE ACCESS?                 00683\n         BZ    EXIT095            NO, DON'T KNOW THEN                   00684\n         MVI   OT$MACRF,C'W'      INDICATE MACRF                        00685\nEXIT095  EQU   *                                                        00686\n         EJECT                                                          00687\n*---------------------------------------------------------------------- 00688\n*                                                                       00689\n*                  EXCP COUNTS, LRECL, BLKSIZE                          00690\n*                                                                       00691\n*---------------------------------------------------------------------- 00692\n         MVC   OT$EXCP(4),SMFEXCP MOVE EXCP COUNT TO OUTPUT RECORD      00693\n         MVC   OT$LRECL(2),JFCLRECL MOVE LRECL TO OUTPUT RECORD         00694\n         MVC   OT$BLKSI(2),JFCBLKSI MOVE BLKSIZE TO OUTPUT RECORD       00695\n         SPACE 2                                                        00696\n*---------------------------------------------------------------------- 00697\n*                                                                       00698\n*                 INVOKE THE USERS EXIT ROUTINE IF REQUESTED            00699\n*                                                                       00700\n*---------------------------------------------------------------------- 00701\n         ICM   R15,15,EXITRTN     SHOULD WE LINK TO EXIT ROUTINE?       00702\n         BZ    AAA100             NO, CONTINUE WITH DEFAULT             00703\n         LA    R1,OUTREC          POINT TO SORTED RECORD FOR EXITRTN    00704\n         BALR  R14,R15            YES, GIVE EXIT ROUTINE CONTROL        00705\n         LTR   R15,R15            PROCESS THIS RECORD?                  00706\n         BNZ   ENTRY020           NO, SKIP IT (R15 = NON-ZERO)          00707\nAAA100   PUT   SORTIN,OUTREC      WRITE RECORD FOR SORTING              00708\n         OI    SWITCH,DATASW      INDICATE DATA TO SORT                 00709\n         MVI   OUTREC,X'00'       CLEAR OUTREC                          00710\n         MVC   OUTREC+1(129),OUTREC FOR NEXT BUILD                      00711\n         B     ENTRY020           GET NEXT RECORD                       00712\n         SPACE 2                                                        00713\n*---------------------------------------------------------------------- 00714\n*                                                                       00715\n*            END OF DATA GENERATION, CALL SORT                          00716\n*                                                                       00717\n*---------------------------------------------------------------------- 00718\nENDGEN   PUT   SYSIN,SORTCARD     WRITE SORT CONTROL CARD               00719\n         CLOSE (SYSUT1,,SORTIN,,SYSIN) CLOSE FILES                      00720\n         TM    SWITCH,DATASW      ARE THERE ANY RECORDS TO SORT?        00721\n         BO    AAA110             YES, CONTINUE                         00722\n         WTO   'SMF1415 - NO 14/15 RECORDS FOUND IN INPUT',ROUTCDE=11   00723\n         OC    RETCODE,=F'12'     SET RETURN CODE                       00724\n         B     RETURN             EXIT                                  00725\n         CNOP  0,4                FULLWORD ALIGN                        00726\nAAA110   BAL   R1,BBB110          SET NULL PARM POINTER                 00727\n         DC    A(*+4),F'0'        PARM POINTER AND SIZE                 00728\nBBB110   LINK  EP=SORT            CALL SORT                             00729\n         LTR   R15,R15            VALID SORT?                           00730\n         BZ    EXIT110            YES, CONTINUE                         00731\n         ST    R15,RETCODE        SAVE SORT RETURN CODE                 00732\n         WTO   'SMF1415 - NON-ZERO SORT RETURN CODE, TEMINATE',        X00733\n               ROUTCDE=11                                               00734\n         B     RETURN                                                   00735\nEXIT110  EQU   *                                                        00736\n         EJECT                                                          00737\n*---------------------------------------------------------------------- 00738\n*                                                                       00739\n*            END OF SORT, BUILD COMPOSITE RECORDS BY DATASET            00740\n*                                                                       00741\n*---------------------------------------------------------------------- 00742\n         OPEN  (SORTOUT,(INPUT),SORTIN,(OUTPUT)) OPEN FILES             00743\n         GET   SORTOUT,OUTREC     GET A RECORD                          00744\nENTRY120 GET   SORTOUT,OUTREC2    GET A SECOND RECORD                   00745\n         TM    SWITCH,DECO        WAS LAST RECORD DECOLATED?            00746\n         BZ    AA0120             NO, CONTINUE                          00747\n         CLC   OUTREC(83),OUTREC2 IS THIS THE SAME DSN/JOB/ETC?         00748\n         BE    AA1120             YES, CONTINUE DECOLATING              00749\n         NI    SWITCH,X'FF'-DECO  RESET DECOLATE SWITCH                 00750\n         MVC   OUTREC(141),OUTREC2 IGNORE LAST JOB RECORD               00751\n         B     ENTRY120           GET NEXT RECORD                       00752\nAA0120   CLC   OUTREC(83),OUTREC2 IS THIS THE SAME DSN/JOB/ETC?         00753\n         BNE   AAA120             NO, NO CHECK FOR MERGE                00754\nAA1120   ICM   R1,15,OT$EXCP      PICK UP LARGEST EXCP COUNT            00755\n         ICM   R2,15,OUTREC2+OT$EXCP-OUTREC PICK UP SMALLER COUNT       00756\n         SR    R1,R2              DECREMENT TO FORM ACTUAL COUNT        00757\n         BM    AAA120             IF INVALID COUNT, IGNORE ADJUSTMENT   00758\n         STCM  R1,15,OT$EXCP      UPDATE WITH REAL EXCP COUNT           00759\n         OI    SWITCH,DECO        SET DECOLATION SWITCH                 00760\n         B     EXIT120            PROCESS DECOLATED RECORD              00761\nAAA120   TM    OPTFLG,MERGE       IS MERGE REQUESTED?                   00762\n         BZ    EXIT120            NO, CONTINUE                          00763\n         CLC   OUTREC(44),BLANKS  IS THIS A BLANK DDNAME (CONCAT)?      00764\n         BE    EXIT120            YES, NO MERGE                         00765\n         CLC   OUTREC(44),OUTREC2 IS THIS THE SAME DSNAME?              00766\n         BE    FFF120             YES, MERGE COUNTS                     00767\n         LA    R15,35             SET LOOP CONTROL                      00768\n         LA    R1,OUTREC+43       POINT TO END OF DSNAME                00769\nBBB120   CLI   0(R1),C' '         CHECK FOR NON-BLANK                   00770\n         BNE   CCC120             FOUND, CONTINE                        00771\n         BCTR  R1,0               DECREMENT                             00772\n         BCT   R15,BBB120         BACK FOR NEXT CHARACTER               00773\n         B     EXIT120            NOT A GDG, CONTINUE                   00774\nCCC120   S     R1,=F'8'           DECREMENT TO PERIOD OF GDG NAME       00775\n         CLC   0(2,R1),=C'.G'     IS THIS A GDG?                        00776\n         BNE   EXIT120            NO, PROCESS IT                        00777\n         CLC   6(3,R1),=C'V00'    IS THIS A GDG?                        00778\n         BNE   EXIT120            NO, PROCESS IT                        00779\n         LA    R14,35             SET LOOP CONTROL                      00780\n         LA    R2,OUTREC2+43      POINT TO END OF DSNAME                00781\nDDD120   CLI   0(R2),C' '         CHECK FOR NON-BLANK                   00782\n         BNE   EEE120             FOUND, CONTINE                        00783\n         BCTR  R2,0               DECREMENT                             00784\n         BCT   R14,DDD120         BACK FOR NEXT CHARACTER               00785\n         B     EXIT120            NOT A GDG, CONTINUE                   00786\nEEE120   S     R2,=F'8'           DECREMENT TO PERIOD OF GDG NAME       00787\n         CLC   0(2,R2),=C'.G'     IS THIS A GDG?                        00788\n         BNE   EXIT120            NO, PROCESS IT                        00789\n         CLC   6(3,R2),=C'V00'    IS THIS A GDG?                        00790\n         BNE   EXIT120            NO, PROCESS IT                        00791\n         CR    R14,R15            SAME SIZE DSN?                        00792\n         BNE   EXIT120            NO, PROCESS IT                        00793\n         LA    R15,OUTREC         POINT TO OUTREC                       00794\n         SR    R1,R15             GET SIZE OF QUALIFIER                 00795\n         EX    R1,GDGCOMP         COMPARE DSNAME QUALIFIERS             00796\n         BNE   EXIT120            DIFFERENT GDG'S PROCESS IT            00797\nFFF120   ICM   R1,15,OT$EXCP      PICK UP EXCP COUNT FROM 1ST RECORD    00798\n         ICM   R15,15,OUTREC2+OT$EXCP-OUTREC AND SECOND RECORD          00799\n         AR    R1,R15             ADD THEM                              00800\n         STCM  R1,15,OT$EXCP      INTO CURRENT RECORD                   00801\n         ICM   R1,15,OT$SAVE      PICK UP SAVE COUNT FROM 1ST RECORD    00802\n         ICM   R15,15,OUTREC2+OT$SAVE-OUTREC AND SECOND RECORD          00803\n         AR    R1,R15             ADD THEM                              00804\n         STCM  R1,15,OT$SAVE      INTO CURRENT RECORD                   00805\n         B     ENTRY120           GET NEXT RECORD                       00806\nGDGCOMP  CLC   OUTREC(0),OUTREC2  COMPARE GDG DSNAME QUALIFIERS         00807\nEXIT120  EQU   *                                                        00808\n         EJECT                                                          00809\n*---------------------------------------------------------------------- 00810\n*                                                                       00811\n*                 POTENTIAL EXCP COUNT SAVINGS                          00812\n*                                                                       00813\n*---------------------------------------------------------------------- 00814\n         PRINT GEN                                                      00815\n         ZAP   OT$SAVE,=P'0'      ASSUME NO SAVINGS                     00816\n         L     R1,=F'&TBLK'       ASSUME TAPE BLKSIZE                   00817\n         CLC   OT$DEVC(2),=C'24'  IS IT TAPE?                           00818\n         BE    AAA200             YES, BLKSIZE SET                      00819\n         CLC   OT$DEVC(2),=C'34'  IS IT TAPE?                           00820\n         BE    AAA200             YES, BLKSIZE SET                      00821\n         L     R1,=F'&DBLK'       ASSUME DISK DATASET                   00822\nAAA200   CLM   R1,3,OT$BLKSI      CAN WE HELP?                          00823\n         BNH   EXIT200            NO, IGNORE SAVINGS                    00824\n         XR    R2,R2              CLEAR FOR ICM                         00825\n         CLM   R2,3,OT$BLKSI      ZERO BLKSIZE?                         00826\n         BE    EXIT200            YES, CANNOT COMPUTE                   00827\n         ICM   R2,3,OT$LRECL      GET LRECL                             00828\n         BNZ   BBB200             IF VALID CONTINUE                     00829\n         ICM   R2,3,OT$BLKSI      NOT VALID, USE BLKSIZE                00830\nBBB200   XR    R0,R0              CLEAR FOR DIVIDE                      00831\n         DR    R0,R2              BY LRECL TO GET NEW BLK FACTOR        00832\n         XR    R0,R0              CLEAR REMAINDER FOR MULTIPLY          00833\n         MR    R0,R2              BY LRECL TO GET NEW BLKSIZE           00834\n         CLM   R1,3,OT$BLKSI      CAN WE HELP?                          00835\n         BNH   EXIT200            NO, IGNORE SAVINGS                    00836\n*        R1 NOW CONTAINS THE NEW SUGESTED BLOCK SIZE                    00837\n         XR    R3,R3              CLEAR FOR ICM                         00838\n         ICM   R3,3,OT$BLKSI      GET BLKSIZE REALLY USED               00839\n         ICM   R4,15,OT$EXCP      GET EXCP COUNT                        00840\n         BZ    EXIT200            ZERO EXCP COUNT, IGNORE SAVINGS       00841\n         XR    R2,R2              CLEAR FOR MULTIPLY                    00842\n         MR    R2,R4              GET NUMBER OF BYTES TRANSFERED        00843\n*        LTR   R1,R1     CHECK TO SEE IF ZERO  AXC-CBT                  00844\n*        BNZ   OKAYZ     NO ZERO A OKAY        AXC-CBT                  00845\n*        LA    R1,1      LETS MAKE IT A ONE    AXC-CBT                  00846\nOKAYZ    DR    R2,R1              DIVIDE BY NEW BLKSIZE TO GET EXCPS    00847\n         LTR   R3,R3              IS RESULT ZERO?                       00848\n         BNZ   CCC200             NO, BLKSIZE LESS THAN $ OF BYTES      00849\n         LA    R3,1               WHOLE FILE CAN BE DONE WITH ONE EXCP  00850\n*        R3 NOW CONTAINS THE NEW EXCP COUNT POSSIBLE                    00851\nCCC200   ICM   R2,15,OT$EXCP      GET ACTUAL EXCP COUNT                 00852\n         SR    R2,R3              SUBTRACT NEW FROM ACTUAL              00853\n*        R2 NOW CONTAINS THE EXCP COUNT SAVINGS (DIFFERENCE)            00854\n         CVD   R2,DBLWRD          CONVERT SAVE TO PACKED DECIMAL        00855\n         ZAP   OT$SAVE,DBLWRD     MOVE TO OUTPUT RECORD                 00856\nEXIT200  EQU   *                                                        00857\n         EJECT                                                          00858\n*---------------------------------------------------------------------- 00859\n*                                                                       00860\n*                 CONVERT EXCP COUNTS, LRECL, AND BLKSIZE               00861\n*                                                                       00862\n*---------------------------------------------------------------------- 00863\n         PRINT NOGEN                                                    00864\n         ICM   R1,15,OT$EXCP      EXCP COUNT (BINARY)                   00865\n         CVD   R1,DBLWRD          CONVERT EXCP TO PACKED DECIMAL        00866\n         ZAP   OT$EXCP,DBLWRD     MOVE TO OUT RECORD                    00867\n*                                                                       00868\n         XR    R1,R1              CLEAR R1                              00869\n         ICM   R1,3,OT$LRECL      LOGICAL RECORD LENGTH                 00870\n         CVD   R1,DBLWRD          CHANGE TO PACKED DECIMAL              00871\n         MVC   WORK6,EDIT5        EDIT PATTERN 99999                    00872\n         ED    WORK6,DBLWRD+5     UNPK                                  00873\n         MVC   OT$LRECL,WORK6+1   MOVE TO OUTPUT RECORD                 00874\n*                                                                       00875\n         XR    R1,R1              CLEAR R1                              00876\n         ICM   R1,3,OT$BLKSI      BLOCK SIZE                            00877\n         CVD   R1,DBLWRD          CHANGE TO PACKED DECIMAL              00878\n         MVC   WORK6,EDIT5        EDIT PATTERN 99999                    00879\n         ED    WORK6,DBLWRD+5     UNPK                                  00880\n         MVC   OT$BLKSI,WORK6+1   MOVE TO OUTPUT RECORD                 00881\n         SPACE 3                                                        00882\n         PUT   SORTIN,OUTREC      PUT OUT RECORD                        00883\n         MVC   OUTREC(141),OUTREC2 MOVE BUFFERED RECORD                 00884\n         B     ENTRY120           GET NEXT RECORD                       00885\n         EJECT                                                          00886\n*---------------------------------------------------------------------- 00887\n*                                                                       00888\n*        END OF DATA ON SORTOUT, PROVIDE SORTED REPORT IF REQUESTED     00889\n*                                                                       00890\n*---------------------------------------------------------------------- 00891\nENDBLD   TM    SWITCH,EOF1        IS THIS FIRST END OF FILE             00892\n         BO    EOJ                NO, ALL DONE                          00893\n         OI    SWITCH,EOF1        SET FIRST END OF FILE                 00894\n         CLOSE (SORTOUT,,SORTIN)  CLOSE FILES                           00895\n         OPEN  (SORTCNTL,(INPUT)) OPEN SORT CONTROL CARD FILE           00896\n         TM    SORTCNTL+48,X'10'  WAS OPEN OK?                          00897\n         BZ    RETURN             NO, ALL DONE                          00898\n         OPEN  (SYSIN,(OUTPUT))   OPEN SORT SYSIN FILE                  00899\nNEXTCNTL GET   SORTCNTL,SORTCARD  GET USER'S SORT CARD                  00900\n         PUT   SYSIN,SORTCARD     PROVIDE SAME FOR SORT                 00901\n         B     NEXTCNTL           GET NEXT CARD IF ANY                  00902\nENDCNTL  CLOSE (SYSIN,,SORTCNTL)  CLOSE FILES                           00903\n         B     BYPASS             BYPASS ALIGNMENT                      00904\n         DS    0F                 FULLWORD ALIGN                        00905\nBYPASS   BAL   R1,BBB220          SET NULL PARM POINTER                 00906\n         DC    A(*+4),H'0'        PARM POINTER AND SIZE                 00907\nBBB220   LINK  EP=SORT            CALL SORT                             00908\n         LTR   R15,R15            VALID SORT?                           00909\n         BZ    EXIT220            YES, CONTINUE                         00910\n         ST    R15,RETCODE        SAVE SORT RETURN CODE                 00911\n         WTO   'SMF1415 - NON-ZERO SORT RETURN CODE, TEMINATE',        X00912\n               ROUTCDE=11                                               00913\n         B     RETURN                                                   00914\nEXIT220  EQU   *                                                        00915\n         EJECT                                                          00916\n*---------------------------------------------------------------------- 00917\n*                                                                       00918\n*            END OF SORT, GENERATE OUTPUT REPORT                        00919\n*                                                                       00920\n*---------------------------------------------------------------------- 00921\n         OPEN  (SORTOUT,(INPUT))  OPEN JUST SORTED FILE                 00922\nAAA230   GET   SORTOUT,OUTREC     GET A RECORD                          00923\n         CLC   OT$BLKSI,=CL5'    0' ZERO BLOCK SIZE (EXCP)?             00924\n         BE    AAA230             YES, IGNORE                           00925\n         CLC   OT$SAVE,=X'000000000000500C'  CBT-AXC                    00926\n         BL    AAA230                        CBT-AXC                    00927\n         CLC   OT$SAVE,=X'000000000000000C'  CBT-AXC                    00928\n         BE    AAA230                        CBT-AXC                    00929\n         MVC   RP$DSNAM,OT$DSNAM  MOVE DATASET NAME                     00930\n         MVC   RP$DDNAM,OT$DDNAM  MOVE DD NAME                          00931\n         MVC   RP$JOBNM,OT$JOBNM  MOVE JOB NAME                         00932\n         MVC   RP$TEMP,OT$TEMP    MOVE INDICATOR 1                      00933\n         MVC   RP$DISP,OT$DISP    MOVE DISPOSITION                      00934\n         MVC   RP$MACRF,OT$MACRF  MOVE MACRF                            00935\n         MVC   RP$DSORG,OT$DSORG  MOVE DSORG                            00936\n         MVC   RP$RECFM,OT$RECFM  MOVE RECORD FORMAT                    00937\n         MVC   RP$BLKSI,OT$BLKSI  MOVE BLKSIZE                          00938\n         MVC   RP$LRECL,OT$LRECL  MOVE LRECL                            00939\n         MVC   RP$VOLSR,OT$VOLSR  MOVE VOLUME SER                       00940\n         MVC   RP$DEVC,OT$DEVC    MOVE DEVICE TYPE                      00941\n         MVC   RP$SMFTY,OT$SMFTY  MOVE RECORD TYPE                      00942\n         MVC   WORK10,EDIT9       MOVE EDIT MASK                        00943\n         ED    WORK10,OT$EXCP+3   UNPK ACTUAL EXCP'S                    00944\n         MVC   RP$EXCP,WORK10+1   MOVE TO OUTPUT RECORD                 00945\n         MVC   WORK10,EDIT9       MOVE EDIT MASK                        00946\n         ED    WORK10,OT$SAVE+3   UNPK POSSIBLE SAVED EXCP'S            00947\n         MVC   RP$SAVE,WORK10+1   MOVE TO OUTPUT RECORD                 00948\n         LA    R1,RPTREC          POINT TO DETAIL RECORD                00949\n         BAL   R14,RPT            WRITE RECORD OUT                      00950\n         AP    TOTEXCPS,OT$EXCP   ADD TO TOTAL EXCPS                    00951\n         AP    TOTSAVES,OT$SAVE   ADD TO TOTAL SAVINGS                  00952\n         L     R2,LCNT            GET LINE COUNT                        00953\n         LA    R2,1(R2)           BUMP LINE COUNT                       00954\n         CH    R2,=H'76'          AT THE LIMIT                          00955\n         BNE   NOSUM              NO, CONTINUE                          00956\n         LA    R1,BLANKS          POINT TO BLANK LINE                   00957\n         BAL   R14,RPT            PRINT IT                              00958\n         MVC   WORK10,EDIT9       MOVE EDIT MASK                        00959\n         ED    WORK10,TOTEXCPS+3  MAKE PRINTABLE                        00960\n         MVC   SUMEXCPS,WORK10+1  MOVE TO OUTPUT RECORD                 00961\n         MVC   WORK10,EDIT9       MOVE EDIT MASK                        00962\n         ED    WORK10,TOTSAVES+3  MAKE PRINTABLE                        00963\n         MVC   SUMSAVES,WORK10+1  MOVE TO OUTPUT RECORD                 00964\n         LA    R1,SUMMARY         POINT TO SUMMARY RECORD               00965\n         SR    R2,R2              CLEAR LINE COUNT                      00966\n         BAL   R14,RPT            WRITE SUMMARY RECORD                  00967\n         TM    OPTFLG,ALL         ALL REQUESTED?                        00968\n         BO    NOSUM              NO, IGNORE COUNTING PAGES             00969\n         L     R15,COUNT          GET PAGE COUNT                        00970\n         C     R15,=F'50'         ARE WE AT OUR LIMIT?                  00971\n         BH    EOJ                YES, END OF REPORT                    00972\n         LA    R15,1(R15)         NO, BUMP COUNT                        00973\n         ST    R15,COUNT          SAVE COUNT                            00974\nNOSUM    ST    R2,LCNT            SAVE UPDATED LINE COUNT               00975\n         B     AAA230             GET NEXT RECORD                       00976\n         EJECT                                                          00977\n*---------------------------------------------------------------------- 00978\n*                                                                       00979\n*            EOJ AND CLEANUP                                            00980\n*                                                                       00981\n*---------------------------------------------------------------------- 00982\nEOJ      DS    0H                                                       00983\n         CLOSE (SORTOUT,,RPTDCB)                                        00984\nRETURN   EQU   *                                                        00985\n         L     R15,RETCODE        LOAD RETURN CODE                      00986\n         $EPILOG ,                RETURN                                00987\n         SPACE 5                                                        00988\n*---------------------------------------------------------------------- 00989\n*                                                                       00990\n*            ERROR ROUTINES                                             00991\n*                                                                       00992\n*---------------------------------------------------------------------- 00993\nERROR1   DS    0H                 INVALID START DATE                    00994\n         OC    RETCODE,=F'4'      SET RETURN CODE OF 4                  00995\n         WTO   'SMF1415 - BAD RETURN CODE FROM HEXLATE',ROUTCDE=11      00996\n         ABEND 1,DUMP                                                   00997\nEXITIN   CLC   SORTIN+62(2),=H'0' ANY BLKSIZE SPECIFIED?                00998\n         BNER  R14                YES, RETURN                           00999\n         MVC   SORTIN+62(2),=H'6063' NO, BLOCK BY 43                    01000\n         BR    R14                RETURN                                01001\n         EJECT                                                          01002\n*---------------------------------------------------------------------- 01003\n*                                                                       01004\n*            PROGRAM CONSTANTS                                          01005\n*                                                                       01006\n*---------------------------------------------------------------------- 01007\n********                                                                01008\nHEAD     DS   0CL133                                                    01009\nCC       DC   C' '                                                      01010\n         DC   CL44'---------- DSNAME ----------',C' ' DSNAME            01011\n         DC   CL8'DDNAME',C' '                                          01012\n         DC   CL8'JOBNAME',C' '                                         01013\n         DC   CL6'DEVTYP',C' '          DEVICE TYPE                     01014\n         DC   CL6'VOLSER',C' '          VOL SERIAL NUMBER               01015\n         DC   CL2'IO',C' '              SMF RECORD TYPE I OR O          01016\n         DC   CL2'PT',C' '              TYPE OF DATASET                 01017\n         DC   CL3'DSP',C' '             DISPOSITION OF DATA SET         01018\n         DC   CL3'DSO',C' '             DATA SET ORGANIZATION           01019\n         DC   CL3'MAC',C' '             MACRF                           01020\n         DC   CL3'FMT',C' '             RECFM                           01021\n         DC   CL5'LRECL',C' '           LRECL                           01022\n         DC   CL5'BLOCK',C' '           BLKSIZE                         01023\n         DC   CL9'ACT-EXCPS',C' '       ACTUAL EXCP COUNTS              01024\n         DC   CL9'POSS-SAVE',C' '       POSSIBLE EXCP SAVINGS           01025\n         DC   CL10' '                                                   01026\n********                                                                01027\nRPTREC   DS   0CL133                                                    01028\n         DC   C' '                  ASA CHAR                            01029\nRP$DSNAM DC   CL44' ',C' '          DATA SET NAME                       01030\nRP$DDNAM DC   CL8' ',C' '           DDNAME                              01031\nRP$JOBNM DC   CL8' ',C' '           JOB NAME                            01032\nRP$DEVC  DC   CL6' ',C' '           DEVICE TYPE                         01033\nRP$VOLSR DC   CL6' ',C' '           VOLUME SERIAL NUMBER                01034\nRP$SMFTY DC   CL1' ',CL2' '         SMF RECORD TYPE I OR O              01035\nRP$TEMP  DC   CL1' ',CL3' '         DATASET TYPE                        01036\nRP$DISP  DC   CL1' ',CL2' '         DISPOSITION OF DATA SET             01037\nRP$DSORG DC   CL2' ',CL3' '         DATA SET ORGANIZATION               01038\nRP$MACRF DC   CL1' ',CL2' '         MACRF                               01039\nRP$RECFM DC   CL3' ',C' '           RECFM                               01040\nRP$LRECL DC   CL5' ',C' '           LRECL                               01041\nRP$BLKSI DC   CL5' ',C' '           BLKSIZE                             01042\nRP$EXCP  DC   CL9' ',C' '           EXCP COUNT                          01043\nRP$SAVE  DC   CL9' ',C' '           SAVE COUNT                          01044\n         DC   CL10' '                                                   01045\n********                                                                01046\nSWITCH   DC    X'00'                                                    01047\nDATASW   EQU   X'01'         DATA FOUND INDICATOR                       01048\nEOF1     EQU   X'02'         FIRST END OF FILE SW                       01049\nDECO     EQU   X'04'         DECOLATION SWITCH                          01050\n********                                                                01051\nOPTFLG   DC    X'00'                                                    01052\nALL      EQU   X'01'         ALL DATA REQUESTED                         01053\nDISK     EQU   X'02'         ONLY DISK REQUESTED                        01054\nTAPE     EQU   X'04'         ONLY TAPE REQUESTED                        01055\nTEMP     EQU   X'08'         ONLY TEMP DATASETS                         01056\nPERM     EQU   X'10'         ONLY PERM DATASETS                         01057\nMERGE    EQU   X'20'         MERGE DUPLICATE DATASETS                   01058\n********                                                                01059\nDBLWRD   DC    D'0'                                                     01060\nTOTEXCPS DC    PL8'0'                                                   01061\nTOTSAVES DC    PL8'0'                                                   01062\nWORK8    DC    CL8' '                                                   01063\nWORK6    DC    CL6' '                                                   01064\nWORK10   DC    CL10' '                                                  01065\nEDIT7    DC    X'4020202020202120'                                      01066\nEDIT5    DC    X'402020202120'                                          01067\nEDIT9    DC    X'40202020202020202120'                                  01068\nHXPGM    DC    V(HEXLATE)                                               01069\nLSTIN    DC    X'85',AL3(EXITIN)                                        01070\nEXITRTN  DC    F'0'                                                     01071\nRETCODE  DC    F'0'                                                     01072\nCOUNT    DC    F'0'                                                     01073\nLCNT     DC    F'0'                                                     01074\nBLDLLIST DC    H'1',H'12'      NUMBER AND SIZE OF ENTRIES               01075\nEXITNAME DC    CL8' '          NAME OF MODULE                           01076\nTTRC     DC    CL12' '         TTRC AREA                                01077\nTIME     DS    0CL8                                                     01078\nHRS      DC    CL2' '                                                   01079\nMIN      DC    CL2' '                                                   01080\nSEC      DC    CL2' '                                                   01081\nTH       DC    CL2' '                                                   01082\nSMFTIME  DC    F'0'                                                     01083\nHXPARMS  DS    0F                                                       01084\nHXLNGTH  DC    F'0'                                                     01085\nHXDATA   DC    A(0)                                                     01086\nHXOUT    DC    A(0)                                                     01087\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=ENDGEN,BFTEK=A     01088\nSORTIN   DCB   DDNAME=SORTIN,DSORG=PS,MACRF=PM,LRECL=141,EXLST=LSTIN,  X01089\n               RECFM=FB                                                 01090\nSORTOUT  DCB   DDNAME=SORTOUT,DSORG=PS,MACRF=GM,EODAD=ENDBLD,RECFM=FB, X01091\n               LRECL=141                                                01092\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80,       X01093\n               BLKSIZE=80                                               01094\nSORTCNTL DCB   DDNAME=SORTCNTL,DSORG=PS,MACRF=GM,RECFM=FB,LRECL=80,    X01095\n               BLKSIZE=80,EODAD=ENDCNTL                                 01096\nRPT      SYSPRINT DDNAME=SYSPRINT,HEADER1=HEAD,LRECL=133                01097\nBLANKS   DC    CL133' '                                                 01098\nSUMMARY  DS    0CL133                                                   01099\n         DC    CL103' '                                                 01100\nSUMEXCPS DC    CL9' ',C' '                                              01101\nSUMSAVES DC    CL9' ',C' '                                              01102\n         DC    CL9' ',CL10' '                                           01103\nSORTCARD DC    CL80' SORT FIELDS=(1,91,CH,D) <=== INTERIM SORT'         01104\nOUTREC2  DC    CL141' '                                                 01105\n         LTORG                                                          01106\n         EJECT                                                          01107\n*---------------------------------------------------------------------- 01108\n*                                                                       01109\n*            SORT RECORD DSECT                                          01110\n*                                                                       01111\n*---------------------------------------------------------------------- 01112\nOUTREC   EQU  *                                                         01113\nOT$DSNAM DC   CL44' '        DATA SET NAME                              01114\nOT$VOLSR DC   CL6' '         VOLUME SERIAL NUMBER                       01115\nOT$DEVC  DC   CL6' '         DEVICE TYPE                                01116\nOT$CUA   DC   CL3' '         CHANNEL/UNIT ADDRESS                       01117\nOT$DDNAM DC   CL8' '         DDNAME                                     01118\nOT$JOBNM DC   CL8' '         JOB NAME                                   01119\nOT$RSD   DC   PL4'0'         DATE READER RECOGNIZED JOB CARD (PACKED    01120\n*                            AND JULIAN 00YYDDD+)                       01121\nOT$RST   DC   XL4'00'        TIME READER RECOGNIZED JOB CARD (IN BINARY 01122\n*                            AND IN HUNDREDTHS OF A SECOND)             01123\nOT$EXCP  DC   PL8'0'         EXCP COUNT                                 01124\nOT$SAVE  DC   PL8'0'         POTENTIAL SAVINGS IN EXCP COUNTS           01125\nOT$SMFTY DC   CL1' '         SMF RECORD TYPE (I=INPUT,O=OUTPUT)         01126\nOT$TEMP  DC   CL1' '         DATASET TYPE (T=TEMP,V=VIO)                01127\nOT$DISP  DC   CL1' '         DISPOSITION OF DATA SET (N=NEW,M=MOD,      01128\n*                            O=OLD,S=SHR)                               01129\nOT$MACRF DC   CL1' '         MACRF (E=EXCP,G=GET,P=PUT,R=READ,W=WRITE)  01130\nOT$RECFM DC   CL3' '         RECORD FORMAT (U=UNDEFINED,F=FIXED,        01131\n*                            B=BLOCKED,S=SPANNED,V=VARIABLE)            01132\nOT$DSORG DC   CL2' '         DATA SET ORGANIZATION (IS=ISAM,            01133\n*                            PS=PHYSICAL SEQUENTIAL,DA=BDAM,            01134\n*                            BT=BTAM,PO=PARTITIONED,TC=TCAM,            01135\n*                            VS=VSAM)                                   01136\nOT$BLKSI DC   CL5' '         BLKSIZE                                    01137\nOT$LRECL DC   CL5' '         LRECL                                      01138\nOT$PQTY  DC   CL7' '         PRIMARY ALLOCATION QUANTITY                01139\nOT$SQTY  DC   CL7' '         SECONDARY ALLOCATION QUANTITY              01140\nOT$ALOC  DC   CL1' '         ALLOCATION UNIT (T=TRACK,C=CYLINDER,       01141\n*                            A=ABSOLUTE TRACK,B=AVERAGE BLOCK)          01142\nOT$DATE  DC   PL4'0'         DATE RECORD TO SMF BUFFER (PACKED AND      01143\n*                            JULIAN 00YYDDD+)                           01144\nOT$TIME  DC   XL4'00'        TIME RECORD TO SMF BUFFER (IN BINARY       01145\n*                            AND IN HUNDREDTHS OF A SECOND)             01146\nOT$RECSZ EQU  *-OUTREC       SIZE OF SORT RECORD                        01147\n         EJECT                                                          01148\n*---------------------------------------------------------------------- 01149\n*                                                                       01150\n*        HEX TO CHARACTER TRANSLATION SUBROUTINE                        01151\n*                                                                       01152\n*        R1 ===>  DS   F     LENGTH OF DATA TO BE TRANSLATED            01153\n*                 DS   F     DATA TO BE TRANSLATED                      01154\n*                 DS   F     AREA FOR TRANSLATED OUTPUT                 01155\n*                                                                       01156\n*---------------------------------------------------------------------- 01157\nHEXLATE  $PROLOG LV=20                                                  01158\nHXENT010 DS    0H                                                       01159\n         LR    R11,R1          SAVE PARM ADDR                           01160\n         USING PARMS,R11       DSECT FOR PARMS                          01161\n         L     R2,LNGTH        DATA LENGTH                              01162\n         LR    R0,R2           PUT IN R0                                01163\n         GETMAIN R,LV=(0)      GET A WORKAREA                           01164\n         ST    R1,72(R13)      SAVE ADDR OF FIRST WORKAREA              01165\n         LR    R0,R2           PUT IN R0                                01166\n         GETMAIN R,LV=(0)      GET A WORKAREA                           01167\n         ST    R1,76(R13)      SAVE ADDR OF SECOND WORKAREA             01168\n         L     R0,72(R13)      1ST WORKAREA ADDR                        01169\n         L     R14,INPUT       INPUT DATA                               01170\n         L     R1,LNGTH        DATA LENGTH                              01171\n         L     R15,LNGTH                                                01172\n         MVCL  R0,R14          MOVE DATA TO WORKAREA                    01173\n         L     R0,76(R13)      2ND WORKAREA ADDR                        01174\n         L     R14,INPUT       INPUT DATA                               01175\n         L     R1,LNGTH        DATA LNGTH                               01176\n         L     R15,LNGTH                                                01177\n         MVCL  R0,R14          MOVE DATA TO WORKAREA                    01178\nHXEX010  EQU   *                                                        01179\n         EJECT                                                          01180\n*---------------------------------------------------------------------- 01181\n*                                                                       01182\n*        TRANSLATE DATA TO PRINTABLE HEX                                01183\n*                                                                       01184\n*---------------------------------------------------------------------- 01185\n         L     R3,LNGTH        DATA LENGTH                              01186\n         L     R7,72(R13)      1ST WORKAREA                             01187\n         L     R8,76(R13)      2ND WORKAREA                             01188\nHXLP020  EQU   *                                                        01189\n         C     R3,=F'256'      DATA LENGTH GREATER THAN 256 ?           01190\n         BL    HXB020          NO - 1 TRANSLATE WILL DO IT              01191\n         LA    R9,TABLE1       YES - TRANSLATE 256 AT A TIME            01192\n         XR    R6,R6           CLEAR R6                                 01193\n         IC    R6,=X'FF'       SET LENGTH CODE FOR EX TO 255            01194\n         EX    R6,XLATE1       TRANSLATE 1ST HALF OF EACH BYTE          01195\n         LA    R9,TABLE2                                                01196\n         EX    R6,XLATE2       TRANSLATE 2ND HALF OF EACH BYTE          01197\n         LA    R7,256(R7)      BUMP WORKAREA1                           01198\n         LA    R8,256(R8)      BUMP WORKAREA2                           01199\n         S     R3,=F'256'      DECR REMAINING DATA LENGTH               01200\n         B     HXLP020         CONTINUE TRANSLATING ALL DATA            01201\nHXB020   EQU   *                                                        01202\n         CH    R3,=H'0'        ANY DATA LEFT ??                         01203\n         BE    HXEX020         NO - TRANSLATE DONE                      01204\nHXC020   EQU   *                                                        01205\n         SH    R3,=H'1'        YES - DECR FOR EX INSTRUCTION            01206\n         LA    R9,TABLE1       TRANSLATE                                01207\n         EX    R3,XLATE1       *        REMAINING                       01208\n         LA    R9,TABLE2       *               DATA                     01209\n         EX    R3,XLATE2                                                01210\nHXEX020  EQU   *                                                        01211\n         B     HXENT030                                                 01212\n*---------------------------------------------------------------------- 01213\nXLATE1   TR    0(0,R7),0(R9)                                            01214\nXLATE2   TR    0(0,R8),0(R9)                                            01215\n*---------------------------------------------------------------------- 01216\n         EJECT                                                          01217\n*---------------------------------------------------------------------- 01218\n*                                                                       01219\n*        PUT DATA BACK TOGETHER IN ONE LINE                             01220\n*                                                                       01221\n*---------------------------------------------------------------------- 01222\nHXENT030 EQU   *                                                        01223\n         L     R3,LNGTH        DATA LENGTH                              01224\n         L     R7,72(R13)      ODD BYTES (FROM 1ST HALF OF EACH BYTE)   01225\n         L     R8,76(R13)      EVEN BYTES (FROM 2ND HALF OF EACH BYTE)  01226\n         L     R9,OUTPUT       OUTPUT AREA                              01227\nHXLP030  EQU   *                                                        01228\n         MVC   0(1,R9),0(R7)   MOVE 1ST HALF                            01229\n         MVC   1(1,R9),0(R8)   MOVE 2ND HALF                            01230\n         LA    R7,1(R7)        BUMP TO NEXT BYTE                        01231\n         LA    R8,1(R8)        BUMP TO NEXT BYTE                        01232\n         LA    R9,2(R9)        BUMP                                     01233\n         BCT   R3,HXLP030      MOVE FOR LENGTH OF DATA                  01234\nHXEX030  EQU   *                                                        01235\n         EJECT                                                          01236\n*---------------------------------------------------------------------- 01237\n*                                                                       01238\n*        CLEANUP AND RETURN                                             01239\n*                                                                       01240\n*---------------------------------------------------------------------- 01241\n         L     R0,LNGTH        LENGTH OF WORKAREA                       01242\n         L     R1,72(R13)      ADDR OF WORKAREA 1                       01243\n         FREEMAIN R,LV=(0),A=(1)                                        01244\n         L     R0,LNGTH        LENGTH OF WORKAREA                       01245\n         L     R1,76(R13)      ADDR OF WORKAREA 2                       01246\n         FREEMAIN R,LV=(0),A=(1)                                        01247\n         $EPILOG 0                                                      01248\n         EJECT                                                          01249\n*---------------------------------------------------------------------- 01250\nTABLE1   DS    0CL256                                                   01251\n         DC    16C'0'                                                   01252\n         DC    16C'1'                                                   01253\n         DC    16C'2'                                                   01254\n         DC    16C'3'                                                   01255\n         DC    16C'4'                                                   01256\n         DC    16C'5'                                                   01257\n         DC    16C'6'                                                   01258\n         DC    16C'7'                                                   01259\n         DC    16C'8'                                                   01260\n         DC    16C'9'                                                   01261\n         DC    16C'A'                                                   01262\n         DC    16C'B'                                                   01263\n         DC    16C'C'                                                   01264\n         DC    16C'D'                                                   01265\n         DC    16C'E'                                                   01266\n         DC    16C'F'                                                   01267\n*---------------------------------------------------------------------- 01268\nTABLE2   DS    0CL256                                                   01269\n         DC    16C'0123456789ABCDEF'                                    01270\n*---------------------------------------------------------------------- 01271\n         LTORG                                                          01272\nPARMS    DSECT                                                          01273\nLNGTH    DS    F                                                        01274\nINPUT    DS    F                                                        01275\nOUTPUT   DS    F                                                        01276\n         PRINT NOGEN                                                    01277\nSMFTYP14 DSECT                                                          01278\n         IFASMFR 14                                                     01279\n         ORG   SMFJFCB1                                                 01280\n         IEFJFCBN  LIST=YES                                             01281\n         ORG                                                            01282\n#PAN$AUD CSECT                                                          012824\n$PAN#AUD DC    CL21'002CBT918    12/07/82'                              012825\n         END                                                            01283\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT319/FILE319.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT319", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}