*---------------------------------------------------------------------*
*                                                                     *
*         Format SMF record type 64                                   *
*                                                                     *
*         VSAM component or cluster status                            *
*                                                                     *
*   At entry                                                          *
*       R15    program base address                                   *
*       R14    return address                                         *
*       R9     OSSPFD address                                         *
*       R8     VDATA buffer address                                   *
*       R7     SMF record address +4 (does not include length)        *
*                                                                     *
* ------------------------------------------------------------------- *
SMF0064  CSECT
SMF0064  AMODE 31
SMF0064  RMODE ANY
         USING SESSION,R11
         USING SMF0064,R15
         B     INIT0000
MODID    DC    CL8'SMF0064'
         DC    CL8'&SYSDATE'
         DC    CL7'&SYSTIME'
INIT0000 DS    0H
         USING OSCOMM,R12            DEFINE COMMON AREA BASE
         STM   R14,R12,12(R13)       SAVE REGS
         LR    R10,R15               COPY ENTRY POINT
         USING SMF0064,R10           DEFINE BASE
         DROP  R15
         L     R1,SESS_DXD_ADDR
         A     R1,DXDSTART
         ST    R13,4(R1)             SAVE R13
         ST    R1,8(R13)             CHAIN SAVE AREA
         LR    R13,R1                COPY WORK AREA ADDRESS
         USING WK0064,R13            DEFINE BASE
         MVC   DXD_CSECT,MODID
         USING OSSPFD,R9             DEFINE BASE
         ITRACE ID=ENTRY
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         USING SMF64FLG,R7
         MVC   0(MSG_01_L,R8),MSG_01 COPY
         USING MSG_01,R8
         MVC   MSG_01_JBN,SMF64JBN
         MVC   MSG_01_UIF,SMF64UIF
         DROP  R8
         BCTR  R6,0

         A     R8,SPF_VWIDTH         NEXT LINE
         MVC   0(MSG_02_L,R8),MSG_02
         USING MSG_02,R8
         MVC   MSG_02_CNM,SMF64CNM   COPY CATALOG NAME
         DROP  R8
         BCTR  R6,0

         A     R8,SPF_VWIDTH         NEXT LINE
         MVC   0(MSG_03_L,R8),MSG_03
         USING MSG_03,R8
         MVC   MSG_03_DNM,SMF64DNM   COPY COMPONENT NAME
         TM    SMF64DTY,X'80'        DATA COMPONENT?
         BO    MAIN0010
         TM    SMF64DTY,X'40'        INDEX COMPONENT?
         BO    MAIN0020
         MVC   MSG_03_DTY,UNKNOWN
         B     MAIN0030
MAIN0010 DS    0H
         MVC   MSG_03_DTY,DATA       INDICATE DATA COMPONENT
         B     MAIN0030
MAIN0020 DS    0H
         MVC   MSG_03_DTY,INDEX      INDICATE INDEX COMPONENT
MAIN0030 DS    0H
         DROP  R8
         BCTR  R6,0

         A     R8,SPF_VWIDTH         NEXT LINE
         MVC   0(MSG_04_L,R8),MSG_04
         USING MSG_04,R8
         TM    SMF64RIN,X'80'        COMPONENT CLOSED?
         BO    MAIN0040              YES
         TM    SMF64RIN,X'40'        VOLUME SWITCHED?
         BO    MAIN0050              YES
         TM    SMF64RIN,X'20'        NO SPACE AVAILABLE?
         BO    MAIN0060              YES
         TM    SMF64RIN,X'10'        CATALOG OR CRA RECORD?
         BO    MAIN0070              YES
         TM    SMF64RIN,X'08'        COMPONENT CLOSED WITH TYPE=T?
         BO    MAIN0080              YES
         TM    SMF64RIN,X'04'        ABEND?
         BO    MAIN0090              YES
         TM    SMF64RIN,X'02'        VVDS OR CATALOG OPENED AS DATA SET
         BO    MAIN0100              YES
         B     MAIN0110
MAIN0040 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_1),SITUATION_1
         B     MAIN0110
         B     EXIT0000
MAIN0050 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_2),SITUATION_2
         B     MAIN0110
MAIN0060 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_3),SITUATION_3
         B     MAIN0110
MAIN0070 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_4),SITUATION_4
         B     MAIN0110
MAIN0080 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_5),SITUATION_5
         B     MAIN0110
MAIN0090 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_6),SITUATION_6
         B     MAIN0110
MAIN0100 DS    0H
         MVC   MSG_04_RIN(L'SITUATION_7),SITUATION_7
MAIN0110 DS    0H
         DROP  R8
         BCTR  R6,0

         A     R8,SPF_VWIDTH         NEXT LINE
         SR    R5,R5                 CLEAR R5
         ICM   R5,3,SMF64ESL         LENGTH OF EXTENT DATA
         LA    R7,SMF64FCC
         USING SMF64FCC,R7           DEFINE BASE
         BZ    EXIT0000
MAIN0120 DS    0H
         MVC   0(MSG_05_L,R8),MSG_05
         USING MSG_05,R8
         MVC   MSG_05_VSN,SMF64VSN   COPY VOLSER
         UNPK  DXD_A(5),SMF64CUU(3)  UNPACK DEVICE
         TR    DXD_A(4),COMM_HEXCHAR TRANSLATE
         MVC   MSG_05_CUU,DXD_A      COPY DEVICE
         DROP  R8
         A     R8,SPF_VWIDTH         NEXT LINE
         BCT   R6,MAIN0130
         B     EXIT0000              SCREEN IS FULL
MAIN0130 DS    0H
         AH    R7,=H'26'             NEXT EXTENT
         SH    R5,=H'26'             LENGTH OF EACH EXTENT ENTRY
         BH    MAIN0120              PROCESS NEXT EXTENT

         USING SMF64SLN,R7           DEFINE BASE
         A     R8,SPF_VWIDTH         NEXT LINE
         MVC   0(MSG_06_L,R8),MSG_06
         USING MSG_06,R8
         MVC   MSG_06_DDN,SMF64DDN   COPY DD NAME
         MVC   MSG_06_CLN,SMF64CLN   COPY CLUSTER NAME
         DROP  R8

         A     R8,SPF_VWIDTH         NEXT LINE
         MVC   0(MSG_07_L,R8),MSG_07
         USING MSG_07,R8
         L     R1,SMF64DBS           BLOCK SIZE
         CVD   R1,COMM_DWORD         CONVERT TO DECIMAL
         ED    MSG_07_DBS,COMM_DWORD+4

         DROP  R8
         A     R8,SPF_VWIDTH         NEXT LINE
         BCTR  R6,0

         MVC   0(MSG_08_L,R8),MSG_08
         USING MSG_08,R8
         L     R1,SMF64DCI           CI SIZE
         CVD   R1,COMM_DWORD         CONVERT TO DECIMAL
         ED    MSG_08_CISZ,COMM_DWORD+4

         DROP  R8
         A     R8,SPF_VWIDTH
         BCTR  R6,0

         MVC   0(MSG_09_L,R8),MSG_09
         USING MSG_09,R8
         L     R1,SMF64DLS           LOGICAL RECORD SIZE
         CVD   R1,COMM_DWORD         CONVERT TO DECIMAL
         ED    MSG_09_RECSZ,COMM_DWORD+4

         DROP  R8
         A     R8,SPF_VWIDTH
         BCTR  R6,0

         MVC   0(MSG_10_L,R8),MSG_10
         USING MSG_10,R8
         LH    R1,SMF64DKL           KEY LENGTH
         CVD   R1,COMM_DWORD         CONVERT TO DECIMAL
         ED    MSG_10_KEYL,COMM_DWORD+4
         DROP  R8

         A     R8,SPF_VWIDTH         NEXT LINE
         BCTR  R6,0
         A     R8,SPF_VWIDTH         NEXT LINE
         BCTR  R6,0

         LA    R14,SMF64DEX          FIRST STATISTIC FIELD
         LA    R15,STATS_FIELDS      FIRST FIELD DESCRIPTION
MAIN0140 DS    0H
         MVC   0(MSG_11_L,R8),MSG_11
         USING MSG_11,R8             DEFINE BASE
         MVC   MSG_11_NAME_1,0(R15)  COPY DESCRIPTOR
         L     R1,0(R14)             STATISTIC VALUE
         CVD   R1,COMM_DWORD         CONVERT TO DECIMAL
         ED    MSG_11_VALUE_1,COMM_DWORD+4
         MVC   MSG_11_NAME_2,25(R15) COPY DESCRIPTOR
         L     R1,4(R14)             STATISTIC VALUE
         CVD   R1,COMM_DWORD         CONVERT TO DECIMAL
         ED    MSG_11_VALUE_2,COMM_DWORD+4
         A     R8,SPF_VWIDTH         NEXT LINE
         BCT   R6,MAIN0150
         B     EXIT0000              SCREEN FULL
MAIN0150 DS    0H
         LA    R14,8(,R14)           NEXT STATISTICS
         LA    R15,50(,R15)          NEXT DESCRIPTORS
         CLI   0(R15),X'FF'          END OF DESCRIPTORS?
         BNE   MAIN0140              NO

         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         SR    R2,R2
         B     EXITEXIT
EXIT0004 DS    0H
         LA    R2,4
EXITEXIT DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R2
         L     R13,4(R13)            RESTORE SAVE AREA ADDRESS
         L     R14,12(,R13)          RESTORE R14
         LR    R15,R2                SET RC
         LM    R0,R12,20(R13)        RESTORE REMAINING REGISTERS
         BR    R14                   RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART       DC    Q(WK0064)
DATA           DC    CL8'DATA'
INDEX          DC    CL8'INDEX'
UNKNOWN        DC    CL8'UNKNOWN'

SITUATION_1    DC    C'Component closed'
SITUATION_2    DC    C'Volume switched'
SITUATION_3    DC    C'No space available'
SITUATION_4    DC    C'Catalog or CRA'
SITUATION_5    DC    C'Component closed with TYPE=T'
SITUATION_6    DC    C'Abend'
SITUATION_7    DC    C'VVDS or catalog referenced as dataset'

STATS_FIELDS   DS    0C
               DC    CL25'Extents'
               DC    CL25'Logical records'

               DC    CL25'Records deleted'
               DC    CL25'Records inserted'

               DC    CL25'Records updated'
               DC    CL25'Records retrieved'

               DC    CL25'Unused CI space'
               DC    CL25'CI splits'

               DC    CL25'CA splits'
               DC    CL25'EXCPs'
               DC    X'FF'



MSG_01         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'JOB name'
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_01_JBN     DC    X'4020202020202120'
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'User id'
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_01_UIF     DC    X'4020202020202120'
MSG_01_L       EQU   *-MSG_01

MSG_02         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'Catalog name      '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_02_CNM     DC    CL44' '
MSG_02_L       EQU   *-MSG_02

MSG_03         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'Component name    '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_03_DNM     DC    CL44' '
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'Type'
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_03_DTY     DC    CL8' '
MSG_03_L       EQU   *-MSG_03

MSG_04         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'Situation         '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_04_RIN     DC    CL50' '
MSG_04_L       EQU   *-MSG_04

MSG_05         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'Volser            '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_05_VSN     DC    CL6' '
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'   Device'
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_05_CUU     DC    CL4' '
MSG_05_L       EQU   *-MSG_05

MSG_06         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'DD name           '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_06_DDN     DC    CL8' '
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'Cluster name'
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_06_CLN     DC    CL44' '
MSG_06_L       EQU   *-MSG_06

MSG_07         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'BLOCK SIZE        '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_07_DBS     DC    X'4020202020202120'
MSG_07_L       EQU   *-MSG_07

MSG_08         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'CI SIZE           '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_08_CISZ    DC    X'4020202020202120'
MSG_08_L       EQU   *-MSG_08

MSG_09         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'RECORD SIZE       '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_09_RECSZ   DC    X'4020202020202120'
MSG_09_L       EQU   *-MSG_09

MSG_10         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    C'KEY LENGTH        '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_10_KEYL    DC    X'4020202020202120'
MSG_10_L       EQU   *-MSG_10

MSG_11         DS    0C
               DC    AL1($SCREEN_ATTR_HIGH)
MSG_11_NAME_1  DC    CL25' '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_11_VALUE_1 DC    X'4020202020202120'
               DC    AL1($SCREEN_ATTR_HIGH)
               DC    AL1($SCREEN_ATTR_HIGH)
MSG_11_NAME_2  DC    CL25' '
               DC    AL1($SCREEN_ATTR_NORMAL)
MSG_11_VALUE_2 DC    X'4020202020202120'
               DC    AL1($SCREEN_ATTR_HIGH)
MSG_11_L       EQU   *-MSG_11

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
WK0064         DSECT
               COPY     DXDPREF
DXD_A          DC       CL80' '
DXD_B          DC       CL80' '
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               SESSION
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               BPXYSTAT DSECT=YES,LIST=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               OSSPFD  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
SMF_RECORD     DSECT
               IFASMFR  64
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     REGEQU
               END      SMF0064
