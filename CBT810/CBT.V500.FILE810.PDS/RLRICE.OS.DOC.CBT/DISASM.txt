OS now has a disassembler.

To invoke the disassembler, browse the directory of the library.
For example assume you have installed OS in MY.OS.LOADLIB.

Start OS.
From SPF option 6, enter
    os 'MY.OS.LOADLIB'
Tab to the LMOD you want and type 'z' as a line command.
Press enter.
The names of the CSECTs in the LMOD will be displayed.
Select a CSECT by typing a non-blank in the command area.
Press enter.





The disassembler always requires a label prefix and name of a
data set for the generated source to be written to.

What is the label prefix?  If the disassembler recognizes operands,
ADCONs, etc of the code that refers to another point in the code,
it will generate a label at that point.  The label will begin with
either the prefix you specify or "DATA".

To enter the label prefix and the data set name for the generate
source, use option "O".


The disassembler attempts to create assembler source code from
load module text.  To make the generated source more readable,
it attempts to create labels for field references rather than just
a displacment off a base "DDD(R) type thing.  To do this, the
disassembler allows you to identify areas of the code that use
a register to base a known area like the CVT, PSA, or TIOT for
example.  The disassembler learns labels and the displacement to
the label by assembling assembler source code and reading the
assembler SYSPRINT.  This allows you to use actual assembler
source.  The disassembler can either process the assembler source
at disassembly time, or it can be pre-processed using DISASMU1.
DISASMU1 assembles the source, reads the SYSPRINT and saves the
names of DSECTs and LABELs in a VSAM KSDS.  Preprocessing assembler
source can save the time that would be used by the assembler to
process DSECTs, macros, user source, etc repeatedly.  For example
you may want to pre-process system control blocks like the CVT,
PSA, TIOT, or control blocks of your own that you use often.

The disassembler can use both user supplied source and pre-processed
info in the same dis-assembly.




Labels
The disassembler now supports LABELs up to 63 characters long.


Binder
The disassembler uses a BINDER dialog to obtain the RLD, ESD, text



USINGs
This was probably the most difficult piece of the disassembler.
If I ever think of a method that is easier or simpler to use...
Anyone else have any ideas for a better way?

The idea here was that you may recognize that a register is being
used to reference a control block like the CVT.  First you need to
either pre-process the CVT or supply assembler source via option 'A'
and include SYS1.MACLIB in the SYSLIBs (option 'S').  Then use
option 'U'.  To add a new USING, type "new" at the command line and
press enter.  You will be shown a selection list that includes
the assembler source you have provided (if any) and the preprocessed
libraries you have named (via option K).  If you select the source
entered via option "A", you will be shown a list of DSECTs that
were found in the source provided via option "A".  If you select a
pre-processed library, you will be shown a list of DSECTs with info
recorded in that KSDS by DISASMU1.  When you select the DSECT you
want, you will be shown a list of the labels in that DSECT.
Select the label you want and press enter.  You will be allowed to
enter a name (for named usings "name.label").  If you leave the name
for "normal" usings.  Enter the register to be used for basing the
area and the starting and ending displacment where the using is in
effect.  Press enter.

You can identify as many USINGs as you need.

To remove a USING, type a non-blank in the line command area
for that using.  You will be asked to verify that you want to
delete the USING.



CONFIGS
Disassembling is usually an iterative process.  As you 'decipher'
code, you may determine which registers are being used as
program base registers, that a register is being used to 'point'
to a data area like the CVT, or DCB.  Since the disassembler is
interactive, you may want to save the control info you have entered.
That is save the DATA area info, the BASE registers, USING info.
Then "restore" that info at a later time.  Option "C" allows you to
save or restore your control info.



OPTION S  (libraries for assembler SYSLIB)
If you can determine that a register is being used for the base of
a data area, the disassembler can generate labels rather than a
"displacement from base" that is a "DDD(B)".  In order to do this,
the disassembler needs to know the labels in the data area and the
displacement where those labels occur.  The disasembler uses actual
assembler source.  The source is assembled by calling the assembler,
then reading the SYSPRINT.



