*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRX                                                *
*                                                                    *
*  Function:                                                         *
*   Generate RX or RXE instructions                                  *
*                                                                    *
*  At entry R7 is AREA address                                       *
*           R5 is address of instruction                             *
*           R4 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRX    CSECT
GENRX    AMODE 31
GENRX    RMODE ANY
         USING GENRX,R15
         USING OSCOMM,R12
         USING SESSION,R11
         USING DISCOMM,R9
         USING AREA_DSECT,R7
         USING OPCODE_DSECT,R4
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRX'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        SET BASE REG
         DROP  R15
         USING GENRX,R10
         L     R15,SESS_DXD_ADDR              WORK AREA BASE
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRX,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R7,                                              +
               DATA2=0(R5)
         MVC   DXD_BLANKS,COMM_BLANKS
         LA    R1,DISCOMM_SOURCE_OPERAND1
         TM    OPCODE_FLAGS,$OPCODE_EXT       EXTENDED FORMAT?
         BO    GEN0020                        YES
*--------------------------------------------------------------------*
*        GENERATE R OF RX                                            *
*--------------------------------------------------------------------*
         SR    R3,R3                          CLEAR R3
         IC    R3,1(R5)                       INSERT R AND X
         SRL   R3,4                           SHIFT OUT X
         SLL   R3,1                           MULTIPLY BY 2
         STC   R3,DXD_R
         LA    R2,REGISTER_TABLE(R3)          REGISTSER NAME
         MVI   DISCOMM_SOURCE_OPERAND1,C'R'
         MVC   DISCOMM_SOURCE_OPERAND1+1(2),0(R2)
         LA    R1,DISCOMM_SOURCE_OPERAND1
         BAL   R15,SCAN0000                   FIND 1ST BLANK
         MVI   0(R1),C','                     INSERT COMMA
         LA    R1,1(,R1)
         B     GEN0080
*--------------------------------------------------------------------*
*        Generate branch instructions                                *
*--------------------------------------------------------------------*
GEN0020  DS    0H
         ITRACE ID=GENBR,                                              +
               DATA1=AREA_BEGIN,                                       +
               DATA2=0(R5)
         MVC   DXD_COND,1(R5)                 COPY INSTRUCTION BYTE 2
         NI    DXD_COND,X'F0'                 LEAVE ONLY CONDITION
         TM    DISCOMM_CC,$OPCODE_CCA         ARITHMETIC?
         BO    GEN0030                        YES
         TM    DISCOMM_CC,$OPCODE_CCC         COMPARE?
         BO    GEN0040                        YES
         ITRACE ID=LOGICAL
         LA    R2,COND_LOGICAL                DEFAULT TO LOGICAL
         B     GEN0050
GEN0030  DS    0H
         ITRACE ID=ARITH
         LA    R2,COND_ARITH                  ARITHMETIC CONDITIONS
         B     GEN0050
GEN0040  DS    0H
         ITRACE ID=COMPARE
         LA    R2,COND_COMPARE                COMPARE CONDITIONS
GEN0050  DS    0H
         USING COND_DSECT,R2
         CLC   COND_COND,DXD_COND             LOCATED THE CONDITION?
         BE    GEN0060                        YES
         LA    R2,COND_DSECT_L(,R2)           NEXT
         CLI   0(R2),X'FF'                    END OF TABLE?
         BE    GEN0070                        NOT LOCATED
         B     GEN0050
GEN0060  DS    0H
         MVC   OPCODE_MNEMONIC,COND_MNEMONIC  CHANGE MNEMONIC
         B     GEN0080
*--------------------------------------------------------------------*
*        Generate BC with condition nbr                              *
*--------------------------------------------------------------------*
GEN0070  DS    0H
         MVC   OPCODE_MNEMONIC,OP_BC
         SR    R0,R0
         IC    R0,DXD_COND
         SRL   R0,4                           SHIFT TO LOW BITS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         MVC   0(2,R1),DXD_EDIT_WORD+6        COPY CONDTION
         MVI   2(R1),C','
         LA    R1,3(,R1)                      SKIP CONDITION AND COMMA
*--------------------------------------------------------------------*
*        GENERATE LABEL(X)                                           *
*--------------------------------------------------------------------*
GEN0080  DS    0H
         ICM   R8,15,AREA_REF_LABEL1          LABEL REFERENCED?
         USING LABEL_DSECT,R8
         BZ    GEN0100                        NO
         ICM   R2,15,AREA_REF_USING1          USING BLOCK ADDR?
         BZ    GEN0085                        NO
         USING USING_DSECT,R2
         CLC   USING_NAME,COMM_BLANKS         NAME BLANK?
         BE    GEN0085                        YES
         MVC   0(L'USING_NAME,R1),USING_NAME  COPY NAME
         BAL   R15,SCAN0000                   FIND END OF NAME
         MVI   0(R1),C'.'                     INSERT DELIMITER
         LA    R1,1(,R1)                      UPDATE OUTPUT ADDRESS
GEN0085  DS    0H
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R15,SCAN0000                   FIND END OF NAME
         ICM   R0,15,AREA_REF_DISP1           DISP FROM LABEL
         BZ    GEN0090                        ZERO
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000
         MVC   1(4,R1),0(R2)                  COPY DISP
         BAL   R15,SCAN0000
GEN0090  DS    0H
         MVC   DXD_X,1(R5)                    COPY 'R AND X'
         NI    DXD_X,X'0F'                    LEAVE ONLY 'X'
         SR    R3,R3
         ICM   R3,1,DXD_X                     INDEX REGISTER
         BZ    EXIT0000                       NONE (ZERO)
         SLL   R3,1
         MVI   0(R1),C'('                     INSERT OPEN PAREN
         MVI   1(R1),C'R'                     INSERT OPEN PAREN
         LA    R2,REGISTER_TABLE(R3)
         MVC   2(2,R1),0(R2)                  COPY INDEX REGISTER
         BAL   R15,SCAN0000                   FIND END
         MVI   0(R1),C')'                     INSERT CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        GENERATE "DDD(X,R)                                          *
*--------------------------------------------------------------------*
GEN0100  DS    0H
         SR    R0,R0
         MVC   DXD_X,1(R5)                    COPY 'R AND X'
         NI    DXD_X,X'0F'                    REMOVE R
         MVC   DXD_BASE,2(R5)                 COPY BASE
         IC    R0,DXD_BASE
         SRL   R0,4                           SHIFT OUT DISP
         STC   R0,DXD_BASE
         MVC   DXD_DISP,2(R5)                 COPY BASE & DISP
         NI    DXD_DISP,X'0F'                 LEAVE ONLY DISP
         SR    R15,R15
         ICM   R15,3,DXD_DISP                 DISP
         BZ    GEN0110                        ZERO
         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT DISP
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000
         MVC   0(4,R1),0(R2)
         B     GEN0120
GEN0110  DS    0H
         MVI   0(R1),C'0'                     GENERATE A ZERO
GEN0120  DS    0H
         OC    DXD_X(2),DXD_X                 INDEX AND BASE ZERO?
         BZ    EXIT0000                       YES
         LA    R1,DISCOMM_SOURCE_OPERAND1
         BAL   R15,SCAN0000                   FIND BLANK
         MVI   0(R1),C'('                     OPEN PAREN
         LA    R1,1(,R1)
         MVI   0(R1),C'R'
         SR    R3,R3
         ICM   R3,1,DXD_X                     INDEX REGISTER
         BZ    GEN0130                        ZERO.. SKIP
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   1(2,R1),0(R2)                  COPY TO SOURCE
         BAL   R15,SCAN0000                   FIND BLANK
GEN0130  DS    0H
         ICM   R3,1,DXD_BASE                  BASE REGISTER
         BZ    GEN0140
         MVI   0(R1),C','                     INSERT COMMA
         MVI   1(R1),C'R'                     INSERT COMMA
         SLL   R3,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R3)          REGISTER NAME
         MVC   2(2,R1),0(R2)                  COPY TO SOURCE
         BAL   R15,SCAN0000                   FIND BLANK
GEN0140  DS    0H
         MVI   0(R1),C')'                     INSERT CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R15
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C'0'
         BNER  R15
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         CLI   DISCOMM_SOURCE_OPERAND1,C'-'   TEMPORARY LABEL?
         BNE   EXIT0010                       NO
         DC    H'0'
EXIT0010 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRX)
EDIT_WORD      DC   X'F020202020202120'

OP_BC          DC   CL6'BC'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'

COND_ARITH     DS   0C
               DC   X'00',CL6'NOP'
               DC   X'10',CL6'BO'
               DC   X'20',CL6'BP'
               DC   X'40',CL6'BM'
               DC   X'70',CL6'BNZ'
               DC   X'80',CL6'BZ'
               DC   X'B0',CL6'BNM'
               DC   X'D0',CL6'BNP'
               DC   X'E0',CL6'BNO'
               DC   X'F0',CL6'B'
               DC   X'FF'

COND_COMPARE   DS   0C
               DC   X'00',CL6'NOP'
               DC   X'20',CL6'BH'
               DC   X'40',CL6'BL'
               DC   X'70',CL6'BNE'
               DC   X'80',CL6'BE'
               DC   X'B0',CL6'BNL'
               DC   X'D0',CL6'BNH'
               DC   X'F0',CL6'B'
               DC   X'FF'

COND_LOGICAL   DS   0C
               DC   X'00',CL6'NOP'
               DC   X'10',CL6'BO'
               DC   X'40',CL6'BM'
               DC   X'70',CL6'BNZ'
               DC   X'80',CL6'BZ'
               DC   X'B0',CL6'BNM'
               DC   X'E0',CL6'BNO'
               DC   X'F0',CL6'B'
               DC   X'FF'

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRX          DSECT
               COPY DXDPREF
DXD_DISP       DS   XL2
DXD_R          DS   X
DXD_X          DS   X
DXD_BASE       DS   X
DXD_COND       DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
COND_DSECT     DSECT
COND_COND      DS   X
COND_MNEMONIC  DS   CL6
COND_DSECT_L   EQU  *-COND_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               SESSION  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               BPXYSTAT DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               OSSPFD   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
*-------------------------------------------------------------------- *
               COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     REGEQU
               END      GENRX
