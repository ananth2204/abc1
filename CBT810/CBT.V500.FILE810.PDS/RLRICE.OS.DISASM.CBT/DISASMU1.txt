* ------------------------------------------------------------------- *
*                                                                     *
*  Module name: DISASMU1                                              *
*                                                                     *
*  Function:                                                          *
*                                                                     *
*   The disassembler can use actual assembler source for label        *
*   mapping.  The source can be supplied to the disassembler          *
*   during a disassembly run or pre-processed by this utility.        *
*                                                                     *
*   The assembler output is scanned to obtain DSECT names, label      *
*   names, and the displacements to the labels.  In order for the     *
*   utility to find names and displacements, the PRINT options        *
*   should be ON,GEN.                                                 *
*                                                                     *
*   SYSUT1   SYSPRINT file from the assembler                         *
*   SYSPRINT Messages generated by this utility                       *
*   SYSUT2   Output.  This information can be supplied to the         *
*            disassembler via DSECTxx DD statements.         .        *
*                                                                     *
*                                                                     *
*   The high-level assembler now allows symbolic names (labels)       *
*   up to 63 characters in length.  A PDS or PDS/E only allows        *
*   member names up to  8 characters in length, so I chose to         *
*   use VSAM KSDS(s) to record pre-processed DSECT info.              *
*                                                                     *
*                                                                     *
*   SYSUT2 is a VSAM KSDS with:                                       *
*       KEYS        (67, 0)                                           *
*       RECORDSIZE  (81 81)                                           *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISASMU1 CSECT
DISASMU1 AMODE 24
DISASMU1 RMODE 24
         USING DISASMU1,R12
         USING DSECT_DSECT,R10
         USING LABEL_DSECT,R9
         USING EQU_DSECT,R8
         USING IFGRPL,WK_RPL
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R12,R15                        SET BASE REG
         B     UTIL0000                       SKIP EYECATCHER
         DC    CL8'DISASMU1'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
UTIL0000 DS    0H
         LA    R15,WK_SAVEAREA
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         OPEN  (SYSPRINT,OUTPUT)              OPEN SYSPRINT
         OPEN  (SYSUT1,INPUT)                 OPEN SYSUT1
         USING IHADCB,SYSUT1
         OPEN  (SYSUT2,UPDAT)                 OPEN SYSTU2
         LTR   R15,R15
         BNZ   ERR0040
         CLC   DCBLRECL,H125                  LRECL CORRECT?
         BNE   ERR0200                        NO
         MODCB RPL=WK_RPL,                                             +
               ACB=SYSUT2,                                             +
               AREA=PPD,                                               +
               AREALEN=PPD_L,                                          +
               ARG=PPD_KEY,                                            +
               KEYLEN=67,                                              +
               OPTCD=(KEY,DIR,SYN,MVE,UPD)
         PUT   SYSPRINT,MSG00
         SR    R10,R10                        NO DSECT FOUND SO FAR
         SR    R9,R9                          NO LABEL FOUND SO FAR
* ------------------------------------------------------------------- *
*                                                                     *
*        Read a record from the assembler listing                     *
*                                                                     *
* ------------------------------------------------------------------- *
UTIL0010 DS    0H
         GET   SYSUT1,ASM_DATA                READ A SYSUT1 RECORD
         CLI   ASM_LABEL,C'*'                 COMMENT STATEMENT?
         BE    UTIL0010                       YES
         CLC   ASM_DATA+43,SRCSTMT            ASSEMBLER HEADING LINE?
         BE    UTIL0010                       YES, IGNORE IT
         CLC   XREF,ASM_DATA+45               CROSS REFERENCE?
         BNE   UTIL0020                       NO
         OI    WK_FLAGS,$XREF                 SET CROSS REFERENCE FLAG
UTIL0020 DS    0H
         TM    WK_FLAGS,$XREF                 CROSS REFERENCE FOUND?
         BO    UTIL0010                       YES
* ------------------------------------------------------------------- *
*        Determine if there is a LABEL                                *
* ------------------------------------------------------------------- *
         CLI   ASM_LABEL,C' '                 LABEL PRESENT?
         BE    UTIL0010                       NO
         LA    R6,ASM_LABEL                   FIRST BYTE OF LABEL
         LA    R2,WK_LABEL                    FIRST BYTE OF WORK LABEL
         MVC   WK_LABEL,BLANKS                CLEAR LABEL NAME
         LA    R1,L'WK_LABEL                  MAX LOOPS
UTIL0030 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BE    UTIL0040                       YES
* ------------------------------------------------------------------- *
*        Save label                                                   *
* ------------------------------------------------------------------- *
         MVC   0(1,R2),0(R6)                  COPY TO WORK LABEL
* ------------------------------------------------------------------- *
*        Find next non-blank                                          *
* ------------------------------------------------------------------- *
         LA    R2,1(R2)                       NEXT
         LA    R6,1(R6)                       NEXT
         BCT   R1,UTIL0030                    LOOP
         CLI   0(R6),C' '                     BLANK?
         BE    UTIL0040                       NO... TOO LONG
         B     UTIL0010                       READ NEXT SYSUT1 RECORD
UTIL0040 DS    0H
         LA    R1,L'WK_LABEL                  MAX LOOPS
UTIL0050 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNE   UTIL0060                       NO
         LA    R6,1(R6)                       NEXT
         BCT   R1,UTIL0050                    LOOP
         B     UTIL0130                       ASSUME IT IS A LABEL
* ------------------------------------------------------------------- *
*        Determine if this is a CSECT, DSECT, or EQU                  *
* ------------------------------------------------------------------- *
UTIL0060 DS    0H
         CLC   OP_DSECT(6),0(R6)              DSECT?
         BE    UTIL0090                       YES
         CLC   OP_CSECT,0(R6)                 CSECT?  (SAME AS DSECTS)
         BE    UTIL0090                       YES
         CLC   OP_EQU,0(R6)                   EQUATE STATEMENT?
         BNE   UTIL0130                       NO
* ------------------------------------------------------------------- *
*                                                                     *
*        Process EQUATEs                                              *
*                                                                     *
*   Some EQUATEs are just used for defining a label like              *
*   "NAME    EQU  *".                                                 *
*                                                                     *
*   Some bit flags or one-byte fields have EQUATEs to define their    *
*   meanings.  If an EQUATE following a statement with a label has    *
*   a displacment between x'00' and x'ff', assume it is defining      *
*   bits or values for the preceding field.                           *
*                                                                     *
*                                                                     *
*                                                                     *
*   First check for the "NAME   EQU  *".  If not, assume it is a      *
*   bit or one-byte value.                                            *
*                                                                     *
*   R6 has the address of the OPCODE ("EQU").                         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         LTR   R9,R9                          LABEL FOUND YET?
         BZ    UTIL0010                       NO
         LA    R6,L'OP_EQU(,R6)               SKIP OPCODE
         LA    R1,20                          LOOP LIMITER
UTIL0070 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNE   UTIL0080                       NO
         LA    R6,1(,R6)                      NEXT
         BCT   R1,UTIL0070                    LOOP
         B     UTIL0130                       NO BLANK.. ASSUME LABEL
UTIL0080 DS    0H
         CLC   =C'* ',0(R6)                   ASTERISK AND A BLANK?
         BE    UTIL0140                       YES.. TREAT LIKE A LABEL
         CLC   =C'000',ASM_ADDR               FIRST 3 DIGITS ZEROS?
         BNE   UTIL0010                       NO
         GETMAIN RU,                          GETMAIN EQU BLOCK        +
               LV=EQU_DSECT_L,                                         +
               LOC=BELOW
         LR    R8,R1                          COPY EQU BLOCK ADDRESS
         XC    EQU_DSECT(EQU_DSECT_L),EQU_DSECT                         OCK
         MVC   EQU_EYE,EQUID                  IDENTIFY THIS BLOCK
         MVC   EQU_NEXT,LABEL_EQU_NEXT        SET CHAIN ADDRESS
         ST    R8,LABEL_EQU_NEXT              NEW BLOCK'S ADDR
         MVC   EQU_LABEL,WK_LABEL             SET LABEL
         NC    ASM_ADDR+3(2),X1F1F            PREPARE FOR PACKING
         TR    ASM_ADDR+3(2),CHXH             TRANSLATE FOR PACKING
         PACK  WK_DISP_OUT(2),ASM_ADDR+3(3)
         MVC   EQU_VALUE,WK_DISP_OUT          COPY EQUATE VALUE
         B     UTIL0010
* ------------------------------------------------------------------- *
*        Process DSECT or CSECT statements                            *
* ------------------------------------------------------------------- *
UTIL0090 DS    0H
         LA    R2,WK_DSECT_CHAIN_PREV         DSECT ANCHOR
         ICM   R10,15,WK_DSECT_CHAIN_NEXT     FIRST DSECT BLOCK
         BZ    UTIL0110                       NO DSECTS YET
UTIL0100 DS    0H
         CLC   DSECT_NAME,WK_LABEL            ALREADY ON DSECT CHAIN?
         BE    UTIL0010                       YES.. EXIT WITH BASE SET
         LR    R2,R10                         COPY ADDRESS
         ICM   R10,15,DSECT_NEXT              NEXT DSECT BLOCK
         BNZ   UTIL0100                       LOOP
UTIL0110 DS    0H
         GETMAIN RU,                          ACQUIRE NEW DSECT BLOCK  +
               LV=DSECT_DSECT_L,                                       +
               LOC=BELOW
         XC    0(DSECT_DSECT_L,R1),0(R1)
         ST    R1,DSECT_NEXT-DSECT_DSECT(R2)  CHAIN NEW TO PREVIOUS
         LR    R10,R1                         SET BASE
         MVC   DSECT_EYE,OP_DSECT             SET BLOCK ID
         MVC   DSECT_NAME,WK_LABEL            SET DSECT'S NAME
         SR    R9,R9                          CLEAR LABEL BLOCK ADDR
         XC    WK_DISP_OUT,WK_DISP_OUT        SET DISP TO ZERO
         LA    R2,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR
         B     UTIL0180                       ADD LABEL AT DISP ZERO
* ------------------------------------------------------------------- *
*                                                                     *
*        Determine if this statement has a valid DISP.                *
*                                                                     *
* ------------------------------------------------------------------- *
UTIL0130 DS    0H
         LTR   R10,R10                        DSECT DETERMINED YET?
         BZ    UTIL0010                       NO
         CLI   ASM_DISP,C'A'                  VALID DISPLACEMENT?
         BL    UTIL0010                       NO
         CLI   ASM_DISP,C'F'                  VALID DISPLACEMENT?
         BNH   UTIL0150                       YES
         CLI   ASM_DISP,C'0'                  VALID DISPLACEMENT?
         BL    UTIL0010                       NO
         CLI   ASM_DISP,C'9'                  VALID DISPLACEMENT?
         BH    UTIL0010                       NO
         B     UTIL0150
UTIL0140 DS    0H
         MVI   WK_DISP_IN,C'0'                FORCE DIGIT 1 TO ZERO
         MVC   WK_DISP_IN+1(5),ASM_ADDR       USE ADDR FOR DISP
         B     UTIL0160
UTIL0150 DS    0H
         MVC   WK_DISP_IN,ASM_DISP            COPY DISPLACEMENT
UTIL0160 DS    0H
         NC    WK_DISP_IN,X1F1F               PREPARE FOR TRANSLATE
         TR    WK_DISP_IN,CHXH                TRANSLATE FOR PACKING
         PACK  WK_DISP_OUT(4),WK_DISP_IN(7)   PACK DISPLACEMENT
UTIL0165 DS    0H
         LA    R2,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR
         ICM   R9,15,DSECT_LABEL_NEXT         FIRST LABEL
         BZ    UTIL0180                       NO LABELS
UTIL0170 DS    0H
         CLC   WK_DISP_OUT(3),LABEL_DISP+1    INSERT HERE?
         BH    UTIL0180                       YES
         LR    R2,R9                          COPY ADDRESS
         ICM   R9,15,LABEL_NEXT               NEXT LABEL
         BNZ   UTIL0170                       LOOP
UTIL0180 DS    0H
         GETMAIN RU,                          ACQUIRE NEW LABEL BLOCK  +
               LV=LABEL_DSECT_L,                                       +
               LOC=BELOW
         XC    0(LABEL_DSECT_L,R1),0(R1)
         ST    R1,LABEL_NEXT-LABEL_DSECT(R2)  CHAIN PREVIOUS TO NEW
         ST    R9,LABEL_NEXT-LABEL_DSECT(R1)  CHAIN NEXT BLOCK TO NEW
         LR    R9,R1                          SET BASE
         MVC   LABEL_EYE,LABEL                SET BLOCK IDENTIFIER
         MVC   LABEL_NAME,WK_LABEL            SET LABEL NAME
         MVI   LABEL_DISP,X'00'               FORCE FIRST BYTE TO ZERO
         MVC   LABEL_DISP+1(3),WK_DISP_OUT    SET DISPLACEMENT
         MVI   LABEL_TYPE,$LABEL_DATA         DATA TYPE LABEL
         B     UTIL0010
* ------------------------------------------------------------------- *
*                                                                     *
*    EOF on the assembler output has been reached.                    *
*                                                                     *
*    Print the info we have gathered and write it to the              *
*    pre-processed DSECT info file (SYSUT2).                          *
*                                                                     *
* ------------------------------------------------------------------- *
UTIL0200 DS    0H
         ICM   R10,15,WK_DSECT_CHAIN_NEXT     ANY DSECTS?
         BZ    UTIL0270                       NO
         B     UTIL0220
UTIL0210 DS    0H
         BAL   R11,PRT0000                    PRINT A BLANK LINE
UTIL0220 DS    0H
         MVC   MSG01_NAME,DSECT_NAME          COPY DSECT NAME
         MVC   PR_DATA(MSG01L),MSG01
         BAL   R11,PRT0000
         MVC   PPD_NAME,DSECT_NAME            COPY NAME
         BAL   R11,ERASE000                   ERASE OLD DATA
         XC    PPD_SEQ,PPD_SEQ                SET SEQ TO ZERO
         MVC   PPD_DATA(DSECT_DSECT_L),DSECT_DSECT
         LA    R2,DSECT_DSECT_L+L'PPD_KEY
         BAL   R11,WRITE000
         ICM   R9,15,DSECT_LABEL_NEXT         FIRST LABEL BLOCK
         BZ    UTIL0260                       NO LABELS
UTIL0230 DS    0H
         MVC   MSG02_NAME,LABEL_NAME          COPY LABEL NAME
         UNPK  MSG02_DISP(9),LABEL_DISP(5)
         TR    MSG02_DISP,HEXCHAR
         MVI   MSG02_DISP+8,C' '
         MVC   MSG02_TYPE,LABEL_TYPE          COPY LABEL TYPE
         MVC   PR_DATA(MSG02L),MSG02
         BAL   R11,PRT0000                    PRINT
         MVC   PPD_DATA(LABEL_DSECT_L),LABEL_DSECT
         LA    R2,LABEL_DSECT_L+L'PPD_KEY
         BAL   R11,WRITE000
         ICM   R8,15,LABEL_EQU_NEXT           FIRST EQU BLOCK
         BZ    UTIL0250
UTIL0240 DS    0H
         MVC   MSG03_NAME,EQU_LABEL           COPY LABEL
         MVC   WK_UNPACK(1),EQU_VALUE
         UNPK  MSG03_VALUE(3),WK_UNPACK(2)
         TR    MSG03_VALUE,HEXCHAR
         MVI   MSG03_VALUE+2,C' '
         MVC   PR_DATA(MSG03L),MSG03
         BAL   R11,PRT0000
         MVC   PPD_DATA(EQU_DSECT_L),EQU_DSECT
         LA    R2,EQU_DSECT_L+L'PPD_KEY
         BAL   R11,WRITE000
         ICM   R8,15,EQU_NEXT
         BNZ   UTIL0240
UTIL0250 DS    0H
         ICM   R9,15,LABEL_NEXT
         BNZ   UTIL0230
UTIL0260 DS    0H
         ICM   R10,15,DSECT_NEXT
         BNZ   UTIL0210
         B     EXIT0000                       AND EXIT
UTIL0270 DS    0H
         MVC   PR_DATA(MSG04L),MSG04
         BAL   R11,PRT0000
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERASE000 DS    0H
         XC    PPD_SEQ,PPD_SEQ                ZERO SEQ#
ERASE010 DS    0H
         MODCB RPL=WK_RPL,                                             +
               OPTCD=(KEY,DIR,SYN,MVE,UPD)
         GET   RPL=WK_RPL
         LTR   R15,R15
         BNZ   ERASE020
         ERASE RPL=WK_RPL
         LTR   R15,R15
         BNZ   ERR0010
         ICM   R1,15,PPD_SEQ                  SEQUENCE NUMBER
         LA    R1,1(,R1)                      PLUS 1
         STCM  R1,15,PPD_SEQ                  UPDATE SEQUENCE NBR
         B     ERASE010
ERASE020 DS    0H
         ENDREQ RPL=WK_RPL
         CLOSE SYSUT2,                                                 +
               MODE=31,                                                +
               TYPE=T
         LTR   R15,R15                        SUCCESSFUL?
         BZR   R11
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
WRITE000 DS    0H
         MODCB RPL=WK_RPL,                                             +
               RECLEN=(R2),                                            +
               OPTCD=(KEY,DIR,SYN,MVE,NUP)
         LTR   R15,R15
         BNZ   ERR0020
         PUT   RPL=WK_RPL
         LTR   R15,R15
         BNZ   ERR0030
         ICM   R1,15,PPD_SEQ
         LA    R1,1(,R1)
         STCM  R1,15,PPD_SEQ
         BR    R11
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         CP    WK_LINE,P_65                   TIME FOR HEADING?
         BL    PRT0010                        NO
         PUT   SYSPRINT,MSG00
         ZAP   WK_LINE,P_1
PRT0010  DS    0H
         PUT   SYSPRINT,PR_CC
         MVC   PR_DATA,PR_CC
         AP    WK_LINE,P_1
         BR    R11
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_GET
         B     ERR0100
ERR0020  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_MODCB
         B     ERR0100
ERR0030  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_PUT
         B     ERR0100
ERR0040  DS    0H
         MVC   PR_DATA(ERROR01_L),ERROR01
         MVC   PR_DATA+(ERROR01_FUNCTION-ERROR01)(L'ERROR01_FUNCTION),F+
               UNCTION_OPEN
ERR0100  DS    0H
         CVD   R15,WK_DWORD                   CONVERT RC TO DECIMAL
         ED    ERROR01_RC,WK_DWORD+6          EDIT RC
         UNPK  ERROR01_FDBK(7),RPLFDBK(4)     UNPACK FEED BACK
         TR    ERROR01_FDBK,HEXCHAR
         MVI   ERROR01_FDBK+6,C' '
         BAL   R11,PRT0000                    PRINT
         DC    H'0'
ERR0200  DS    0H
         MVC   PR_DATA(ERROR02_L),ERROR02
         LH    R1,DCBLRECL
         CVD   R1,WK_DWORD
         ED    PR_DATA+(ERROR02_LRECL-ERROR02),WK_DWORD+6
         BAL   R11,PRT0000
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         CLOSE SYSUT1
         CLOSE SYSPRINT
         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
WK_DWORD           DS    D
WK_SAVEAREA        DC    18F'0'               REGISTER SAVE AREA
WK_RPL             RPL   AM=VSAM

WK_DSECT_CHAIN_PREV DC   A(0)
WK_DSECT_CHAIN_NEXT DC   A(0)

H125               DC    H'125'

WK_FLAGS           DC    X'00'
$XREF              EQU   X'80'                .. CROSS REFERENCE FOUND
$OPEN              EQU   X'80'                .. SYSUT2 DCB IS OPEN

WK_LABEL           DC    CL63' '

WK_UNPACK          DC    XL8'00'

XREF               DC    C' CROSS REFERENCE '

HEXCHAR            EQU   *-C'0'
                   DC    C'0123456789ABCDEF'

P_1                DC    P'1'
P_65               DC    P'65'
WK_LINE            DC    PL3'0'

X1F1F              DC    8X'1F'

CHXH               DC    X'000A0B0C0D0E0F000000000000000000'  00-0F
                   DC    X'00010203040506070809000000000000'  10-1F

ASMHEAD            DC    CL35'ASSEMBLER OUTPUT'
BLANKS             DC    CL64' '
OP_DSECT           DC    CL8'DSECT'
OP_CSECT           DC    CL8'CSECT'
OP_EQU             DC    C'EQU '
SRCSTMT            DC    C'SOURCE STATEMENT'
WK_DISP_IN         DC    CL7' '
WK_DISP_OUT        DC    XL4'000000'
LABEL              DC    CL8'LABEL'
EQUID              DC    CL8'EQU'

PR_CC              DC    C' '
PR_DATA            DC    CL132' '

FUNCTION_OPEN      DC    CL10'OPEN'
FUNCTION_MODCB     DC    CL10'MODCB'
FUNCTION_GET       DC    CL10'GET'
FUNCTION_PUT       DC    CL10'PUT'

MSG00              DC    CL132'1    DISASMUT1   Preprocessed DSECTs'
MSG00L             EQU   *-MSG00

MSG01              DS    0C
                   DC    C'DSECT '
MSG01_NAME         DC    CL63' '
MSG01L             EQU   *-MSG01

MSG02              DS    0C
                   DC    C'  DISP '
MSG02_DISP         DC    CL8' '
                   DC    C' '
MSG02_TYPE         DC    C' '
                   DC    C'  LABEL '
MSG02_NAME         DC    CL63' '
MSG02L             EQU   *-MSG02

MSG03              DS    0C
                   DC    C'    EQUATE '
                   DC    C'  VALUE '
MSG03_VALUE        DC    CL2' '
                   DC    CL2' '
MSG03_NAME         DC    CL63' '
MSG03L             EQU   *-MSG03

MSG04              DS    0C
                   DC    C'**  No DSECTS found'
MSG04L             EQU   *-MSG04

ERROR01            DS    0C
                   DC    C'Error during '
ERROR01_FUNCTION   DC    CL10' '
                   DC    C', R15='
ERROR01_RC         DC    X'40202120'
                   DC    C'  VSAM FDBK='
ERROR01_FDBK       DC    CL6' '
                   DC    C' '
ERROR01_L          EQU   *-ERROR01

ERROR02            DS    0C
                   DC    C'Assembler listing LRECL is '
ERROR02_LRECL      DC    X'40202120'
                   DC    C', not 121.. aborting'
ERROR02_L          EQU   *-ERROR02
*---------------------------------------------------------------------*
*                                                                     *
*              ASSEMBLER OUTPUT DCB                                   *
*                                                                     *
*---------------------------------------------------------------------*
SYSUT1    DCB  DDNAME=SYSUT1,                                          +
               DSORG=PS,                                               +
               EODAD=UTIL0200,                                         +
               MACRF=GM
SYSUT2    ACB  AM=VSAM,                                                +
               DDNAME=SYSUT2,                                          +
               MACRF=(KEY,DIR,SEQ,OUT)
SYSPRINT  DCB  DDNAME=SYSPRINT,                                        +
               DSORG=PS,                                               +
               RECFM=FBA,                                              +
               LRECL=133,                                              +
               MACRF=PM
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               LTORG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ASM_DATA       DC      CL125' '
ASM_DATAL      EQU     *-ASM_DATA
               ORG     ASM_DATA+005
ASM_DISP       DS      CL6
               ORG     ASM_DATA+027
ASM_ADDR       DS      CL5
               ORG     ASM_DATA+039
ASM_STMT_NBR   DS      CL5
ASM_STMT_TYPE  DS      C
ASM_LABEL      DS      C
               ORG     ASM_DATA+125

               COPY    PPDDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
               DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               IFGACB  AM=VSAM
ACB_L          EQU     *-IFGACB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IFGRPL AM=VSAM
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         DCBD   DSORG=PS
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         COPY   REGEQU
         END    DISASMU1
