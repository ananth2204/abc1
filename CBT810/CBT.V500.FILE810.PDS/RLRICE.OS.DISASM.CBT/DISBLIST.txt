* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: DISBLIST                                              *
*                                                                     *
*  FUNCTION:                                                          *
*    Display/allow definition of BASE register(s)                     *
*                                                                     *
*                                                                     *
*    BASE blocks are chained from DISCOMM_BASE_NEXT.                  *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISBLIST CSECT
DISBLIST AMODE 31
DISBLIST RMODE ANY
         USING DISBLIST,R15
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'DISBLIST'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         DROP  R15
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        SET BASE REG
         USING OSCOMM,R12
         USING SESSION,R11
         USING DISBLIST,R10
         USING DISCOMM,R9
         L     R15,SESS_DXD_ADDR              WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15
         USING DXDBLIST,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         L     R8,COMM_OSSPFD
         USING OSSPFD,R8
         USING BASE_DSECT,R3
* ------------------------------------------------------------------- *
*                                                                     *
*        In order to allow the user to "cancel" changes,              *
*        first "copy" the existing BASE chain.                        *
*                                                                     *
* ------------------------------------------------------------------- *
         XC    DXD_BASE_NEXT,DXD_BASE_NEXT
         XC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         LA    R2,DXD_BASE_PREV
PREV     USING BASE_DSECT,R2
         ICM   R3,15,DISCOMM_BASE_NEXT        FIRST BASE
         BZ    INIT0020
INIT0010 DS    0H
         GETMAIN RU,                                                   +
               LV=BASE_DSECT_L,                                        +
               LOC=ANY
NEW      USING BASE_DSECT,R1
         MVC   NEW.BASE_DSECT(BASE_DSECT_L),BASE_DSECT
         ST    R1,PREV.BASE_NEXT
         LR    R2,R1
         ICM   R3,15,BASE_NEXT
         BNZ   INIT0010
         MVC   DXD_FIRST_DISPLAYED,DXD_BASE_NEXT
         DROP  NEW,PREV
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         L     R0,SPF_VDEPTH                  NBR OF LINES
         SLL   R0,2                           MULTIPLY BY 4
         ST    R0,DXD_BASE_TABLE_SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,DXD_BASE_TABLE              SAVE ADDRESS
         ITRACE ID=A_TABLE,                                            +
               RDATA1=R1
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=INIT_V
         L     R0,DISCOMM_VDATA_ADDR
         L     R1,DISCOMM_VDATA_LENGTH
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INITIALIZE VDATA
         L     R0,DXD_BASE_TABLE
         L     R1,DXD_BASE_TABLE_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                         INIT BASE TABLE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=FORMAT
         L     R6,SPF_VWIDTH                  SCREEN WIDTH
         SH    R6,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R6,1                           DIVIDE BY 2
         A     R6,DISCOMM_VDATA_ADDR          PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
MAIN0020 DS    0H
         MVC   0(MSG01_L,R6),MSG01            INITIALIZE
         A     R6,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0020                    LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R6,SPF_VWIDTH                  SCREEN WIDTH
         SH    R6,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R6,1                           DIVIDE BY 2
         A     R6,DISCOMM_VDATA_ADDR          PLUS VDATA ADDR
         USING MSG01,R6
         L     R7,SPF_VDEPTH
MAIN0030 DS    0H
         L     R4,DXD_BASE_TABLE              FIRST 'SLOT'
         XC    DXD_NBR_DISPLAYED,DXD_NBR_DISPLAYED
         ICM   R3,15,DXD_FIRST_DISPLAYED      FIRST TO DISPLAY
         BZ    MAIN0060                       NOTHING DEFINED YET
MAIN0040 DS    0H
         ITRACE ID=BUILD,                                              +
               RDATA1=R3,                                              +
               DATA2=BASE_DISP
         ST    R3,DXD_LAST_DISPLAYED          SAVE ADDR
         ST    R3,0(R4)                       SAVE ADDR
         UNPK  DXD_WORK(9),BASE_BEGIN(5)      UNPACK BEGIN DISP
         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE
         MVC   MSG01_BEGIN,DXD_WORK           COPY BEGIN
         UNPK  DXD_WORK(9),BASE_END(5)        UNPACK BEGIN DISP
         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE
         MVC   MSG01_END,DXD_WORK             COPY BEGIN
         UNPK  DXD_WORK(9),BASE_DISP(5)       UNPACK REF DISP
         TR    DXD_WORK(8),COMM_HEXCHAR       TRANSLATE
         MVC   MSG01_DISP,DXD_WORK            COPY DISP
         MVC   MSG01_REGISTER,BASE_CHAR_REGISTER
         LA    R1,1                           CONSTANT 1
         AH    R1,DXD_NBR_DISPLAYED           PLUS TOTAL SO FAR
         STH   R1,DXD_NBR_DISPLAYED           SAVE TOTAL
         LA    R4,4(,R4)                      NEXT IN ADDR TABLE
         A     R6,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0050
         B     MAIN0060
MAIN0050 DS    0H
         ICM   R3,15,BASE_NEXT
         BNZ   MAIN0040
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0060 DS    0H
         ITRACE ID=DISPLAY
         MVC   SESS_DISP_VDATA_ADDR,DISCOMM_VDATA_ADDR
         MVC   SESS_DISP_VDATA_LENGTH,DISCOMM_VDATA_LENGTH
         XC    SESS_DISP_CURSOR,SESS_DISP_CURSOR
         MVC   SESS_DISP_PANEL,PANEL_DISBLIST
         L     R15,COMM_V_OSDISP              DISP ENTRY POINT
         BALR  R14,R15                        DISPLAY
         ITRACE ID=DISP_RC,                                            +
               RDATA1=R15,                                             +
               DATA2=SPF_ZVERB
         LTR   R2,R15                         RC = 0?
         BNZ   MAIN0500                       NO
         CLC   ABEND,SPF_ZCMD                 ABEND?
         BE    ABEND000                       YES
         CLC   CANCEL,SPF_ZCMD                CANCEL?
         BE    MAIN0550                       YES
         CLC   CAN,SPF_ZCMD                   CAN(CEL)?
         BE    MAIN0550                       YES
* ------------------------------------------------------------------- *
*        Check for new or changes to existing BASE(s)                 *
* ------------------------------------------------------------------- *
         L     R6,SPF_VWIDTH                  SCREEN WIDTH
         SH    R6,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R6,1                           DIVIDE BY 2
         A     R6,DISCOMM_VDATA_ADDR          PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
         NI    DXD_FLAGS,255-$DXD_ERROR       RESET FLAG
         XC    DXD_CONV_OUT,DXD_CONV_OUT
MAIN0070 DS    0H
         ITRACE ID=VERIFY,                                             +
               DATA1=MSG01_REGISTER
         MVC   MSG01_MSG,COMM_BLANKS
         OC    MSG01_BEGIN,COMM_BLANKS
         OC    MSG01_END,COMM_BLANKS
         OC    MSG01_DISP,COMM_BLANKS
         OC    MSG01_REGISTER,COMM_BLANKS
         CLC   MSG01_BEGIN,COMM_BLANKS        BEGIN BLANK?
         BE    MAIN0100                       YES
         CLC   MSG01_END,COMM_BLANKS          END BLANK?
         BE    MAIN0120                       YES
         CLC   MSG01_REGISTER,COMM_BLANKS     REGISTER BLANK
         BE    MAIN0130                       YES

         ITRACE ID=VER_BEGN,                                           +
               DATA1=MSG01_BEGIN
         LA    R1,MSG01_BEGIN                 BEGIN DISP IN EFFECT
         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE
         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS
         L     R15,V_DISDCONV                 DISP CONVERTER EP
         BALR  R14,R15                        VERIFY BEGIN DISP
         LTR   R15,R15                        VALID DISP?
         BNZ   MAIN0090                       NO

         ITRACE ID=VER_END,                                            +
               DATA1=MSG01_END
         LA    R1,MSG01_END                   END DISP IN EFFECT
         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE
         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS
         L     R15,V_DISDCONV                 DISP CONVERTER EP
         BALR  R14,R15                        VERIFY BEGIN DISP
         LTR   R15,R15                        VALID DISP?
         BNZ   MAIN0090                       NO

         ITRACE ID=VER_DISP,                                           +
               DATA1=MSG01_DISP
         LA    R1,MSG01_DISP                  DISP REFERENCED
         ST    R1,DXD_CONV_SOURCE             SET DISP SOURCE
         LA    R1,DXD_CONV_PARMS              DISP CONVERTER PARMS
         L     R15,V_DISDCONV                 DISP CONVERTER EP
         BALR  R14,R15                        VERIFY BEGIN DISP
         LTR   R15,R15                        VALID DISP?
         BNZ   MAIN0090                       NO

MAIN0080 DS    0H
         BAL   R5,MAIN0450                    VERIFY REGISTER
         LTR   R1,R1                          REGISTER LOCATED?
         BZ    MAIN0140                       NO
         MVC   DXD_WORK(8),MSG01_BEGIN        COPY BEGIN DISP
         TR    DXD_WORK(8),CHARHEX            TRANSLATE
         PACK  DXD_BEGIN(5),DXD_WORK(9)       PACK BEGIN DISP
         MVC   DXD_WORK(8),MSG01_END          COPY END DISP
         TR    DXD_WORK(8),CHARHEX            TRANSLATE
         PACK  DXD_END(5),DXD_WORK(9)         PACK END DISP
         CLC   DXD_BEGIN,DXD_END              END > BEGIN?
         BNH   MAIN0160                       NO
         MVI   COMM_MSG_ID+1,1                SET MESSAGE ID
         B     MAIN0150
MAIN0090 DS    0H
         ITRACE ID=BADDIGIT
         MVI   COMM_MSG_ID+1,2                SET MESSAGE ID
         B     MAIN0150
MAIN0100 DS    0H
         CLC   MSG01_END,COMM_BLANKS          END BLANK?
         BE    MAIN0110                       YES
         MVI   COMM_MSG_ID+1,3                END, NO BEGIN
         B     MAIN0150
MAIN0110 DS    0H
         CLC   MSG01_REGISTER,COMM_BLANKS     REGISTER BLANK?
         BE    MAIN0160                       YES
         MVI   COMM_MSG_ID+1,4                REG, NO BEGIN
         B     MAIN0150
MAIN0120 DS    0H
         MVI   COMM_MSG_ID+1,5                BEGIN, NO END
         B     MAIN0150
MAIN0130 DS    0H
         MVI   COMM_MSG_ID+1,6                BEGIN, NO REGISTER
         B     MAIN0150
MAIN0140 DS    0H
         MVI   COMM_MSG_ID+1,7                BAD REGISTER
MAIN0150 DS    0H
         OI    DXD_FLAGS,$DXD_ERROR           ERROR HAS OCCURRED
         BAL   R5,MSG0000                     BUILD MESSAGE
         MVC   MSG01_MSG,COMM_MSG_1           COPY MESSAGE
MAIN0160 DS    0H
         A     R6,SPF_VWIDTH                  NEXT LINE
         BCT   R7,MAIN0070                    LOOP
         TM    DXD_FLAGS,$DXD_ERROR           ERROR(S)?
         BO    MAIN0060                       YES
* ------------------------------------------------------------------- *
*                                                                     *
*        No errors have been found                                    *
*                                                                     *
*        Determine if any BASE(s) were                                *
*          updated                                                    *
*          removed                                                    *
*          added                                                      *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R6,SPF_VWIDTH                  SCREEN WIDTH
         SH    R6,=Y(MSG01_L)                 MINUS WIDTH IN USE
         SRL   R6,1                           DIVIDE BY 2
         A     R6,DISCOMM_VDATA_ADDR          PLUS VDATA ADDR
         L     R7,SPF_VDEPTH                  NBR OF LINES
         L     R4,DXD_BASE_TABLE              FIRST BASE
MAIN0170 DS    0H
         L     R3,0(,R4)                      BASE BLOCK IF USED
         ITRACE ID=MAIN0170,                                           +
               RDATA1=R4,                                              +
               RDATA2=R3
         CLC   MSG01_BEGIN,COMM_BLANKS        BLANK?
         BE    MAIN0240                       YES

         LA    R1,MSG01_BEGIN
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_BEGIN
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS
         L     R15,V_DISDCONV
         BALR  R14,R15                        CONVERT BEGIN DISP

         LA    R1,MSG01_END
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_END
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS
         L     R15,V_DISDCONV
         BALR  R14,R15                        CONVERT END DISP

         LA    R1,MSG01_DISP
         ST    R1,DXD_CONV_SOURCE
         LA    R1,DXD_DISP
         ST    R1,DXD_CONV_OUT
         LA    R1,DXD_CONV_PARMS
         L     R15,V_DISDCONV
         BALR  R14,R15                        CONVERT REFERENCED DISP

         B     MAIN0190
MAIN0180 DS    0H
         XC    DXD_DISP,DXD_DISP              FORCE DISP=ZERO
MAIN0190 DS    0H
         BAL   R5,MAIN0450                    LOOKUP REGISTER
         LTR   R3,R3                          BASE EXIST?
         BZ    MAIN0210                       NO
         CLC   BASE_BEGIN,DXD_BEGIN           SAME BEGIN DISP?
         BNE   MAIN0200                       NO
         CLC   BASE_END,DXD_END               SAME END DISP?
         BNE   MAIN0200                       NO
         CLC   BASE_DISP,DXD_DISP             SAME REFERENCED DISP?
         BNE   MAIN0200                       NO
         CLC   BASE_CHAR_REGISTER,DXD_REG_CHAR   SAME REGISTER?
         BE    MAIN0280                       YES
MAIN0200 DS    0H
         ITRACE ID=UPDTBASE
         OI    DXD_FLAGS,$DXD_UPDATE          BASE HAS BEEN UPDATED
         MVC   BASE_BEGIN,DXD_BEGIN           CHANGE BEGIN DISP
         MVC   BASE_END,DXD_END               CHANGE END DISP
         MVC   BASE_DISP,DXD_DISP             CHANGE REF DISP
         MVC   BASE_CHAR_REGISTER,DXD_REG_CHAR   CHANGE CHAR REGISTER
         MVC   BASE_REGISTER,DXD_REG_BIN      CHANGE BINARY REGISTER
         B     MAIN0280
MAIN0210 DS    0H
         ITRACE ID=NEW_BASE
         OI    DXD_FLAGS,$DXD_UPDATE
         GETMAIN RU,                                                   +
               LV=BASE_DSECT_L,                                        +
               LOC=ANY
NEW      USING BASE_DSECT,R1
         XC    NEW.BASE_DSECT(BASE_DSECT_L),NEW.BASE_DSECT
         MVC   NEW.BASE_EYE,BASE_ID           IDENTIFY BLOCK
         MVC   NEW.BASE_BEGIN,DXD_BEGIN       SET BEGIN DISP
         MVC   NEW.BASE_END,DXD_END           SET END DISP
         MVC   NEW.BASE_DISP,DXD_DISP         SET DISP REFERENCED
         MVC   NEW.BASE_CHAR_REGISTER,DXD_REG_CHAR
         MVC   NEW.BASE_REGISTER,DXD_REG_BIN  COPY BINARY REGISTER
         LA    R3,DXD_BASE_PREV               FIRST BASE
MAIN0220 DS    0H
         ICM   R2,15,BASE_NEXT                ANOTHER ON CHAIN?
         BZ    MAIN0230                       YES
         LR    R3,R2                          COPY ADDRESS
         B     MAIN0220
MAIN0230 DS    0H
         ST    R1,BASE_NEXT                   SET 'NEXT' IN PREVIOUS
         ST    R3,NEW.BASE_PREV               SET PREV IN NEW
         OC    DXD_FIRST_DISPLAYED,DXD_FIRST_DISPLAYED
         BNZ   MAIN0280                       BLOCK PRESENT
         ST    R1,DXD_FIRST_DISPLAYED         SET FIRST ON CHAIN
         B     MAIN0280
         DROP  NEW
MAIN0240 DS    0H
         LTR   R3,R3                          BASE EXIST?
         BZ    MAIN0280                       NO
         OI    DXD_FLAGS,$DXD_UPDATE          A BASE WAS UPDATED
         ITRACE ID=DEL_BASE,                  DELETING A BASE          +
               RDATA1=R3,                                              +
               DATA2=BASE_BEGIN
         ICM   R1,15,BASE_NEXT                NEXT BASE ON CHAIN
         BZ    MAIN0250
NEXT     USING BASE_DSECT,R1
         MVC   NEXT.BASE_PREV,BASE_PREV       SET PREV IN NEXT
         DROP  NEXT
MAIN0250 DS    0H
         ICM   R1,15,BASE_PREV                PREVIOUS ON CHAIN
         BZ    MAIN0260                       NO PREVIOUS BLOCK
PREV     USING BASE_DSECT,R1
         MVC   PREV.BASE_NEXT,BASE_NEXT       SET NEXT IN PREVIOUS
MAIN0260 DS    0H
         C     R3,DXD_FIRST_DISPLAYED         FIRST BASE DISPLAYED?
         BNE   MAIN0270                       NO
         MVC   DXD_FIRST_DISPLAYED,BASE_NEXT  CHANGE TO NEXT BLOCK
MAIN0270 DS    0H
         ITRACE ID=DEL_FREE,                                           +
               RDATA1=R3
         FREEMAIN RU,                         FREEMAIN THE BASE        +
               A=(R3),                                                 +
               LV=BASE_DSECT_L
         XC    0(4,R4),0(R4)                  CLEAR ADDR IN TABLE
MAIN0280 DS    0H
         ITRACE ID=NEXT
         A     R6,SPF_VWIDTH                  NEXT LINE
         LA    R4,4(,R4)                      NEXT IN TABLE
         BCT   R7,MAIN0170                    LOOP
         TM    DXD_FLAGS,$DXD_UPDATE          ANY UPDATES?
         BO    MAIN0010                       YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLI   SPF_ZVERB,C'B'                 BOTTOM?
         BE    MAIN0300
         CLI   SPF_ZVERB,C'D'                 DOWN?
         BE    MAIN0320
         CLI   SPF_ZVERB,C'T'                 TOP?
         BE    MAIN0330
         CLI   SPF_ZVERB,C'U'                 UP?
         BE    MAIN0340
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0300 DS    0H
         ITRACE ID=BOTTOM
         ICM   R1,15,DXD_BASE_NEXT            FIRST ON CHAIN
TEMP     USING BASE_DSECT,R1
         BZ    EXIT0000                       SHOULD NOT HAPPEN!
MAIN0310 DS    0H
         LR    R3,R1                          SAVE THIS ADDR
         ICM   R1,15,TEMP.BASE_NEXT           NEXT BASE
         BNZ   MAIN0310
         B     MAIN0010                       BUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0320 DS    0H
         ITRACE ID=DOWN
         CLI   SPF_ZSCROLLA,C'M'              MAX?
         BE    MAIN0300                       YES
         L     R3,DXD_LAST_DISPLAYED          LAST ITEM DISPLAYED
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0330 DS    0H
         ITRACE ID=TOP
         L     R3,DXD_BASE_NEXT               FIRST DATA ITEM
         B     MAIN0010
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0340 DS    0H
         ITRACE ID=UP
         CLI   SPF_ZSCROLLA,C'M'              MAX?
         BE    MAIN0330                       YES
         ICM   R1,15,DXD_FIRST_DISPLAYED      FIRST ON DISPLAY
         BZ    EXIT0000                       SHOULD NOT HAPPEN!
         L     R7,SPF_ZSCROLLN                LINES ON DISPLAY
MAIN0350 DS    0H
         LR    R3,R1                          COPY ADDR
         ICM   R1,15,TEMP.BASE_PREV           PREVIOUS BASE
         BZ    MAIN0010
         BCT   R7,MAIN0350                    LOOP
         B     MAIN0010
         DROP  TEMP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0450 DS    0H
         ITRACE ID=VER_REG,                                            +
               DATA1=MSG01_REGISTER
         LA    R1,2                           MAX LOOPS
MAIN0460 DS    0H
         CLI   MSG01_REGISTER,C' '            BLANK?
         BNE   MAIN0470                       NO
         ITRACE ID=SHIFT
         MVC   MSG01_REGISTER(2),MSG01_REGISTER+1
         MVI   MSG01_REGISTER+2,C' '          INSERT BLANK
         BCT   R1,MAIN0460
MAIN0470 DS    0H
         LA    R1,$NBR_IN_TABLE               NBR IN REG TABLE
         LA    R2,REG_TABLE                   REG TABLE
         USING REG_DSECT,R2
MAIN0480 DS    0H
         CLC   REG_A,MSG01_REGISTER           LOCATED?
         BE    MAIN0490                       YES
         LA    R2,REG_DSECT_L(,R2)            NEXT
         BCT   R1,MAIN0480                    LOOP
         ITRACE ID=BAD_REG
         BR    R5
MAIN0490 DS    0H
         ITRACE ID=GOOD_REG,                                           +
               DATA1=REG_A
         MVC   DXD_REG_CHAR,REG_B             COPY CHAR FORM
         MVC   DXD_REG_BIN,REG_C              COPY BINARY FORM
         BR    R5
         DROP  R2
* ------------------------------------------------------------------- *
*                                                                     *
*      Replace the existing BASE chain with the updated chain         *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0500 DS    0H
         ITRACE ID=SWITCH
         ICM   R3,15,DISCOMM_BASE_NEXT        FIRST USER BASE
         BZ    MAIN0520
MAIN0510 DS    0H
         LR    R1,R3                          COPY ADDRESS
         ICM   R3,15,BASE_NEXT                NEXT BASE
         ITRACE ID=SWCHFREE,                                           +
               RDATA1=R1
         FREEMAIN RU,                         FREEMAIN THIS BASE       +
               A=(1),                                                  +
               LV=BASE_DSECT_L
         LTR   R3,R3                          ANOTHER BASE?
         BNZ   MAIN0510                       YES
MAIN0520 DS    0H
         ITRACE ID=COPY_NEW,                                           +
               DATA1=(DXD_BASE_NEXT,4)
         MVC   DISCOMM_BASE_NEXT,DXD_BASE_NEXT
         XC    DXD_BASE_NEXT,DXD_BASE_NEXT    RESET
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0550 DS    0H
         ITRACE ID=CANCEL
         MVC   SPF_ZCMD,COMM_BLANKS           RESET COMMAND
         ICM   R3,15,DXD_BASE_NEXT            FIRST ON NEW CHAIN
         BZ    EXIT0000                       NONE ON CHAIN
MAIN0560 DS    0H
         LR    R1,R3                          COPY ADDR
         ICM   R3,15,BASE_NEXT                NEXT BASE BLOCK
         ITRACE ID=CAN_FREE,                                           +
               RDATA1=R1
         FREEMAIN RU,                         FREE THIS BLOCK          +
               A=(1),                                                  +
               LV=BASE_DSECT_L
         LTR   R3,R3                          ANOTHER BLOCK?
         BNZ   MAIN0560                       YES
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVI   COMM_MSG_ID,0
         ITRACE ID=MSG,                                                +
               DATA1=(COMM_MSG_ID,2)
         MVC   COMM_MSG_CSECT,MODID
         L     R15,COMM_V_OSMSG
         BALR  R14,R15
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R0,DXD_BASE_TABLE_SIZE         ADDR TABLE SIZE
         L     R1,DXD_BASE_TABLE              ADDR TABLE ADDR
         FREEMAIN RU,                         FREEMAIN ADDR TABLE      +
               A=(1),                                                  +
               LV=(0)
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         L     R14,12(,R13)                   RESTORE REGISTERS         ASE01680
         LR    R15,R2                         SET RC
         LM    R0,R12,20(R13)                 RESTORE REGISTERS         ASE01680
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         ITRACE ID=ABEND
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START     DC   Q(DXDBLIST)
V_DISDCONV    DC   V(DISDCONV)

ABEND         DC   C'ABEND '
BASE_ID       DC   CL8'BASE'
CAN           DC   C'CAN '
CANCEL        DC   C'CANCEL '
PANEL_DISBLIST DC  CL8'DISBLIST'

              LTORG

CHARHEX       DC   256X'00'
              ORG  CHARHEX+C'A'
              DC   X'0A0B0C0D0E0F'
              ORG  CHARHEX+C'0'
              DC   X'00010203040506070809'
              ORG

REG_TABLE     DS   0C
              DC   C'0  ',C'R0 ',X'00'
              DC   C'1  ',C'R1 ',X'01'
              DC   C'2  ',C'R2 ',X'02'
              DC   C'3  ',C'R3 ',X'03'
              DC   C'4  ',C'R4 ',X'04'
              DC   C'5  ',C'R5 ',X'05'
              DC   C'6  ',C'R6 ',X'06'
              DC   C'7  ',C'R7 ',X'07'
              DC   C'8  ',C'R8 ',X'08'
              DC   C'9  ',C'R9 ',X'09'
              DC   C'10 ',C'R10',X'0A'
              DC   C'11 ',C'R11',X'0B'
              DC   C'12 ',C'R12',X'0C'
              DC   C'13 ',C'R13',X'0D'
              DC   C'14 ',C'R14',X'0E'
              DC   C'15 ',C'R15',X'0F'
              DC   C'A  ',C'R10',X'0A'
              DC   C'B  ',C'R11',X'0B'
              DC   C'C  ',C'R12',X'0C'
              DC   C'D  ',C'R13',X'0D'
              DC   C'E  ',C'R14',X'0E'
              DC   C'F  ',C'R15',X'0F'
              DC   C'R0 ',C'R0 ',X'00'
              DC   C'R1 ',C'R1 ',X'01'
              DC   C'R2 ',C'R2 ',X'02'
              DC   C'R3 ',C'R3 ',X'03'
              DC   C'R4 ',C'R4 ',X'04'
              DC   C'R5 ',C'R5 ',X'05'
              DC   C'R6 ',C'R6 ',X'06'
              DC   C'R7 ',C'R7 ',X'07'
              DC   C'R8 ',C'R8 ',X'08'
              DC   C'R9 ',C'R9 ',X'09'
              DC   C'R10',C'R10',X'0A'
              DC   C'R11',C'R11',X'0B'
              DC   C'R12',C'R12',X'0C'
              DC   C'R13',C'R13',X'0D'
              DC   C'R14',C'R14',X'0E'
              DC   C'R15',C'R15',X'0F'
              DC   X'000000',C'   ',X'00'    DUMMY ENTRY
REG_TABLE_L   EQU  *-REG_TABLE
$NBR_IN_TABLE EQU  REG_TABLE_L/REG_DSECT_L


MSG01         DS   0C
              DC   AL1($SCREEN_ATTR_INPUT)
MSG01_BEGIN   DC   CL8' '
              DC   AL1($SCREEN_ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($SCREEN_ATTR_INPUT)
MSG01_END     DC   CL8' '
              DC   AL1($SCREEN_ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($SCREEN_ATTR_INPUT)
MSG01_DISP    DC   CL8' '
              DC   AL1($SCREEN_ATTR_NORMAL)
              DC   CL3' '
              DC   AL1($SCREEN_ATTR_INPUT)
MSG01_REGISTER DC  CL3' '
              DC   AL1($SCREEN_ATTR_HIGH_YELLOW)
MSG01_MSG     DC   CL30' '
MSG01_L       EQU  *-MSG01

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDBLIST              DSECT
                      COPY DXDPREF

DXD_BASE_PREV         DS  A             DUMMY FOR 'PREV' ON CHAIN
DXD_BASE_NEXT         DS  A             FIRST DATA ITEM ON CHAIN

DXD_FIRST_DISPLAYED   DS  A             FIRST DATA ITEM DISPLAYED
DXD_LAST_DISPLAYED    DS  A             LAST DATA ITEM DISPLAYED

DXD_BASE_TABLE        DS  A
DXD_BASE_TABLE_SIZE   DS  F

DXD_CONV_PARMS        DS  0A
DXD_CONV_SOURCE       DS  A
DXD_CONV_OUT          DS  A

DXD_BEGIN             DS  F
DXD_END               DS  F
DXD_DISP              DS  F
DXD_REG_CHAR          DS  CL3
DXD_REG_BIN           DS  X

DXD_NBR_DISPLAYED     DS  H             NBR OF DATA ITEMS DISPLAYED

DXD_FLAGS             DS  X             FLAGS
$DXD_ERROR            EQU X'80'         .. SERIOUS ERROR
$DXD_UPDATE           EQU X'40'         .. BASE(S) UPDATED

DXD_WORK              DS  CL9
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REG_DSECT     DSECT
REG_A         DS      CL3
REG_B         DS      CL3
REG_C         DS      X                 FORM IN INSTRUCTIONS
REG_DSECT_L   EQU     *-REG_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 SESSION  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 BPXYSTAT DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     OPERAND
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 OSSPFD   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     ATTRS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     REGEQU
              END     DISBLIST
