*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENSS1                                               *
*                                                                    *
*  Function:                                                         *
*   GENERATE SS TYPE INSTRUCTIONS (MVC, CLC, ...                     *
*                                                                    *
*  At entry R7 is AREA address                                       *
*           R5 is address of instruction                             *
*           R4 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENSS1   CSECT
GENSS1   AMODE 31
GENSS1   RMODE ANY
         USING GENSS1,R15
         USING OSCOMM,R12
         USING SESSION,R11
         USING DISCOMM,R9
         USING AREA_DSECT,R7
         USING OPCODE_DSECT,R4
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENSS1'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        SET BASE REG
         DROP  R15
         USING GENSS1,R10
         L     R15,SESS_DXD_ADDR              WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDSS1,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R7,                                              +
               DATA2=0(R5)
         MVC   DXD_BLANKS,COMM_BLANKS
         MVC   DXD_LENGTH,1(R5)               COPY LENGTH
         SR    R2,R2
         IC    R2,2(R5)                       BASE 1 AND PART OF DISP 1
         SRL   R2,4                           SHIFT OUT DISP
         STC   R2,DXD_BASE1
         MVC   DXD_DISP1,2(R5)                COPY BASE 1 AND DISP 1
         NI    DXD_DISP1,X'0F'                REMOVE BASE 1
         IC    R2,4(R5)                       BASE 2 AND PART OF DISP 2
         SRL   R2,4                           SHIFT OUT DISP
         STC   R2,DXD_BASE2                   SAVE BASE 2
         MVC   DXD_DISP2,4(R5)                COPY BASE 2 AND DISP 2
         NI    DXD_DISP2,X'0F'                REMOVE BASE 2
         LA    R1,DISCOMM_SOURCE_OPERAND1
         ICM   R6,15,AREA_REF_LABEL1          LABEL FOR OPERAND 1?
         BZ    GEN0030                        NO
         USING LABEL_DSECT,R6
*--------------------------------------------------------------------*
*        GENERATE LABEL(LENGTH)                                      *
*--------------------------------------------------------------------*
         ICM   R2,15,AREA_REF_USING1          USING BLOCK ADDR?
         BZ    GEN0010                        NO
         USING USING_DSECT,R2
         CLC   USING_NAME,COMM_BLANKS         NAME BLANK?
         BE    GEN0010                        YES
         MVC   0(L'USING_NAME,R1),USING_NAME  COPY NAME
         BAL   R15,SCAN0000                   FIND END OF NAME
         MVI   0(R1),C'.'                     INSERT DELIMITER
         LA    R1,1(,R1)                      UPDATE OUTPUT ADDRESS
*--------------------------------------------------------------------*
*        GENERATE "LABEL1(LL)"                                       *
*--------------------------------------------------------------------*
GEN0010  DS    0H
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME
         BAL   R15,SCAN0000                   FIND END OF NAME
         ICM   R14,15,AREA_REF_DISP1          DISP FROM LABEL
         BZ    GEN0020
         CVD   R14,COMM_DWORD                 CONVERT TO DECIMAL
         MVI   0(R1),C'+'                     INSERT PLUS
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000
         MVC   1(4,R1),0(R2)                  COPY DISP
         BAL   R15,SCAN0000
GEN0020  DS    0H
         MVI   0(R1),C'('                     OPEN PAREN
         SR    R14,R14
         IC    R14,DXD_LENGTH                 LENGTH
         LA    R14,1(,R14)                    FULL LENGTH
         CVD   R14,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000                   FIND 1ST NON ZERO
         MVC   1(3,R1),0(R2)                  COPY LENGTH
         BAL   R15,SCAN0000
         MVI   0(R1),C')'                     CLOSING PAREN
         LA    R1,1(,R1)                      UPDATE OUTPUT ADDRESS
         B     GEN0040
*--------------------------------------------------------------------*
*        Generate "DDD1(LL,B1)"                                      *
*--------------------------------------------------------------------*
GEN0030  DS    0H
         LH    R14,DXD_DISP1                  DISP 1
         CVD   R14,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000                   FIND 1ST NON BLANK
         MVC   DISCOMM_SOURCE_OPERAND1(3),0(R2) COPY DISP
         LA    R1,DISCOMM_SOURCE_OPERAND1
         BAL   R15,SCAN0000
         MVI   0(R1),C'('                     OPEN PAREN
         SR    R14,R14
         IC    R14,DXD_LENGTH
         LA    R14,1(,R14)                    FULL LENGTH
         CVD   R14,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000                   FIND 1ST NON BLANK
         MVC   1(3,R1),0(R2)                  COPY LENGTH
         BAL   R15,SCAN0000                   FIND 1ST NON BLANK
         MVI   0(R1),C','                     INSERT COMMA
         MVI   1(R1),C'R'                     INSERT COMMA
         SR    R2,R2
         IC    R2,DXD_BASE1
         SLL   R2,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R2)
         MVC   2(2,R1),0(R2)                  COPY REGISTER
         BAL   R15,SCAN0000
         MVI   0(R1),C')'                     CLOSE PARM
         LA    R1,1(,R1)                      UPDATE OUTPUT ADDRESS
*--------------------------------------------------------------------*
*        Comma to delimit operand1 and operand2                      *
*--------------------------------------------------------------------*
GEN0040  DS    0H
         MVI   0(R1),C','
         LA    R1,1(,R1)                      UPDATE OUTPUT ADDRESS
*--------------------------------------------------------------------*
*        Generate LABEL2                                             *
*--------------------------------------------------------------------*
         ICM   R6,15,AREA_REF_LABEL2          LABEL FOR OPERAND2?
         BZ    GEN0060                        NO
         ICM   R2,15,AREA_REF_USING2          USING BLOCK ADDR?
         BZ    GEN0050                        NO
         CLC   USING_NAME,COMM_BLANKS         NAME BLANK?
         BE    GEN0050                        YES
         MVC   0(L'USING_NAME,R1),USING_NAME  COPY NAME
         BAL   R15,SCAN0000                   FIND END OF NAME
         MVI   0(R1),C'.'                     INSERT DELIMITER
         LA    R1,1(,R1)                      UPDATE OUTPUT ADDRESS
GEN0050  DS    0H
         MVC   0(L'LABEL_NAME,R1),LABEL_NAME  COPY NAME
         ICM   R14,15,AREA_REF_DISP2          DISP FROM LABEL?
         BZ    EXIT0000                       NO
         BAL   R15,SCAN0000
         MVI   0(R1),C'+'                     PLUS
         CVD   R14,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000                   FIND 1ST NON BLANK
         MVC   1(4,R1),0(R2)                  COPY DISP
         B     EXIT0000
*--------------------------------------------------------------------*
*        Generate "DDD2(B2)"                                         *
*--------------------------------------------------------------------*
GEN0060  DS    0H
         SR    R14,R14
         ICM   R14,3,DXD_DISP2                DISP 2
         CVD   R14,COMM_DWORD
         MVC   DXD_EDIT_WORD,EDIT_WORD
         ED    DXD_EDIT_WORD,COMM_DWORD+4     EDIT LENGTH
         LA    R2,DXD_EDIT_WORD
         BAL   R15,SCAN1000                   FIND 1ST NON BLANK
         MVC   0(4,R1),0(R2)
         BAL   R15,SCAN0000                   FIND BLANK
         MVI   0(R1),C'('
         MVI   1(R1),C'R'
         SR    R2,R2
         IC    R2,DXD_BASE2                   BASE 2
         SLL   R2,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R2)
         MVC   2(2,R1),0(R2)                  COPY REGISTER
         BAL   R15,SCAN0000
         MVI   0(R1),C')'                     CLOSING PAREN
         B     EXIT0000
*--------------------------------------------------------------------*
*        Find next blank                                             *
*--------------------------------------------------------------------*
SCAN0000 DS    0H
         CLI   0(R1),C' '
         BER   R15
         LA    R1,1(,R1)
         B     SCAN0000
*--------------------------------------------------------------------*
*        Find first non-zero                                         *
*--------------------------------------------------------------------*
SCAN1000 DS    0H
         CLI   0(R2),C' '
         BNER  R15
         LA    R2,1(,R2)
         B     SCAN1000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDSS1)
EDIT_WORD      DC   X'4020202020202120'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDSS1         DSECT
               COPY DXDPREF
DXD_DISP1      DS   H
DXD_DISP2      DS   H
DXD_BASE1      DS   X
DXD_BASE2      DS   X
DXD_LENGTH     DS   X

DXD_EDIT_WORD  DS   XL8
DXD_BLANKS     DS   CL8
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               SESSION  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               BPXYSTAT DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     REGEQU
               END      GENSS1
