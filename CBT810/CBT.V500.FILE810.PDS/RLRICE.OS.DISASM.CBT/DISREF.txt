* ------------------------------------------------------------------- *
*                                                                     *
*        Determine LABELs referenced                                  *
*                                                                     *
*                                                                     *
*  DISSCAN has examined the CSECT TEXT.                               *
*  The entire CSECT is now described by AREA blocks.                  *
*                                                                     *
*  For any ADCONs                                                     *
*    Cause a LABEL to be generated at the point referenced            *
*                                                                     *
*                                                                     *
*  Determine type of addressing used...                               *
*                                                                     *
*  For base+displacement                                              *
*                                                                     *
*    For any instruction operands                                     *
*      Search the BASEs                                               *
*      If a BASE is found                                             *
*        If the area referenced is DATA, cause a LABEL to be          *
*           generated at the point referenced.                        *
*        If the area referenced is an instruction, cause a label      *
*           to be generated at the instruction                        *
*                                                                     *
*      If NO BASE is found, search the USINGs                         *
*        If a USING is found, build a REF block to tie                *
*        the instruction to the LABEL within the DSECT.               *
*                                                                     *
*                                                                     *
*  For "relative" addressing                                          *
*    Add the "relative" amount (from the instruction itself) to the   *
*       current displacement (should reference another instruction).  *
*    If the area could not be located, this is actually data that     *
*       "looked like" an instruction.. force type back to "data".     *
*    If the area was located, generate a label at the referenced      *
*       area and save the label block address for the operand         *
*       reference.                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DISREF   CSECT
DISREF   AMODE 31
DISREF   RMODE ANY
         USING DISREF,R15
         B     INIT0000                       SKIP EYECATCHER
MODID    DC    CL8'DISREF'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        SET BASE REG
         DROP  R15
         USING OSCOMM,R12
         USING SESSION,R11
         USING DISREF,R10
         USING DISCOMM,R9
         L     R15,SESS_DXD_ADDR
         A     R15,DXD_START
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         USING DXDREF,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY
         ZAP   DXD_LABEL_NBR,P0
CURRENT  USING AREA_DSECT,R7
LOCATE   USING AREA_DSECT,R6
NEW      USING AREA_DSECT,R5
         USING LABEL_DSECT,R4
         USING OPCODE_DSECT,R3
* ------------------------------------------------------------------- *
*                                                                     *
*        Generate LABELs with ENTRY name(s)                           *
*                                                                     *
* ------------------------------------------------------------------- *
ESD0000  DS    0H
         ICM   R2,15,DISCOMM_ESD_NEXT         ANY ESD ITEMS?
         BZ    REF0000                        NO
         USING ESD_DSECT,R2
ESD0010  DS    0H
         CLC   ESD_TYPE,=C'LD'                LD?
         BNE   ESD0050                        NO
         CLC   ESD_TYPE_QUAL,=C'LD'           LD?
         BNE   ESD0050                        NO
         CLC   ESD_NAME,DISCOMM_CSECT         NAME = CSECT NAME?
         BE    ESD0050                        YES
         MVC   DXD_DISP,ESD_ELEM_OFFSET       COPY OFFSET (DISP)
         ITRACE ID=ESD_LKUP,                  LOOKING UP AREA          +
               DATA1=ESD_NAME,                .. ITEM NAME             +
               DATA2=(DXD_DISP,4)             .. DISPLACEMENT
         BAL   R8,REF0300                     FIND REFERENCED AREA
         LTR   R6,R6                          AREA LOCATED?
         BZ    ESD0040                        NO
         CLI   LABEL_NAME,C'-'                INITIAL NAME?
         BNE   ESD0020                        NO
         MVC   LABEL_NAME,COMM_BLANKS
         MVC   LABEL_NAME(L'ESD_NAME),ESD_NAME
         MVI   LABEL_TYPE,$LABEL_ESD          LABEL DUE TO ESD REF
         B     ESD0050
ESD0020  DS    0H
         ICM   R1,15,LABEL_NEXT               ANOTHER ON CHAIN?
         BZ    ESD0030                        NO
         LR    R4,R1                          COPY ADDRESS
         B     ESD0020                        YES
ESD0030  DS    0H
         GETMAIN RU,                                                   +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
         XC    0(LABEL_DSECT_L,R1),0(R1)      INITIALIZE THE BLOCK
         ST    R1,LABEL_NEXT                  CHAIN FORWARD
         ST    R4,0(R1)                       CHAIN BACKWARD
         LR    R4,R1                          COPY NEW BLOCK ADDRESS
         MVC   LABEL_EYE,LABEL_ID             IDENTIFY THE BLOCK
         MVC   LABEL_NAME,COMM_BLANKS
         MVC   LABEL_NAME(L'ESD_NAME),ESD_NAME
         MVI   LABEL_TYPE,$LABEL_ESD          IDENTIFY LABEL TYPE
         ITRACE ID=OTHERLBL,                                           +
               RDATA1=R4,                                              +
               DATA2=LABEL_NAME
ESD0040  DS    0H
         ITRACE ID=NO_AREA
ESD0050  DS    0H
         ICM   R2,15,ESD_NEXT                 ANOTHER ESD ITEM?
         BNZ   ESD0010                        YES
         DROP  R2
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REF0000  DS    0H
         ITRACE ID=REF0000,                                            +
               DATA1=DISCOMM_ALL_AREA_NEXT
         ICM   R7,15,DISCOMM_ALL_AREA_NEXT    FIRST AREA BLOCK
         BZ    EXIT0000                       NO AREAS
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Top of AREA loop                                             *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0010  DS    0H
         ITRACE ID=AREA,                                               +
               DATA1=CURRENT.AREA_BEGIN,                               +
               DATA2=CURRENT.AREA_TYPE
         CLI   CURRENT.AREA_TYPE,$AREA_DATA   DATA AREA?
         BE    REF0020                        YES
         CLI   CURRENT.AREA_TYPE,$AREA_INSTRUCTION
         BE    REF0100                        YES
         ITRACE ID=BAD_TYPE
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
*        ADCONs will cause a LABEL to be generated                    *
*                                                                     *
* ------------------------------------------------------------------- *
REF0020  DS    0H
         ITRACE ID=DATAAREA,                                           +
               DATA1=CURRENT.AREA_DATA_TYPE
         CLI   CURRENT.AREA_DATA_TYPE,$DATA_ACON
         BNE   REF0290                        NO.. GO TO NEXT AREA
         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP
         ICM   R1,15,CURRENT.AREA_BEGIN       DISPLACEMENT TO ADCON
         A     R1,DISCOMM_CSECT_TEXT          PLUS BASE ADDRESS
         CLI   CURRENT.AREA_LENGTH+3,4        4-BYTE ADCON?
         BE    REF0030                        YES
         CLI   CURRENT.AREA_LENGTH+3,3        3-BYTE ADCON?
         BE    REF0040                        YES
         CLI   CURRENT.AREA_LENGTH+3,2        2-BYTE ADCON?
         BE    REF0050                        YES
         MVC   DXD_DISP+3(1),0(R1)            COPY DISPLACEMENT
         B     REF0060
REF0030  DS    0H
         MVC   DXD_DISP,0(R1)                 COPY DISPLACEMENT
         B     REF0060
REF0040  DS    0H
         MVC   DXD_DISP+1(3),0(R1)            COPY DISPLACEMENT
         B     REF0060
REF0050  DS    0H
         MVC   DXD_DISP+2(2),0(R1)            COPY DISPLACEMENT
REF0060  DS    0H
         ITRACE ID=ADCON,                                              +
               DATA1=(CURRENT.AREA_BEGIN,4),                           +
               DATA2=(DXD_DISP,4)
         TM    DXD_DISP,X'80'                 31-BIT MODE BIT ON?
         BNO   REF0070                        NO
         OI    CURRENT.AREA_DATA_TYPE,$DATA_31  SET 31-BIT INDICATOR
         NI    DXD_DISP,X'7F'                 TURN BIT OFF
REF0070  DS    0H
         BAL   R8,REF0300                     FIND LABEL WITHIN CSECT
         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP
         B     REF0290                        GO TO NEXT AREA
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        The current area is in instruction                           *
*                                                                     *
*        If operand 1 or operand 2 has a "BASE+DISP" type             *
*        operand, determine if the "BASE" is a base register          *
*        for the CSECT or for an area defined via a USING.            *
*                                                                     *
*        If the instruction uses "relative" addressing, compute       *
*        the referenced displacement.                                 *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0100  DS    0H
         ICM   R3,15,CURRENT.AREA_OPCODE      OPCODE DEFINITION
         ICM   R15,15,OPCODE_EXIT             MODIFICATION EXIT?
         BZ    REF0110                        NO
* ------------------------------------------------------------------- *
*        Call opcode modification exit                                *
* ------------------------------------------------------------------- *
         ST    R3,DXD_EXIT_OPCODE             SET OPCODE ENTRY ADDR
         ICM   R1,15,CURRENT.AREA_BEGIN       DISP TO INSTRUCTION
         A     R1,DISCOMM_CSECT_TEXT          PLUS TEXT BASE
         ST    R1,DXD_EXIT_TEXT               ADDR OF INSTRUCTION TEXT
         ITRACE ID=MOD,                                                +
               RDATA1=R15,                                             +
               DATA2=(0(R1),4)
         LA    R1,DXD_EXIT_PARMS              MOD EXIT PARM LIST
         BALR  R14,R15                        CALL MODIFICATION EXIT
         ITRACE ID=MOD_X,                                              +
               DATA1=(OPCODE_MNEMONIC,5),                              +
               DATA2=(OPCODE_FLAGS,1)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REF0110  DS    0H
         ICM   R1,15,CURRENT.AREA_BEGIN
         A     R1,DISCOMM_CSECT_TEXT
         SR    R2,R2
         ICM   R2,3,OPCODE_LENGTH
         BCTR  R2,0
         XC    COMM_INFO_01(8),COMM_INFO_01
         EX    R2,OP_MVC
         ITRACE ID=INSTRUCT,                                           +
               DATA1=OPCODE_MNEMONIC,         .. MNEMONIC              +
               DATA2=COMM_INFO_01
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    OPCODE_FLAGS,$OPCODE_RELATIVE  RELATIVE ADDRESSING?
         BO    REF0200                        YES
* ------------------------------------------------------------------- *
*        Split out the base and displacement for operand 1            *
* ------------------------------------------------------------------- *
         TM    OPCODE_REF,$OPCODE_REF1        2ND AND 3RD BYTES A BDDD?
         BNO   REF0140                        NO
         L     R1,CURRENT.AREA_BEGIN          INSTRUCTION DISP
         A     R1,DISCOMM_CSECT_TEXT          PLUS BASE
         SR    R14,R14
         ICM   R14,1,2(R1)                    BASE AND NIBBLE 1 OF DISP
         SRL   R14,4                          SHIFT OUT DISP
         STC   R14,DXD_BASE                   SAVE BASE
         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP
         MVC   DXD_DISP+2(2),2(R1)            COPY DISP FROM OPERAND
         NI    DXD_DISP+2,X'0F'               REMOVE BASE
* ------------------------------------------------------------------- *
*        Search BASES for operand 1                                   *
* ------------------------------------------------------------------- *
         USING BASE_DSECT,R2
         ITRACE ID=OP1_REF,                                            +
               DATA1=DXD_BASE
         BAL   R15,REF0500                    CHECK BASES
         LTR   R2,R2                          BASE LOCATED?
         BZ    REF0130                        NO
* ------------------------------------------------------------------- *
*        Operand 1 references a defined base                          *
*        Locate the AREA block                                        *
* ------------------------------------------------------------------- *
         ICM   R1,15,BASE_DISP                DISP BASE REFERS TO
         A     R1,DXD_DISP                    PLUS DISP FROM OPERAND
         ST    R1,DXD_DISP                    DISP TO SEARCH FOR
         ITRACE ID=BASE1,                                              +
               DATA1=DXD_BASE,                .. BASE REG              +
               DATA2=DXD_DISP                 .. DISP REFERENCED
         BAL   R8,REF0300                     LOCATE REFERENCED AREA
         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP
         XC    CURRENT.AREA_REF_USING1,CURRENT.AREA_REF_USING1
         B     REF0140
* ------------------------------------------------------------------- *
*        Determine if operand 1 references a defined USING            *
* ------------------------------------------------------------------- *
REF0130  DS    0H
         ITRACE ID=REF0130
         BAL   R15,REF0600                    CHECK USINGS
         LTR   R2,R2                          USING FOUND?
         BZ    REF0140                        NO
         ITRACE ID=REF0130+
         MVC   CURRENT.AREA_REF_LABEL1,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP1,DXD_REF_DISP
         ST    R2,CURRENT.AREA_REF_USING1
* ------------------------------------------------------------------- *
*        Determine if instruction has a BDDD type operand 2           *
* ------------------------------------------------------------------- *
REF0140  DS    0H
         ITRACE ID=REF0140
         TM    OPCODE_REF,$OPCODE_REF2        5TH AND 6TH BYTES A BDDD?
         BNO   REF0290                        NO
         L     R1,CURRENT.AREA_BEGIN          INSTRUCTION DISP
         A     R1,DISCOMM_CSECT_TEXT          PLUS BASE
         SR    R14,R14
         ICM   R14,1,4(R1)                    BASE + NIBBLE 1 OF DISP
         SRL   R14,4                          SHIFT OUT DISP
         STC   R14,DXD_BASE                   SAVE BASE FOR OPERAND 2
         XC    DXD_DISP,DXD_DISP              INITIALIZE DISP
         MVC   DXD_DISP+2(2),4(R1)            COPY DISP FROM OPERAND 2
         NI    DXD_DISP+2,X'0F'               REMOVE BASE
* ------------------------------------------------------------------- *
*        Search BASES for operand 2                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=OP2_REF,                                            +
               DATA1=DXD_BASE
         BAL   R15,REF0500                    CHECK BASES
         LTR   R2,R2                          BASE LOCATED?
         BZ    REF0160                        NO
* ------------------------------------------------------------------- *
*        Operand 2 references a defined base                          *
* ------------------------------------------------------------------- *
         ITRACE ID=BASE2
         ICM   R1,15,BASE_DISP                DISP BASE REFERS TO
         A     R1,DXD_DISP                    PLUS DISP FROM OPERAND
         ST    R1,DXD_DISP                    DISP TO SEARCH FOR
         BAL   R8,REF0300                     LOCATE REFERENCED AREA
         MVC   CURRENT.AREA_REF_LABEL2,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP
         XC    CURRENT.AREA_REF_USING2,CURRENT.AREA_REF_USING2
         B     REF0290
* ------------------------------------------------------------------- *
*        Determine if operand 2 references a defined USING            *
* ------------------------------------------------------------------- *
REF0160  DS    0H
         ITRACE ID=REF0160
         BAL   R15,REF0600                    CHECK USINGS
         LTR   R2,R2                          USING FOUND?
         BZ    REF0290                        NO
         ITRACE ID=REF0160+
         MVC   CURRENT.AREA_REF_LABEL2,DXD_LABEL
         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP
         ST    R2,CURRENT.AREA_REF_USING2
         B     REF0290
* ------------------------------------------------------------------- *
*                                                                     *
*  Determine referenced displacements for "relative" addressing       *
*                                                                     *
*  The "relative" amounts in instructions is                          *
*    1) a number of halfwords, not bytes                              *
*    2) a signed number (the relative value can be negative)          *
*                                                                     *
*  The "LH" for short instructions preserves the sign bit             *
*  The "ICM" for six byte instructins allows for non-fullword         *
*  alignments and preserves the sign bit at the same time.            *
*                                                                     *
* ------------------------------------------------------------------- *
REF0200  DS    0H
         ICM   R1,15,CURRENT.AREA_BEGIN       INSTRUCTION DISP
         LR    R2,R1                          SAVE DISP
         A     R1,DISCOMM_CSECT_TEXT          PLUS TEXT BASE
         CLC   OPCODE_LENGTH,H6               SIX BYTE OPCODE?
         BE    REF0210                        YES
         LH    R0,2(,R1)                      RELATIVE NBR OF HALFWORDS
         B     REF0220
REF0210  DS    0H
         ICM   R0,15,2(R1)                    RELATIVE NBR OF HALFWORDS
REF0220  DS    0H
         AR    R2,R0                          PLUS (OR MINUS) DISP
         AR    R2,R0                          PLUS (OR MINUS) TWICE
         ITRACE ID=RELATIVE,                                           +
               RDATA1=R2
         ST    R2,DXD_DISP                    SET DISPLACEMENT
         BAL   R8,REF0300                     FIND REFERENCED INSTR
         LTR   R6,R6                          AREA LOCATED?
         BZ    REF0230                        NO.. CANNOT BE IN INSTR
         L     R4,DXD_LABEL                   LABEL BLOCK ADDRESS
         MVI   LABEL_TYPE,$LABEL_INSTR        LABEL IS AT AN INSTR
         ST    R4,CURRENT.AREA_REF_LABEL2
         MVC   CURRENT.AREA_REF_DISP2,DXD_REF_DISP
         ITRACE ID=LABEL,                                              +
               DATA1=(DXD_LABEL,4),                                    +
               DATA2=(DXD_REF_DISP,4)
         B     REF0290
REF0230  DS    0H
         MVI   CURRENT.AREA_TYPE,$AREA_DATA   FORCE TYPE TO 'DATA'
* ------------------------------------------------------------------- *
*        Go to next AREA                                              *
* ------------------------------------------------------------------- *
REF0290  DS    0H
         ITRACE ID=NEXTAREA,                                           +
               RDATA1=R7,                                              +
               DATA2=CURRENT.AREA_NEXT
         ICM   R7,15,CURRENT.AREA_NEXT        NEXT AREA
         BNZ   REF0010                        LOOP
         B     EXIT0000                       ALL DONE
* ------------------------------------------------------------------- *
*                                                                     *
*        Locate referenced disp (DXD_DISP) within CSECT               *
*                                                                     *
*        If the area referenced is an instruction                     *
*           GETMAIN a LABEL block and                                 *
*           set DXD_LABEL to the address of the LABEL block           *
*           set DXD_LABEL_DISP to disp from the label                 *
*                                                                     *
*                                                                     *
*        If the area referenced is a DATA area                        *
*           if the area is a ACON, QCON, VCON, or CXD                 *
*              GETMAIN a LABEL block and set AREA_LABEL               *
*              set DXD_LABEL to the address of the LABEL block        *
*              set DXD_LABEL_DISP to disp from the label              *
*           otherwise                                                 *
*              'split' the data into two parts                        *
*               . one 'up to' the disp referenced,                    *
*               . second starting at the disp referenced              *
*                 - GETMAIN a LABEL block for 'second' area           *
*                 - set DXD_LABEL to the new LABEL block              *
*                 - set DXD_LABEL_DISP to zero                        *
*                                                                     *
*                                                                     *
*        On Entry                                                     *
*          DXD_DISP     disp of AREA to locate                        *
*          R8           Return address                                *
*                                                                     *
*        At exit                                                      *
*          R6           address of AREA or zero if no AREA located    *
*          DXD_LABEL    address of LABEL assigned to AREA             *
*          DXD_REF_DISP disp from LABEL (address in DXD_LABEL)        *
*                                                                     *
* ------------------------------------------------------------------- *
REF0300  DS    0H
         ITRACE ID=REF0300,                                            +
               DATA1=(DXD_DISP,4)             DISP TO AREA REFERENCED
         XC    DXD_LABEL,DXD_LABEL
         XC    DXD_REF_DISP,DXD_REF_DISP
         ICM   R6,15,DISCOMM_ALL_AREA_NEXT    FIRST AREA
         BZR   R8                             NO AREAS
REF0310  DS    0H
         CLC   DXD_DISP,LOCATE.AREA_END       DISP IN THIS AREA?
         BNH   REF0320                        YES
         ICM   R6,15,LOCATE.AREA_NEXT         NEXT AREA
         BNZ   REF0310                        CHECK NEXT AREA
         MVC   DXD_REF_DISP,DXD_DISP
         ITRACE ID=NO_AREA,                                            +
               DATA1=(DXD_REF_DISP,4)
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
*        AREA located.                                                *
*                                                                     *
*        If the reference is not on the 1st byte, determine           *
*        if the AREA can be "split"                                   *
*                                                                     *
* ------------------------------------------------------------------- *
REF0320  DS    0H
         ITRACE ID=AREA_FND,                                           +
               DATA1=LOCATE.AREA_BEGIN,                                +
               DATA2=(LOCATE.AREA_TYPE,1)
         CLC   LOCATE.AREA_BEGIN,DXD_DISP     'DIRECT HIT'?
         BE    REF0340                        YES
         CLI   LOCATE.AREA_TYPE,$AREA_INSTRUCTION
         BE    REF0340                        YES.. CANNOT 'SPLIT'
         TM    LOCATE.AREA_DATA_TYPE,$DATA_ACON
         BO    REF0340                        YES.. CANNOT 'SPLIT'
         TM    LOCATE.AREA_DATA_TYPE,$DATA_VCON
         BO    REF0340                        YES.. CANNOT 'SPLIT'
         TM    LOCATE.AREA_DATA_TYPE,$DATA_CXD
         BO    REF0340                        YES.. CANNOT 'SPLIT'
         TM    LOCATE.AREA_DATA_TYPE,$DATA_Q
         BO    REF0340                        YES.. CANNOT 'SPLIT'
         ITRACE ID=SPLIT,                                              +
               RDATA1=R6,                                              +
               DATA2=LOCATE.AREA_BEGIN
         GETMAIN RU,                                                   +
               LV=AREA_DSECT_L,                                        +
               LOC=ANY
         LR    R5,R1
         ITRACE ID=NEW_AREA,                                           +
               RDATA1=R5
         MVC   NEW.AREA_DSECT(AREA_DSECT_L),LOCATE.AREA_DSECT
         ST    R5,LOCATE.AREA_NEXT
         ST    R6,NEW.AREA_PREV
         MVC   NEW.AREA_TYPE,LOCATE.AREA_TYPE COPY TYPE
         L     R14,DXD_DISP                   DISP SEARCHED FOR
         BCTR  R14,0                          MINUS 1
         STCM  R14,15,LOCATE.AREA_END         SET END DISP
         ICM   R15,15,LOCATE.AREA_BEGIN       BEGIN DISP
         SR    R14,R15                        COMPUTE LENGTH
         LA    R14,1(,R14)                    TRUE LENGTH
         STCM  R14,15,LOCATE.AREA_LENGTH      SET LENGTH
         ICM   R14,15,NEW.AREA_END            END DISP
         L     R15,DXD_DISP                   DISP SEARCHED FOR
         STCM  R15,15,NEW.AREA_BEGIN          SET BEGIN DISP
         SR    R14,R15                        COMPUTE LENGTH
         LA    R14,1(,R14)                    TRUE LENGTH
         STCM  R14,15,NEW.AREA_LENGTH         SET LENGTH
         XC    DXD_LABEL_DISP,DXD_LABEL_DISP  DISP FROM LABEL IS ZERO
         MVC   DXD_GEN_DISP,NEW.AREA_BEGIN    DISP FOR LABEL
         BAL   R14,REF0400                    GETMAIN A NEW LABEL BLOCK
         ST    R4,NEW.AREA_LABEL              CHAIN LABEL TO AREA
         MVI   LABEL_TYPE,$LABEL_DATA         LABEL IS AT DATA AREA
         ICM   R1,15,NEW.AREA_NEXT            NEXT BLOCK ON CHAIN
         BZ    REF0330                        NO 'NEXT' BLOCK
NEXT     USING AREA_DSECT,R1
         ST    R5,NEXT.AREA_PREV              SET PREV IN NEXT
REF0330  DS    0H
         ITRACE ID=AREAS,                                              +
               DATA1=LOCATE.AREA_BEGIN,                                +
               DATA2=NEW.AREA_BEGIN
         BR    R8
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        An instruction or ADCON is referencing this area.            *
*        Either the reference is to the first byte of this AREA       *
*        or this is an AREA that cannot be 'split'.                   *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0340  DS    0H
         ITRACE ID=REF0340,                                            +
               DATA1=(LOCATE.AREA_BEGIN,4),                            +
               DATA2=(DXD_DISP,4)
         L     R1,DXD_DISP                    DISP REFERENCED
         ICM   R0,15,LOCATE.AREA_BEGIN        AREA BEGIN DISP
         ST    R0,DXD_LABEL_DISP              DISP TO LABEL
         ICM   R4,15,LOCATE.AREA_LABEL        LABEL GETMAINED?
         BNZ   REF0350                        YES
         MVC   DXD_GEN_DISP,LOCATE.AREA_BEGIN DISP FOR NEW LABEL
         BAL   R14,REF0400                    GETMAIN LABEL BLOCK
         ITRACE ID=AREA_LBL,                                           +
               RDATA1=R6,                                              +
               DATA2=DXD_LABEL
         L     R4,DXD_LABEL                   NEW LABEL BLOCK ADDR
         ST    R4,LOCATE.AREA_LABEL           CHAIN AREA TO LABEL
         MVC   LABEL_TYPE,LOCATE.AREA_TYPE    COPY TYPE
REF0350  DS    0H
         ITRACE ID=REF0350,                                            +
               DATA1=LABEL_NAME,                                       +
               DATA2=(LABEL_DISP,4)
         ST    R4,DXD_LABEL                   RETURN ADDR OF LABEL
         L     R1,DXD_DISP                    DISP IN INSTRUCTION
         ICM   R0,15,LABEL_DISP               DISP TO LABEL
         SR    R1,R0                          DISP FROM LABEL
         ST    R1,DXD_REF_DISP                SAVE DISP
         BR    R8
* ------------------------------------------------------------------- *
*        GETMAIN new LABEL block                                      *
* ------------------------------------------------------------------- *
REF0400  DS    0H
         ST    R14,DXD_RETURN
         ITRACE ID=GET_LABL,                                           +
               RDATA1=R14
         GETMAIN RU,                                                   +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
         LR    R4,R1
         XC    LABEL_DSECT(LABEL_DSECT_L),LABEL_DSECT
         UNPK  COMM_INFO_01(9),DXD_GEN_DISP(5)
         TR    COMM_INFO_01(8),COMM_HEXCHAR
         MVC   LABEL_EYE,LABEL_ID             IDENTIFY BLOCK
         MVC   LABEL_NAME,COMM_BLANKS         INITIALIZE NAME
         MVC   LABEL_NAME(8),COMM_INFO_01     TEMPORARY NAME
         MVI   LABEL_NAME,C'-'                FLAG TEMPORARY NAME
         MVC   LABEL_DISP,DXD_GEN_DISP        DISP TO THIS LABEL
         ST    R4,DXD_LABEL                   SAVE ADDR
         ITRACE ID=NEWLABEL,                                           +
               RDATA1=R4,                                              +
               DATA2=LABEL_NAME
         L     R14,DXD_RETURN
         BR    R14
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Search defined BASEs                                            *
*     Base is in DXD_BASE                                             *
*     Displacement from the BASE is in DXD_DISP                       *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0500  DS    0H
         ITRACE ID=REF0500,                                            +
               DATA1=DISCOMM_BASE_NEXT,                                +
               DATA2=DXD_BASE
         ICM   R2,15,DISCOMM_BASE_NEXT        1ST BASE
         BZ    REF0540                        NO BASES DEFINED
REF0510  DS    0H
         ITRACE ID=REF0510,                                            +
               DATA1=BASE_BEGIN
         OC    BASE_BEGIN(8),BASE_BEGIN       BEGIN/END DISP(S)?
         BZ    REF0520                        NO
         CLC   BASE_END,CURRENT.AREA_BEGIN    IN EFFECT HERE?
         BL    REF0530                        NO
         CLC   BASE_BEGIN,CURRENT.AREA_END    IN EFFECT HERE?
         BH    REF0530                        NO
REF0520  DS    0H
         ITRACE ID=REF0520
         CLC   BASE_REGISTER,DXD_BASE         CORRECT REGISTER?
         BNE   REF0530                        NO
         ITRACE ID=BASE_FND                   BASE HAS BEEN FOUND
         BR    R15                            RETURN (R2=ADDR OF BASE)
REF0530  DS    0H
         ICM   R2,15,BASE_NEXT                NEXT BASE
         BNZ   REF0510
REF0540  DS    0H
         ITRACE ID=NO_BASE
         BR    R15                            RETURN (R2 = ZERO)
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*     Search defined USINGs                                           *
*     Base is in DXD_BASE                                             *
*     Displacement from the BASE is in DXD_DISP                       *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
REF0600  DS    0H
         ITRACE ID=REF0600,                                            +
               DATA1=DISCOMM_USING_NEXT
         ICM   R2,15,DISCOMM_USING_NEXT       1ST USING
         BZ    REF0680                        NO USINGS DEFINED
         USING USING_DSECT,R2
REF0610  DS    0H
         OC    USING_BEGIN(8),USING_BEGIN     BEGIN OR END DISP GIVEN?
         BZ    REF0620                        NO
         CLC   USING_END,CURRENT.AREA_BEGIN   IN EFFECT HERE?
         BL    REF0670                        NO
         CLC   USING_BEGIN,CURRENT.AREA_END   IN EFFECT HERE?
         BH    REF0670                        NO
REF0620  DS    0H
         CLC   USING_REGISTER,DXD_BASE        CORRECT REGISTER?
         BNE   REF0670                        NO
         ITRACE ID=FNDUSING,                                           +
               DATA1=USING_LABEL_ADDR
         MVC   DXD_EFFECTIVE_DISP,DXD_DISP    COPY DISP
         ICM   R4,15,USING_LABEL_ADDR         STARTING LABEL?
         BZ    REF0640                        NO
         ITRACE ID=USNGLABL,                                           +
               DATA1=USING_DSECT_LABEL,       .. LABEL WITHIN DSECT    +
               DATA2=USING_DISP               .. LABEL'S DISP
         ICM   R0,15,LABEL_DISP               DISP TO START LABEL
         A     R0,DXD_DISP                    PLUS DISP IN INSTRUCTION
         ST    R0,DXD_EFFECTIVE_DISP          EFFECTIVE DISP
REF0640  DS    0H
         ITRACE ID=EFF_DISP,                                           +
               DATA1=DXD_EFFECTIVE_DISP
         L     R1,USING_DSECT_ADDR            DSECT ADDRESS
         USING DSECT_DSECT,R1
         L     R4,DSECT_LABEL_NEXT            FIRST LABEL
REF0650  DS    0H
         CLC   LABEL_DISP,DXD_EFFECTIVE_DISP  LABEL DISP > EFFECTIVE?
         BNH   REF0660                        NO
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   REF0650                        KEEP SEARCHING
REF0660  DS    0H
         ST    R4,DXD_LABEL                   RETURN LABEL ADDRESS
         L     R1,DXD_EFFECTIVE_DISP          EFFECTIVE DISP
         ICM   R0,15,LABEL_DISP
         SR    R1,R0                          MINUS DISP TO LABEL
         ST    R1,DXD_REF_DISP                DISP FROM LABEL
         BR    R15
REF0670  DS    0H
         ICM   R2,15,USING_NEXT               NEXT BASE
         BNZ   REF0610
REF0680  DS    0H
         ITRACE ID=NOUSING
         BR    R15                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=BAD_REF
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ICM   R7,15,DISCOMM_ALL_AREA_NEXT    FIRST AREA BLOCK
         ITRACE ID=GENLABLS,                                           +
               RDATA1=R7
         LTR   R7,R7                          ANY AREA BLOCKS?
         BZ    EXIT0060                       NO
         ZAP   DXD_LABEL_NBR,P0               INIT LABEL NBR
EXIT0010 DS    0H
         ITRACE ID=AREA,                                               +
               RDATA1=R7,                                              +
               DATA2=CURRENT.AREA_BEGIN
         ICM   R4,15,CURRENT.AREA_LABEL       LABEL PRESENT?
         BZ    EXIT0050                       NO
         CLI   LABEL_TYPE,$LABEL_ESD          LABEL FROM AN ESD ITEM?
         BE    EXIT0040                       YES.. DO NOT CHANGE
         AP    DXD_LABEL_NBR,P10              PLUS 10
         MVC   LABEL_NAME,COMM_BLANKS         INIT LABEL
         MVC   LABEL_NAME(8),=X'F020202020202120'
         ED    LABEL_NAME(8),DXD_LABEL_NBR    EDIT LABEL NUMBER
         CLI   CURRENT.AREA_TYPE,$AREA_DATA   DATA AREA?
         BE    EXIT0030
         SR    R1,R1
         ICM   R1,3,DISCOMM_PREFIX_LENGTH     PREFIX LENGTH
         BZ    EXIT0020                       SHOULD NOT HAPPEN
         BCTR  R1,0
         EX    R1,PREFIX_MVC                  COPY PREFIX
         B     EXIT0040
EXIT0020 DS    0H
         MVI   LABEL_NAME,C'L'                DEFAULT TO 'L'
         B     EXIT0040
EXIT0030 DS    0H
         MVC   LABEL_NAME(4),DATA             SET PREFIX TO 'DATA'
EXIT0040 DS    0H
         ITRACE ID=LABEL,                                              +
               DATA1=LABEL_NAME,                                       +
               DATA2=(LABEL_DISP,4)
EXIT0050 DS    0H
         ICM   R7,15,CURRENT.AREA_NEXT        NEXT AREA
         BNZ   EXIT0010
EXIT0060 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
PREFIX_MVC MVC LABEL_NAME(0),DISCOMM_PREFIX
OP_MVC     MVC COMM_INFO_01(0),0(R1)
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START DC   Q(DXDREF)

H6        DC   H'6'

P0        DC   P'0'
P10       DC   P'10'
DATA      DC   CL4'DATA'
LABEL_ID  DC   CL8'LABEL'

          LTORG
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDREF          DSECT
                COPY DXDPREF

DXD_REF_DISP    DS   A                  DISP REFERENCED
DXD_LABEL       DS   A                  LABEL BLOCK ADDRESS
DXD_LABEL_DISP  DS   A                  DISP FROM LABEL

DXD_GEN_DISP    DS   A

DXD_RETURN      DS   A

DXD_EFFECTIVE_DISP   DS  A

DXD_BASE        DS   X                  BASE FOR CURRENT OPERAND
DXD_DISP        DS   A                  DISP FROM WORK BASE

DXD_LABEL_NBR   DS   PL4                LABEL NBR

DXD_EXIT_PARMS  DS   0A
DXD_EXIT_OPCODE DS   A                  OPCODE TABLE ENTRY TO MODIFY
DXD_EXIT_TEXT   DS   A                  ADDRESS OF INSTRUCTION IN TEXT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 SESSION  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 BPXYSTAT DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 OSSPFD   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     REGEQU
         END  DISREF
