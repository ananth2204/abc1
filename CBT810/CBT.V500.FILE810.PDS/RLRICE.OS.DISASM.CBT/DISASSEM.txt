*--------------------------------------------------------------------*
*                                                                    *
*  Module name: DISASSEM                                             *
*                                                                    *
*  Function:                                                         *
*   Dynamically invoke the assembler to assemble DSECTs.             *
*                                                                    *
*   The idea here is to allow the disassembler to generate labels    *
*   rather than a "displacement from register". Rather than having   *
*   to code control statements with labels and their displacements,  *
*   the disassembler will call the assembler, then read the          *
*   assembler listing to 'learn' DSECT and label names plus the      *
*   displacements of labels within DSECTs.                           *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*   Any method of defining DSECTs that are valid to the assembler    *
*   may be used.  They may be defined inline, by macros, or COPY     *
*   statements.  The disassembler links to the assembler to assemble *
*   the source, then scans the assembler output to learn the DSECT   *
*   names, label names, and displacements to the labels.  In order   *
*   for DISASM to find the names and displacements, the PRINT option *
*   of the assembler must be on.                                     *
*                                                                    *
*   Labels and DSECT names are limited to 63 characters in length.   *
*                                                                    *
*   Input to the assembler is delimited by ASM,START and ASM,END     *
*   statements.  Any statements between the ASM,START and ASM,END    *
*   are copied to SYSIN.  Assembler input statements are listed on   *
*   the DISPRINT output, but are otherwise ignored.  Any macros not  *
*   defined inline and any COPY elements must be available to the    *
*   assembler in a library in the SYSLIB concatenation.              *
*                                                                    *
*   If the return code from the assembler is greater than 4, the     *
*   disassembly is aborted.  The assembler output is copied to the   *
*   DISDEBUG data set if allocated.                                  *
*                                                                    *
*   The DSECTs are chained from field DISCOMM_DSECT_NEXT in DISCOMM. *
*   The labels within the DSECT are chained from field DSECT_LABEL.  *
*   DSECT_DSECT maps the DSECT blocks, LABEL_DSECT maps the label    *
*   control blocks.                                                  *
*                                                                    *
*--------------------------------------------------------------------*
DISASSEM CSECT
DISASSEM AMODE 31
DISASSEM RMODE ANY
         USING DISASSEM,R15
         B     INIT0000                       SKIP EYECATCHER
MODID    DC    CL8'DISASSEM'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        SET BASE REG
         DROP  R15
         USING OSCOMM,R12
         USING SESSION,R11
         USING DISASSEM,R10
         USING DISCOMM,R9
         USING DSECT_DSECT,R3                 DEFINE BASE
         USING LABEL_DSECT,R4                 DEFINE BASE
         USING EQU_DSECT,R5                   DEFINE BASE
         L     R15,SESS_DXD_ADDR              WORK AREA ADDR
         A     R15,DXD_START                  PLUS DISP TO OUR PART
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDASSEM,R13
         MVC   DXD_CSECT,MODID
         USING DCBE,SYSPRINT_DCBE
         ITRACE ID=ENTRY
         L     R8,COMM_OSSPFD
         USING OSSPFD,R8
         MVC   DAIR_MEMBER,COMM_BLANKS
         MVC   DAIR_VOLSER,COMM_BLANKS
         MVC   DAIR_UNIT,COMM_BLANKS
* ------------------------------------------------------------------- *
*        ALLOCATE SYSIN                                               *
* ------------------------------------------------------------------- *
         ITRACE ID=ALOC_IN
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVI   DAIR_OPTS,$DAIR_NO_MSGS
         MVC   DAIR_DD,DD_SYSIN               SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE SYSIN
         MVI   DAIR_FUNC,$DAIR_ALLOC          ALLOCATE
         MVI   DAIR_OPTS,$DAIR_TEMP+$DAIR_USE_DD
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        ALLOCATE SYSIN
         OC    DAIR_R15,DAIR_R15              SUCCESSFUL?
         BNZ   ERR0000                        NO
* ------------------------------------------------------------------- *
*        ALLOCATE SYSPRINT                                            *
* ------------------------------------------------------------------- *
         ITRACE ID=ALOC_PRT
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVI   DAIR_OPTS,$DAIR_NO_MSGS
         MVC   DAIR_DD,DD_SYSPRINT            SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE SYSPRINT
         MVI   DAIR_FUNC,$DAIR_ALLOC          ALLOCATE
         MVI   DAIR_OPTS,$DAIR_TEMP+$DAIR_USE_DD
         MVC   DAIR_DD,DD_SYSPRINT            SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        CALL OSDAIR
         OC    DAIR_R15,DAIR_R15              SUCCESSFUL?
         BNZ   ERR0000                        NO
* ------------------------------------------------------------------- *
*                                                                     *
*        Allocate SYSLIB                                              *
*                                                                     *
*     1) Free SYSLIB to make sure it is available                     *
*     2) Allocate each library                                        *
*     3) Concatenate the library to SYSLIB                            *
*                                                                     *
* ------------------------------------------------------------------- *
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVI   DAIR_OPTS,$DAIR_NO_MSGS
         MVC   DAIR_DD,DD_SYSLIB              SET DDNAME
         ITRACE ID=FREE_SYS,                                           +
               DATA1=DAIR_DD
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE SYSLIB
         ICM   R7,15,DISCOMM_SYSLIB_NEXT      FIRST SYSLIB LIBRARY
         BZ    INIT0050
         USING SYSLIB_DSECT,R7
         OI    DXD_FLAGS,$FIRST_LIBRARY       SET FLAG
INIT0010 DS    0H
         CLC   SYSLIB_DDNAME,COMM_BLANKS      ALLOCATED?
         BE    INIT0020                       NO
         ITRACE ID=FREE_LIB,                                           +
               DATA1=SYSLIB_DDNAME
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVI   DAIR_OPTS,0                    CLEAR OPTIONS
         MVC   DAIR_DD,SYSLIB_DDNAME          COPY DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE LIBRARY
INIT0020 DS    0H
         TM    DXD_FLAGS,$FIRST_LIBRARY       FIRST LIBRARY?
         BO    INIT0030
         ITRACE ID=ALOC_LIB
         MVI   DAIR_FUNC,$DAIR_ALLOC          ALLOCATE
         MVI   DAIR_OPTS,0                    CLEAR OPTIONS
         MVC   DAIR_DD,SYSLIB_DDNAME          COPY DDNAME
         MVC   DAIR_DSN,SYSLIB_DSNAME         COPY DSN
         MVI   DAIR_DISP,$DAIR_DISP_SHR       DISP=SHR
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        ALLOCATE LIBRARY
         OC    DAIR_R15,DAIR_R15              SUCCESSFUL?
         BNZ   ERR0000                        NO
         MVC   SYSLIB_DDNAME,DAIR_DD          SAVE DD NAME
         ITRACE ID=CONCAT,                                             +
               DATA1=SYSLIB_DDNAME
         MVI   DAIR_FUNC,$DAIR_CONCAT         CONCATENATE
         MVI   DAIR_OPTS,$DAIR_USE_DD         USE SPECIFIED DD NAME
         MVC   DAIR_DD,DD_SYSLIB              COPY DDNAME
         MVC   DAIR_DSN(L'SYSLIB_DDNAME),SYSLIB_DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        CONCATENATE LIBRARIES
         OC    DAIR_R15,DAIR_R15              SUCCESSFUL?
         BNZ   ERR0000                        NO
         B     INIT0040
INIT0030 DS    0H
         ITRACE ID=FIRST
         MVI   DAIR_FUNC,$DAIR_ALLOC          ALLOCATE
         MVI   DAIR_OPTS,$DAIR_USE_DD         USE SPECIFIED DD NAME
         MVC   DAIR_DD,DD_SYSLIB              COPY DDNAME
         MVC   SYSLIB_DDNAME,DD_SYSLIB        COPY DDNAME
         MVC   DAIR_DSN,SYSLIB_DSNAME         COPY DSN
         MVI   DAIR_DISP,$DAIR_DISP_SHR       DISP=SHR
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        ALLOCATE LIBRARY
         OC    DAIR_R15,DAIR_R15              SUCCESSFUL?
         BNZ   ERR0000                        NO
INIT0040 DS    0H
         NI    DXD_FLAGS,255-$FIRST_LIBRARY   RESET FLAG
         ICM   R7,15,SYSLIB_NEXT              NEXT LIBRARY
         BNZ   INIT0010
         DROP  R7
* ------------------------------------------------------------------- *
*        OPEN  SYSIN                                                  *
* ------------------------------------------------------------------- *
INIT0050 DS    0H
         OPEN  (SYSIN_DCB,OUTPUT),                                     +
               MODE=31,                                                +
               MF=(E,DISCOMM_OPEN)
* ------------------------------------------------------------------- *
*        WRITE USER'S SOURCE                                          *
* ------------------------------------------------------------------- *
         ICM   R7,15,DISCOMM_ASM_NEXT         FIRST SOURCE STATEMENT
         BZ    INIT0070                       NO SOURCE
         USING ASM_DSECT,R7
INIT0060 DS    0H
         PUT   SYSIN_DCB,ASM_SOURCE           WRITE SOURCE
         ICM   R7,15,ASM_NEXT                 ANOTHER SOURCE STATEMENT?
         BNZ   INIT0060                       YES
         DROP  R7
* ------------------------------------------------------------------- *
*        CLOSE SYSIN                                                  *
* ------------------------------------------------------------------- *
INIT0070 DS    0H
         CLOSE SYSIN_DCB,                                              +
               MODE=31,                                                +
               MF=(E,DISCOMM_OPEN)
         FREEPOOL SYSIN_DCB
* ------------------------------------------------------------------- *
*        LOAD THE ASSEMBLER                                           *
* ------------------------------------------------------------------- *
         LOAD  EP=ASMA90                      LOAD THE ASSEMBLER
         ST    R0,DXD_ASSEM_EP                SAVE ENTRY POINT
* ------------------------------------------------------------------- *
*        CALL THE ASSEMBLER                                           *
* ------------------------------------------------------------------- *
         LR    R15,R0                         COPY TO R15
         LA    R1,AASMPARM                    ASSEMBLER PARM LIST ADDR
         ITRACE ID=CALLASM,                   CALLING THE ASSEMBLER    +
               RDATA1=R15,                    .. ASSEMBLER'S EP        +
               RDATA2=R1                      .. ASSEMBLER'S PARMS
         BASR  R14,R15                        LINK TO ASSEMBLER
         ITRACE ID=ASSEM_RC,                  ASSEMBLER'S RETURN CODE  +
               RDATA1=R15                     .. RETURN CODE
         STH   R15,DISCOMM_ASSEMBLER_RC       SAVE ASSEMBLER RC
         CH    R15,H4                         SERIOUS ERRORS?
         BH    ASSM0300                       YES
* ------------------------------------------------------------------- *
*        READ ASSEMBLER OUTPUT                                        *
* ------------------------------------------------------------------- *
         LA    R1,ASSM0200
         ST    R1,DCBEEODA
         ITRACE ID=OPEN
         OPEN  (SYSPRINT_DCB,INPUT),          OPEN SYSPRINT AS INPUT   +
               MODE=31,                                                +
               MF=(E,DISCOMM_OPEN)
* ------------------------------------------------------------------- *
*        FREE EXISTING DSECTS, LABELS, EQUS                           *
* ------------------------------------------------------------------- *
         ICM   R3,15,DISCOMM_DSECT_NEXT       FIRST DSECT
         BZ    ASSM0000                       NO DSECTS
INIT0110 DS    0H
         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL
         BZ    INIT0150                       NO LABELS
INIT0120 DS    0H
         ICM   R5,15,LABEL_EQU_NEXT           FIRST EQUATE
         BZ    INIT0140                       NO EQUATES
INIT0130 DS    0H
         LR    R1,R5                          COPY ADDRESS
         ICM   R5,15,EQU_NEXT                 NEXT EQU BLOCK
         FREEMAIN RU,                         FREE EQU BLOCK           +
               A=(1),                                                  +
               LV=EQU_DSECT_L
         LTR   R5,R5                          ANOTHER EQUATE
         BNZ   INIT0130                       LOOP
INIT0140 DS    0H
         LR    R1,R4                          COPY ADDRESS
         ICM   R4,15,LABEL_NEXT               NEXT LABEL BLOCK
         FREEMAIN RU,                         FREE LABEL BLOCK         +
               A=(1),                                                  +
               LV=LABEL_DSECT_L
         LTR   R4,R4                          ANOTHER LABEL?
         BNZ   INIT0120                       YES
INIT0150 DS    0H
         LR    R1,R3                          COPY ADDRESS
         ICM   R3,15,DSECT_NEXT               NEXT DSECT
         FREEMAIN RU,                         FREE LABEL BLOCK         +
               A=(1),                                                  +
               LV=DSECT_DSECT_L
         LTR   R3,R3                          ANOTHER DSECT?
         BNZ   INIT0110                       YES
INIT0160 DS    0H
         XC    DISCOMM_DSECT_NEXT,DISCOMM_DSECT_NEXT
*--------------------------------------------------------------------*
*                                                                    *
*--------------------------------------------------------------------*
ASSM0000 DS    0H
         SR    R3,R3                          NO DSECT IS ACTIVE
         SR    R4,R4                          NO LABEL IS ACTIVE
ASSM0010 DS    0H
         GET   SYSPRINT_DCB,DXD_IO
         CLC   DISCOMM_ASSEMBLER_RC,H4        ASSEMBLER ERROR?
         BH    ASSM0010                       YES
         ITRACE ID=TEMP1,                                              +
               DATA1=DXD_IO_LABEL,                                     +
               DATA2=DXD_IO_DISP
         CLI   DXD_IO_LABEL,C'*'              COMMENT STATEMENT?
         BE    ASSM0010                       YES
         CLC   SRCSTMT,DXD_IO+43              ASSEMBLER HEADING LINE?
         BE    ASSM0010                       YES, IGNORE IT
         CLC   XREF,DXD_IO+45                 START OF CROSS REFERENCE?
         BNE   ASSM0020                       NO
         OI    DXD_FLAGS,$XREF                SET CROSS REFERENCE FLAG
         ITRACE ID=XREF                       CROSS REFERENCE STARTED
ASSM0020 DS    0H
         TM    DXD_FLAGS,$XREF                CROSS REFERENCE FOUND?
         BO    ASSM0010                       YES
         CLI   DXD_IO_LABEL,C' '              LABEL PRESENT?
         BE    ASSM0010                       NO
         ITRACE ID=NEWLABEL,                                           +
               DATA1=DXD_IO_LABEL
         LA    R6,DXD_IO_LABEL                FIRST BYTE OF LABEL
         LA    R2,DXD_LABEL                   FIRST BYTE OF WORK LABEL
         MVC   DXD_LABEL,COMM_BLANKS          CLEAR LABEL NAME
         LA    R1,L'DXD_LABEL                 MAX LOOPS
ASSM0030 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BE    ASSM0040                       YES
         MVC   0(1,R2),0(R6)                  COPY TO WORK LABEL
         LA    R2,1(R2)                       NEXT
         LA    R6,1(R6)                       NEXT
         BCT   R1,ASSM0030                    LOOP
         CLI   0(R6),C' '                     BLANK?
         BE    ASSM0040                       NO.. TOO LONG FOR A LABEL
         ITRACE ID=LONGLABL
         B     ASSM0010                       READ NEXT SYSPRINT RECORD
ASSM0040 DS    0H
         LA    R1,L'DXD_LABEL                 MAX LOOPS
ASSM0050 DS    0H
         CLI   0(R6),C' '                     BLANK?
         BNE   ASSM0060                       NO
         LA    R6,1(R6)                       NEXT
         BCT   R1,ASSM0050                    LOOP
         B     ASSM0140                       ASSUME IT IS A LABEL
ASSM0060 DS    0H
         ITRACE ID=LABLTYPE,                                           +
               DATA1=0(R6)
         CLC   OP_DSECT(6),0(R6)              DSECT?
         BE    ASSM0090                       YES
         CLC   OP_CSECT,0(R6)                 CSECT?
         BE    ASSM0090                       YES
         CLC   OP_EQU,0(R6)                   EQUATE STATEMENT?
         BNE   ASSM0140                       NO
         CLC   =C'000',DXD_IO_ADDR1           FIRST 3 DIGITS ZEROS?
         BNE   ASSM0010                       NO
*--------------------------------------------------------------------*
*                                                                    *
*     Build a new EQU block.                                         *
*                                                                    *
*     EQU block's are chained from LABEL blocks.                     *
*     R4 is used to 'remember' the last LABEL block processed.       *
*     Whenever a new CSECT or DSECT is encountered, R4 is 'cleared'. *
*                                                                    *
*--------------------------------------------------------------------*
         LTR   R4,R4                          LABEL BASE SET?
         BZ    ASSM0010                       NO
         GETMAIN RU,                          GETMAIN EQU BLOCK        +
               LV=EQU_DSECT_L,                                         +
               LOC=ANY
NEW      USING EQU_DSECT,R1
         XC    NEW.EQU_DSECT(EQU_DSECT_L),NEW.EQU_DSECT                 OCK
         LA    R5,LABEL_EQU_PREV              EQU ANCHOR
ASSM0070 DS    0H
         LR    R2,R5                          COPY CURRENT TO PREV
PREV     USING EQU_DSECT,R2
         ICM   R5,15,EQU_NEXT                 NEXT BLOCK ON CHAIN
         BNZ   ASSM0070                       LOOP IF PRESENT
         ST    R1,PREV.EQU_NEXT               SET NEXT ON CHAIN
ASSM0080 DS    0H
         ST    R2,NEW.EQU_PREV                SET 'NEXT'
         MVC   NEW.EQU_EYE,EQU_ID             IDENTIFY THIS BLOCK
         MVC   NEW.EQU_LABEL,DXD_LABEL        SET LABEL
         NC    DXD_IO_ADDR1+3(2),HEX1F1F      PREPARE FOR PACKING
         TR    DXD_IO_ADDR1+3(2),CHARHEX      TRANSLATE FOR PACKING
         PACK  DXD_DISP_OUT(2),DXD_IO_ADDR1+3(3)
         MVC   NEW.EQU_VALUE,DXD_DISP_OUT     COPY EQUATE VALUE
         ITRACE ID=NEW_EQU,                   NEW EQUATE               +
               RDATA1=R1,                                              +
               DATA2=NEW.EQU_PREV
         B     ASSM0010
         DROP  NEW,PREV
*--------------------------------------------------------------------*
*                                                                    *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
ASSM0090 DS    0H
         ITRACE ID=SCANDSCT
         LA    R3,DISCOMM_DSECT_PREV          FIRST DSECT BLOCK
         B     ASSM0110
ASSM0100 DS    0H
         CLC   DSECT_NAME,DXD_LABEL           ALREADY ON DSECT CHAIN?
         BE    ASSM0130                       YES.. EXIT WITH BASE SET
ASSM0110 DS    0H
         ICM   R2,15,DSECT_NEXT               ANOTHER ON CHAIN?
         BZ    ASSM0120                       NO
         LR    R3,R2                          COPY ADDRESS
         B     ASSM0100                       CHECK FOR DUPLICATE NAME
ASSM0120 DS    0H
         GETMAIN RU,                          ACQUIRE NEW DSECT BLOCK  +
               LV=DSECT_DSECT_L,                                       +
               LOC=ANY
NEW      USING DSECT_DSECT,R1                 SET BASE
         XC    NEW.DSECT_DSECT(DSECT_DSECT_L),NEW.DSECT_DSECT
         ST    R1,DSECT_NEXT
         ST    R2,NEW.DSECT_PREV
         ITRACE ID=NEWDSECT,                  NEW DSECT BLOCK          +
               RDATA1=R1,                     .. BLOCK'S ADDRESS       +
               DATA2=DXD_LABEL                .. DSECT'S NAME
         MVC   NEW.DSECT_EYE,OP_DSECT         SET BLOCK ID
         MVC   NEW.DSECT_NAME,DXD_LABEL       SET DSECT'S NAME
         LR    R3,R1                          "REMEMBER" LAST DSECT
         B     ASSM0135
         DROP  NEW
ASSM0130 DS    0H
         ITRACE ID=DUPDSECT
ASSM0135 DS    0H
         XC    DXD_DISP_OUT,DXD_DISP_OUT      FORCE DISP TO ZERO
         B     ASSM0155                       ADD LABEL WITH SAME NAME
*--------------------------------------------------------------------*
*                                                                    *
*        Process statements with LABELs                              *
*                                                                    *
*  Subsequent EQU's will be 'tied' back to the previous LABEL block. *
*  R4 is used to 'remember' the address of the last label block..    *
*                                                                    *
*                                                                    *
*--------------------------------------------------------------------*
ASSM0140 DS    0H
         LTR   R3,R3                          DSECT DETERMINED YET?
         BZ    ASSM0010                       NO
         CLI   DXD_IO_DISP,C'A'               VALID DISPLACEMENT?
         BL    ASSM0010                       NO
         CLI   DXD_IO_DISP,C'F'               VALID DISPLACEMENT?
         BNH   ASSM0150                       YES
         CLI   DXD_IO_DISP,C'0'               VALID DISPLACEMENT?
         BL    ASSM0010                       NO
         CLI   DXD_IO_DISP,C'9'               VALID DISPLACEMENT?
         BH    ASSM0010                       NO
ASSM0150 DS    0H
         MVC   DXD_DISP_IN,DXD_IO_DISP        COPY DISPLACEMENT
         NC    DXD_DISP_IN,HEX1F1F            PREPARE FOR TRANSLATE
         TR    DXD_DISP_IN,CHARHEX            TRANSLATE FOR PACKING
         PACK  DXD_DISP_OUT(4),DXD_DISP_IN(7) PACK DISPLACEMENT
ASSM0155 DS    0H
         LA    R4,DSECT_LABEL_PREV            LABEL CHAIN ANCHOR
         B     ASSM0170
ASSM0160 DS    0H
         CLC   DXD_DISP_OUT(3),LABEL_DISP+1   INSERT HERE?
         BH    ASSM0180                       YES
ASSM0170 DS    0H
         LR    R2,R4                          COPY ADDRESS
PREV     USING LABEL_DSECT,R2
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   ASSM0160                       LOOP
ASSM0180 DS    0H
         GETMAIN RU,                          ACQUIRE NEW LABEL BLOCK  +
               LV=LABEL_DSECT_L,                                       +
               LOC=ANY
         ITRACE ID=NEWLABL,                   NEW LABEL BLOCK          +
               RDATA1=R1,                     .. BLOCK'S ADDRESS       +
               DATA2=DXD_LABEL                .. LABEL'S NAME
NEW      USING LABEL_DSECT,R1
         ST    R1,PREV.LABEL_NEXT
         LTR   R4,R4
         BZ    ASSM0190
         ST    R1,LABEL_PREV
ASSM0190 DS    0H
         XC    NEW.LABEL_DSECT(LABEL_DSECT_L),NEW.LABEL_DSECT
         ST    R2,NEW.LABEL_PREV
         ST    R4,NEW.LABEL_NEXT
         MVC   NEW.LABEL_EYE,LABEL_ID           SET BLOCK IDENTIFIER
         MVC   NEW.LABEL_NAME,DXD_LABEL         SET LABEL NAME
         MVI   NEW.LABEL_DISP,X'00'             FORCE FIRST BYTE
         MVC   NEW.LABEL_DISP+1(3),DXD_DISP_OUT DISPLACEMENT TO LABEL
         MVI   NEW.LABEL_TYPE,$LABEL_DATA       DATA TYPE LABEL
         XC    NEw.LABEL_EQU_PREV,NEW.LABEL_EQU_PREV
         XC    NEW.LABEL_EQU_NEXT,NEW.LABEL_EQU_NEXT
         LR    R4,R1                            SAVE ADDRESS
         B     ASSM0010
         DROP  PREV,NEW
*---------------------------------------------------------------------*
*                                                                     *
*        EOF on SYSPRINT                                              *
*                                                                     *
*---------------------------------------------------------------------*
ASSM0200 DS    0H
         ITRACE ID=EOF
         CLOSE SYSPRINT_DCB,                                           +
               MODE=31,                                                +
               MF=(E,DISCOMM_CLOSE)
         FREEPOOL SYSPRINT_DCB
         CLC   DISCOMM_ASSEMBLER_RC,H4        ERROR DURING ASSEMBLY?
         BNH   ASSM0210                       NO
         ITRACE ID=ASMERROR,                                           +
               DATA1=DISCOMM_ASSEMBLER_RC
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        MAKE SURE 1ST BLOCK'S DON'T HAVE 'PREV'                      *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
ASSM0210 DS    0H
         ICM   R3,15,DISCOMM_DSECT_NEXT       FIRST DSECT
         BZ    EXIT0000
         XC    DSECT_PREV,DSECT_PREV          MAKE SURE 1ST HAS NO PREV
ASSM0220 DS    0H
         ICM   R4,15,DSECT_LABEL_NEXT         FIRST LABEL IN DSECT
         BZ    ASSM0250
         XC    LABEL_PREV,LABEL_PREV          MAKE SURE 1ST HAS NO PREV
ASSM0230 DS    0H
         ICM   R5,15,LABEL_EQU_NEXT           FIRST EQU
         BZ    ASSM0240
         XC    EQU_PREV,EQU_PREV              MAKE SURE 1ST HAS NO PREV
ASSM0240 DS    0H
         ICM   R4,15,LABEL_NEXT               NEXT LABEL
         BNZ   ASSM0230
ASSM0250 DS    0H
         ICM   R3,15,DSECT_NEXT               NEXT DSECT
         BNZ   ASSM0220
         B     EXIT0000                       AND EXIT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ASSM0300 DS    0H
         ITRACE ID=ASMERR
* ------------------------------------------------------------------- *
*        OBTAIN DATA SET ID                                           *
* ------------------------------------------------------------------- *
         ITRACE ID=LMINIT,                                             +
               DATA1=DD_SYSPRINT
         LA    R0,LMINIT
         ST    R0,DXD_SPF_1
         LA    R0,DDID                        DDID (RETURNED BY LMINIT)
         ST    R0,DXD_SPF_2
         LA    R0,COMM_BLANKS
         ST    R0,DXD_SPF_3
         ST    R0,DXD_SPF_4
         ST    R0,DXD_SPF_5
         ST    R0,DXD_SPF_6
         ST    R0,DXD_SPF_7
         ST    R0,DXD_SPF_8
         ST    R0,DXD_SPF_9
         LA    R0,DD_SYSPRINT                 DDNAME
         ST    R0,DXD_SPF_10                  SET DDNAME ADDR
         OI    DXD_SPF_10,X'80'               SET END-OF-LIST
         LA    R1,DXD_SPF_PARMS               SPF PARMS
         L     R15,COMM_ISPLINK               ISPLINK ENTRY POINT
         BALR  R14,R15                        OBTAIN DDID
         ITRACE ID=LMINITRC,                                           +
               RDATA1=R15,                                             +
               DATA2=SPF_DDID
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0010                        NO
         MVC   DXD_DDID,SPF_DDID              SAVE SYSIN DATASET ID
         ITRACE ID=IN_DDID,                                            +
               DATA1=DXD_DDID
* ------------------------------------------------------------------- *
*        CALL BROWSE                                                  *
* ------------------------------------------------------------------- *
         ITRACE ID=BROWSE,                                             +
               DATA1=DXD_DDID
         LA    R0,BROWSE
         ST    R0,DXD_SPF_1
         LA    R0,COMM_BLANKS
         ST    R0,DXD_SPF_2
         ST    R0,DXD_SPF_3
         ST    R0,DXD_SPF_4
         ST    R0,DXD_SPF_5
         LA    R0,DXD_DDID                    DDID
         ST    R0,DXD_SPF_6                   SET DATA ID ADDR
         OI    DXD_SPF_6,X'80'                FLAG END-OF-LIST
         LA    R1,DXD_SPF_PARMS               PARMS FOR BROWSE
         L     R15,COMM_ISPLINK
         BALR  R14,R15                        DISPLAY ASSEMBLER OUTPUT
*---------------------------------------------------------------------*
*        FREE SYSIN                                                   *
*---------------------------------------------------------------------*
         ITRACE ID=FREE_IN
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVC   DAIR_DD,DD_SYSIN               SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE SYSIN
*---------------------------------------------------------------------*
*        FREE SYSPRINT                                                *
*---------------------------------------------------------------------*
         ITRACE ID=FREE_PRT
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVC   DAIR_DD,DD_SYSPRINT            SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE SYSPRINT
*---------------------------------------------------------------------*
*        FREE SYSLIB                                                  *
*---------------------------------------------------------------------*
         ITRACE ID=FREE_SYS
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVC   DAIR_DD,DD_SYSLIB              SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE SYSLIB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ICM   R7,15,DISCOMM_SYSLIB_NEXT      FIRST SYSLIB LIBRARY
         BZ    EXIT0000                       NO LIBRARY TO FREE
         USING SYSLIB_DSECT,R7
ASSM0310 DS   0H
         ITRACE ID=FREE_LIB,                                           +
               DATA1=SYSLIB_DDNAME
         MVI   DAIR_FUNC,$DAIR_FREE           FREE
         MVC   DAIR_DD,SYSLIB_DDNAME          SET DDNAME
         LA    R1,DAIRREQ                     DAIR PARMS
         L     R15,COMM_V_OSDAIR              OSDAIR ENTRY POINT
         BALR  R14,R15                        FREE LIBRARY
         MVC   SYSLIB_DDNAME,COMM_BLANKS      RESET DD NAME
         ICM   R7,15,SYSLIB_NEXT              NEXT SYSLIB
         BNZ   ASSM0310                       FREE THIS LIBRARY
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
ERR0000  DS    0H
         MVC   SPF_MSG_1,COMM_MSG_1
         MVC   SPF_MSG_2,COMM_MSG_2
         MVC   SPF_MSG_3,COMM_MSG_3
         MVC   SPF_MSG_4,COMM_MSG_4
         MVC   SPF_MSG_5,COMM_MSG_5
         MVI   DISCOMM_ASSEMBLER_RC+1,16
         B     EXIT0000
ERR0010  DS    0H
         ITRACE ID=DDID_ERR
         DC    H'0'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         OC    DXD_ASSEM_EP,DXD_ASSEM_EP      ASSEMBLER LOADED?
         BZ    EXIT0010                       NO
         ITRACE ID=DELASM                     DELETE ASSEMBLER
         DELETE EP=ASMA90
EXIT0010 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680
         SR    R15,R15                        CLEAR R15                 ASE01690
         ICM   R15,3,DISCOMM_ASSEMBLER_RC     SET RC
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*              WORK AREAS                                             *
*                                                                     *
*---------------------------------------------------------------------*
DXD_START  DC  Q(DXDASSEM)
AASMPARM DC    A(ASMPARM+X'80000000')         ASSEMBLER PARM'S
ASMPARM  DC    Y(ASMPARML-2)
         DC    C'NODECK,NOOBJECT'
ASMPARML EQU   *-ASMPARM
H4       DC    H'4'

XREF     DC    C' CROSS REFERENCE '
HEX1F1F  DC    8X'1F'
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
CHARHEX  DC    X'000A0B0C0D0E0F000000000000000000'  00-0F
         DC    X'00010203040506070809000000000000'  10-1F

OP_DSECT DC    CL8'DSECT'
OP_CSECT DC    CL8'CSECT'
OP_EQU   DC    C'EQU '
SRCSTMT  DC    C'SOURCE STATEMENT'
LABEL_ID DC    CL8'LABEL'
EQU_ID   DC    CL8'EQU'

LMINIT   DC    CL8'LMINIT'
DDID     DC    CL8'DDID'
BROWSE   DC    CL8'BROWSE'

DD_SYSIN       DC   CL8'SYSIN'
DD_SYSPRINT    DC   CL8'SYSPRINT'
DD_SYSLIB      DC   CL8'SYSLIB'

*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDASSEM         DSECT
                 COPY  DXDPREF

DXD_ASSEM_EP     DS    A              ASSEMBLER'S ENTRY POINT

DXD_SPF_PARMS    DS    0A
DXD_SPF_1        DS    A
DXD_SPF_2        DS    A
DXD_SPF_3        DS    A
DXD_SPF_4        DS    A
DXD_SPF_5        DS    A
DXD_SPF_6        DS    A
DXD_SPF_7        DS    A
DXD_SPF_8        DS    A
DXD_SPF_9        DS    A
DXD_SPF_10       DS    A

DXD_LABEL        DS    CL63
DXD_DISP_IN      DS    CL7
DXD_DISP_OUT     DS    XL4

DXD_DDID         DS    CL8

DXD_FLAGS        DS    X              FLAGS
$FIRST_LIBRARY   EQU   X'80'          .. FIRST LIBRARY IN SYSLIB
$XREF            EQU   X'40'          .. CROSS REFERENCE HAS BEEN FOUND

                 DAIRREQ  DSECT=NO

DXD_IO           DC    CL133' '
                 ORG   DXD_IO+1
DXD_IO_DISP      DS    CL6
                 ORG   DXD_IO+23
DXD_IO_ADDR1     DS    CL5
                 ORG   DXD_IO+41
DXD_IO_LABEL     DS    CL63
                 ORG

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 SESSION  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 BPXYSTAT DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     OPERAND
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 OSSPFD   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     REGEQU
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHADCBE
         END  DISASSEM
