*--------------------------------------------------------------------*
*                                                                    *
*  Module name: GENRR3                                               *
*                                                                    *
*  Function:                                                         *
*   Generate RR type instructions                                    *
*                                                                    *
*  At entry R7 is AREA address                                       *
*           R5 is address of instruction                             *
*           R4 is address of OPCODE entry                            *
*                                                                    *
*--------------------------------------------------------------------*
GENRR3   CSECT
GENRR3   AMODE 31
GENRR3   RMODE ANY
         USING GENRR3,R15
         USING OSCOMM,R12
         USING SESSION,R11
         USING DISCOMM,R9
         USING OPCODE_DSECT,R4
         B     MOD0000                        SKIP EYECATCHER
MODID    DC    CL8'GENRR3'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
MOD0000  DS    0H
         STM   R14,R12,12(R13)                SAVE REGS
         LR    R10,R15                        SET BASE REG
         DROP  R15
         USING GENRR3,R10
         L     R15,SESS_DXD_ADDR              WORK AREA
         A     R15,DXD_START                  PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                        SET SAVE AREA ADDRESS
         USING DXDRR3,R13
         MVC   DXD_CSECT,MODID
         ITRACE ID=ENTRY,                                              +
               RDATA1=R7,                                              +
               DATA2=0(R5)
         MVC   DXD_CC,1(R5)                   COPY CONDITION
         NI    DXD_CC,X'F0'                   LEAVE ONLY CONDTION
         MVC   OPCODE_MNEMONIC,OP_BCR         RESET OPCODE
         TM    DISCOMM_CC,$OPCODE_CCA         ARITHMETIC?
         BO    GEN0020                        YES
         TM    DISCOMM_CC,$OPCODE_CCC         COMPARE?
         BO    GEN0030                        YES
         TM    DISCOMM_CC,$OPCODE_CCL         LOGICAL?
         BO    GEN0040                        YES
GEN0000  DS    0H
         ITRACE ID=BCR
         SR    R0,R0
         IC    R0,DISCOMM_CC                  CONDITION
         SRL   R0,4
         CVD   R0,COMM_DWORD
         MVC   DXD_CONDITION,=X'40202120'
         ED    DXD_CONDITION,COMM_DWORD+6     EDIT CONDITION
         CLI   DXD_CONDITION+2,C' '           BLANK?
         BE    GEN0010                        YES
         MVC   DISCOMM_SOURCE_OPERAND1(2),DXD_CONDITION+2
         MVI   DISCOMM_SOURCE_OPERAND1+2,C','
         LA    R1,DISCOMM_SOURCE_OPERAND1+3
         B     GEN0070
GEN0010  DS    0H
         MVC   DISCOMM_SOURCE_OPERAND1(1),DXD_CONDITION+3
         MVI   DISCOMM_SOURCE_OPERAND1+1,C','
         LA    R1,DISCOMM_SOURCE_OPERAND1+2
         B     GEN0070
GEN0020  DS    0H
         ITRACE ID=ARITH
         LA    R1,ARITHMETIC
         B     GEN0050
GEN0030  DS    0H
         ITRACE ID=COMPARE
         LA    R1,COMPARE
         B     GEN0050
GEN0040  DS    0H
         ITRACE ID=LOGICAL
         LA    R1,LOGICAL
GEN0050  DS    0H
         USING CC_DSECT,R1
         CLC   CC_CODE,DXD_CC                 CONDITION FOUND?
         BE    GEN0060                        YES
         LA    R1,CC_L(,R1)                   NEXT
         CLI   0(R1),X'FF'                    END OF TABLE?
         BE    GEN0000                        YES
         B     GEN0050
GEN0060  DS    0H
         ITRACE ID=SET,                                                +
               DATA1=CC_MNEMONIC
         MVC   OPCODE_MNEMONIC,CC_MNEMONIC    SET MNEMONIC
         LA    R1,DISCOMM_SOURCE_OPERAND1
GEN0070  DS    0H
         MVC   DXD_CC,1(R5)                   COPY BYTE 2 AGAIN
         NI    DXD_CC,X'0F'                   LEAVE ONLY REGISTER NBR
         SR    R2,R2
         IC    R2,DXD_CC                      REGISTER NBR
         SLL   R2,1                           MULTIPLY BY 2
         LA    R2,REGISTER_TABLE(R2)          REGISTER NBR ADDRESS
         MVI   0(R1),C'R'
         MVC   1(2,R1),0(R2)                  COPY REGISTER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXD_START      DC   Q(DXDRR3)
OP_BCR         DC   CL5'BCR'

REGISTER_TABLE DS   0C
               DC   CL2'0 '
               DC   CL2'1 '
               DC   CL2'2 '
               DC   CL2'3 '
               DC   CL2'4 '
               DC   CL2'5 '
               DC   CL2'6 '
               DC   CL2'7 '
               DC   CL2'8 '
               DC   CL2'9 '
               DC   CL2'10'
               DC   CL2'11'
               DC   CL2'12'
               DC   CL2'13'
               DC   CL2'14'
               DC   CL2'15'

ARITHMETIC     DS    0C                    ARITHMETIC MNEMONICS
               DC    X'00',CL6'NOPR  '     NO-OP
               DC    X'10',CL6'BOR   '     BRANCH OVERFLOW
               DC    X'20',CL6'BPR   '     BRANCH PLUS
               DC    X'40',CL6'BMR   '     BRANCH MINUS
               DC    X'70',CL6'BNZR  '     BRANCH NOT ZERO
               DC    X'80',CL6'BZR   '     BRANCH IF ZERO
               DC    X'B0',CL6'BNMR  '     BRANCH NOT MINUS
               DC    X'D0',CL6'BNPR  '     BRANCH NOT PLUS
               DC    X'E0',CL6'BNOR  '     BRANCH NOT OVERFLOW
               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH
               DC    X'FF'

COMPARE        DS    0C                    COMPARE MNEMONICS
               DC    X'00',CL6'NOPR  '     NO-OP
               DC    X'20',CL6'BHR   '     BRANCH HIGH
               DC    X'40',CL6'BLR   '     BRANCH LOW
               DC    X'70',CL6'BNER  '     BRANCH NOT EQUAL
               DC    X'80',CL6'BER   '     BRANCH EQUAL
               DC    X'B0',CL6'BNLR  '     BRANCH NOT LOW
               DC    X'D0',CL6'BNHR  '     BRANCH NOT HIGH
               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH
               DC    X'FF'

LOGICAL        DS    0C                    LOGICAL MNEMONICS
               DC    X'00',CL6'NOPR  '     NO-OP
               DC    X'10',CL6'BOR   '     BRANCH ONES
               DC    X'40',CL6'BMR   '     BRANCH MIXED
               DC    X'70',CL6'BNZR  '     BRANCH NOT ZEROS
               DC    X'80',CL6'BZR   '     BRANCH IF ZEROS
               DC    X'B0',CL6'BNMR  '     BRANCH NOT MIXED
               DC    X'E0',CL6'BNOR  '     BRANCH NOT ONES
               DC    X'F0',CL6'BR    '     UNCONDITIONAL BRANCH
               DC    X'FF'
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DXDRR3         DSECT
               COPY DXDPREF
DXD_CC         DS   X
DXD_CONDITION  DS   XL4
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
CC_DSECT       DSECT
CC_CODE        DS   X
CC_MNEMONIC    DS   CL6
CC_L           EQU  *-CC_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               SESSION  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               DISASMDA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               BPXYSTAT DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               OSSPFD   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY     REGEQU
               END  GENRR3
