{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012005000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE422.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE422.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x13'", "DS1TRBAL": "b'%R'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\r\\x00\\r\\x03\\x0e\\x00\\x06\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$INDEX": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THESE PROGRAMS ARE SUPPLIED ON AN AS IS BASIS\n\nSOME ORIGINALY MAY BE FROM THE DIFFERENT MODS TAPES AND JUST BEEN\nCHANGED TO FIT NEW RELEASES.  I WILL TRY AND INDICATE SUCH TO GIVE\nCREDIT TO THE AUTHOR.\n\nANYTHING ELSE WAS WRITTEN HERE AND IS FREELY DONATED WITH NO\nRESTRICTIONS ON THEIR USE.\n\nNO GUARANTEE OF ACCURACY IS GIVEN OR SHOULD BE ASSUMED.  IT IS THE\nUSERS RESPONSIBILY TO DETERMINE THE VALUE AND CORRECTNESS OF\nTHESE PROGRAMS AND MODIFICATIONS.\n\nERROR CORRECTIONS WILL BE SUPPLIED ON A TIME AVAILABLE BASIS\n\nSUGGESTIONS ARE WELCOME\n\nCONTACT\n\nDON MARQUARDT\n\n\n\n312-369-3000 EXT 2778\n\nSHARE  MSD    GUIDE  LTU\n\nCHEKTRAN  CONVERTS NUMERIC FIELDS TO SPELLED OUT WORDS FOR USE ON\n          CHECKS.  IS ABLE TO PRINT IN BOTH ENGLISH AND FRENCH AND\n          SUPPORTS BOTH DOLLARS/CENTS AS WELL AS ENGLISH POUNDS/PENCE\n          ORIGINAL AUTHOR UNKNOWN. I CONVERTED ROUTINE FROM DOS TO OS.\n\nDI        A DISPLAY INITS FOR 1.3.4 OF JES\n          UPDATE OF DI IN AIRFORCE FILE 300\n\n*\n*\n*  THE NEXT THREE ENTRIES ARE MACROS THAT MAY BE USED IN SOME OF\n*  THE PROGRAMS IN THIS FILE.\n*\n*\n\nENT13     ANOTHER STARTUP ROUTINE.  THIS ONE USES REG 13 AS A BASE\n          AND INCLUDES CHAINING AND SUPPLYING A NEW SAVE AREA.  IT\n          ELIMINATES WASTING A REGISTER JUST TO POINT TO A SAVE AREA.\n          A PARM OF NO= ALLOWS THE SPECIFICATION OF THE NUMBER OF\n          BASE REGS TO USE.  DEFAULT IS 1.  ASSIGNMENT IS FROM\n          REG 13 DOWN.\n\nEQUATE    ANOTHER REGISTER EQUATE ROUTINE.  PRINTS THE WORD EQUATE\n          IN LARGE BLOCK LETTERS FOR EASIER SPOTTING IN A LISTING\n\nEXT13     MATCHING ROUTINE TO ENT13\n\n*\n*\n*   END OF MACROS\n*\n*\n\nFCBIDR    THIS PROGRAM IS KNOWN AS LISTIDR FROM FILE 316.  I DELETED\n          SOME OF THE PUT'S SO ONLY THE USER IDR INFO IS PRINTED\n          THIS MAKES A NICE LIST FOR REVIEWING JUST WHAT FCB'S\n          ARE ON THE SYSTEM, WHEN, FOR WHAT CUSTOMER, AND WHO ADDED\n          IT TO THE SYSTEM\n\n          IT IS USED IN COMBINATION WITH THE FOLLOWING FCB.... PROGRAMS\n\nFCBIDRJC  THE JCL AND SYSIN USED FOR THE ABOVE PROGRAM\n\nFCBGEN    PROGRAM WE HAVE OUR PRINT ROOM OPERATORS USE TO CREATE FCB'S\n          A CLIST IS USED TO INVOKE AND IS FCBGENC.  THE ROUTINE ASKS\n          FOR LAST 4 POSITIONS OF FCB NAME, CHANNEL/LINES, REQUESTOR,\n          AND CUSTOMER OR FORM NAME.  IT THEN CHECKS TO MAKE SURE THAT\n          THIS FCB DOES NOT ALREADY EXIST.  IF IT DOES IT ASKS THE\n          OPERATOR IF IT IS OK TO REPLACE. IF YES, ROUTINE CONTINUES.\n          IF NOT ROUTINE ASKS FOR A NEW NAME.  REQUESTOR AND\n          CUSTOMER/FORM AND DATE CREATED IS ENTERED AS IDR DATA\n          FOR AUDIT USES LATER.  THE PROGRAM THEN EXECUTES FCBWTO\n          AT COMPLETION TO NOTIFY THE USER WHEN THE FCB IS AVAILABLE.\n\nFCBGENC   CLIST USED WITH FCBGEN\n\nFCBWTO    PROGRAM TO ADVISE USER THAT THE FCB IS NOW AVAILABLE\n\n\nHEWLDFP1  THIS IS A MODIFICATION OF THE DFP LINKAGE EDITOR AT PTF\n          LEVEL UZ78097 TO ADD THE SYSLMOD DATASET NAME AND VOLSER\n          TO THE MESSAGE INDICATING ADDED/REPLACED.  IT IS NOT IN\n          SMP FORMAT.  YOU WILL HAVE TO DO THAT YOURSELF.\n\nHEWLFDPX  XA VERSION OF THE ABOVE.\n\n\nIEFTBL    THIS IS THE TABLE OF 'GOOD GUYS' THAT ARE NOT TIMED OUT\n          FOR WAIT TIME DURING THE DAY.  OUTSIDE THE HOURS OF\n          7AM THRU 5PM.\n\n          NOTE***  THIS MODULE MUST BE AVAILABLE PRIOR TO USING THE\n                   COMPANION MODULE IEFUTL.  NO CHECK IS MADE IN\n                   IEFUTL TO BYPASS IF NOT AVAILABLE.  I PLAN TO\n                   FIX THIS AS SOON AS TIME PERMITS.\n\nIEFUTL    THIS IS OUR UTL EXIT THAT CANCELS EVERYTHING EXCEPT THE\n          'GOOD TSO GUYS'.  SEE IEFTBL ABOVE\n\nINITJCL   THIS IS THE JCL WE USE FOR THE FOLLOWING TWO PROGRAMS\n          ONLY THE UNIT AND PGM NAMES ARE CHANGED BASED ON WHICH\n          TYPE OF TAPE WE ARE INIT-ING.\n\nINITTAPE  THIS IS OUR HOME GROWN TAPE INIT ROUTINE.  OUR OPERATORS\n          LIKE IT BETTER.\n\nINIT3480  SAME AS INITTAPE BUT FOR USE WITH THE 3480 DRIVES AS IT\n          USES THE MSG DISPLAYS ON THE DRIVE.\n\nJESNSLT   ZAP TO JES PRPU TO MAKE BLOCK SEPARATOR NOT TO SLANT\n          WHILE IT CAN BE DONE WITH SMP, IT SEEMS A LITTLE OVERKILL\n          TO RUN AN SMP ASSEMBLY AND LINKEDIT FOR A 1 BYTE CHANGE\n\nJESNSLTX  XA VERSION OF ABOVE ZAP.  SAME COMMENTS APPLY.\n\nMAS9010   PRINTS OUT THE AUTOMATIC SCHEDULING FACILITY FILE\n          THIS FACILITY WAS WRITTEN BY DAVE COLE AT COMNET\n          AND WAS FILE 388 AS OF VERSION 245\n\nPRVIPLSP  MOD TO MVS 1.3.4 TO MAKE VOLUMES NOT IN VATLIST TO\n          DEFAULT TO PRIVATE INSTEAD OF PUBLIC MOUNT\n\nPRVIPLXA  XA VERSION OF THE ABOVE\n\nTSOMAXSP  THIS ZAP ALLOWS THE \"GOOD GUYS\" (TSD.. IN OUR CASE) TO\n          LOGON EVEN IF THE MAXUSERS IS EXCEEDED.  NOTE THAT IF\n          MAXUSERS IS SET TO 0 EVEN US GOOD GUYS CANT GET ON.  MUST\n          BE AT LEAST 1.  THIS ZAP THANKS TO FRANK WALSCHLAGER\n          FROM SPIEGEL.  IT IS FOR MVS/SP 1.3.3.\n\nTSOMAXXA  XA VERSION OF THE ABOVE\n          GREAT WHAT A DISASSEMBLER AND A LITTLE HUNTING CAN DO\n\nVARLENTH  A UTILITY PROGRAM THAT READS A VARIABLE LENGTH FILE AND\n          REPORTS ON THE RECORD SIZE AND NUMBER OF RECORDS OF EACH\n          LENGTH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHEKTRAN": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CHEKTRAN START                                                          00001\n*                                                                       00002\n*                                                                       00003\n* ASSEMBLER SUB-PROGRAMME TO SET UP AMOUNTS FOR PRINTING CHEQUES.       00004\n*                                                                       00005\n*  BOTH AN EDITED NUMERIC FIELD WITH THE CURRENCY SYMBOL PROTECTIVELY   00006\n*  PLACED AND THE AMOUNT IN WORDS ARE PREPARED.                         00007\n*                                                                       00008\n*                                                                       00009\n* THE FOLLOWING COMMENTS SHOW HOW PART OF THE WORKING STORAGE SECTION   00010\n* OF THE DATA DIVISION OF A COBOL CALLING PROGRAMME SHOULD BE SET UP.   00011\n* THIS IS THE PART OF THE CALLING PROGRAMME'S STORAGE THAT MUST BE      00012\n* AVAILABLE TO THIS ROUTINE.                                            00013\n*                                                                       00014\n*  NOTE THAT THIS ROUTINE DISTURBS ONLY THE 'CKT-OUTPUT' GROUP ITEM.    00015\n*  ALSO NOTE THAT THE SYMBOLS 'ABC', 'DEF', 'G', 'HIJ', AND 'N' ARE     00016\n*  INTENDED HERE AS REPRESENTATIONAL VARIABLES.                         00017\n*                                                                       00018\n*      05  CHEKTRAN-DATA.                                               00019\n*          10  CKT-CODE                            PICTURE  X(1).       00020\n*          10  CKT-A-TOTAL-L   VALUE ABC                                00021\n*                              COMPUTATIONAL-3     PICTURE  9(3).       00022\n*          10  CKT-A-LINE-L    VALUE DEF                                00023\n*                              COMPUTATIONAL-3     PICTURE  9(3).       00024\n*          10  CKT-A-INDENT    VALUE G                                  00025\n*                              COMPUTATIONAL-3     PICTURE  9(1).       00026\n*          10  CKT-DOLLARS     COMPUTATIONAL-3     PICTURE S9(9)V9(2).  00027\n*          10  CKT-PENCE REDEFINES CKT-DOLLARS                          00028\n*                              COMPUTATIONAL-3     PICTURE S9(11).      00029\n*          10  CKT-OUTPUT.                                              00030\n*              15  CKT-A-LINES COMPUTATIONAL-3     PICTURE S9(1).       00031\n*              15  CKT-NUMERIC                     PICTURE  X(16).      00032\n*              15  CKT-ALPHABETIC.                                      00033\n*                  20  CKT-LINE-1                  PICTURE  X(DEF).     00034\n*                  20  CKT LINE-2                  PICTURE  X(DEF).     00035\n*                  .            .                                       00036\n*                  .            .                                       00037\n*                  20  CKT-LINE-N                  PICTURE  X(HIJ).     00038\n*                                                                       00039\n*      NOTE THAT 'HIJ' MUST NOT EXCEED 'DEF' AND THAT 'ABC' MUST EQUAL  00040\n*           (N MINUS ONE) TIMES 'DEF' PLUS 'HIJ'.                       00041\n*                                                                       00042\n*                                                                       00043\n* THE INPUT CODING HAS THE FOLLOWING MEANING -                          00044\n*                                                                       00045\n*   CKT-CODE      - LETTER 'F' SIGNIFIES FRENCH LANGUAGE, DOLLARS AND   00046\n*                   CENTS.                                              00047\n*                                                                       00048\n*                 - LETTER 'D' SIGNIFIES ENGLISH LANGUAGE, DECIMAL      00049\n*                   STERLING.                                           00050\n*                                                                       00051\n*                 - LETTER 'L' SIGNIFIES ENGLISH LANGUAGE, L-S-D        00052\n*                   STERLING.                                           00053\n*                                                                       00054\n*                 - ANY OTHER CODING SIGNIFIES ENGLISH LANGUAGE,        00055\n*                   DOLLARS AND CENTS.                                  00056\n*                                                                       00057\n*   CKT-A-TOTAL-L - THE VALUE 'ABC' IS THE NUMBER OF CHARACTERS IN THE  00058\n*                   'CKT-ALPHABETIC' OUTPUT AREA. THIS MUST BE IN THE   00059\n*                   RANGE 30-259 INCLUSIVE.                             00060\n*                                                                       00061\n*   CKT-A-LINE-L  - THE VALUE 'DEF' IS THE NUMBER OF CHARACTERS IN EACH 00062\n*                   LINE OF THE ALPHABETIC OUTPUT AREA, WITH THE        00063\n*                   EXCEPTION THAT THE FINAL LINE MAY BE SHORTER.       00064\n*                   THE VALUE 'DEF' MUST NOT BE LESS THAN 30.           00065\n*                                                                       00066\n*   CKT-INDENT    - THE VALUE 'G' IS THE NUMBER OF BLANK SPACES         00067\n*                   INSERTED AT THE BEGINNING OF EACH ALPHABETIC OUTPUT 00068\n*                   LINE BUT THE FIRST. IT MUST NOT BE NEGATIVE.        00069\n*                   EITHER 0 OR 3 IS SUGGESTED AS A VALUE.              00070\n*                                                                       00071\n*                                                                       00072\n*   THE AMOUNT FIELD MUST BE POSITIVE. IT MUST CONTAIN THE NUMBER OF    00073\n*   MINOR UNITS OF CURRENCY IN THE AMOUNT.                              00074\n*                                                                       00075\n*   THIS ROUTINE CAN BE ENTERED VIA A STATEMENT SUCH AS -               00076\n*        CALL 'CHEKTRAN' USING CHEKTRAN-DATA.                           00077\n*                                                                       00078\n*                                                                       00079\n* OUTPUT FROM THE PROGRAMME IS SET UP IN THE FOLLOWING 3 AREAS -        00080\n*                                                                       00081\n*   CKT-A-LINES    - THIS ONE BYTE PACKED DECIMAL FIELD GIVES THE       00082\n*                    NUMBER OF LINES OF ALPHABETIC DATA SET UP TO       00083\n*                    FULLY DESCRIBE THE AMOUNT IN WORDS.                00084\n*                    THIS FIELD IS SET TO ZERO SHOULD ANY INVALIDITIES  00085\n*                    BE DETECTED BY THIS PROGRAMME.                     00086\n*                                                                       00087\n*   CKT-NUMERIC    - THIS 16 CHARACTER FIELD IS SET UP WITH THE CHEQUE  00088\n*                    AMOUNT EDITED, AND WITH THE CURRENCY SYMBOL JUST   00089\n*                    TO THE LEFT OF THE MOST SIGNIFICANT DIGIT OF THE   00090\n*                    AMOUNT.                                            00091\n*                                                                       00092\n*   CKT-ALPHABETIC - THIS AREA IS SET UP WITH THE AMOUNT IN WORDS.      00093\n*                    NOTE THAT BOTH ENDS OF THE ALPHABETIC DESCRIPTION  00094\n*                    ARE AUTOMATICALLY BRACKETED BY A PAIR OF           00095\n*                    ASTERISKS, AND ALSO THAT UNUSED SPACE IN THE RIGHT 00096\n*                    HAND END OF THIS AREA IS BLANKED.                  00097\n*                                                                       00098\n*                                                                       00099\n* INVALIDITIES CAN BE TURNED UP FOR THE FOLLOWING REASONS -             00100\n*                                                                       00101\n*   - 'CKT-A-TOTAL-L' IS NOT IN THE RANGE 30 TO 259 INCLUSIVE.          00102\n*                                                                       00103\n*   - 'CKT-A-LINE-L' IS LESS THAN 30.                                   00104\n*                                                                       00105\n*   - 'CKT-A-INDENT' IS NEGATIVE.                                       00106\n*                                                                       00107\n*   - THE AMOUNT FIELD IS ZERO OR NEGATIVE.                             00108\n*                                                                       00109\n*   - THE 'CKT-NUMERIC' FIELD IS NOT LARGE ENOUGH TO HOLD SOME          00110\n*     EXTREMELY HIGH L-S-D STERLING AMOUNTS.                            00111\n*                                                                       00112\n*   - THE 'CKT-ALPHABETIC' IS NOT LARGE ENOUGH TO HOLD THE ENTIRE       00113\n*     ALPHABETIC DESCRIPTION OF THE AMOUNT.                             00114\n*                                                                       00115\n*   AGAIN NOTE THAT 'CKT-A-LINES' IS SET TO ZERO ON ALL INVALIDITIES.   00116\n*   THE CONTENTS OF THE REST OF THE OUTPUT AREA IS UNPREDICTABLE.       00117\n*                                                                       00118\n*                                                                       00119\n*                                                                       00120\nRB       EQU   2                        BASE REGISTER.                  00121\nRC       EQU   3                        CURRENCY PHRASE POINTER.        00122\nRG       EQU   4                        POINTER TO PHRASES BEING GOTTEN 00123\nRI       EQU   5                        INPUT/OUTPUT AREA POINTER.      00124\nRL       EQU   6                        LANGUAGE PHRASE POINTER.        00125\nRN       EQU   7                        NEXT LINE START POINTER.        00126\nRP       EQU   8                        OUTPUT PLACEMENT POINTER.       00127\nRW1      EQU   9                        PRIMARY WORK REGISTER.          00128\nRW2      EQU   10                       SECONDARY WORK REGISTER.        00129\nRX1      EQU   11                       HIGH LEVEL LINKAGE REGISTER.    00130\nRX2      EQU   12                       LOW LEVEL LINKAGE REGISTER.     00131\n*                                                                       00132\n         SAVE  (14,12)                  SAVE REGISTERS.                 00133\n         BALR  RB,0                     SET UP THE BASE REGISTER.       00134\n         USING *,RB                                                     00135\n         USING LANGGO,RL                                                00136\n         USING CURRGO,RC                                                00137\n         USING INANDOUT,RI                                              00138\n         L     RI,0(0,1)                SET UP I/O LINKAGE POINTER.     00139\n         LA    RP,ALFOUT+1              INITIALIZE 'RP'.                00140\n         ZAP   DOUBLEWD,CHAROUT                                         00141\n         CVB   RW1,DOUBLEWD             VERIFY THAT THE NUMBER OF       00142\n         CH    RW1,BINH30               CHARACTERS IN THE ALPHABETIC    00143\n         BL    INVALID                  OUTPUT MESSAGE IS IN THE RANGE  00144\n         CH    RW1,BINH259              30-259 INCLUSIVE.               00145\n         BH    INVALID                                                  00146\n         SH    RW1,BINARYH4             SET UP LENGTH OF 'INIZEALF'.    00147\n         STC   RW1,INIZEALF+1                                           00148\n         LA    RW2,ALFOUT+3             SET UP 'PUTLIMIT' WITH ADDRESS  00149\n         AR    RW2,RW1                  OF RIGHTMOST VALID PLACEMENT    00150\n         ST    RW2,PUTLIMIT             SPOT.                           00151\n         ZAP   DOUBLEWD,CHARPLN                                         00152\n         CVB   RN,DOUBLEWD              VERIFY THAT THERE ARE 30 OR     00153\n         CH    RN,BINH30                MORE CHARACTERS PER LINE.       00154\n         BL    INVALID                                                  00155\n         STH   RN,HCHARPLN              SET UP 'HCHARPLN' AND           00156\n         BCTR  RN,0                     INITIALIZE REGISTER 'RN'.       00157\n         AR    RN,RP                                                    00158\n         ZAP   WORK(1),INDENT           SET UP 'HINDENT' AND IN THE     00159\n         BM    INVALID                  PROCESS ENSURE THAT THE LEFT    00160\n         MVO   HLENGTH(3),WORK(1)       HAND BYTE OF 'HLENGTH' IS ZERO. 00161\n         MVC   HINDENT,HLENGTH                                          00162\n*                                                                       00163\n         ZAP   DOUBLEWD(7),AMOUNT       SET UP AND TEST THE AMOUNT.     00164\n         BNH   INVALID                                                  00165\n         MVC   LINESOUT(20),PACKED1     INITIALIZE FIRST 20 BYTES OF    00166\n         LA    1,NUMOUT+12              OUTPUT AND REGISTER 1.          00167\n         LA    RC,DOLLAR                SET UP 'RC' RE DOLLARS & CENTS. 00168\n         CLI   INCODE,C'F'                                              00169\n         BNE   *+12                     FIX 'RL' RE LANGUAGE.           00170\n         LA    RL,FRENCH-1                                              00171\n         B     DECIMAL                                                  00172\n         LA    RL,ENGLISH-1                                             00173\n         CLI   INCODE,C'D'                                              00174\n         BNE   *+12                                                     00175\n         LA    RC,POUNDDEC              SET UP DECIMAL POUNDS.          00176\n         B     DECIMAL                                                  00177\n         CLI   INCODE,C'L'                                              00178\n         BE    LSDDO                                                    00179\nDECIMAL  EDMK  NUMOUT(16),DOUBLEWD+1    FOR ALL DECIMAL CURRENCIES, SET 00180\n         BCTR  1,0                      UP THE NUMERIC OUTPUT FIELD     00181\n         MVC   0(1,1),CURRSYMB          WITH THE CURRENCY SYMBOL AND    00182\n         MVO   DOUBLEWD,DOUBLEWD+1(6)   SHIFT THE AMOUNT PROPERLY IN    00183\n         B     INIZEALF                 THE DOUBLEWORD FIELD.           00184\nLSDDO    LA    RC,POUNDLSD                                              00185\n         ZAP   WORK(9),DOUBLEWD+1(6)                                    00186\n         DP    WORK(9),LSDP240          L-S-D STERLING -                00187\n         DP    WORK+5(4),LSDP12                                         00188\n         MVN   WORK+4(3),WORK+5         FIX UP REGISTER 'RC'.           00189\n         MVC   WORK+5(1),WORK+6         FIND THE NUMBER OF POUNDS,      00190\n         MVC   WORK+6(1),WORK+8         SHILLINGS, AND PENCE.           00191\n         MVC   NUMOUT+13(9),LSDEDIT     SET UP FOR THE EDIT.            00192\n         EDMK  NUMOUT(19),WORK          DO THE EDIT AND PLACE THE       00193\n         BCTR  1,0                      CURRENCY SYMBOL.                00194\n         MVC   0(1,1),CURRSYMB          CLOSE UP THE EDITED FIELD IF    00195\n         CLI   NUMOUT+17,C'0'           THERE ARE ZEROES IN EITHER THE  00196\n         BNE   *+10                     TENS SPOT OF SHILLINGS OR THE   00197\n         MVC   NUMOUT+17(4),NUMOUT+18   TENS SPOT OF THE PENCE.         00198\n         CLI   NUMOUT+14,C'0'                                           00199\n         BNE   *+10                     SHIFT THE FIELD LEFT UNTIL IT   00200\n         MVC   NUMOUT+14(7),NUMOUT+15   IS PROPERLY ALIGNED, ALWAYS     00201\nLSDNFIX  CLI   NUMOUT,C' '              ENSURING THAT NO SIGNIFICANT    00202\n         BNE   INVALID                  DATA IS SHIFTED OUT AT THE      00203\n         MVC   NUMOUT(21),NUMOUT+1      TOP END.                        00204\n         CLI   NUMOUT+16,C'*'                                           00205\n         BNE   LSDNFIX                  SET UP THE AMOUNT IN 'DOUBLEWD' 00206\n         MVO   WORK(8),WORK(7)          PROPERLY. SHILLINGS IN TOP      00207\n         MVC   DOUBLEWD(1),WORK+5       SPOT, POUNDS IN NEXT FIVE, AND  00208\n         MVC   DOUBLEWD+1(5),WORK       PENCE IN THE NEXT.              00209\n         MVC   DOUBLEWD+6(1),WORK+6                                     00210\n*                                                                       00211\nINIZEALF MVC   ALFOUT+4(0),ALFOUT+3     BLANK ALPHA FIELD.              00212\n         MVC   FRFIXPOS,FRFIXSNG                                        00213\n         CLC   DOUBLEWD+1(2),HEXTEST    DO THE MILLIONS IF THEIR DIGITS 00214\n         BE    DOTHOU                   ARE NON-ZERO.                   00215\n         MVC   HTU,DOUBLEWD+1                                           00216\n         BAL   RX1,DOHTU                                                00217\n         LA    RG,MILLIONS              ONLY USE THE PLURAL ON FRENCH.  00218\n         CLC   HTU,HEXTEST+4                                            00219\n         BNE   *+8                                                      00220\n         LA    RG,MILLION                                               00221\n         BAL   RX2,PUT                                                  00222\nDOTHOU   MVO   HTU(3),DOUBLEWD+3(2)     NOW DO THE THOUSANDS IF THEIR   00223\n         CLC   HTU,HEXTEST              DIGITS ARE NON-ZERO.            00224\n         BE    DOUNITS                                                  00225\n         CLI   INCODE,C'F'              AVOID DIGIT WORDS IF ONE        00226\n         BNE   *+14                     THOUSAND IN FRENCH.             00227\n         CLC   HTU,HEXTEST+4                                            00228\n         BE    *+8                                                      00229\n         BAL   RX1,DOHTU                                                00230\n         LA    RG,THOUSAND                                              00231\n         BAL   RX2,PUT                                                  00232\nDOUNITS  MVC   FRFIXPOS,FRFIXPLR        NOW DO THE HUNDREDS, TENS, AND  00233\n         LA    RX1,DOMAJOR              UNITS DIGITS.                   00234\n         MVC   HTU,DOUBLEWD+4                                           00235\n         NI    H,X'0F'                                                  00236\n         CLI   H,X'00'                                                  00237\n         BNE   DOHTU                                                    00238\n         CLC   DOUBLEWD+1(4),HEXTEST                                    00239\n         BNE   DOANDTU                                                  00240\n         CLI   TU,X'00'                                                 00241\n         BNE   DOTU                                                     00242\nDOMAJOR  LA    RG,MAJORS                NOW DESCRIBE ANY MAJOR UNITS.   00243\n         CLC   DOUBLEWD+1(5),HEXTEST+1                                  00244\n         BH    FIXMAJOR                                                 00245\n         BL    TRYINTER                                                 00246\n         LA    RG,MAJOR                                                 00247\nFIXMAJOR BAL   RX2,PUT                                                  00248\nTRYINTER CLI   DOUBLEWD,X'00'           NOW DESCRIBE ANY INTERMEDIATE   00249\n         BE    TRYMINOR                 UNITS.                          00250\n         MVC   TU,DOUBLEWD                                              00251\n         BAL   RX1,DOTU                                                 00252\n         LA    RG,INTERS                                                00253\n         CLI   TU,X'01'                                                 00254\n         BNE   FIXINTER                                                 00255\n         LA    RG,INTER                                                 00256\nFIXINTER BAL   RX2,PUT                                                  00257\nTRYMINOR LA    RG,ONLY                  NOW DESCRIBE ANY MINOR UNITS.   00258\n         CLI   DOUBLEWD+6,X'00'                                         00259\n         BE    FIXMINOR                                                 00260\n         MVC   TU,DOUBLEWD+6                                            00261\n         CLC   DOUBLEWD(6),HEXTEST                                      00262\n         BL    *+12                                                     00263\n         LA    RG,AND                                                   00264\n         BAL   RX2,PUT                                                  00265\n         BAL   RX1,DOTU                                                 00266\n         LA    RG,MINORS                                                00267\n         CLI   TU,X'01'                                                 00268\n         BNE   FIXMINOR                                                 00269\n         LA    RG,MINOR                                                 00270\nFIXMINOR BAL   RX2,PUT                                                  00271\nOUT      RETURN (14,12)                                                 00272\nINVALID  MVI   LINESOUT,X'0C'                                           00273\n         B     OUT                                                      00274\n*                                                                       00275\n         DS    0D                                                       00276\nDOUBLEWD DS    D                                                        00277\nPUTLIMIT DS    F                        ADDRESS OF LAST ALLOWABLE SPOT. 00278\nHCHARPLN DS    H                                                        00279\nHINDENT  DS    H                                                        00280\nBINARYH2 DC    X'0002'                                                  00281\nBINARYH4 DC    X'0004'                                                  00282\nBINH30   DC    X'001E'                                                  00283\nBINH259  DC    X'0103'                                                  00284\nHLENGTH  DS    H                                                        00285\nWORK     DS    CL22                                                     00286\nPACKED1  DC    X'1C'                                                    00287\n         DC    X'40402020206B2020206B2021204B2020',C'** '               00288\nLSDEDIT  DC    X'602020602020',C'** '                                   00289\nLSDP12   DC    X'012C'                                                  00290\nHEXTEST  DC    X'000000000001'                                          00291\n*                                                                       00292\n*                                                                       00293\n* SUBROUTINE TO PLACE PHRASES FOR HUNDREDS DIGIT AND TENS AND UNITS     00294\n* DIGITS.                                                               00295\n*                                                                       00296\n*  ENTRY SHOULD BE MADE SO THAT REGISTER 'RX1' IS SET UP FOR RETURN.    00297\n*                                                                       00298\n*  FOR ALL ENTRIES, THE POSITION 'TU' MUST HAVE BEEN SET UP WITH THE    00299\n*  TENS DIGIT IN THE ZONE PORTION AND THE UNITS DIGIT IN THE NUMERIC    00300\n*  PORTION.                                                             00301\n*                                                                       00302\n*  IF ENTRY IS MADE TO 'DOHTU', THE POSITION 'H' MUST HAVE BEEN SET UP  00303\n*  WITH ZERO IN THE ZONE PORTION AND THE HUNDREDS DIGIT IN THE NUMERIC  00304\n*  PORTION. THE ROUTINE WILL PLACE THE HUNDREDS DIGIT AND WORD IF       00305\n*  NEEDED, THE CONNECTIVE 'AND' WHERE REQUIRED, AND THE TENS AND UNITS  00306\n*  DIGITS WHEN REQUIRED. DO NOT ENTER IF ALL THE DIGITS ARE ZERO.       00307\n*                                                                       00308\n*  IF ENTRY IS MADE TO 'DOANDTU', THE ROUTINE WILL EXIT AFTER DOING     00309\n*  NOTHING IF 'TU' IS ZERO. OTHERWISE THE ROUTINE WILL PLACE THE        00310\n*  CONNECTIVE 'AND' IF THE LANGUAGE IS ENGLISH AND THEN ALWAYS PLACE    00311\n*  THE TENS AND UNITS DIGITS.                                           00312\n*                                                                       00313\n*  IF ENTRY IS MADE TO 'DOTU', THE ROUTINE WILL PLACE THE TENS AND      00314\n*  UNITS DIGITS.                                                        00315\n*                                                                       00316\nDOHTU    CLI   H,X'00'                  GO DIRECTLY TO 'DOTU' IF THE    00317\n         BE    DOTU                     HUNDREDS DIGIT IS ZERO.         00318\n         MVC   HTUFIX+5(1),H                                            00319\nHTUFIX   MVC   HTULOAD+3(1),0(RL)       SET UP 'RG' TO ACCESS H PHRASE. 00320\nHTULOAD  LA    RG,0(0,RL)                                               00321\n         CLI   1(RG),C'U'               AVOID DIGIT IF FRENCH ONE, ALSO 00322\n         BE    HTUDO100                 AVOID SPECIAL PLURAL OF 100.    00323\n         BAL   RX2,PUT                  PLACE HUNDREDS DIGIT. AVOID     00324\n         CLI   TU,X'00'                 SPECIAL PLURAL OF 100 IF 'TU'   00325\n         BE    HTU100S                  IS NOT ZERO.                    00326\nHTUDO100 LA    RG,HUNDRED               PLACE REGULAR 100 PHRASE.       00327\n         BAL   RX2,PUT                                                  00328\nDOANDTU  CLI   TU,X'00'                 EXIT IF 'TU' IS ZERO.           00329\n         BCR   8,RX1                                                    00330\n         CLI   AND+1,C'A'               PLACE 'AND' IF ENGLISH.         00331\n         BNE   DOTU                                                     00332\n         LA    RG,AND                   ALWAYS GO TO 'DOTU'.            00333\n         BAL   RX2,PUT                                                  00334\n         B     DOTU                                                     00335\nHTU100S  MVC   PUTLADRS+3(1),DISP100S   PLACE APPROPRIATE HUNDRED       00336\n         BAL   RX2,PUTLADRS             PHRASE.                         00337\n         BR    RX1                      EXIT, AS 'TU' EQUALS ZERO.      00338\n*                                                                       00339\nDOTU     MVC   PUTLDISP+5(1),TU         DO NUMBERS 01-19 DIRECTLY VIA   00340\n         CLI   TU,X'19'                 POSITION TU.                    00341\n         BNH   TUFINAL                                                  00342\n         MVZ   TUFIXT+3(1),TU           SET UP 'RW1' WITH THE ADDRESS   00343\nTUFIXT   LA    RW1,0(0,RL)              OF POSITION T0.                 00344\n         MVZ   TUFIXU+5(1),2(RW1)       ALSO SET UP ZONE OF POSITION T2 00345\n         MVN   TUFIXU+5(1),TU           AND NUMERIC OF U IN 'TUFIXU+5'. 00346\n         CLI   TUFIXU+5,X'00'           IF 'TUFIXU+5' IS ZERO, DO       00347\n         BE    TUFINAL                  DIRECTLY VIA POSITION TU.       00348\n         MVC   TULOADT+3(1),1(RW1)      SET UP 'RG' TO ACCESS TENS      00349\nTULOADT  LA    RG,0(0,RL)               PHRASE VIA POSITION T1.         00350\n         TM    2(RW1),X'0F'             USE A CONNECTIVE HYPHEN IF THE  00351\n         BZ    TUDOHYPH                 NUMERIC PART OF POSITION T2 IS  00352\n         MVZ   TUTESTU+1(1),TU          ZERO OR IF THE UNITS DIGIT IS   00353\nTUTESTU  CLI   TU,X'01'                 NOT ONE.                        00354\n         BNE   TUDOHYPH                                                 00355\n         BAL   RX2,PUT                  NO HYPHEN CASE - PLACE THE TENS 00356\n         LA    RG,AND                   PHRASE, THE 'AND', AND THEN SET 00357\n         BAL   RX2,PUT                  UP FOR THE FINAL PLACEMENT OF   00358\n         MVC   PUTLDISP+5(1),TUFIXU+5   THE UNITS PHRASE.               00359\nTUFINAL  BAL   RX2,PUTLDISP             PLACE THE ONE PHRASE OR THE     00360\n         BR    RX1                      FINAL PHRASE AND EXIT.          00361\nTUDOHYPH LA    RW1,HLENGTH+1                                            00362\n         LH    RW2,BINARYH2             HYPHEN CASE - SET UP THE TENS   00363\n         BAL   RX2,TUHYPHSR             PHRASE IN THE WORK AREA,        00364\n         AR    RW1,RW2                  APPEND THE HYPHEN,              00365\n         MVI   0(RW1),C'-'              AND THEN APPEND THE PROPER      00366\nTUFIXU   MVC   TULOADU+3(1),0(RL)       UNITS PHRASE.                   00367\nTULOADU  LA    RG,0(0,RL)                                               00368\n         BAL   RX2,TUHYPHSR             FINALLY PLACE THE COMPOSITE     00369\n         STH   RW2,HLENGTH              PHRASE INTO THE OUTPUT AREA     00370\n         LA    RG,HLENGTH+1             FROM THE WORK AREA.             00371\n         BAL   RX2,PUT                                                  00372\n         BR    RX1                                                      00373\nTUHYPHSR MVC   TUMOVE+1(1),0(RG)                                        00374\n         MVC   HLENGTH+1(1),0(RG)                                       00375\nTUMOVE   MVC   1(0,RW1),1(RG)                                           00376\n         AH    RW2,HLENGTH                                              00377\n         BR    RX2                                                      00378\n*                                                                       00379\n*                                                                       00380\n*                                                                       00381\n* SUBROUTINE TO PLACE A PHRASE IN THE OUTPUT AREA.                      00382\n*                                                                       00383\n*  ENTRY SHOULD BE MADE SO THAT REGISTER 'RX2' IS SET UP FOR RETURN.    00384\n*                                                                       00385\n*  IF ENTRY IS MADE TO 'PUTLDISP', THE SINGLE POSITION AT THE ADDRESS   00386\n*  'PUTLDISP+5' MUST HAVE BEEN SET UP WITH THE HEXADECIMAL POSITION OF  00387\n*  THE LANGUAGE TABLE AT WHICH THE PROPER 'DISPLACEMENT' WITHIN THE     00388\n*  SAME TABLE IS FOUND.                                                 00389\n*                                                                       00390\n*  IF ENTRY IS MADE TO 'PUTLADRS', THE SINGLE POSITION AT THE ADDRESS   00391\n*  'PUTLADRS+3' MUST HAVE BEEN SET UP WITH THE 'DISPLACEMENT' WITHIN    00392\n*  THE LANGUAGE TABLE AT WHICH THE PHRASE TO BE PLACED IS DEFINED.      00393\n*                                                                       00394\n*  IF ENTRY IS MADE TO 'PUT', REGISTER 'RG' MUST HAVE BEEN SET UP WITH  00395\n*  THE ADDRESS AT WHICH THE PHRASE IS DEFINED. AT THIS SPOT, THE LENGTH 00396\n*  OF THE PHRASE MINUS ONE HAS BEEN SET UP. THE PHRASE ITSELF FOLLOWS.  00397\n*                                                                       00398\n*   NOTE THAT AFTER THE PLACEMENT HAS BEEN DONE, REGISTER 'RP' POINTS   00399\n*   TO THE RIGHTMOST CHARACTER OF THE PHRASE JUST MOVED IN.             00400\n*                                                                       00401\n*   ALSO NOTE THAT DIRECT EXIT TO 'INVALID' WILL BE MADE IF PLACEMENT   00402\n*   OF THE PHRASE WOULD OVERFLOW THE OUTPUT AREA.                       00403\n*                                                                       00404\nPUTLDISP MVC   PUTLADRS+3(1),0(RL)      MOVE IN THE DISPLACEMENT.       00405\nPUTLADRS LA    RG,0(0,RL)               SET UP LANGUAGE PHRASE ADDRESS. 00406\nPUT      AH    RP,BINARYH2              SET UP 'RP' WITH PROBABLE NEXT  00407\n         MVC   HLENGTH+1(1),0(RG)       PLACEMENT SPOT.                 00408\n         MVC   PUTMOVE+1(1),0(RG)       SET UP THE LENGTH IN TWO SPOTS. 00409\nPUTSETUP LR    RW1,RP                   'RW1' GETS FIRST PLACEMENT SPOT 00410\n         AH    RP,HLENGTH               AND 'RP' GETS LAST ONE.         00411\n         CLR   RP,RN                    SEE IF A NEW LINE MUST BE       00412\n         BNL   PUTNEWLN                 STARTED.                        00413\n         CL    RP,PUTLIMIT              GO TO 'INVALID' IF THE PHRASE   00414\n         BH    INVALID                  AT HAND WONT FIT IN THE AREA.   00415\nPUTMOVE  MVC   0(0,RW1),1(RG)           MOVE THE PHRASE INTO THE OUTPUT 00416\n         BR    RX2                      AREA AND EXIT.                  00417\nPUTNEWLN LR    RP,RN                    TO SET UP A NEW LINE. FIX 'RP', 00418\n         AH    RN,HCHARPLN              CRANK 'RN', ADD THE INDENTATION 00419\n         AH    RP,HINDENT               TO THE NEW VALUE OF 'RP', ADD   00420\n         AP    LINESOUT,PACKED1         ONE TO THE OUTPUT LINE COUNT,   00421\n         B     PUTSETUP                 AND RETURN TO 'PUTSETUP'.       00422\n*                                                                       00423\n*                                                                       00424\n*                                                                       00425\n*                                                                       00426\n* THE ITEMS THAT VARY BY LANGUAGE ARE DESCRIBED AND DEFINED BELOW.      00427\n*                                                                       00428\n*  REGISTER 'RL' MUST BE LOADED WITH ONE LESS THAN THE ADDRESS OF THE   00429\n*  BEGINNING OF THE APPROPRIATE LANGUAGE TABLE.                         00430\n*                                                                       00431\n*  THE 'DISPLACEMENT' MENTIONED BELOW IS THE VALUE THAT MUST BE ADDED   00432\n*  TO THE CONTENTS OF REGISTER 'RL' TO FIND THE ADDRESS FROM WHICH AN   00433\n*  APPROPRIATE WORD OR PHRASE MAY BE OBTAINED FOR PLACEMENT IN THE      00434\n*  OUTPUT STRING. AS ITS VALUE NEVER EXCEEDS 255, IT IS CONTAINED IN    00435\n*  ONE BYTE.                                                            00436\n*                                                                       00437\n*   CONSIDER A DECIMAL NUMBER IN THE RANGE 01-99 AS BEING DESCRIBED BY  00438\n*   THE TWO DECIMAL DIGITS 'TU'.                                        00439\n*                                                                       00440\n*    THE HEXADECIMAL CODING POSITIONS OF EACH LANGUAGE TABLE ARE USED   00441\n*    AS FOLLOWS. REMEMBER THAT EACH TABLE STARTS AT POSITION 01.        00442\n*                                                                       00443\n*     POSITIONS 01-09, 10-19 CONTAIN THE 'DISPLACEMENT' FOR THE NUMBERS 00444\n*     01-09, 10-19 RESPECTIVELY.                                        00445\n*     ALSO IF THE NUMBER IS NOT 10 BUT IS OF THE FORM 'T0' AND IF       00446\n*     POSITION T2 IS ZERO IN ITS ZONE PORTION, THEN POSITION T0         00447\n*     CONTAINS THE REQUIRED 'DISPLACEMENT'.                             00448\n*     ALL SUCH NUMBERS NEED ONLY ONE PHRASE.                            00449\n*                                                                       00450\n*     ALL NUMBERS NOT DEALT WITH IN THE ABOVE PARAGRAPH NEED A TENS     00451\n*     PHRASE, A CONNECTIVE, AND A UNITS PHRASE.                         00452\n*                                                                       00453\n*      POSITION T1 CONTAINS THE 'DISPLACEMENT' NEEDED TO ACCESS THE     00454\n*      TENS PHRASE.                                                     00455\n*                                                                       00456\n*      IF 'U' IS 1 AND THE NUMERIC PORTION OF POSITION T2 IS NON-ZERO,  00457\n*      THE CONNECTIVE IS ' AND ' IN THE PROPER LANGUAGE.                00458\n*      IN ALL OTHER CASES THE CONNECTIVE IS A HYPHEN.                   00459\n*                                                                       00460\n*      THE 'DISPLACEMENT' NEEDED TO ACCESS THE UNITS PHRASE IS FOUND IN 00461\n*      POSITION ZU, WHERE 'Z' IS THE ZONE PORTION OF POSITION T2.       00462\n*      NOTE THAT 'Z' CAN HAVE A VALUE OF 0 OR 1.                        00463\n*                                                                       00464\n*       IT SHOULD ALSO BE NOTED THAT POSITION 7F CONTAINS THE           00465\n*       'DISPLACEMENT' FOR THE WORD TO FOLLOW THE HUNDREDS DIGIT IF IT  00466\n*       IS NOT ONE IN FRENCH AND IF THE FOLLOWING TENS AND UNITS DIGITS 00467\n*       ARE ZERO.                                                       00468\n*       POSITIONS 7F AND 80 ARE VARIABLE IN THE FRENCH LANGUAGE TABLE.  00469\n*                                                                       00470\n*                                                                       00471\nENGLISH  DC    X'732C0A3B5B6793996B'    RE 01-09.                       00472\n         DC    X'04',C'THREE'           D=10                            00473\n         DC    X'9F83A3AAB377BCC4CED7'  RE 10-19.                       00474\n         DC    X'04',C'FORTY'           D=26                            00475\n         DC    X'E0E000'                RE 20'S.                        00476\n         DC    X'07',C'THOUSAND'        D=35                            00477\n         DC    X'02',C'TWO'             D=44                            00478\n         DC    X'E7E700'                RE 30'S.                        00479\n         DC    X'06',C'HUNDRED'         D=51                            00480\n         DC    X'03',C'FOUR'            D=59                            00481\n         DC    X'1A1A00'                RE 40'S.                        00482\n         DC    X'05',C'EIGHTY'          D=67                            00483\n         DC    X'04',C'FIFTY'           D=74                            00484\n         DC    X'4A4A00'                RE 50'S.                        00485\n         DC    X'06',C'ONLY **'         D=83                            00486\n         DC    X'03',C'FIVE'            D=91                            00487\n         DC    X'8A8A00'                RE 60'S.                        00488\n         DC    X'02',C'AND'             D=99                            00489\n         DC    X'02',C'SIX'             D=103                           00490\n         DC    X'03',C'NINE'            D=107                           00491\n         DC    X'EEEE00'                RE 70'S.                        00492\n         DC    X'02',C'ONE'             D=115                           00493\n         DC    X'06',C'FIFTEEN'         D=119                           00494\n         DC    X'33'                    SPECIAL 100'S.                  00495\n         DC    X'434300'                RE 80'S.                        00496\n         DC    X'05',C'ELEVEN'          D=131                           00497\n         DC    X'04',C'SIXTY'           D=138                           00498\n         DC    X'F6F600'                RE 90'S.                        00499\n         DC    X'04',C'SEVEN'           D=147                           00500\n         DC    X'04',C'EIGHT'           D=153                           00501\n         DC    X'02',C'TEN'             D=159                           00502\n         DC    X'05',C'TWELVE'          D=163                           00503\n         DC    X'07',C'THIRTEEN'        D=170                           00504\n         DC    X'07',C'FOURTEEN'        D=179                           00505\n         DC    X'06',C'SIXTEEN'         D=188                           00506\n         DC    X'08',C'SEVENTEEN'       D=196                           00507\n         DC    X'07',C'EIGHTEEN'        D=206                           00508\n         DC    X'07',C'NINETEEN'        D=215                           00509\n         DC    X'05',C'TWENTY'          D=224                           00510\n         DC    X'05',C'THIRTY'          D=231                           00511\n         DC    X'06',C'SEVENTY'         D=238                           00512\n         DC    X'05',C'NINETY'          D=246                           00513\n*                                                                       00514\nLSDP240  DC    X'0000240C'                                              00515\nHTU      DS    0CL2                                                     00516\nH        DS    CL1                                                      00517\nTU       DS    CL1                                                      00518\n         DS    CL1                      FOR 'MVO' SLOP.                 00519\n*                                                                       00520\nMILLION  DC    X'06',C'MILLION'         D=260                           00521\n*                                                                       00522\n*                                                                       00523\nFRENCH   DC    X'73660A298338A7ACB1'    RE 01-09.                       00524\n         DC    X'04',C'TROIS'           D=10                            00525\n         DC    X'3CB61ABB76C26B88C9D2'  RE 10-19.                       00526\n         DC    X'04',C'DOUZE'           D=26                            00527\n         DC    X'DBDB0F'                RE 20'S.                        00528\n         DC    X'04',C'MILLE'           D=35                            00529\n         DC    X'05',C'QUATRE'          D=41                            00530\n         DC    X'E1E10F'                RE 30'S.                        00531\n         DC    X'03',C'CENT'            D=51                            00532\n         DC    X'02',C'SIX'             D=56                            00533\n         DC    X'02',C'DIX'             D=60                            00534\n         DC    X'E8E80F'                RE 40'S.                        00535\n         DC    X'0B',C'QUATRE-VINGT'    D=67                            00536\n         DC    X'F1F10F'                RE 50'S.                        00537\n         DC    X'0B',C'SEULEMENT **'    D=83                            00538\n         DC    X'FBFB0F'                RE 60'S.                        00539\n         DC    X'01',C'ET'              D=99                            00540\n         DC    X'03',C'DEUX'            D=102                           00541\n         DC    X'04',C'SEIZE'           D=107                           00542\n         DC    X'FB1F'                  RE 70'S.                        00543\n         DC    X'01',C'UN'              D=115                           00544\n         DC    X'07',C'QUATORZE'        D=118                           00545\nFRFIXPOS DS    CL2                      SPECIAL RE 100'S AND 80.        00546\n         DC    X'4300'                  RE 80'S.                        00547\n         DC    X'03',C'CINQ'            D=131                           00548\n         DC    X'07',C'DIX-SEPT'        D=136                           00549\n         DC    X'4310'                  RE 90'S.                        00550\n         DC    X'04',C'CENTS'           D=147                           00551\n         DC    X'0C',C'QUATRE-VINGTS'   D=153                           00552\n         DC    X'03',C'SEPT'            D=167                           00553\n         DC    X'03',C'HUIT'            D=172                           00554\n         DC    X'03',C'NEUF'            D=177                           00555\n         DC    X'03',C'ONZE'            D=182                           00556\n         DC    X'05',C'TREIZE'          D=187                           00557\n         DC    X'05',C'QUINZE'          D=194                           00558\n         DC    X'07',C'DIX-HUIT'        D=201                           00559\n         DC    X'07',C'DIX-NEUF'        D=210                           00560\n         DC    X'04',C'VINGT'           D=219                           00561\n         DC    X'05',C'TRENTE'          D=225                           00562\n         DC    X'07',C'QUARANTE'        D=232                           00563\n         DC    X'08',C'CINQUANTE'       D=241                           00564\n         DC    X'07',C'SOIXANTE'        D=251                           00565\n         DC    X'07',C'MILLIONS'        D=260                           00566\n*                                                                       00567\nFRFIXSNG EQU   ENGLISH+126              RE SINGULARS.                   00568\nFRFIXPLR EQU   ENGLISH+6                RE PLURALS.                     00569\n*                                                                       00570\n*                                                                       00571\n*                                                                       00572\n* THE ITEMS THAT VARY BY CURRENCY ARE DEFINED BELOW.                    00573\n*                                                                       00574\n*  REGISTER 'RC' MUST BE LOADED WITH THE ADDRESS OF THE BEGINNING OF    00575\n*  THE APPROPRIATE CURRENCY TABLE.                                      00576\n*                                                                       00577\nDOLLAR   DC    C'$'                                                     00578\n         DC    X'05',C'DOLLAR'                                          00579\n         DC    X'06',C'DOLLARS'                                         00580\n         DC    X'06',C'CENT **    '                                     00581\n         DC    X'07',C'CENTS **   '                                     00582\n*                                                                       00583\nPOUNDDEC DC    C'<'                                                     00584\n         DC    X'04',C'POUND '                                          00585\n         DC    X'05',C'POUNDS '                                         00586\n         DC    X'0A',C'NEWPENNY **'                                     00587\n         DC    X'0A',C'NEWPENCE **'                                     00588\n*                                                                       00589\nPOUNDLSD DC    C'<'                                                     00590\n         DC    X'04',C'POUND '                                          00591\n         DC    X'05',C'POUNDS '                                         00592\n         DC    X'07',C'PENNY **   '                                     00593\n         DC    X'07',C'PENCE **   '                                     00594\n         DC    X'07',C'SHILLING'                                        00595\n         DC    X'08',C'SHILLINGS'                                       00596\n*                                                                       00597\n         LTORG                                                          00598\n*                                                                       00599\n*                                                                       00600\n* THE 3 DUMMY SECTINS WHICH FOLLOW ARE SET UP TO ALLOW EASY REFERENCE   00601\n* TO ITEMS TO BE ACCESSED VIA REGISTERS 'RL', 'RC', AND 'RI'.           00602\n*                                                                       00603\n*                                                                       00604\nLANGGO   DSECT                          USING 'RL'.                     00605\nTHOUSAND EQU   LANGGO+35                                                00606\nHUNDRED  EQU   LANGGO+51                                                00607\nONLY     EQU   LANGGO+83                                                00608\nAND      EQU   LANGGO+99                                                00609\nDISP100S EQU   LANGGO+127                                               00610\nMILLIONS EQU   LANGGO+260                                               00611\n*                                                                       00612\nCURRGO   DSECT                          USING 'RC'.                     00613\nCURRSYMB EQU   CURRGO                                                   00614\nMAJOR    EQU   CURRGO+1                                                 00615\nMAJORS   EQU   CURRGO+8                                                 00616\nMINOR    EQU   CURRGO+16                                                00617\nMINORS   EQU   CURRGO+28                                                00618\nINTER    EQU   CURRGO+40                                                00619\nINTERS   EQU   CURRGO+49                                                00620\n*                                                                       00621\n* THE COMMENTS BESIDE THE DS ITEMS BELOW SHOW THE ORDER AND COBOL       00622\n* PICTURES NEEDED IN A COBOL CALLING PROGRAMME.                         00623\n*                                                                       00624\nINANDOUT DSECT                          USING 'RI'.                     00625\nINCODE   DS    CL1       PICTURE  X(1)  NEED ONLY THIS PARAMETER POINT. 00626\nCHAROUT  DS    PL2       PICTURE  9(3)       COMPUTATIONAL-3            00627\nCHARPLN  DS    PL2       PICTURE  9(3)       COMPUTATIONAL-3            00628\nINDENT   DS    PL1       PICTURE  9(1)       COMPUTATIONAL-3            00629\nAMOUNT   DS    PL6       PICTURE S9(9)V9(2)  COMPUTATIONAL-3            00630\nLINESOUT DS    PL1       PICTURE S9(1)       COMPUTATIONAL-3            00631\nNUMOUT   DS    CL16      PICTURE  X(16)                                 00632\nALFOUT   DS    CL1       PICTURE  X(THE NUMBER IN 'CHAROUT')            00633\n*                                                                       00634\n         END                                                            00635\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DI": {"ttr": 774, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE '$DI -- TSO DISPLAY INITIATORS'\n         COPY $HASPGBL\n         EJECT\n*\n*\n*\n*\n*\n*\n*       DONT KNOW WHICH DSECTS REQUIRE OTHERS BUT THIS SERIES SEEMS\n*\n*       TO WORK.  MAY HAVE SOME THAT ARE NOT NEEDED BUT I DONT HAVE\n*\n*       THE TIME TO RESEARCH.  IF ANYONE HAS A LIST OR KNOWS WHERE\n*\n*       ONE EXISTS THAT TELLS WHICH DSECT REQUIRES ANOTHER AND IN\n*\n*       WHAT SEQUENCE LET ME KNOW.  THE $MODULE INDICATES THE SEQUENCE\n*\n*       BUT NOT PRE-REQS.  AFTER ABOUT 5 ASSEMBLIES I JUST PUT\n*\n*       ALL I EVER USED ANYWHERE ELSE IN HERE AND IT WORKED.\n*\n*\n*             DON\n*\n*\n         EJECT\n$DI      $MODULE ENVIRON=USER,NOTICE=NONE,                             *\n               CVT,                                                    *\n               $CAT,                                                   *\n               $MIT,                                                   *\n               $PCE,                                                   *\n               $JQE,                                                   *\n               $SCAT,                                                  *\n               $XECB,                                                  *\n               $HCT,                                                   *\n               $JCT,                                                   *\n               $BUFFER,                                                *\n               JESCT,                    GEN $JESCT                    *\n               SSCT,                     GEN $SSCT                     *\n               $SVT,                     GEN $SVT                      *\n               $HASPEQU,                 GEN $EQU                      *\n               $PIT,                     GEN $PIT                      *\n               DEB,                                                    *\n               $SJB                      GEN $SJB\nDINIT    ENT13\n         MVC   PLINE(40),BLANKS\n         MVI   IDENTP,C'I'\n         MVI   LSW,C' '\n         MVC   CLINE(80),BLANKS\n         USING CVTDSECT,R1        SETUP CVT BASE\n         USING JESCT,R2           SETUP JESCT BASE\n         USING SSCT,R3            SETUP SSCT BASE\n         USING SSVT,R4            SETUP SSVT BASE\n         USING PITDSECT,R5        SETUP PIT BASE\n         USING SJBDSECT,R11       SETUP SJB BASE\n*-------------------------------------------------------------------*\n*        PUT OUT THE HEADING.\n*-------------------------------------------------------------------*\n         SPACE\n         TPUT  MHEAD,L'MHEAD      PRINT MAY & SPEH LINE\n         TPUT  SLINE,L'SLINE      PRINT HEADING LINE 1\n         TPUT  ALINE,L'ALINE      PRINT HEADING LINE 2\n         TPUT  BLANKS,L'BLANKS    PRINT BLANK LINE\n         SPACE\n         SPACE\n         L     R1,16              GET CVT POINTER\n         L     R1,0(R1)           OLD/NEW POINTER\n         L     R1,4(R1)           OUR TCB POINTER\n         L     R15,12(R1)         OUR TIOT POINTER\n         L     R1,16              GET CVT\n         L     R2,296(R1)         GET JESCT    (JES CONTROL TABLE)\n         L     R3,JESSSCT         GET FIRST JES SSCT (SSCVT)\nNEXTSSCT EQU   *\n         L     R4,SSCTSSVT        GET JES SSVT\n         L     R5,$SVPIT          GET PIT ADDR--5.302 JES LOGIC+MAINT\nNEXTPIT  EQU   *                  NOW READY TO WRITE\n         MVC   IDENT(L'PLINE),BLANKS CLEAR DETAIL LINE\n         MVI   IDENTP,C'I'        RESET 'I' IDENTITY\n         TM    PITSTAT,PITHOLDA   PIT DRAINED $PI ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'DRAINED '  MOVE IN DRAINED STATUS\n         SPACE\n         TM    PITSTAT,PITHOLD1   PIT DRAINED $P IN ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'DRAINED '  MOVE IN DRAINED STATUS\n         SPACE\n         TM    PITSTAT,PITHALTA   PIT HALTED  $Z I ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'HALTED  '  MOVE IN HALTED  STATUS\n         SPACE\n         TM    PITSTAT,PITHALT1   PIT HALTED  $Z IN ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'HALTED  '  MOVE IN HALTED  STATUS\n         SPACE\n         TM    PITSTAT,PITINIT    OS INIT EXISTS FOR PIT?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'INACTIVE'  MOVE IN INACTIVE\n         SPACE\n         TM    PITSTAT,PITBUSY    PIT BUSY ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'ACTIVE  '  MOVE IN ACTIVE\n         SPACE\n         TM    PITSTAT,PITIDLE    PIT IDLE ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'IDLE    '  MOVE IN IDLE\n         SPACE\n         CLC   STAT,=8C' '        STATUS NOT AVAILABLE ?\n         BNE   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'UNAVAIL '  MOVE IN STATUS NOT AVAIL.\n         CLI   PITPATID,C' '      NULL 1ST CHAR?\n         BNE   IDENTOK            NO, CONTINUE\n         MVC   IDENT(1),PITPATID+1 MOVE IN ID---FORMAT CL1\n         B     IDENTSKP           SKIP NEXT MOVE\n         SPACE\nIDENTOK  EQU   *\n         MVC   IDENT,PITPATID     MOVE ID IN---FORMAT CL2\n         SPACE\nIDENTSKP EQU   *\n         MVC   INITNAM,PITCLASS   MOVE THE INIT CLASSES TO OUTPUT\n         SPACE\n*--------------------------------------------------------------------*\n*        &MAXCLAS PARAMETER ON GEN LIMITS MAX CLASSES, ABOVE\n*        MAY NEED TO BE CHANGED IF OTHER THAN 8 CLASSES.\n*--------------------------------------------------------------------*\n         SPACE\n         TM    PITSTAT,PITBUSY    PIT BUSY ?\n         BNO   PRINT              IF NOT CONTINUE\n         L     R11,PITSJB         GET SJB ADDRESS\n         MVC   JOBNAME,SJBJOBNM   GET JOBNAME FROM JOB CARD\n         MVC   UCLASS,SJBJCLAS    GET USED CLASS\n         SPACE\nPRINT    EQU   *\n         CLI   LSW,C' '           CHECK PRINT SW FOR LEFT SIDE\n         BE    MOVELEFT           MOVE IN LEFT PRINT AREA\n         CLI   LSW,C'1'           CHECK PRINT SW FOR RIGHT SIDE\n         BE    MOVERIGT           MOVE IN RIGHT PRINT AREA\n         SPACE\nERROR    EQU   *\n         TPUT  ELINE,L'ELINE      WRITE ERROR LINE\n         B     FINAL              END IF ERROR\n         SPACE\nPUTIT    EQU   *\n         TPUT  CLINE,L'CLINE      WRITE MESSAGE LINE\n         MVC   LSW,=C' '          RESET PRINT SWITCH\n         B     NEXTIT             GET NEXT PIT\n         SPACE\nFINAL    EQU   *\n         CLI   LSW,C' '           CHECK IF LAST DATA FILLED\n         BE    EXIT               IF DONE, DON'T WRITE\n         CLI   LSW,C'1'           CHECK IF LEFT ONLY FILLED\n         BE    SPRIGHT            GO TO SPACE-RIGHT\n         SPACE\nLASTWR   EQU   *\n         TPUT  CLINE,L'CLINE      WRITE LAST LINE NOW\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW WE CLEANUP AFTER OURSELVES AND GO HOME.\n*--------------------------------------------------------------------*\n         SPACE\nEXIT     EQU   *\n         EXT13\nMOVELEFT EQU   *\n         MVC   LSW,=C'1'          SET LEFT PRINT FLAG\n         MVC   CLEFT,PLINE        MOVE IN LEFT SIDE\nNEXTIT   EQU   *\n         L     R5,PITNEXT         GET NEXT PIT---REFER 5.200 JES2\n         LTR   R5,R5              CHK R5 FOR VALID ADDR\n         BZ    FINAL              END PROCESS FOR SSCT\n         B     NEXTPIT            GO BACK\nSPRIGHT  EQU   *\n         MVC   CRIGHT,FLINE       MOVE SPACES TO RIGHT\n         B     LASTWR             GO TO LAST WRITE\nMOVERIGT EQU   *\n         MVC   LSW,=C'2'          SET FULL PRINT FLAG\n         MVC   CRIGHT,PLINE       MOVE IN RIGHT SIDE\n         B     PUTIT              GO TO WRITE LINE\n         EJECT\n         $MODEND\n         EJECT\n*--------------------------------------------------------------------*\n*        DATA AREA FOLLOWS\n*--------------------------------------------------------------------*\n         SPACE\nMHEAD    DS    0CL80\n         DC    C'   '\n         DC    C'               M A Y  AND  S P E H  D A T A  C E N T'\n         DC    C' E R'\n         DC    CL40' '\nSLINE    DS    0CL80\n         DC    C'                             DISPLAY INI'\n         DC    C'TIATORS                                ',CL1' '\nALINE    DS    0CL80\n         DC    C'ID  CLASSES  STAT       JOBNAME  C   ',CL3' '\n         DC    C'ID  CLASSES  STAT       JOBNAME  C   ',CL3' '\nBLANKS   DC    CL80' '\nFLINE    DC    CL40' '\nELINE    DC    CL80'ERROR IN MESSAGE ROUTINE'\nILINE    DC    CL80'NO SSVT CONTROL BLOCK FOUND'\nJLINE    DC    CL80'NO SSCT CONTROL BLOCK FOUND'\nLLINE    DC    CL80'USER NOT AUTHORIZED'\n         SPACE\n         LTORG\n         SPACE\n         DS    0F\nWORKAREA DS 0D\nSAVE     DS    18F\nLSW      DS    C                   LINE PRINT SWITCH\n*                                  ' ' IS NO FILLED\n*                                  '1' IS LEFT FILLED\n*                                  '2' IS BOTH FILLED\nPLINE    DS    0CL40\nIDENTP   DS    CL1\nIDENT    DS    CL2,CL1\nINITNAM  DS    CL8,CL1\nSTAT     DS    CL8,CL3\nJOBNAME  DS    CL8,CL1\nUCLASS   DS    CL1,CL11    (PAD)\nCLINE    DS    0CL80\nCLEFT    DS    CL40\nCRIGHT   DS    CL40\nWORKEND  EQU   *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENT13": {"ttr": 779, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ENT13 &NO=1\n         AIF   (&NO LT 1).BAD\n         AIF   (&NO LT 8).START\n         MNOTE 4,'INVALID NUMBER OF BASE REGISTERS - ASSUMED TO BE 7'\n         AGO   .START\n.BAD     MNOTE 4,'INVALID NUMBER OF BASE REGISTERS - ASSUMED TO BE 1'\n.START   ANOP\n&NAME    CSECT\n         STM   14,12,12(13)\n         ST    13,24(15)\n         LA    14,20(15)\n         ST    14,8(13)\n         BAL   13,92(15)\n         AIF   (&NO EQ 2).R2\n         AIF   (&NO EQ 3).R3\n         AIF   (&NO EQ 4).R4\n         AIF   (&NO EQ 5).R5\n         AIF   (&NO EQ 6).R6\n         AIF   (&NO EQ 7).R7\n         AIF   (&NO GT 7).R7\n         USING *,13\n         DC    18F'0'\n         AGO   .EXIT\n.R2      USING *,13,12\n         DC    18F'0'\n         LA    14,4095\n         LA    12,1(14,13)\n         AGO   .EXIT\n.R3      USING *,13,12,11\n         DC    18F'0'\n         LA    14,4095\n         LA    12,1(14,13)\n         LA    11,1(14,12)\n         AGO   .EXIT\n.R4      USING *,13,12,11,10\n         DC    18F'0'\n         LA    14,4095\n         LA    12,1(14,13)\n         LA    11,1(14,12)\n         LA    10,1(14,11)\n         AGO   .EXIT\n.R5      USING *,13,12,11,10,9\n         DC    18F'0'\n         LA    14,4095\n         LA    12,1(14,13)\n         LA    11,1(14,12)\n         LA    10,1(14,11)\n         LA    9,1(14,10)\n         AGO   .EXIT\n.R6      USING *,13,12,11,10,9,8\n         DC    18F'0'\n         LA    14,4095\n         LA    12,1(14,13)\n         LA    11,1(14,12)\n         LA    10,1(14,11)\n         LA    9,1(14,10)\n         LA    8,1(14,9)\n         AGO   .EXIT\n.R7      USING *,13,12,11,10,9,8,7\n         DC    18F'0'\n         LA    14,4095\n         LA    12,1(14,13)\n         LA    11,1(14,12)\n         LA    10,1(14,11)\n         LA    9,1(14,10)\n         LA    8,1(14,9)\n         LA    7,1(14,8)\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUATE": {"ttr": 781, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         EQUATE\n***********************************************************************\n*                                                                     *\n*        ******     ****     *    *      **      *****    ******      *\n*        *         *    *    *    *     *  *       *      *           *\n*        ****      *    *    *    *    *    *      *      ****        *\n*        *         *   **    *    *    ******      *      *           *\n*        ******     *****     ****     *    *      *      ******      *\n*                                                                     *\n***********************************************************************\n*  REGISTER USAGE                                                     *\nR0       EQU   0 .                                                    *\nR1       EQU   1 .                                                    *\nR2       EQU   2 .                                                    *\nR3       EQU   3 .                                                    *\nR4       EQU   4 .                                                    *\nR5       EQU   5 .                                                    *\nR6       EQU   6 .                                                    *\nR7       EQU   7 .                                                    *\nR8       EQU   8 .                                                    *\nR9       EQU   9 .                                                    *\nR10      EQU   10 .                                                   *\nRA       EQU   10 .                                                   *\nR11      EQU   11 .                                                   *\nRB       EQU   11 .                                                   *\nR12      EQU   12 .                                                   *\nRC       EQU   12 .                                                   *\nR13      EQU   13 .                                                   *\nRD       EQU   13 .                                                   *\nR14      EQU   14 .                                                   *\nRE       EQU   14 .                                                   *\nR15      EQU   15 .                                                   *\nRF       EQU   15 .                                                   *\n*  BRANCH CONDITION CODES                                             *\nO        EQU   1 .   ONES/OVERFLOW                                    *\nH        EQU   2 .   HIGH                                             *\nP        EQU   2 .   POSITIVE/PLUS                                    *\nL        EQU   4 .   LOW                                              *\nM        EQU   4 .   MIXED/MINUS                                      *\nNE       EQU   7 .   NOT EQUAL                                        *\nNZ       EQU   7 .   NOT ZERO                                         *\nE        EQU   8 .   EQUAL                                            *\nZ        EQU   8 .   ZERO                                             *\nHE       EQU   11 .  HIGH OR EQUAL                                    *\nNL       EQU   11 .  NOT LOW                                          *\nNM       EQU   11 .  NOT MIXED/MINUS                                  *\nLE       EQU   13 .  LOW OR EQUAL                                     *\nNH       EQU   13 .  NOT HIGH                                         *\nNP       EQU   13 .  NOT POSITIVE/PLUS                                *\nNO       EQU   14 .  NOT ONES/OVERFLOW                                *\n***********************************************************************\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXT13": {"ttr": 783, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    EXT13\n&NAME    L     13,4(13)\n         ST    15,16(13)\n         LM    14,12,12(13)\n         BR    14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBGEN": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMF JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC QASML,NAME=GENFCB,USR=PRDT\nGENFCB  ENT13 NO=2\n*\n*  PROGRAM TO GENERATE FCB FOR 3211 PRINTERS\n*\n*  NOTHING FANCY BUT IT WORKS\n*\n*  DON MARQUARDT  MAY & SPEH  3/25/85\n*\n*  SHARE CODE  MSD\n*\n*  12/18/85\n*\n*    UPDATED TO REQUEST FOR CUSTOMER AND REP ID AND ENTERED\n*    AS AN IDENTIFY IN LOAD MODULE\n*\n*\n        OPEN  (FCBLIB,INPUT)\n        OPEN  (INTRDR,OUTPUT)\n        TPUT  HELLO,80\nGETNAME DS    0H\n        MVC   NAM,BLANKS\n        TPUT  NAME,80\n        TGET  NAM,4\n        CLI   NAM+3,C' '\n        BNE   OK4POS\n        TPUT  NAMERR,80\n        B     GETNAME\nOK4POS  DS    0H\n        OC    NAM(4),UPPER\nBLDL    DS    0H\n        BLDL  FCBLIB,FCBNAM\n        ST    R15,RETCODE\n        CLI   RETCODE+3,X'04'\n        BE    NEWONE\nREPL    DS    0H\n        MVC   REPLAC(4),NAM\n        TPUT  REPLAC,80\n        TGET  ANS,4\n        CLI   ANS,C'Y'\n        BE    NEWONE\n        CLI   ANS,X'A8'\n        BE    NEWONE\n        TPUT  ABORT,80\n        B     GETOUT\nNEWONE  DS    0H\n        MVC   NAM1(4),NAM\n        TPUT  CUST,80\n        TPUT  PERIODS,30\n        TGET  CUSTNM,30\n        OC    CUSTNM,UPPER\n        CLC   CUSTNM,UPPER\n        BE    NEWONE\nGETREP  TPUT  REP,80\n        TPUT  PERIODS,10\n        TGET  REPID,10\n        OC    REPID,UPPER\n        CLC   REPID,UPPER\n        BE    GETREP\n        TPUT  LINES,80\n        TGET  LNS,3\n        TPUT  LPI,80\n        TGET  LPS,1\n        MVC   NOLINES+15(3),LNS\nLOOP    DS    0H\n        MVC   EXEC+26(4),NAM\n        MVC   CSECT+4(4),NAM\n        MVC   WTOPARM,NAM\n        PUT   INTRDR,JOB\n        PUT   INTRDR,EXEC\n        PUT   INTRDR,EXEC1\n        PUT   INTRDR,PARM\n        PUT   INTRDR,CSECT\n        PUT   INTRDR,DEFCB\n        PUT   INTRDR,NOLINES\n        PUT   INTRDR,LIN1\n        PUT   INTRDR,CON1\n        PUT   INTRDR,ORG1\n        PUT   INTRDR,LEN\n        CLI   LPS,C'6'\n        BE    LINES6\n        PUT   INTRDR,LPI8\n        B     LINES8\nLINES6  DS    0H\n        PUT   INTRDR,LPI6\nLINES8  DS    0H\n        TPUT  TOEND,80\nLINELP  DS    0H\n        TPUT  CHNNO,80\n        TGET  CHNO,2\n        CLC   =C'AB',CHNO\n        BE    HELLO\n        CLI   CHNO,C'N'\n        BE    DONE\n        CLI   CHNO,X'95'\n        BE    DONE\n        MVI   CHDC+24,C')'\n        MVC   CHDC+22(2),CHNO\n        CLI   CHDC+23,C' '\n        BNE   PUTCHAN\n        MVC   CHDC+23(3),=C')  '\nPUTCHAN DS    0H\n        TPUT  LINENO,80\n        TGET  LNNO,3\n        MVC   ORG+22(3),LNNO\n        PUT   INTRDR,ORG\n        PUT   INTRDR,CHDC\n        B     LINELP\nDONE    DS    0H\n        PUT   INTRDR,END2\n        PUT   INTRDR,END3\n        PUT   INTRDR,END4\n        PUT   INTRDR,END5\n        TPUT  ALDONE,80\n        TPUT  ALDONE1,80\nGETOUT  DS    0H\n        CLOSE FCBLIB\n        CLOSE INTRDR\n        EXT13\nRETCODE DC    F'0'\nUPPER   DC    CL80' '\nPERIODS DC    80C'.'\nREP     DC    CL80'ENTER REP ID  10 POSITIONS MAX'\nCUST    DC    CL80'ENTER CUSTOMER ID  30 POSITIONS MAX'\nHELLO   DC    CL80'GENERATE FCB'\nLINES   DC    CL80'NUMBER OF LINES'\nNAME    DC    CL80'NAME '\nLPI     DC    CL80'LINES PER INCH  6 OR 8'\nREPLAC  DC    CL80'      ALREADY EXISTS.....  REPLACE?'\nCHNNO   DC    CL80'CHANNEL?'\nLINENO  DC    CL80'LINE?'\nALDONE  DC    CL80'JOB SUBMITTED  PLEASE WAIT FOR MESSAGE ON CONSOLE'\nALDONE1 DC    CL80'BEFORE USING'\nABORT   DC    CL80'FCB GENERATE CANCELLED DO TO USER REQUEST'\nTOEND   DC    CL80' ****  TO SUBMIT JOB        REPLY  NO  TO CHANNEL?'\nNAMERR  DC    CL80'NAME MUST BE 4 POSITIONS LONG'\nJOB     DC    CL80'//TMPRTFCB JOB 01990,GENFCB,MSGCLASS=H,NOTIFY=TMPRT'\nEXEC    DC    CL80'//FCB EXEC QASML,NAME=FCB2XXXX,USR=SYS1,'\nEXEC1   DC    CL80'//   LIB=IMAGELIB,'\nPARM    DC    CL80'// PARM.LKED=''LIST,OL,REFR,RENT,XREF'''\nCSECT   DC    CL80'FCB2XXX  CSECT'\nDEFCB   DC    CL80'         DC      X''A0''   DEFAULT FCB INDICATOR'\nNOLINES DC    CL80'NOLINES  EQU     X'\nLEN     DC    CL80'LIN      DC      AL1(NOLINES) '\nLPI6    DC    CL80'LPIND    DC      AL1(00)   '\nLPI8    DC    CL80'LPIND    DC      AL1(16)  '\nORG1    DC    CL80'         ORG     LEN'\nLIN1    DC    CL80'LEN      DC      (NOLINES)X''00'''\nCON1    DC    CL80'         DC      AL1(16)'\nEND2    DC    CL80'         END '\nEND3    DC    CL80'//LKED.SYSIN DD *'\nEND4    DC    C' IDENTIFY '\n        DC    CL4'FCB2'\nNAM1    DC    CL4'    '\n        DC    X'4D7D'\nCUSTNM  DC    CL30' '\nREPID   DC    CL10' '\n        DC    X'7D5D'\n        DC    CL40' '\nEND5    DC    C'//NOTIFY  EXEC PGM=FCBWTO,COND=(0,NE),PARM='\nWTOPARM DC    CL4' '\n        DC    CL40' '\nINTRDR  DCB   DDNAME=FCBRDR,DSORG=PS,MACRF=PM,BLKSIZE=80\nFCBLIB  DCB   DDNAME=FCBLIB,DSORG=PS,MACRF=GM\nLNS    DC   CL80' '\nFCBNAM DC   H'1',H'14'\n       DC   CL4'FCB2'\nNAM    DC   CL80' '\nLPS    DC   CL80' '\nANS    DC   CL80' '\nCHNO   DC   CL80' '\nCOMCH  DC   CL80' '\nLNNO   DC   CL80' '\nORG    DC   CL80'           ORG    LEN+ZZ                  '\nCHDC   DC   CL80'           DC     AL1(ZZ)                 '\nBLANKS DC   CL80' '\n        EQUATE\n        END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBGENC": {"ttr": 1029, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0\n     FREE DATASET('SYS1.IMAGELIB')\n     FREE FILE(FCBRDR)\n     ALLOC FILE(FCBRDR) DATASET('TMPRT.FCBRDR') OLD KEEP\n     ALLOC FILE(FCBLIB) DATASET('SYS1.IMAGELIB') SHR\nFCBGEN\nSUBMIT FCBRDR\n     FREE DATASET('SYS1.IMAGELIB')\n     FREE FILE(FCBRDR)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBIDR": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMFCI JOB 01992,FCBIDR,NOTIFY=TSDAM,MSGCLASS=H\n// EXEC QASML,NAME=FCBIDR,USR=PRDT\nLIDR     TITLE '   L I S T I D R   1 . 0  --- 20SEP76'\n*$DOC@*****************************************************************\n*                                                                     *\n*   LISTIDR - ORIGINALLY DEVELOPED BY J BARRETT (NSA) 01MAR73         *\n*                                                                     *\n*   UPDATED AT NASA/GSFC BY FRANK PAJERSKI                            *\n*   UPDATED AT AFDSC/PENTAGON BY BILL GODFREY                         *\n*                                                                     *\n*   UPDATED AT MAY & SPEH BY DON MARQUARDT                            *\n*    COMMENTED OUT SOME WRITES AND CHANGED LINE COUNT                 *\n*    NOW IT ONLY LISTS THE IDR INFO.  USED WITH OUR FCBGEN SYSTEM     *\n*    THAT INCLUDES USER IDENT AS IDR IN ALL FCB'S                     *\n*                                                                     *\n*                                                                     *\n*   THIS PROGRAM LISTS IDR INFORMATION CONTAINED IN LOAD MODULES.     *\n*                                                                     *\n*   SAMPLE JCL                                                        *\n*     //STEP EXEC PGM=LISTIDR                                         *\n*     //SYSPRINT DD SYSOUT=A                                          *\n*     //SYSLIB   DD DSN=USER.LOADLIB,DISP=SHR                         *\n*     //SYSIN    DD *                                                 *\n*      C SYSLIB                                                       *\n*      S MEMBER1,MEMBER2,MEMBER3                                      *\n*     /*                                                              *\n*                                                                     *\n*   INFORMATION INCLUDES DATE ASSEMBLED/COMPILED, COMPILER ID,        *\n*   DATE LINK-EDITED, LINKAGE EDITOR VERSION, COMMENTS.               *\n*                                                                     *\n*   CONTROL STATEMENT INPUT ALLOWS MEMBERS TO BE SELECTED OR          *\n*   EXCLUDED, OR ENTIRE PDS TO BE PROCESSED.  SELECT/EXCLUDE          *\n*   MEMBER OPERANDS MAY CONTAIN PERIODS AS WILD-CARD CHARACTERS.      *\n*                                                                     *\n*$DOC$*****************************************************************\n         SPACE\n         MACRO\n&N       ON    &X\n&N       OI    LCSW&X+1,X'F0'\n         MEND\n         SPACE 2\n         MACRO\n&N       OFF   &X\n&N       NI    LCSW&X+1,X'0F'\n         MEND\n         SPACE 2\n         MACRO\n&N       MODHLINE &PR\n&N       DC    C'0'\n&PR.NAME DC    8C' ',C'  SIZE '\n&PR.SIZE DC    6C' ',C'  ENTRY POINT '\n&PR.EP   DC    6C' ',C'  ATTRIBUTES '\n&PR.ATTR DC    4C' ',C'  SSI '\n&PR.SSI  DC    8C' ',C'  LINKAGE EDIT'\n&PR.NIDR DC    C'ED BY '\n&PR.PROC DC    10C' ',C' V'\n&PR.V    DC    2C' ',C' L'\n&PR.L    DC    2C' ',C' ON '\n&PR.YEAR DC    2C' ',C'.'\n&PR.DAY  DC    3C' '\n         MEND\n         SPACE 2\n         MACRO\n&N       YD    &X,&Y\n&N       MVC   CSC&X.YEAR(2),&Y\n         MVC   CSC&X.DAY(3),&Y+2\n         MVI   CSC&X.YEAR+2,C'.'\n         MEND\n         MACRO\n&N       OUTPUT &A,&B\n&N       LA    WRKA,&A\n         LA    WRKB,&B\n         BAL   RET1,PRINT1\n         MEND\n         SPACE 2\n         MACRO\n&SECT    INSECT &BASE,&OPT\n         GBLC  &NAME\n         LCLC  &B\n&B       SETC  '&BASE'\n         AIF   (T'&OPT EQ 'O').S1\n         ENTRY &SECT\n         CNOP  0,4\n&SECT    STM   14,12,12(13)\n         AGO   .S2\n.S1      ANOP\n&NAME    SETC  '&SECT'(1,4)'SAVE'\n&SECT    CSECT\n         B     32(,15)                                            .PRC.\n         DC    AL1(11),CL11'LISTIDR'                              .PRC.\n         DC    CL16' &SYSDATE &SYSTIME '                          .PRC.\n         STM   14,12,12(13)\n.S2      LR    10,13\n         AIF   (T'&BASE NE 'O').S3\n&B       SETC  '12'\n.S3      AIF   ('&B' EQ '15').S4\n         LR    &B,15\n.S4      USING &SECT,&B\n         LA    13,&NAME\n         ST    10,4(13)\n         ST    13,8(10)\n         MEND\n         SPACE 2\n         MACRO\n&HOME    OUTSECT &RT,&X\n         GBLC  &NAME\n&HOME    L     13,&NAME.+4\n         LM    14,12,12(13)\n         AIF   (T'&RT EQ 'O').NORM1\n         LA    15,&RT\n.NORM1   BR    14\n         AIF   (T'&X EQ 'O').NORM2\n         AGO   .END\n.NORM2   ANOP\n&NAME    DS    18F\n         LTORG\n.END     MEND\n         SPACE 2\n         MACRO\n         REGS\n         LCLA  &NR\n&NR      SETA  0\n.LOOP    ANOP\nR&NR     EQU   &NR\n&NR      SETA  &NR+1\n         AIF   (&NR NE 16).LOOP\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         MEND\n         EJECT\n*\n*   LISTIDR - ORIGINALLY DEVELOPED BY J BARRETT (NSA) 01MAR73\n*\n*   UPDATED AT NASA/GSFC BY FRANK PAJERSKI\n*\n*   STATUS -\n*     VERSION 1.0 20SEP76\n*       . BEGINNINGS OF CLEAN-UP AND DOCUMENTATION\n*       . 0C7 ABEND FIX(ES)\n*       . CODE TO HANDLE 'MASK' ON INPUT MEMBER NAMES\n*     VERSION 1.1 28NOV79\n*       . UPDATED AT PRC COMPUTER CENTER BY BILL GODFREY\n*       . FOR MVS. TIOT SCAN ENDLESS LOOP FIXED. EXTRACT\n*       . MACRO REPLACED WITH 5 INSTRUCTIONS. MAXL 82 TO 52.\n*\n*   SAMPLE CATALOGED PROCEDURE 'LISTIDR' -\n*      //DEFAULT PROC LIB=\n*      //LISTIDR EXEC PGM=LISTIDR,REGION=100K\n*      //SYSPRINT DD  SYSOUT=A\n*      //SYSLIB   DD  DSN=&LIB,DISP=SHR\n*\n*   SAMPLE JCL -\n*      //  EXEC  LISTIDR,LIB='SYS1.SVCLIB'\n*        ..THE FOLLOWING IS OPTIONAL. IF OMITTED, A CSECT-LEVEL LIST\n*          ON THE ENTIRE DATA SET POINTED TO BY 'SYSLIB' IS DONE..\n*      //LINKLIB DD DSN=SYS1.LINKLIB,DISP=SHR\n*      //ANYNAME DD DSN=...,DISP=SHR\n*      //SYSIN DD *\n*      *   ..COMMENT CARDS START WITH '*' IN CC1..\n*      *  SELECT ALL SVC 34 MEMBERS FROM SVCLIB FOR CSECT-LEVEL LIST\n*      *   -NOTE THAT A MASK OF A '.' ALLOWS ANY CHARACTER IN THAT\n*      *    RELATIVE POSITION IN THE DIRECTORY MEMBER NAME TO BE\n*      *    ACCEPTABLE-\n*        C SVCLIB\n*         S IGC..03D\n*      *  EXCLUDE IEB- MEMBERS FROM CSECT-LEVEL LIST OF LINKLIB\n*        C LINKLIB\n*          E IEB...,IEB....,IEB.....\n*      * GET LOAD-MODULE-LEVEL LIST OF DATA SET POINTED TO BY 'ANYNAME'\n*         L ANYNAME\n*\n*\n         EJECT\n*----------------------------------------------------------------------\n* SET UP BASE REGISTERS,SAVE AREA\n*----------------------------------------------------------------------\nLISTIDR  INSECT\n         USING LISTSAVE,R13\n         OPEN  (PRINT,OUTPUT)\n*        EXTRACT TIOTADD,FIELDS=TIOT                              .PRC.\n         L     1,16                CVTPTR                         .PRC.\n         L     1,0(,1)             TCB WORDS                      .PRC.\n         L     1,4(,1)             CURRENT TCB                    .PRC.\n         L     1,12(,1)            TCBTIOT                        .PRC.\n         ST    1,TIOTADD           STORE TIOT ADDRESS             .PRC.\n         L     TIOTR,TIOTADD\n         USING TIOT,TIOTR\n         SR    WRKA,WRKA\nLOOP1    CLI   TIOELNGH,0                                         .PRC.\n         BE    NOSYSIN\n         CLC   TIOEDDNM(8),=CL8'SYSIN'\n         BE    YESSYSIN\n         IC    WRKA,TIOELNGH\n         AR    TIOTR,WRKA\n         B     LOOP1\nNOSYSIN  OI    FLAGS,DEFFLG\n         B     RESCORE\nYESSYSIN OPEN  (CARD,INPUT)\n         BAL   RET1,CA   GET AND ANALYZE ACRD\n         OI    FLAGS,SYSINFLG\nRESCORE  GETMAIN R,LV=8192 RESERVE CORE FOR SYSTEM USE\n         LR    WRKA,R1\n         GETMAIN VU,LA=MINLEN,A=ADDRESS  GET ALL AVAILABLE CORE\n         FREEMAIN R,LV=8192,A=(WRKA)  FREE CORE FOR SYSTEM\n         L     WRKBASE,ADDRESS\n         USING WORKAREA,WRKBASE\n         LR    WRKA,WRKBASE\n         A     WRKA,LENGTH\n         ST    WRKA,ADD3\n         ST    WRKA,ADD4\n         LA    WRKA,WORKEND\n         C     WRKA,ADD4\n         LA    WRKE,4\n         BH    NOCORE\n         ST    WRKA,ADD1\n         ST    WRKA,ADD2\n         TM    FLAGS,SYSINFLG\n         BZ    OPENLIB\n         EJECT\n* IN LINE CARD PROCESSING ROUTINE\n* ON ENTRY AN ALREADY ANALYSED CARD IS IN STORE\nCP       L     WRKA,CPINDEX  INDICATES WHAT LAST CARD WAS\n* SEE WHAT THIS CARD IS\n         CLI   OPCHAR,C'L'\n         BE    CPL(WRKA)\n         CLI   OPCHAR,C'C'\n         BE    CPC(WRKA)\n         CLI   OPCHAR,C'S'\n         BE    CPS(WRKA)\n         CLI   OPCHAR,C'E'\n         BE    CPE(WRKA)\n         CLI   OPCHAR,C'*'\n         BE    CPAST(WRKA)\nCPINVAL  MVC   CARDBUF+82(11),=C'**INVALID**'  FLAG\nCPPUT    LH    WRKA,LCNT\n         BCT   WRKA,CPPR\n         PUT   PRINT,CARDHEAD\n         MVI   CARDOUT,C'0'\n         LA    WRKA,MAXL-2\nCPPR     PUT   PRINT,CARDOUT\n         STH   WRKA,LCNT\n         MVI   CARDOUT,C' '\n         MVC   CARDBUF+82(11),=CL11' '     RESTORE OUTPUT AREA\n         BAL   RET1,CA  GET AND ANALYZE CARD\n         B     CP   GO TO RIGHT SUBROUTINE\n* BRANCH TABLE\n* INDEXED BRANCHES ARE PERFORMED WITH THIS TABLE\n* INDEX VALUES 0 NEW DATASET EXPECTED\n*              4 LAST CARD WAS L OR C\n*        8 LAST CARD WAS S\n*        12 LAST CARD WAS E\nCPL      B     CPLM\n         B     CPOUT\n         B     CPOUT\n         B     CPOUT\nCPC      B     CPCS\n         B     CPOUT\n         B     CPOUT\n         B     CPOUT\nCPS      B     CPINVAL\n         B     CPSEL\n         B     CPSEEX\n         B     CPINVAL\nCPE      B     CPINVAL\n         B     CPEXC\n         B     CPINVAL\n         B     CPSEEX\nCPAST    B     CPPUT\n         B     CPOUT\n         B     CPOUT\n         B     CPOUT\nCPLM     EQU   *\n         ON    1\n         ON    2\n         ON    3\n         B     CPLMCS\nCPCS     EQU   *\n         OFF   1\n         OFF   2\n         OFF   3\nCPLMCS   MVC   SYSLIB+40(8),=CL8'SYSLIB' ASSUME DEFAULT\n         MVI   CPINDEX+3,4   INDICATE  NEW DATASET STARTED\n         CLI   OPNUM,0\n         BE    CPPUT   USE DEFAULT\n         MVC   SYSLIB+40(8),OPLIST  GET DDNAME\n         B     CPPUT\nCPSEL    MVC   SESW2+2(2),SWANT\n         MVC   SESW3+2(2),SNEXT\n         MVI   CPINDEX+3,8\n         B     CPSEEX\nCPMOVE   MVC   0(0,WRKB),OPLIST\nCPEXC    MVC   SESW2+2(2),SNEXT\n         MVC   SESW3+2(2),SWANT\n         MVI   CPINDEX+3,12\nCPSEEX   CLI   OPNUM,0\n         BE    CPPUT\n         SR    WRKA,WRKA\n         IC    WRKA,OPNUM\n         L     WRKB,ADD3\n         SR    WRKB,WRKA\n         C     WRKB,ADD2\n         LA    WRKE,8\n         BL    NOCORE\n         ST    WRKB,ADD3\n         BCTR  WRKA,0\n         EX    WRKA,CPMOVE\n         B     CPPUT\nCPOUT    EQU   *\n         OI    SESW1+1,X'F0'\n         CLC   ADD3(4),ADD4\n         BE    CPDONE\n         NI    SESW1+1,X'0F'\nCPDONE   EQU   *\n         EJECT\n* PROCESS DATASET\nOPENLIB  RDJFCB SYSLIB\n         MVC   LIBHEADN(44),BUFFER\n         MVC   LIBHEADV(6),BUFFER+118\n         TIME  DEC\n         STM   R0,R1,WORK\n         MVC   LIBHDATE(7),DATEPAT\n         ED    LIBHDATE(7),WORK+5\n         MVC   LIBHTIME(6),DATEPAT\n         ED    LIBHTIME(6),WORK\n         MVC   LIBHPAGE(4),=C'0001'\n         MVC   PGCNT(3),=PL3'1'\n         MVI   LCNT+1,1\n         OPEN  (SYSLIB,INPUT)\n         TM    SYSLIB+48,X'10'\n         BNO   NOTOPEN\n         OI    EOSYSLIB+1,X'F0'  SWITCH ON\nREADDIR  READ  DECB,SF,MF=E\n         LA    DIRPTR,BUFFER+2\n         LA    WRKA,BUFFER\n         CHECK DECB\n         AH    WRKA,BUFFER\n         ST    WRKA,DIREND\nNEWMEM   CLI   0(DIRPTR),X'FF'\n         BE    ENDDIR\n         IC    WRKA,11(DIRPTR)\n         N     WRKA,=F'31'\n         AR    WRKA,WRKA\n         LA    WRKA,12(WRKA,DIRPTR)\n         ST    WRKA,ENDENT\nSESW1    B     WANTMEM\n         L     WRKA,ADD3\n*   MERGE IN CHARACTER FROM DIRECTORY MEMBER NAME INTO CONTROL CARD\n*   NAME WHERE MASK EXISTS - AND COMPARE\n*SECOMP  CLC   0(8,DIRPTR),0(WRKA)                          FJP/12SEP76\nSECOMP   MVC   WORK(8),0(WRKA)                              FJP/12SEP76\n         TR    WORK(8),TRANIT                               FJP/12SEP76\n         NC    WORK(8),0(DIRPTR)                            FJP/12SEP76\n         OC    WORK(8),0(WRKA)                              FJP/12SEP76\n         CLC   0(8,DIRPTR),WORK                             FJP/12SEP76\nSESW2    BE    WANTMEM  (NEXTMEM)\n         LA    WRKA,8(WRKA)\n         C     WRKA,ADD4\n         BL    SECOMP\nSESW3    B     NEXTMEM  (WANTMEM)\n         EJECT\nWANTMEM  EQU   *\n         L     WRKA,ADD2\n         LA    WRKB,MLLEN(WRKA)\n         C     WRKB,ADD3\n         LA    WRKE,12\n         BH    NOCORE\n         ST    WRKB,ADD2\n         USING MLIST,WRKA\n         MVC   MLNAME(8),0(DIRPTR)\n         MVC   MLTTR(3),8(DIRPTR)\n         MVC   MLATTR(2),20(DIRPTR)\n         MVC   MLCORE(3),22(DIRPTR)\n         MVC   MLEP(3),27(DIRPTR)\n         MVI   MLFLAGS,0\n         LA    WRKB,34(DIRPTR)  NORMAL END OF ENTRY\n         TM    11(DIRPTR),X'80' IS IT AN ALIAS?\n         BNO   NOTAL\n         OI    MLFLAGS,MLALFLG\n         NI    SORTSW+1,X'0F'  TURN OFF SORT BYPASS\n         TM    20(DIRPTR),X'C0'  IS IT RENT OR REUS\n         BZ    NOTAL     NO\n         LA    WRKB,10(WRKB)  YES, UP POINTER\nNOTAL    TM    20(DIRPTR),X'04'  IS IT SCTR?\n         BZ    NOTSCTR  NO\n         LA    WRKB,8(WRKB)  YES,UP POINTER\nNOTSCTR  C     WRKB,ENDENT\n         BNL   NEXTMEM\n         OI    MLFLAGS,MLSSIFLG\n         MVC   MLSSI(4),0(WRKB)\n         DROP  WRKA\nNEXTMEM  L     DIRPTR,ENDENT\n         C     DIRPTR,DIREND\n         BL    NEWMEM\n         B     READDIR\nENDDIR   CLC   ADD1(4),ADD2\n         BNE   GOTMEMBS\n         PUT   PRINT,LIBHEAD\n         PUT   PRINT,NOMEMMSG\n         B     ENDLIB\nNOTOPEN  MVC   NOPMSGDD(8),SYSLIB+40\n         PUT   PRINT,NOPMSG\n         B     ENDLIBX\nGOTMEMBS MVC   ADD3(4),ADD4\n         NI    EOSYSLIB+1,X'0F'  SWITCH OFF\nSORTSW   B     NOALIAI\n         L     WRKA,ADD1\n         LA    WRKB,MLLEN\n         L     WRKC,ADD2\n         SR    WRKC,WRKB\n         BCTR  WRKB,0\n         LA    WRKD,MLTTR-MLIST\n         LA    WRKE,3\n         BAL   RET1,SORT\n         L     WRKB,ADD1\n         MVC   ADDX(4),ADD2\nALILOOP1 LR    WRKA,WRKB\nALILOOP2 LA    WRKB,MLLEN(WRKB)\n         C     WRKB,ADDX\n         BNL   ALISORT2\n         CLC   MLTTR-MLIST(3,WRKA),MLTTR-MLIST(WRKB)\n         BNE   ALILOOP1\n         MVC   MLALIAS-MLIST(8,WRKB),MLNAME-MLIST(WRKA)\n         MVI   MLFLAGS-MLIST(WRKB),MLALFLG1\n         L     WRKC,ADD2\n         LA    WRKD,MLLEN(WRKC)\n         C     WRKD,ADD3\n         LA    WRKE,16\n         BH    NOCORE\n         ST    WRKD,ADD2\n         MVC   MLNAME-MLIST(11,WRKC),MLNAME-MLIST(WRKA)\n         MVC   MLALIAS-MLIST(8,WRKC),MLNAME-MLIST(WRKB)\n         MVI   MLFLAGS-MLIST(WRKC),MLALFLG2\n         B     ALILOOP2\nALISORT2 L     WRKA,ADD1\n         LA    WRKB,MLLEN\n         L     WRKC,ADD2\n         SR    WRKC,WRKB\n         BCTR  WRKB,0\n         LA    WRKD,MLNAME-MLIST\n         LA    WRKE,11\n         BAL   RET1,SORT\nNOALIAI  OI    SORTSW+1,X'F0'\n         L     DIRPTR,ADD1\n         USING MLIST,DIRPTR\n         L     WRKA,ADD2\n         LA    WRKA,3(WRKA)\n         N     WRKA,=F'-4'\n         ST    WRKA,ADDX\nNEWLOAD  TM    MLFLAGS,MLALFLG1+MLALFLG2\n         BNZ   ALENT\n         NI    FLAGS,255-LEFLAG-SZFORCE\n         MVC   ADDY(4),ADDX\n         MVC   ADD3(4),ADD4\n         MVC   BLOCKADD(3),MLTTR\n         POINT SYSLIB,BLOCKADD\nREADTXT  READ  DECB,SF,MF=E\n         CHECK DECB\n         TM    BUFFER,X'0F'  CONTROL OR RLD?\n         BNZ   ENDLOAD  YES,NEED READ NO MORE\n         TM    BUFFER,X'80'  IDR?\n         BO    IDRPROC  YES\nLCSW1    NOP   READTXT\n         TM    BUFFER,X'20'  CESD?\n         BNO   READTXT  NO\n         USING CLIST,WRKC\nCESDPROC EQU   *\n         LA    WRKA,BUFFER+8\n         LR    WRKB,WRKA\n         AH    WRKB,BUFFER+6\n         ST    WRKB,ENDENT\n         LH    WRKB,BUFFER+4\nCESDENT  TM    8(WRKA),X'0F'\n         BNZ   CESDNEXT\n         LA    WRKE,CLNFLG\n         BAL   RET1,CLSEARCH\n         NI    CLFLAGS,255-CLNFLG\n         MVC   CLNAME(8),0(WRKA)\nCESDNEXT LA    WRKB,1(WRKB)\n         LA    WRKA,16(WRKA)\n         C     WRKA,ENDENT\n         BL    CESDENT\n         B     READTXT\nIDRPROC  SR    WRKB,WRKB\n         IC    WRKB,BUFFER+1\n         LA    WRKA,BUFFER+3\n         LA    WRKB,BUFFER+1(WRKB)\n         ST    WRKB,ENDENT\n         TM    BUFFER+2,X'02'\n         BO    LEPROC\nLCSW2    NOP   READTXT\n         TM    BUFFER+2,X'01'\n         BO    SZAPPROC\n         TM    BUFFER+2,X'04'\n         BO    TRANPROC\n         TM    BUFFER+2,X'08'\n         BNO   READTXT\nUSERPROC EQU   *\n         TM    FLAGS,MORFLG\n         BO    USERB1\nUSERA2   LA    WRKB,45(WRKA)\n         C     WRKB,ENDENT\n         BL    USERA4\n         L     WRKB,ENDENT\n         BCTR  WRKB,0\nUSERA4   SR    WRKB,WRKA\n         LA    WRKC,TRANSAVE\n         EX    WRKB,USERMV1\n         LA    WRKB,1(WRKB)\n         ST    WRKB,ADDZ\n         LA    WRKB,5(WRKA)\n         OI    FLAGS,MORFLG\n         C     WRKB,ENDENT\n         BNL   READTXT\n         SR    WRKB,WRKB\n         IC    WRKB,5(WRKA)\n         LA    WRKB,5(WRKB,WRKA)\n         C     WRKB,ENDENT\n         BNL   READTXT\n         XC    ADDZ(4),ADDZ\nUSERA6   NI    FLAGS,255-MORFLG\n         LH    WRKB,TRANSAVE\n         LA    WRKE,CLUFLG\n         BAL   RET1,CLSEARCH\n         NI    CLFLAGS,255-CLUFLG\n         SR    WRKB,WRKB\n         IC    WRKB,TRANSAVE+5\n         MVI   CLUSER+3,C' '\n         MVC   CLUSER+4(39),CLUSER+3\n         CLI   TRANSAVE+5,40\n         BNH   USEROK\n         LA    WRKB,40\nUSEROK   EQU   *\n         EX    WRKB,IDRMOVE\n         MVC   CLUSER(3),TRANSAVE+2\n         LA    WRKA,6(WRKA,WRKB)\n         S     WRKA,ADDZ\n         C     WRKA,ENDENT\n         BL    USERA2\n         B     READTXT\nUSERB1   LA    WRKB,45\n         L     WRKC,ADDZ\n         SR    WRKB,WRKC\n         LA    WRKC,TRANSAVE(WRKC)\n         EX    WRKB,USERMV1\n         B     USERA6\nUSERMV1  MVC   0(0,WRKC),0(WRKA)\nIDRMOVE  MVC   CLUSER+2(0),TRANSAVE+5\nTRANPROC EQU   *\n         TM    FLAGS,DATAFLG\n         BO    TRANC6\n         TM    FLAGS,MORFLG\n         BZ    TRANA6\n         NI    FLAGS,255-MORFLG           0C7 FIX           FJP/12SEP76\n         L     WRKB,ADDZ\n         TM    FLAGS,ODDFLG\n         BZ    TRANA5\n         MVC   0(1,WRKB),0(WRKA)\n         NI    FLAGS,255-ODDFLG\n         LA    WRKA,1(WRKA)\nTRANA5   BCTR  WRKB,0\n         TM    0(WRKB),X'80'\n         BO    TRANB5\nTRANA6   LR    WRKD,WRKA\nTRANA7   C     WRKA,ENDENT\n         BH    TRANC2\n         BE    TRANC3\n         TM    0(WRKA),X'80'\n         LA    WRKA,2(WRKA)\n         BZ    TRANA7\n*        NI    FLAGS,255-MORFLG                             FJP/12SEP76\n         C     WRKA,ENDENT                0C7 FIX           FJP/12SEP76\n         BH    TRANC2                                       FJP/12SEP76\n         BE    TRANC3                                       FJP/12SEP76\nTRANB1   L     WRKB,ADD3\n         SR    WRKB,WRKA\n         AR    WRKB,WRKD\n         C     WRKB,ADDY\n         LA    WRKE,24\n         BL    NOCORE\n         LR    WRKC,WRKA\n         BCTR  WRKC,0\n         SR    WRKC,WRKD\n         ST    WRKB,ADD3\n         EX    WRKC,TRANMV1\n         AR    WRKB,WRKC\n         ST    WRKB,ADDZ\n         TM    FLAGS,MORFLG\n         BO    READTXT\nTRANB5   LA    WRKD,15(WRKA)\n         TM    0(WRKA),1\n         BZ    TRANB8\n         LA    WRKD,15(WRKD)\nTRANB8   C     WRKD,ENDENT\n         BL    TRANB10\n         L     WRKD,ENDENT\n         BCTR  WRKD,0\n         OI    FLAGS,DATAFLG\nTRANB10  LA    WRKB,TRANSAVE\n         SR    WRKD,WRKA\n         EX    WRKD,TRANMV2\n         ST    WRKD,ADDZ\n         TM    FLAGS,DATAFLG\n         BO    READTXT\n         B     TRANC10\nTRANC2   OI    FLAGS,ODDFLG\nTRANC3   OI    FLAGS,MORFLG\n         B     TRANB1\nTRANC6   NI    FLAGS,255-DATAFLG\n         LA    WRKB,TRANSAVE\n         A     WRKB,ADDZ\n         LA    WRKB,1(WRKB)\n         LA    WRKD,14\n         TM    TRANSAVE,1\n         BZ    TRANC9\n         LA    WRKD,15(WRKD)\nTRANC9   S     WRKD,ADDZ\n         EX    WRKD,TRANMV2\nTRANC10  LA    WRKA,1(WRKA,WRKD)\n         L     WRKD,ADD3\nTRANLOOP C     WRKD,ADD4\n         ST    WRKD,ADD3\n         BNL   TRANDONE\n         NI    0(WRKD),X'7F'\n         LH    WRKB,0(WRKD)\n         LA    WRKE,CLTFLG\n         BAL   RET1,CLSEARCH\n         NI    CLFLAGS,255-CLTFLG\n         MVC   CLTRANS(15),TRANSAVE+1\n         TM    TRANSAVE,X'01'\n         BZ    TRANNEXT\n         LA    WRKE,CLTFLG\n         BAL   RET1,CLSEARCH\n         NI    CLFLAGS,255-CLTFLG\n         MVC   CLTRANS(15),TRANSAVE+16\nTRANNEXT EQU   *\n         LA    WRKD,2(WRKD)\n         B     TRANLOOP\nTRANDONE C     WRKA,ENDENT\n         BL    TRANA6\n         B     READTXT\nTRANMV1  MVC   0(0,WRKB),0(WRKD)\nTRANMV2  MVC   0(0,WRKB),0(WRKA)\nLEPROC   MVC   LEIDR(15),0(WRKA)\n         OI    FLAGS,LEFLAG\nLCSW3    NOP   ENDLOAD\n         B     READTXT\nSZAPPROC EQU   *\n         TM    0(WRKA),X'80'\n         BZ    SZAPNF\n         OI    FLAGS,SZFORCE\nSZAPNF   IC    WRKB,0(WRKA)\n         N     WRKB,=F'63'\n         MH    WRKB,=H'13'\n         LA    WRKA,1(WRKA)\n         AR    WRKB,WRKA\n         ST    WRKB,ENDENT\nSZAPLOOP C     WRKA,ENDENT\n         BNL   READTXT\n         MVC   WORK(2),0(WRKA)\n         LH    WRKB,WORK\n         LA    WRKE,CLZFLG\n         BAL   RET1,CLSEARCH\n         NI    CLFLAGS,255-CLZFLG\n         MVC   CLZAP(11),2(WRKA)\n         LA    WRKA,13(WRKA)\n         B     SZAPLOOP\n         DROP  WRKC\nENDLOAD  EQU   *\n         SR    WRKC,WRKC\n         CLC   ADDX(4),ADDY\n         BE    NOCSECTS\n         L     WRKA,ADDX\n         LA    WRKB,CLLEN\n         L     WRKC,ADDY\n         SR    WRKC,WRKB\n         BCTR  WRKB,0\n         SR    WRKD,WRKD\n         LA    WRKE,2\n         BAL   RET1,SORT\n* DEVELOP # OF LINES REQUIRED FOR THIS LOAD MODULE\n* # OF LINES OF CSECT INFO\n         L     WRKC,ADDY\n         S     WRKC,ADDX\n         SR    WRKB,WRKB\n         D     WRKB,=A(CLLEN)\n* ADD # ALIASES/8\nNOCSECTS EQU   *\n         LR    WRKA,DIRPTR\n         LA    WRKB,7\nCNT1     LA    WRKA,MLLEN(WRKA)\n         C     WRKA,ADD2\n         BNL   CNT2\n         CLC   0(8,WRKA),MLNAME\n         BNE   CNT2\n         LA    WRKB,1(WRKB)\n         B     CNT1\nCNT2     ST    WRKA,MEMNXT\n         SRL   WRKB,3\n         AR    WRKC,WRKB\n* ADD 1 IF SZFORCE FLAG IS ON\n         TM    FLAGS,SZFORCE\n        BZ    CNT3\n         LA    WRKC,1(WRKC)\n* ADD 3 FOR HEADINGS\nCNT3 LA WRKC,3(WRKC)\n* ADD 1 IF NO CNTL OR RLD\n         TM    MLFLAGS,MLNCFLG\n         BZ    NOTNC\n         LA    WRKC,1(WRKC)\nNOTNC    EQU   *\n* SEE IF THERE IS ROOM ON THIS PAGE\n         CH    WRKC,LCNT\n         BL    HAVROOM\n         MVI   LCNT+1,1 FORCE TOP OF PAGE\nHAVROOM  EQU   *\n* SET UP LOAD MODULE HEADER\n         MVC   MODHEAD(133),MODSKEL\n         MVC   MODHNAME(8),MLNAME\n         UNPK  WORK(11),MLCORE(6)\n         TR    WORK(10),HEXTAB\n         MVC   MODHSIZE(6),WORK\n         MVC   MODHATTR(4),WORK+6\n         TM    MLFLAGS,MLSSIFLG\n         BZ    NOSSI\n         MVC   WORK(4),MLSSI\n         UNPK  WORK+7(9),WORK(5)\n         TR    WORK+7(8),HEXTAB\n         MVC   MODHSSI(8),WORK+7\nSSIBACK  EQU   *\n         MVC   WORK+8(3),MLEP\n         UNPK  WORK(7),WORK+8(4)\n         TR    WORK(6),HEXTAB\n         MVC   MODHEP(6),WORK\n        TM    FLAGS,LEFLAG\n        BZ    NOLEIDR\n         MVC   MODHPROC(10),LEIDR\n         UNPK  WORK(9),LEIDR+10(5)\n         MVC   MODHV(2),WORK\n         MVC   MODHL(2),WORK+2\n         MVC   MODHYEAR(2),WORK+4\n         MVC   MODHDAY(3),WORK+6\n        B     PUTMODH\nNOSSI    MVC   MODHSSI(8),=CL8'********'\n         B     SSIBACK\nNOLEIDR  MVC   MODHNIDR(31),=CL31'OR IDR NOT PRESENT'\n*UTMODH  OUTPUT MODHEAD,2                                DAM 6/10/86\nPUTMODH  LA    WRKC,MLNAME\nALSETUP  MVI   SETUP,C' '\n         MVC   SETUP+1(132),SETUP\n         NI    FLAGS,255-ALFLAG\n         LA    WRKD,8\n         LA    WRKE,SETUP+22\nALSETUP2 LA    WRKC,MLLEN(WRKC)\n         C     WRKC,MEMNXT\n         BNL   ALCOMP\n         MVC   0(8,WRKE),MLALIAS-MLIST(WRKC)\n         OI    FLAGS,ALFLAG\n         LA    WRKE,9(WRKE)\n         BCT   WRKD,ALSETUP2\nALSET    MVC   SETUP+11(10),=CL10'ALIAS(ES)-'\n*LPUT    OUTPUT SETUP,1                               DAM 6/10/86\nALPUT    TM    FLAGS,ALFLAG\n         BZ    ALDONE\n         B     ALSETUP\nALCOMP   TM    FLAGS,ALFLAG\n         BZ    ALDONE\n         NI    FLAGS,255-ALFLAG\n         B     ALSET\nALDONE   EQU   *\n* TELL ABOUT SZFORCE\n         TM    FLAGS,SZFORCE\n         BZ    NOFORCE\n         OUTPUT FORCEMSG,1\nNOFORCE  EQU   *\n* TELL ABOUT NO CNTL OR RLD\n         TM    MLFLAGS,MLNCFLG\n         BZ    CNOK\n         OUTPUT WARNING,1\nCNOK     EQU   *\n* DISCOVER PRINT SPACE REQUIRED BY EACH CSECT\n         L     WRKB,ADDX\n         C     WRKB,ADDY\n         BE    ENDMOD\nCCNT1    LR    WRKA,WRKB\n         TM    CLFLAGS-CLIST(WRKA),CLNFLG\n         BZ    HAVNAME\n         NI    CLFLAGS-CLIST(WRKA),255-CLNFLG\n         MVC   CLNAME-CLIST(8,WRKA),=CL8'********'\nHAVNAME  EQU   *\n         SR    WRKC,WRKC\nCCNT2    LA    WRKC,1(WRKC)\n         LA    WRKB,CLLEN(WRKB)\n         C     WRKB,ADDY\n         BNL   CCNT3\n         CLC   0(2,WRKA),0(WRKB)\n         BNE   CCNT3\n         MVI   0(WRKB),X'FF'\n        B     CCNT2\nCCNT3    STH   WRKC,0(WRKA)\n         C     WRKB,ADDY\n         BL    CCNT1\n* SEE IF THERE IS SPACE FOR FIRST CSECT\n         L     WRKC,ADDX\n         USING CLIST,WRKC\n         LH    WRKA,CLCNT\n         LA    WRKA,1(WRKA)\n         CH    WRKA,LCNT\n         BL    GOTROOM\n         MVI   LCNT+1,1 FORCE NEW PAGE\n         B     NOROOM\nGOTROOM EQU   *\n         MVC   CSCTHEAD(9),=CL9' '\n*        OUTPUT CSCTHEAD,1\nNOROOM   EQU   *\n* FORMAT CSECT LINE AND PRINT IT\nLINEOUT  MVI   SETUP,C' '\n         MVC   SETUP+1(132),SETUP\n         TM    CLFLAGS,CLNFLG\n        BO    LOT\n         MVC   CSCNAME(8),CLNAME\nLOT     TM    CLFLAGS,CLTFLG\n         BO    LOZ\n         MVC   CSCTNAME(10),CLTRANS\n        UNPK  WORK(9),CLTRANS+10(5)\n        YD    T,WORK+4\n         MVC   CSCTV(2),WORK\n        MVC   CSCTL(2),WORK+2\nLOZ      TM    CLFLAGS,CLZFLG\n         BO    LOU\n        UNPK  WORK(5),CLZAP(3)\n         YD    Z,WORK\n         MVC   CSCZDATA(8),CLZAP+3\nLOU      TM    CLFLAGS,CLUFLG\n         BO    LOPR\n         UNPK  WORK(5),CLUSER(3)\n         YD    U,WORK\n         MVC   CSCUDATA(40),CLUSER+3\nLOPR     TM    CLCNT,X'FF'\n        BO    NOTFST\n         LH    WRKA,LCNT\n         SH    WRKA,CLCNT\n         BP    NOHEAD\n         OUTPUT CSCTHEAD,MAXL\n         LH    WRKA,LCNT\n         SH    WRKA,CLCNT\nNOHEAD   STH   WRKA,LCNT\nNOTFST   PUT   PRINT,SETUP\n         LA    WRKC,CLLEN+CLIST\n         C     WRKC,ADDY\n         BL    LINEOUT\nENDMOD   EQU   *\n         L     DIRPTR,MEMNXT\nENDMODA  EQU   *\n         C     DIRPTR,ADD2\n         BL    NEWLOAD\nENDLIB   CLOSE (SYSLIB)\n         MVC   ADD2(4),ADD1\n         MVC   ADD3(4),ADD4\nENDLIBX  EQU   *\n         SR    WRKE,WRKE\n         TM    FLAGS,DEFFLG\n         BO    DEFAULT\n         TM    FLAGS,SYSINFLG\n         BZ    FINISHED\n         MVI   CPINDEX+3,0\n         MVI   LCNT+1,1        RESET LINE COUNT\n         B     CP\nALENT    EQU   *\n         MVC   ALNM1(8),MLNAME\n         MVC   ALNM2(8),MLALIAS\n         MVC   WORK+8(3),MLEP\n         UNPK  WORK(7),WORK+8(4)\n         TR    WORK(6),HEXTAB\n         MVC   ALEP(6),WORK\n         OUTPUT ALINE,2\n         LA    DIRPTR,MLLEN(DIRPTR)\n         B     ENDMODA\nEOSYSIN  CLOSE (CARD)\n         TM    FLAGS,SYSINFLG\n         BZ    NOSYSIN\n         NI    FLAGS,255-SYSINFLG\n         CLI   OPCHAR,C'*'  WAS LAST CARD COMMENT?\n         BE    FINISHED    YES, LETS SPLIT\n         B     CPOUT\nDEFAULT  L     TIOTR,TIOTADD\nLOOP2    SR    WRKA,WRKA\n         IC    WRKA,TIOELNGH\n         LTR   WRKA,WRKA                                          .PRC.\n         BZ    FINISHED                                           .PRC.\n         AR    WRKA,TIOTR\n         CLC   TIOEDDNM(8),SYSLIB+40\n         LR    TIOTR,WRKA\n         BNE   LOOP2\nGOTIT    ST    TIOTR,TIOTADD  SAVE SOME SEARCHING NEXT TIME\n         CLI   TIOELNGH,0                                         .PRC.\n         BE    FINISHED\n         CLI   TIOEDDNM,0                                         .PRC.\n         BE    LOOP2                                              .PRC.\n         MVC   SYSLIB+40(8),TIOEDDNM\n         CLC   TIOEDDNM(3),=C'SYS'  DDNAME STARTING SYS?\n         BE    LOOP2   YES, SKIP IT\n         B     OPENLIB\nEOSYSLIB B     ENDDIR  SWITCH\n         OI    MLFLAGS,MLNCFLG\n         B     ENDLOAD\n         SPACE 2\n*----------------------------------------------------------------------\n* IN-CORE SORT ROUTINE\n* REGISTER CONTENTS: WRKA ADDRESS OF FIRST RECORD\n*                    WRKB RECORD LENGTH -1\n*                    WRKC ADDRESS OF LAST RECORD\n*                    WRKD DISPLACEMENT OF SORT FIELD\n*                    WRKE LENGTH OF SORT FIELD -1\n*                    RET1 RETURN ADDRESS\n*----------------------------------------------------------------------\nSORT     STC   WRKB,SORTX1+1\n         STC   WRKB,SORTX2+1\n         STC   WRKB,SORTX3+1\n         STC   WRKD,SORTY+3\n         STC   WRKD,SORTY+5\n         STC   WRKE,SORTY+1\n         LA    WRKB,1(WRKB)\nSORTA    LR    WRKE,WRKA\nSORTB    LR    WRKD,WRKE\nSORTC    BXH   WRKE,WRKB,SORTD\nSORTY    CLC   0(0,WRKD),0(WRKE)\n         BH    SORTB\n         B     SORTC\nSORTD    CR    WRKD,WRKA\n         BE    SORTE\nSORTX1   XC    0(0,WRKA),0(WRKD)\nSORTX2   XC    0(0,WRKD),0(WRKA)\nSORTX3   XC    0(0,WRKA),0(WRKD)\nSORTE    BXLE  WRKA,WRKB,SORTA\n         BR    RET1\n         SPACE 2\n*----------------------------------------------------------------------\n* ROUTINE TO FIND APPROPRIATE ENTRY IN CLIST TABLE OR GET NEW ONE\n* WRKB HAS CSECT ID, WRKE HAS FLAG VALUE,RET1 HAS RETURN ADDRESS\n* ADDRESS OF ENTRY IS RETURNED IN WRKC\n*----------------------------------------------------------------------\nCLSEARCH L     WRKC,ADDX\n         USING CLIST,WRKC\nCLSCHECK C     WRKC,ADDY\n         BNL   CLSNEW\n         CH    WRKB,CLID\n         BNE   CLSNEXT\n         EX    WRKE,CLSTM\n         BCR   7,RET1  BNZ\nCLSNEXT  LA    WRKC,CLLEN+CLIST\n         B     CLSCHECK\nCLSNEW   LA    WRKE,CLLEN+CLIST\n         C     WRKE,ADD3\n         ST    WRKE,ADDY\n         LA    WRKE,20\n         BH    NOCORE\n         STH   WRKB,CLID\n         MVI   CLFLAGS,X'F0'\n         BR    RET1\nCLSTM    TM    CLFLAGS,0\n         DROP  WRKC\n         SPACE 2\nPRINT1   LH    R1,LCNT\n         SR    R1,WRKB\n         BP    SAMEPAGE\n         PUT   PRINT,LIBHEAD\n         AP    PGCNT(3),=PL3'1'\n         UNPK  LIBHPAGE(4),PGCNT(3)\n         OI    LIBHPAGE+3,X'F0'\n         LA    R1,MAXL-2\n         MVI   0(WRKA),C'0'\n         MVC   1(8,WRKA),MLNAME\nSAMEPAGE STH   R1,LCNT\n         PUT   PRINT,(WRKA)\n         BR    RET1\n         DROP  DIRPTR\n         SPACE 2\n*----------------------------------------------------------------------\n* CONTROL CARD ANALYSIS ROUTINE\n* THIS ROUTINE EXTRACTS AN OPERATION AND ITS OPERANDS FROM A CONTROL\n* CARD.  THE OPERATION (ONE CHARACTER) IS PLACED IN LOCATION OPCHAR.\n* THE OPERANDS ,LEFT JUSTIFIED AND PADDED TO 8 BYTES ARE PLACED\n*IIN A LIST STARTING AT OPLIST. THE NUMBER OF BYTES IN THE LIST IS\n* STORED AT OPNUM. THE CARD IS IN CARDBUF AND RET1 CONTAINS THE\n* RETURN ADDRESS\n*----------------------------------------------------------------------\nCA       GET   CARD,CARDBUF\n         MVI   OPCHAR,C'*'         ASSUME COMMENT CARD\n         CLI   CARDBUF,C'*'  IS IT REALLY?\n         BCR   8,RET1\n         LA    WRKA,CARDBUF   ADDRESS OF CARD\n         LA    WRKB,79(WRKA)       END OF CARD\n         BAL   WRKC,CABLCH  FIND CHAR FOLLOWING BLANK\n         MVC   OPCHAR(1),0(WRKA)  SAVE OPERATION\n         BAL   WRKC,CABLCH  FIND FIRST CHAR OF OPERANDS\n         LA    WRKC,OPLIST  WHERE TO PUT THE OPERANDS\nCANEXT   LR    WRKD,WRKA           START OF OPERAND\nCALOOP   CLI   0(WRKA),C','   DELIMITING COMMA?\n         BE    CACOMMA             YES\n         CLI   0(WRKA),C' '  DELIMITING BLANK?\n         BE    CABLANK   YES\n         CLI   0(WRKA),C'.'      IS THIS A MASK BYTE?       FJP/12SEP76\n         BNE   *+8               BIF NOT                    FJP/12SEP76\n         MVI   0(WRKA),X'00'     YES - SET UP FOR XLATE     FJP/12SEP76\n         LA    WRKA,1(WRKA)        NO, GET NEXT POSN.\n         CR    WRKA,WRKB  END OF CARD?\n         BL    CALOOP  NO,TRY THIS POSN.\n         B     CAINVAL   YES\nCABLANK  NI    CASW+1,X'0F'  TURN OFF SWITCH\nCACOMMA  SR    WRKA,WRKD   GET LENGTH OF OPERAND\n         BZ    CANULL              NOTHING THERE\n         CH    WRKA,=H'8'  HOW LONG IS IT?\n         BH    CAINVAL    TOO LONG\n         MVC   0(8,WRKC),=CL8' '   CLEAR LIST ENTRY\n         BCTR  WRKA,0  PREPARE FOR EXECUTION\n         EX    WRKA,CAMOVE   CHOP - MOVE OPERAND\n         LA    WRKC,8(WRKC) POINT TO NEXT LIST ENTRY\n         LA    WRKA,1(WRKA,WRKD)  RESTORE WRKA\nCANULL   LA    WRKA,1(WRKA)  SKIP DELIMITER\nCASW     BC    15,CANEXT  GET NEXT OPERAND\n         OI    CASW+1,X'F0'   RESTORE SWITCH\n         LA    WRKD,OPLIST     BEGINNING OF OPLIST\n         SR    WRKC,WRKD    LENGTH OF OPLIST\n         STC   WRKC,OPNUM      STORE LENGTH\n         BR    RET1   RETURN\nCAMOVE   MVC   0(0,WRKC),0(WRKD)   MOVE OPERAND\nCABLCH   MVC   CABR(4),CABR1  SET UP BRANCH INST.\nCALOOK   CLI   0(WRKA),C' '   LOOK FOR BLANK\nCABR     BE    CABL     THIS INSTRUCTION GETS MODID\nCAINC    LA    WRKA,1(WRKA)  NEXT CHARACTER\n         CR    WRKA,WRKB   END OF CARD?\n         BNL   CAINVAL    YES\n         B     CALOOK   LOOK AT NEXT CHARACTER\nCABL     MVC   CABR(4),CABR2   CHANGE BRANCH INST.\n         B     CAINC\nCACH     BR    WRKC    RETURN\nCABR1    BE    CABL    REPLACEMENT INSTRUCTION\nCABR2    BNE   CACH    REPLACEMENT INSTRUCTION\nCAINVAL  MVI   OPNUM,0  NO OPERANDS\n         CLI   OPCHAR,C'L'  LOAD MOD?\n         BCR   8,RET1   YES\n         CLI   OPCHAR,C'C'   CSECTS ?\n         BCR   8,RET1   YES\n         MVI   OPCHAR,C' '  NO, INVALID\n         BR    RET1\n         SPACE 2\nNOCORE   PUT   PRINT,NCMSG\nFINISHED CLOSE (PRINT)\n         L     WRKA,4(R13)  CALLER'S SAVE AREA ADDRESS\n         ST    WRKE,16(WRKA)  SAVE RETURN CODE\n         OUTSECT\n         EJECT\nTRANIT   DC    X'FF',255X'00'  XLATE TABLE FOR 'MASK'       FJP/12SEP76\nMODSKEL  DC    CL133' '\n         ORG   MODSKEL\n         MODHLINE MODU\n         ORG   MODSKEL+133\nFORCEMSG DC    CL133'           IMASPZAP IDR SPACE EXCEEDED - DATA LOSTX\n               '\nCSCTHEAD DC    11C' ',C'-CSECT--  ------TRANSLATOR-------  '\n         DC    C'----IDRDATA----  ---------------USER-----------'\n         DC    C'-----------------',CL25' '\nCSCTHL   EQU   *-CSCTHEAD                                         .PRC.\nCARDOUT  DC    C' '\nCARDBUF  DC    CL132' '\nCARDHEAD DC    CL133'1 CONTROL CARDS '\nLIBHEAD  DC    CL133'1'\n         ORG   LIBHEAD+1\n         DC    C'IDR LIST FOR DATA SET '\nLIBHEADN DC    CL44' ',C' ON VOLUME '\nLIBHEADV DC    CL6' ',C'  DATE'\nLIBHDATE DC    CL7' ',C'  TIME'\nLIBHTIME DC    CL6' ',C'  PAGE '\nLIBHPAGE DC    CL4' '\n         ORG\nALINE    DC    CL133'0'\n         ORG   ALINE+1\nALNM1    DS    8C\n         DC    C'  IS AN ALIAS FOR '\nALNM2    DS    8C\n         DC    C'  ENTRY POINT '\nALEP     DS    6C\n         ORG\nNCMSG    DC    CL133'0INSUFFICIENT CORE AVAILABLE'\nNOMEMMSG DC    CL133'0 NO SELECTED MEMBER WAS FOUND IN DATA SET'\nNOPMSG   DC    CL133'1'\n         ORG   NOPMSG+1\n         DC    C'DDNAME '\nNOPMSGDD DC    CL8' ',C' COULD NOT BE OPENED'\n         ORG\nWARNING  DC    CL133' ********  WARNING  ********  MEMBER CONTAINS NO CX\n               ONTROL OR RLD RECORD  ********'\nFLAGS    DC    X'00'\nLCNT     DC    H'1'\nSNEXT    DC    S(NEXTMEM)\nSWANT    DC    S(WANTMEM)\n         READ  DECB,SF,SYSLIB,BUFFER,256,MF=L\nBUFFER   DS    128H\nOPNUM    DC    X'00'\nOPCHAR   DC    C' '\nOPLIST   DC    80C' '\n         PRINT NOGEN\nCARD     DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=GM,EODAD=EOSYSIN\nPRINT    DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,RECFM=FBA,           +\n               BLKSIZE=3458,MACRF=PM\nSYSLIB   DCB   DDNAME=SYSLIB,DSORG=PO,RECFM=U,KEYLEN=0,MACRF=R,        +\n               EXLST=EXLST,EODAD=EOSYSLIB\n         PRINT GEN\nEXLST    DC    X'87',AL3(BUFFER)\nADDRESS  DC    F'0'\nLENGTH   DC    F'0'\nTIOTADD  DC    F'0'\nMINLEN   DC    A(WORKEND-WORKAREA)\nMAXLEN   DC    F'131072'\nBLOCKADD DC    F'0'\nCPINDEX  DC    F'0'\nDATEPAT  DC    X'402120',C'.',X'202020'\nHEXTAB   EQU   *-240\n         DC    C'0123456789ABCDEF'\n         SPACE 2\nWORKAREA DSECT\nWORK     DS    2D\nMEMNXT   DS    F\nADD1     DS    F  START OF DYNAMIC CORE\nADD2     DS    F  END OF DIRECTORY/EXTENDED DIRECTORY\nADDX     DS    F  END OF DIRECTORY/START OF CSECT TABLE\nADDY     DS    F  END OF CSECT TABLE\nADD3     DS    F  START OF SELECT/EXCLUDE/CSECT DATA\nADD4     DS    F  END OF DYNAMIC CORE\nADDZ     DS    F\nENDENT   DS    F\nDIREND   DS    F\nTRANSAVE DS    46C\nPGCNT    DS    3C\nLEIDR    DC    15X'00'\nSETUP    DS    133C\nWORKEND  DS    0D\n         ORG   SETUP\nMODHEAD  MODHLINE MODH\n         ORG   SETUP\nCSCOUT   DS    11C\nCSCNAME  DS    10C\nCSCTYEAR DS    3C\nCSCTDAY  DS    4C\nCSCTNAME DS    11C\nCSCTV    DS    3C\nCSCTL    DS    4C\nCSCZYEAR DS    3C\nCSCZDAY  DS    4C\nCSCZDATA DS    10C\nCSCUYEAR DS    3C\nCSCUDAY  DS    4C\nCSCUDATA DS    40C\n         SPACE 2\nCLIST    DSECT\nCLCNT    EQU   *\nCLID     DS    H   CSECT ID\nCLFLAGS  DS    C  FLAGS\nCLNFLG   EQU   128\nCLTFLG   EQU   64\nCLZFLG   EQU   32\nCLUFLG   EQU   16\nCLNAME   DS    8C  CSECT NAME\nCLTRANS  DS    15C   TRANSLATOR DATA\nCLZAP    DS    11C    IMASPZAP DATA\nCLUSER   DS    43C  USER DATA\nCLEND    DS    0H\nCLLEN    EQU   *-CLIST\n         SPACE 2\nMLIST    DSECT\nMLNAME   DS    8C\nMLTTR    DS    3C\nMLFLAGS  DS    C\nMLALIAS  EQU   *\nMLCORE   DS    3C\nMLATTR   DS    2C\nMLSSI    DS    4C\nMLEP     DS    3C\nMLALFLG  EQU   32\nMLNCFLG  EQU   2\nMLSSIFLG EQU   1\nMLALFLG1 EQU   64\nMLALFLG2 EQU   128\nMLLEN    EQU   *-MLIST\n         SPACE 2\nTIOT     DSECT\nTIOELNGH EQU   TIOT+24\nTIOEDDNM EQU   TIOT+28\n         SPACE 2\n         REGS\n         SPACE 2\nDIRPTR   EQU   R2\nTIOTR    EQU   R3\nWRKBASE  EQU   R4\nWRKA     EQU   R5\nWRKB     EQU   R6\nWRKC     EQU   R7\nWRKD     EQU   R8\nWRKE     EQU   R9\nRET1     EQU   R11\nDEFFLG   EQU   1\nODDFLG   EQU   2\nMORFLG   EQU   4\nDATAFLG  EQU   8\nALFLAG   EQU   16\nLEFLAG   EQU   32\nSZFORCE  EQU   64\nSYSINFLG EQU   128\nMAXL     EQU   62       --- LINES PER PAGE ---\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBIDRJC": {"ttr": 1541, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMFCI JOB 01992,FCB.IDR.LIST,NOTIFY=TSDAM,MSGCLASS=H\n//S1  EXEC  PGM=FCBIDR\n//SYSLIB   DD DSN=SYS1.IMAGELIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n C SYSLIB\n S FCB2....\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FCBWTO": {"ttr": 1543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMWTO JOB 01992,FCBGEN.WTOR.ROUTINE,MSGCLASS=H,NOTIFY=TSDAM\n//FCBWTO EXEC QASML,NAME=FCBWTO,USR=PRDT\nFCBWTO   ENT13\n         GETPARM\n         MVC      WTO+21(4),$PARMD\nWTO      WTO  'MAS900I  FCB XXXX IS NOW READY FOR USE',ROUTCDE=(7)\n         EXT13\n         EQUATE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEWLDFPX": {"ttr": 1545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMM JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM,COND=(0,NE)\n//*\n//*\n//*    MVS/XA  OZ75853\n//*\n//*\n//*\n//*\n//* I AM NOT A SMP MAN SO IF YOU WANT TO USE SMP YOU HAVE TO\n//* ADD IT YOURSELF.  I JUST CODED AND TESTED THE MOD.\n//*\n//*   DON MARQUARDT\n//*   MAY AND SPEH    SHARE (MSD)  GUIDE (LTU)\n//*   312-369-3000 EXT 2778\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -EXPAND\n//EXPAND EXEC PGM=IEWL,PARM='LIST,MAP,XREF,NCAL,RENT,AC=1'\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//SYSLIN    DD DDNAME=SYSIN\n//SYSIN     DD *\n INCLUDE SYSLMOD(HEWLH096)\n EXPAND HEWLFFNL(200)\n ENTRY HEWLFROU\n NAME HEWLH096(R)\n//SYSLMOD   DD DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MXAR1A,\n//             DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,\n//             SPACE=(CYL,(5,5))\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ASM\n//ASM     EXEC PGM=IEV90,PARM='NODECK,NOLOAD,NOALIGN'\n//SYSLIB    DD DSN=SYS1.AMODGEN,\n//             DISP=SHR\n//          DD DSN=SYS1.MACLIB,\n//             DISP=SHR\n//SYSUT1    DD UNIT=VIO,\n//             DCB=BLKSIZE=1700,\n//             SPACE=(CYL,(1,1))\n//SYSUT2    DD UNIT=VIO,\n//             DCB=BLKSIZE=1700,\n//             SPACE=(CYL,(1,1))\n//SYSUT3    DD UNIT=VIO,\n//             DCB=BLKSIZE=1700,\n//             SPACE=(CYL,(1,1))\n//SYSPRINT  DD DSN=&&LIST,\n//             UNIT=VIO,\n//             DISP=(,PASS),\n//             SPACE=(TRK,(20,20))\n//SYSIN     DD *\nHEWLFFNL CSECT ,\n*\n*\n*         M V X / X A\n*\n* THIS CODE IS FOR THE DFP LINKAGE EDITOR HEWLH096 AT\n* LEVEL 8603 AND HAS OZ75853 APPLIED\n*\n*ZAP CARD  NAME HEWLH096 HEWLFFNL\n         PRINT GEN\n         PRINT DATA\n         SPACE 2\nR1       EQU   1\nREG9     EQU   9\n*\n*\nDCBADRS2 EQU   HEWLFFNL+X'0A94'   POINTER TO SYSLMOD DCB\nMINOR    EQU   HEWLFFNL+X'08F4'   POINTER TO MINOR ENQ NAME\nTRAP     EQU   HEWLFFNL+X'05A8'   TRAP INTERCEPT ADDRESS\nPATCH    EQU   HEWLFFNL+X'0BE8'   PATCH AREA ADDRESS\nPSTART   EQU   HEWLFFNL+X'0002'   BASE ADDRESS\nMOVE     EQU   HEWLFFNL+X'05B0'   EXECUTED MOVE INSTR\n*\n*  NOTES ON FINDING THE ABOVE INSTRUCTION ADDRESSES IN NEW UPDATES\n*\n*  USE THE DISASSEMBLER FOR HEWLH096 HEWLFFNL\n*\n*  THE FOLLWOING FIELDS WILL BE INDICATED IN THE RLD INFO SECTION\n*\n*      DCBADRS2  BY NAME HEWLCMDB\n*      MINOR     BY FIRST ENTRY FOR NAME MINOR\n*\n*   THE BALANCE OF THE ADDRESS CAN BE OBTAINED BY SCANNING THE\n*   OUTPUT OF THE DIS-ASSEMBLER\n*\n*      TRAP      IS AROUND LOCATION 5A0  +/- A FEW BYTES\n*                LOOK FOR AN EX INSTRUCTION FOLLOWED BY A BALR 14,15\n*                THEN A BR 8.  TRAP IS THE ADDRESS OF THE EX INSTR.\n*      PATCH     THE FIRST FULL WORD AFTER THE X'FFFF0000' AT THE\n*                END OF THE CSECT.  THIS WILL BE WHERE THE ADDED\n*                SPACE IS CREATED BY THE EXPAND CSECT STEP.\n*      MOVE      THIS IS THE INSTRUCTION AFTER THE BR8 INSTRUCTION\n*                FOUND FOR THE TRAP ADDRESS ABOVE.\n*\n*                THE SEQUENCE IS\n*\n*            PATCH   EX   ....,....\n*                    BALR 14,15\n*                    B    8\n*            MOVE    MVC  0(1,3),0(10)\n*\n*\n*\n*\n         SPACE\n         DSECT\nLINE     DS    CL120              OUTPUT BUFFER\n         SPACE 2\nHEWLFFNL CSECT ,\n         SPACE 3\n         USING PSTART,12\n         USING LINE,3\n         EJECT ,\n*ZAP START VER\n         SPACE\n         ORG   TRAP               VERIFY INTERCEPT\n         SPACE\n         EX    REG9,MOVE\nRETURN   EQU   *\n         SPACE 4\n*ZAP START REP\n         SPACE\n         ORG   TRAP\n         B     NEWCODE            BRANCH TO NEW CODE\n         EJECT\n*ZAP START VER\n         SPACE\n         ORG   PATCH              VERIFY PATCH AREA\n         DC    96X'00'            SHOULD BE ZEROS\n*ZAP START REP\n         ORG   PATCH\n         SPACE\nNEWCODE  EQU   *                  ENTRY TO NEW CODE\n*\n*     SINCE THE DSN AND VOLSER OVERLAYS THE AMODE PART OF THE\n*     MESSAGE, IT IS SAVED AND THEN MOVED BACK INTO THE PRINT LINE\n*\n         EX    REG9,MOVE          PATCHED OUT INSTRUCTION\n         MVC   AMODESV,LINE+64    SAVE AMODE\n         LA    REG9,LINE+52\n         CLI   LINE+15,C'D'       '...DOES NOT EXIST...' MSG ?\n         BE    MOVEDSN            YES, GO PUT IN DSN/VOLSER\n         CLI   LINE+15,C'N'       '...NOW...' MSG ?\n         BNE   RETURN             NO, THEN QUIT NOW\n         MVC   AMODESV,LINE+42    SAVE AMODE\n         LA    REG9,LINE+31\n         CLI   LINE+19,C'R'       '...NOW RELPACED...' MSG ?\n         BE    MOVEDSN            YES, GO PUT IN DSN/VOLSER\n         MVC   AMODESV,LINE+40    SAVE AMODE\n         LA    REG9,LINE+28       NO, ASSUME '...NOW ADDED...' MSG\nMOVEDSN  EQU   *\n         L     R1,MINOR           ADDR OF MINOR ENQ NAME\n         MVC   0(44,REG9),0(R1)   MOVE DSN TO OUTPUT BUFFER\nSCANDSN  EQU   *\n         LA    REG9,1(,REG9)      SCAN TO END OF DSN\n         CLI   0(REG9),C' '\n         BNE   SCANDSN\n         MVC   1(3,REG9),ONTEXT   MOVE 'ON ' TO OUTPUT BUFFER\n         L     R1,DCBADRS2        R1 --> DCB\n         L     R1,44(,R1)         R1 --> DEB\n         L     R1,32(,R1)         R1 --> UCB\n         MVC   4(6,REG9),28(R1)   MOVE VOLSER TO OUTPUT BUFFER\n         MVC   12(10,REG9),AMODESV MOVE IN AMODE\n         B     RETURN             RETURN TO MAIN CODE\nONTEXT   EQU   *\n         DC    C'ON '\nAMODESV  DC    CL10' '\n         SPACE 5\n*ZAP STOP\n         END\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ZAPPER\n//ZAPPER  EXEC PGM=ASMTOZAP\n//*\n//*  THIS PROGRAM IS FROM THE CBT TAPE AND IS IN LOAD MODULE\n//*  FORM IN FILE 035 OF THE TAPE.\n//*\n//SYSUDUMP  DD SYSOUT=*\n//SYSPRINT  DD SYSOUT=*\n//STEPLIB   DD DSN=MVS.FILE035.PDS,\n//             DISP=SHR\n//GO.IN     DD DSN=&&LIST,\n//             DISP=(OLD,DELETE)\n//OUT       DD DSN=&&ZAPFILE,\n//             UNIT=VIO,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=1600),\n//             DISP=(,PASS),\n//             SPACE=(TRK,(1,1))\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ZAPLKED\n//ZAPLKED EXEC PGM=AMASPZAP\n//SYSPRINT  DD SYSOUT=*\n//SYSLIB    DD DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MXAR1A,\n//             DISP=SHR\n//SYSIN     DD DSN=&&ZAPFILE,\n//             DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEWLDFP1": {"ttr": 1549, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMM JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM,COND=(0,NE)\n//*\n//*\n//*    MVS/SP  1.3.4\n//*\n//*\n//*\n//*\n//* I AM NOT A SMP MAN SO IF YOU WANT TO USE SMP YOU HAVE TO\n//* ADD IT YOURSELF.  I JUST CODED AND TESTED THE MOD.\n//*\n//*   DON MARQUARDT\n//*   MAY AND SPEH    SHARE (MSD)  GUIDE (LTU)\n//*   312-369-3000 EXT 2778\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -EXPAND\n//EXPAND EXEC PGM=IEWL,PARM='LIST,MAP,XREF,NCAL,RENT,AC=1'\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//SYSLIN    DD DDNAME=SYSIN\n//SYSIN     DD *\n INCLUDE SYSLMOD(HEWLH096)\n EXPAND HEWLFFNL(200)\n ENTRY HEWLFROU\n NAME HEWLH096(R)\n//SYSLMOD   DD DSN=SYS1.LINKLIB,\n//             DISP=SHR\n//SYSUT1    DD UNIT=SYSDA,\n//             SPACE=(CYL,(5,5))\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ASM\n//ASM     EXEC PGM=IEV90,PARM='NODECK,NOLOAD,NOALIGN'\n//SYSLIB    DD DSN=SYS1.AMODGEN,\n//             DISP=SHR\n//          DD DSN=SYS1.MACLIB,\n//             DISP=SHR\n//SYSUT1    DD UNIT=VIO,\n//             DCB=BLKSIZE=1700,\n//             SPACE=(CYL,(1,1))\n//SYSUT2    DD UNIT=VIO,\n//             DCB=BLKSIZE=1700,\n//             SPACE=(CYL,(1,1))\n//SYSUT3    DD UNIT=VIO,\n//             DCB=BLKSIZE=1700,\n//             SPACE=(CYL,(1,1))\n//SYSPRINT  DD DSN=&&LIST,\n//             UNIT=VIO,\n//             DISP=(,PASS),\n//             SPACE=(TRK,(20,20))\n//SYSIN     DD *\nHEWLFFNL CSECT ,\n*\n* THIS CODE IS FOR THE DFP LINKAGE EDITOR HEWLH096 AT\n* LEVEL 8503 AND HAS UZ78097 APPLIED\n*\n*ZAP CARD  NAME HEWLH096 HEWLFFNL\n         PRINT GEN\n         PRINT DATA\n         SPACE 2\nR1       EQU   1\nREG9     EQU   9\n*\n*\nDCBADRS2 EQU   HEWLFFNL+X'0A98'   POINTER TO SYSLMOD DCB\nMINOR    EQU   HEWLFFNL+X'08F8'   POINTER TO MINOR ENQ NAME\nTRAP     EQU   HEWLFFNL+X'05A8'   TRAP INTERCEPT ADDRESS\nPATCH    EQU   HEWLFFNL+X'0BE8'   PATCH AREA ADDRESS\nPSTART   EQU   HEWLFFNL+X'0002'   BASE ADDRESS\nMOVE     EQU   HEWLFFNL+X'05B0'   EXECUTED MOVE INSTR\n*\n*  NOTES ON FINDING THE ABOVE INSTRUCTION ADDRESSES IN NEW UPDATES\n*\n*  USE THE DISASSEMBLER FOR HEWLH096 HEWLFFNL\n*\n*  THE FOLLWOING FIELDS WILL BE INDICATED IN THE RLD INFO SECTION\n*\n*      DCBADRS2  BY NAME HEWLCMDB\n*      MINOR     BY FIRST ENTRY FOR NAME MINOR\n*\n*   THE BALANCE OF THE ADDRESS CAN BE LOCATED BY LOOKING AT THE\n*   DIS-ASSEMBLED SOURCE CODE.\n*\n*\n*      TRAP      IS AROUND LOCATION 5A0  +/- A FEW BYTES\n*                LOOK FOR AN EX INSTRUCTION FOLLOWED BY A BALR 14,15\n*                THEN A BR 8.  TRAP IS THE ADDRESS OF THE EX INSTR.\n*      PATCH     THE FIRST FULL WORD AFTER THE X'FFFF0000' AT THE\n*                END OF THE CSECT.  THIS WILL BE WHERE THE ADDED\n*                SPACE IS CREATED BY THE EXPAND CSECT STEP.\n*      MOVE      THIS IS THE INSTRUCTION AFTER THE BR8 INSTRUCTION\n*                FOUND FOR THE TRAP ADDRESS ABOVE.\n*\n*                THE SEQUENCE IS\n*\n*            PATCH   EX   ....,....\n*                    BALR 14,15\n*                    B    8\n*            MOVE    MVC  0(1,3),0(10)\n*\n*\n*\n*\n         SPACE\n         DSECT\nLINE     DS    CL120              OUTPUT BUFFER\n         SPACE 2\nHEWLFFNL CSECT ,\n         SPACE 3\n         USING PSTART,12\n         USING LINE,3\n         EJECT ,\n*ZAP START VER\n         SPACE\n         ORG   TRAP               VERIFY INTERCEPT\n         SPACE\n         EX    REG9,MOVE\nRETURN   EQU   *\n         SPACE 4\n*ZAP START REP\n         SPACE\n         ORG   TRAP\n         B     NEWCODE            BRANCH TO NEW CODE\n         EJECT\n*ZAP START VER\n         SPACE\n         ORG   PATCH              VERIFY PATCH AREA\n         DC    96X'00'            SHOULD BE ZEROS\n*ZAP START REP\n         ORG   PATCH\n         SPACE\nNEWCODE  EQU   *                  ENTRY TO NEW CODE\n*\n*     SINCE THE DSN AND VOLSER OVERLAYS THE AMODE PART OF THE\n*     MESSAGE, IT IS SAVED AND THEN MOVED BACK INTO THE PRINT LINE\n*\n         EX    REG9,MOVE          PATCHED OUT INSTRUCTION\n         MVC   AMODESV,LINE+64    SAVE AMODE\n         LA    REG9,LINE+52\n         CLI   LINE+15,C'D'       '...DOES NOT EXIST...' MSG ?\n         BE    MOVEDSN            YES, GO PUT IN DSN/VOLSER\n         CLI   LINE+15,C'N'       '...NOW...' MSG ?\n         BNE   RETURN             NO, THEN QUIT NOW\n         MVC   AMODESV,LINE+42    SAVE AMODE\n         LA    REG9,LINE+31\n         CLI   LINE+19,C'R'       '...NOW RELPACED...' MSG ?\n         BE    MOVEDSN            YES, GO PUT IN DSN/VOLSER\n         MVC   AMODESV,LINE+40    SAVE AMODE\n         LA    REG9,LINE+28       NO, ASSUME '...NOW ADDED...' MSG\nMOVEDSN  EQU   *\n         L     R1,MINOR           ADDR OF MINOR ENQ NAME\n         MVC   0(44,REG9),0(R1)   MOVE DSN TO OUTPUT BUFFER\nSCANDSN  EQU   *\n         LA    REG9,1(,REG9)      SCAN TO END OF DSN\n         CLI   0(REG9),C' '\n         BNE   SCANDSN\n         MVC   1(3,REG9),ONTEXT   MOVE 'ON ' TO OUTPUT BUFFER\n         L     R1,DCBADRS2        R1 --> DCB\n         L     R1,44(,R1)         R1 --> DEB\n         L     R1,32(,R1)         R1 --> UCB\n         MVC   4(6,REG9),28(R1)   MOVE VOLSER TO OUTPUT BUFFER\n         MVC   12(10,REG9),AMODESV MOVE IN AMODE\n         B     RETURN             RETURN TO MAIN CODE\nONTEXT   EQU   *\n         DC    C'ON '\nAMODESV  DC    CL10' '\n         SPACE 5\n*ZAP STOP\n         END\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ZAPPER\n//ZAPPER  EXEC PGM=ASMTOZAP\n//*\n//*  THIS PROGRAM IS FROM THE CBT TAPE AND IS IN LOAD MODULE\n//*  FORM IN FILE 035 OF THE TAPE.\n//*\n//STEPLIB   DD DSN=MVS.FILE035.PDS,\n//             DISP=SHR\n//GO.IN     DD DSN=&&LIST,\n//             DISP=(OLD,DELETE)\n//OUT       DD DSN=&&ZAPFILE,\n//             UNIT=VIO,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=1600),\n//             DISP=(,PASS),\n//             SPACE=(TRK,(1,1))\n//*\n//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -ZAPLKED\n//ZAPLKED EXEC PGM=AMASPZAP\n//SYSPRINT  DD SYSOUT=*\n//SYSLIB    DD DSN=SYS1.LINKLIB,\n//             DISP=SHR\n//SYSIN     DD DSN=&&ZAPFILE,\n//             DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFTBL": {"ttr": 1793, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMT JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC QASML,NAME=IEFTBL,USR=SYS1,LIB=MLPALIB\nIEFTBL   CSECT\n         DC   CL8'&SYSDATE'\n         DC   CL8'TSDAM'                     DON\n         DC   CL8'TSDMM'                     DALE\n         DC   CL8'TSKRK'                     KEITH\n         DC   CL8'TSEJJ'                     EVERAGE\n         DC   CL8'TSEJR'                     EVERAGE\n         DC   CL8'TSRDA'                     BOB\n         DC   CL8'TSMAX'                     BOB\n         DC   CL8'TUSOA'                     DON\n         DC   CL8'TSSOA'                     DON\n         DC   CL8'TUGEC'                     DON\n         DC   CL8'TMOPR'                     COMPUTER OPERATOR\n         DC   8X'FF'            END OF TABLE  M-U-S-T BE PRESENT\n         END\n//LKED.SYSLMOD DD DSN=SYS1.MLPALIB(IEFTBL),DISP=SHR,UNIT=SYSDA,\n// VOL=SER=TECSUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL": {"ttr": 1795, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "IEFUTL   TITLE 'IPO-SUPPLIED USER TIME LIMIT EXIT'\n*/* COMPID: SYSTEM\n*/* DOC     THIS IS A SMF EXIT ROUTINE THAT IS INVOKED WHEN A\n*/*         CPU TIME LIMIT OR CONTINUOUS WAIT TIME HAS BEEN EXCEEDED.\n*\n*   AUTHOR:  DON MARQUARDT\n*\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFUTL                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  MAY & SPEH   USER TIME LIMIT EXIT   *\n*                                                                     *\n*             COPYRIGHT = NONE                                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                ALLOW JOBS TO BE CANCELLLED IF JOB (STEP) TIME       *\n*                   LIMIT EXCEEDED.                                   *\n*                ALLOW TSO SESSIONS TO BE CANCELLED IF WAIT TIME      *\n*                   LIMIT EXCEEDED.                                   *\n*                ALLOW SELECTED TSO SESSIONS TO BE EXTENDED ON        *\n*                   WAIT TIME EXCEEDED.                               *\n*                     ====> ONLY DURING DAY SHIFT <=====\n*                     ====> AND ONLY FOR THE GOOD <=====\n*                     ====> GUYS LISTED IN THE    <=====\n*                     ====> MODULE IEFTBL         <=====\n*\n*                  THE MODULE IEFTBL CAN BE UPDATED AT ANY\n*                  TIME AND TAKES EFFECT AT THE NEXT TIME\n*                  IEFUTL IS INVOKED.\n*\n*                                                                     *\n*             NOTES =                                                 *\n*                                                                     *\n*                                                                     *\n*   ===========================================================       *\n*                                                                     *\n*    THIS ROUTINE ASSUMES THAT IEFTBL IS AVAILABLE PRIOR TO           *\n*    THE FIRST CALL.  NO CHECKING IS DONE TO INSURE THAT IT           *\n*    IS AVAILABLE AND A 806 ERROR MAY OCCUR IF NOT PRESENT.           *\n*                                                                     *\n*    PLAN TO ADD A CHECK AT A FUTURE DATE AS TIME PERMITS             *\n*                                                                     *\n*   ===========================================================       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE  *\n*                   IF A DIFFERENT CHARACTER SET IS NEEDED.           *\n*                                                                     *\n*                RESTRICTIONS = NONE                                  *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                   REGISTERS 0 TO 2  = WORK REGISTERS                *\n*                   REGISTERS 3 TO 9  = UNUSED                        *\n*                   REGISTER  10      = ADDRESS OF GETMAINED AREA     *\n*                   REGISTER  11      = ADDRESSABILITY TO COMMON      *\n*                                       EXIT PARAMETER AREA           *\n*                   REGISTER  12      = ADDRESSABILITY TO IEFUTL      *\n*                                       CSECT                         *\n*                   REGISTER  13      = SAVE AREA REGISTER            *\n*                   REGISTER  14      = RETURN ADDRESS                *\n*                   REGISTER  15      = RETURN CODE                   *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                  'ZAP*'S)                                           *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, REENTRANT,             *\n*                   SUPERVISOR STATE, ENABLED                         *\n*                                                                     *\n*             ENTRY POINTS = IEFUTL (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM INITIATOR VIA MODULE IEATLEXT                *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO A LIST OF FULL WORDS       *\n*                THE FIRST OF WHICH POINTS TO THE SMF COMMON          *\n*                EXIT PARAMETER AREA MAPPED BY SMFCEPA DSECT          *\n*                                                                     *\n*             OUTPUT = REGISTER 15 - RETURN CODE                      *\n*                REGISTER 1 - TIME LIMIT EXTENSION                    *\n*                USER COMMUNICATION FIELD - EXTENSION COUNT           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = SEE FUNCTION ABOVE                     *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IEFTBL                                    *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE (IEFTBL IS THE TABLE OF GOOD GUYS)        *\n*                                                                     *\n*             MACROS = SAVE, TPUT                                     *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                THE MESSAGES ISSUED BY THE PROBLEM ARE FOUND AT      *\n*                   THE LABELS MESSAGEC, MESSAGEW, AND WTOC.          *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nIEFUTL   CSECT\n         SAVE  (14,12),,IEFUTL.IPO.&SYSTIME_&SYSDATE SAVE REGISTERS\n         LR    R12,R15                 LOAD REGISTER 12 FROM 15\n         USING IEFUTL,R12              ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n*\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ADDRESSABILITY TO SMF PARAMETER AREA DSECT         *\n*        EVALUATE REGISTER 0 = 0 - JOB CPU TIME EXCEEDED              *\n*                            = 4 - STEP CPU TIME EXCEEDED             *\n*                            = 8 - JOB WAIT TIME EXCEEDED             *\n*                                                                     *\n***********************************************************************\n*\n         L     R11,D0(R1)              LOAD POINTER TO PARAMETER AREA\n         USING SMFEPLA,R11             ESTABLISH ADDRESSABILITY TO SMF\n*                                      PARAMETER AREA DSECT\n         C     R0,FULL4                SEE IF JOB/STEP TIME EXCEEDED\n         BH    WAITTIME                NO.....GO DO ANALYSIS FOR WAIT\n*                                      TIME EXCEEDED\n         B     CANCEL                  ALLOW NO EXTENTIONS\n*\n***********************************************************************\n*                                                                     *\n*        WAIT TIME EXCEEDED                                           *\n*           - IF TSO CHECK LOGON IDS                                  *\n*           - ALLOW JOB A 10 MINUTE EXTENSION IF LOGON ID IN IEFTBL   *\n*           - ONLY DURING PERIOD OF 7AM THRU 5PM                      *\n***********************************************************************\n*\nWAITTIME DS    0H\n         TM    SMFOPT,SMFTSO           SEE IF TSO SESSION\n         BO    LDTSOTBL                YES...GO CHECK TSO IDS\n         B     CANCEL                  NO....GO CANCEL JOB - WAIT TIME\nEXTEND   DS    0H\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -\n*                                      EXTEND CPU TIME IN SECONDS\n         L     R1,WAIT600              LOAD TIME EXTENSION IN SECONDS\n*                                      INTO REGISTER 1\n         B     RETURN                  GO RETURN TO CALLER\n*\n***********************************************************************\n*                                                                     *\n*        CHECK TSO ID WITH TABLE - EXTEND WAIT TIME IF FOUND          *\n*                                                                     *\n***********************************************************************\n*\nLDTSOTBL DS    0H\n         TIME\n         C     R0,BEFORE7                BEFORE 7 AM\n         BL    CANCEL                    YES  DO NOT EXTEND\n         C     R0,AFTER5                 AFTER 5 PM\n         BH    CANCEL                    YES  DO NOT EXTEND\n         LOAD  EP=IEFTBL\n         LR    R10,R0                    LOAD TABLE START\nCKIDS    LA    R10,8(,R10)               SKIP OVER IDENT\n         CLC   SMFJOBN,0(R10)            COMPARE LOGON ID\n         BE    FNDID                     EQUAL\n         CLI   0(R10),X'FF'              END OF TABLE\n         BNE   CKIDS                     NO\n         LA    R2,CANCEL                 CANCEL USER\nDELETE   DELETE EP=IEFTBL\n         BR    R2                        RETURN\nFNDID    LA    R2,EXTEND                 GO TO EXTEND ROUTINE\n         B     DELETE                    DELETE TABLE\n*\n***********************************************************************\n*                                                                     *\n*        ZERO REGISTER 2 TO INDICATE CANCEL                           *\n*                                                                     *\n***********************************************************************\n*\nCANCEL   DS    0H\n         SLR   R2,R2                   INDICATE RETURN CODE OF ZERO -\n*                                      CONTINUE (CANCEL)\n*\n***********************************************************************\n*                                                                     *\n*        NORMAL END PROCESSING                                        *\n*                                                                     *\n***********************************************************************\n*\nRETURN   DS    0H\n         L     R14,D12(,R13)           LOAD ADDRESS FOR RETURN\n         LR    R15,R2                  LOAD RETURN CODE FROM REGISTER 2\n         LM    R2,R12,D28(R13)         RESTORE REGISTERS 2 TO 12\n         BR    R14                     RETURN TO CALLER\n         SPACE 5\n**************************** CONSTANTS ********************************\nFULL4    DC    F'4'\nFULL8    DC    F'8'\nWAIT600  DC    F'600'\nBEFORE7  DC    X'07000000'\nAFTER5   DC    X'17000000'\n         SPACE 2\n         EJECT\n************************ DSECTS (MAPPING MACROS) **********************\nSMFEPLA  DSECT\nSMFJOBN  DS    CL8\nSMFTIME  DS    CL4\nSMFDATE  DS    CL4\nSMFSID   DS    CL4\nSMFUSID  DS    CL8\nSMFSTEP  DS    CL1\nSMFOPT   DS    CL1\nSMFTSO   EQU   X'01'\nSMFVS1   DS    CL1\nSMFRESV  DS    CL1\nSMFUSER  DS    CL4\n         ORG   SMFUSER\nSMFUSERC DS    CL1\nSMFUSERW DS    CL1\n         ORG\n         SPACE 5\n********************************* EQUATES *****************************\nD0       EQU   0\nD4       EQU   4\nD12      EQU   12\nD28      EQU   28\nONE      EQU   1\nWTOSVC   EQU   35\nZERO     EQU   0\n         SPACE 5\n***************************** REGISTER EQUATES ************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   IEFUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INITJCL": {"ttr": 1800, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TMPLGINT JOB 01996,'TAPE LIBRARY INITAPE',MSGCLASS=H,NOTIFY=TMPLG,\n//         TYPRUN=HOLD\n//STEP0001 EXEC PGM=TAPEINIT\n//SYSPRINT DD DUMMY\n//SYSUT1   DD DSN=&INIT,UNIT=(TAPE62,,DEFER),DISP=(,DELETE),\n//           LABEL=(,BLP),VOL=SER=TAPINT,DCB=DEN=3\n  INITT    SER=AC6720\n  INITT    SER=AC6721\n  INITT    SER=AC6722\n  INITT    SER=AC6723\n  INITT    SER=AC6724\n  INITT    SER=AC6725\n  INITT    SER=AC6726\n  INITT    SER=AC6727\n  INITT    SER=AC6728\n  INITT    SER=AC6729\n  INITT    SER=AC6730\n  INITT    SER=AC6731\n  INITT    SER=AC6732\n  INITT    SER=AC6733\n  INITT    SER=AC6734\n  INITT    SER=AC6735\n  INITT    SER=AC6736\n  INITT    SER=AC6737\n  INITT    SER=AC6738\n  INITT    SER=AC6739\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INITTAPE": {"ttr": 1802, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMINT JOB 01992,INIT.TAPE.PGM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC QASMG,NAME=TAPEINIT,USR=PROD                                    #06 0001\n//ASM.SYSIN DD *                                                        #06 0002\nTAPEINIT ENT13                                                          #06 0003\n*\n* INPUT CONTROL RECORDS FOR THIS PROGRAM ARE THE SAME\n* AS FOR IBM'S UTILITY\n*\n*\n*\n         OPEN    (CARD,INPUT)                                           #06 0005\n         B        NEXTONE                                               #06 0006\nNEXTAPE  OPEN   (TAPE,OUTPUT)                                           #06 0007\n         PUT     TAPE,VOL1                                              #06 0008\n         PUT     TAPE,HDR1                                              #06 0009\n         CLOSE   (TAPE)                                                 #06 0010\nNEXTONE  GET     CARD,INPUT                                             #06 0011\n         LA      R3,INPUT                                               #06 0012\n         LA      R4,50                                                  #06 0013\nLOOP     CLC     SER,0(R3)                                              #06 0014\n         BE      FOUNDIT                                                #06 0015\n         LA      R3,1(R3)                                               #06 0016\n         BCT     R4,LOOP                                                #06 0017\n         MVC     ERROR+8(30),INPUT                                      #06 0018\nERROR    WTO     '                                           ',        X#06 0019\n               ROUTCDE=(5)                                              #06 0020\n         WTO     'INVALID CONTROL CARD BYPASSED',                      X#06 0021\n               ROUTCDE=(5)                                              #06 0022\n         B       NEXTONE                                                #06 0023\nFOUNDIT  MVC     WTOR+8(6),4(R3)                                        #06 0024\n         MVC     VOL1+4(6),4(R3)                                        #06 0025\nWTOR     WTO     '       TAPE TO BE LABELED',                          X#06 0030\n               ROUTCDE=(5)                                              #06 0031\n         B       NEXTAPE                                                #06 0034\nEOJ      SR       15,15                                                 #06 0036\n         EXT13                                                          #06 0037\nSER      DC    C'SER='                                                  #06 0038\nVOL1     DC    CL80'VOL1      0'                                        #06 0039\nHDR1     DS    0CL80                                                    #06 0040\n         DC    CL4'HDR1'                                                #06 0041\n         DC    76C'0'                                                   #06 0042\nINPUT    DC    CL80' '                                                  #06 0045\nTAPE     DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=F,BLKSIZE=80,MACRF=PM,     X#06 0046\n               LRECL=80                                                 #06 0047\nCARD     DCB  DDNAME=SYSIN,DSORG=PS,RECFM=F,LRECL=80,BLKSIZE=80,       X#06 0048\n               EODAD=EOJ,MACRF=GM                                       #06 0049\n          EQUATE                                                        #06 0050\n          END                                                           #06 0051\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INIT3480": {"ttr": 1804, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMINT JOB 01992,INIT.T3480,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC QASMG,NAME=INIT3480,USR=PROD                                    #06 0001\n//ASM.SYSIN DD *                                                        #06 0002\nTAPEINIT ENT13                                                          #06 0003\n*\n*  TAPE INIT PROGRAM FOR 3480 DRIVES THAT USES THE\n*  DRIVE DISPLAY TO INDICATE THE SERIAL NUMBER OF THE\n*  TAPE TO BE INITED.\n*\n*  INPUT CONTROL RECORDS ARE THE SAME AS IBM'S UTILITY\n*\n*\n*\n*\n*\n         OPEN    (CARD,INPUT)                                           #06 0005\n         B        NEXTONE                                               #06 0006\nNEXTAPE  OPEN   (TAPE,OUTPUT)                                           #06 0007\n         MSGDISP RDY,DCB=TAPE,TXT=MSG\n         PUT     TAPE,VOL1                                              #06 0008\n         PUT     TAPE,HDR1                                              #06 0009\n         CLOSE   (TAPE)                                                 #06 0010\nNEXTONE  GET     CARD,INPUT                                             #06 0011\n         LA      R3,INPUT                                               #06 0012\n         LA      R4,50                                                  #06 0013\nLOOP     CLC     SER,0(R3)                                              #06 0014\n         BE      FOUNDIT                                                #06 0015\n         LA      R3,1(R3)                                               #06 0016\n         BCT     R4,LOOP                                                #06 0017\n         MVC     ERROR+8(30),INPUT                                      #06 0018\nERROR    WTO     '                                           ',        X#06 0019\n               ROUTCDE=(5)                                              #06 0020\n         WTO     'INVALID CONTROL CARD BYPASSED',                      X#06 0021\n               ROUTCDE=(5)                                              #06 0022\n         B       NEXTONE                                                #06 0023\nFOUNDIT  MVC     WTOR+8(6),4(R3)                                        #06 0024\n         MVC     VOL1+4(6),4(R3)                                        #06 0025\n         MVC     MSG(6),4(R3)\nWTOR     WTO     '       TAPE TO BE LABELED',                          X#06 0030\n               ROUTCDE=(5)                                              #06 0031\n         B       NEXTAPE                                                #06 0034\nEOJ      SR       15,15                                                 #06 0036\n         EXT13                                                          #06 0037\nMSG      DC    CL6'XXXXXX'\nSER      DC    C'SER='                                                  #06 0038\nVOL1     DC    CL80'VOL1      0'                                        #06 0039\nHDR1     DS    0CL80                                                    #06 0040\n         DC    CL4'HDR1'                                                #06 0041\n         DC    76C'0'                                                   #06 0042\nREP      DC    C' '                                                     #06 0043\nOPECB    DC    F'0'                                                     #06 0044\nINPUT    DC    CL80' '                                                  #06 0045\nTAPE     DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=F,BLKSIZE=80,MACRF=PM,     X#06 0046\n               LRECL=80                                                 #06 0047\nCARD     DCB  DDNAME=SYSIN,DSORG=PS,RECFM=F,LRECL=80,BLKSIZE=80,       X#06 0048\n               EODAD=EOJ,MACRF=GM                                       #06 0049\n          EQUATE                                                        #06 0050\n          END                                                           #06 0051\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESNSLT": {"ttr": 1806, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMZAP JOB 01992,ZAP.JES2,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC PGM=AMASPZAP\n//*\n//*  FOR HJE2330  SP 1.3.4\n//*\n//*\n//*  THIS ZAP CHANGES THE SEPARATOR PAGE TO PRINT JOB NAME\n//*  IN THE NON-SLANT MODE  MUCH EASIER TO READ\n//*  FIRST ZAP TURNS ON NO SLANT MANDATORY\n//*  SECOND ZAP TURNS ON CENTER MANDATORY\n//*\n//*\n//*  DEPENDING ON THE PTF LEVEL THIS ADDRESS MAY VARY A FEW BYTES\n//*\n//*  LOOK FOR A 9180 .... 4780 .... 9140 .... 4780 ....\n//*                         XX\n//*\n//*  THE ONE YOU WANT TO CHANGE IS THE FIRST ONE\n//*\n//*\n//*  THIS IS A LOT BETTER THAN RUNNING A SMP ASSEMBLY AND LINK\n//*  FOR A ONE BYTE CHANGE.  (JUST MY OPINION)\n//*\n//*\n//*      DON MARQUARDT  5/27/86\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSLIB DD DSN=SYS1.LINKLIB,DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n NAME  HASJES20 HASPPRPU\n VER 4EFC 4780\n REP 4EFC 47F0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESNSLTX": {"ttr": 1808, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMZAP JOB 01992,ZAP.JES2,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC PGM=AMASPZAP\n//*\n//*  FOR  XA 2.1.3\n//*\n//*\n//*  THIS ZAP CHANGES THE SEPARATOR PAGE TO PRINT JOB NAME\n//*  IN THE NON-SLANT MODE  MUCH EASIER TO READ\n//*  FIRST ZAP TURNS ON NO SLANT MANDATORY\n//*  SECOND ZAP TURNS ON CENTER MANDATORY\n//*\n//*\n//*  DEPENDING ON THE PTF LEVEL THIS ADDRESS MAY VARY A FEW BYTES\n//*\n//*  LOOK FOR A 9180 .... 4780 .... 9140 .... 4780 ....\n//*                         XX\n//*\n//*  THE ONE YOU WANT TO CHANGE IS THE FIRST 4780 ....\n//*\n//*\n//*    MVS/XA UZ50712 LOCATION IS 508C\n//*\n//*\n//*\n//*  THIS IS A LOT BETTER THAN RUNNING A SMP ASSEMBLY AND LINK\n//*  FOR A ONE BYTE CHANGE.  (JUST MY OPINION)\n//*\n//*\n//*      DON MARQUARDT  5/27/86\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSLIB DD DSN=SYS1.LINKLIB,DISP=SHR,UNIT=SYSDA,VOL=SER=MXAR1A\n//SYSUDUMP DD SYSOUT=*\n NAME  HASJES20 HASPPRPU\n VER 4F04 4780\n REP 4F04 47F0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAS9010": {"ttr": 1810, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "00001  ID DIVISION.                                                     03/25/85\n00002  PROGRAM-ID. MAS9010.                                             MAS9010\n00003  REMARKS.                                                            LV005\n00004 ***************************************************************** MAS9010\n00005 *                                                                 MAS9010\n00006 *     LIST SCHEDULE FILE..                                        MAS9010\n00007 *     FUNCTIONS:                                                  MAS9010\n00008 *                                                                 MAS9010\n00009 *     1). PRODUCES REPORTS ON AUTOMATIC SCHEDULE FILE             MAS9010\n00010 *         SORTED BY VARIOUS FIELDS.                               MAS9010\n00011 *                                                                 MAS9010\n00012 *                      BY: BUENEMAN 9/13/84                       MAS9010\n00013 *                                                                 MAS9010\n00014 ***************************************************************** MAS9010\n00015  ENVIRONMENT DIVISION.                                            MAS9010\n00016  CONFIGURATION SECTION.                                           MAS9010\n00017  SPECIAL-NAMES. C01 IS CHAN-1.                                    MAS9010\n00018  INPUT-OUTPUT SECTION.                                            MAS9010\n00019  FILE-CONTROL.                                                    MAS9010\n00020      SELECT SCH-FLE  ASSIGN TO SCHED                              MAS9010\n00021          ORGANIZATION IS INDEXED                                  MAS9010\n00022          ACCESS IS SEQUENTIAL                                     MAS9010\n00023          RECORD KEY IS SCH-KEY                                    MAS9010\n00024          PASSWORD IS W-PASSWORD                                   MAS9010\n00025          FILE STATUS IS SCH-CHECK.                                MAS9010\n00026      SELECT PRT-FLE  ASSIGN TO UT-S-REPORT.                       MAS9010\n00027      SELECT SORTFILE ASSIGN TO DA-S-SORTFILE.                     MAS9010\n00028  DATA DIVISION.                                                   MAS9010\n00029  FILE SECTION.                                                    MAS9010\n00030  FD  SCH-FLE LABEL RECORD IS STANDARD                             MAS9010\n00031      BLOCK CONTAINS 0 RECORDS.                                    MAS9010\n00032  01  FLE-SCH.                                                     MAS9010\n00033      05  SCH-KEY                PIC X(12).                        MAS9010\n00034      05  FILLER                 PIC X(289).                       MAS9010\n00035  FD  PRT-FLE  RECORDING MODE IS F LABEL RECORD IS STANDARD        MAS9010\n00036      BLOCK CONTAINS 0 RECORDS.                                    MAS9010\n00037  01  FLE-PRT                    PIC X(133).                       MAS9010\n00038  SD  SORTFILE RECORDING MODE IS F.                                MAS9010\n00039  01  FILESORT.                                                    MAS9010\n00040      05  FILLER                 PIC X(02).                        MAS9010\n00041      05  S-SORT-2               PIC X(08).                        MAS9010\n00042      05  FILLER                 PIC X(02).                        MAS9010\n00043      05  S-SORT-1               PIC X(08).                        MAS9010\n00044      05  S-SORT-3               PIC X(02).                        MAS9010\n00045      05  FILLER                 PIC X(279).                       MAS9010\n00046  WORKING-STORAGE SECTION.                                         MAS9010\n000465 77  PAN-VALET PICTURE X(24) VALUE '010CBT1622   03/30/89'.       MAS9010\n000465 77  PAN-VALET PICTURE X(24) VALUE '005MAS9010   03/25/85'.       MAS9010\n00047  01  SCH-WRK.                                                     MAS9010\n00048      05  SCH-WRK-KEY           PIC X(12).                         MAS9010\n00049      05  FILLER  REDEFINES  SCH-WRK-KEY.                          MAS9010\n00050      10  SCH-SCH-YR            PIC S9(4) COMP.                    MAS9010\n00051      10  SCH-SCH-MO            PIC S9(4) COMP.                    MAS9010\n00052      10  SCH-SCH-DY            PIC S9(4) COMP.                    MAS9010\n00053      10  SCH-SCH-HR            PIC S9(4) COMP.                    MAS9010\n00054      10  SCH-SCH-MN            PIC S9(4) COMP.                    MAS9010\n00055      10  SCH-ID-NBR            PIC S9(4) COMP.                    MAS9010\n00056      05  SCH-APPL-NAME         PIC X(08).                         MAS9010\n00057      05  SCH-DAY-OF-WEEK       PIC S9(4) COMP.                    MAS9010\n00058      05  SCH-LAST-YR           PIC S9(4) COMP.                    MAS9010\n00059      05  SCH-LAST-MO           PIC S9(4) COMP.                    MAS9010\n00060      05  SCH-LAST-DY           PIC S9(4) COMP.                    MAS9010\n00061      05  SCH-LAST-HR           PIC S9(4) COMP.                    MAS9010\n00062      05  SCH-LAST-MN           PIC S9(4) COMP.                    MAS9010\n00063      05  SCH-WIN-HR            PIC S9(4) COMP.                    MAS9010\n00064      05  SCH-WIN-MN            PIC S9(4) COMP.                    MAS9010\n00065      05  SCH-SMF-SYSID         PIC X(04).                         MAS9010\n00066      05  SCH-FLAG              PIC S9(4) COMP.                    MAS9010\n00067      05  SCH-LEN-TEXT          PIC S9(4) COMP.                    MAS9010\n00068      05  SCH-BIN-ZERO          PIC S9(4) COMP.                    MAS9010\n00069      05  SCH-COMMAND-TEXT      PIC X(01) OCCURS 255 TIMES.        MAS9010\n00070  01  H1.                                                          MAS9010\n00071      05  FILLER PIC X(30) VALUE '          M A Y  +  S P E H   '. MAS9010\n00072      05  FILLER PIC X(30) VALUE 'SCHEDULE FILE LISTING         '. MAS9010\n00073      05  FILLER PIC X(05) VALUE 'DATE '.                          MAS9010\n00074      05  H-DATE  PIC X(08).                                       MAS9010\n00075      05  FILLER  PIC X(16) VALUE SPACES.                          MAS9010\n00076      05  FILLER PIC X(07) VALUE '   PAGE'.                        MAS9010\n00077      05  H-PAGE  PIC ZZ,ZZ9.                                      MAS9010\n00078      05  FILLER  PIC X(31) VALUE SPACES.                          MAS9010\n00079  01  H2.                                                          MAS9010\n00080      05  FILLER PIC X(01) VALUE SPACE.                            MAS9010\n00081      05  FILLER PIC X(30) VALUE ' ----------SCHEDULED----------'. MAS9010\n00082      05  FILLER PIC X(30) VALUE '   ID    APPL    -----LAST EXE'. MAS9010\n00083      05  FILLER PIC X(30) VALUE 'CUTION-----  -WINDOW-  SMF    '. MAS9010\n00084      05  FILLER PIC X(42) VALUE SPACES.                           MAS9010\n00085  01  H3.                                                          MAS9010\n00086      05  FILLER PIC X(01) VALUE SPACE.                            MAS9010\n00087      05  FILLER PIC X(30) VALUE ' YEAR  MTH  DAY HOUR MIN DY/WK'. MAS9010\n00088      05  FILLER PIC X(30) VALUE '  NBR    NAME    YEAR  MTH  DA'. MAS9010\n00089      05  FILLER PIC X(30) VALUE 'Y HOUR  MIN  HRS MINS SYSID  -'. MAS9010\n00090      05  FILLER PIC X(30) VALUE '--------------COMMAND TEXT----'. MAS9010\n00091      05  FILLER PIC X(12) VALUE '------------'.                   MAS9010\n00092  01  PRT-LINE.                                                    MAS9010\n00093      05  FILLER                 PIC X(01).                        MAS9010\n00094      05  P-SCH-YR               PIC ZZZZ9.                        MAS9010\n00095      05  P-SCH-MO               PIC ZZZZ9.                        MAS9010\n00096      05  P-SCH-DY               PIC ZZZZ9.                        MAS9010\n00097      05  P-SCH-HR               PIC ZZZZ9.                        MAS9010\n00098      05  P-SCH-MN               PIC ZZZZ9.                        MAS9010\n00099      05  P-DAY-OF-WEEK          PIC ZZZZ9.                        MAS9010\n00100      05  P-ID-NBR               PIC ZZZZ9.                        MAS9010\n00101      05  FILLER                 PIC X(02).                        MAS9010\n00102      05  P-APPL-NAME            PIC X(08).                        MAS9010\n00103      05  FILLER                 PIC X(01).                        MAS9010\n00104      05  P-LAST-YR              PIC ZZZZ9.                        MAS9010\n00105      05  P-LAST-MO              PIC ZZZZ9.                        MAS9010\n00106      05  P-LAST-DY              PIC ZZZZ9.                        MAS9010\n00107      05  P-LAST-HR              PIC ZZZZ9.                        MAS9010\n00108      05  P-LAST-MN              PIC ZZZZ9.                        MAS9010\n00109      05  P-WIN-HR               PIC ZZZZ9.                        MAS9010\n00110      05  P-WIN-MN               PIC ZZZZ9.                        MAS9010\n00111      05  FILLER                 PIC X(02).                        MAS9010\n00112      05  P-SMF-SYSID            PIC X(04).                        MAS9010\n00113      05  FILLER                 PIC X(02).                        MAS9010\n00114      05  P-COMMAND-TEXT         PIC X(01) OCCURS 43 TIMES.        MAS9010\n00115  01  LINE-CNT                   PIC S9(05) COMP-3 VALUE +0.       MAS9010\n00116  01  MAX-LINE                   PIC S9(05) COMP-3 VALUE +60.      MAS9010\n00117  01  W-PAGE                     PIC S9(05) COMP-3 VALUE +0.       MAS9010\n00118  01  SUB-A                      PIC S9(05) COMP   VALUE +0.       MAS9010\n00119  01  SCH-CHECK                  PIC 9(02)  VALUE 0.               MAS9010\n00120  01  W-PASSWORD                 PIC X(04) VALUE 'WORD'.           MAS9010\n00121  01  CTL-SW                     PIC X(01) VALUE 'A'.              MAS9010\n00122  01  FST-SW                     PIC X(01) VALUE ' '.              MAS9010\n00123  01  OLD-APPL                   PIC X(08).                        MAS9010\n00124  01  OLD-DAY                    PIC S9(4) VALUE +0.               MAS9010\n00125  01  STR-LINE                   PIC X(133).                       MAS9010\n00126  PROCEDURE DIVISION.                                              MAS9010\n00127      MOVE CURRENT-DATE TO H-DATE.                                 MAS9010\n00128      OPEN OUTPUT PRT-FLE.                                         MAS9010\n00129      PERFORM Z-040-HEADING.                                       MAS9010\n00130  M-010-READ-SCHEDULE.                                             MAS9010\n00131      SORT SORTFILE ON ASCENDING S-SORT-1 S-SORT-2                 MAS9010\n00132          USING SCH-FLE OUTPUT PROCEDURE IS M-020-REPORT.          MAS9010\n00133      MOVE +0 TO W-PAGE.                                           MAS9010\n00134      PERFORM Z-040-HEADING.                                       MAS9010\n00135      MOVE 'D' TO CTL-SW.                                          MAS9010\n00136      MOVE SPACE TO FST-SW.                                        MAS9010\n00137      SORT SORTFILE ON ASCENDING S-SORT-3 S-SORT-2                 MAS9010\n00138          USING SCH-FLE OUTPUT PROCEDURE IS M-020-REPORT.          MAS9010\n00139      CLOSE PRT-FLE.                                               MAS9010\n00140      STOP RUN.                                                    MAS9010\n00141      EJECT                                                        MAS9010\n00142  Z-040-HEADING.                                                   MAS9010\n00143      ADD +1 TO W-PAGE.                                            MAS9010\n00144      MOVE W-PAGE TO H-PAGE.                                       MAS9010\n00145      WRITE FLE-PRT FROM H1 AFTER CHAN-1.                          MAS9010\n00146      WRITE FLE-PRT FROM H2 AFTER 2 LINES.                         MAS9010\n00147      WRITE FLE-PRT FROM H3 AFTER 1 LINES.                         MAS9010\n00148      MOVE SPACES TO PRT-LINE.                                     MAS9010\n00149      WRITE FLE-PRT FROM PRT-LINE AFTER 1 LINES.                   MAS9010\n00150      MOVE +5 TO LINE-CNT.                                         MAS9010\n00151  Z-050-WRITE-LINE.                                                MAS9010\n00152      WRITE FLE-PRT FROM PRT-LINE AFTER 1 LINES.                   MAS9010\n00153      ADD +1 TO LINE-CNT.                                          MAS9010\n00154      IF LINE-CNT NOT LESS THAN MAX-LINE                           MAS9010\n00155          PERFORM Z-040-HEADING.                                   MAS9010\n00156      MOVE SPACES TO PRT-LINE.                                     MAS9010\n00157  M-020-REPORT SECTION.                                            MAS9010\n00158      RETURN SORTFILE INTO SCH-WRK AT END                          MAS9010\n00159          GO TO M-020-EXIT.                                        MAS9010\n00160      IF SCH-WRK-KEY EQUAL TO HIGH-VALUES                          MAS9010\n00161          GO TO M-020-REPORT.                                      MAS9010\n00162      IF FST-SW EQUAL TO SPACES                                    MAS9010\n00163          MOVE SCH-APPL-NAME TO OLD-APPL                           MAS9010\n00164          MOVE SCH-DAY-OF-WEEK TO OLD-DAY                          MAS9010\n00165          MOVE '1' TO FST-SW.                                      MAS9010\n00166      MOVE SCH-SCH-YR      TO P-SCH-YR.                            MAS9010\n00167      MOVE SCH-SCH-MO      TO P-SCH-MO.                            MAS9010\n00168      MOVE SCH-SCH-DY      TO P-SCH-DY.                            MAS9010\n00169      MOVE SCH-SCH-HR      TO P-SCH-HR.                            MAS9010\n00170      MOVE SCH-SCH-MN      TO P-SCH-MN.                            MAS9010\n00171      MOVE SCH-ID-NBR      TO P-ID-NBR.                            MAS9010\n00172      MOVE SCH-APPL-NAME   TO P-APPL-NAME.                         MAS9010\n00173      MOVE SCH-DAY-OF-WEEK TO P-DAY-OF-WEEK.                       MAS9010\n00174      MOVE SCH-LAST-YR     TO P-LAST-YR.                           MAS9010\n00175      MOVE SCH-LAST-MO     TO P-LAST-MO.                           MAS9010\n00176      MOVE SCH-LAST-DY     TO P-LAST-DY.                           MAS9010\n00177      MOVE SCH-LAST-HR     TO P-LAST-HR.                           MAS9010\n00178      MOVE SCH-LAST-MN     TO P-LAST-MN.                           MAS9010\n00179      MOVE SCH-WIN-HR      TO P-WIN-HR.                            MAS9010\n00180      MOVE SCH-WIN-MN      TO P-WIN-MN.                            MAS9010\n00181      MOVE SCH-SMF-SYSID   TO P-SMF-SYSID.                         MAS9010\n00182      SUBTRACT +4 FROM SCH-LEN-TEXT.                               MAS9010\n00183      MOVE +1 TO SUB-A.                                            MAS9010\n00184  M-021-LOOP.                                                      MAS9010\n00185      MOVE SCH-COMMAND-TEXT (SUB-A) TO P-COMMAND-TEXT (SUB-A).     MAS9010\n00186      ADD +1 TO SUB-A.                                             MAS9010\n00187      IF SUB-A NOT GREATER THAN SCH-LEN-TEXT AND                   MAS9010\n00188          NOT GREATER THAN +43                                     MAS9010\n00189              GO TO M-021-LOOP.                                    MAS9010\n00190      IF CTL-SW EQUAL TO 'A' AND SCH-APPL-NAME NOT EQUAL TO        MAS9010\n00191          OLD-APPL                                                 MAS9010\n00192          MOVE PRT-LINE TO STR-LINE                                MAS9010\n00193          MOVE SPACES TO PRT-LINE                                  MAS9010\n00194          PERFORM Z-050-WRITE-LINE                                 MAS9010\n00195          MOVE STR-LINE TO PRT-LINE                                MAS9010\n00196          MOVE SCH-APPL-NAME TO OLD-APPL.                          MAS9010\n00197      IF CTL-SW EQUAL TO 'D' AND SCH-DAY-OF-WEEK NOT EQUAL TO      MAS9010\n00198          OLD-DAY                                                  MAS9010\n00199          MOVE PRT-LINE TO STR-LINE                                MAS9010\n00200          MOVE SPACES TO PRT-LINE                                  MAS9010\n00201          PERFORM Z-050-WRITE-LINE                                 MAS9010\n00202          MOVE STR-LINE TO PRT-LINE                                MAS9010\n00203          MOVE SCH-DAY-OF-WEEK TO OLD-DAY.                         MAS9010\n00204      PERFORM Z-050-WRITE-LINE.                                    MAS9010\n00205      GO TO M-020-REPORT.                                          MAS9010\n00206  M-020-EXIT. EXIT.                                                MAS9010\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAS9010#": {"ttr": 2052, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//SCHEDLST   PROC\n//SCHEDLST   EXEC  PGM=MAS9010\n//REPORT     DD    SYSOUT=*\n//SCHED      DD    DSN=SYSVSAM.SCHEDULE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRVIPLSP": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMZ JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC PGM=AMASPZAP\n//*\n//*    MVS/370  1.3.4  CBIPO\n//*\n//*\n//*\n//*   THIS ZAP CHANGES THE DEFAULT MOUNT STATUS TO PRIVATE IF\n//*   NOT IN THE VATLSTXX\n//*   IBM DEFAULT IS PUBLIC\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSLIB DD DISP=SHR,\n// DSN=SYS1.NUCLEUS\n NAME  IEAVNP15 IEAVAP00\n VER 0226 9608\n REP 0226 9610\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRVIPLXA": {"ttr": 2056, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMZ JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC PGM=AMASPZAP\n//*\n//*    MVS/XA 2.1.3 CBIPO\n//*\n//*\n//*\n//*   THIS ZAP CHANGES THE DEFAULT MOUNT STATUS TO PRIVATE IF\n//*   NOT IN THE VATLSTXX\n//*   IBM DEFAULT IS PUBLIC\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSLIB DD DISP=SHR,\n// DSN=SYS1.NUCLEUS\n NAME  IEAVNP15 IEAVAP00\n VER 022A 9608\n REP 022A 9610\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOMXSP": {"ttr": 2058, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMZ JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC PGM=AMASPZAP\n//*\n//* THIS ZAP ALLOWS TECH SUPPORT USERS (TS...) TO LOGON EVEN\n//* IF THE MAX USER LIMIT IS REACHED.\n//*\n//* NOTE..\n//*\n//*   MAX USERS MUST BE 1 OR GREATER\n//*   A MAX USER LIMIT OF 0 SHUTS OFF EVERYONE\n//*\n//*   THIS ZAP CREATED BY FRANK WALSCHLAGER OF SPIEGEL\n//*\n//*   MVS/SP 1.3.3  UZ80114\n//*\n//*\n//*\n//*                DAM  6/10/86\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSLIB DD DISP=SHR,\n// DSN=SYS1.LINKLIB\n  NAME  IKTCAS30 IKTCAS31\n  VER 0100 4450,C798,4770,C0EE\n  VER 0B54 0000,0000\n  REP 0B54 D501,6000,CB44,4780,C102,4450,C798,47F0,C0E2,E3E2\n  REP 0100 47F0,CB32\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOMXXA": {"ttr": 2060, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSDAMZ JOB 01992,DAM,MSGCLASS=H,NOTIFY=TSDAM\n// EXEC PGM=AMASPZAP\n//*\n//* THIS ZAP ALLOWS TECH SUPPORT USERS (TS...) TO LOGON EVEN\n//* IF THE MAX USER LIMIT IS REACHED.\n//*\n//* NOTE..\n//*\n//*   MAX USERS MUST BE 1 OR GREATER\n//*   A MAX USER LIMIT OF 0 SHUTS OFF EVERYONE\n//*\n//*   THIS ZAP CREATED BY FRANK WALSCHLAGER OF SPIEGEL\n//*\n//*   UPDATED FOR XA  BY DON MARQUARDT  MSD\n//*\n//*   MVS/XA\n//*\n//*\n//*\n//*                DAM  6/10/86\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSLIB DD DISP=SHR,\n// DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MXAR1A\n  NAME  IKTCAS30 IKTCAS31\n  VER 00FA 4430,C76E\n  VER 0B24 0000,0000\n  REP 0B24 D501,6000,CB1A,4780,C102,4430,C76E,47F0,C0E2,E3E2,C440\n  REP 00FA 47F0,CB08\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TURKEY": {"ttr": 2062, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "JUST TO SEE IF ANYONE ACTUALLY CHECKS OUT ANY OF THIS CODE,\nI MAKE THE FOLLOWING OFFER.\n\nAT SHARE IN SCIDS,\n\n  COME OVER TO THE TABLE THAT HAS THE TURKEY BUTTONS\n\n      ASK FOR #1     (DON)\n\n      SAY  THE  MAGIC  WORD(S)\n\nAND GET A SPECIAL EDITION HAND COLORED, NUMBERED TURKEY BUTTON FREE.\n\nTHERE WILL ONLY BE 10 AVAILABLE.\n\n\n****************************************************\n\n          SHARE 68 SAN FRANCISCO SPECIAL\n\nTHE FIRST PERSON TO TAKE ME UP ON THIS OFFER WILL ALSO\nGET A TURKEY T-SHIRT\n\n*****************************************************\n\nTHIS OFFER ONLY GOOD WHILE THEY LAST AND THEY GO FAST.\n\nIF INTERESTED BETTER SEE ME SUNDAY OR MONDAY NIGHT.\n\nTHE   \"MAGIC WORD\"\n\n   FOR SHARE 67 ATLANTA               MINT JULIP\n\n   FOR SHARE 68 SAN FRANCISCO         ALCATRAZ\n\n   FOR SHARE 69 CHICAGO\n\nSEE YOU AT SHARE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VARLENTH": {"ttr": 2064, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "// EXEC QASML,NAME=MAS098,USR=PRDT\nVARLEN    ENT13 NO=3\n*\n*\n* THIS PROGRAM READS A VARIABLE LENGTH FILE AND REPORTS ON THE\n* SIZES OF RECORDS FOUND AND HOW MANY OF EACH SIZE WERE ON THE FILE\n*\n*\n          OPEN  (VARLENT,INPUT,PRINT,OUTPUT)\n          L     R3,TABLEND\n          SR    R2,R2\nGET       GET   VARLENT,WORKA\n          LA    R2,1(R2)\n          CH    R3,WORKA\n          BL    BADREC\n          LA    R4,TABLE\n          LA    R5,4\n          MH    R5,WORKA\n          AR    R4,R5\n          L     R6,0(R4)\n          LA    R6,1(R6)\n          ST    R6,0(R4)\n          B     GET\nEOFIN     DS    0H\n          L     R6,TABLEND\n          LA    R4,TABLE\n          PUT   PRINT,HEAD1\n          PUT   PRINT,HEAD2\n          LA    R7,55             LINE COUNT\n          MVI   LINE,C'0'\n          LA    R8,LINE+1         START OF DETAIL LINE\n          LA    R9,6              ENTRIES PER LINE\nPRTLOOP   DS    0H\n          L     R5,0(R4)\n          LTR   R5,R5\n          BZ    NORECS\n          UNPK  0(5,R8),LEN\n          OI    4(R8),X'F0'\n          CVD   R5,WORK\n          UNPK  10(7,R8),WORK+4(4)\n          OI    16(R8),X'F0'\n          LA    R8,20(R8)\n          BCT   R9,NORECS\n          PUT   PRINT,LINE\n          MVC   LINE(133),SPACES\n          LA    R8,LINE+1\n          LA    R9,6\n          BCT   R7,NORECS\n          PUT   PRINT,HEAD1\n          PUT   PRINT,HEAD2\n          MVI   LINE,C'0'\n          LA    R7,55\nNORECS   DS    0H\n          AP    LEN,=PL1'1'\n          LA    R4,4(R4)\n          BCT   R6,PRTLOOP\n          PUT   PRINT,LINE\n          CVD   R2,WORK\n          UNPK  TOTALS,WORK\n          OI    TOTALS+15,X'F0'\n          PUT   PRINT,TOTLINE\n          CLOSE (VARLENT,,PRINT)\n          SR    R15,R15\n          EXT13\nBADREC    BC    0,GET\n          WTO   'AT LEAST ONE RECORD IS INVALID OR GREATER THAN 20K'\n          MVI   BADREC+1,X'F0'\n          B     GET\nVARLENT   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,EODAD=EOFIN\nPRINT     DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM\nWORK      DS    D\nLEN       DC    PL3'0'\nHEAD1     DC    CL110'1MAY AND SPEH    VARIABLE FILE STATS'\n          DC    CL28'VERSION 1.3 08/17/82'\nHEAD2     DC    C'0'\n          DC    6CL20'REC SIZE   COUNT'\n          DC    CL50' '\nTOTLINE  DC    C'-TOTAL RECORDS ON FILE  '\nTOTALS    DC    CL16' '\n          DC    CL130' '\n          LTORG\n          DS    D\nWORKA     DS    CL10000\nLINE      DC    CL135'0 '\nSPACES    DC    CL140' '\nTABLEND   DC    A((TBLEND-TABLE)/4)\nTABLE     DS    0D\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\n          DC    256F'0'\nTBLEND    EQU   *\n        EQUATE\n        END\n//SYSGO DD SPACE=(CYL,(10,10))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT422/FILE422.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT422", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}