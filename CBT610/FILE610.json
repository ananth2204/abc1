{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012447000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE610.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE610.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x06'", "DS1TRBAL": "b'\\x9a2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04u\\x00\\x03\\x04u\\x00\\x06\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Q\\x00I\\x01\\x11\\x04/\\x01\\x11\\x04/\\x16)\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@'", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-11T00:00:00", "modifydate": "2011-02-11T16:29:49", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-481"}, "text": "REGULAR CBT TAPE - VERSION 481    FILE:  610\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT481.FILE610\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 645 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/11/11    16:29:49    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE610": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Q\\x00B\\x01\\x11\\x04/\\x01\\x11\\x04/\\x16)\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf1@@@'", "ispf": {"version": "04.81", "flags": 0, "createdate": "2011-02-11T00:00:00", "modifydate": "2011-02-11T16:29:42", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT-481"}, "text": "//***FILE 610 is a program to copy a file and substitute strings.   *   FILE 610\n//*           As many as 25 string pairs may be substituted.        *   FILE 610\n//*           And there is another program to send control messages *   FILE 610\n//*           to the operator, telling when to open and close CICS  *   FILE 610\n//*           files.                                                *   FILE 610\n//*                                                                 *   FILE 610\n//*           The materials on this file were originally submitted  *   FILE 610\n//*           to the files section of H390-MVS@yahoogroups.com .    *   FILE 610\n//*                                                                 *   FILE 610\n//*           email:  somitcw@yahoo.com                             *   FILE 610\n//*                                                                 *   FILE 610\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHANGE71": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x02O\\x01\\x11\\x04/\\x16\\x19\\x01z\\x01z\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-01-24T00:00:00", "modifydate": "2011-02-11T16:19:00", "lines": 378, "newlines": 378, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWC JOB (xxxxxxxx,xxxx,1439,9999,9999),CHANGE71-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             COND=(0,NE),NOTIFY=SOMITCW\n//CHANGE71 EXEC ASMFCL,PARM.ASM=(RENT,NODECK,OBJECT,TERM),\n//             PARM.LKED=RENT\nPASS     TITLE 'CHANGE71 - - - Copy/Edit data with substitution'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*     This program copies a file and substitutes data as specified in\n*     the PARM.\n*\n*     The PARM format is *old-data1*new-data1*old-data2*new-data2*\n*\n*     Delimiters other than '*' may instead be used.\n*\n*     Up to 25 old-data new-data pairs may be used.\n*\n*  For problems or questions, contact: somitcw@yahoo.com\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE ,\n         PRINT NOGEN\nCHANGE71 CSECT ,\n         USING *,R15              Set temporary base register\n         SAVE  (14,12),,'CHANGE71.&SYSDATE..&SYSTIME'  Save reg.s\n         LR    R12,R15            Load the program's base register\n         USING CHANGE71,R12       Give the assembler the new base\n         LR    R2,R1              Save the PARM address\n         GETMAIN R,LV=WORKSIZE    Get storage for work area\n         DROP  R15                Drop the temporary base register\n         XC    0(12,R1),0(R1)     Clear the new register savearea\n         ST    R1,8(,R13)         Chain old and new save areas\n         ST    R13,4(,R1)         Chain old and new save areas\n         LR    R13,R1             Chain old and new save areas\n         USING WORKAREA,R13       Tell assembler work area address\n         XC    RETCODE,RETCODE    Initialize return code\n         ICM   R2,B'1111',0(R2)   Load the address of the PARM\n         BZ    NOPARM1            No PARM, go abend\n         LH    R4,0(,R2)          Load the length of the PARM\n         LTR   R4,R4              Set a condition code\n         BZ    NOPARM2            No PARM, go abend\n         CH    R4,H5              See if at least 5 bytes\n         BL    TOOSHORT           PARM too short, go abend\n         MVC   DELIMIT,2(R2)      Save the delimiter\n         LA    R5,3(,R2)          Load the address of the PARM\n         LA    R6,1(R4,R2)        Find the end of the PARM\n         CLC   DELIMIT,0(R6)      See if PARM ends with a delimiter\n         BNE   BADPARM1           Bad PARM, go abend\n         LA    R7,PARMADRS        Load address of the PARM addr. table\n         USING PARMS,R7           Point assembler to the PARM table\nLOOP     DS    0H\n         STCM  R5,B'1111',LOC     Save old-data PARM location\n         CLC   DELIMIT,0(R5)      See if PARM has null field\n         BE    BADPARM2           Bad PARM, go abend\n         SLR   R8,R8              Clear a counter register\nLOOP2    DS    0H\n         CLC   DELIMIT,0(R5)      See if a new delimiter\n         BE    NEWDELIM           Delimiter found, go process\n         LA    R8,1(,R8)          Bump counter by one\n         LA    R5,1(,R5)          Bump address by one\n         CR    R5,R6              See if off the end of the PARM\n         BH    BADLOGIC           Off the end of the PARM, go abend\n         B     LOOP2              Keep looking for a new delimiter\nNEWDELIM DS    0H\n         BCTR  R8,0               Drop length by one for 'EX' inst.s\n         STH   R8,LEN             Save the length of the PARM found\n         LA    R7,HALFENTR(,R7)   Bump to new PARM address entry\n         LA    R5,1(,R5)          Point past the delimiter found\n         CR    R5,R6              See if off the end of the PARM\n         BL    LOOP               Not end, go do the next PARM field\n* End of PARM found,  build translate table\n         XC    0(HALFENTR,R7),0(R7) Mark end of the PARM address list\n         XC    TABLE,TABLE        Initialize the translate table\n         LA    R7,PARMADRS        Re-load addr. of the PARM addr. table\nLOOP3    DS    0H              Build translate table\n         ICM   R8,B'1111',LOC     Load the first location\n         BZ    ENDPARM            If none, go to edit data\n         OC    LOC2,LOC2          Insure PARMs are paired\n         BZ    BADPAIRS           PARMs are not paired, go abend\n         SLR   R9,R9              Clear a work register\n         IC    R9,0(,R8)          Get first character\n         STC   R9,TABLE(R9)       Put the first character in the table\n         LA    R7,FULLENTR(,R7)   Bump to the next entry\n         B     LOOP3              Go process the next PARM pair\nENDPARM  DS    0H\n         MVC   SYSUT1(UT1SIZE),DUMUT1  Create DCB for SYSUT1\n         MVC   SYSUT2(UT2SIZE),DUMUT2  Create DCB for SYSUT2\n         MVC   SYSPRINT(DUMPRTSZ),DUMPRINT  Create DCB for SYSPRINT\n         LA    R0,SYSUT1          Load address of SYSUT1 DCB\n*        OPEN  ((0)),MF=(E,OCPLIST)  Open the input file\n         ST    R0,OCPLIST         Store SYSUT1 DCB address for OPEN\n         MVI   OCPLIST,X'80'      Set options to no option ( input )\n         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list\n         SVC   19                 Open the input SYSUT1 file\n         LA    R0,SYSUT2          Load address of SYSUT2 DCB\n*        OPEN  ((0),OUTPUT),MF=(E,OCPLIST)  Open the OUTPUT file\n         ST    R0,OCPLIST         Store SYSUT2 DCB address for OPEN\n         MVI   OCPLIST,X'8F'      Set options to output\n         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list\n         SVC   19                 Open the output SYSUT2 file\n         LA    R11,RECORD+71      Load address of end of record\n         B     GET                Go read the first record\nPUT      DS    0H\n         CLC   RECORD+71(71),RECORD+72  See if 72-80 got overlayed\n         MVC   RECORD+71(9),RECIN+71  Restore cols 72-80\n         BNE   COL72ERR           Overlay column 72-80, go print error\nPUT2     DS    0H\n         PUT   SYSUT2,RECORD      Write a record\nGET      DS    0H\n         GET   SYSUT1,RECIN       Read a record from the input file\n         MVC   RECORD(71),RECIN   Move record to work with\n         MVI   RECORD+71,X'40'    Initialize past record area to spaces\n         MVC   RECORD+72(L'RECORD-72),RECORD+71 Init past rec to spaces\n         LA    R1,RECORD          Load address of the record\nTRT      DS    0H\n         CR    R1,R11             See if past end of record\n         BH    PUT                Must be finished, go write record\n         TRT   0(71,R1),TABLE     Find start of a change string\n         BZ    PUT                If none found, go write record as is\n         LA    R7,PARMADRS        Load address of the PARM addr. table\nLOOP4    DS    0H\n         LH    R2,LEN             Load length of PARM\n         ICM   R3,B'1111',LOC     Load address of the PARM\n         BZ    NOMATCH            No match, go check rest of record\n         EX    R2,CLC             See if match is found\n         BE    REPLACE            Is a match, go replace data\n         LA    R7,FULLENTR(,R7)   Bump to next PARM pair\n         B     LOOP4              Go check if a match\nCLC      CLC   0(0,R1),0(R3)      See if data found\nNOMATCH  DS    0H\n         LA    R1,1(,R1)          Bump past that possible match\n         B     TRT                Go find another possible match\nREPLACE  DS    0H\n         L     R3,LOC2            Load address of new data\n         LH    R4,LEN2            Load length of new data\n         LA    R5,1(R2,R1)        Find location after old data\n         LA    R6,1(R4,R1)        Find location after new data\n* R1=Address to change in record\n* R2=Length of old-data\n* R3=Address of the new data\n* R4=Length of new-data\n* R5=Location after old data\n* R6=Location after new data\n* R7=Parmadrs table location\n         CR    R2,R4              Compare lengths of old and new data\n         BE    EVEN               Length equal, do a direct replacement\n         BL    OLDSHORT           Old data short, go expand record\n         BH    OLDLONG            Old data long, go shrink record\nEVEN     DS    0H\n         EX    R4,MVC             Move the new data in\n         LR    R1,R6              Bump past the area just changed\n         B     TRT                Go find the next field to change\nMVC      MVC   0(0,R1),0(R3)      Overlay the old data with the new\nOLDSHORT DS    0H\n         MVC   WORK,0(R5)         Expand the record\n         MVC   0(71,R6),WORK      Expand the record\n         B     EVEN               Now go process even fields\nOLDLONG  DS    0H\n         MVC   0(71,R6),0(R5)     Shrink the record\n         B     EVEN               Now go process even fields\nEOJ      DS    0H\n         LA    R0,SYSUT2          Load address of SYSUT2 DCB\n*        CLOSE ((0)),MF=(E,OCPLIST)  Close the output file\n         ST    R0,OCPLIST         Store SYSUT2 DCB address for CLOSE\n         MVI   OCPLIST,X'80'      Reset options & set end-of-list\n         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list\n         SVC   20                 Close the output SYSUT2 file\n         LA    R0,SYSUT1          Load address of SYSUT1 DCB\n*        CLOSE ((0)),MF=(E,OCPLIST)  Close the input file\n         ST    R0,OCPLIST         Store SYSUT1 DCB address for CLOSE\n         MVI   OCPLIST,X'80'      Reset options & set end-of-list\n         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list\n         SVC   20                 Close the output SYSUT1 file\n         CLI   RETCODE+3,0        See if SYSPRINT was opened\n         BE    EOJ2               Not opened, bypass CLOSE of SYSPRINT\n         LA    R0,SYSPRINT        Load address of SYSPRINT DCB\n*        CLOSE ((0)),MF=(E,OCPLIST)  Close the SYSPRINT file\n         ST    R0,OCPLIST         Store SYSPRINT DCB address for CLOSE\n         MVI   OCPLIST,X'80'      Reset options & set end-of-list\n         LA    R1,OCPLIST         Load address of OPEN/CLOSE PARM list\n         SVC   20                 Close the SYSPRINT output file\nEOJ2     DS    0H\n         L     R11,RETCODE        Load return code\n         LR    R1,R13             Save workarea address for FREEMAIN\n         L     R13,4(,R13)        Restore the caller's save area addr.\n         FREEMAIN R,LV=WORKSIZE,A=(R1)  Free area pointed to by R1\n         LR    R15,R11            Set return code\n         RETURN (14,12),RC=(15)   Return to caller\n         EJECT ,\nCOL72ERR DS    0H\n         CLI   RETCODE+3,0        See if first error\n         BNE   DETAIL             Not first, only detail lines needed\n         MVI   RETCODE+3,8        Set return code of 8\n         LA    R0,SYSPRINT        Load address of SYSPRINT DCB\n*        OPEN  ((0),OUTPUT),MF=(E,OCPLIST)  Open SYSPRINT as output\n         ST    R0,OCPLIST         Store SYSPRINT DCB address for OPEN\n         MVI   OCPLIST,X'8F'      Set options to output\n         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list\n         SVC   19                 Open SYSPRINT as output\n         MVC   EXTLST(EXTSIZE),DUMEXT  Initialize EXTRACT list\n         LA    R0,TIOT            Load addr of addr of Task I/O Table\n         EXTRACT (0),'S',FIELDS=TIOT,MF=(E,EXTLST) Get Task I/O Table\n         L     R1,TIOT            Load address of Task I/O Table\n         MVC   HEAD1,DUMHEAD1     Initialize report heading 1\n         MVC   HEAD1+06(8),00(R1) Move JOBNAME  into print header\n         MVC   HEAD1+20(8),08(R1) Move STEPNAME into print header\n         MVC   HEAD1+38(8),16(R1) Move PROCSTEP into print header\n         MVI   SPACES,C' '        Initialize spaces to spaces\n         MVC   SPACES+1(L'SPACES-1),SPACES  Init spaces to spaces\n         PUT   SYSPRINT,HEAD1     Write first heading record\n         PUT   SYSPRINT,SPACES    Write a blank line\n         PUT   SYSPRINT,HEAD2     Write second heading record\n         PUT   SYSPRINT,SPACES    Write a blank line\n         MVI   PRNTAREA,C' '      Set line to single space\nDETAIL   DS    0H\n         MVC   PRNTAREA+1(80),RECIN  Move input record for print\n         PUT   SYSPRINT,PRNTAREA  Write output record\n         MVC   PRNTAREA+1(80),RECORD  Move output record for print\n         PUT   SYSPRINT,PRNTAREA  Write output record\n         PUT   SYSPRINT,SPACES    Write a blank line\n         B     PUT2               Return for additional processing\n         SPACE ,\nNOPARM1  DS    0H\n         WTO   'CHANGE71 - NOPARM1 - PARM address is zero',ROUTCDE=11\n         ABEND 1,DUMP             Abend with a dump\n         SPACE ,\nNOPARM2  DS    0H\n         WTO   'CHANGE71 - NOPARM2 - PARM length is zero',ROUTCDE=11\n         ABEND 2,DUMP             Abend with a dump\n         SPACE ,\nTOOSHORT DS    0H\n         WTO   'CHANGE71 - TOOSHORT - PARM less than 5 bytes',         c\n               ROUTCDE=11\n         ABEND 3,DUMP             Abend with a dump\n         SPACE ,\nBADPARM1 DS    0H\n       WTO 'CHANGE71 - BADPARM1 - PARM does not end with a delimiter', c\n               ROUTCDE=11\n         ABEND 4,DUMP             Abend with a dump\n         SPACE ,\nBADPARM2 DS    0H\n         WTO   'CHANGE71 - BADPARM2 - Field in PARM has zero length',  c\n               ROUTCDE=11\n         ABEND 5,DUMP             Abend with a dump\n         SPACE ,\nBADLOGIC DS    0H\n         WTO  'CHANGE71 - BADLOGIC - Process off the end of the PARM', c\n               ROUTCDE=11\n         ABEND 6,DUMP             Abend with a dump\n         SPACE ,\nBADPAIRS DS    0H\n         WTO   'CHANGE71 - BADPAIRS - PARM has odd number of fields',  c\n               ROUTCDE=11\n         ABEND 7,DUMP             Abend with a dump\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Data Control Blocks\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nDUMUT1   DCB   DDNAME=SYSUT1,                                          C\n               DSORG=PS,          Data set Org. Physical Sequencial    C\n               EODAD=EOJ,         End of data address                  C\n               LRECL=80,          Logical RECord Length                C\n               MACRF=GM,          MACRO Ref. GET/move                  C\n               RECFM=FB           Record Format Fixed Blocked\nUT1SIZE  EQU   *-DUMUT1\n         EJECT\nDUMUT2   DCB   DDNAME=SYSUT2,                                          C\n               DSORG=PS,                                               C\n               LRECL=80,                                               C\n               MACRF=PM,          MACRO Ref. PUT/move                  C\n               RECFM=FB\nUT2SIZE  EQU   *-DUMUT2\n         EJECT\nDUMPRINT DCB   DDNAME=SYSPRINT,                                        C\n               DSORG=PS,                                               C\n               LRECL=81,                                               C\n               MACRF=PM,                                               C\n               RECFM=FBA          Record Format Fix Block ASA Cont.Char\nDUMPRTSZ EQU   *-DUMPRINT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Work Area and Constants\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nH5       DC    H'5'               Constant for compare of PARM length\n         SPACE 3\nDUMEXT   EXTRACT *-*,'S',FIELDS=TIOT,MF=L  Dummy EXTRACT parm list\nEXTSIZE  EQU   *-DUMEXT\n         SPACE 3\nDUMHEAD1 DC    CL81'1 JOB-jjjjjjjj STEP-ssssssss PROCSTEP-pppppppp had c\n               an overlay in cols. 72-80'\nHEAD2    DC    CL81'  Before and after images follow:'\n         SPACE 3\n         LTORG ,                  Just in case someone codes sloppy\n         EJECT ,\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      DSECTs\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nPARMS    DSECT ,                  PARM table DSECT\nLEN      DS    XL2                Length of PARM data item\nLOC      DS    XL4                Address of PARM data item\nHALFENTR EQU   *-PARMS            Length of half PARM table entry\nLEN2     DS    XL2                Length of PARM data item\nLOC2     DS    XL4                Address of PARM data item\nFULLENTR EQU   *-PARMS            Length of PARM address table entry\n         SPACE 2\nWORKAREA DSECT ,                  Program workarea DSECT\nSAVEAREA DS    18F                Register save area\n         SPACE 3\nTIOT     DS    F                  Task I/O Table address\n         SPACE 3\nRETCODE  DS    F                  Return code\n         SPACE 3\nOCPLIST  DS    F                  OPEN/CLOSE parameter list\n         SPACE 3\nEXTLST   DS    XL(EXTSIZE)        EXTRACT parameter list\n         SPACE 3\nWORK     DS    XL80               Record work area\n         SPACE 3\nRECORD   DS    XL256              Record I/O area\n         SPACE 3\nTABLE    DS    XL256              Translate table\n         SPACE 3\nRECIN    DS    XL80               Record input area\n         SPACE 3\nDELIMIT  DS    CL1                Input delimiter\n         SPACE 3\nSPACES   DS    CL81               Constant of spaces for compare\n         SPACE 3\nHEAD1    DS    CL81               Error report heading 1\n         SPACE 3\nPRNTAREA DS    CL81               Print area\n         SPACE 3\n         DS    0H                 Force half word alignment\nPARMADRS DS    51XL(HALFENTR)     PARM table\n         DS    0D                 Force double word alignment\nSYSUT1   DS    XL(UT1SIZE)        DCB for SYSUT1\n         SPACE 3\nSYSUT2   DS    XL(UT2SIZE)        DCB for SYSUT2\n         SPACE 3\nSYSPRINT DS    XL(DUMPRTSZ)       DCB for SYSPRINT\n         SPACE 3\nWORKSIZE EQU   *-WORKAREA         Length of workarea DSECT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*      Register Equates\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nR0       EQU   0                  Register equate for register 0\nR1       EQU   1                  Register equate for register 1\nR2       EQU   2                  Register equate for register 2\nR3       EQU   3                  Register equate for register 3\nR4       EQU   4                  Register equate for register 4\nR5       EQU   5                  Register equate for register 5\nR6       EQU   6                  Register equate for register 6\nR7       EQU   7                  Register equate for register 7\nR8       EQU   8                  Register equate for register 8\nR9       EQU   9                  Register equate for register 9\nR10      EQU   10                 Register equate for register 10\nR11      EQU   11                 Register equate for register 11\nR12      EQU   12                 Register equate for register 12\nR13      EQU   13                 Register equate for register 13\nR14      EQU   14                 Register equate for register 14\nR15      EQU   15                 Register equate for register 15\n         SPACE 2\n         END   ,                  The end of the program\n//LKED.SYSLMOD  DD  DSN=xxxx.xxxxLIB,DISP=SHR,SPACE=\n NAME CHANGE71\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHANG71J": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x02O\\x01\\x03\\x02O\\x079\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-24T00:00:00", "modifydate": "2003-01-24T07:39:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWC JOB (xxxxxxxx,xxxx,1439,9999,9999),CHANG71J-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             COND=(0,NE),NOTIFY=SOMITCW\n//CHANGE71 EXEC PGM=CHANGE71,PARM='/&C/B/&S/BP/'\n//SYSUT1   DD  *\n123456789 123456789 123456789 123456789 123456789 123456789 123456789 1C\nOutput should be B BP  Output is &C &S  Number should shift 123456789 1C\n//SYSUT2   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "T": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x02O\\x01\\x03\\x02O\\x079\\x00\\x05\\x00\\x05\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-24T00:00:00", "modifydate": "2003-01-24T07:39:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "SOMITCW"}, "text": "//T       PROC V=                   Vol Ser for HETUTL\n//IEFPROC EXEC PGM=CHANGE71,PARM=(,@@@@@@,&V,)\n//SYSUT1   DD  DISP=SHR,DSN=SYS1.xxxxLIB(TAPE2HET)\n//SYSUT2   DD  SYSOUT=(A,INTRDR),\n//             RECFM=F,LRECL=80,BLKSIZE=80,BUFNO=1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TAPE2HET": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x02O\\x01\\x03\\x02O\\x079\\x00+\\x00+\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-24T00:00:00", "modifydate": "2003-01-24T07:39:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "SOMITCW"}, "text": "//#@@@@@@# JOB (xxxxxxxx,xxxx,1439,9999,9999),TAPE2HET-SOMITCW,\n//             CLASS=x,PERFORM=x,\n//             MSGCLASS=x,NOTIFY=SOMITCW\n//*\n//CHECK   EXEC PGM=IDCAMS               Insure that not a rerun\n//SYSPRINT DD  SYSOUT=*\n   ALLOCATE DATASET('SOMITCW.HET.OS210.V@@@@@@.HET') -\n      UNIT(SYSDA) SPACE(1 1) TRACKS NEW CATALOG\n IF LASTCC EQ 0 THEN -\n   DELETE 'SOMITCW.HET.OS210.V@@@@@@.HET' NONVSAM SCRATCH\n//*\n//         IF  CHECK.RC EQ 0 THEN DO -\n//FIND    EXEC PGM=IEFBR14              Find public volume with space\n//SPACE    DD  UNIT=SYSDA,SPACE=(TRK,3000)\n//HETUTL  EXEC PGM=HETUTL,PARM=ABEND\n//SYSPRINT DD  SYSOUT=*,RECFM=VB,LRECL=137\nINPUT_DDNAME          SYSUT1\nOUTPUT_DDNAME         SYSUT2\nCHUNK_SIZE            65535\nCOMPRESSION_LEVEL     3\nCOMPRESSION_METHOD    1\nCHECK_VOLSER          YES\nDISPLAY_ENDING_STATUS YES\n/*\nVERIFY_COMPRESSION  1\n//SYSUDUMP DD  SYSOUT=*\n//ABNLTERM DD  SYSOUT=*\n//*\n//SYSUT1   DD  DISP=SHR,DSN=SOMITCW.HET.OS210.V-@@@@@@,\n//             UNIT=TAPE,VOL=SER=@@@@@@,LABEL=(,BLP)\n//* Output dataset can be TAPE or DISK\n//* DCB parameters supplied by HETUTL\n//* Output DCB will be RECFM=U LRECL=0 BLKSIZE=32760\n//SYSUT2  DD DISP=(NEW,CATLG,DELETE),DSN=SOMITCW.HET.OS210.V@@@@@@.HET,\n//            VOL=REF=*.FIND.SPACE,\n//            SPACE=(TRK,(1500,1500),RLSE)\n//ERROR   EXEC PGM=IEFBR14,COND=(0,EQ,HETUTL)\n//DELETE   DD DISP=(OLD,DELETE),DSN=SOMITCW.HET.OS210.V@@@@@@.HET\n//        ELSE ,\n//WTORERR EXEC PGM=WTOR\nC       Tape @@@@@@ already loaded?  Cancel JOB or Reply C to end\n//        ENDIF\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WTOR": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x02O\\x01\\x03\\x02O\\x079\\x00\\xad\\x00\\xad\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-24T00:00:00", "modifydate": "2003-01-24T07:39:00", "lines": 173, "newlines": 173, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWW JOB (xxxxxxxx,xxxx,1439,9999,9999),WTOR-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,REGION=6M,  ASM needs REGION if concat.\n//             PERFORM=x,COND=(0,NE)\n//HLASMCL EXEC HLASMCL,PARM.C=(OBJECT,NODECK,TERM,LIST,RENT),\n//             PARM.L=(MAP,LIST,XREF,RENT)\nPASS     TITLE 'Inform the Operator when to Open and Close CICS files'\n         PRINT DATA\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*       This program will display control cards to the operator\n*     to tell him when to open and close CICS files.\n*\n*       A reply is accepted from the operator to indicate when\n*     he has completed the request.  The reply must match the\n*     first eight characters in the last control card.\n*\n*       The control card ddname is SYSIN:\n*       Column 1 thru 8 is the password.\n*       Column 9 thru 72 is the display data.\n*       Column 73 thru 80 is ignored.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nWTOR     CSECT ,\n         SAVE  (14,12),,WTOR.&SYSDATE..&SYSTIME Save caller's registers\n         LR    R12,R15            Set base register\n         USING WTOR,R12           Identify base register\n         GETMAIN R,LV=WORKSIZE    Get storage for work area\n         XC    0(256,R1),0(R1)    Clear the work area size\n         ST    R13,4(,R1)         Save old save area address\n         ST    R1,8(,R13)         Connect pointers\n         LR    R13,R1             Move new save area address to R13\n         USING WORKAREA,R13       Give assembler the work area base\n         MVC   SYSIN,DUMSYSIN     Move the pattern DCB to work area\n         MVC   WTO,DUMWTO         Move the pattern WTO to work area\n         MVC   WTOR1,DUMWTOR      Move the pattern WTOR to work area\n         LA    R1,REPLY           Load address of the reply area\n         ST    R1,WTOR1           Put reply area address in WTOR\n         OI    WTOR1,X'80'        Indicate only one WTOR\n         LA    R1,ECB             Load addr.of the Event Control Block\n         ST    R1,WTOR1+4         Put Event Control Block addr.in WTOR\n         MVI   OPENCLOS,X'80'     Indicate one address to OPEN or CLOSE\n         OPEN  (SYSIN,INPUT),MF=(E,OPENCLOS)  Open input file\n         GET   SYSIN              Get first record\n         MVC   INPUT,0(R1)        Save record for display\n         MVI   SWITCH,1           Indicate at least one record was read\nGET      EQU   *\n         GET   SYSIN              Get input record\n         MVC   WTO+4(64),INPUT+8  Move old record into display\n         MVC   INPUT,0(R1)        Save new input data\n         WTO   MF=(E,WTO)         Display all messages except last\n         B     GET                Get the next control card\n         SPACE 3\nEODAD    EQU   *\n         CLI   SWITCH,1           See if at least one record\n         BNE   ABEND              Abend if no card images accepted\n         OC    INPUT(8),SPACES    Upper case the password from SYSIN\n         MVC   WTOR1+12(64),INPUT+8  Move current message for display\nRETRY    EQU   *\n         MVC   REPLY,SPACES       Clear the reply area\n         WTOR  MF=(E,WTOR1)       Display and Accept the response\n         WAIT  ECB=ECB            Wait for reply\n         MVI   ECB,0              Clear first byte of ECB\n         OC    REPLY,SPACES       Upper case the replied password\n         CLC   REPLY,INPUT        See if the correct password\n         BNE   RETRY              If not correct, re-issue the WTOR\n         SPACE 3\n         CLOSE SYSIN,MF=(E,OPENCLOS)  Close the input file\n         LR    R1,R13             Save work area location for FREEMAIN\n         L     R13,SAVE+4         Restore caller's save area address\n         FREEMAIN RU,LV=WORKSIZE,A=(1)  Free the work area\n         L     R14,12(,R13)       Restore return address\n         LA    R15,0              Set return code to zero\n         LM    R0,R12,20(R13)     Restore caller's registers 0 - 12\n         BR    R14                Return to caller\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  Abend routines\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nABEND    EQU   *\n         MVC   REPLY,SPACES       Clear the reply area\n         MVC   WTOR1+12(64),ABENDMSG  Put abend message in WTOR list\n* 'WTOR - No input cards read, Call Tech Support, Reply \"C\".\n         WTOR  MF=(E,WTOR1)       Display and Accept the response\n         WAIT  ECB=ECB            Wait for reply\n         MVI   ECB,0              Clear first byte of ECB\n         CLC   REPLY,C            See if \"C\" was replied\n         BNE   ABEND              Ask again if reply is not correct\n         ABEND 101                101 because someone's hung up on 101s\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  Constants\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nC        DC    CL8'C '            Constant to check ABEND reply\nSPACES   DC    CL8' '             Constant of spaces\nABENDMSG DC    CL64'WTOR - No input cards read, Call Tech Support, ReplC\n               y \"C\".'            57 byte abend message\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  Pattern control blocks\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nDUMSYSIN DCB   DDNAME=SYSIN,      DD name of SYSIN                     C\n               DSORG=PS,          Data Set Org. is Physical Sequential C\n               RECFM=FB,          Record format is Fixed Blocked       C\n               LRECL=80,          Logical Record Length is 80 bytes    C\n               EODAD=EODAD,       End of data address is EODAD         C\n               MACRF=GL           MACRO reference is GET Locate\nSYSINSIZ EQU   *-DUMSYSIN         Size of DCB\n         SPACE 3\nDUMWTO   WTO   'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxC\n               xxxxxxxxx',ROUTCDE=(1,11),DESC=2,MF=L\nWTOSIZE EQU   *-DUMWTO            Size of the WTO list\n         SPACE 3\nDUMWTOR  WTOR  'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxC\n               xxxxxxxxx',REPLY-REPLY,8,ECB-ECB,ROUTCDE=(1,11),MF=L\nWTORSIZE EQU   *-DUMWTOR          Size of the WTOR list\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  Work area DSECT\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nWORKAREA DSECT ,\nSAVE     DS    18F                Register save area\nECB      DS    XL8                Event Control Block for reply\nOPENCLOS DS    XL8                Double size OPEN/CLOSE Parameter list\nSWITCH   DS    XL1                Good run switch\n* Warning, only the first 256 bytes of the work area are zeroed\n         DS    0D                 Get back to double word alignment\nSYSIN    DS    XL(SYSINSIZ)       Input DCB area\nWTO      DS    XL(WTOSIZE)        Write To Operator MACRO list\nWTOR1    DS    XL(WTORSIZE)       Write To Operator Reply MACRO list\nREPLY    DS    CL8                Reply accepted from the operator\nINPUT    DS    CL80               Input record area\nWORKSIZE EQU   *-WORKAREA         Size of work area DSECT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  Register Equates\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nR0       EQU   0                  Register Equate\nR1       EQU   1                  Register Equate\nR2       EQU   2                  Register Equate\nR3       EQU   3                  Register Equate\nR4       EQU   4                  Register Equate\nR5       EQU   5                  Register Equate\nR6       EQU   6                  Register Equate\nR7       EQU   7                  Register Equate\nR8       EQU   8                  Register Equate\nR9       EQU   9                  Register Equate\nR10      EQU   10                 Register Equate\nR11      EQU   11                 Register Equate\nR12      EQU   12                 Register Equate\nR13      EQU   13                 Register Equate\nR14      EQU   14                 Register Equate\nR15      EQU   15                 Register Equate\n         SPACE 1\n         END   ,\n//L.SYSLMOD DD DSN=xxxx.xxxxLIB,DISP=SHR,SPACE=\n   NAME WTOR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WTORJ": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x02O\\x01\\x03\\x02O\\x079\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-24T00:00:00", "modifydate": "2003-01-24T07:39:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWW JOB (xxxxxxxx,xxxx,1439,9999,9999),WTORJ-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,\n//             PERFORM=xx,COND=(0,NE)\n//WTOR1   EXEC PGM=WTOR\naBcDeFgHiJkLmNoPqRsTuVwXyZ\n  AbCdEfGhIjKlMnOpQrStUvWxYz\nTEsT1   Reply 'TEST1' to get rid of this reply\n//SYSUDUMP DD  SYSOUT=*\n//*\n//WTOR2   EXEC PGM=WTOR\n//SYSIN   DD   *\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT610/FILE610.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT610", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}