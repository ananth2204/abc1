/* REXX    PDSCOPYD   copy a member from one PO dataset to another when
                      the DCBs are incompatible for use by IEBCOPY.

           Written by Frank Clarke, Richmond, 19991005

     Impact Analysis
.    SYSPROC   TRAPOUT
.    (alias)   PDSMOVE

     Modification History
     19991118 fxc upgrade from v.19990923 to v.19991109
     20010320 fxc include seconds in zlmtime and use 4-digit year
     20010509 fxc dsnames could be in quotes...
     20010613 fxc allow PS input or output
     20020314 fxc fixed erroneous return

*/ arg argline
address TSO                            /* REXXSKEL ver.19991109      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /*                           -*/
"NEWSTACK"                             /* isolate all queues         */
                                    if \sw.0error_found then,
call B_ACQUIRE_INPUT                   /*                           -*/
                                    if \sw.0error_found then,
call C_LOAD_OUTPUT                     /*                           -*/
"DELSTACK"                             /* expose all queues          */

if \sw.nested then call DUMP_QUEUE     /*                           -*/
return save_rc                         /*@ PDSCOPYD                  */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   parse value "20"        with,
               save_rc  .
   call AA_KEYWDS                      /*                           -*/
                                    if sw.0error_found then return
   if idsorg = "PO" then,
      dsnimbr = "'"dsni"("memi")'"
   else dsnimbr = "'"dsni"'"
   if monitor then say,
      "Input:" dsnimbr

   if odsorg = "PO" then,
      dsnombr = "'"dsno"("memo")'"
   else dsnombr = "'"dsno"'"
   if monitor then say,
      "Output:" dsnombr

   if Sysdsn(dsnimbr) <> "OK" then,    /* input member must exist    */
      helpmsg = helpmsg,
               "Specified or implied source member must exist. "

   if Sysdsn("'"dsno"'") <> "OK" then, /* output dataset must exist  */
      helpmsg = helpmsg,
               "Specified or implied target dataset must exist. "

   if helpmsg <> "" then call HELP     /* ...and don't come back    -*/

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
AA_KEYWDS:                             /*@                           */
   if branch then call BRANCH
   address TSO

   dsni      = KEYWD("FROMDS")
   dsno      = KEYWD("TODS")
   memi      = KEYWD("FROMMBR")
   memo      = KEYWD("TOMBR")


   if dsni""memi = "" then do
      parse var info source info       /* first token may be source  */
      if Left(source,1) = "'" then do  /* source is quoted           */
         source = Strip(source,,"'")
         sw.0quotedsrc = "1"
         end                           /*                            */

      if Pos( "(",source ) > 0 then do /* there is a banana          */
         parse var source front "(" memi ")" back
         source = front""back          /* reconstruct                */
         end

      if sw.0quotedsrc then ,
         dsni = "'"source"'"
      else ,
         dsni = source
      end


   if dsno""memo = "" then do
      parse var info target info       /* next token may be target  */
      if Left(target,1) = "'" then do  /* target is quoted           */
         target = Strip(target,,"'")
         sw.0quotedtgt = "1"
         end                           /*                            */

      if Pos( "(",target ) > 0 then do /* there is a banana          */
         parse var target front "(" memo ")" back
         target = front""back          /* reconstruct                */
         end

      if sw.0quotedtgt then ,
         dsno = "'"target"'"
      else ,
         dsno = target
      end


   parse value memo  memi  with  memo  .  /* default output to input */
   parse value dsno  dsni  with  dsno  .  /* default output to input */
   call AAA_CHECK_DSORG                /*                           -*/
                                    if sw.0error_found then return
   required_vals = 4                   /* dsni memi dsno memo        */
   if idsorg = "PS" then required_vals = required_vals - 1
   if odsorg = "PS" then required_vals = required_vals - 1
   if Words(dsni dsno memi memo) < required_vals then,
      helpmsg = helpmsg,
               "Invalid parm: too few tokens. "


   if Left(dsni,1) = "'" then,
      dsni = Strip(dsni,,"'")          /* unquoted                   */
   else,
      dsni = Userid()"."dsni           /* fully-qualified            */

   if Left(dsno,1) = "'" then,
      dsno = Strip(dsno,,"'")          /* unquoted                   */
   else,
      dsno = Userid()"."dsno           /* fully-qualified            */

   if dsni""memi = dsno""memo then,
      helpmsg = helpmsg,
               "The source cannot be the same as the target. "

   if helpmsg <> "" then call HELP     /* ...and don't come back    -*/

return                                 /*@ AA_KEYWDS                 */
/*
   Verify the DSORGs for dsni and dsno.
.  ----------------------------------------------------------------- */
AAA_CHECK_DSORG:                       /*@                           */
   if branch then call BRANCH
   address TSO

   msg. = "??"                         /*                            */
   msg.0000 = "OK"                     /* exists                     */
   msg.0005 = "NC"                     /* not catalogued             */
   msg.0009 = "MI"                     /* migrated                   */
   ldrc     = Listdsi(dsni "DIRECTORY NORECALL")
   dsstat = msg.sysreason
   if dsstat = "OK" then,
      parse value sysdsorg with idsorg .

   ldrc     = Listdsi(dsno "DIRECTORY NORECALL")
   dsstat = msg.sysreason
   if dsstat = "OK" then,
      parse value sysdsorg with odsorg .
   else sw.0error_found = '1'          /* blow up                    */

return                                 /*@ AAA_CHECK_DSORG           */
/*
.  ----------------------------------------------------------------- */
B_ACQUIRE_INPUT:                       /*@                           */
   if branch then call BRANCH
   address TSO

   if idsorg = "PO" then,
      call BA_INPUT_STATS              /*                           -*/
                                    if \sw.0error_found then,
   call BB_INPUT_DATA                  /*                           -*/

return                                 /*@ B_ACQUIRE_INPUT           */
/*
   Get the ISPF statistics (if any) for the input member.
.  ----------------------------------------------------------------- */
BA_INPUT_STATS:                        /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   parse value "" with ,
               zlc4date  zlm4date  zlmtime  zlmsec  zlcnorc  zlinorc,
               zlmnorc   zluser    zlvers   zlmod  .

  "LMINIT  DATAID(BASEID) DATASET('"dsni"')"
  if rc > 0 then do
      zerrlm = exec_name "("BRANCH("ID")")",
               zerrlm
      address ISPEXEC "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"; return
     end
  "LMOPEN  DATAID("baseid")"
  if rc > 0 then do
      zerrlm = exec_name "("BRANCH("ID")")",
               zerrlm
      address ISPEXEC "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"
     end
  "LMMFIND DATAID("baseid") MEMBER("memi") STATS(YES)"
  if rc > 0 & \sw.0error_found then do
      zerrlm = exec_name "("BRANCH("ID")")",
               zerrlm
      address ISPEXEC "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"
     end

  if zlmsec <> "" then,
     zlmtime = zlmtime":"zlmsec        /* hh:mm:ss                   */
  parse value zlcnorc zlinorc zlmnorc    with,
              zlcnorc zlinorc zlmnorc .         /* strip             */

  "LMCLOSE DATAID("baseid")"
  "LMFREE  DATAID("baseid")"
   if monitor then say,
      "Available stats:",
               zlc4date  zlm4date  zlmtime  zlcnorc  zlinorc,
               zlmnorc   zluser    zlvers   zlmod

return                                 /*@ BA_INPUT_STATS            */
/*
   Read the input member into the queue.
.  ----------------------------------------------------------------- */
BB_INPUT_DATA:                         /*@                           */
   if branch then call BRANCH
   address TSO

   "ALLOC FI($DTA) DA("dsnimbr") SHR REU"
   "EXECIO      *      DISKR $DTA (FINIS"
   if monitor then say,
      queued() "lines read from" dsnimbr

return                                 /*@ BB_INPUT_DATA             */
/*
.  ----------------------------------------------------------------- */
C_LOAD_OUTPUT:                         /*@                           */
   if branch then call BRANCH
   address TSO

   call CA_OUTPUT_DATA                 /*                           -*/
                                    if \sw.0error_found then,
   if idsorg = "PO" then,
   if odsorg = "PO" then,
      call CB_OUTPUT_STATS             /*                           -*/
   "FREE  FI($DTA)"
   if exec_name = "PDSMOVE" then do
      $mstat = Msg("OFF")
      "DELETE" dsnimbr
      $z$    = Msg($mstat)
      end                              /*                            */
                                    if \sw.0error_found then,
   save_rc = 0

return                                 /*@ C_LOAD_OUTPUT             */
/*
   Write the queued text to the output member.
.  ----------------------------------------------------------------- */
CA_OUTPUT_DATA:                        /*@                           */
   if branch then call BRANCH
   address TSO

   if noupdt then do
      say "Write to" dsnombr "suppressed because of NOUPDT."
      return
      end

   "ALLOC FI($DTA) DA("dsnombr") SHR REU"
   "EXECIO" queued() "DISKW $DTA (FINIS"
   if monitor then say,
      "Stack written to" dsnombr

return                                 /*@ CA_OUTPUT_DATA            */
/*
   Load the ISPF statistics of the input member to the output member.
.  ----------------------------------------------------------------- */
CB_OUTPUT_STATS:                       /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   if zluser = "" then do              /* no stats                   */
      if monitor then say,
         "No stats for member" memi
      return
      end
   "LMINIT    DATAID(BASEID)   DATASET('"dsno"')"
   if monitor then say,
   "LMMSTATS  DATAID("baseid")" "MEMBER("memo")" "USER("zluser")" ,
             "VERSION("zlvers")" "MODLEVEL("zlmod")" ,
             "MODDATE4("zlm4date")" "MODTIME("zlmtime")" ,
             "CREATED4("zlc4date")" "CURSIZE("zlcnorc")" ,
             "INITSIZE("zlinorc")" "MODRECS("zlmnorc")"
   if noupdt then do
      say "Stats update of" dsnombr "suppressed because of NOUPDT."
      end
   else,
   "LMMSTATS  DATAID("baseid")" "MEMBER("memo")" "USER("zluser")" ,
             "VERSION("zlvers")" "MODLEVEL("zlmod")" ,
             "MODDATE4("zlm4date")" "MODTIME("zlmtime")" ,
             "CREATED4("zlc4date")" "CURSIZE("zlcnorc")" ,
             "INITSIZE("zlinorc")" "MODRECS("zlmnorc")"
   if rc > 0 then do
      zerrsm = "Stats Error"
      zerrlm = "Unable to modify to the ISPF Stats. RC = "rc
      "SETMSG MSG(ISRZ002)"
      sw.0error_found = "1"
      end                              /* rc > 0                     */
   else save_rc = 0

   "LMFREE     DATAID("baseid")"

return                                 /*@ CB_OUTPUT_STATS           */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then do ; say helpmsg; say ""; end
if argline <> "" then do ; say argline; say ""; end
ex_nam = Left(exec_name,8)             /* predictable size           */

say "  "ex_nam"      copy a member from one PO dataset to another when "
say "                the DCBs are incompatible for use by IEBCOPY.     "
say "                                                                  "
say "  Syntax:   "ex_nam"  <FROMDS  dsni>                    (Required)"
say "                      <FROMMBR mbri>                    (Required)"
say "                      <TODS    dsno>                              "
say "                      <TOMBR   mbro>                              "
say "                                                                  "
say "            A minimum of three of these parameters is required,   "
say "            enough to specify or imply both a source and a target."
say "            Missing output parameters will default to the input   "
say "            value.  The source and target may not be identical.   "
say "                                                                  "
say "            <dsni>    identifies the source dataset (TSO format)  "
say "                                                                  "
say "            <mbri>    identifies the source membername            "
say "                                                                  "
say "            <dsno>    identifies the target dataset (TSO format)  "
say "                                                                  "
say "            <mbro>    identifies the target membername            "
pull
"CLEAR"
say "   Debugging tools provided include:                              "
say "                                                                  "
say "        MONITOR:  displays key information throughout processing. "
say "                  Displays most paragraph names upon entry.       "
say "                                                                  "
say "        NOUPDT:   by-pass all update logic.                       "
say "                                                                  "
say "        BRANCH:   show all paragraph entries.                     "
say "                                                                  "
say "        TRACE tv: will use value following TRACE to place the     "
say "                  execution in REXX TRACE Mode.                   "
say "                                                                  "
say "                                                                  "
say "   Debugging tools can be accessed in the following manner:       "
say "                                                                  "
say "        TSO "ex_nam"  parameters     ((  debug-options            "
say "                                                                  "
say "   For example:                                                   "
say "                                                                  "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                         "
address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
       "Begin Stacks" tk_init_stacks , /* Stacks present at start    */
       "Stacks to DUMP" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/*
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+1)        /* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say sourceline(ssii) ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   parse value KEYWD("TRACE")  "O"    with   tv  .
   tk_globalvars = "tk_globalvars exec_name tv helpmsg sw. zerrhm",
                   "zerralrm zerrsm zerrlm tk_init_stacks branch",
                   "monitor noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
