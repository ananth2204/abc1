/* REXX    HSMLIST    A dialog to ease the use of HSM's HLIST
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|

           Written by Frank Clarke 20010608

     Impact Analysis
.    SYSPROC   TRAPOUT

     Modification History
     20010620 fxc zap the table row on 'delete';
     20011002 fxc fix scroll-amt field;
     20020102 fxc add HELP panel; log table-load; WIDEHELP;

*/ arg argline
address ISPEXEC                        /* REXXSKEL ver.20010524      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */
   "CONTROL ERRORS RETURN"             /* I'll handle my own         */

call A_INIT                            /*                           -*/
call B_GET_HLIST                       /*                           -*/
                                    if \sw.0halt_process then,
call C_TABLE_OPS                       /*                           -*/
                                    if \sw.0halt_process then,
call D_HSM_OPS                         /*                            */
call Z_DROP_LIBDEFS                    /*                           -*/
call ZB_SAVELOG                        /*                           -*/

if \sw.nested then call DUMP_QUEUE     /*                           -*/
exit                                   /*@ HSMLIST                   */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   call A0_SETUP_LOG                   /*                           -*/
   call DEIMBED                        /*                           -*/
   call AS_SETUP_LIBDEFS               /*                           -*/
   parse value "0 0 0 0 0 0 0 0 0" with ,
         req.  ,
         .

   parse value "" with ,
         dslevel  odsn ,
         dsname  backdt  backtm  gen ,
         .
   parse var info   dslevel  info

return                                 /*@ A_INIT                    */
/*
   Allocate the LOG dataset
.  ----------------------------------------------------------------- */
A0_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   parse value "0" with,
               log#    log.
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Right(sssss,5,0)               /* X1423722 ? */
   vb4k.0    = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM(V B) LRECL(4096) BLKSIZE(0)"
   vb4k.1    = "SHR"                   /* if it already exists...    */
   logdsn = "@@LOG."exec_name"."subid".LIST"

   call ZL_LOGMSG("Log started by" Userid()  yyyymmdd  hhmmss)
   call ZL_LOGMSG("Arg:" argline)

return                                 /*@ A0_SETUP_LOG              */
/*
   Attach the extracted ISPF material
.  ----------------------------------------------------------------- */
AS_SETUP_LIBDEFS:                      /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      $ddn   = $ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("$ddn") STACK"
   end
   ddnlist = ddnlist dd

return                                 /*@ AS_SETUP_LIBDEFS          */
/*
   HLIST the requested datasets
.  ----------------------------------------------------------------- */
B_GET_HLIST:                           /*@                           */
   if branch then call BRANCH
   address TSO

   if dslevel = ""  then,
      call BA_GET_PARMS                /*                           -*/
                                    if sw.0halt_process then return
   parse value odsn "TEMP.SYSPRINT"   with   odsn  .

   "HLIST LEVEL("dslevel") BOTH ODS("odsn")"

return                                 /*@ B_GET_HLIST               */
/*
   Caller didn't pass a parm.  Get the catalog level to be HLISTed
.  ----------------------------------------------------------------- */
BA_GET_PARMS:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "DISPLAY PANEL(HLPARM)"
   if rc > 0 then sw.0halt_process = "1"

return                                 /*@ BA_GET_PARMS              */
/*
.  ----------------------------------------------------------------- */
C_TABLE_OPS:                           /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call CB_LOAD_TABLE                  /*                           -*/
   call CD_DISPLAY                     /*                           -*/

return                                 /*@ C_TABLE_OPS               */
/*
   Create the table and load the HLIST data to it.
.  ----------------------------------------------------------------- */
CB_LOAD_TABLE:                         /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBCREATE  HSML  KEYS(DSNAME GEN) NAMES(TYPEMORB BACKDT BACKTM VER)",
            "NOWRITE REPLACE"

   address TSO
   "ALLOC FI($TMP) DA("odsn") SHR REU"
   "NEWSTACK"
   "EXECIO * DISKR $TMP (FINIS"
   "FREE  FI($TMP)"
   $z = Msg("OFF")
   "DELETE TEMP.SYSPRINT"
   $z = Msg($z)
   call ZL_LOGMSG(queued() "lines on SYSPRINT")

   address ISPEXEC
   typemorb = "M"                      /* migrated                   */
   do queued()
      pull 2 line
      if Pos("BACKUP DATASET-",line) > 0 then leave
      if Pos("LAST REF MIGRAT",line) > 0 then sw.0ready = "1"
      if Pos("MIGRATED"       ,line) > 0 then iterate
      if Pos("CONTROL DATASET",line) > 0 then iterate
      if \sw.0ready then iterate
      if Left(line,12) = "" then iterate

      /* process this line ------------------------                  */
      parse var line dsname vol refdt backdt .
      "TBADD  HSML"
      call ZL_LOGMSG("M" dsname vol ref backdt)
   end                                 /* queued                     */

   typemorb = "B"                      /* backed-up                  */
   dsname = ""
   do queued()
      pull 2 line
      if Word(line,1) = "DSNAME" then do
         parse var line . . dsname .
         iterate ;   end
      if dsname = "" then iterate
      if Pos("BACKUP VERSION ",line) > 0 then iterate
      if Pos("VOLUME  VOLUME ",line) > 0 then iterate
      if line = "" then,               /* empty line                 */
         if gen = "" then iterate      /* skip                       */
      else do
         parse value "" with gen dsname
         iterate ; end
      /* process this line ------------------------                  */
      parse var line 67 backdt . 77 backtm . 92 gen . 98 ver .
      "TBADD  HSML"
      call ZL_LOGMSG("B" dsname gen ver backdt backtm)
   end                                 /* queued                     */
   "TBSORT  HSML  FIELDS(DSNAME,C,A,GEN,N,D)"

   address TSO "DELSTACK"

return                                 /*@ CB_LOAD_TABLE             */
/*
   Show the list of datasets and let the caller select datasets for
   HRECALL, HRECOVER, HDELETE, or HBDELETE.
.  ----------------------------------------------------------------- */
CD_DISPLAY:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   $tn$  = "HSML"
   do forever
      "TBDISPL" $tn$ "PANEL(HLDETL)"
      if rc > 4 then leave             /* PF3 ?                      */
      do ztdsels
         call CDP_POST_REQUEST         /*                           -*/
         if ztdsels = 1 then,          /* never do the last one      */
            ztdsels = 0
         else "TBDISPL" $tn$           /* next row                   */
      end                              /* ztdsels                    */
      action = ''                      /* clear for re-display       */
   end                                 /* forever                    */

return                                 /*@ CD_DISPLAY                */
/*
   Format the command which will be issued to HSM.
.  ----------------------------------------------------------------- */
CDP_POST_REQUEST:                      /*@                           */
   if branch then call BRANCH
   address TSO

   if action = "D" then do             /* Delete                     */
      if typemorb = "B" then verb = "HBDELETE '"dsname"' VERSIONS("ver")"
                        else verb = "HDELETE  '"dsname"'"
      address ISPEXEC "TBDELETE" $tn$  /* zap the row                */
      end                              /* Delete                     */
                   else,               /* not DELETE                 */
      if typemorb = "B" then verb = CDPA_NEW_OR_REP()
                        else verb = "HRECALL  '"dsname"'"

   if verb = "" then return            /* no action requested        */

   call ZL_LOGMSG(verb)

   Parse value req.0+1 verb           with,
               $z$     req.$z$     1  req.0  .

return                                 /*@ CDP_POST_REQUEST          */
/*
   HRECOVER this dataset, but first... does it already exist?  If so,
   ask the caller whether to replace the existing copy or give it a
   new name.
.  ----------------------------------------------------------------- */
CDPA_NEW_OR_REP:                       /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   verb = ""
   ldrc = LISTDSI("'"dsname"' NORECALL")
   if sysreason > "0" then do          /* dataset missing            */
      verb = "HRECOVER '"dsname"' VERSION("ver") REPLACE"
      return(verb)
      end

   "DISPLAY PANEL(HLVERF)"             /* sets REPLACE or NEWDSN     */
   if rc > 0 then return()             /* PF 3 ?                     */

   if newdsn <> "" then,
      verb = "HRECOVER '"dsname"' VERSION("ver") NEWNAME('"newdsn"')"
                   else,
   if repl   <> "" then,
      verb = "HRECOVER '"dsname"' VERSION("ver") REPLACE"

return(verb)                           /*@ CDPA_NEW_OR_REP           */
/*
   Issue all the commands collected for the actions requested.
.  ----------------------------------------------------------------- */
D_HSM_OPS:                             /*@                           */
   if branch then call BRANCH
   address TSO

   do dx = 1 to req.0                  /* every request              */
      parse var req.dx verb
      (verb)                           /* execute the command        */
   end                                 /* dx                         */

return                                 /*@ D_HSM_OPS                 */
/*
   Disconnect the ISPF material and FREE the files.
.  ----------------------------------------------------------------- */
Z_DROP_LIBDEFS:                        /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      $ddn   = $ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("$ddn")"
   end
   ddnlist = ddnlist dd

return                                 /*@ Z_DROP_LIBDEFS            */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
   Parse out the embedded components at the back of the source code.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  $ddn.  daid.

   address TSO

   fb80po.0  = "NEW UNIT(VIO) SPACE(5 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   parse value ""   with  ddnlist $ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            $ddn = ddn || Random(999)
            $ddn.ddn = $ddn
            address TSO "ALLOC FI("$ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("$ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   "ALLOC FI($LOG) DA("logdsn") REU" vb4k.0
   "EXECIO" log# "DISKW $LOG (STEM LOG. FINIS"
   "FREE  FI($LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#
   rc = Trace("O")
   address TSO

   parse arg msgtext
   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then do ; say helpmsg; say ""; end
ex_nam = Left(exec_name,8)             /* predictable size           */

say "  "ex_nam"      eases the burden of manipulating backed-up and migrated   "
say "                versions of datasets.  It produces a scrollable list of   "
say "                the datasets for the specified <dslevel> and allows the   "
say "                caller to delete, recall, and recover datasets.  For any  "
say "                shown dataset, entering a 'D' next to the dataset name    "
say "                causes that backed-up or migrated dataset to be deleted.  "
say "                Any other character will cause the dataset to be recovered"
say "                or recalled as appropriate.                               "
say "                                                                          "
say "  Syntax:   "ex_nam"  <dslevel>                                           "
say "                                                                          "
say "            <dslevel> identifies the catalog level for which an HLIST is  "
say "                      to be done.  The datasets referenced will be used to"
say "                      populate the display.                               "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK                                      "
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  displays key information throughout processing.         "
say "                                                                          "
say "        NOUPDT:   by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
       "Begin Stacks" tk_init_stacks , /* Stacks present at start    */
       "Stacks to DUMP" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/*
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+1)        /* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say sourceline(ssii) ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   parse value KEYWD("TRACE")  "O"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*
)))PLIB HLPARM
)ATTR
  % TYPE(TEXT)   INTENS(HIGH) SKIP(ON)
  + TYPE(TEXT)   INTENS(LOW) SKIP(ON)
  _ TYPE(INPUT)  INTENS(LOW)
  @ TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)
  ! TYPE(INPUT)  INTENS(NON)
)BODY EXPAND(¦¦)
@¦-¦% Verify Parameters for HLIST @¦-¦
%COMMAND ===>_ZCMD
                                                             %SCROLL ===>_ZAMT+
+
         Catalog Level ===>_dslevel
+
)INIT
)PROC
   VER (&DSLEVEL,NB,NAME)
)END
)))PLIB HLDETL
)ATTR
  % TYPE(TEXT)   INTENS(HIGH) SKIP(ON)
  + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)
  _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)
  ! TYPE(OUTPUT) INTENS(HIGH) SKIP(ON)
  @ TYPE(OUTPUT) INTENS(LOW)  SKIP(ON)
)BODY EXPAND(¦¦)
%¦-¦ Available Migrated/Backed-up Datasets +¦-¦
%Command ===>_ZCMD
                                                             %Scroll ===>_ZAMT+
+                                                            Back-Up
+V Gen M/B Dataset Name (Base)                             Date     Time
)MODEL
_z!gen+!z+!dsname                                        !backdt  !backtm
)INIT
  .ZVARS = '(ACTION TYPEMORB)'
  .HELP = HLDETLH
)REINIT
)PROC
)END
)))PLIB HLDETLH
)ATTR
  % TYPE(TEXT)   INTENS(HIGH)  SKIP(ON)
  + TYPE(TEXT)   INTENS(LOW)   SKIP(ON)
  _ TYPE(INPUT)  INTENS(HIGH)
  ! TYPE(OUTPUT) INTENS(HIGH)  SKIP(ON)
  @ TYPE(OUTPUT) INTENS(LOW)   SKIP(ON)
)BODY EXPAND(¦¦)
%TUTORIAL ¦-¦ Available Migrated/Backed-up Datasets ....  ¦-¦ TUTORIAL
%Next Selection ===>_ZCMD

+
    The datasets available for HRECALL, HRECOVER, HDELETE, and HBDELETE are
    shown in a scrollable list.

    You may enter D next to any line to cause the shown dataset to be HDELETEd
    or HBDELETEd as appropriate.

    Any other selection causes the dataset to be HRECALLed or HRECOVERed as
    appropriate.
)PROC
)END
)))PLIB HLVERF
)ATTR
  % TYPE(TEXT)   INTENS(HIGH) SKIP(ON)
  + TYPE(TEXT)   INTENS(LOW) SKIP(ON)
  _ TYPE(INPUT)  INTENS(LOW) CAPS(ON)
  @ TYPE(TEXT)   INTENS(HIGH) COLOR(YELLOW)
  { TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(¦¦)
@¦-¦% HRECOVER Options @¦-¦
%COMMAND ===>_ZCMD
                                                             %SCROLL ===>_ZAMT+
+
+  Dataset{dsname
+  exists.  Specify a new dataset name for the HRECOVER operation,
+  or indicate REPLACE below.
+
+  New DSN ===>_newdsn
+
+  REPLACE ===>_Z+
+
)INIT
   .ZVARS = '(REPL)'
   &NEWDSN = &Z
   &REPL = &Z
)PROC
   IF (VER(&NEWDSN,DSNAME))
   ELSE
      &ZERRHM = 'ISR00000'
      &ZERRSM = 'NEWDSN invalid'
      &ZERRLM = 'NEWDSN must be a valid DSNAME.'
      &ZERRALRM = 'YES'
      .MSG = ISRZ002
      EXIT

   IF (&REPL EQ &Z)
      IF (&NEWDSN EQ &Z)
         &ZERRHM = 'ISR00000'
         &ZERRSM = 'Nothing selected'
         &ZERRLM = 'One and only one field may be filled.  When REPLACE +
                    is empty, NEW DSN may not be blank.'
         &ZERRALRM = 'YES'
         .MSG = ISRZ002
   ELSE
      IF (&NEWDSN NE &Z)
         &ZERRHM = 'ISR00000'
         &ZERRSM = 'Too much data'
         &ZERRLM = 'One and only one field may be filled.  When REPLACE +
                    is used, NEW DSN must be blank.'
         &ZERRALRM = 'YES'
         .MSG = ISRZ002
)END
*/
