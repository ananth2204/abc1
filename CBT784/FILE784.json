{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012805000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE784.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE784.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x04'", "DS1TRBAL": "b'\\xc6J'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05V\\x00\\x01\\x05V\\x00\\x06\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x07\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x137\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:37:07", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  784\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE784\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,806 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/01/13    13:37:06    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00D\\x01\\x08\\x13\\x0f\\x01\\x13\\x00\\x1f\\x13$\\x00\\xf2\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2008-05-09T00:00:00", "modifydate": "2013-01-01T13:24:44", "lines": 242, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": " Author: John A. McKown\n Email: joarmc@swbell.net\n Support: None guaranteed, but I would like \"bug\" reports.\n Latest email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>\n\n This contains two different implementations of a Web page which allows a\n user to get data set information similar to ISPF option 3.4.\n\n Both implementations use AJAX to update the Web page \"in place\". The\n first is the simpler because the CGI actually creates the HTML for the\n Web page and the Javascript on the Web page simply puts that HTML on the\n page. The second is more complex in that the CGI actually creates the\n text form of a JSON object.  The Javascript on the Web page then\n instatiates this object which it uses to dynamically create the HTML to\n display. The second form is more powerful in that the JSON object can\n be used in other ways by other AJAX code.\n\n The RECEIVE member in this PDS shows the general way to recreate the\n z/OS dataset which needs to be copied into a UNIX file in order to be\n unwound. This dataset is a \"pax\" archive which contains both the HTML\n and REXX (CGI) code needed to implement this. When unwound, the pax\n archive will create a \"dslist\" and \"dslist-bin\" subdirectory in the\n current subdirectory. Before unwinding the pax archive, you should \"cd\"\n to the HTTPD's \"root\" directory. This is usually\n /usr/lpp/internet/server_root.\n\n You need to update the HTTPD server's configuration file with code\n similar to the following:\n\nProtection dslisting  {\n        ServerId        Use_Mainframe_ID\n        AuthType        Basic\n        PasswdFile      %%SAF%%\n        UserID          %%CLIENT%%\n        Mask            All\n}\n\nProtect /dslist/* dslisting\nProtect /dslist-bin/* dslisting\n\nExec  /dslist-bin/*  /usr/lpp/internet/server_root/dslist-bin/*\nPass  /dslist/*      /usr/lpp/internet/server_root/dslist/*\n\n The Protection directive above requires that the Web user present a\n valid RACF userid and password in order to access the site. It may be\n possible to remove this so that anyone can do this function without any\n validation. I do not regard this as a good idea and have not tested\n whether it works or not. It may or may not depending on the RACF\n security at your installation. In particular, it depends on the access\n lists for the datasets referenced in the TSO/REXX program. If you do\n not require the \"login\", the CGI will run with a default RACF id which\n may not have READ access to the required datasets.  Even more\n restrictions as to which RACF users can use this function can be\n implemented by using UNIX acls (Access Control Lists) on the UNIX\n subdirectories containing the UNIX/REXX CGI program and the HTML web\n page.  Discussing how to do this is beyond the scope of this\n documentation.\n\n As mentioned before, there are two versions of this code. The first is\n the HTML version. It has three elements. One is a TSO/REXX program,\n DSLIST4, which must reside in a generally accessible REXX program\n library. The second is a UNIX/REXX CGI program, dslist-html.rexx, which\n resides in the \"dslist-bin/\" subdirectory beneath your HTTPD server's\n \"root\" directory.  The third is an HTML file, dslist-html.html, which\n resides in the \"dslist/\" subdirectory beneath your HTTPD server's\n \"root\" directory.\n\n The second is the more advanced JSON version. It also has three\n elements. The first is the TSO/REXX program, DSLIST0, which must reside\n in a generally accessible REXX program library. The second is a\n UNIX/REXX CGI program, dslist-json.rexx, which resides in the\n \"dslist-bin/\" subdirectory beneath your HTTPD server's \"root\"\n directory.  The third is an HTML file, dslist-json.html, which resides\n in the \"dslib/\" subdirectory beneath your HTTPD server's \"root\"\n directory.\n\n The JSON version is more advanced because it could be used as the basis\n for implemetning a SOAP service to deliver dataset information to other\n platforms.  JSON is well supported by code written in JavaScript,\n python, and Perl. I am not sure, but it is likely supported by Ruby as\n well. I do not know which, if any, Microsoft technologies support JSON.\n If you want more information, try your favorite Internet search engine.\n\n As an example of returning a JSON object to something other than a\n browser, the \"wget\" command could be used something like:\n\n wget --http-user=user --http-password=password \\\n   'http:/server/dslist-bin/dslist-json.rexx?index=SYS1.M*LIB' \\\n   -O dslist.json\n\n The above command, when customized, should return a JSON text object\n with the requested information into the file \"dslist.json\".\n\n Required customization:\n\n You must customize the \"dslist-html.rexx\" and \"dslist-json.rexx\"\n programs to refer to the dataset containing the DSLIST4 and DSLIST0\n programs respectively. As distributed, the dataset name in both of\n these programs is SYS1.LI.CLIST.CNTL which is our general purpose\n TSO/REXX program library. You can place the TSO/REXX programs in any\n library you want, but the users of the function must have at least READ\n access to them. These libraries do not need to be placed in any TSO\n procedure.\n\n You may need to customize the DSLIST0 and DSLIST4 programs if your shop\n does not name its ISPF libraries the way that we do. I use the names as\n distributed by IBM. That is: ISP.SISPnnnn .\n\n If you do not want to place the UNIX code in the \"dslist\" and\n \"dslist-bin\" subdirectories, then you must change the\n \"dslist-html.html\" and \"dslist-json.html\" files to refer to the\n location where you placed them. You will also need to change the\n example HTTPD configuration entries.\n\n\n Logic overview of the HTML version.\n\n The Web page displays some help text as well as a data entry field in\n which the user enters the name of the dataset to be looked up or a\n dataset name pattern. There is a drop down box which contains 4 values,\n only one of which may be selected. This is equivalent to ISPF option\n 3.4's \"Volume\", \"Space\", \"Attribute\", or \"Total\" option. There is also\n a single button labelled \"Perform Lookup\" which invokes the AJAX\n process to do the lookup. Pressing the \"Perform Lookup\" button invokes\n the JavaScript routine \"sendLevel()\". This routine first removes the\n previous output from the Web page, then sets up the AJAX environment,\n issues a GET request to the HTTPD server to invoke the UNIX/REXX\n routine \"dslist-bin/dslist2-html.rexx\".  When the HTTPD server returns\n the information requested, the \"parseGetResponse()\" Javascript function\n is invoked. This function updates the Web page with the information\n requested. It does this my simply using the data returned to if from\n the dslist2-html.rexx program as-is with no processing. This is\n possible because the DSLIST4 returns the required HTML directly.\n\n The UNIX/REXX program \"dslist-bin/dslist2-html.rexx\" first decodes its\n input using the \"cgiparse\" routine supplied by IBM for this purpose.\n This creates two REXX variables: FORM_LEVEL which is the value to be\n looked up, and FORM_OPTION which is the output desired. It then invokes\n the DSLIST4 TSO/REXX routine with the \"address TSO\" function. This\n particular line needs to be customized in order to specify the TSO/REXX\n library which contains the DSLIST4 program. The UNIX program traps the\n output of DSLIST4 by use of the \"OUTTRAP\" function.  Unfortuntely, the\n \"address TSO\" function ends up putting out messages of its own. In\n order to filter those out, the UNIX/REXX program ignores all lines\n which do not begin with a less than sign.\n\n The TSO/REXX program \"DSLIST4\" first determines if it is running under\n ISPF. If it is not, then it allocates the ISPF libraries (which may\n need customization at your shop) and reinvokes itself with an ISPSTART\n command.  Once in ISPF, the program uses the LMDINIT and LMDLIST\n functions to retrieve the requested data. The program uses the SAY verb\n to print its output to the dslist2-html.rexx program.  Due to a\n restriction on the length of a line, there are multiple SAY verbs for\n each logical line of output. This does not cause any problem with the\n Web page because the HTML renderer ignores end of line characters. The\n DSLIST4 actually creates the HTML for the table which is then sent to\n the Web page's Javascript \"parseGetResponse\" function.\n\n If you update the DSLIST4 program by adding or changing any SAY\n instruction, it is critical that the first character of the line start\n with a < character. This is because dslist2-html.rexx will not return\n any line not starting with a < to the Web page. Also the < character\n must be part of the valid HTML response.\n\n The only customization which is absolutely required to change the name\n of the TSO/REXX program library which is in the \"dslist2-html.rexx\"\n program. The DSLIST4 determines where it is executing from and so does\n not \"hard code\" any TSO/REXX program library. It may be necessary to\n customise the DSLIST4 program if your ISPF libraries are not the same\n as mine.  Please look in the DSLIST4 source code. This customization\n should be simple. My ISPF libraries all start with ISP.SISP*\n\n\n\n Logic overview of the JSON version.\n\n The Web page displays some help text as well as a data entry field in\n which the user enters the name of the dataset to be looked up or a\n dataset name pattern. There is a drop down box which contains 4 values,\n only one of which may be selected. This is equivalent to ISPF option\n 3.4's \"Volume\", \"Space\", \"Attribute\", or \"Total\" option. There is also a\n single button labelled \"Perform Lookup\" which invokes the AJAX process\n to do the lookup. Pressing the \"Perform Lookup\" button invokes the\n JavaScript routine \"sendLevel()\". This routine first removes the\n previous output from the Web page, then sets up the AJAX environment,\n issues a GET request to the HTTPD server to invoke the UNIX/REXX\n routine \"dslist-bin/dslist-json.rexx\".   When the HTTPD server returns\n the information requested, the \"parseGetResponse()\" Javascript function\n is invoked. This function updates the Web page with the information\n requested.\n\n The \"parseGetResponse()\" function in this version is much more\n complicated than in the HTML version. That is because it must first\n convert the text JSON object returned to it by the dslist-json.rexx\n program into an actual JavaScript object. This is done rather simply\n using the \"eval\" JavaScript function. Note that this function can only\n be used when the JSON object coming from the server can be 100%\n trusted. In this particular case, that is true.  For information coming\n from other sites or even from an internal site which you do not\n control, this may not be true. Caution is recommended.\n\n The parseGetResponse() function uses the information in the JSON\n object, along with the \"option\" speicified by the user (Volume, Space,\n Attr, or Total) to create the HTML which is then used to dynamically\n update the Web page.\n\n The UNIX/REXX program \"dslist-bin/dslist-json.rexx\" first decodes its\n input using the \"cgiparse\" routine supplied by IBM for this purpose.\n This creates two REXX variables: FORM_LEVEL which is the value to be\n looked up, and FORM_OPTION which is the output desired. FORM_OPTION is\n not actually used by this routine at present, but it is passed to the\n DSLIST0 program.  It then invokes the DSLIST0 TSO/REXX routine with the\n \"address TSO\" function. This particular line needs to be customized in\n order to specify the TSO/REXX library which contains the DSLIST0\n program. The UNIX program traps the output of DSLIST0 by use of the\n \"OUTTRAP\" function.  Unfortuntely, the \"address TSO\" function ends up\n putting out messages of its own. In order to filter those out, the\n UNIX/REXX program ignores all lines which do not begin with a less than\n sign. It also strip off those leading < characters. This last step is\n unlike the DSLIST4 program, which leaves the leading < characters\n intact.\n\n The TSO/REXX program \"DSLIST0\" first determines if it is running under\n ISPF. If it is not, then it allocates the ISPF libraries (which may\n need customization at your shop) and then reinvokes itself with an\n ISPSTART command.  Once in ISPF, the program uses the LMDINIT and\n LMDLIST functions to retrieve the requested data. The program uses the\n SAY verb to print its output to the dslist-json.rexx program. Due to a\n restriction on the length of a line, there are multiple SAY verbs for\n each logical line of output. The DSLIST0 program creates a text JSON\n object which is passed to the \"dslist-json.rexx\" program which does\n some post processing (removing leading < characters) and then sends\n them on to the Web browser.\n\n The only customization which is absolutely required to change the name\n of the TSO/REXX program library which is in the \"dslist-json.rexx\"\n program. The DSLIST0 determines where it is executing from and so does\n not \"hard code\" any TSO/REXX program library. It may be necessary to\n customise the DSLIST0 program if your ISPF libraries are not the same\n as mine.  Please look in the DSLIST0 source code. This customization\n should be simple. My ISPF libraries all start with ISP.SISP*\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$INST": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x08\\x13?\\x01\\x08\\x13?\\x143\\x00:\\x008\\x00\\x00\\xd1\\xd4\\xc3\\xd2\\xd6\\xe6\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2008-05-12T00:00:00", "modifydate": "2008-05-12T14:33:47", "lines": 58, "newlines": 56, "modlines": 0, "user": "JMCKOWN"}, "text": " The RECEIVE member of this library needs to be customized and then run\n to create the \"pax\" archive containing the UNIX files needed.  The main\n customizatin of the RECEIVE member is to update the followin SET\n JCL commands.\n\n THISDSN needs to point to this dataset.\n REXXLIB needs to point to the library which will contain the\n    DSLIST0 and DSLIST4 REXX programs\n UNIXDIR needs to point to a UNIX subdirectory into which the pax\n    archive will be placed. This can be your HOME directory.\n\n Once you are successfully run the above, you need to enter the\n following two UNIX commands from a UNIX shell or batch job.\n\n cd /usr/lpp/internet/server_root\n pax -v -pe -rf /???/dslist.pax\n\n Note that the \"cd\" command really needs to set your working directory\n to your HTTPD server's \"root\" directory. The directory in the example\n is the default as supplied by IBM. You will probably either need to be\n \"root\" or have ALTER access to the SUPERUSER.FILESYS profile in the\n UNIXPRIV class.\n\n The \"pax\" command must have the ??? replaced with the subdirectory\n which contains the \"dslist.pax\" file. This could be your HOME directory\n or some other directory which you chose in the RECEIVE job.\n\n Update the HTTPD server's configuration file with the following lines:\n\nProtection dslisting  {\n        ServerId        Use_Mainframe_ID\n        AuthType        Basic\n        PasswdFile      %%SAF%%\n        UserID          %%CLIENT%%\n        Mask            All\n}\n\nProtect /dslist/* dslisting\nProtect /dslist-bin/* dslisting\n\nExec  /dslist-bin/*  /usr/lpp/internet/server_root/dslist-bin/*\nPass  /dslist/*      /usr/lpp/internet/server_root/dslist/*\n\n Normally the HTTPD server's configuration file is /etc/httpd.conf This\n assumes that you want the users of this function to be forced to login\n using their RACF userid and password. If you do not want to force a\n login, simply do not include the two \"Protect\" lines.  Note that I have\n not tested this and do not know if it will work.  I think that would\n depend on the dataset access profiles in RACF.\n\n Once you have successfully done all of the above steps, you must tell\n the HTTPD server to refresh its configuration. You can do this by\n either stopping and restarting it, or via a console command:\n\n F IMWEBSRV,APPL=-RESTART\n\n This assumes that you are running the HTTPD server with the job name of\n IMWEBSRV. If you call it something else, use that name instead.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE1": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00D\\x01\\x08\\x13O\\x01\\x13\\x00\\x1f\\x136\\x00\\x1a\\x00\\x19\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-05-13T00:00:00", "modifydate": "2013-01-01T13:36:44", "lines": 26, "newlines": 25, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    Another CBTtape submission: dataset lookup in a Web page\nFrom:       \"McKown, John\" <John.Mckown@healthmarkets.com>\nDate:       Mon, 12 May 2008 14:36:28 -0500\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\nLatest email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>\n\nThis is another submission for you to look at. What this does is display\na Web page via IBM's HTTPD server on z/OS. The user can fill in a\ndataset name or pattern as they would in ISPF option 3.4 and get a\nresponse. The input and output from this function looks very similar to\nISPF option 3.4.\n\nThis PDS contains two REXX programs, an installation document, a\ndocumentation document, an XMITted pax file, and a JCL file to help with\nthe installation.\n\nI hope that I've gotten everything \"ship shape\" for distribution.\n\n--\nJohn McKown\nSenior Systems Programmer\nHealthMarkets\nKeeping the Promise of Affordable Coverage\nAdministrative Services Group\nInformation Technology\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE784": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x01\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x137\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:37:01", "lines": 26, "newlines": 26, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 784 is from John McKown and contains two implementations  *   FILE 784\n//*           of a web page under z/OS Unix System Services which   *   FILE 784\n//*           allow the user to obtain ISPF 3.4-like information    *   FILE 784\n//*           about datasets.                                       *   FILE 784\n//*                                                                 *   FILE 784\n//*     Author : John A. McKown                                     *   FILE 784\n//*     Email  : \"McKown, John\" <john.archie.mckown@GMAIL.com>      *   FILE 784\n//*     Support: None guaranteed, but I would like \"bug\"            *   FILE 784\n//*              reports.                                           *   FILE 784\n//*                                                                 *   FILE 784\n//*     This contains two different implementations of a Web        *   FILE 784\n//*     page which allows a user to get data set information        *   FILE 784\n//*     similar to ISPF option 3.4.                                 *   FILE 784\n//*                                                                 *   FILE 784\n//*     Both implementations use AJAX to update the Web page        *   FILE 784\n//*     \"in place\".  The first is the simpler because the CGI       *   FILE 784\n//*     actually creates the HTML for the Web page and the          *   FILE 784\n//*     Javascript on the Web page simply puts that HTML on         *   FILE 784\n//*     the page. The second is more complex in that the CGI        *   FILE 784\n//*     actually creates the text form of a JSON object.  The       *   FILE 784\n//*     Javascript on the Web page then initatiates this            *   FILE 784\n//*     object which it uses to dynamically create the HTML to      *   FILE 784\n//*     display. The second form is more powerful in that the       *   FILE 784\n//*     JSON object can be used in other ways by other AJAX         *   FILE 784\n//*     code.                                                       *   FILE 784\n//*                                                                 *   FILE 784\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSLIST0": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x000\\x01\\x08\\x13\\x0f\\x01\\x08\\x13\\x1f\\x13\"\\x00P\\x00N\\x00\\x00\\xd1\\xd4\\xc3\\xd2\\xd6\\xe6\\xd5@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2008-05-09T00:00:00", "modifydate": "2008-05-10T13:22:30", "lines": 80, "newlines": 78, "modlines": 0, "user": "JMCKOWN"}, "text": "/* REXX */\n/* customize this by changing the dataset names as required\n   for your shop. */\nPARSE UPPER ARG ARGS\nPARSE SOURCE TSO WHICH EXEC DDN DSN EXECO ENV ANAME TOKEN\nACTIVE=SYSVAR('SYSISPF')\nIF ACTIVE <> 'ACTIVE' THEN DO\n   /* DO ALLOCATIONS */\n   \"ALLOC DDN(ISPPROF) \",\n   \" LRECL(80) RECFM(F B) BLKSIZE(3120) \",\n   \" NEW DELETE SPACE(10 10) DIR(100) TRACKS\"\n   \"ALLOC DDN(ISPLOG) DUMMY RECFM(F B A) \",\n   \" LRECL(121) BLKSIZE(121)\"\n   \"ALLOC DDN(ISPLIST) DUMMY RECFM(F B A) \",\n   \" LRECL(121) BLKSIZE(121)\"\n   \"ALLOC DDN(ISPPLIB) DSN('ISP.SISPPENU') SHR\"\n   \"ALLOC DDN(ISPTLIB) DSN('ISP.SISPTENU') SHR\"\n   \"ALLOC DDN(ISPMLIB) DSN('ISP.SISPMENU') SHR\"\n   \"ALLOC DDN(ISPSLIB) DSN('ISP.SISPSLIB') SHR\"\n   \"ALLOC DDN(SYSPROC) DSN('ISP.SISPCLIB') SHR\"\n   \"ALLOC DDN(SYSEXEC) DSN('ISP.SISPEXEC'\",\n     \"'\"DSN\"'\",\n   \") SHR\"\n   \"ISPSTART CMD(%\"EXEC ARGS\")\"\n   RETURN\nEND\nIF WORDS(ARGS) > 0\nTHEN LEVEL=WORD(ARGS,1)\nELSE DO\n     LEVEL=SYSVAR(\"SYSPREF\")\n     IF LEVEL=\"\" THEN LEVEL=SYSVAR(\"SYSUID\")\n     END\nADDRESS ISPEXEC\n\"LMDINIT LISTID(LISTID) LEVEL(\"LEVEL\")\"\n   /*\n   NOTE that all the following SAYs have the line start with a\n   less than sign. This is because the ADDRESS TSO ends up piping\n   junk on some lines of the output being returned.\n   By subsetting the returned lines to only those which have a <\n   as the first character, the junk lines can be ignored.\n   Of course, the caller must strip off the leading < character\n   */\nDSN=' '\nsay '<{\"header\": {\"dsn\": \"DSN\",\"vol\": \"Volume\",\"dev\": \"Device\",'\nsay '<\"dsorg\": \"Dsorg\",\"tracks\": \"Tracks\",\"created\": \"Created\",'\nsay '<\"expires\": \"Expires\",\"extents\": \"Extents\",\"dsntype\": \"DSN type\",'\nsay '<\"units\": \"Space units\",'\nsay '<\"migrated\": \"Migrated\",\"multivol\": \"MULTIVOL\",\"cat\": \"CAT\",'\nsay '<\"recfm\": \"RECFM\",\"lrecl\": \"LRECL\",\"blksize\": \"BLKSIZE\",'\nsay '<\"used\": \"USED%\",\"lastref\": \"Referred\"'\nsay '<},'\nSAY '<\"dsnlist\": \u00dd'\ncomma=''\nDO FOREVER\n   \"LMDLIST LISTID(\"LISTID\") OPTION(LIST) DATASET(DSN) STATS(YES)\"\n   IF RC <> 0 THEN LEAVE\n   SAY '<'comma'{'\n   comma=','\n   SAY       '<\"dsn\": \"'DSN'\",'\n   SAY space('<\"vol\": \"'ZDLVOL'\",',0)\n   SAY space('<\"dev\": \"'ZDLDEV'\",',0)\n   SAY space('<\"dsorg\": \"'ZDLDSORG'\",',0)\n   SAY space('<\"tracks\": \"'ZDLSIZEX'\",',0)\n   SAY space('<\"created\": \"'ZDLCDATE'\",',0)\n   say space('<\"expires\": \"'ZDLEDATE'\",',0)\n   say space('<\"extents\": \"'ZDLEXTX'\",',0)\n   say space('<\"dsntype\": \"'ZDLDSNTP'\",',0)\n   say space('<\"units\": \"'ZDLSPACU'\",',0)\n   SAY space('<\"migrated\": \"'ZDLMIGR'\",',0)\n   SAY space('<\"multivol\": \"'ZDLMVOL'\",',0)\n   SAY space('<\"cat\": \"'ZDLCATNM'\",',0)\n   SAY space('<\"recfm\": \"'ZDLRECFM'\",',0)\n   SAY space('<\"lrecl\": \"'ZDLLRECL'\",',0)\n   SAY space('<\"blksize\": \"'ZDLBLKSZ'\",',0)\n   SAY space('<\"used\": \"'ZDLUSED'\",',0)\n   SAY space('<\"lastref\": \"'ZDLRDATE'\"',0)\n   SAY '<}'\nEND\nsay \"<\u00a8}\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSLIST4": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x008\\x01\\x08\\x12\\x9f\\x01\\x08\\x13\\x1f\\x13\"\\x00k\\x00g\\x00\\x00\\xd1\\xd4\\xc3\\xd2\\xd6\\xe6\\xd5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2008-05-08T00:00:00", "modifydate": "2008-05-10T13:22:38", "lines": 107, "newlines": 103, "modlines": 0, "user": "JMCKOWN"}, "text": "/* REXX */\n/* customize this by changing the dataset names as required\n   for your shop. */\nPARSE UPPER ARG ARGS\nPARSE SOURCE TSO WHICH EXEC DDN DSN EXECO ENV ANAME TOKEN\nACTIVE=SYSVAR('SYSISPF')\nIF ACTIVE <> 'ACTIVE' THEN DO\n   /* DO ALLOCATIONS */\n   \"ALLOC DDN(ISPPROF) \",\n   \" LRECL(80) RECFM(F B) BLKSIZE(3120) \",\n   \" NEW DELETE SPACE(10 10) DIR(100) TRACKS\"\n   \"ALLOC DDN(ISPLOG) DUMMY RECFM(F B A) \",\n   \" LRECL(121) BLKSIZE(121)\"\n   \"ALLOC DDN(ISPLIST) DUMMY RECFM(F B A) \",\n   \" LRECL(121) BLKSIZE(121)\"\n   \"ALLOC DDN(ISPPLIB) DSN('ISP.SISPPENU') SHR\"\n   \"ALLOC DDN(ISPTLIB) DSN('ISP.SISPTENU') SHR\"\n   \"ALLOC DDN(ISPMLIB) DSN('ISP.SISPMENU') SHR\"\n   \"ALLOC DDN(ISPSLIB) DSN('ISP.SISPSLIB') SHR\"\n   \"ALLOC DDN(SYSPROC) DSN('ISP.SISPCLIB') SHR\"\n   \"ALLOC DDN(SYSEXEC) DSN('ISP.SISPEXEC'\",\n   \" '\"DSN\"' \",\n   \") SHR\"\n   \"ISPSTART CMD(%\"EXEC ARGS\")\"\n   RETURN\nEND\nIF WORDS(ARGS) > 0\nTHEN LEVEL=WORD(ARGS,1)\nELSE DO\n     LEVEL=SYSVAR(\"SYSPREF\")\n     IF LEVEL=\"\" THEN LEVEL=SYSVAR(\"SYSUID\")\n     END\nIF WORDS(ARGS) > 1\nTHEN OPTION=LEFT(WORD(ARGS,2),1)\nELSE OPTION='V'\nUPPER OPTION\nADDRESS ISPEXEC\n\"LMDINIT LISTID(LISTID) LEVEL(\"LEVEL\")\"\nsay \"<html>\"\nDSN=' '\nDO FOREVER\n   \"LMDLIST LISTID(\"LISTID\") OPTION(LIST) DATASET(DSN) STATS(YES)\"\n   IF RC <> 0 THEN LEAVE\n   SELECT\n   WHEN OPTION='V' THEN DO\n      SAY \"<tr><td align=left>\"LEFT(DSN,44)\"</td>\"||,\n          \"<td>\"ZDLDEV\"</td>\"||,\n          \"<td>\"ZDLVOL\"</td>\"||,\n          \"</TR>\"\n   END\n   WHEN OPTION='S' THEN DO\n      SAY \"<tr><td align=left>\"LEFT(DSN,44)\"</td>\"||,\n          \"<td>\"ZDLSIZEX\"</td>\"||, /* tracks */\n          \"<td>\"ZDLUSED\"</td>\"||, /* used */\n          \"<td>\"ZDLEXTX\"</td>\"||, /* XT */\n          \"<td>\"ZDLDEV\"</td>\"||, /* device */\n          \"</tr>\"\n   END                     d\n   WHEN OPTION='A' THEN DO\n      SAY \"<tr><td align=left>\"LEFT(DSN,44)\"</td>\"||,\n          \"<td>\"ZDLDSORG\"</td>\"||, /* dsorg */\n          \"<td>\"ZDLRECFM\"</td>\"||, /* recfm */\n          \"<td>\"ZDLLRECL\"</td>\"||, /* lrecl */\n          \"<td>\"ZDLBLKSZ\"</td>\"||, /* blksize */\n          \"</tr>\"\n   END\n   WHEN OPTION='T' THEN DO\n      SAY \"<tr><td align=left>\"LEFT(DSN,44)\"</td>\"||,\n          \"<td>\"ZDLVOL\"</td>\"||,\n          \"<td>\"ZDLSIZEX\"</td>\"||, /* tracks */\n          \"<td>\"ZDLUSED\"</td>\"||, /* used */\n          \"<td>\"ZDLEXTX\"</td>\"    /* XT */\n      SAY \"<td>\"ZDLDEV\"</td>\"||,  /* DEVICE */\n          \"<td>\"ZDLDSORG\"</td>\"||, /* dsorg */\n          \"<td>\"ZDLRECFM\"</td>\"||, /* recfm */\n          \"<td>\"ZDLLRECL\"</td>\"    /* lrecl */\n      SAY \"<td>\"ZDLBLKSZ\"</td>\"||, /* blksize */\n          \"<td>\"ZDLCDATE\"</td>\"||, /* created */\n          \"<td>\"ZDLEDATE\"</td>\"||, /* expires */\n          \"<td>\"ZDLRDATE\"</td>\"||, /* referred */\n          \"</tr>\"\n   END\n   OTHERWISE DO\n      SAY \"<tr>Invalid OPTION=\"OPTION\" encountered. Logic error.\"||,\n          \" Contact the Web Master!</tr>\"\n   END\nend /* of select */\nsay \"</html>\"\n   /*\n   SAY '{'\n   SAY space('\"dsn\":\"'DSN'\",',0)\n   SAY space('\"vol\":\"'ZDLVOL'\",',0)\n   SAY space('\"dev\":\"'ZDLDEV'\",',0)\n   SAY space('\"dsorg\":\"'ZDLDSORG'\",',0)\n   SAY space('\"tracks\":\"'ZDLSIZEX'\",',0)\n   SAY space('\"created\":\"'ZDLCDATE'\",',0)\n   SAY space('\"migrated\":\"'ZDLMIGR'\",',0)\n   SAY space('\"multivol\":\"'ZDLMVOL'\",',0)\n   SAY space('\"cat\":\"'ZDLCATNM'\",',0)\n   SAY space('\"recfm\":\"'ZDLRECFM'\",',0)\n   SAY space('\"lrecl\":\"'ZDLLRECL'\",',0)\n   SAY space('\"blksize\":\"'ZDLBLKSZ'\",',0)\n   SAY space('\"used\":\"'ZDLEXT'\",',0)\n   SAY space('\"lastref\":\"'ZDLRDATE'\"',0)\n   SAY '}'\n   */\nEND\n", "mimetype": "text/html", "datatype": "ebcdic", "extension": ".html"}, "PAXFILE": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00Q\\x01\\x08\\x12\\x9f\\x01\\x08\\x13?\\x12$\\x04\\xbd\\x04\\xbd\\x00\\x00\\xd1\\xd4\\xc3\\xd2\\xd6\\xe6\\xd5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-05-08T00:00:00", "modifydate": "2008-05-12T12:24:51", "lines": 1213, "newlines": 1213, "modlines": 0, "user": "JMCKOWN"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "RECEIVE": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x03\\x01\\x08\\x13\\x0f\\x01\\x08\\x13\\x7f\\x16\\x01\\x00*\\x00\\x1f\\x00\\x00\\xd1\\xd4\\xc3\\xd2\\xd6\\xe6\\xd5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-05-09T00:00:00", "modifydate": "2008-05-16T16:01:03", "lines": 42, "newlines": 31, "modlines": 0, "user": "JMCKOWN"}, "text": "//         JOB (H00000I),'JOBCARD',\n//         CLASS=?,\n//         MSGCLASS=?,\n//         NOTIFY=&SYSUID\n//*\n// SET THISDSN=...\n// SET REXXLIB=...\n// SET UNIXDIR='...' (no trailing /)\n//*\n//RECEIVE EXEC PGM=IKJEFT01,REGION=6M\n//SYSTSPRT DD SYSOUT=*\n//INFILE DD DISP=SHR,DSN=&THISDSN(PAXFILE)\n//SYSTSIN DD *\n RECEIVE INFILE(INFILE)\n  RESTORE DSN(DSLIST.PAX)\n/*\n//*\n//IEBCOPY EXEC PGM=IEBCOPY\n//SYSPRINT DD SYSOUT=*\n//I DD DISP=SHR,DSN=&THISDSN\n//O DD DISP=SHR,DSN=&REXXLIB\n//SYSIN DD *\n COPY I=I,O=O\n/*\n//OCOPY    EXEC  PGM=IKJEFT01,\n//             REGION=4096K,\n//             DYNAMNBR=40\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\n OCOPY INDD(I1) OUTDD(O1) BINARY -\n    PATHOPTS(USE)\n//O1 DD PATH='&UNIXDIR/dslist.pax',\n// PATHMODE=(SIRWXU,SIRWXG,SIROTH),\n// PATHOPTS=(OWRONLY,OCREAT)\n//I1 DD DSN=&SYSUID..DSLIST.PAX,\n// DISP=SHR\n//\n//* ONCE THE ABOVE PAX FILE IS IN THE UNIX SUBDIRECTORY\n//* YOU MUST RESTORE IT USING THE UNIX pax COMMAND\n//*  cd /usr/lpp/internet/server_root\n//*  pax -v -pe -rf /???/dslist.pax\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT784/FILE784.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT784", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}