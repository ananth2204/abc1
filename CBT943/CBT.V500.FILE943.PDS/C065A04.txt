Speed up those CICS COBOL compiles

Last week I decided to see what could be done to reduce the
elapsed time required to compile command-level COBOL
CICS programs.  The environment is VSE/SP 3.1 running on a
4381 with 3380 disk drives.

The compiler work files were implicitly-defined VSAM SAM
files.  The compile procedure was nearly identical to the
example found in the CICS Installation and Operations Guide.
SYSPCH was assigned to disk and the pre-processor executed.
The SYSPCH file was closed, opened as SYSIPT to FCOBOL,
and closed.  LNKEDT was then executed.

The procedure required dedicated disk space for each partition
in which the compile procedure was executed for the
SYSPCH/SYSIPT file.  Compile time was about 15 minutes
for a program containing 6650 source statements.  The
approach to reducing elapsed time was simple P reduce I/O.

FCOBOL has a default work file block size of 512 bytes.  This
can be changed by coding the BUF operand on the CBL card.
I added BUF=8185 to the default CBL card in library member
CBLOPTNS.C, which applies to all compiles for both batch
and CICS programs.  This raised FCOBOL's block size to
8185 and the VSAM CI size to 8192, reducing I/Os
considerably.

Next, I eliminated what I considered unnecessary CBL options
which take extra time to process.  Since the batch partitions are
all 4 megabytes with a default size of 2 megabytes, I removed
the SIZE parameter from the EXEC FCOBOL statement to
ensure an adequate partition size for the larger work file buffers
and to provide FCOBOL with additional memory work space.
The effect was immediate and dramatic.  Batch program
compile time was reduced by about 60 percent and CICS
program compile time was reduced by about 20 percent.

The source statements which were output from the pre-
processor to disk for input to FCOBOL were unblocked card
image records.  I felt that significant performance gains could
be achieved if I could reduce the impact of this I/O.  POWER
facilitates DISP=I on the * $$ PUN card.  When a POWER job
ends, any cards punched to the PUN queue with DISP=I are
immediately transferred to the RDR queue for input as another
job to the class specified on the PUN card.  Using this facility
allowed the elimination of the disk SYSPCH/SYSIPT files
entirely.  The pre-processor output is spooled to the POWER
punch queue and read by FCOBOL from the POWER reader
queue.

The CICS COBOL compile procedure now looks like the
example given below.  Although two jobs are now executed
instead of one, elapsed time for the same compile was reduced
to 23 seconds for the pre-processor and 1 minute 50 seconds
for the FCOBOL compile and LNKEDT.  That's 2 minutes 13
seconds to achieve what used to take 15 minutes.

Next I changed the compiler work files and SYSLNK from
implicit to explicit VSAM SAM files with a CI size of 8192.
This reduced the FCOBOL compile and LNKEDT time from 1
minute 50 seconds to 1 minute 32 seconds.  Placing the work
files on different volumes produced only a 2-second
improvement.  Compile time for a small batch program was
reduced from 1 minute 8 seconds to 50 seconds by this change.
Note that the improvement was about the same: 18 seconds for
the large and the small compile.

The net effect of these changes was to reduce the time required
to pre-process, compile, and link edit a 6650 statement
COBOL program from 15 minutes to less than 2 minutes.

With this new compile procedure, it is necessary to punch JCL
before and after the pre-processor output in order to build the
complete step two job stream which compiles and link edits the
program.  The Assembler can be used to punch these cards:
REPRO, OBJMAINT, or other programs could also be used.  I
have included the source code for the program I use P
JHBCDCDO.

JHBCDCDO copies card image records from SYSIPT to
SYSPCH.  Columns 2 to 80 from the input cards are punched
into columns 1 to 79 of the output cards.  The '|' punched in
column 1 of the statements in the procedure shown below is
just an eyecatcher to identify JCL to be punched for subsequent
execution.  You might think there is a mistake in the
JHBCDCDO source code since it is not obvious how the data
gets shifted one column.  When using DTFDI for SYSIPT, the
80-column image of each card read is placed in columns 1 to
80 of the input area.  Any stacker select character, as might be
found if the input records had been punched to SYSPCH on
disk, is truncated.  When using DTFDI for SYSPCH, column 1
of the output area is assumed to be a stacker select character
and columns 2 to 81 are assumed to be the data area.  Thus,
data is input to columns 1 to 80 of AREA and output from
columns 2 to 81 of AREA.


JHBCDCDO SOURCE CODE

         TITLE 'JHBCDCDO COPY SYSIPT TO SYSPCH WITH ONE BYTE OFFSET'
JHBCDCDO CSECT
         BALR  2,0
         USING *,2
         OPEN  IJSYSIN,IJSYSPH
LOOP     GET   IJSYSIN
         MVI   AREA,C' '      SET STACKER SELECT TO SPACE
         PUT   IJSYSPH
         B     LOOP
EOF      CLOSE IJSYSIN        DO NOT CLOSE IJSYSPH
         EOJ
IJSYSIN  DTFDI DEVADDR=SYSIPT,IOAREA1=AREA,RECSIZE=81,EOFADDR=EOF
IJSYSPH  DTFDI DEVADDR=SYSPCH,IOAREA1=AREA,RECSIZE=81
AREA     DC    CL81' '
         LTORG
         END


JCL FOR COMPILE AND LINK

* $$ JOB JNM=jobname,CLASS=R
* $$ LST CLASS=A,DISP=H
* $$ PUN CLASS=R,DISP=I
// JOB jobname STEP 1
// EXEC JHBCDCDO
|* $$ LST CLASS=A,DISP=H
|// JOB jobname STEP 2
|// LIBDEF PHASE,CATALOG=lib.sublib
|// OPTION CATAL
|   PHASE phasename,*
|// EXEC FCOBOL
/*
// EXEC DFHECP1$
   CBL XOPTS(CICS,DLI,LANGLVL(2),NOSEQ,NOSOURCE)
        source code goes here
/*
// EXEC JHBCDCDO
|/*
|// EXEC LNKEDT
|/&
/*
/&
* $$ EOJ


James E Holler
Little Blue Systems (USA)


