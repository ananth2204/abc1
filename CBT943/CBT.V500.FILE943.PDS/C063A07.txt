Converting from CA-ACF2 to RACF

INTRODUCTION

We are a site running an IBM 3090, with MVS/ESA and CICS
2.1.  We have successfully converted our security control
software from CA-ACF2 to RACF recently.  The
implementation of the user interface is different between CA-
ACF2 and RACF.  As such, problems surfaced during the
conversion period.  This article discusses the various issues
which occurred during the conversion phase and the methods to
overcome the problems.


THE PROBLEMS

The first problem we encountered was the trigger of the display
of the CICS sign-on panel when a user entered a CICS
application log-on request at VTAM.

In the CA-ACF2 years, the CA-ACF2/CICS sign-on panel
would be displayed automatically once a user entered a CICS
application log-on request at VTAM as CA-ACF2 replaced the
CICS good-morning transaction CSGM to point to its own
sign-on/off program to display the sign-on panel during the first
invocation by the user.

The RACF/CICS sign-on process, however, is different from
that of CA-ACF2.  The IBM-delivered good morning
transaction CSGM will only display a panel with the big words
'CICS/MVS'.  In order to initiate a RACF/CICS sign-on
process, the user has to clear this panel and enter the
RACF/CICS sign-on transaction code CESN (IBM delivered)
explicitly to trigger the display of the RACF/CICS sign-on
panel.  The sign-on transaction CESN cannot be defined as the
good-morning transaction in the SIT as CICS will perform an
ATI-type start for this transaction.  The first thing an ATI-
started transaction will do is to display a map whereas the IBM
delivered sign-on program will try to perform a receive on first
entry.  The net result is the user has to enter more key strokes
to get the CICS sign-on panel after converting from CA-ACF2
to RACF.

The second problem we encountered was the use of CICS
internal security (namely, the transaction security TRANSEC
parameter in the PCT) and the CICS operator-id (3-byte only)
by some application systems.

Both the CICS internal security key values and the operator-id
are contained in the SNT.  Every user must have a
corresponding entry in the SNT for RACF to prime the related
fields in various CICS control blocks.  We can choose to abort
the use of the SNT by just creating a default entry in the SNT.
RACF will use the values contained in this default entry to
prime fields in the CICS control blocks for every signed-on
user.  In this case, there is no way to set up the operator-id.
On the other hand, we decided not to change the application
systems from using the 3-byte operator-id to the 8-byte user-id
as the effort involved would have been enormous.

The user can elect not to perform a CICS sign-on in both CA-
ACF2 or RACF by just clearing the sign-on panel.  The
process will create a security exposure to the CICS systems and
we wanted to enforce a 'must sign-on' policy on all CICS
regions.


THE SOLUTION

I decided to develop a tailor-made RACF/CICS sign-on
program to solve the above three problems simultaneously and
the following program was written accordingly.

The solution to the first problem is to GETMAIN a piece of
storage and set it up as a TIOA and chain its address into the
TCTTE before linking to the delivered RACF/CICS sign-on/off
program, DFHSNP.  As such, DFHSNP will be 'cheated' and
will display the sign-on panel instead of performing a terminal
receive as its first action.  This procedure will achieve the same
effect as the CA-ACF2/CICS sign-on process of displaying the
sign-on panel on first entry.

The first section of the attached program will perform these
functions.  It will GETMAIN some storage, prime the fields in
the DFHTIOA control block, move the pseudo-terminal input
message to the GETMAINed area and chain this piece of
storage to TCTTEDA.

The solution to the second problem is to prime the TCTTEOI
field (operator-id field in TCTTE) with a 3-byte operator-id,
and the TCTTESK field (the security key field in the TCTTE)
and the SNNTSK field (the operator security key field in the
SNT) with a matching value to the internal security specified in
the TRANSEC field of the PCT.

We decided to make use of the RACF installation data field to
store these values for each individual user.  These values will
be preceded by some pre-defined keywords, such as
'/CICSID=xxx/CICSKEY= 000003/'.  Upon signing on to the
CICS region, the tailored sign-on program will locate the
contents of the installation data field pointed to by the ACEE as
shown in Figure 1.  These values will then be used to prime the
contents of the TCTTEOI, TCTTESK, and SNNTSK fields
correspondingly.

The ACEE control block normally resides above the 16-
megabyte line within the CICS address space.  As such, the
program must work in 31-bit addressing mode before it can
access the contents of this control block.

The solution to the second problem mentioned is to check for
the success of the RACF/CICS sign-on performed by the user.
If the user should fail three times in performing the sign-on,
he/she should then be logged off from that CICS region
automatically.

After a successful RACF/CICS sign-on, there will be a control
block named ACEE built to represent that particular terminal
user.  A pointer to this control block will be stored inside the
SNTTE.  This pointer field is used by the tailored sign-on
program to check for a successful RACF/CICS sign-on.  A
counter is used to keep track on the number of unsuccessful
sign-ons performed and, when the design threshold is reached,
a RACF sign-off will be performed for the terminal user
automatically.  The logic employed to perform the sign-off is
based on the same rationale used previously, ie GETMAIN
some storage to build the TIOA, chain it to the TCTTE, set up
the contents in the pseudo TIOA for the log-off process, then
transfer control to DFHSNP to perform the sign-off process.
As such, a 'must sign-on' policy can be enforced.


TSPCESN SOURCE CODE

         TITLE 'TSPCESN - RACF SIGNON, PRIME TCTUA'
         P49TCTUA                INSTALLATION-SUPPLIED DSECT
FDFLTDS  DSECT
FDFLT    DS    0CL380            HOGAN DEFAULT FILE RECORD
FUID     DS    CL3                OPERATOR ID
FFIL1    DS    XL1                FILLER 1
FUREC    DS    XL74               IMAGE OF TCTUA
FFIL2    DS    XL22               FILLER 2
FFIL     DS    XL4                FILLER 3 TO ALIGN TO FULL WORD
P#KEY    DS    0PL8               CICS KEY IN PACKED FORMAT
P#FL     DS    PL4
P#CICSSK DS    PL4
ABENDCDE DS    CL4                ABEND CODE
ERRCNT   DS    HL2                ERROR COUNT
TMPADDR1 DS    A
TMPADDR2 DS    A
TEMPACEE DS    CL254
FLEN     EQU   *-FDFLT
         COPY DFHAID
         COPY  DFHCSADS
         DFHTCA CICSYST=YES
TCTTEAR  EQU   R08
         DFHTCTZE CICSYST=YES
TIOABAR  EQU   R07
         COPY  DFHTIOA
DATA     DS    CL32
         DFHSNT TYPE=DSECT
TSPTSGM  DFHEIENT CODEREG=12,DATAREG=13,EIBREG=11
         EXEC CICS HANDLE CONDITION                                    X
               NOTFND(LOADKEY)                                         X
               ILLOGIC(ABDILLOG)                                       X
               ERROR(ABDERROR)                                         X
               IOERR(ABDIOERR)
         XR    R06,R06                ZERO ERROR COUNT
**   SET UP TIOA FOR DFHSNP
GETTIOA  DS    0H
         EXEC CICS GETMAIN SET(R07) LENGTH(40) INITIMG(X'40')
         USING DFHTIOA,R07
         S     R07,=F'8'              POINT TO START OF TIOA
         MVC   TIOATDL,LENGTH         SET DATA LENGTH
         MVI   TIOAWCI,X'00'          CLEAR WC INDICATOR
         MVI   TIOACLCR,X'00'         CLEAR WCC
         MVC   DATA(30),CESN          MOVE DUMMY TRAN CODE
         EXEC CICS ADDRESS CSA(R03)
         USING DFHCSADS,R03
         L     R10,CSACDTA            GET A(TCA)
         USING DFHTCADS,R10
         DROP  R03
         L     TCTTEAR,TCAFCAAA       GET A(TCTTE)
         USING DFHTCTTE,TCTTEAR
         ST    R07,TCTTEDA            SET TIOA ADDRESS IN TCTTE
         L     R03,TCASYAA            GET TCT SYSTEM AREA ADDRESS
         USING DFHSYTCA,R03
         MVC   TCAKCOID(4),=C'CESN'   SET TCA TRANID TO CESN
**   LINK TO RACF SIGNON AND CHECK AID
         EXEC CICS LINK PROGRAM('DFHSNP')
**   CHECK IF USER PRESSED 'CLEAR' KEY .........
         CLI   TCTTEAID,DFHCLEAR        CLEAR KEY PRESSED ?
         BE    PGMEND                      YES THEN END PGM
*                                          NO  THEN CONTINUE
         L     R10,TCTTESNT             GET A(SNTTE)
         USING DFHSNNT,R10
         L     R04,SNNTUBLK             GET A(ACEE)
         USING ACEE,R04
         LTR   R04,R04                  RACF SIGNON OK ?
         BNZ   CONT                       YES THEN CONTINUE
*                                         NO  THEN DELAY 1 SEC
         C     R06,=F'2'                ERROR COUNT = 3 ?
         BE    LOGOFF                     YES THEN LOGOFF
         LA    R06,1(R06)                 NO  THEN INCR ERRCNT BY 1
         EXEC CICS DELAY INTERVAL(1)
         B     GETTIOA                        AND LOOP BACK
**   GETMAIN SOME STORAGE FOR FILE WORK AREA AND WORKING STORAGE
CONT     DS    0H
         EXEC CICS GETMAIN                                             X
               LENGTH (K380)                                           X
               SET (R09)                                               X
               INITIMG (X'00')
         USING FDFLTDS,R09
         LA    R09,0(,R09)              CLEAR FIRST BYTE OF REG
* SET MODE 24 TO 31
         XR    R06,R06
         L     R06,=A(X'80000000'+LABELA)    SET LEFTMOST BIT ON
         BSM   0,R06                     BR & SET MODE
LABELA   EQU   *
* MOVE ACEE DATA TO WS
         L     R04,ACEEINST              GET A(INSTL DATA) IN ACEE
         XR    R05,R05                   CLEAR REG
         ICM   R05,B'0001',0(R04)        GET LENGTH OF INSTL DATA
         BCTR  R05,R00                   DECREASE MACHINE LEN BY 1
         EX    R05,MDATA                 MOVE DATA TO WS TEMPACEE
         LA    R04,TEMPACEE              SAVE ADDR OF ABOVE
         ST    R04,TMPADDR1              SAVE START OF ACEEINST
* SET MODE 31 TO 24
         L     R06,=A(LABELB)            RESET MODE TO 24
         BSM   0,R06
LABELB   EQU   *
***  COMPUTE THE STARTING AND ENDING ADDR FOR LATER SEARCH PROCESS
         DROP  R04
         L     R04,TMPADDR1             SET UP START ADDR
         LA    R05,1(R05,R04)           SET UP END   ADDR
         ST    R05,TMPADDR2               FOR LOOP SEARCH
         XR    R05,R05                  CLEAR REG
         L     R05,TCTTECIA             GET A(TCTUA)
         USING P49TCTUA,R05
         LTR   R05,R05                   ANY TCTUA ?
         BNZ   BEG                       YES, START PROCESSING
** THIS PIECE OF CODE MIGHT NOT BE UPWARD COMPATIBLE BECAUSE OF SHARED
*  STORAGE GETMAIN. MAKE SURE THAT ALL TERMINALS ARE DEFINED WITH
** TCTUAL WHEN THIS SECTION IS REMOVED
         EXEC CICS GETMAIN SHARED                                      X
               LENGTH (K100)                                           X
               SET (R05)                                               X
               INITIMG (X'00')
         ST   R05,TCTTECIA
         LA   R04,100
         ST   R04,TCTTECIL
* THIS SECTION OBTAINS THE CICS ID FROM ACEE & PERFORMS THE FOLLOWING
* 1) MAKE USE OF THE KEY TO SEARCH HOGNDFLT FILE AND PRIME TCTUA
* 2) MOVE CICS ID FIELD TO TCTTEOI
BEG      DS    0H
         L     R04,TMPADDR1            GET START ADDR
AA00     DS    0H
         CLC   0(7,R04),=C'CICSID='    FIND CICSID=  ?
         BE    AA10                    Y  GOTO AA10
         LA    R04,1(R04)              N  ADD 1 TO ADDR
         C     R04,TMPADDR2            CHECK FOR END ?
         BL    AA00                    N  LOOP AGAIN
         B     LOADKEY                 Y  SKIP FORMATTING OF TCTTEOI
AA10     DS    0H                      FOUND OID
         MVC   TCTTEOI(3),7(R04)       STORE OID TO TCTTE
         EXEC CICS READ                                                X
               DATASET ('HOGNDFLT')                                    X
               INTO (FDFLT)                                            X
               LENGTH (K100)                                           X
               RIDFLD(TCTTEOI)                                         X
               EQUAL
         MVC   TUADATE(74),FUREC     SET UP TCTUA FROM FILE DATA
*   GET CICSKEY FIELD FROM ACEE AND MOVE TO TCTTESK
LOADKEY  DS    0H
         L     R04,TMPADDR1
BB00     DS    0H
         CLC   0(8,R04),=C'CICSKEY='
         BE    BB10
         LA    R04,1(R04)
         C     R04,TMPADDR2
         BL    BB00
         B     EOJ
BB10     DS    0H
         PACK  P#CICSSK,8(6,R04)       CONVERT CICSKEY NUMBER FROM
         CVB   R04,P#KEY               DISPLAY TO PACK THEN BINARY
         STCM  R04,B'0111',TCTTESK     AND STORE IN  TCTTE
         MVC   SNNTSK,TCTTESK          &  SNTTE
         EXEC CICS FREEMAIN DATA (FDFLT)
EOJ      DS    0H
         EXEC CICS START TRANSID('SCBM') TERMID(EIBTRMID)
         EXEC CICS RETURN
PGMEND   DS    0H
         EXEC CICS SEND FROM(ENDMSG) LENGTH(ENDMSGL)
         EXEC CICS SEND CONTROL FREEKB
         EXEC CICS RETURN
*    ISSUE CSSF LOGOFF ON BEHALF OF USER
LOGOFF   DS    0H
***  GETMAIN SOME STORAGE FOR TIOA AND FORMAT THE CONTENTS TO
***  SIMULATE A 'CSSF LOGOFF' INPUT FOR DFHSNP TO PERFORM SIGNOFF.
***  THIS PROCESS MAY CREATE A UPWARD COMPATABILITY PROBLEM WHEN WE
***  MIGRATE TO USE CICS V3.1 AS TRANSACTION CSSF WILL NO
***  LONGER BE SUPPORTED.
         EXEC CICS GETMAIN SET(R07) LENGTH(40) INITIMG(X'40')
         USING DFHTIOA,R07
         S     R07,=F'8'              POINT TO START OF TIOA
         MVC   TIOATDL,LENGTH         SET DATA LENGTH
         MVI   TIOAWCI,X'00'          CLEAR WC INDICATOR
         MVI   TIOACLCR,X'00'         CLEAR WCC
         MVC   DATA(30),CSSF          MOVE TRAN CODE AND DATA
         EXEC CICS ADDRESS CSA(R03)
         USING DFHCSADS,R03
         L     R05,CSACDTA            GET A(TCA)
         USING DFHTCADS,R05
         DROP  R03
         L     TCTTEAR,TCAFCAAA       GET A(TCTTE)
         USING DFHTCTTE,TCTTEAR
         ST    R07,TCTTEDA            SET TIOA ADDRESS IN TCTTE
         L     R03,TCASYAA            GET TCT SYSTEM AREA ADDRESS
         USING DFHSYTCA,R03
         MVC   TCAKCOID(4),=C'CSSF'   SET TCA TRANID TO CSSF
***  XCTL TO RACF SIGNOFF
         EXEC CICS XCTL PROGRAM('DFHSNP')
MDATA    DS    0H
         MVC   TEMPACEE(0),0(R04)
** ERROR HANDLING ROUTINE -
**  - SETUP ABEND CODE AND ABEND PGM FOR CICS TO PERFORM DTB
ABDILLOG DS    0H
         MVC   ABENDCDE,ACDILLOG
         B     ABENDRTN
ABDERROR DS    0H
         MVC   ABENDCDE,ACDERROR
         B     ABENDRTN
ABDIOERR DS    0H
         MVC   ABENDCDE,ACDIOERR
         B     ABENDRTN
ABENDRTN DS    0H
         EXEC CICS ABEND ABCODE(ABENDCDE)
         DS    0H
CESN     DC    CL30'CESN'
CSSF     DC    CL30'CSSF LOGOFF'
ENDMSG   DS    0CL31
         DC    X'11C6E41DF8'      LINE 6 COL 21 PROTECT HLIGHT
         DC    C'SIGN ON PROCESS TERMINATED'
ENDMSGL  DC    H'31'
LENGTH   DC    H'30'
K100     DC    H'100'             REC LENGTH
K380     DC    H'380'             WS LENGTH
ACDILLOG DC    C'ILOG'            ILLOGIC ABEND CODE
ACDERROR DC    C'EROR'            ERROR ABEND CODE
ACDIOERR DC    C'IOER'            IOERROR ABEND CODE
         LTORG
         IHAACEE
         END


Raymond Yip
Senior Systems Programmer
Standard Chartered Bank (Hong Kong)        c Standard Chartered Bank 1991

