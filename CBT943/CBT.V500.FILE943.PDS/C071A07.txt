Sending non-destructive CICS messages


INTRODUCTION

The READBUF CICS program was developed in order to
satisfy a need to retain a user terminal's currently displayed
screen.  Applications frequently need to send messages to
terminals to which they are not currently attached.

One way this can be accomplished is to attach a CICS message
switching task via a CICS START command.  The START
command initiates a transaction attached to the terminal and
sends the message to it.

If a terminal that is about to receive such a message is currently
involved in a non-conversational series of transactions, this
pseudo-conversation is broken.  The user's screen is replaced
by the message and all data previously on the screen is lost.
This restricts the use of unsolicited messages to inform users of
vital information.  The READBUF program was developed as
a solution to the screen loss and subsequent interruption of the
pseudo conversation.


WHAT READBUF DOES

The program is linked to from a command level program that
collects the message information and formats it into a map.
Prior to sending the map to the terminal, the module links to
READBUF.  When READBUF gets control, the current
display buffer of an individual terminal is read and stored in
temporary storage.  A temporary storage queue name is
developed using the terminal-id from CICS (SBUFtttt in field
name NAME1 where tttt is the terminal-id).  This queue name
allows subsequent retrieval of the buffer data.  Control is
returned to the calling program and the appropriate message is
sent to the terminal.

When the terminal user has read the message on his or her
screen, he or she strikes the ENTER key and READBUF is
invoked via a CICS transaction.  This execution of the program
is identified by testing the transaction-id found in the TCA.
This transaction-id was stored in the next transaction-id of the
TCA (TCANXTID) when the buffer was stored previously.

The logic is structured to retrieve the original screen buffer
from temporary storage using the queue name developed with
the terminal-id.  The buffer is sent to the terminal, thus
restoring the user's position in any pseudo-conversational
transaction stream.

Additional logic is included to handle details.  Certain types of
terminals are excluded from the function by testing the TCTTE
fields for corresponding bits.  Attempts to read the console are
eliminated.  The next transaction-id field of the TCTTE
(TCTTETC) is stored with the terminal buffer and restored to
its original value when the user's screen is restored.  The
cursor address is treated in a similar manner.


LIMITATIONS

READBUF will not interrupt a conversational task.  It was also
designed to handle only one buffer of storage.  If a buffer is
already in temporary storage for a given terminal, then no new
buffer will be stored.  Thus, if multiple messages were sent to
a terminal with no intervening strikes of the ENTER key, then
some messages may not be seen.  This could be eliminated by
modifying the code to handle multiple buffer reads.  This was
not a problem as READBUF was originally used so this
complexity was not added.  The program was designed and
implemented on CICS 1.5 and later migrated to CICS 1.6 and
1.6.1.  There should not be a problem with its use in 1.7 or
2.1.


CONCLUSIONS

It could be said that a well informed user is a more efficient
user.  To this end, making it possible to send informative
messages freely to end-user terminals must improve overall
efficiency.  The READBUF program has allowed many
thousands of messages to be received without negatively
disrupting the on-going activities of the receivers.  It has paid
for itself many times over.


READBUF SOURCE CODE

         TITLE 'READ BUFFER BEFORE SENDING A MESSAGE'
*        READ A BUFFER FROM A 3270 TERMINAL AND STORE IT IN MEMORY.
*        WHEN THE TERMINAL OPERATOR HITS ENTER AFTER READING THE
*        MESSAGE, THE ORIGINAL SCREEN WILL BE RESTORED.
         COPY DFHCSADS
         COPY  DFHTCADS
READSW   DS    CL3
SAVEID   DS    CL4
LCURSOR  DS    0CL4
SETBUF   DS    CL1
CURADD   DS    CL2
SETCUR   DS    CL1
LENGTH1  DS    H
LENGTH2  DS    H
NAME1    DS    0CL8
SBUF     DS    CL4
TERMID   DS    CL4
NAME2    DS    0CL8
STRN     DS    CL4
TERMID1  DS    CL4
ANSWER   DS    H
BINCUR   DS    H
TCTTEAR  EQU   11                      TERM CONT TABLE TERM ENT ADR RG
         COPY  DFHTCTTE
TIOABAR  EQU   10                      TERM I/O AREA BASE ADDR REG
         COPY  DFHTIOA
TIOADATA EQU   *                       DATA AREA
TDIABAR  EQU   9                       TRANS DATA IN AREA BASE ADDR REG
         COPY  DFHTDIA
TSIOABAR EQU   8
         COPY  DFHTSIOA
         COPY  REGEQU
READBUF  CSECT                         CONTROL SECTION
BASEREG  EQU   3                       PROGRAM BASE REGISTER
         BALR  BASEREG,0
         USING *,BASEREG
         L     TCTTEAR,TCAFCAAA        LOAD TERM CONT AREA ADDR REG
         L     TIOABAR,TCTTEDA         LOAD TERM I/O AREA ADDR REG
         MVC   TERMID,TCTTETI          MOVE TERMID TO QUEUE NAMES
         MVC   TERMID1,TCTTETI
         MVC   SBUF,=C'SBUF'           MOVE LITERALS TO QUEUE NAMES
         MVC   STRN,=C'STRN'
         ICM   R6,15,0(TCACBAR)        BACK UP TO SYSTEM TCA
         LA    R6,0(R6)                FORWARD TO ORIGINAL TASK ID
         CLC   =C'$LRM',176(R6)
         BE    RMSG                    WHERE AM I FROM?
         CLC   TERMID1,=C'CNSL'        NO READ BUFFER TO THE CONSOLE
         BE    RETURN                  OR ANY TYPES OTHER THAN 3277
         CLI   TCTTETT,TCTTET37        OR 3275. THIS EXCLUDES PRINTERS.
         BE    VALIDTYP
         CLI   TCTTETT,TCTTET75
         BE    VALIDTYP
         CLI   TCTTETT,TCTTETL7
         BE    VALIDTYP
         MVC   READSW,=C'NO '
         B     RETURN
VALIDTYP MVC   TCATSDI,NAME1           IF BUFFER STORED ALREADY GETOUT!
         DFHTS TYPE=GET,STORCLS=TERMINAL,NORESP=RETURN
         DFHTC TYPE=(READB,WAIT,SAVE)  READ THE BUFFER FROM THE TUBE
         L     TIOABAR,TCTTEDA
         LH    R6,TIOATDL              BUMP THE LENGTH AND PUT TO TEMP
         LA    R6,8(R6)                STORAGE AFTER RELEASES TO CLEAR
         STH   R6,TIOATDL              ANY OLD DATA. UP BY 4 FOR TEMP
         MVC   TCATSDI,NAME1           STORAGE RULE + 4 TO ALLOW FOR
         DFHTS TYPE=RELEASE            CURSOR POSITIONING ON $LRM TRAN
         MVC   TCATSDI,NAME2
         DFHTS TYPE=RELEASE
         MVC   TCATSDI,NAME1
         DFHTS TYPE=PUT,TSDADDR=TIOATDL
         MVC   TIOATDL,=H'10'          STORE NEXT TRANID FROM TCTTE AND
         MVC   TIOADBA(4),TCTTETC      REPLACE WITH OUR OWN TRANID $LRM
         MVC   TIOADBA+4(2),TCTTECAD
         MVC   TCATSDI,NAME2
         DFHTS TYPE=PUT,TSDADDR=TIOATDL
         MVC   TCANXTID,=C'$LRM'
         MVC   READSW,=C'YES'
         B     RETURN                  WE ARE DONE --GET OUT
RMSG     MVC   TCATSDI,NAME2           USER COMES HERE TO REBUILD THE
         DFHTS TYPE=GET                ORIGINAL SCREEN. FIRST GET THE
         L     TSIOABAR,TCATSDA        STORAGE TO REPLACE THE NEXT
         SH    TSIOABAR,=H'8'          TRANID IF THERE WAS ONE AND GET
         MVC   SAVEID,TSIOADBA         THE ORIGINAL CURSOR ADDRESS IN
         MVC   BINCUR(2),TSIOADBA+4    BINARY OFFSET FORMAT.
         CLC   SAVEID,=X'00000000'
         BE    BYPASS
         MVC   TCANXTID,SAVEID
BYPASS   MVC   TCATSDI,NAME1           GET THE ORIGINAL BUFFER
         DFHTS TYPE=GET,STORCLS=TERMINAL
         L     TIOABAR,TCATSDA
         ST    TIOABAR,TCTTEDA
         MVC   ANSWER,=X'0000'
         LA    R5,BINCUR                LOAD CURADD IN BINARY INTO WORK
         LH    R4,0(R5)                 REGISTER AND CONVERT TO THE
         STC   R4,ANSWER+1              3270 BUFFER ADDRESS
         SRL   R4,6
         STC   R4,ANSWER
         NI    ANSWER+1,X'3F'
         TR    ANSWER(2),TAB
         MVC   CURADD,ANSWER
         MVC   SETBUF,=X'11'
         MVC   SETCUR,=X'13'
         XR    R5,R5                    CLEAR THE WORK REGISTERS
         XR    R6,R6
         LR    R5,TIOABAR
         LH    R6,TIOATDL
         LA    R5,8(R5,R6)
         MVC   0(4,R5),LCURSOR
         DFHTC TYPE=(WRITE,WAIT,SAVE,ERASE) REPLACE ORIGINAL SCREEN
         MVC   TCATSDI,NAME1           CLEANUP ALL INFORMATION FROM
         DFHTS TYPE=RELEASE            TEMPORARY STORAGE
         MVC   TCATSDI,NAME2
         DFHTS TYPE=RELEASE
RETURN   EQU   *
*        DFHDC TYPE=TRANSACTION,DMPCODE=XMIT
         DFHPC TYPE=RETURN
         LTORG
TAB      DC    X'40C1C2C3C4C5C6C7C8C94A4B'
         DC    X'4C4D4E4F50D1D2D3D4D5D6D7'
         DC    X'D8D95A5B5C5D5E5F6061E2E3'
         DC    X'E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A'
         DC    X'7B7C7D7E7F'
         END   READBUF


Robert Bilyeu
Systems Programmer (USA)

