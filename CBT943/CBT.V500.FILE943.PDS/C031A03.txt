 CICS 1.7 and ACF2 problems
ENVIRONMENT
The following article relates to an operational environment of an IBM 3081K,
MVS/XA, CICS 1.7, with ACF2 security.  Systems programming staff had THE MONITOR
and CICS/ABEND-AID available.  INTERTEST was installed during the problem
solving process.  This was in a service bureau environment where none of the
staff had previously worked with this combination of products.  This article may
be of interest to CICS system programmers, applications design
programmer/analysts, and those involved with ACF2 and CICS Version 1.7
BACKGROUND
A third-party CICS application package (command-level COBOL) was undergoing
enhancements in a 43xx/MVS/CICS 1.6 environment.  During the enhancement period
the site was upgraded to the environment outlined above.  The problems appeared
after this migration.
PROBLEMS
The site was faced with three separate problems, though at the time we thought
there was only one.  The first problem was that both EDF and the packageUs
remote printer program received NOTAUTH errors when they executed.  This problem
would appear in some cases during the execution of a VSAM read and in some
cases, we found later, during the automatic start of the print module.  The
second problem was that we intermittently received ASRA and, less frequently,
APCZ errors after compiling our programs.  Shutting CICS down and restarting
would solve this problem.  The third problem was that sections of working
storage within application programs began to lose their initial values following
recompilation.
Problem one
We began pursuing what we thought would be a simple solution by attempting to
analyse our remote printer problems using EDF.  We found that a parallel region
running CICS 1.6 had no problems.  This region did not have security provided by
ACF2.  We therefore felt that the problem must have been caused by ACF2.
We had no luck in trying to capture the printer module by using EDF.  Further,
we had no luck in using CICS/ABEND-AID to capture the errant transaction.  What
was most frustrating was that we could not find a reference to the ABEND code
SECG, which repeatedly would be printed on the printer.
The solution was found when we attempted to initiate a new user-written
transaction which received the same SECG abend code along with an ACF2 error
message.  The message indicated that the user was not authorised to execute the
transaction.  Some re-reading of the ACF2 and RDO manuals led us first to
attempt to change the Resource Security Level (RSL) and Resource Security Level
Checking (RSLC) status of our transaction in the PCT, and later to place the
transaction in a special table belonging to ACF2 called the Safe List as well
indicating external security in the PCT.
What was happening with our printer transaction was that CICS was being issued
with an error code when it attempted to start the printer module.  This error
code indicated that the user was not authorised to execute that transaction
because the user (CICS in this case) was not signed on.  Placing the transaction
in the Safe List and indicating external security solved this problem.
The major points that we found in our solution were:
%    PCT entries for all transactions must indicate external security as opposed
to the default internal security.
%    All transactions must be known to ACF2 either through entry in its Safe
List or, more appropriately, in the ACF2 CKC Rules List for user and/or terminal
and/or transaction specific security.  This is the more obvious solution in a
production environment.
%    At ACF2 installation, a two-character ABEND code prefix is a specified.
The TSEU part of our ABEND code was an installation-supplied/specified
identifier.
Problem two
It took us some time to realise that we had this second problem because the
early period of our installation was marked by limited compilation.  The
indication that we had a problem was an occasional ASRA on a program that had
previously been working correctly.  Attempts to capture the abending program
with EDF and later with INTERTEST were unsuccessful.
Our region was up and down during this period and the problem was intermittent
and infrequent.  As we entered a period of major enhancements, after problem one

 was solved, we became aware that something odd was happening that rolling CICS
would always solve.
A hint in the right direction came when we received, very infrequently, an APCZ
abend code indicating that a module could not be loaded.  We began to realise
that we had CICS addressing problems.  Unfortunately, we began doing a lot of
reading concerning the CICS memory pool and OSCORE size seeking a solution.  We
did increase OSCORE size and the size of the region from 4.5Mb to 6.5Mb.  This
did not remove the problem but (we believed) made it less frequent.
The solution had nothing to do with our CICS region.  Rather, the problem was
directly related to our main test load libraryUs allocation.  Our load library
was defined with secondary extents. IBM is clear, though it takes some digging,
that load libraries must be defined with no secondary extents.  As we began
compiling load modules into these secondary extents, CICS began having
difficulties finding its new modules.
Problem three
Our third problem appeared suddenly during our attempts at solving problem two
above.  We found that some of our recompiled programs would mysteriously begin
executing with areas of their working storage having lost their initial values.
We also discovered that initialising the problem working storage fields at
invocation time allowed the programs to execute successfully.  At first we
suspected application problems and then later, we began to suspect a problem
related to number two above.
The solution began to become clear when we found the working storage load
segments above a certain size always lost their initial values. We discovered
that the block length of the first load library in CICSUs concatenation list was
19069 whereas all other libraries had a block length of 23475. CICS uses the
record length of the first load library in its DFHRPL list to determine the
buffer size for loading working storage segments.  By moving this shorter length
load library to a lower position in the concatentation list, we were able to
load modules from any of our libraries successfully.
SUMMARY
Firstly, be aware that CICS Version 1.7 and 1.6 require a greater awareness of
security restrictions for transactions.  Secondly, the ACF2 security system
requires different definitions for your transactions, and special handling for
CICS-supplied transactions.  Finally, remember that CICS load libraries must be
defined with primary allocation only and that the library with the longest block
length must be placed first.
ACKNOWLEDGEMENT
We wish to offer special thanks to Olie Ballard, of San Jose, California, for
his enthusiastic search for the solutions to these and other problems.  A
systems programmer like Olie is a rare individual and is worth his weight in
gold!

Perry Shipman
Shipman & Associates Inc (USA)     ) Shipman & Associates 1988





















