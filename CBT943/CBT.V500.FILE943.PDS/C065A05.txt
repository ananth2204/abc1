Displaying BMS maps under CMS

For programmers developing CICS applications in a VM/VSE
environment, testing BMS maps is not very easy.  You need to
code your source with XEDIT in CMS, submit the assembly,
go to CICS, test the map with CECI, then, at the end, start all
over again because you have made a typing mistake in an
initial value.

I have written the following CMS EXEC procedures to test
maps directly in the CMS environment.

With these EXECs you can:

o      Display on the screen any map of a mapset.

o      Print the screen image of a map in a CMS file (eg for
      documentation purposes).

o      Correct the most common coding errors before the
      assembly. (To have an idea of the detected errors you can
      have a look at the error messages located at the end of
      MAPGEN EXEC.)

The following procedures are used:

o      MAPVIEW P displays the map on screen.

o      MAPVIEWX P XEDIT called by MAPVIEW.

o      MAPFIELD P displays the variables names used in the
      map. (called by MAPVIEW).

o      MAPPRINT P prints a map in a CMS file.

o      MAPGEN P interprets the BMS source (called by
      MAPVIEW and MAPPRINT).


MAPVIEW

To invoke MAPVIEW, the following steps are performed:

1      Enter MAPVIEW <filename filetype filemode> |
      <map_name> (see help included in procedure for details).
      The procedure displays the map.

2      Press PF3 to exit.  The procedure displays the names of the variables.

3      Press PF3 to exit.


MAPPRINT

To invoke MAPPRINT:

Enter MAPPRINT <filename filetype filemode> | map_name
(see help included in procedure for details).  The procedure
creates a file named 'filename LISTING A'.


MAPVIEW EXEC

/* ----------------------------------------------------------------- */
/* MAPVIEW display a BMS map on CMS screen.                          */
/* ------------------------------------------------------------------*/
trace o
/* Get input parameters                                              */
     arg FNAME FTYPE FMODE DELIM MAPNAME .
/* General commands : to avoid error messages                        */
     address command "CP SET EMSG OFF"
     address command "CP SET IMSG OFF"
/* Input Controls                                                    */
     if FNAME =  " "        then call help
     if FNAME =  "?"        then call help
     if FNAME =  "HELP"     then call help
     if FTYPE ¬= "ASSEMBLE" then call error101
     if datatype(FMODE) ¬= "CHAR" then call error102
     if DELIM ¬= "(" then do ;
         if MAPNAME ¬= " "   then call error103
         MAPNAME = substr(DELIM,2,7)
         DELIM = substr(DELIM,1,1)
         if DELIM ¬= "("     then call error103
     end
     if MAPNAME = " "       then call error104
/* Setting some constants                                            */
     push  FNAME FTYPE FMODE
     pull  SRC_NAME
     FTYPE2 = '$' || MAPNAME
     push  FNAME FTYPE2 'A'
     pull  WORK_FILE
/* Is the file there ?                                              */
     address CMS "STATE" SRC_NAME
     if rc ¬= 0 then call error105
/* Call MAPGEN procedure to interpret the map                       */
     address CMS "EXEC MAPGEN" SRC_NAME DELIM MAPNAME
     if rc ¬= 0 then call error106
     push '0 0 1'
     pull ABS_LINE FLAG_FIRST_FIELD POS_CURSOR        /* line to read    */
     push '!+ !& !$ !@ !+'                            /* Char. Used..    */
     pull ASK UNP ASK_BRT UNP_BRT ATTR                /* As Attribute    */
     do i = 1 to 24                                   /* Init screen.    */
          LINE.i = " "                                /* .lines to ..    */
          COUNT.i = 0                                 /* .. blank        */
     end
     queue 'SORT * 10 14'                             /* Sort file...    */
     queue 'file'                                     /* on LIN & COL    */
     address CMS 'XEDIT' WORK_FILE
read_work_file:             /* Read  work file and get a new string      */
     ABS_LINE = ABS_LINE + 1
     address CMS "EXECIO 1 DISKR" WORK_FILE ABS_LINE
     if rc ¬= 0 then signal xedit_process
     parse pull STRING
     FIELD_LIN = substr(STRING,10,2)                  /* Line Number     */
     FIELD_LIN = space(FIELD_LIN)
     FIELD_COL = substr(STRING,13,2)                  /* Column Number   */
     FIELD_LNG = substr(STRING,16,2)                  /* Field Length    */
     FIELD_OCC = substr(STRING,19,2)                  /* Time Occurs     */
     FIELD_ASK = substr(STRING,22,1)                  /* ASKIP Attribute */
     FIELD_UNP = substr(STRING,24,1)                  /* UNPROT Attribute*/
     FIELD_BRT = substr(STRING,26,1)                  /* BRT Attribute   */
     FIELD_INT = substr(STRING,28,FIELD_LNG)          /* Initial Value   */
/* Define the attributes for the field                                   */
     if FIELD_ASK = 1 & FIELD_BRT = 1 then ATTR = ASK_BRT
     if FIELD_ASK = 1 & FIELD_BRT = 0 then ATTR = ASK
     if FIELD_UNP = 1 & FIELD_BRT = 1 then ATTR = UNP_BRT
     if FIELD_UNP = 1 & FIELD_BRT = 0 then ATTR = UNP
     if FLAG_FIRST_FIELD = 0 & FIELD_UNP = 1 then do;
          POS_CURSOR = FIELD_LIN FIELD_COL+1
          FLAG_FIRST_FIELD = 1
     end
/* Construct the New Field and Write it on the Screen Line               */
     NEW_FIELD = ATTR ¨¨ FIELD_INT
     NEW_LNG   = length(NEW_FIELD)
     FIELD_COL = FIELD_COL + COUNT.FIELD_LIN
     LINE.FIELD_LIN = overlay(NEW_FIELD,LINE.FIELD_LIN,FIELD_COL,NEW_LNG)
     if FIELD_OCC ¬= 0 then ;
     do j = (FIELD_LIN + 1) to (FIELD_LIN + (FIELD_OCC - 1))
           LINE.j = LINE.FIELD_LIN
     end
     COUNT.FIELD_LIN = COUNT.FIELD_LIN + 1
     signal read_work_file
xedit_process:
/* XEDIT General Commands                                                */
     queue    'SET CASE     MIXED   IGNORE '
     queue    'SET AUTOSAVE OFF'
     queue    'SET TOFEOF   OFF'
     queue    'SET LINEND   OFF'
     queue    'SET WRAP     ON '
     queue    'SET SCALE    OFF'
     queue    'SET STAY     ON '
     queue    'SET NULLS    OFF'
     queue    'SET PREFIX   OFF'
     queue    'SET MSGMODE  ON'
/* Positionning Lines                                                    */
     queue    'SET MSGLINE  ON -2 1 OVERLAY'
     queue    'SET CMDLINE  OFF'
/* Setting Control Characters                                            */
     queue    'SET CTLCHAR  ! ESCAPE'
     queue    'SET CTLCHAR  & NOPROTECT GREEN NOHIGH'
     queue    'SET CTLCHAR  % NOPROTECT WHITE NOHIGH'
     queue    'SET CTLCHAR  @ NOPROTECT RED   NOHIGH'
     queue    'SET CTLCHAR  + PROTECT   BLUE  NOHIGH'
     queue    'SET CTLCHAR  $ PROTECT   WHITE NOHIGH'
     queue    'SET COLOR    MSGLINE WHITE HIGH'
     queue    'SET COLOR    CMDLINE BLUE  HIGH'
/* Define the lines values and initialize them                           */
     do i = 01 to 24
          if LINE.i = " " then LINE.i = "!% "
          queue    'SET RESERVED' i 'BLUE NOHIGH' LINE.i
     end
     queue    'CURSOR SCREEN' POS_CURSOR 'P 200'
/* Here is the process                                                   */
     queue    'MAPVIEWX'                        /* XEDIT proc. to execute*/
     address CMS 'XEDIT TEMP FILE A'            /* EDIT dummy file       */
/* Call MAPFIELD exec , remove the next line if you don't want this      */
/* facility.                                                             */
     address CMS 'EXEC MAPFIELD' MAPNAME FNAME
     RCD = 0
     signal endproc
help:
     address CMS "VMFCLEAR"
say " MAPVIEW"
say "------------------------------------------------------------------"
say " This Procedure reads a BMS source file and displays a map on a"
say "CMS screen. It displays only one Map (DFHMDI) at a time. It does"
say "also a short syntax checking like continuation character and comma"
say "check, but the complete check is not done. This procedure may be"
say "used before the Mapset compilation to view a specified Map and"
say "check the most frequent errors."
say "The parameters recognized by this procedure are :"
say "DFHMDI Macro : SIZE , LINE , COLUMN."
say "DFHMDF Macro : POS , LENGTH , ATTRB , INITIAL , OCCURS."
say " Attributes :  BRT, ASKIP, UNPROT, the others are ignored."
say " "
say " Format of the command :"
say "            MAPVIEW filename filetype filemode ( map_name"
say "     Where : filename is the Mapset name and the CMS Filename.  "
say "             filetype SHOULD BE :'ASSEMBLE'"
say "             filemode is the Filemode of the Minidisk where the"
say "                      source file is located."
say "             map_name is the name of the map to be displayed, it"
say "                       should correspond to a DFHMDI macro."
RCD = 0
signal endproc
error101:
     say "FileType should be ASSEMBLE"
     RCD = 28
     signal endproc
error102:
     say "Invalid FileMode"
     RCD = 28
     signal endproc
error103:
     say "Command format invalid"
     say "Type MAPVIEW HELP to have more information"
     RCD = 28
     signal endproc
error104:
     say "Map Name is missing"
     RCD = 28
     signal endproc
error105:
     say "File" SRC_NAME "not found."
     RCD = 28
     signal endproc
error106:
     say "Procedure terminated due to Return Code"
     RCD = 28
     signal endproc
endproc:
     address CMS 'ERASE' WORK_FILE
     address command "CP SET EMSG ON"
     address command "CP SET IMSG ON"
     exit RCD


MAPVIEWX XEDIT

/* --------------------------------------------------------------------- */
/* MAPVIEWX XEDIT invoked by MAPVIEW exec.                               */
/* Do not use Directly.                                                  */
/* Wait for PF3 to and exit of the procedure                             */
/* --------------------------------------------------------------------- */
do forever;
         'CONWAIT'
         'DESBUF'
         'READ ALL TAG NUMBER'
          pull TAG INPT TEXT
          if TAG = 'PFK' & INPT = 3 then signal endproc
end
endproc:
'QQUIT'
exit


MAPFIELD EXEC

/* --------------------------------------------------------------------- */
/* MAPFIELD Called by MAPVIEW to display on screen the variables used    */
/* in the MAP. These variables are in the MAPSET_NAME $FIELDS A file     */
/* created by MAPGEN exec.                                               */
/* --------------------------------------------------------------------- */
/* Get the parameters from MAPVIEW exec                                  */
     arg MAP_NAME MAPSET_NAME .
/* Name of the file to edit                                              */
     VAR_FILE = MAPSET_NAME '$FIELDS  A'
/* XEDIT Commands                                                        */
     queue 'SET CASE     MIXED   IGNORE '
     queue 'SET AUTOSAVE OFF'
     queue 'SET TOFEOF   OFF'
     queue 'SET LINEND   OFF'
     queue 'SET WRAP     ON '
     queue 'SET SCALE    OFF'
     queue 'SET STAY     ON '
     queue 'SET NULLS    OFF'
     queue 'SET PREFIX   OFF'
     queue 'SET MSGMODE  ON'
     queue 'SET MSGLINE  ON -2 1 OVERLAY'
     queue 'SET CMDLINE  OFF'
     queue 'SET PF3      QQUIT'
/* Setting Control Characters                                            */
     queue 'SET CTLCHAR  ! ESCAPE'
     queue 'SET CTLCHAR  & NOPROTECT GREEN NOHIGH'
     queue 'SET CTLCHAR  % NOPROTECT WHITE NOHIGH'
     queue 'SET CTLCHAR  @ NOPROTECT RED   NOHIGH'
     queue 'SET CTLCHAR  + PROTECT   BLUE  NOHIGH'
     queue 'SET CTLCHAR  $ PROTECT   WHITE NOHIGH'
     queue 'SET COLOR    MSGLINE WHITE HIGH'
     queue 'SET COLOR    CMDLINE BLUE  HIGH'
/* Create the Comment Lines                                              */
     LINE.2.1 = ' The Following Variables Were Found     '
     LINE.2.2 = 'Map :!$' MAP_NAME '!+Mapset :!$' MAPSET_NAME'!+'
     LINE.2   = LINE.2.1 LINE.2.2
     LINE.3.1 = '________________________________________'
     LINE.3.2 = '________________________________________'
     LINE.3   = LINE.3.1 ¨¨ LINE.3.2
     LINE.23.1 = '________________________________________'
     LINE.23.2 = '________________________________________'
     LINE.23 = LINE.23.1 || LINE.23.2
     LINE.24.1 = 'PF:              3=Quit                 '
     LINE.24.2 = '7=Backward  8=Forward                   '
     LINE.24 = LINE.24.1 LINE.24.2
     queue 'SET RESERVED  1  BLUE NOHIGH'
     queue 'SET RESERVED  2  BLUE NOHIGH' LINE.2
     queue 'SET RESERVED  3  RED  NOHIGH' LINE.3
     queue 'SET RESERVED  23 RED NOHIGH' LINE.23
     queue 'SET RESERVED  24 WHITE NOHIGH' LINE.24
/* Edit the file                                                         */
     address CMS 'XEDIT' VAR_FILE
/* Erase the file                                                        */
     address CMS 'ERASE' VAR_FILE
     exit


MAPPRINT EXEC

/* --------------------------------------------------------------------- */
/* MAPPRINT : Print a BMS map in a CMS File.                             */
/* --------------------------------------------------------------------- */
     trace o
/* Get input parameters                                                  */
     arg FNAME FTYPE FMODE DELIM MAPNAME .
/* Input control                                                         */
     if FNAME =  " "        then call help
     if FNAME =  "?"        then call help
     if FNAME =  "HELP"     then call help
     if FTYPE ¬= "ASSEMBLE" then call error101
     if datatype(FMODE) ¬= "CHAR" then call error102
     if DELIM ¬= "(" then do ;
          if MAPNAME ¬= " "   then call error103
          MAPNAME = substr(DELIM,2,7)
          DELIM = substr(DELIM,1,1)
          if DELIM ¬= "("     then call error103
     end
     if MAPNAME = " "       then call error104
/* Setting some constants                                                */
     address command "CP SET EMSG OFF"
     address command "CP SET IMSG OFF"
     push  FNAME FTYPE FMODE
     pull  SRC_NAME
     FTYPE2 = '$' || MAPNAME
     FTYPE3 = 'LISTING'
     push  FNAME FTYPE2 'A'
     pull  WORK_FILE
     push  FNAME FTYPE3 'A'
     pull  PRINT_FILE
/* Is the file there ?                                                   */
     address CMS "STATE" SRC_NAME
     if rc ¬= 0 then call error105
     address CMS "ERASE" PRINT_FILE
/* Interpret the source member                                           */
     address CMS "EXEC MAPGEN" SRC_NAME DELIM MAPNAME
     if rc ¬= 0 then call error106
     address CMS "ERASE" FNAME '$FIELDS A'   /* Unused by this procedure */
     push '0 0'
     pull ABS_LINE FLAG_FIRST_FIELD                       /* line to read*/
     do i = 1 to 24                                       /* Init Lines..*/
          LINE.i = " "                                    /* ... to ...  */
          LINE_NUMBER.i = right(i,2,0)                    /* .. blank    */
     end
     queue 'SORT * 10 14'                                 /* Sort file...*/
     queue 'file'                                         /* on LIN & COL*/
     address CMS 'XEDIT' WORK_FILE
read_work_file:                 /* Read  work file and get a new string  */
     ABS_LINE = ABS_LINE + 1
     address CMS "EXECIO 1 DISKR" WORK_FILE ABS_LINE
     if rc ¬= 0 then signal write_process
     parse pull STRING
     FIELD_LIN = substr(STRING,10,2)                 /* Line Number      */
     FIELD_LIN = space(FIELD_LIN)
     FIELD_COL = substr(STRING,13,2)                 /* Column Number    */
     FIELD_LNG = substr(STRING,16,2)                 /* Field Length     */
     FIELD_OCC = substr(STRING,19,2)                 /* Time Occurs      */
     FIELD_INT = substr(STRING,28,FIELD_LNG)         /* Initial Value    */
/* Construct the New Field and stack it                                  */
     LINE.FIELD_LIN = overlay(FIELD_INT,LINE.FIELD_LIN,FIELD_COL,FIELD_LNG)
     if FIELD_OCC ¬= 0 then ;
     do j = (FIELD_LIN + 1) to (FIELD_LIN + (FIELD_OCC - 1))
           LINE.j = LINE.FIELD_LIN
     end
     signal read_work_file
write_process:  /* Create the print file                                 */
     FIRST_LINE_1 = "1 |....+....1....+....2....+....3....+....4....+...."
     FIRST_LINE_2 = "5....+....6....+....7....+....8"
     FIRST_LINE = FIRST_LINE_1 || FIRST_LINE_2
     queue FIRST_LINE
     address CMS "EXECIO 1 DISKW" PRINT_FILE "1 F 133"
     do i = 1 to 24
          LINE.i = " " || LINE_NUMBER.i LINE.i
          queue LINE.i
          address CMS "EXECIO 1 DISKW" PRINT_FILE
     end
     address CMS "FINIS" PRINT_FILE
     address CMS "ERASE" WORK_FILE
     RCD = 0
     signal endproc
help:
     address CMS "VMFCLEAR"
say " MAPPRINT"
say "------------------------------------------------------------------"
say " This Procedure reads a BMS source file and prints a specified Map"
say "in a CMS file. It prints only one Map (DFHMDI) at a time. It does"
say "also a short syntax checking like continuation character and comma"
say "check, but the complete check is not done. This procedure may be"
say "used before for documentation purposes."
say "The parameters recognized by this procedure are :"
say "DFHMDI Macro : SIZE , LINE , COLUMN."
say "DFHMDF Macro : POS , LENGTH , ATTRB , INITIAL , OCCURS."
say " Attributes :  BRT, ASKIP, UNPROT, the others are ignored."
say " "
say " Format of the command :"
say "            MAPPRINT filename filetype filemode ( map_name"
say "     Where : filename is the Mapset name and the CMS Filename.  "
say "             filetype SHOULD BE :'ASSEMBLE'"
say "             filemode is the Filemode of the Minidisk where the"
say "                      source file is located."
say "             map_name is the name of the map to be displayed, it"
say "                       should correspond to a DFHMDI macro."
say " "
say "The name of the Output file will be : filename LISTING filemode."
     exit
error101:
     say "FileType should be ASSEMBLE"
     RCD = 28
     signal endproc
error102:
     say "Invalid FileMode"
     RCD = 28
     signal endproc
error103:
     say "Command format invalid"
     say "Type MAPPRINT HELP to have more information"
     RCD = 28
     signal endproc
error104:
     say "Map Name is missing"
     RCD = 28
     signal endproc
error105:
     say "File" SRC_NAME "not found."
     RCD = 28
     signal endproc
error106:
     say "Procedure terminated due to Return Code"
     RCD = 28
     signal endproc
endproc:
     address command "CP SET EMSG ON"
     address command "CP SET IMSG ON"
     exit RCD

This article will be continued next month when we shall be
publishing the code for the MAPGEN EXEC.

Bruno Anmella (France)


