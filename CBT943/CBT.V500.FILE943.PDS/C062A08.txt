A better NEWCOPY facility

The most frequent CEMT command used by non-technical
people is probably CEMT PERFORM NEWCOPY.  And since
CEMT is such a powerful tool, access to it is often restricted to
people in the operations and the technical support areas.  This
forces those in a testing environment to call an operator or
systems programmer just to refresh a copy of one of their
programs, which is both time consuming and disruptive to both
parties.  We decided to deal with this by writing a transaction
that would not only perform a NEWCOPY, but would provide
additional information to the requestor to verify that the correct
copy of the program has been loaded.

The NEWC transaction was written for people who do not have
access to CEMT but have a need to perform NEWCOPY
requests on application programs, for example development
programmers in test CICS systems or production control people
in production CICS systems.  It uses the SET/INQUIRE
programming interface to do this, hence CICS 1.7 or higher is
necessary.  In addition to refreshing the program, it will tell
you the length of the program both before and after the
NEWCOPY, so you can tell (in most cases) that the request
was performed successfully.  And, if you are MVS/XA or
MVS/ESA, it will display the specific library in the DFHRPL
concatenation that the program was reloaded from, which will
help ensure that the correct version of the program was loaded.
This is especially of value if you have a large number of
libraries concatenated to DFHRPL, because a very common
problem in such systems is that a program is not being picked
up from the correct library, and determining this manually can
be a tedious process.  Using this gives you immediate
verification that you have in fact loaded the program from the
library you intended.

To use this transaction simply enter NEWC xxxxxxx,where
xxxxxxx is the name of the program to be NEWCOPY'd.  If
the request is successful, you will receive the following
message:

      NEWC100I: NEWCOPY REQUEST SUCCESSFUL.
                OLD PROGRAM LENGTH: 1,200 BYTES.
                NEW PROGRAM LENGTH: 1,250 BYTES.
                NEW COPY WAS FROM: CICS.PROGRAM.LOADLIB

The last line that tells you the library from which the program
was loaded will only be displayed if the NEWC program was
assembled with the &BLDL option set to '1'.  CICS/VSE users
will not be able to use this.  However, the program will still
function with CICS/VSE, and will still display the old and new
length.  CICS/MVS users may choose not to use this, since
determining this requires that CICS and MVS control blocks
and macros are accessed - more on this later.

As with everything, there are error messages.  First, if you
forget to specify a program name when you enter the NEWC
transaction, you will get this message:

      NEWC010E: MISSING OR INVALID PROGRAM NAME...CORRECT IT AND RETRY.

A NEWCOPY cannot be performed on a program that is in
use, for obvious reasons.  For example, if you try to do a
command like NEWC NEWCPGM, you will get the following
message:

      NEWC020E: PROGRAM IS MARKED IN USE. RELEASE IT AND RETRY REQUEST

If the program is found to be in use we retry the request three
times.  If we still cannot perform the NEWCOPY you are
returned the above message.  It is likely that the program you
are attempting to NEWCOPY has been fixed in storage with a
LOAD HOLD, and therefore cannot be NEWCOPY'd until an
EXEC CICS RELEASE is performed against it.  You will have
to determine if the program can be refreshed (some programs
cannot) and if so reset the the residency count to zero: CECI
can be used to do this.  Once this is done the NEWCOPY can
be retried.

The next one is fairly obvious:

      NEWC030E: PROGRAM IS NOT DEFINED TO CICS. CORRECT AND RETRY

You cannot NEWCOPY a program that is not defined to CICS.
You have either misspelled the name, or perhaps are logged on
to the wrong CICS system.  Or else the program was never
defined to CICS in the first place, which may explain the
'APCT' abend the user was getting!

This next error is also self-explanatory:

      NEWC040E: PROGRAM WAS NOT FOUND ON THE CICS PROGRAM LIBRARY.

You cannot NEWCOPY a program that does not reside in an
RPL library.  Again, you may have misspelled the name, or
perhaps are logged on to the wrong CICS system.  This could
also be because of an I/O error on the DFHRPL library.

Finally, the last error could be returned if you are using the
&BLDL option (MVS only).  This message will only occur in
conjunction with a successful NEWCOPY attempt:

      NEWC050E: AN ERROR OCCURRED DURING BLDL PROCESSING.
      A DUMP WAS PRODUCED. CONTACT CICS TECH SUPPORT.

If this error occurs, the NEWCOPY was still successful. This
message means that it was not possible to determine which
DFHRPL library the new copy was loaded from.  You can still
use the program to perform NEWCOPY requests, but you will
have to correct the problem with the NEWCPGM program
before the library reporting function will work.  When the
above occurs, a dump will be produced to aid in determining
the cause of the error.  There are three different dump codes
that may be issued, depending on where the error occurred.
Remember I said earlier that CICS and MVS control blocks
and macros were used for this process; these errors indicate that
one of these areas has a problem.  The dump codes and their
meaning are as follows:

o      ABN1 occurs if 'DFHRPL' cannot be located in the
      TIOT.  This could be because of CICS or MVS control
      block linkages changing as a result of maintenance or
      upgrades.

o      ABN2 occurs if the MVS BLDL that is issued to locate
      the program's DASD address returns a non-zero return
      code.  Since this is an MVS request being issued by this
      program it could be caused for reasons similar to those
      described in the previous abend.

o      ABN3 occurs if the MVS SWAREQ macro that is issued
      to locate the JFCB of the load library where the
      NEWCOPY'd program resided returns a non-zero return
      code.  As with BLDL, since this is an MVS request being
      issued directly by this program it could occur because of
      release or maintenance changes.

Trace records are written to CICS before and after the BLDL
and SWAREQ macros are issued.  These can aid in problem
determination when examining one of the above dumps, or
with auxiliary trace or EDF.  These are all written with a trace-
id of X'00' (which you may want to change if you are already
using this id), and the trace entries contain the following
information:

Before the BLDL request:

o      Byte 8 - X'03' = enter

o      Bytes 12-15 - address of BLDL parameter list

o      Bytes 16-23 - constant 'BLDL'.

After the BLDL request:

o      Byte 8 - X'05' = exit

o      Bytes 10-11 - return code from BLDL (from register 15)

o      Bytes 12-15 - address of BLDL parameter list

o      Bytes 16-23 - name of program being processed.

Before the SWAREQ request:

o      Byte 8 - X'03' = enter

o      Bytes 12-15 - address of SWAREQ parameter list

o      Bytes 16-23 - constant 'SWAREQ'.

After the SWAREQ request:

o      Byte 8 - X'05' = exit

o      Bytes 10-11 - return code from SWAREQ (from register 15)

o      Bytes 12-15 - address of SWAREQ parameter list

o      Bytes 16-23 - first 8 bytes of LOADLIB's DSNAME.

The most likely solution to any unusual errors you encounter
will be to simply re-assemble the program using the most
current versions of the CICS and MVS macro libraries and see
if it goes away.  If not, you will have to investigate further to
determine if changes are needed (or even possible) for this
function to work. In the worst case you will have to remove the
&BLDL option from the program.  With this removed it is a
pure CICS command-level program and should work fine far
into the future.

To install the program, the following RDO definitions (or
macro equivalents) are necessary:

      CEDA DEFINE TRANSACTION(NEWC)
                  PROGRAM(NEWCPGM)
                  PROfile(xxxxxxx)
                  GROUP(xxxxxx)
                  PRIORITY(01)
                  TRANSEC(01)

      CEDA DEFINE PROGRAM(NEWCPGM)
                  LANGUAGE(ASSEMBLER)
                  GROUP(xxxxxx)
                  RES(NO)

The LOADLIB reporting function is generated at assembly
time by setting the global &BLDL at the start of the program to
'1'.  Remember that this will only work in MVS environments.
Also, for this to work properly you must link-edit the program
AMODE=31, RMODE= ANY otherwise the program will
ASRA.

         TITLE 'USER-WRITTEN CICS NEWCOPY FACILITY'
         GBLB  &BLDL         <=== SELECT THIS OPTION TO DISPLAY FROM
&BLDL    SETB  1                  WHICH DFHRPL LIBRARY THE PROGRAM
*                                 WAS LOADED. SINCE THIS WILL RESULT
*                                 IN MVS MACROS 'BLDL' AND 'SWAREQ'
*                                 BEING USED THIS FEATURE IS OPTIONAL.
         AIF   (NOT &BLDL).NOBL01
*        DSECTS REQUIRED FOR BLDL PROCESSING.
         COPY  DFHCSADS
         DFHSIT  TYPE=DSECT
         DFHSIPD TYPE=DSECT
         IKJTCB   DSECT=YES,LIST=YES
         IEFJFCBN LIST=YES
         IEFTIOT1
         DCBD  DSORG=(PO)
*        DSECTS REQUIRED FOR SWAREQ PROCESSING.
         IEFZB505 LOCEPAX=YES
CVT      DSECT
         CVT   DSECT=YES,LIST=YES
         IEFJESCT TYPE=DSECT
.NOBL01  ANOP
* MODULE NAME = NEWCPGM                                             ***
* MODULE TYPE = ASSEMBLER, RENT, AMODE=31.                            *
* MODULE SIZE = 1,512 BYTES (WITHOUT THE 'BLDL' OPTION).              *
*               2,432 BYTES (WITH THE 'BLDL' OPTION).                 *
* STATUS = 2.1.1 -- MVS/ESA                                           *
* FUNCTION - THIS PROGRAM WILL PERFORM A NEWCOPY ON A PROGRAM.        *
*            OPTIONALLY, THE RPL LIBRARY THE PROGRAM WAS LOADED       *
*            FROM WILL BE DISPLAYED.                                  *
* NOTE: IF THE 'BLDL' OPTION IS SELECTED, THE CODE GENERATED DOES NOT *
*       CONFORM TO THE DOCUMENTED COMMAND-LEVEL INTERFACE. THE        *
*       FOLLOWING MVS MACROS ARE USED:                                *
*          'BLDL'   - BUILD LIST, TO LOCATE THE DASD ADDRESS.         *
*          'SWAREQ' - SWA MANAGER REQUEST, TO LOCATE THE JFCB.        *
*       IN ADDITION, THE FOLLOWING CONTROL BLOCKS ARE REFERENCED:     *
*          CSASITBA - ADDRESS OF SIT.                                 *
*          SITCOMA  - ADDRESS OF SIP COMMON AREA.                     *
***        SILLIBA  - ADDRESS OF DFHRPL DCB.                        ***
*        E X E C    I N T E R F A C E    S T O R A G E                *
DFHEISTG DSECT
IOBUFF   DS    CL240               MESSAGE AREA
IOBUFFL  DS    H                   OUTPUT LENGTH
PGMLEN   DS    F                   PROGRAM LENGTH AREA
RESPAREA DS    F                   RESPONSE CODE AREA
SAVEREG  DS    F                   SAVE AREA
WORKAREA DS    D                   DOUBLEWORD WORK AREA
PIDSAVE  DS    CL8                 PGMID WORK AREA
DUMPCD   DS    CL4                 DUMP CODE
RETRY    DS    X                   NEWCOPY RETRY COUNT
         AIF   (NOT &BLDL).NOBL02
*        BLDL PARAMETER LIST
BLLIST   DS    0F                  BLDL PARAMETER LIST -
BLENTCT  DS    H                   .. NUMBER OF ENTRIES
BLENTRY  DS    H                   .. ENTRY LENGTH
BLENTST  DS    0X                  .. 1'ST ENTRY -
BLPGMID  DS    CL8                 ..... PROGRAM ID
BLTTR    DS    0CL4                ..... DASD ADDRESS -
         DS    CL2                 ........ RELATIVE TRACK NUMBER
         DS    C                   ........ RELATIVE RECORD NUMBER
         DS    C                   ........ CONCATENATION INDEX
         DS    XL44                .. UNUSED
BLENTLN  EQU   *-BLENTST           LENGTH OF ENTRY
BLLSTLN  EQU   *-BLLIST            LENGTH OF PARAMETER LIST
*        SWA MANAGER WORK AREA
SWALIST SWAREQ MF=L                LOCATE MODE SWA MANAGER PLIST
EPAPTR   DS    A(SWAEPAA)          POINTER TO EXT. PARM. AREA
SWAEPAA  DS    XL(L'SWAEPAX)       EXTERNAL PARAMETER AREA
SWARSA   DS    18F                 RSA FOR SWAREQ CALL
.NOBL02  ANOP
NEWCPGM  DFHEIENT DATAREG=(6),CODEREG=(7)
         B     L00100
         DC    CL8'NEWCPGM'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
*        RECEIVE TERMINAL INPUT AND DETERMINE PROGRAM TO BE PROCESSED.
L00100   DS    0H
         MVC   IOBUFFL,=H'16'      SET RECEIVE LENGTH
         EXEC  CICS RECEIVE INTO(IOBUFF) LENGTH(IOBUFFL) RESP(RESPAREA)
         LA    R4,IOBUFF           ADDRESS START OF INPUT
         LH    R2,IOBUFFL          LOAD LOOP CONTROL
         CLI   IOBUFF,X'11'        SBA IN DATA?
         BNE   L00200              ..NO
         LA    R4,3(,R4)           ..YES - BUMP PAST IT
         SH    R2,=H'3'            JUST THE TRANID ENTERED?
         BZ    L00700              ..YES - ERROR
L00200   DS    0H
         LA    R4,4(,R4)           POINT PAST TRANID
         SH    R2,=H'4'            JUST THE TRANID ENTERED?
         BZ    L00700              ..YES - ERROR
L00300   DS    0H
         CLI   0(R4),C' '          BLANK SPACE?
         BE    L00600              ..YES - LOOP
         BCTR  R2,0                ..NO  - SUBTRACT 1 FROM LENGTH
         CH    R2,=H'7'            LENGTH EXCESSIVE?
         BNH   L00400              ..NO
         LA    R2,7                ..YES - TRUNCATE IT
L00400   DS    0H
         EX    R2,MOVEPID          MOVE PGMID TO WORKAREA
         OC    PIDSAVE,=CL8' '     FORCE NULLS TO SPACES
         B     L00800              GO ISSUE NERCOPY
L00600   DS    0H
         LA    R4,1(,R4)           BUMP DATA POINTER
         BCT   R2,L00300           LOOP
L00700   DS    0H
         EXEC  CICS SEND FROM(NOPID) LENGTH(=Y(NOPIDL))
         EXEC  CICS RETURN
*        PROGRAM ID (RIGHT OR WRONG) SELECTED. PERFORM THE NEWCOPY
*        AND CHECK TO SEE IF IT SUCCEEDED.
L00800   DS    0H
         EXEC  CICS INQUIRE PROGRAM(PIDSAVE) LENGTH(PGMLEN) NOHANDLE
         EXEC  CICS SET PROGRAM(PIDSAVE) NEWCOPY RESP(RESPAREA)
         CLC   RESPAREA,DFHRESP(INVREQ)
         BNE   L01000
*        THE NEWCOPY FAILED BECAUSE THE PROGRAM IS CURRENTLY IN USE.
*        WHEN THIS OCCURS WE WILL RETRY THE REQUEST THREE TIMES, AND
*        IF STILL UNSUCCESSFUL SEND A MESSAGE TO THE REQUESTOR SAYING
*        THAT THE PROGRAM WAS LIKELY LOADED WITH THE 'HOLD' OR
*        'LOADLST=NO' OPTION; THEY WILL HAVE TO RELEASE IT FIRST,
*        THEN RETRY THE REQUEST.
         LA    R3,3                LOAD LOOP CONTROL
L00900   DS    0H
         EXEC  CICS DELAY INTERVAL(1)
         EXEC  CICS SET PROGRAM(PIDSAVE) NEWCOPY RESP(RESPAREA)
         CLC   RESPAREA,DFHRESP(INVREQ)
         BNE   L01000              REQUEST COMPLETED
         BCT   R3,L00900           RETRY REQUEST
         EXEC  CICS SEND FROM(INUSE) LENGTH(=Y(INUSEL))
         B     L09999              RETURN TO CICS
*        DETERMINE IF THE NEWCOPY FAILED BECAUSE THE REQUESTED PROGRAM
*        WAS NOT IN THE PPT, AND IF SO RETURN A MESSAGE TO THAT EFFECT
*        TO THE REQUESTOR.
L01000   DS    0H
         CLC   RESPAREA,DFHRESP(PGMIDERR)       PROGRAM FOUND IN PPT?
         BNE   L01100              ..YES
         EXEC  CICS SEND FROM(NOPPT) LENGTH(=Y(NOPPTL))
         B     L09999              RETURN TO CICS
*        DETERMINE IF THE NEWCOPY FAILED BECAUSE THE REQUESTED PROGRAM
*        WAS NOT IN THE RPL, AND IF SO RETURN A MESSAGE TO THAT EFFECT
*        TO THE REQUESTOR.
L01100   DS    0H
         CLC   RESPAREA,DFHRESP(ERROR)       DID THE NEWCOPY SUCCEED?
         BNE   L01200              ..YES
         EXEC  CICS SEND FROM(NORPL) LENGTH(=Y(NORPLL))
         B     L09999              RETURN TO CICS
*        THE NEWCOPY WAS SUCCESSFUL.
*        SEND AN ACKNOWLEDGMENT TO THE REQUESTOR AND DISPLAY THE
*        LENGTH OF THE REFRESHED PROGRAM. IN ADDITION, IF THE 'BLDL'
*        OPTION IS TO BE PERFORMED, PUT THE DSN OF THE LOADLIB
*        WHERE THE NEWCOPY WAS FOUND IN THE MESSAGE.
L01200   DS    0H
         MVC   IOBUFF(OKMSGL),OKMSG MOVE THE REPLY TO THE I/O AREA
         MVC   IOBUFFL,=Y(OKMSGL)  SET MESSAGE LENGTH
         L     R1,PGMLEN           GET PREVIOUS PROGRAM LENGTH
         CVD   R1,WORKAREA         CONVERT IT
         OI    WORKAREA+7,X'0F'    SIGN IT
         ED    IOBUFF+OKLENB-OKMSG(L'OKLENB),WORKAREA+4
*                                  FORMAT IT IN THE MESSAGE
         EXEC  CICS INQUIRE PROGRAM(PIDSAVE) LENGTH(PGMLEN) NOHANDLE
         L     R1,PGMLEN           GET NEW PROGRAM LENGTH
         CVD   R1,WORKAREA         CONVERT IT
         OI    WORKAREA+7,X'0F'    SIGN IT
         ED    IOBUFF+OKLENA-OKMSG(L'OKLENA),WORKAREA+4
*                                  FORMAT IT IN THE MESSAGE
         AIF   (NOT &BLDL).NOBL03
         EXEC  CICS ADDRESS CSA(R1)
         L     R1,CSASITBA-DFHCSADS(,R1)            GET SIT ADDRESS
         L     R1,SITCOMA-DFHSITDS(,R1)     ADDRESS SIP COMMON AREA
         L     R1,SILLIBA-SIPCOM(,R1)        GET DFHRPL DCB ADDRESS
         LH    R2,DCBTIOT-IHADCB(,R1)          GET OFFSET INTO TIOT
         L     R5,16                ADDRESS THE CVT
         L     R5,0(,R5)            ADDRESS TCB POINTERS
         L     R5,4(,R5)            ADDRESS OUR TCB
         L     R5,TCBTIO-TCB(,R5)   ADDRESS OUR TIOT
         LA    R5,0(R2,R5)          ADDRESS DFHRPL'S TIOT ENTRY
         CLC   TIOEDDNM-TIOENTRY(8,R5),=CL8'DFHRPL'     IS IT RIGHT?
         BE    L01300               ..YES - CONTINUE
         MVC   DUMPCD,=C'ABN1'      ..NO  - SET DUMP CODE
         B     L01500                       AND GO TAKE DUMP
L01300   DS    0H
         MVC   BLENTCT,=H'01'      SET ENTRY COUNT TO 1
         MVC   BLENTRY,=Y(BLENTLN) SET ENTRY LENGTH TO 1
         MVC   BLPGMID,PIDSAVE     PUT PROGRAM IN IN BLDL PLIST
*        TRACE THE "BLDL" REQUEST.
         ST    R1,SAVEREG          SAVE RPL DCB ADDRESS
         XC    WORKAREA,WORKAREA   CLEAR
         MVI   WORKAREA,X'03'      INDICATE 'BLDL REQUEST'
         LA    R1,BLLIST           GET ADDRESS OF BLDL PLIST
         ST    R1,WORKAREA+4           AND PLACE IN TRACE DATA2
         EXEC  CICS ENTER TRACEID(00) FROM(WORKAREA) RESOURCE('BLDL')
         L     R1,SAVEREG          RELOAD RPL DCB ADDRESS
*        ISSUE THE BLDL.
         BLDL  0(R1),BLLIST        ISSUE BLDL
*        TRACE THE "BLDL" RESPONSE.
         ST    R15,SAVEREG         SAVE BLDL RESPONSE
         XC    WORKAREA,WORKAREA   CLEAR
         MVI   WORKAREA,X'05'      INDICATE 'BLDL RESPONSE'
         STH   R15,WORKAREA+2      SHOW BLDL RESPONSE CODE
         LA    R1,BLLIST           GET ADDRESS OF BLDL PLIST
         ST    R1,WORKAREA+4           AND PLACE IN TRACE DATA2
         EXEC  CICS ENTER TRACEID(00) FROM(WORKAREA) RESOURCE(BLPGMID)
         L     R15,SAVEREG         RELOAD BLDL RESPONSE
         LTR   R15,R15             REQUEST SUCCESSFUL?
         BZ    L01400              ..YES - CONTINUE
         MVC   DUMPCD,=C'ABN2'     ..NO   - SET DUMP CODE
         B     L01500                       AND TAKE DUMP
L01400   DS    0H
         XR    R15,R15             CLEAR
         ICM   R15,1,BLTTR+3       GET RPL CONCATENATION NUMBER
         XR    R1,R1               CLEAR
         IC    R1,TIOELNGH-TIOENTRY(,R5)        GET TIOT ENTRY LENGTH
         MR    R14,R1              COMPUTE TIOT ENTRY DISPLACEMENT
         LA    R5,0(R15,R5)        ADDRESS TIOT ENTRY
         ICM   R1,7,TIOEJFCB-TIOENTRY(R5)           GET JFCB TOKEN
         LA    R13,SWARSA          ADDRESS REGISTER SAVE AREA
         STCM  R1,7,SWAEPAA+SWVA-ZB505   PUT JFCB TOKEN IN SWAREQ PLIST
         LA    R1,SWAEPAA          ADDRESS SWA PLIST
         ST    R1,EPAPTR              AND SAVE FOR SWA MGR CALL
*        TRACE THE "SWAREQ" REQUEST.
         XC    WORKAREA,WORKAREA   CLEAR
         MVI   WORKAREA,X'03'      INDICATE 'SWAREQ REQUEST'
         ST    R1,WORKAREA+4       SHOW SWA PLIST ADDRESS
         ST    R1,SAVEREG          SAVE SWA PLIST ADDRESS
         EXEC  CICS ENTER TRACEID(00) FROM(WORKAREA) RESOURCE('SWAREQ')
         L     R1,SAVEREG          RELOAD SWA PLIST ADDRESS
*        ISSUE THE "SWAREQ" REQUEST.
         SWAREQ FCODE=LA,EPA=EPAPTR,UNAUTH=YES,MF=(E,SWALIST)
*        TRACE THE "SWAREQ" RESPONSE.
         XC    WORKAREA,WORKAREA   CLEAR
         MVI   WORKAREA,X'05'      INDICATE 'SWAREQ RESPONSE'
         STH   R15,WORKAREA+2      SHOW SWAREQ RESPONSE CODE
         LA    R1,SWAEPAA          ADDRESS SWA PLIST
         ST    R1,WORKAREA+4          AND PUT IT IN DATA2
         L     R4,SWAEPAA+SWBLKPTR-ZB505          GET THE JFCB ADDRESS
         ST    R15,SAVEREG         SAVE RETURN CODE
         EXEC  CICS ENTER TRACEID(00)                                  X
               FROM(WORKAREA) RESOURCE(JFCBDSNM-INFMJFCB(R4))
         L     R15,SAVEREG         RELOAD RETURN CODE
         LTR   R15,R15             ERROR DETECTED?
         BZ    L01600             ..NO
         MVC   DUMPCD,=C'ABN3'    ..YES - SET DUMP CODE
L01500   DS    0H
         EXEC  CICS DUMP DUMPCODE(DUMPCD) TERMINAL TASK
         EXEC  CICS SEND FROM(UNKERR) LENGTH(=Y(UNKERRL)) WAIT
         B     L01700
L01600   DS    0H
         MVC   OKDSN-OKMSG+IOBUFF(L'OKDSN),JFCBDSNM-INFMJFCB(R4)
*                                  PUT DSN OF THIS LIBRARY IN MESSAGE
L01700   DS    0H
.NOBL03  ANOP
         EXEC  CICS SEND FROM(IOBUFF) LENGTH(IOBUFFL)
         B     L09999              RETURN TO CICS
L09999   DS    0H
         EXEC  CICS RETURN
*        C O N S T A N T S    A N D    L I T E R A L S
MOVEPID  MVC   PIDSAVE(0),0(R4)    EXECUTED MVC FOR USERID
NOPID    DC    X'11C260'
         DC    C'NEWC010E: MISSING OR INVALID PROGRAM NAME...CORRECT ITX
                AND RETRY REQUEST'
NOPIDL   EQU   *-NOPID
INUSE    DC    X'11C260'
         DC    C'NEWC020E: PROGRAM IS MARKED IN USE. RELEASE IT AND RETX
               RY REQUEST.'
INUSEL   EQU   *-INUSE
NOPPT    DC    X'11C260'
         DC    C'NEWC030E: PROGRAM IS NOT DEFINED TO CICS. CORRECT AND X
               RETRY.'
NOPPTL   EQU   *-NOPPT
NORPL    DC    X'11C260'
         DC    C'NEWC040E: PROGRAM WAS NOT FOUND ON THE CICS PROGRAM LIX
               BRARY. CORRECT AND RETRY.'
NORPLL   EQU   *-NORPL
         AIF   (NOT &BLDL).NOBL04
UNKERR   DC    X'11C8F0'
         DC    C'NEWC050E: AN ERROR OCCURRED DURING BLDL PROCESSING.'
         DC    X'114A4A'
         DC    C'A DUMP WAS PRODUCED. CONTACT CICS TECH SUPPORT.'
UNKERRL  EQU   *-UNKERR
.NOBL04  ANOP
OKMSG    DC    X'11C260'
         DC    C'NEWC100I: NEWCOPY REQUEST SUCCESSFUL.'
         DC    X'11C37A'
         DC    C'OLD PROGRAM LENGTH:'
OKLENB   DC    X'40206B2020206B202120'
         DC    C' BYTES.'
         DC    X'11C54A'
         DC    C'NEW PROGRAM LENGTH:'
OKLENA   DC    X'40206B2020206B202120'
         DC    C' BYTES.'
         AIF   (NOT &BLDL).NOBL05
         DC    X'11C65A'
         DC    C'NEW COPY WAS FROM: '
OKDSN    DC    CL44'?'
.NOBL05  ANOP
OKMSGL   EQU   *-OKMSG
         LTORG
         END


Christopher Frank
Lead Systems Programmer (USA)

