Laser printing in CICS using a VT100

Many shops still use ASCII terminals to interface with their
IBM mainframes.  In our case the terminals are DEC VT100s,
with an IBM 7171 Protocol Converter handling the traffic
between them and the mainframe.

One key hardware feature of the VT100 is its 'printer port'.
By passing a certain escape sequence within a terminal write,
the printer port switch can be turned on and off
programatically.  When off, the data goes to the screen.  When
it is turned on, the data goes out of the communications port
instead.  A serial cable can be connected between this and a
laser printer's serial input.

In one specific application we wanted to generate high-quality
correspondence letters and addressed envelopes (without the
use of mailing labels) on an 'as-needed' basis in an on-line
environment.  Our users had acquired a Hewlett-Packard
Laserjet series 2-D, with two trays (one for letters, one for
envelopes).  Besides sending actual text to the laser printer, the
CICS application needed to embed certain pre-defined escape
sequences within the terminal write for such things as tray
selection and page formatting.

Instead of defining the ASCII printer itself to CICS, we defined
a VT100 terminal to CICS and attached the laser printer to it.
Any terminal writes destined for the laser printer would be
generated by a program invoked by a transaction associated
with that terminal.  Transactions on other terminals could print
something on the laser printer by starting a specific transaction
on the VT100 and passing the necessary print data stream in
the 'FROM' option.

The initial problem we ran into was the 'interference' of the
7171 with our data.  When a terminal write to the VT100 was
issued, the protocol converter passed the data through its
EBCDIC-to-ASCII translation, but with one omission: it would
not convert the EBCDIC escape character to the ASCII
equivalent.  Since the VT100 printer port feature is enabled by
the presence of an escape sequence, we were not able to turn it
on, let alone pass printer-defined escape strings.

The solution was to put the 7171 in 'transparent' mode for the
duration of the terminal write.  This is accomplished by
sending a pair of pseudo-SBA sequences at the beginning of
the terminal data.  It would then let the data pass to the
terminal untouched, escape characters and all.  This meant that
the program that does the terminal write must do its own
EBCDIC-to-ASCII conversion, but this proved to be a plus.

We customized its translation table to convert certain printable
EBCDIC characters into unprintable ASCII control characters.
For example, the backslash (\) is translated into an ASCII
escape, and the tilde (~) is translated into an ASCII carriage
return.  This simplified the coding of the COBOL programs
that created the print data.  Instead of having to edit working
storage in hexadecimal, all escape sequences could be coded
entirely as printable characters.

The resulting data stream can be summarized as follows:

1      X'115D7F110000' - this puts the 7171 in transparent
      mode.  These pseudo-SBA sequences are in EBCDIC.

2      X'1B5B3569' - tells the VT100 to send terminal data out
      the printer port.  This escape sequence is in ASCII.

3      The data to be processed by the printer, including
      embedded printer control escape sequences.  Translates
      EBCDIC-to-ASCII.

4      X'1B5B3469' - tells the VT100 to send terminal data so
      that any future terminal data is sent to the screen.  This is
      in ASCII.

The following program accomplishes the above requirements.
In addition, it provides for a free-format message to be
displayed on the VT100's screen after the data has been sent to
the printer.  Two items that should be  mentioned are:

1      The use of SEND TEXT NOEDIT keeps CICS from doing
      any modifications to our data stream.

2      The RECEIVE ASIS following the SEND handles some
      kind of unsolicited feedback coming (I presume) from the
      printer.  Without it, I kept getting an 'Invalid transaction
      identification' message after the work was done.


SOURCE CODE FOR THE PROGRAM

*ASM      XOPTS(NOEPILOG)
* PROGRAM:PRTPORT
* TRANSID:        PRTP
* INPUT:          FROM() OPTION OF START COMMAND, CONTAINING:
*                 1.  LENGTH OF  MSG TO DISPLAY AFTER PRINTING.
*                 2. THE MESSAGE ITSELF, OF THE SPECIFIED LENGTH.
*                 3. TEN BYTES TO BE OVERLAYED WITH 7171 AND VT100
*                        INFORMATION.
*                 4. DATA TO BE PROCESSED BY THE LASER PRINTER.
*                 5. FOUR BYTES TO BE OVERLAYED WITH VT100
*                        INFORMATION (PPORT OFF).
          DFHEISTG
DFHEISTG  DSECT   ,
PRTADDR   DS      F                DATA ADDR FOR SEND TO PRINTER
RTRVLEN   DS      H                RETRIEVE LENGTH
PRTLEN    DS      H                LENGTH FOR SEND TO PRINTER
RCVLEN    DS      H                RECEIVE LENGTH
RTRVAREA  DSECT   ,
RTRVMSGL  DS      H
RTRVMSG   DS      C
PRTAREA   DSECT   ,
          DS      C
PRTPORT   DFHEIENT DATAREG=R13,CODEREG=R12,EIBREG=R11
          B       STRT
          DC      CL8'PRTPORT'
          DC      CL8'date of last change'
STRT      DS      0H
*  RETRIEVE DATA PASSED TO US; MODIFY WITH 7171 & VT100 INFO...
          EXEC    CICS RETRIEVE SET(R10) LENGTH(RTRVLEN)
          USING   RTRVAREA,R10
          LR      R9,R10           POINT PAST MSGLEN & MSG...
          LA      R9,2(,R9)
          AH      R9,RTRVMSGL
          MVC     0(10,R9),=X'115D7F1100001B5B3569'
          ST      R9,PRTADDR       SAVE ADDR FOR LATER.
          LR      R9,R10           POINT TO
          AH      R9,RTRVLEN         LAST 4 BYTES
          SH      R9,=H'4'             OF DATA AREA...
          MVC     0(4,R9),=X'1B5B3469'
          LR      R9,R10           PAST MSGLEN,MSG,& PREFIX...
          LA      R9,12(,R9)
          AH      R9,RTRVMSGL
          LH      R8,RTRVLEN       LENGTH OF DATA AREA
          SH      R8,=H'16'          LESS MSGLEN,PREFIX,SUFFIX,
          SH      R8,RTRVMSGL          AND MSG ITSELF.
XLATLOOP  DS      0H
          LR      R7,R8            NUMBER OF BYTES LEFT.
          CH      R7,=H'256'       MORE THAN 256 ?
          BNH     *+8              ==> NO...
          LA      R7,256           YES, LIMIT TO 256 FOR TRANSLATE.
          BCTR    R7,0             SUBTRACT 1 FOR EXECUTE.
          EX      R7,EX@TR         TRANSLATE BYTE(S).
          LA      R7,1(,R7)        RESTORE TRUE LENGTH.
          SR      R8,R7            SUBTRACT FROM TOTAL LENGTH.
          AR      R9,R7            POINT TO NEXT BLOCK TO XLATE.
          LTR     R8,R8            ANYTHING LEFT TO TRANSLATE ?
          BNZ     XLATLOOP         ==> YES...LOOP BACK UP FOR MORE.
* SEND THE MODIFIED DATA TO THE PRINTER,
* PASSING THROUGH THE 7171 AND VT100 ON ITS WAY...
          LH      R1,RTRVLEN       RETRIEVE LENGTH
          SH      R1,=H'2'           LESS MSGLEN
          SH      R1,RTRVMSGL          LESS MESSAGE ITSELF
          STH     R1,PRTLEN              YIELDS LENGTH TO SEND.
          L       R9,PRTADDR       GET ADDRESS OF DATA AREA.
          USING   PRTAREA,R9
          EXEC    CICS SEND TEXT NOEDIT FROM(PRTAREA)                  +
                  LENGTH(PRTLEN) ERASE WAIT
          MVC     RCVLEN,=H'999'   LENGTH FOR DUMMY RECEIVE.
          EXEC    CICS RECEIVE SET(R1) LENGTH(RCVLEN) ASIS
* SEND MESSAGE TO SCREEN THEN EXIT PROGRAM...
          EXEC    CICS SEND FROM(RTRVMSG) LENGTH(RTRVMSGL)             +
                  CTLCHAR('F') ERASE
          EXEC    CICS RETURN
* CONSTANTS
          DS      0H
EX@TR     TR      0(0,R9),ASCIITAB        ** EXECUTED **
ASCIITAB  DS      0XL256
          DC      X'000102030009007F0000000B0C0D0E0F'
          DC      X'1011121300000800181900001C1D1E1F'
          DC      X'00000000000A171B0000000000050607'
          DC      X'0000160000000004000000001415001A'
          DC      X'200000000000000000005C2E3C282B7C'
          DC      X'2600000000000000000021242A293B5E'
          DC      X'2D2F00000000000000007C2C255F3E3F'
          DC      X'000000000000000000603A2340273D22'
          DC      X'00616263646566676869007B00000000'
          DC      X'006A6B6C6D6E6F707172007D00000000'
          DC      X'007E737475767778797A0000005B0000'
          DC      X'000000000000000000000000005D0000'
          DC      X'7B414243444546474849000000000000'
          DC      X'7D4A4B4C4D4E4F505152000000000000'
          DC      X'5C00535455565758595A000000000000'
          DC      X'30313233343536373839000000000000'
          ORG     ASCIITAB+X'4A'
          DC      X'1B'            LET BACKSLASH -> ESCAPE.
          ORG     ASCIITAB+A1'
          DC      X'0D'            LET TILDE -> CARRIAGE-RETURN.
          ORG     ,
          LTORG   ,
          END     PRTPORT


Lawrence Holder
Senior Programmer/Analyst
University of Tennessee at Martin (USA)             c UTM 1990


