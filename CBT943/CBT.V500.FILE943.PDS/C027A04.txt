 Shutting down CICS
When we installed CICS 1.6 and began to use the AUTOSTART feature, I found that
we nearly always had to perform an emergency restart.  Obviously something had
to be wrong and I investigated the problem.  I found that our operators always
used CSMT SHU,Y to shut down CICS.  For several reasons, I donUt like immediate
shut-down and the emergency restart that follows.  I therefore wrote the
following program, ZZPSHUT, which we now use to shut down CICS.
The benefit of the program is that we always shut down CICS normally, and are
sure that the shut-down PLT is executed.
The program is started via the transaction SHUT, eg:
%    SHUT - perform shut-down now
%    SHUT 1615 - perform shut-down at quarter past four
%    SHUT???????? (where ? = any non-blank or non-numerical character) - cancel
previously started shut-down.
PROGRAM FLOW
Check COMMAREA.
%    If not found, check input.
     %    If numerical and valid, start the transaction again at a specified
time with a COMMAREA.
     %    If there is no data, start the transaction again in 30 seconds, to
allow you to restart.
     %    If the data is non-blank and non-numerical or unrecognised, cancel the
previously started transaction.
%    If COMMAREA found
     %    If COMMAREA = 01, link to the program IESCICSD (this is only used in
VSE/SP 2.1.5 or later), to avoid error messages when all running transactions
are purged.  IESCICSD stops transaction = IESO.  If you use MPS you must link to
the TstopU program here.  Link to DFHEMTP with COMMAREA = TSET VTAM CLOSEDU to
prevent new tasks starting.  Start the transaction again in 20 seconds with
COMMAREA = 02 to let running transactions end normally.
     %    If COMMAREA = 02, link to program DFHEMTP with COMMAREA = TSET TASK
ALL FORCEPURGEU to cancel all tasks still running, eg CSSN.  Start the
transaction again in 10 seconds with COMMAREA = 03.
     %    If COMMAREA = 03, link to program DFHEMPT with COMMAREA = TPERFORM
SHUTDOWNU to shut down CICS.  End transaction.
THE PROGRAM ZZPSHUT
SHUT: PROC OPTIONS(MAIN);
/* *************************************************************** */
/* THE PROGRAM ZZPSHUT (TRANSID=SHUT) SHUTDOWN CICS IN A CONTROL-  */
/* LED MANNER.                                                     */
/* SYNTAX    SHUT             SHUTDOWN IN 1 MINUTE. YOU HAVE 30    */
/*                            SECONDS TO REGRET IT.                */
/*           SHUT 1615        SHUTDOWN CICS AT 16.15               */
/*           SHUT????????     (? = ANY NON BLANK CHAR) CANCEL      */
/*                            A PREVIOUSLY STARTED SHUTDOWN        */
/* *************************************************************** */
 DCL POINTER_TO_CSA POINTER;
 DCL CSA_POINTER    POINTER;
 DCL TCA_POINTER    POINTER;
 DCL TCTTE_POINTER  POINTER;
 DCL TIOA_POINTER   POINTER;
 DCL 1 CSA_AREA BASED(CSA_POINTER),
       2 FILLER           CHAR(76),
       2 POINTER_TO_TCA   POINTER;
 DCL   TCA CHAR(80) BASED(TCA_POINTER);
 DCL 1 TCA_AREA BASED(TCA_POINTER),
       2 FILLER           CHAR (8),
       2 POINTER_TO_TCTTE POINTER;
 DCL   TCTTE CHAR(80) BASED(TCTTE_POINTER);
 DCL 1 TCTTE_AREA BASED(TCTTE_POINTER),
       2 FILLER           CHAR(8),
       2 POINTER_TO_TIOA  POINTER;
 DCL   TIOA CHAR(80) BASED(TIOA_POINTER);
 DCL 1 TIOA_AREA BASED(TIOA_POINTER),
       2 FILLER           CHAR(12),
       2 TIOA_TRANS       CHAR(4),
        2 TIOA_BLANK       CHAR(1),
       2 TIOA_DATA        CHAR(4);
 DCL BLANK CHAR(1);
 DCL DATA  CHAR(4);
 DCL NULL1 CHAR(1) INIT(' ');    /* X'00' */
 DCL NULL4 CHAR(4) INIT('    '); /* X'00000000' */
 DCL LENGTH2             FIXED BIN(15)  INIT(2);
 DCL LENGTH80            FIXED BIN(15)  INIT(80);
 DCL INTERVAL            FIXED DEC(7,0) INIT(0);
 DCL REQUESTED_MINUTES   FIXED DEC(5,0) INIT(0);
 DCL ACTUAL_MINUTES      FIXED DEC(5,0) INIT(0);
 DCL DIFFERENCE_MINUTES  FIXED DEC(5,0) INIT(0);
 DCL NUMBER_HOURS        FIXED DEC(5,0) INIT(0);
 DCL NUMBER_MINUTES      FIXED DEC(5,0) INIT(0);
 DCL VTAM_CLOSE     CHAR(80)       INIT('SET VTAM CLOSED         ');
 DCL CICS_FORCE     CHAR(80)       INIT('SET TASK ALL FORCEPURGE ');
 DCL CICS_SHUTDOWN  CHAR(80)       INIT('PERFORM SHUTDOWN        ');
 DCL TEXT           CHAR(80);
 DCL COMM_AREA      CHAR(2);
 DCL ADDR           BUILTIN;
 DCL VERIFY         BUILTIN;
 DCL INDEX          BUILTIN;
 DCL 1 OK_TEXT,
       2 FILLER1    CHAR(25) INIT('CICS WILL BE SHUTDOWN AT '),
       2 HOUR       PIC'99',
       2 FILLER2    CHAR(1)  INIT('.'),
       2 MINUT      PIC'99',
       2 FILLER3    CHAR(9) INIT(' THAT IS '),
       2 TIMER      PIC'99',
       2 FILLER4    CHAR(11)  INIT(' HOURS AND '),
       2 MINUTS     PIC'99',
       2 FILLER5    CHAR(26) INIT(' MINUTES    ');
 DCL WORK PIC'9999999';
 DCL 1 WORK_AREA DEFINED WORK,
        2 DUMMY  CHAR(3),
        2 HOUR   PIC'99',
        2 MINUT  PIC'99';
 DCL TIME PIC'999999';
 DCL 1 TIME_AREA DEFINED TIME,
        2 HOUR   PIC'99',
        2 MINUT  PIC'99',
        2 SECOND PIC'99';
 EXEC CICS HANDLE CONDITION
           LENGERR  (START)
           ENDDATA  (START);
 /* ************************************************************** */
 /* IF 'EXEC CICS RETRIEVE' GIVES LENGERR OR ENDDATA, TRANSACTION  */
 /* HAS BEEN STARTED FROM TERMINAL. THEN GOTO START, WHERE WE ANA- */
 /* LYSE INPUT.                                                    */
 /* IF OK, TRANSACTION HAS BEEN STARTED VIA 'EXEC CICS START TRANS'*/
 /* AND WE THEN BEGIN THE SHUTDOWN PROCESS.                        */
 /* ************************************************************** */
 EXEC CICS RETRIEVE
           INTO     (COMM_AREA)
           LENGTH   (LENGTH2);
 /* **************************************************************** */
 /* WE COME HERE IF NOT LENGERR AND NOT ENDDATA, I.E STARTED VIA     */
 /* "EXEC CICS START TRANS", AND BEGIN SHUTDOWN.                     */
 /* **************************************************************** */
 /* IF COMM AREA = '01':                                             */
 /*                        LINK TO IESCICSD (STOPS IESO)             */
 /*                        LINK TO PROGRAM TO STOP MPS. NOT IMPLEMENT*/
 /*                        SET VTAM CLOSE                            */
 /*                        COMM AREA = '02'                          */
 /*                        START TRANS 'SHUT' AGAIN AFTER 30 SEC.    */
 /*                        EXEC CICS RETURN                          */
  /* IF COMM AREA = '02'    SET TASK ALL FORCEPURGE                   */
 /*                        COMM AREA = '03'                          */
 /*                        START TRANS 'SHUT' AGAIN AFTER 10 SEC.    */
 /*                        EXEC CICS RETURN                          */
 /* IF COMM AREA = '03'    SHUTDOWN                                  */
 /*                        EXEC CICS RETURN                          */
 /* **************************************************************** */
 IF COMM_AREA = '01' THEN DO;
     EXEC CICS LINK PROGRAM('IESCICSD'); /* STOPS TRANS IESO */
     EXEC CICS LINK                      /* SET VTAM CLOSED */
               PROGRAM  ('DFHEMTP')
               COMMAREA (VTAM_CLOSE)
               LENGTH   (LENGTH80);
     COMM_AREA = '02';
     INTERVAL  = 30;
     EXEC CICS START
               TRANSID  ('SHUT')
               INTERVAL (INTERVAL)
               FROM     (COMM_AREA)
               LENGTH   (LENGTH2)
               TERMID   ('CNSL')
               REQID    ('SHUT02');
     EXEC CICS RETURN;
 END;
 IF COMM_AREA = '02' THEN DO;
     EXEC CICS LINK
               PROGRAM  ('DFHEMTP')
               COMMAREA (CICS_FORCE)     /* SET TRANS ALL FORCEPURGE */
               LENGTH   (LENGTH80);
     COMM_AREA = '03';
     INTERVAL  = 10;
     EXEC CICS START
               TRANSID  ('SHUT')
               INTERVAL (INTERVAL)
               FROM     (COMM_AREA)
               LENGTH   (LENGTH2)
               TERMID   ('CNSL')
               REQID    ('SHUT03');
     EXEC CICS RETURN;
 END;
 IF COMM_AREA = '03' THEN DO;
     EXEC CICS LINK
               PROGRAM  ('DFHEMTP')       /* PERFORM SHUTDOWN */
               COMMAREA (CICS_SHUTDOWN)
               LENGTH   (LENGTH80);
     EXEC CICS RETURN;
 END;
 START:
 /* **************************************************************** */
 /* CHECK SYNTAX:  SHUT        SHUTDOWN                              */
 /*                SHUT 1615   SHUTDOWN AT 16.15 OCLOCK              */
 /*                SHUT?????   CANCEL SHUTDOWN                       */
 /* **************************************************************** */
 EXEC CICS ADDRESS CSA(POINTER_TO_CSA);
 CSA_POINTER   = POINTER_TO_CSA;      /* ADDRESS CSA   */
 TCA_POINTER   = POINTER_TO_TCA;      /* ADDRESS TCA   */
 TCTTE_POINTER = POINTER_TO_TCTTE;    /* ADDRESS TCTTE */
 TIOA_POINTER  = POINTER_TO_TIOA;     /* ADDRESS TIOA  */
 BLANK = TIOA_BLANK;
 DATA  = TIOA_DATA;
 IF DATA   = NULL4 THEN DATA  = '     ';
 IF BLANK  = NULL1 THEN BLANK = ' ';
 IF VERIFY(DATA,'0123456789') = 0 THEN GOTO CALCULATE_TIME;
 IF BLANK  = ' ' & DATA = ' ' THEN GOTO NORMAL;
 GOTO CANCEL;
NORMAL:
  /* START THIS TRANSACTION AGAIN, AFTER 30 SECONDS.                 */
 COMM_AREA = '01';
 INTERVAL  = 30;
 EXEC CICS START
           TRANSID  ('SHUT')
           INTERVAL (INTERVAL)
           FROM     (COMM_AREA)
           LENGTH   (LENGTH2)
           TERMID   ('CNSL')
           REQID    ('SHUT01');
 TEXT = 'SHUTDOWN IN PROGRESS, YOU HAVE 30 SECONDS TO REGRET ';
 GOTO END OF PROGRAM;
CANCEL:    /* CANCEL A PREVIOUSLY STARTED SHUTDOWN */
 EXEC CICS HANDLE CONDITION INVREQ(INVREQ)
                            NOTFND(NOTFND);
 EXEC CICS CANCEL REQID('SHUT01')
                  TRANSID('SHUT');
 TEXT = 'TRANS = SHUT HAS BEEN STOPPED ';
 GOTO END_OF_PROGRAM;
INVREQ:
 TEXT = 'TRANS = SHUT CANCEL GAVE INVREQ, CONTACT SYSTEMPROGRAMMER';
 GOTO END_OF_PROGRAM;
NOTFND:
 TEXT = 'TRANS = SHUT WAS NOT STARTED';
 GOTO END_OF_PROGRAM;
CALCULATE_TIME:
 /* **************************************************************** */
 /* CALCULATE REQUESTED TIME (FROM TIOA) AND ACTUAL TIME (FROM EIB-  */
 /* TIME TO MINUTES. SUBTRACT ACTUAL FROM REQUESTED, IF NEGATIVE     */
 /* ERROR. IF POSITIVE CALCULATE HOURS AND MINUTES FROM DIFFERENCE   */
 /* **************************************************************** */
 WORK = DATA;
 TIME = EIBTIME; /* DONT USE PL/1 BUILTIN-FUNCTION TIME, RESULT IS
                    UNPREDICTABLE */
 REQUESTED_MINUTES  = WORK_AREA.HOUR * 60;
 REQUESTED_MINUTES  = REQUESTED_MINUTES + WORK_AREA.MINUT;
 ACTUAL_MINUTES     = TIME_AREA.HOUR * 60;
 ACTUAL_MINUTES     = ACTUAL_MINUTES + TIME_AREA.MINUT;
 DIFFERENCE_MINUTES = REQUESTED_MINUTES - ACTUAL_MINUTES;
 IF DIFFERENCE_MINUTES < 0 THEN DO; /* ERROR: REQUESTED < ACTUAL */
    TEXT = 'ERROR, REQUESTED TIME IS LESS THAN ACTUAL TIME ';
    GOTO END_OF_PROGRAM;
 END;
 /* **************************************************************** */
 /* NOW WE KNOW THAT DIFFERENCE MINUTES IS POSITIVE, CALCULATE HOURS */
 /* AND MINUTES. PLACE RESULT IN INTERVAL (FIX DEC)                  */
 /* **************************************************************** */
 NUMBER_HOURS   = 0;
 NUMBER_MINUTES = 0;
 DO WHILE (DIFFERENCE_MINUTES >= 60);
    NUMBER_HOURS = NUMBER_HOURS + 1;
    DIFFERENCE_MINUTES = DIFFERENCE_MINUTES - 60;
 END;
 NUMBER_MINUTES = DIFFERENCE_MINUTES;
 /* INTERVAL (FIX DEC) LAYOUT = '0HHMMSS'  */
 INTERVAL = 0;                                 /* SECONDS */
 INTERVAL = INTERVAL + NUMBER_MINUTES * 100;   /* MINUTES */
 INTERVAL = INTERVAL + NUMBER_HOURS   * 10000; /* HOURS   */
 COMM_AREA = '01';
 EXEC CICS START
           TRANSID  ('SHUT')
           INTERVAL (INTERVAL)
           FROM     (COMM_AREA)
           LENGTH   (LENGTH2)
           TERMID   ('CNSL')
           REQID    ('SHUT01');
  OK_TEXT.HOUR   = WORK_AREA.HOUR;
 OK_TEXT.MINUT  = WORK_AREA.MINUT;
 OK_TEXT.TIMER  = NUMBER_HOURS;
 OK_TEXT.MINUTS = NUMBER_MINUTES;
 EXEC CICS SEND TEXT
           FROM   (OK_TEXT)
           LENGTH (LENGTH80)
           ERASE
           FREEKB;
 EXEC CICS RETURN;
END_OF_PROGRAM:
 EXEC CICS SEND TEXT
           FROM   (TEXT)
           LENGTH (LENGTH80)
           ERASE
           FREEKB;
 EXEC CICS RETURN;
END SHUT;


Per Vium
Systems Manager
FalckUs Redningskorps A/S (Denmark)     ) Xephon 1988











































