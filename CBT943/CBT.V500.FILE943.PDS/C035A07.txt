 Cross-reference of PCT and SNT
In our Data Centre we protect resources by using transactions with standard CICS
security.  Because of the number of transactions and operators itUs a little
difficult to see which operator has been allowed to call which transaction.  As
it is not very practical to give everybody access to the SNT because all the
passwords are there, I wrote a program that creates some cross-references
between the PCT and SNT.
The program XPCTSNT produces five reports:
1    An alphabetical list of all transaction codes with the security codes
assigned to them.
2    A list of all transaction codes that are unprotected.
3    A list of all operators with their security codes and all transactions to
which they are allowed access.
4    A list of all transaction codes with all operators who may call them.
5    A list of all security codes from 2 to 64 with all transactions assigned to
this code and all operators who are allowed to call them.
This program has worked fine with VSE/SP 2.1.4 and CICS 1.6.0 but beware; the
SNT is not suffixed, so watch out for the LIBDEF if you have more than one CICS
system and more than one SNT.
THE JCL
* $$ JOBXPCTSNT,CLASS=H,DISP=D
// JOB XPCTSNT
// LIBDEF PHASE,SEARCH=CICSLIB,TEMP (-- Lib where target-Snt resides
// EXEC XPCTSNT,SIZE=150K
DFHPCTOA DFHSNT   X     (-- Pct-Phase,Snt-Phase. X for Cross.Ref.
$$ lst class=E,disp=D   (-- Power-lst-Card without the asterisk
/*
/&
* $$ EOJ
THE SOURCE CODE
WK       TITLE 'CROSS-REFERENCE OF PCT AND SNT'
ANF      BALR  R2,0
         USING *,R2,R3
         LA    R15,1
         LA    R3,4095(R15,R2)
         LA    R13,SAVEAREA
         OPEN  TCARD
* PROCESS AND CHECK OPTIONS-CARD                         *
         GET   TCARD,INP        GET OPTION CARD WITH ...
         MVC   PCTNA,INP               NAME OF THE PCT-PHASE
         MVC   SNTNA,INP+9             NAME OF SNT
         MVC   XOPT,INP+18             SHOULD CROSS REF. BE CREATED ?
*                                      CHECK WHATS TO DO...
         CLC   PCTNA(2),=C'  '         PCT SPECIFIED ?
         BE    EXIT2                   IF NOT .. EXIT
         CLC   SNTNA(2),=C'  '         SNT SPECIFIED ?
         BNE   LSTCRD                  IF YES LETS WORK,ELSE..
         MVI   XOPT,C' '               NO CROSS REF POSSIBLE
LSTCRD   MVC   TCARD+29(3),=AL3(LSTCRD04)  IGNORE EOF ....
         GET   TCARD,INP               SECOND OPTION-CARD
         CLC   INP(7),LSTCARD1+2       IS IT A '$$ LST ' CARD?
         BNE   LSTCRD04                IF NOT USE DEFAULT
LSTCRD02 MVC   LSTCARD1+2,INP            MOVE NEW LST-CARD
*              X-LST-0 IS THE LIST OF ALL TRANS WITH SEC.
LSTCRD04 MVC   LSTNAM,=C'X-LST-0 ' MOVE NAME FOR HEADER
         LA    R1,LSTCARD1
         SEGMENT DVADDR=SYSLST,JECL=(1),NAME=X-LST-0
         OPEN  LISTE
LOAPCT   MVC   PHASNA,PCTNA            LOAD THE PCT INTO STORAGE
         BAL   R1,PLOAD
         L     R9,STRADR               HERE'S THE PHASE
         LA    R9,164(R9)              LOAD OFFSET,HERE'S THE ADDRESS
         MVC   PTABST,0(R9)            WHERE THE REAL PCT BEGINS
         LA    R9,28(R9)               AND HERE STARTS..
         MVC   PINXST,0(R9)                    ..THE INDEX
         MVC   LTRANID,=C'TRANS-ID  '       WRITE THE HEADER-LINE
          MVC   LSECCU(7),=C'SEC-KEY'        WITH SOME INFOS
         BAL   R1,HDRSUFFX
         MVI   ZWFELD,C'1'
         PUT   LISTE
         MVI   ZWFELD,C'*'
         MVC   ZWFELD+1(121),ZWFELD
         MVI   ZWFELD,X'40'
         PUT   LISTE
         MVI   ZWFELD,X'40'
         MVC   ZWFELD+1(L'ZWFELD-1),ZWFELD
         PUT   LISTE
         L     R0,PCTSZ           GET STORAGE FOR PCT
         GETVIS ADDRESS=(1),LENGTH=(0)
         LTR   R15,R15
         BNZ   EXIT2
         ST    R1,PCTTABA         STORE THE START OF STORAGE
         L     R12,PCTTABA
         USING PCTTAB,R12
SELECT   CLC   =CL4'8888',0(R9)   THATS THE LAST ENTRY
         BE    SELPEND            END OF PCT
         SR    R4,R4              CLEAR
         L     R5,PTABST          LOAD ADRESS OF REAL PCT
         LH    R4,4(R9)           LOAD THE INDEX COUNTER BEHIND TRANID
         SLA   R4,2               MULT BY 4(OFFSET FROM STRT IN FULLW)
         LA    R5,0(R4,R5)        ADD TO START OF PCT-ADR
         ICM   R6,0001,15(R5)     NOW HERE'S THE SEC-KEY (1 BYTE)
         STH   R6,PCTSECX         SAVE FOR LATER
         BAL   R1,TRANSSEC        TRANSLATE ROUTINE
         LH    R6,PCTSECX         RESTORE FOR PRINT
         MVC   PCTTRAN,0(R5)      MOVE TRANID TO TAB
         MVC   PCTPROG,20(R5)     MOVE PROG   TO TAB
         AH    R12,=H'22'         NEXT TAB-ENTRY
*                                 PRINT THE PCT
SELECT02 MVC   LTRANID,0(R9)      MOVE TRANID LIST
         CVD   R6,SECCP           CONVERT IN ZW-FIELD
         OI    SECCP+7,X'0F'      SKIP THE SIGN
         UNPK  LSECCU,SECCP+6(2)  MAKE IT READABLE
         MVI   LSECCU,X'40'       SKIP FIRST ZERO
         LA    R9,6(R9)           LOAD ADR OF NEXT INDEX-ENTRY
         PUT   LISTE              WRITE LIST
         B     SELECT             GET NEXT
SELPEND  MVI   PCTTRAN,X'FF'           MARK END OF TAB
         CLI   SNTNA,C' '              IS SNT REQ ?
         BE    EXIT1                   IF NOT EXIT
* NOW LOAD THE SNT..                                     *
         MVC   PHASNA,SNTNA       LOAD THE PHASE
         BAL   R1,PLOAD
         L     R9,STRADR          HERE'S THE PHASE
         LA    R9,24(R9)          LOAD OFFSET,HERE'S THE ADDRESS
         USING DFHSNNT,R9
GETSNTS  L     R0,SNTSZ           GET STORAGE FOR SNT-TAB
         GETVIS ADDRESS=(1),LENGTH=(0)
         LTR   R15,R15
         BNZ   EXIT2
         ST    R1,SNTTABA         STORE THE START OF STORAGE
         L     R11,SNTTABA        ADDRESS THE TAB IN GETVIS
         USING SNTTAB,R11         ...
SELSNT   CLI   SNNTIND,X'FF'      THATS THE LAST ENTRY
         BE    SNTGETE            END OF SNT
         MVC   SNTSECX,SNNTSKE    MOVE SEC.KEY EXTENSION
         MVC   SNTSECK,SNNTSK     MOVE SEC.KEY
         MVC   SNTNAME,SNNTN      MOVE NAME
         MVC   SNTOPID,SNNTID     MOVE OPID
         AH    R9,=H'48'          NEXT ENTRY IN INPUT..
         AH    R11,=H'25          NEXT ENTRY IN GETVIS
         B     SELSNT             AND LOOP
 SNTGETE  MVI   SNTNAME,X'FF'      FLAG EOF
         BAL   R1,BUBBLES         SORT IT
* PRINT ALL OP WITH THEIR TRANSID'S                  *
* NOW WE HAVE TWO TABS. PCT AND SNT.
*  WE PRINT THE FOLLOWING LISTS:
* A) ALL TRANID WITHOUT SECURITY-CODE (01)
*    THEY APPEAR ONLY IN THIS LIST !
* B) ONE PAGE PER OPERATOR WITH ALL TRANIDS HE IS AUTHORIZED
* C) ONE PAGE PER TRANID WITH ALL OPERATORS WHICH MAY CALL IT.
* D) FOR EACH SEC-CODE BETWEEN 2 AND 64 WE PRINT THE TRANIDS
*    WHICH ARE ASSIGNED TO IT, AND ALL OPERATORS WHO HAVE
*    ACCESS TO THIS KEY.
XSNTPCT  EQU   *             (XSP)     A)
         MVC   LSTNAM,=C'X-LST-A ' MOVE NAME FOR HEADER
         LA    R1,LSTCARD1
         SEGMENT DEVADDR=SYSLST,JECL=(1),NAME=X-LST-A
         BAL   R1,PRTALL1              FIRST PRINT ALL WITH SEC1
         MVC   LSTNAM,=C'X-LST-B ' MOVE NAME FOR HEADER
         LA    R1,LSTCARD1             B)
         SEGMENT DEVADDR=SYSLST,JECL=(1),NAME=X-LST-B
         L     R11,SNTTABA             START OF SNT
XSP002   BAL   R1,PRTSNT               FIRST PRINT SNT
         BAL   R1,SEAPCT               NOW SEARCH PCT
         AH    R11,=H'25'
         CLI   SNTNAME,X'FF'
         BNE   XSP002
         MVC   LSTNAM,=C'X-LST-C ' MOVE NAME FOR HEADER
         LA    R1,LSTCARD1             C)
         SEGMENT DEVADDR=SYSLST,JECL=(1),NAME=X-LST-C
         L     R12,PCTTABA             START OF PCT
XSP004   BAL   R1,PRTPCT               PRINT THE PCT-ENTRY..
         BAL   R1,SEASNT               ..WITH ALL AUTHORIZED OP'S
XSP006   AH    R12,=H'22'            NEXT TRANSA..
         CLI   PCTTRAN,X'FF'         ..IF NOT END OF TAB
         BNE   XSP004
         MVC   LSTNAM,=C'X-LST-D ' MOVE NAME FOR HEADER
         LA    R1,LSTCARD1             D)
         SEGMENT DEVADDR=SYSLST,JECL=(1),NAME=X-LST-D
         BAL   R1,PRTGRP               PRINT GROUPS
         B     EXIT1
* PRINT ALL TRANS WITH SEC=01                          *
         DS    F
PRTALL1  ST    R1,*-4
         MVI   ZWFELD,X'40'             CLEAR
         MVC   ZWFELD+1(L'ZWFELD-1),ZWFELD
         MVI   ZASA,C'1'
         MVC   SNTKON(L'SK5),SK5       MOVE KON INFO
         BAL   R1,HDRSUFFX
         PUT   LISTE                   PRINT IT
         MVI   ZASA,C'-'
         LA    R11,SEC01
         MVI   SWITCH+1,X'10'        SWITCH FOR PRINT 01
         BAL   R1,SEAPCT             NOW SEARCH PCT
         MVI   SWITCH+1,X'00'        NOW DONT PRINT 01 ANYMORE
         L     R1,PRTALL1-4
         BR    R1
* PRINT FOR ALL SEC-CODES ALL TRANSIDS AND OPERATORS    *
         DS    F
PRTGRP   ST    R1,*-4
         SR    R6,R6
         AH    R6,=H'1'                SKIP TRANSSEC 1
PRTGRP02 AH    R6,=H'1'                NEXT TRANSSEC
         CH    R6,=H'64'               MAX REACHED ?
         BH    PRTGRPE                 THEN EXIT
         ST    R6,SAVR6
         MVI   ZWFELD,X'40'            CLEAR
          MVC   ZWFELD+1(L'ZWFELD-1),ZWFELD
         MVI   ZASA,C'1'
         MVC   SNTKON,SK7              MOVE KON SEC-KEY
         CVD   R6,SECCP                CONVERT IN ZW-FIELD
         OI    SECCP+7,X'0F'           SKIP THE SIGN
         UNPK  SNTVAR-1(3),SECCP+6(2)  MAKE IT READABLE
         MVI   SNTVAR-1,X'40'          SKIP FIRST ZERO
         BAL   R1,HDRSUFFX
         PUT   LISTE
         MVI   ZASA,C'-'
         LA    R12,GSCHAB              THATS A DUMMY-ENTRY
         MVC   GSCHAB,=XL8'00'         CLEAR FIELD
         BAL   R1,TRANSSEC             TRANSLATE CURRENT VALUE INTO IT
         BAL   R1,SEASNT               NOW SEARCH SNT
         LA    R11,GSCHAB
         BAL   R1,SEAPCT               NOW SEARCH PCT
         L     R6,SAVR6                RESTORE INITIAL VALUE
         B     PRTGRP02                LOOP
PRTGRPE  L     R1,PRTGRP-4
         BR    R1
*        PRINT THE SNT-ENTRY                                    *
*        ENTRY VALUES : R11 POINTS TO A VALID SNT-TAB-ENTRY
*         THIS ENTRY IS PRINTED WITH NAME,OPID AND SECURITY
         DS    F
PRTSNT   ST    R1,*-4
         MVI   ZWFELD,X'40'            CLEAR
         MVC   ZWFELD+1(L'ZWFELD-1),ZWFELD
         MVI   ZASA,C'1'
         MVC   SNTKON,SK1              MOVE KON OPER-NAME
         MVC   SNTVAR(14),SNTNAME      MOVE OPER-NAME
         BAL   R1,HDRSUFFX             PUT DATE AND SUFFIX INTO HEADER
         MVI   ZWFELD,C'1'
         PUT   LISTE                   PRINT IT
         MVI   ZWFELD,X'40'            CLEAR
         MVC   ZWFELD+1(L'ZWFELD-1),ZWFELD
         MVI   ZASA,C'-'
         MVC   SNTKON,SK2              MOVE KON OPER-ID
         MVC   SNTVAR(14),=CL14' '     CLEAR
         MVC   SNTVAR(3),SNTOPID       MOVE OPER-ID
         PUT   LISTE                   PRINT IT
         MVC   SNTKON,SK3              MOVE KON SEC-KEYS
         LA    R1,SNTVAR
         SR    R0,R0
         STM   R0,R1,SAVEAREA
         LA    R10,SNTSEC+7            BEGIN AT THE TAIL
         SR    R9,R9                   HERE WE COUNT THE BYTES
         SR    R6,R6                   FOR BCT ON BYTE-BOUNDARY
         LA    R6,8
PS003    SR    R5,R5                   HERE WE COUNT THE BITS
         LA    R8,BITTAB               HERE ALSO THE TAIL
         SR    R7,R7                   FOR BCT ON BIT-BOUNDARY
         LA    R7,8
PS004    MVC   TMINS+1(1),0(R8)        DYNAMICALLY ALTERED INSTRUCTION
*                                      WE MOVE TOWARDS THE TOP
TMINS    TM    0(R10),X'00'            TEST THIS BIT
         BO    PS010                   IF ON THIS SEC. IS REQ.
PS006    AH    R5,=H'1'                ONE BIT MORE
         AH    R8,=H'1'                ONE BIT MORE
         BCT   R7,PS004                NEXT IF NOT ALREADY ALL 8
         AH    R9,=H'1'                ELSE ONE BYTE MORE
         SH    R10,=H'1'               ONE BYTE BEFORE THE LAST
         BCT   R6,PS003                8 TIMES FOR 8 BYTES
         CLC   SNTVAR,=C' '            IS PRT-LINE BLANK ?
         BE    PS008                   IF YES,DON'T PRINT
         MVI   SNTVAR,C' '             KILL KOMMA
         PUT   LISTE                   ELSE PRINT
          MVI   ZASA,C' '
PS008    L     R1,PRTSNT-4
         BR    R1
*  WE MUST MULTIPLY THE BYTE-NO IN R9 WITH 8 AND ADD THE BIT-NO
* IN REG 5 TO GET THE SEC-KEY
PS010    LM    R0,R1,SAVEAREA
         STM   R5,R10,SAVEAREA      SAVE THE IMPORTANT REGISTERS
         M     R8,=F'8'             R8 IS DESTROYED ! R9 CONT. MULT.
         AR    R9,R5                ADDING BIT-NO GIVING SEC-KEY
         AH    R9,=H'1'
         CVD   R9,SECCP           CONVERT IN ZW-FIELD
         OI    SECCP+7,X'OF'      SKIP THE SIGN
         UNPK  0(3,R1),SECCP+6(2) MAKE IT READABLE
         MVI   0(R1),C','         KILL FIRST ZERO WITH COMMA
         AH    R1,=H'3'
         AH    R0,=H'1'
         CH    R0,=H'30'
         BL    PS012
         MVI   SNTVAR,C' '
         PUT   LISTE                   PRINT IT
         LA    R1,SNTVAR
         SR    R0,R0
         MVI   ZWFELD,X'40'            CLEAR
         MVC   ZWFELD+1(L'ZWFELD-1),ZWFELD
PS012    LM    R5,R10,SAVEAREA      RELOAD REGISTERS
         STM   R0,R1,SAVEAREA
         B     PS006
The remainder of the source code for this cross-reference program will appear in
next monthUs issue.

Werner Kraibuhler
Systems Programmer
Heckler & Koch (West Germany) ) Xephon 1988

































