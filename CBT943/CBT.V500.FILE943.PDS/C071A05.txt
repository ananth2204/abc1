CICS security - part two (continued)

Part 2 of our look at CICS security is continued this month,
with the publication of the source code for the program, SNP3,
and its associated map, SIGNMP3.


SNP3 PROGRAM SOURCE CODE

         DFHCOVER
         COPY  KEYEQ                                                     note 1
         COPY  DFHCSADS
         COPY  DFHTCADS
** TWA **
PPRI     DS    D
SEC      DS    F
ALIGN    DS    0F                      MAKES USE OF ERR FIELD TO
*                                         ENSURE CORRECT ALIGNMENT
ERR      DS    CL25
RECKEY   DS    0CL21
KEYLEN   DS    CL1
VKEY     DS    CL20
WSEC     DS    CL1
REQIND   DS    CL1
USERNAME DS    CL20
FLD1     DS    CL9
FWACBAR  EQU   8
BASE     EQU   9
TIOABAR  EQU   10
TCTTEAR  EQU   11
         COPY  DFHTCTTE
         COPY  DFHTIOA
TREC     DS    0CL30
         COPY  SIGNMP3
         COPY  DFHFWADS
RECORD   DS    0CL80
VNAME    DS    CL20                    OPERATOR NAME
VPW      DS    CL4                     OPERATOR PASSWORD
VOPID    DS    CL3                     OPERATOR ID
VSEC     DS    CL3                     OPERATOR SECURITY
VOPPRI   DS    CL1                     OPERATOR PRIORITY
VDATLUP  DS    CL4                     DATE LAST UPDATED
VDATLUS  DS    CL4                     DATE LAST USED
         DS    CL8                     OLD PASSWORDS
VGPW     DS    CL4                     GENER/OL PASSWORD
VUSERNAM DS    CL20                    USERS NAME
VLASTGO  DS    CL1                     LAST CHANCE TO CHANGE PASSWORD
SNP3     CSECT
         BALR  BASE,0
         USING *,BASE
         L     TCTTEAR,TCAFCAAA
         L     TIOABAR,TCTTEDA
         BAL   R7,TFREE
START    EQU   *
         BAL   R7,GETSTOR              GET TERMINAL STORAGE
         DFHBMS TYPE=(OUT,ERASE,WAIT),DATA=YES,MAP=SIGNMP3
A01      EQU   *                       READ RESPONSE
         DFHBMS TYPE=IN,MAP=SIGNMP3
         L     TIOABAR,TCTTEDA
         CLI   TCTTEAID,CLEAR          FINISHED ?
         BE    CLEARED
         MVC   REQIND,TCTTEAID         STORE TYPE OF REQUEST
         CLI   TCTTEAID,PF2            BROWSE ?
         BE    C01
         CLI   TCTTEAID,PF5            SCAN USER NAMES ?                 note 2
         BE    D01
         CLC   SM3NAMEL,=H'0'          WAS A NAME TYPED? (VSAM KEY)
         BNE   A05
         MVC   ERR(15),=C'NO NAME ENTERED' - ONLY OK FOR BROWSE
A02      EQU   *
         LA    R7,A01                  WRITE ERROR AND RESTART
         B     TWRITE
A05      EQU   *
         MVC   VKEY,SM3NAMEI           MOVE NAME TO TWA
         CLI   TCTTEAID,ENTER          NEW RECORD ?
         BNE   B01                         NO - UPDATE
         CLC   SM3PWL,=H'0'            CHECK REQD FIELDS ENTERED
         BE    A10                         NO PASSWORD SO ERROR
         CLC   SM3OPIDL,=H'0'          OP ID ALSO REQUIRED
         BNE   A20
A10      EQU   *
         MVC   ERR(22),=C'REQUIRED FIELD MISSING'
         B     A02
A20      EQU   *                       CHECK IF RECORD ALREADY EXISTS
         DFHFC TYPE=GET,DATASET=V999,RDIDADR=VKEY,SRCHTYP=FKEQ,        *
               MODE=MOVE,NOTFIND=A25,ERROR=DUMP
         MVC   TCASCSA,TCAFCAA          FREE OFF FILE STORAGE
         BAL   R7,FREEST
         MVC   ERR(14),=C'ALREADY EXISTS'   AND SEND MESSAGE
         B     A02
A25      EQU   *
         DFHFC TYPE=RELEASE            TO CLEAR AFTER NOTFND CONDITION
         BAL   R7,GETAREA              GET FILE AREA TO BUILD NEW REC
         MVC   VNAME,VKEY              AND MOVE IN FIELDS
         XR    R2,R2                                                     note 3
         MVC   ALIGN,SM3PWI                                                 |
         L     R3,ALIGN                PUT PASSWORD INTO R3                 |
         SLDL  R2,3                    SHIFT RT. 3, (1ST 3 BITS IN R2)      |
         ST    R2,ALIGN                PUT SHIFTED PW INTO FLD1             |
         MVC   FLD1+1(4),ALIGN                                              |
         ST    R3,ALIGN                                                     |
         MVC   FLD1+5(4),ALIGN                                              |
         MVC   FLD1(4),FLD1+4          NOW MOVE 1ST 4 BYTES AND             |
         NC    FLD1(4),=X'07070707'       ZEROIZE ALL BUT LAST 3 BITS       |
         NC    FLD1+5(4),=X'F8F8F8F8'     AND 1ST 5 BITS OF REST OF PW      |
         OC    FLD1(4),FLD1+5          THIS PUTS THE TWO TOGETHER           |
         L     R3,CSAJYDP              PUT DATE PW CREATED IN R3            |
         SRA   R3,4                       AND REMOVE SIGN BITS              |
         STC   R3,FLD1+8               PUT LAST TWO CHARS OF DATE IN        |
         XC    FLD1+0(1),FLD1+8           TO FLD1, AND USE IT TO CHANGE     |
         XC    FLD1+1(1),FLD1+8           THE PASSWORD BYTE                 |
         XC    FLD1+2(1),FLD1+8                                             |
         XC    FLD1+3(1),FLD1+8                                             |
         MVC   VPW,FLD1                PUT ENCRYPTED PW IN RECORD        note 3
         MVC   VOPID,SM3OPIDI
         CLC   SM3GPWL,=H'0'           IS A GENER/OL PASSWORD REQUIRED
         BE    *+10
         MVC   VGPW,SM2GPWI                YES, SO FILL IN
         MVC   VUSERNAM,SM3USERI       FILL IN USERS NAME
         MVC   SEC,=F'1'               FIRST SECURITY CODE (ALL HAVE)
         L     R3,SEC
         BAL   R7,SECCODES             BUILD SECURITY CODE FIELD
         MVC   VSEC,SEC+1                  AND MOVE TO RECORD AREA
         PACK  PPRI,SM3OPRI            BUILD OPERATOR PRIORITY
         CVB   R1,PPRI
         STC   R1,VOPPRI
         BAL   R7,TFREE
         MVC   VDATLUP,CSAJYDP         DATE LAST UPDATED
         ZAP   VDATLUS,=PL1'0'         ZEROIZE DATE LAST USED
         MVI   VLASTGO,C'0'            SET PASSWORD JUST CHANGED
         LA    R7,START                AFTER ADDING, BACK TO 1ST SCREEN
         B     ADDREC
B01      EQU   *                       UPDATE EXISTING RECORD
         BAL   R7,TFREE
         BAL   R7,GETREC               GET RECORD TO BE UPDATED
B10      EQU   *                       WRITE RECORD TO SCREEN
         BAL   R7,GETSTOR              TERMINAL STORAGE AREA
         MVC   SM3PWO,VPW
         CLI   REQIND,PF12             FOR UNENCRYPTED PASSWORDS         note 4
         BE    B15                                                          |
         MVC   FLD1+4(4),VPW           PUT ENCRYPTED PW IN FLD1             |
         MVC   ALIGN,VDATLUP                                                |
         L     R3,ALIGN                PUT DATE PW CREATED IN R3            |
         SRA   R3,4                    REMOVE SIGN BITS                     |
         STC   R3,FLD1                 PUT 2 CHARS OF DATE INTO FLD1        |
         XC    FLD1+4(1),FLD1          START DECRYPTION                     |
         XC    FLD1+5(1),FLD1                                               |
         XC    FLD1+6(1),FLD1                                               |
         XC    FLD1+7(1),FLD1                                               |
         MVC   FLD1(4),FLD1+4                                               |
         NC    FLD1(4),=X'07070707'                                         |
         NC    FLD1+4(4),=X'F8F8F8F8'                                       |
*                                      NOW NEED TO SEPARATE 1ST 5 AND       |
         L     R3,FLD1+4                  LAST 3 BITS BEFORE SHIFTING       |
         SRL   R3,3                    RESTORE BITS 3 TO 7                  |
         ST    R3,FLD1+4                                                    |
         L     R3,FLD1                 3 LEAST SIGNIFICANT BITS NOW TO      |
         SLL   R3,5                       BE MOVED TO MOST SIGNIFICANT      |
         ST    R3,FLD1                                                      |
         OC    FLD1(4),FLD1+4                                               |
         MVC   SM3PWO,FLD1                                               note 4
B15      EQU   *
         MVC   SM3NAMEO,VNAME
         MVC   SM3LGO,VLASTGO
         MVC   SM3OPIDO,VOPID
         MVC   SM3GPWO,VGPW
         MVC   SM3USERO,VUSERNAM
         XR    R1,R1                   CLEAR R1 FOR OPERATOR PRIORITY
         IC    R1,VOPPRI                   CONVERSION TO CHARACTER
         CVD   R1,PPRI                     FORMAT
         UNPK  SM3OPPRO,PPRI
         OI    SM3OPPRO+2,X'F0'
         ZAP   PPRI,VDATLUP
         UNPK  SM3DLUPO,PPRI
         OI    SM3DLUPO+4,X'F0'
         ZAP   PPRI,VDATLUS
         UNPK  SM3DLUSO,PPRI
         OI    SM3DLUSO+4,X'F0'
         ZAP   PPRI,CSAJYDP
         UNPK  SM3DTODO,PPRI
         OI    SM3DTODO+4,X'F0'
         MVI   SEC,X'00'
         MVC   SEC+1(3),VSEC
         LA    R1,2                    THE FOLLOWING CODE CHECKS EACH
         LR    R2,R1                       BIT IN THE SECURITY CODE TO
         N     R1,SEC                      SEE IF IT IS ON.   IF SO,
         BC    8,*+8                       A 'Y' IS INSERTED INTO THE
         MVI   SM3SC2O,C'Y'                APPROPRIATE POSITION ON THE
         SLL   R2,1                        SCREEN.
         LR    R1,R2
         N     R1,SEC
         BC    8,*+8
         MVI   SM3SC3O,C'Y'
         SLL   R2,1

         and similarly for SM3SC4 - SM3SC23

         LR    R1,R2
         N     R1,SEC
         BC    8,*+8
         MVI   SM3SC24O,C'Y'
         DFHBMS TYPE=(OUT,ERASE,WAIT),DATA=YES,MAP=SIGNMP3
         DFHBMS TYPE=IN,MAP=SIGNMP3
         L     TIOABAR,TCTTEDA
         CLI   TCTTEAID,CLEAR          FINISHED ?
         BE    CLEARED
         CLI   REQIND,PF2              (THIS PROCEDURE ALSO USED FOR
         BE    C20                     BROWSE PROCESSING, SO READ NEXT
         CLI   REQIND,PF5              ALSO USED FOR USER NAME
         BE    D20                        CHECKING
         CLI   TCTTEAID,PF1            CHECK IF UPDATE ACTUALLY REQD
         BE    B20
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=RELEASE,ERROR=DUMP
         BAL   R7,TFREE                CLEAR TIOA
         CLI   TCTTEAID,PF9            DELETE RECORD ?                   note 5
         BE    B30
         B     START                   START AGAIN
B20      EQU   *                       MOVE IN CHANGED FIELDS
         CLC   SM3PWL,=H'0'
         BE    B22
         CLI   REQIND,PF12             PF12 IS WHEN ENCRYPTING OLD
         BE    *+14                       PW'S SO DON'T CHANGE DATE
         MVC   VDATLUP,CSAJYDP         DATE PASSWORD CHANGED
         MVI   VLASTGO,C'0'            PASSWORD CHANGED INDICATOR
         XR    R2,R2                                                     note 6
         MVC   ALIGN,SM3PWI                                                 |
         L     R3,ALIGN                PUT PASSWORD INTO R3                 |
         SLDL  R2,3                    SHIFT RT. 3, (1ST 3 BITS IN R2)      |
         ST    R2,ALIGN                PUT SHIFTED PW INTO FLD1             |
         MVC   FLD1+1(4),ALIGN                                              |
         ST    R3,ALIGN                                                     |
         MVC   FLD1+5(4),ALIGN                                              |
         MVC   FLD1(4),FLD1+4          NOW MOVE 1ST 4 BYTES AND             |
         NC    FLD1(4),=X'07070707'       ZEROIZE ALL BUT LAST 3 BITS       |
         NC    FLD1+5(4),=X'F8F8F8F8'     AND 1ST 5 BITS OF REST OF PW      |
         OC    FLD1(4),FLD1+5          THIS PUTS THE TWO TOGETHER           |
         MVC   ALIGN(4),VDATLUP                                             |
         L     R3,ALIGN                PUT DATE PW CREATED IN R3            |
         SRA   R3,4                       AND REMOVE SIGN BITS              |
         STC   R3,FLD1+8               PUT LAST TWO CHARS OF DATE IN        |
         XC    FLD1+0(1),FLD1+8           TO FLD1, AND USE IT TO CHANGE     |
         XC    FLD1+1(1),FLD1+8           THE PASSWORD BYTE                 |
         XC    FLD1+2(1),FLD1+8                                             |
         XC    FLD1+3(1),FLD1+8                                             |
         MVC   VPW,FLD1                PUT ENCRYPTED PW IN RECORD        note 6
B22      EQU   *
         CLC   SM3OPIDL,=H'0'
         BE    *+10
         MVC   VOPID,SM3OPIDI          NEW OP ID
         CLC   SM3GPWL,=H'0'           NEW GENER/OL PASSWORD ?
         BE    *+10
         MVC   VGPW,SM3GPWI
         CLC   SM3USERL,=H'0'          NEW USER NAME ?
         BE    *+10
         MVC   VUSERNAM,SM3USERI
         CLC   SM3LGL,=H'0'            CHANGE TO PASSWORD CHANGE IND?
         BE    *+10
         MVC   VLASTGO,SM3LGI
         MVC   SEC+1(3),VSEC           PREPARE TO CHECK FOR CHANGES
         L     R3,SEC
         BAL   R7,SECCODES                 TO THE SECURITY CODES
         MVC   VSEC,SEC+1
         CLC   SM3OPPRL,=H'0'
         BE    B25
         PACK  PPRI,SM3OPPRI           CONVERT OP PRIORITY TO HEX
         CVB   R1,PPRI
         STC   R1,VOPPRI
B25      EQU   *                       WRITE UPDATED RECORD
         BAL   R7,TFREE                FREE TIOA
         BAL   R7,UPDATE               PERFORM UPDATE
         MVC   ERR(23),=C'UPDATE OK - PRESS ENTER' OK SO TELL USER
         BAL   R7,TWRITE
         DFHBMS TYPE=IN,MAP=SIGNMP3
         L     TIOABAR,TCTTEDA
         CLI   TCTTEAID,ENTER          HAS HE FINISHED ?
         BNE   CLEARED                     YES
         BAL   R7,TFREE
         B     START                   NO  - SO START AGAIN
B30      EQU   *                       DELETE RECORD
         MVC   ERR(24),=C'DELETE REQUESTED - SURE?'
         BAL   R7,TWRITE               ASK FOR CONFIRMATION
         DFHBMS TYPE=IN,MAP=SIGNMP3
         L     TIOABAR,TCTTEDA
         BAL   R7,TFREE
         CLI   TCTTEAID,PF9
         BNE   START                   DELETE CANCELLED
         DFHFC TYPE=DELETE,DATASET=V999,RDIDADR=VKEY,ARGTYP=KEY,       *
               ERROR=DUMP
         B     START
C01      EQU   *                       BROWSE
         XC    VKEY,VKEY               KEY TO ZERO IF WHOLE FILE
         MVI   KEYLEN,X'01'            SET UP DEFAULT KEY LENGTH
         CLC   SM3NAMEL,=H'0'          NOW CHECK IF START POS ENTERED
         BE    *+16
         MVC   KEYLEN,SM3NAMEL+1       1ST CHAR IS KEY LENGTH
         MVC   VKEY,SM3NAMEI
         BAL   R7,TFREE
         DFHFC TYPE=SETL,DATASET=V999,RDIDADR=RECKEY,ARGTYP=KEY,       *
               SRCHTYP=GKGE,MODE=MOVE,NOTFND=C30,ERROR=DUMP
         L     FWACBAR,TCAFCAA
C10      EQU   *                       GET NEXT RECORD
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=GETNEXT,NOTFND=C30,ENDFILE=C30,ERROR=DUMP
         B     B10                     SET UP SCREEN USING UPDATE
*                                           PROCEDURE
C20      EQU   *                       CHECK IF NEXT RECORD REQUIRED
         BAL   R7,TFREE                RELEASE TIOA
         CLI   TCTTEAID,PF2            NEXT ?
         BE    C10
         CLI   TCTTEAID,CLEAR          FINISHED ?
         BE    CLEARED
C30      EQU   *                       BACK TO START
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=ESETL
         B     START
*** THIS SECTION GOES THROUGH EACH OF THE SELECTED SECURITY CODES ***
*   TO SEE IF IT HAS BEEN SELECTED.   R1 HAS A BIT SET, WHICH IS    *
*   AND'ED OR OR'ED WITH R3 (WHICH KEEPS A RUNNING ACCOUNT OF WHICH *
*   BITS HAVE BEEN SET).   THIS IS ONLY DONE IF THE CORRESPON-      *
*   DING SECURITY ID HAS BEEN ALTERED.    AS R1 IS SET TO ZERO IF   *
*   A REQUEST TO REMOVE THE SECID IS MADE (WITH THE RESULT THAT THE *
*   CORRESPONDING BIT IS SET OFF),    R2 IS USED TO SAVE R1 FOR     *
*   SUBSEQUENT USE.   THE SRL INSTRUCTION MOVES THE SET BIT TO      *
*   THE NEXT POSITION READY TO CHECK THE NEXT SECURITY ID.          *
*** NOTE THAT WE START IN POS 2, AS SEC ID 1 IS ALWAYS ON IN CICS ***
SECCODES EQU   *
         LA    R1,2
         CLC   SM3SC2L,=H'0'
         BE    *+10
         MVC   WSEC,SM3SC2I
         BAL   R6,SETBITS
         CLC   SM3SC3L,=H'0'
         BE    *+10
         MVC   WSEC,SM3SC3I
         BAL   R6,SETBITS

         and similarly for SM3SC4 - SM3SC23

         CLC   SM3SC24L,=H'0'
         BE    *+10
         MVC   WSEC,SM3SC24I
         BAL   R6,SETBITS
         ST    R3,SEC
         BR    R7
D01      EQU   *                                                         note 2
         XR    R5,R5
         IC    R5,SM3USERL+1           GET SIZE OF USER NAME ENTERED
         BCTR  R5,0                       AND REDUCE BY ONE
         MVC   USERNAME,SM3USERI       SAVE NAME ENTERED
         BAL   R7,TFREE
         XC    VKEY,VKEY
         MVI   KEYLEN,X'01'
         DFHFC TYPE=SETL,DATASET=V999,RDIDADR=RECKEY,ARGTYPE=KEY,      *
               SRCHTYP=GKGE,MODE=MOVE,NOTFND=D30,ERROR=DUMP
         L     FWACBAR,TCAFCAA
D10      EQU   *
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=GETNEXT,NOTFND=D30,ENDFILE=D30,ERROR=DUMP
         LA    R4,VUSERNAM             SET UP FOR USER NAME SCAN
         LA    R3,20
         SR    R3,R5
         STC   R5,D10COMP+1            PLUG LENGTH OF SCAN IN INSTR.
D10COMP  CLC   0(0,R4),USERNAME        SEARCH FOR USERNAME IN REC
         BE    B10                        FOUND, SO DISPLAY RECORD
         LA    R4,1(R4)                MOVE TO NEXT CHAR POSITION
         BCT   R3,D10COMP              SCAN TIL END OF NAME
         B     D10                     NOT ON THIS REC SO READ NEXT
D20      EQU   *                       RETURN POINT AFTER REC DISPLAY
         BAL   R7,TFREE
         CLI   TCTTEAID,PF5            CHECK IF FURTHER SCAN REQUIRED
         BE    D10
         CLI   TCTTEAID,CLEAR          CHECK IF ANY MORE PROCESSING
         BE    CLEARED
         B     C30                     USE BROWSE ESETL PROCESSING
D30      EQU   *                       NOT FOUND SO TELL HIM
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=ESETL
         MVC   ERR(19),=C'USER NAME NOT FOUND'
         MVC   TCASCNB,=H'30'
         DFHSC TYPE=GETMAIN,CLASS=TERMINAL,INITIMG=00
         L     TIOABAR,TCASCSA
         ST    TIOABAR,TCTTEDA
         MVC   TIOATDL,=H'30'
         MVC   TREC,ERRSCR
         MVC   TREC+5,ERR
         XC    ERR,ERR
         DFHTC TYPE=(WRITE,WAIT,READ),CLTCHAR=C2
         L     TIOABAR,TCTTEDA
         BAL   R7,TFREE
         CLI   TCTTEAID,CLEAR
         BE    CLEARED
         B     START
SETBITS  EQU   *
         LR    R2,R1
         CLI   WSEC,C'Y'
         BNE   *+10
         OR    R3,R1
         B     NEXTPLZ
         CLI   WSEC,C'N'
         BNE   NEXTPLZ
         X     R1,=X'00FFFFFF'
         NR    R3,R1
NEXTPLZ  EQU   *
         LR    R1,R2
         SLL   R1,1
         MVI   WSEC,X'00'
         BR    R6
GETSTOR  EQU   *
         DFHSC TYPE=GETMAIN,CLASS=TERMINAL,INITIMG=00,                 X
               NUMBYTE=SIGNMP3E-TIOADBA
         L     TIOABAR,TCASCSA
         ST    TIOABAR,TCTTEDA
         BR    R7
TFREE    EQU   *                       * FREE TERMINAL STORAGE
         ST    TIOABAR,TCASCSA
FREEST   EQU   *
         DFHSC TYPE=FREEMAIN
         BR    R7
TWRITE   EQU   *                       WRITE SHORT MESSAGES TO SCREEN
         MVC   TCASCNB,=H'30'
         DFHSC TYPE=GETMAIN,CLASS=TERMINAL,INITIMG=00
         L     TIOABAR,TCASCSA
         ST    TIOABAR,TCTTEDA
         MVC   TIOATDL,=H'30'
         MVC   TREC,ERRSCR
         MVC   TREC+5,ERR
         XC    ERR,ERR
         DFHTC TYPE=(WRITE,WAIT),CTLCHAR=C2
         BR    R7
GETAREA  EQU   *                       GET FILE AREA FOR NEW RECS
         DFHFC TYPE=GETAREA,DATASET=V999,INITIMG=00,ERROR=DUMP
         L     FWACBAR,TCAFCAA
         BR    R7
ADDREC   EQU   *                       ADD NEW RECORD
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=PUT,RDIDADR=VKEY,TYPOPER=NEWREC,ERROR=DUMP
         BR    R7
GETREC   EQU   *                       GET SPECIFIED RECORD
         DFHFC TYPE=GET,DATASET=V999,RDIDADR=VKEY,SRCHTYP=FKEQ,        *
               MODE=MOVE,TYPOPER=UPDATE,NOTFND=EH,ERROR=DUMP
         L     FWACBAR,TCAFCAA
         BR    R7
EH       EQU   *
         DFHFC TYPE=RELEASE,ERROR=DUMP
         MVC   ERR(16),=C'RECORD NOT FOUND'
         LA    R7,A01
         B     TWRITE
UPDATE   EQU   *                       UPDATE RECORD
         ST    FWACBAR,TCAFCAA
         DFHFC TYPE=PUT,RDIDADR=VKEY,TYPOPER=UPDATE,ERROR=DUMP
         BR    R7
DUMP     EQU   *                       * SYSTEM ERROR - DUMP
         DFHDC TYPE=PARTIAL,LIST=(TERMINAL,PROGRAM,TRANSACTION),       *
               DMPCODE=FERR
CLEARED  EQU   *                       LOCAL NON-SNA TERMINALS REQUIRE
         MVC   TCASCNB,=H'1'              THIS CODE TO RESET KEYBOARD
         DFHSC TYPE=GETMAIN,CLASS=TERMINAL,INITIMG=00
         L     TIOABAR,TCASCSA
         ST    TIOABAR,TCTTEDA
         MVC   TIOATDL,=H'1'
         MVI   TREC,C' '
         DFHTC TYPE=(ERASE,WRITE)
FINISH   EQU   *
         DFHPC TYPE=RETURN
ERRSCR   EQU   *
         SCFMT SBA,(1,50),SF,PRHI
         DC    CL25' '
         LTORG
         END

Notes - see references in the code

1      While the IBM copy book DFHAID is available, KEYEQ
      contains only the necessary equates, and avoids the
      somewhat laborious 'DFH' prefix in front of each key
      name.  Use the following equates by either creating a copy
      book and cataloguing it to your copy book library, or
      typing directly into the program.  Cataloguing as a copy
      book is recommended because the equates are used by the
      other programs in the system.

      ENTER EQU X'7D'
      PF1 EQU C'1'
      PF2 EQU C'2'
      PF3 EQU C'3'
      PF4 EQU C'4'
      PF5 EQU C'5'
      PF6 EQU C'6'
      PF7 EQU C'7'
      PF8 EQU C'8'
      PF9 EQU C'9'
      PF10 EQU C':'
      PF11 EQU C'#'
      PF12 EQU C'@'
      CLEAR EQU C'_'
      PA1 EQU C'%'
      PA2 EQU C'>'
      PA3 EQU C','

2      To scan for part or all of a user's actual name (as opposed
      to the name allocated to him for CICS log-on purposes),
      the data to be searched for should be entered into the
      USER NAME field and PF5 pressed.  So for example if
      you are not sure whether Fred Smith was entered as 'FRED
      SMITH', 'F.  SMITH', 'SMITHY', or even 'SMITTY',
      you would enter 'SMIT' into the USER NAME field and
      press PF5.  This search will stop at the first occurrence of
      'SMIT', and would be continued if PF5 were pressed
      again.  However, be careful with the use of this facility.  A
      standard generic search of an alternate index is not possible
      in this case (because the string to be searched for may not
      be at the start of the field, as in the above example), so the
      file has to be read sequentially until a match is found.  If
      no match is found then the entire file would be read
      sequentially.

3      This code is a simple encryption routine.  While not
      exceptionally difficult to crack, it should be sufficient to
      deter all but the most determined efforts to break it.  It
      produces a password field which cannot be typed into a
      terminal.  Should you decide not to use password
      encryption, this code should be replaced with:

               MVC   VPW,SM3PWI

      Although the encryption routine is simple in principle, the
      code will not be described in detail here to preserve the
      inherent security.  Only the most ardent 'I must know what
      this code is doing' fan will actually want to work it out.
      Even when understanding the principle, only those
      determined to break a password and who have access to the
      encrypted version will actually relish the task (debugging
      was a nightmare).

4      This is the password decryption routine.  Note that an extra
      facility has been included here which uses PF12.  It is
      possible, especially if you have a large number of sign on
      codes, that you will not want to use the encryption
      routines, especially for initial loading.  So for example you
      may wish to load the names and various other fields using
      a utility such as SELCOPY.  Once loaded, the records will
      normally be updated by entering the key (operator name)
      and pressing PF1.  This would result in the unencrypted
      password being decrypted, which can produce invalid
      terminal conditions.  By pressing PF12 instead of PF1, the
      password will not be decrypted.  By overtyping a character
      on the password field (to set the MDT on), and pressing
      PF1 to perform the update, the password will then be
      encrypted.  To ignore password decryption, delete this
      code.  To allow for the PF12 check, the unencrypted field
      is placed in the screen buffer anyway.

5      Deletion of records is performed by displaying the record
      for update, and then pressing PF9.  For security reasons
      this is not displayed on the update screen.  For added
      security, a message will be displayed informing the
      security administrator that he has requested a deletion.  To
      confirm the deletion, PF9 must be pressed a second time.

6      This section encrypts changes to passwords.  To ignore,
      replace with:
               MVC   VPW,SM3PWI


SIGNMP3 MAP SOURCE CODE

SIGNMS3  DFHMSD TYPE=&SYSPARM,MODE=INOUT
SIGNMP3  DFHMDI CTRL=FREEKB,SIZE=(24,80)
         DFHMDF POS=(1,2),ATTRB=(PROT,BRT),LENGTH=28,                  *
               INITIAL='SIGN-ON SYSTEM - MAINTENANCE'
         DFHMDF POS=(2,2),ATTRB=(PROT,BRT),LENGTH=28,                  *
               INITIAL='----------------------------'
         DFHMDF POS=(4,5),ATTRB=(ASKIP,NORM),LENGTH=5,                 *
               INITIAL='NAME:'
SM3NAME  DFHMDF POS=(4,11),ATTRB=(UNPROT,BRT,IC),LENGTH=20
         DFHMDF POS=(4,32),ATTRB=(ASKIP,NORM),LENGTH=9,                *
               INITIAL='PASSWORD:'
SM3PW    DFHMDF POS=(4,42),ATTRB=(UNPROT,BRT),LENGTH=4,                *
               INITIAL='    '
         DFHMDF POS=(4,47),ATTRB=(ASKIP,NORM),LENGTH=21,               *
               INITIAL='        LAST USED:   '
SM3DLUS  DFHMDF POS=(4,69),ATTRB=(ASKIP,BRT),LENGTH=5
         DFHMDF POS=(5,55),LENGTH=13,INITIAL='LAST UPDATED:'
SM3DLUP  DFHMDF POS=(5,69),ATTRB=(ASKIP,BRT),LENGTH=5
SM3LG    DFHMDF POS=(5,76),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(5,78),ATTRB=(ASKIP,NORM),LENGTH=1
         DFHMDF POS=(6,5),ATTRB=(ASKIP,NORM),LENGTH=12,                *
               INITIAL='OPERATOR ID:'
SM3OPID  DFHMDF POS=(6,18),ATTRB=(UNPROT,BRT),LENGTH=3
         DFHMDF POS=(6,22),ATTRB=(ASKIP,NORM),LENGTH=20,               *
               INITIAL='  OPERATOR PRIORITY:'
SM3OPPR  DFHMDF POS=(6,43),ATTRB=(NUM,BRT,FSET),LENGTH=3,INITIAL='255'
         DFHMDF POS=(6,47),ATTRB=(ASKIP,NORM),LENGTH=1
         DFHMDF POS=(6,55),LENGTH=13,INITIAL='TODAY''S DATE:'
SM3DTOD  DFHMDF POS=(6,69),LENGTH=5
         DFHMDF POS=(8,5),ATTRB=(ASKIP,NORM),LENGTH=18,                *
               INITIAL='GENER/OL PASSWORD:'
SM3GPW   DFHMDF POS=(8,24),ATTRB=(UNPROT,BRT),LENGTH=4
         DFHMDF POS=(8,29),ATTRB=(ASKIP,NORM),LENGTH=1
         DFHMDF POS=(8,31),ATTRB=(ASKIP,NORM),LENGTH=10,               *
               INITIAL='USER NAME:'
SM3USER  DFHMDF POS=(8,42),ATTRB=(UNPROT,BRT),LENGTH=20
         DFHMDF POS=(8,63),ATTRB=(ASKIP,NORM),LENGTH=1
         DFHMDF POS=(10,11),ATTRB=(ASKIP,NORM),LENGTH=31,              *
               INITIAL=' 1 Y = DEFAULT - ALWAYS SET  13'
SM3SC13  DFHMDF POS=(10,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(10,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 13'
         DFHMDF POS=(11,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 2'
SM3SC2   DFHMDF POS=(11,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(11,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 2         14'
SM3SC14  DFHMDF POS=(11,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(11,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 14'
         DFHMDF POS=(12,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 3'
SM3SC3   DFHMDF POS=(12,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(12,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 3         15'
SM3SC15  DFHMDF POS=(12,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(12,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 15'
         DFHMDF POS=(13,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 4'
SM3SC4   DFHMDF POS=(13,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(13,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 4         16'
SM3SC16  DFHMDF POS=(13,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(13,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 16'
         DFHMDF POS=(14,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 5'
SM3SC5   DFHMDF POS=(14,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(14,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 5         17'
SM3SC17  DFHMDF POS=(14,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(14,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 17'
         DFHMDF POS=(15,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 6'
SM3SC6   DFHMDF POS=(15,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(15,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 6         18'
SM3SC18  DFHMDF POS=(15,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(15,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 18'
         DFHMDF POS=(16,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 7'
SM3SC7   DFHMDF POS=(16,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(16,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 7         19'
SM3SC19  DFHMDF POS=(16,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(16,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 19'
         DFHMDF POS=(17,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 8'
SM3SC8   DFHMDF POS=(17,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(17,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 8         20'
SM3SC20  DFHMDF POS=(17,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(17,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 20'
         DFHMDF POS=(18,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL=' 9'
SM3SC9   DFHMDF POS=(18,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(18,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 9         21'
SM3SC21  DFHMDF POS=(18,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(18,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 21'
         DFHMDF POS=(19,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL='10'
SM3SC10  DFHMDF POS=(19,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(19,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 10        22'
SM3SC22  DFHMDF POS=(19,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(19,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 22'
         DFHMDF POS=(20,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL='11'
SM3SC11  DFHMDF POS=(20,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(20,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 11        23'
SM3SC23  DFHMDF POS=(20,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(20,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 23'
         DFHMDF POS=(21,11),ATTRB=(ASKIP,NORM),LENGTH=2,INITIAL='12'
SM3SC12  DFHMDF POS=(21,14),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(21,16),ATTRB=(ASKIP,NORM),LENGTH=26,              *
               INITIAL='= APPLICATION 12        24'
SM3SC24  DFHMDF POS=(21,43),ATTRB=(UNPROT,BRT),LENGTH=1
         DFHMDF POS=(21,45),ATTRB=(ASKIP,NORM),LENGTH=16,              *
               INITIAL='= APPLICATION 24'
         DFHMDF POS=(23,5),LENGTH=68,INITIAL='FOR A NEW USER, FILL IN A*
               LL REQUIRED INFORMATION AND PRESS ENTER. TO'
         DFHMDF POS=(24,5),LENGTH=63,INITIAL='UPDATE, TYPE NAME AND PRE*
               SS PF1. FOR BROWSE PRESS PF2.'
SIGNMAP3 DFHMSD TYPE=FINAL

Part three of our look at CICS security will appear in next
month's issue.

Robin Lynch
Software Support Manager (UK)                         Xephon/Reserved 1991

