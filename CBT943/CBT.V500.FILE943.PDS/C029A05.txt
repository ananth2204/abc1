 Compressing 3270 data streams
OPT3270 is a software enhancement to CICS that significantly reduces the output
message size that is directed to a 3270 device.  This enhancement should result
in better remote response time, increased productivity, and decreased cost.
HOW DOES IT WORK?
OPT3270 exploits a standard feature of the IBM 3274 control unit to optimise
output messages.  This feature is known as the Trepeat to  addressU order: it
allows you to tell the 3274 to replicate a character to a specific buffer
location.  Since this order requires 4 bytes (see the example below), only
characters that are repeated five times or more are optimised.
Example of Trepeat to addressU
A typical data stream is shown below:
SCRNO    DC   X'C6'                  WCC, (Sound Alarm)
         DC   X'1DE8'                Hilight, Protected
         DC   X'1140D3'              Set Buffer Address to R1 C20
         DC   C'Customer Inquiry System'
         DC   X'11C1E3'              Set Buffer Address to R2 C20
         DC   C'________________________'
         DC   X'1D60'                No hilight, Protected
         DC   X'114B50'              Set Buffer Address to R10 C1
         DC   C'Customer Number . . .=>'
         DC   X'1DC9'                Hilight Unprotect
         DC   CL8' '                 Customer Number Input
         DC   X'1DF0'                Cause Autoskip
SCRNOLTH EQU  *-SCRNO                Length of Data Stream
The preceding example shows a standard data stream that could be sent to a 3270
terminal.  The length of this particular data stream is 95 bytes.  There are
only two areas in this particular data stream that can be optimised: the
underline string T_U, and the Customer Number input field (8 blanks).  By
replacing these two fields with a repeat to address order the data stream length
will be reduced to 72 bytes.  This represents a saving of 24%.  UPT3270 actually
restructures the data stream in the TIOA.  Given the above data stream, the
restructured data stream would be:
SCRNO    DC   X'C6'                  WCC, (Sound Alarm)
         DC   X'1DE8'                Hilight, Protected
         DC   X'1140D3'              Set Buffer Address to R1 C20
         DC   C'Customer Inquiry System',
         DC   X'11C1E3'              Set Buffer Address to R2 C20
------>  DC   X'3CC17A'              Repeat Following Char. to R2 C43
         DC   C'_'
         DC   x'1D60'                No hilight, Protected
         DC   X'114B50'              Set Buffer Address to R10 C1
         DC   C'Customer Number . . .=>'
         DC   X'1DC9'                Hilight Unprotect
------>  DC   X'3C4B6F'              Repeat Following Char. to R10 C32
         DC   CL1' '                 Customer Number Input
         DC   X'1DF0'                Cause Autoskip
SCRNOLTH EQU  *-SCRNO                Length of Data Stream
As you can see, the format of the repeat to address order is:
XT3CU     Tells the 3274 control unit that this is a repeat to address.
XTXXXXU   Repeat the following character to this buffer location.
CTCU Repeat this character.
For more information, see the IBM publications Introduction to Programming the
3270 Display System - GC27-6999-3 pages 51-52 and IBM 3270 Information Display
System - Component Description - GA27-2749-10 pages 2-43.
THE OPT3270 PROGRAM
OPT3270 is an Assembler language program that uses a standard CICS exit.  This
exit is invoked just before a terminal output event is to take place.  On entry
to OPT3270, register 2 contains the address of the TCTTE and register 4 contains
the address of the TIOA.  Field TCTTETT is tested to determine whether this is a
remote 3270.  If it is not, no optimising is performed.  The TIOA is then
optimised and the data length (TIOATDL) is changed to reflect the optimised data
stream.
OPT3270 keeps statistics on the amount of bytes saved etc.  You should write a
transaction to display these statistics.  Our transaction displays screen shown

in Figure 1.  (Note: the transaction that displays the statistics is too lengthy
to be reproduced here.)
The information that is displayed has the following meaning:
1    Count of attempts at optimisation.
2    Count of successful optimisation attempts.
3    Percentage of successful optimisation attempts.
4    Sum of total bytes that would have been displayed if OPT3270 was not
present on the system.
5    Total number of bytes that OPT3270 has saved.
6    Total number of bytes that were required for output operations has been
reduced by this percentage.
7    Each time a message is optimised, this is the average saving in bytes.
OPT3270 SOURCE CODE
         LCLC  &REL
&REL     SETC  '1.0'
*-------------------------------------------------------------------*
*   R2     -    TCTTE                                               *
*   R3     -    BASE                                                *
*   R4     -    TIOA                                                *
*   R5     -    TOTAL BYTES SAVED                                   *
*   R6     -    WORKING STORAGE DSECT                               *
*   RD     -    SAVE AREA                                           *
*   RE     -    SUBROUTINE LINKAGE                                  *
*          -    ALSO, RETURN ADDRESS TO CICS/VS                     *
*   RF     -    ENTRY POINT                                         *
*   OPT3270 WILL REDUCE A 3270 MESSAGE SIZE SIGNIFICANTLY BY        *
*   USING THE 'REPEAT TO ADDRESS' ORDER TO REPLACE REPEATING        *
*   CHARACTERS. AT LEAST 5 REPEATING CHARACTERS MUST BE RECOGNIZED  *
*   IN ORDER TO BE REPLACED. THIS IS BECAUSE THE RTA ORDER TAKES    *
*   4 BYTES ITSELF.                                                 *
*   THE FORMAT OF THE RTA IS:                                       *
*   X'3CXXYYZZ'                                                     *
*   WHERE:     3C . . . . . REPEAT TO ADDRESS ORDER                 *
*              XXYY . . . . REPEAT TO THIS BUFFER POSITION          *
*              ZZ . . . . . CHARACTER TO BE REPLACED                *
*   EXTERNAL REFERENCES                                             *
*   OPTCSBA - CALCULATE AN SBA FROM A BUFFER POSITION               *
*-------------------------------------------------------------------*
OPT3270  CSECT
         SAVE  (14,12)             SAVE CALLING REGS
         BALR  R3,R0               SET ADDRESSING
         USING *,R3
         B     OPTMAIN
         CNOP  0,4                 ALIGN
         DC    AL4(TOTMSG)         ADDRESS COUNTERS
         DC    C'OPT3270: R&REL '
         DC    C'&SYSDATE '
         DC    C'&SYSTIME '
         CNOP  2,4
OPTMAIN  USING DFHTIOA,TIOABAR     TELL ASM ABOUT TIOA ADDRESSING
         USING DFHTCTTE,TCTTEAR    SAME HERE
         USING WORKSTOR,R6         FOR WORK
         L     R6,4(R1)            LOAD ADDRESS OF WORK AREA
         ST    RD,SAVED            SAVE REGISTER 13
         TS    OPTSW               IS IT FIRST TIME...
         BNZ   OPTSTART            NO...JUST GO...
         ST    RF,CONVSRCE         WORK AREA
         LA    R5,CONVSRCE+1       SOURCE AREA FOR TRANSLATE
         LA    R6,MESSG1+29        RESULT AREA
         LA    R7,3                3 BYTES TO DO
         BAL   RE,CONVERT          CONVERT IT
         L     R6,4(R1)            LOAD ADDRESS OF WORK AREA
         MVC   CONWORK(L'MESSG1),MESSG1
         EXCP  CONSOLE             WRITE INFO MESSAGE
         WAIT  CONSOLE
OPTSTART LA    RF,POSITION         SET UP PLIST
          ST    RF,PLIST
         LA    RF,SBA              SET UP PLIST
         ST    RF,PLIST+4
         OI    PLIST+4,X'80'       INDICATE LAST PARAMETER
         CLI   TCTTETT,TCTTET37    REMOTE 3277 DEVICE ?
         BNE   RETURN              NO....
         LH    RF,TCTEDSCZ         LOAD SCREEN SIZE
         BCTR  RF,R0               -1 GIVES MAX BUFFER LOCATION
         STH   RF,MAXBUFF          STORE IT
         L     RF,TOTMSG           LOAD COUNT OF TOTAL MSG'S
         LA    RF,1(,RF)           PLUS 1
         ST    RF,TOTMSG           STORE BACK
         LA    RA,TIOADBA          TIOA DATA AREA
         LH    RB,TIOATDL          LENGTH OF DATA AREA
         SR    R5,R5               CLEAR FOR BYTES SAVED
         BAL   RE,COMPRESS         COMPRESS THE DATA STREAM
         LH    RB,TIOATDL          RELOAD LENGTH
         L     RF,TOTBYTES         TOTAL BYTES INPUT
         AR    RF,RB               ADD CURRENT TIOATDL
         ST    RF,TOTBYTES         STORE BACK
         LTR   R5,R5               ANY SAVINGS ?
         BZ    RETURN              NOPE...
         L     RF,COMPMSG          LOAD COUNT OF COMPRESSED MSG'S
         LA    RF,1(,RF)           PLUS 1
         ST    RF,COMPMSG          STORE BACK
         L     RF,TOTSAVED         TOTAL BYTES SAVED
         AR    RF,R5               ADD CURRENT SAVINGS
         ST    RF,TOTSAVED         STORE BACK
         SR    RB,R5               RB HAS NEW BYTE COUNT
         STH   RB,TIOATDL          CHANGE LENGTH IN TIOA
         B     RETURN              AND GET OUT
COMPRESS ST    RE,EXIT1
* INPUT --->  RA = DATA STREAM ADDRESS
*       --->  RB = LENGTH OF DATA STREAM
COMP005  CLI   0(RA),X'11'         SBA ORDER ?
         BE    COMP010             YES......
         LA    RA,1(,RA)           NEXT BYTE..
         BCT   RB,COMP005          KEEP LOOKING
         B     EXITA               CAN'T COMPRESS
COMP010  LA    RA,1(,RA)           POINT AT BUFFER LOCATION
         BCTR  RB,R0               SUBTRACT FROM DATA LENGTH
         LTR   RB,RB               IT JUST MIGHT BE 0
         BZ    EXITA               YES...GO
         CLI   0(RA),X'11'         ANOTHER SBA ?
         BE    COMP010             YES...
         BAL   RE,CALCBUFF         CALCULATE BUFFER ADDRESS
         LA    RA,2(,RA)           BUMP OVER SBA FIELDS (11XXXX)
         SL    RB,F2               SUBTRACT ALSO FROM DATA LENGTH
         CLI   0(RA),X'11'         ANOTHER SBA ?
         BE    COMP010             YES...
COMP012  SR    R7,R7               CLEAR 7 FOR INSERT
         SR    R8,R8               CLEAR 8 FOR INSERT
         SR    R9,R9               CLEAR FOR COUNT
COMP015  CLI   0(RA),X'1D'         START FIELD ATTRIBUTE ?
         BE    COMP050             YES..
         CLI   0(RA),X'13'         INSERT CURSOR ?
         BE    COMP060             YES..
         CLI   0(RA),X'40'         IF < THAN X'40' MAKE IT X'40'
*        BL    COMP080             YES..
         IC    R7,0(RA)            INSERT CHARACTER
         IC    R8,1(RA)            INSERT CHARACTER
         CR    R7,R8               SAME CHARACTER ?
         BE    COMP025             YES...
COMP020  CL    R9,F4               DID WE HAVE AT LEAST 5 OF THE SAME?
         BNL   COMP040             YES...COMPRESS IT
         LA    RF,1(,RF)           ADD 1 TO BUFFER
          CH    RF,MAXBUFF          AT MAX BUFFER LOCATION ?
         BE    EXITA               YES...
         SLR   R9,R9               CLEAR COUNT
         LA    RA,1(,RA)           NEXT BYTE
         CLI   0(RA),X'11'         HAVE AN SBA ?
         BE    COMP030             YES...
         BCT   RB,COMP015          LOOP
         B     EXITA
COMP025  LA    RF,1(,RF)           ADD 1 TO BUFFER ADDRESS
         CH    RF,MAXBUFF          AT MAX BUFFER LOCATION ?
         BE    EXITA               YES...
         LA    R9,1(,R9)           ADD 1 TO DUPLICATION COUNT
         LA    RA,1(,RA)           NEXT CHARACTER
         CL    RB,F1               LAST BYTE ?
         BE    COMP020             YES...
         BCTR  RB,R0               -1 FROM DATA LENGTH
         B     COMP015
COMP030  BCTR  RB,R0               -1
         B     COMP010             LOOP
COMP040  LR    RE,R9               LOAD RE WITH COUNT
         SL    RE,F3               SUBTRACT 3 TO GET BYTES SAVED
         AR    R5,RE               ADD TO COUNT
         BCTR  RB,R0               -1
         LA    RC,1(,RA)           DATA WILL BE SHIFTED FROM HERE
         LA    RF,1(,RF)           ADD 1 TO POSITION
         CH    RF,MAXBUFF          AT MAX BUFFER LOCATION ?
         BE    EXITA               YES...
         ST    RF,POSITION         STORE IT
         ST    RF,SAVERF           SAVE RF
         LA    RD,SAVEREGS         SAVE REGS
         LA    R1,PLIST
         L     RF,=V(OPTCSBA)
         BALR  RE,RF
         L     RF,SAVERF           RESTORE REGS
         SR    RA,R9               BACKUP A BIT
         MVI   0(RA),X'3C'         INSERT REPEAT TO ADDRESS ORDER
         MVC   1(2,RA),SBA         REPEAT TO THIS POSITION
         LA    RA,4(,RA)           GO OVER...RA ORDER
         LR    RD,RB               PUT LENGTH IN HERE
         LR    R1,RA               SAVE RA
         ST    RB,SAVERB           SAVE RB
         MVCL  RA,RC
         LR    RA,R1               RESTORE RA
         L     RB,SAVERB           RESTORE RB
         LTR   RB,RB               IS IT 0
         BZ    COMP070             YES...
         CLI   0(RA),X'11'         HAVE AN SBA ?
         BE    COMP010             YES...
         CLI   0(RA),X'1D'         HAVE A START FIELD ?
         BNE   COMP045             NO....
         LA    RA,2(,RA)           GO OVER X'1DXX'
         S     RB,F2               SUBTRACT FROM COUNT
         BC    12,EXITA            AT END ?
         CLI   0(RA),X'11'         SBA ?
         BE    COMP010             YES...
         LA    RF,1(,RF)           ONLY TAKES 1 BYTE IN TERMINAL BUFFER
         CH    RF,MAXBUFF          AT MAX BUFFER LOCATION ?
         BE    EXITA               YES...
         B     COMP012
COMP045  CLI   0(RA),X'13'         INSERT CURSOR ?
         BNE   COMP012             NO....
         LA    RA,1(,RA)           GO OVER X'13'
         S     RB,F1               SUBTRACT FROM COUNT
         BC    12,EXITA            AT END ?
         CLI   0(RA),X'11'         SBA ?
         BE    COMP010             YES...
          B     COMP015             GO BACK
COMP050  LA    RA,2(,RA)           GO OVER X'1DXX'
         S     RB,F2               SUBTRACT FROM COUNT
         BC    12,EXITA            AT END ?
         CLI   0(RA),X'11'         SBA ?
         BE    COMP010             YES...
         LA    RF,1(,RF)           ONLY TAKES 1 BYTE IN TERMINAL BUFFER
         CH    RF,MAXBUFF          AT MAX BUFFER LOCATION ?
         BE    EXITA               YES...
         B     COMP015             GO BACK
COMP060  LA    RA,1(,RA)           GO OVER X'13'
         S     RB,F1               SUBTRACT FROM COUNT
         BC    12,EXITA            AT END ?
         CLI   0(RA),X'11'         SBA ?
         BE    COMP010             YES...
         B     COMP015             GO BACK
COMP070  BCTR  R5,R0               NEED TO ADD JUST 1 MORE
         B     EXITA
COMP080  MVI   0(RA),X'40'
         B     COMP015             GO BACK
EXITA    L     RE,EXIT1
         BR    RE
CALCBUFF ST    RE,EXIT2
         MVC   WORK1,1(RA)         MOVE ROW COORDINATE
         TR    WORK1,BUFFROW       GET BUFFER ADDRESS OF ROW
         LA    RE,BUFFCOL          COLUMN TABLE
         LA    RF,BUFFNO           NUMBER OF ENTRIES
CALC005  CLC   0(1,RA),0(RE)       FIND COLUMN COORDINATE
         BE    CALC010             GOT IT..
         LA    RE,BUFFCLTH(,RE)    NEXT COORDINATE
         BCT   RF,CALC005
         B     EXITA               EXIT...
CALC010  SR    RF,RF               CLEAR FOR INSERT
         ICM   RF,B'0011',1(RE)    INSERT COLUMN COORDINATE
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,WORK1            INSERT ROW VALUE
         AR    RF,R1               RF NOW HAS BUFFER ADDRESS
EXITB    L     RE,EXIT2
         BR    RE
*******************************************************************
* SUBROUTINE TO CONVERT HEX TO PRINTABLE CHARACTERS.              *
* ....... ON ENTRY REG 5 MUST HAVE ADDRESS OF AREA TO BE TRANS.   *
* ....... REG 6 MUST HAVE ADDRESS OF RESULTANT FIELD.             *
* ....... REG 7 MUST CONTAIN THE NUMBER OF BYTES TO BE TRANSLATED *
* ....... THIS ROUTINE IS NOT RE-ENTRANT. THATS OK THOUGH SINCE   *
*         IT'S ONLY EXECUTED ONCE.                                *
*******************************************************************
CONVERT  ST    14,EXITC+6
         STM   8,13,CONVSAVE            SAVE ENTRY REGISTERS
         SR    12,12                    CLEAR REGISTER 12
CONV010  IC    12,0(5)                  +------------------------+
         SRDL  12,4                     | SPLIT BYTE INTO REG C/D|
         SRL   13,28                    |........................|
         STC   12,CONV020               +------------------------+
         STC   13,CONV030               STORE AND TRANSLATE SPLIT BYTE
         TR    CONV020(2),CONV040       TRANSLATE IT
         MVC   0(2,6),CONV020           MOVE TRANSLATED BYTE TO AREA
         LA    5,1(5)                   GET NEXT BYTE
         LA    6,2(6)                   INCREMENT WORK AREA
         BCT   7,CONV010                DO IT UNTIL COMPLETE
         LM    8,13,CONVSAVE
EXITC    EX14
CONVSAVE DS    6F                  FOR CONVERT ROUTINE
CONVSRCE DS    F                   SOURCE AREA
CONV020  DS    C
CONV030  DS    C
 CONV040  DC    C'0123456789ABCDEF'   TRANSLATE TABLE
OPTSW    DC    X'00'               FOR FIRST TIME THRU TEST
         CNOP  0,4
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F4       DC    F'4'
*-------------------------------------------------------------------*
* DO  N O T  CHANGE THE ORDER OF THE NEXT 4 FIELDS.                 *
* THEY ARE USED FOR THE 'OPTI' TRANSACTION.                         *
*-------------------------------------------------------------------*
TOTMSG   DC    F'0'                TOTAL MESSAGES INTERCEPTED
COMPMSG  DC    F'0'                MESSAGES COMPRESSED
TOTSAVED DC    F'0'                TOTAL BYTES SAVED
TOTBYTES DC    F'0'                TOTAL BYTES INPUT
RETURN   L     RD,SAVED            RESTORE R13
         RETURN (14,12)            RESTORE AND RETURN
PLIST    DS    2F
CONSOLE  CCB   SYSLOG,CONCCW
CONCCW   CCW   X'01',CONWORK,X'20',L'CONWORK
CONWORK  DC    CL80' '
MESSG1   DC    C'OPT3270 LOADED AND ACTIVE AT 'XXXXX'
         CNOP  0,8
BUFFROW  DC    X'00000000000000000000000000000000'    0-F
         DC    X'00000000000000000000000000000000'   10-1F
         DC    X'00000000000000000000000000000000'   20-2F
         DC    X'00000000000000000000000000000000'   30-3F
         DC    X'000000000000000000000A0B0C0D0E0F'   40-4F
         DC    X'100000000000000000001A1B1C1D1E1F'   50-5F
         DC    X'202100000000000000002A2B2C2D2E2F'   60-6F
         DC    X'000000000000000000003A3B3C3D3E3F'   70-7F
         DC    X'00000000000000000000000000000000'   80-8F
         DC    X'00000000000000000000000000000000'   90-9F
         DC    X'00000000000000000000000000000000'   A0-AF
         DC    X'00000000000000000000000000000000'   B0-BF
         DC    X'00010203040506070809000000000000'   C0-CF
         DC    X'00111213141516171819000000000000'   D0-DF
         DC    X'00002223242526272829000000000000'   E0-EF
         DC    X'30313233343536373839000000000000'   F0-FF
BUFFCOL  DC    X'40',XL2'0000'
BUFFCLTH EQU   *-BUFFCOL
         DC    X'C1',XL2'0040'
         DC    X'C2',XL2'0080'
         DC    X'C3',XL2'00C0'
         DC    X'C4',XL2'0100'
         DC    X'C5',XL2'0140'
         DC    X'C6',XL2'0180'
         DC    X'C7',XL2'01C0'
         DC    X'C8',XL2'0200'
         DC    X'C9',XL2'0240'
         DC    X'4A',XL2'0280'
         DC    X'4B',XL2'02C0'
         DC    X'4C',XL2'0300'
         DC    X'4D',XL2'0340'
         DC    X'4E',XL2'0380'
         DC    X'4F',XL2'03C0'
         DC    X'50',XL2'0400'
         DC    X'D1',XL2'0440'
         DC    X'D2',XL2'0480'
         DC    X'D3',XL2'04C0'
         DC    X'D4',XL2'0500'
         DC    X'D5',XL2'0540'
         DC    X'D6',XL2'0580'
         DC    X'D7',XL2'05C0'
         DC    X'D8',XL2'0600'
          DC    X'D9',XL2'0640'
         DC    X'5A',XL2'0680'
         DC    X'5B',XL2'06C0'
         DC    X'5C',XL2'0700'
         DC    X'5D',XL2'0740'
         DC    X'5E',XL2'0780'
         DC    X'5F',XL2'07C0'
         DC    X'60',XL2'0800'
         DC    X'61',XL2'0840'
         DC    X'E2',XL2'0880'
         DC    X'E3',XL2'08C0'
         DC    X'E4',XL2'0900'
         DC    X'E5',XL2'0940'
         DC    X'E6',XL2'0980'
         DC    X'E7',XL2'09C0'
         DC    X'E8',XL2'0A00'
         DC    X'E9',XL2'0A40'
         DC    X'6A',XL2'0A80'
         DC    X'6B',XL2'0AC0'
         DC    X'6C',XL2'0B00'
         DC    X'6D',XL2'0B40'
         DC    X'6E, XL2'0B80'
         DC    X'6F',XL2'0BC0'
         DC    X'F0',XL2'0C00'
         DC    X'F1',XL2'0C40'
         DC    X'F2',XL2'0C80'
         DC    X'F3',XL2'0CC0'
         DC    X'F4',XL2'0D00'
         DC    X'F5',XL2'0D40'
         DC    X'F6',XL2'0D80'
         DC    X'F7',XL2'0DC0'
BUFFNO   EQU   (*-BUFFCOL)/BUFFCLTH
         COPY  DFHTIOA
         COPY  DFHTCTTE
*-------------------------------------------------------------------*
* WORKING STORAGE AREA. THE ADDRESS OF THIS AREA IS PASSED          *
* THROUGH THE PLIST PROVIDED BY THE TCP AT USER EXIT TIME.          *
*-------------------------------------------------------------------*
WORKSTOR DSECT
SAVERF   DS    F                   SAVE AREA
SAVERB   DS    F                   SAVE AREA
SAVED    DS    F                   SAVE AREA
EXIT1    DS    F                   FOR SUBROUTINES
EXIT2    DS    F                   FOR SUBROUTINES
EXIT3    DS    F                   FOR SUBROUTINES
SAVEREGS DS    18F                 SAVE AREA
POSITION DS    F                   BUFFER ADDRESS
SBA      DS    H                   SBA OF BUFFER ADDRESS
MAXBUFF  DS    H                   MAX BUFFER LOCATION FOR SCREEN
WORK1    DS    C                   USED IN BUFFER ADDRESS CALCULATION
TIOABAR  EQU   4
TCTTEAR  EQU   2
         END   OPT3270


James Young
Technical Support Manager
Reader's Digest Association (Canada)    ) Xephon 1988








