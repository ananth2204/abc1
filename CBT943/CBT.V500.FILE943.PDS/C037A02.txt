 CSP to CICS transfer facilities
IBMUs strategic 4GL, CSP, has recently been introduced into our installation.
When we were evaluating CSP against other 4GLs, everybody was concerned with how
the 4GL would interact or co-exist with our existing COBOL programs.  I have
done a fair amount of research on this subject and will briefly describe in this
article the main points involved and also try to explain the different concepts
by using sample COBOL programs and CSP applications.  One of the beauties of CSP
is its portability to any environment, eg CICS, CMS, DPPX, PC.  However, here we
shall only consider the interaction of CSP with CICS COBOL programs.  There are
three different ways to transfer control to CICS programs from CSP applications.
Each will be covered separately.
USING XFER
CSP can issue an XFER command to transfer control to another CSP application or
to a non-CSP program.  When CSP issues an XFER command to another application
(CSP or non-CSP), it is translated into a CICS START command.  The first
application terminates and the target application starts.  When this application
is finished, control will not go back to the original application.
XFER causes a SYNCPOINT to be taken and the target application starts a new
Logical Unit of Work (LUW).  In addition, it is possible to pass a terminal-id
to the CICS transaction.
Only the CSP working storage structure can be passed, no 77 level items in
working storage are passed.  The working storage passed is placed in temporary
storage.  To access it, the invoked COBOL program has to issue a CICS RETRIEVE
command.  The following example illustrates a CSP application using XFER to
transfer control to a CICS COBOL transaction.
Example of CSP statements
     MOVE TESTWSRTNO TO WS01.PARTNO;
     MOVE INV.DESCR TO WS01.DESCR;
     MOVE TESTWS.QT TO WS01.QT;
     XFER STRT WS01;
Example of working storage used
                       RECORD NAME:             WS01
                       ORGANIZATION:            WORKING STORAGE
                       LENGTH IN BYTES:         42

NAME    LVL  OCCURS  TYPE   LENGTH   DEC  BYTES   START
*        10          CHA       42            42       1
LENGTH   20          BIN        4             2       1
TRAN     20          CHA        4             4       3
BLANK    20          CHA        4             4       7
PARTNO   20          CHA        4             4      11
DESCR    20          CHA       24            24      15
QT       20          CHA        4             4      39
MSG      77          CHA       25            25
Note that 77 levels are not passed when using XFER, only the working storage
structure (42 bytes in this example).
A COBOL program that receives control using XFER
* THIS PROGRAM IS STARTED BY CSP APPLICATION USING XFER, THE
* FOLLOWING IS WHAT THE PROGRAM DOES:
* 1. RECEIVES A RECORD FROM CSP
* 2. STARTS ANOTHER TASK
* 3. PASSES DATA RECEIVED FROM CSP TO STARTED TASK
 IDENTIFICATION DIVISION.
 PROGRAM-ID. STARTPRT.
 ...
 WORING STORAGE SECTION.
 01  WORK-REC.
     02  FILLER             PIC X(10).
     02  WORK-PARTNO        PIC X(4).
     02  WORK-DESCR         PIC X(24).
     02  WORK-QTY           PIC X(4).
 01  PRINT-REC.
     02  PRINT-PARTNO        PIC X(4).
     02  PRINT-DESCR         PIC X(24).
     02  PRINT-QTY           PIC X(4).
 77  LEN USAGE IS COMP       PIC S9(2) VALUE 42.
  01  DFHAID COPY DFHAID.
 LINKAGE SECTION.
 PROCEDURE DIVISION.
     EXEC CICS RETRIEVE INTO(WORK-REC) LENGTH(LEN) END-EXEC.
     PERFORM START-PRINT.
 START-PRINT.
     MOVE WORK-PARTNO TO PRINT-PARTNO.
     MOVE WORK-DESCR TO PRINT-DESCR.
     MOVE WORK-QTY TO PRINT-QTY.
     EXEC CICS START
         TRANSID('PRNT') FROM(PRINT-REC) LENGTH(32)
         TERMID('P087') END-EXEC.
     GO TO FIN.
 FIN.
     EXEC CICS RETURN END-EXEC.
     GOBACK.
USING CALL
The CSP CALL is equivalent to CICS COBOLUs LINK.  It can be used to LINK either
to another CSP application or to a COBOL program.  The called program is
executed and control is returned to CSP with the issuing of a CICS RETURN (or
EZECLOS if it is another CSP application).  It is possible to pass up to 15
parameters which may be any data such as working storage, level 77 items,
records, literals, or maps.
No SYNCPOINT is issued as a result of the CALL, so the target
application/program extends the current LUW.
There must be an entry in the PPT for the COBOL program.  The COMMAREA passed is
a list of the addresses of each parameter, each four bytes long.
Below are samples of a CSP application and a COBOL program.  It should be noted
that the linkage section of the COBOL program is organised such that the first
01 level variable is the communication area passed, ie DFHCOMMAREA, which has
two address pointers defined under it corresponding to the two parameters passed
by the CSP application.  Only the address pointers are passed and not the actual
data.  The next 01 level is a list of BLL cells.  It contains a list of
addresses under it.  The first 02 level is reserved and is used by the system.
The second 02 level, FIRST-BLL, points to the first 01 level that follows, ie
MSGOUT.  Similarly, the third 02 level, SECOND-BLL, points to the second 01
level that follows, ie INV-DAT, and so on.  MSGOUT and INV-DATA will contain the
actual data passed by the CSP application.
In the procedure division, address pointers from FIRST-PARM-PTR and SECOND-PARM-
PTR are moved to FIRST-BLL and SECOND-BLL respectively.  This establishes
addressability to the passed data, ie MSG-OUT and INV-DATA, so that they can be
accessed.
A CSP application using CALL
         *************************************************************
         *             CALL TO CICS                         MSLTIKA  *
         *************************************************************
         OPTION -      EXECUTE                   OPTION

                       MOVE INVRTNO TO TESTWS.PARTNO;
                       MOVE INV.DESCR TO TESTWS.DESCR;
                       MOVE INV.QTY TO TESTWS.QTY;
                       CALL MAINCAL MSG,TESTWS (NOMAPS;
Example of CSP working storage
                       RECORD NAME:              WS01
                       ORGANIZATION:             WORKING STORAGE
                       LENGTH IN BYTES           42

 NAME    LVL  OCCURS   TYPE   LENGTH   DEC  BYTES   START
 ...
 MSG      77           CHA       25            25
CSP record being passed
                       RECORD NAME:              TESTWS
                       ORGANIZATION:             WORKING STORAGE
                       LENGTH IN BYTES           32
 NAME    LVL  OCCURS   TYPE   LENGTH   DEC  BYTES   START
 PARTNO   10           NUM        4             4       1
  DESCR    10           CHA       24            24       5
 QTY      10           NUM        4             4      29
A COBOL program called by CSP CALL
*    THIS PROGRAM IS CALLED FROM CSP USING CALL FUNCTION
*    IT DOES THE FOLLOWING:
*       1. RECEIVES 1 RECORD FROM CSP
*       2. STARTS ANOTHER TASK AND PASSES DATA TO IT
*       3. PASSES DATA BACK TO CSP INDICATING THAT TASK
*          REQUESTED HAS BEEN PERFORMED
 ...
 PROGRAM-ID. MAINCAL.
 ...
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  PRINT-REC.
     02  PRINT-PARTNO       PIC 9(4).
     02  PRINT-DESCR        PIC X(24).
     02  PRINT-QTY          PIC 9(4).
 77  LEN USAGE IS COMP      PIC S9(2) VALUE 32.
 01  DFHAID COPY DFHAID.
 LINKAGE SECTION.
 01  DFHCOMMAREA.
     02  FIRST-PARM-PTR     PIC S9(8) COMP.
     02  SECOND-PARM-PTR    PIC S9(8) COMP.
 01  PARMLIST.
     02  FILLER             PIC S9(8) COMP.
     02  FIRST-BLL          PIC S9(8) COMP.
     02  SECOND-BLL         PIC S9(8) COMP.
* DATA LINKAGE AREA FOR DATA PASSED FROM CSP TO CICS
 01  MSG-OUT                PIC X(25).
 01  INV-DATA.
     02  INV-PARTNO         PIC 9(4).
     02  INV-DESCR          PIC X(24).
     02  INV-QONHAND        PIC 9(4).
 PROCEDURE DIVISION.
 GET-PTR.
     MOVE FIRST-PARM-PTR TO FIRST-BLL.
     MOVE SECOND-PARM-PTR TO SECOND-BLL.
* INITIALISE MESSAGE FIELD
     MOVE SPACES TO MSG-OUT.
* MOVE CSP PASSED DATA TO WORKING STORAGE
     MOVE INV-DATA TO PRINT-REC.
     EXEC CICS HANDLE CONDITION LENGERR(ERR) END-EXEC.
 START-PRINT.
     EXEC CICS START
        TRANSID('PRNT') FROM(PRINT-REC) LENGTH(32)
        TERMID('P087') END-EXEC.
     GO TO FIN.
 ERR.
     MOVE 'INCORRECT DATA LENGTH' TO MSG-OUT.
 FIN.
     MOVE 'RECORD PRINTED' TO MSG-OUT.
     EXEC CICS RETURN END-EXEC.
     GOBACK.
Note that entries for this program should be included in the PPT and PCT.
For VS COBOL II, the code would be as follows:
 ...
 LINKAGE SECTION.
 01  DFHCOMMAREA.
     02  FIRST-PARM-PTR      USAGE IS POINTER.
     02  SECOND-PARM-PTR     USAGE IS POINTER.
 01  MSG-OUT               PIC X(25).
 01  INV-DATA.
 ...
 PROCEDURE DIVISION.
 GET-PTR.
      SET ADDRESS OF MSG-OUT TO FIRST-PARM-PTR.
     SET ADDRESS OF INV-DATA TO SECOND-PARM-PTR.
 ...
USING CALL CREATX
CALL CREATX is translated into a CICS START, which initiates an asynchronous
task.  The current application task continues without the delay of initiating
another task.  CALL CREATX does not force a CICS SYNCPOINT.  The new task
started is independent of the initiating task and represents a different LUW.
Of the three parameters passed, the second is a dummy and is not used.  The
first represents the working storage to be passed and the third is the terminal-
id for the new transaction.  A maximum of 4086 bytes may be passed.  Working
storage is passed but 77-level data items are not passed.  The COBOL program
that receives control can access the data passed from temporary storage by
issuing a CICS RETRIEVE command to place the passed data into its working
storage.
A CSP application using CALL CREATX
         *************************************************************
         *             START CICS APPL                      MSLTIKA  *
         *************************************************************
         OPTION -      EXECUTE                   OPTION

                       MOVE ... ; move data to be passed
                       MOVE 42 TO WSLENGTH;     size of work
                       MOVE 'PRNT' TO WSTRAN;   transid
                       MOVE ' ' TO WSBLANK;     4 blanks
                       MOVE 'P087' TO WSPID;    Terminal id
                       CALL CREATX WORKAREA,DUMMY,WSPID;
Example of CSP working storage
                       RECORD NAME:              WORKAREA
                       ORGANIZATION:             WORKING STORAGE
                       LENGTH IN BYTES           42

 NAME    LVL  OCCURS   TYPE   LENGTH   DEC  BYTES   START  DESCRIPTION
 *        05  00001    CHA       42            42      1   All work
 WSLENGTH 10  00001    BIN        4             2      1   Length
 WSTRAN   10  00001    CHA        4             4      3   Trans id
 WSBLANK  10  00001    CHA        4             4      7   4 blanks
 *        10  00001    CHA       32            32      11  data passed
 WSPARTNO 15  00001    CHA        4             4      11  part no
 WSDESCR  15  00001    CHA       24            24      15  descript
 WSQTY    15  00001    NUM        4             4      39  quantity
 DUMMY    77  00001    CHA        1             1          8100 only
 WSPID    77  00001    CHA        4             4          Terminal id
 ...
Example of COBOL program called by CSP CALL
*   THIS PROGRAM IS INVOKED BY ANOTHER CICS PROGRAM AS WELL AS
*   BY CSP CREATX ROUTINE.
*   IT DOES THE FOLLOWING:
*      1. RECEIVES DATA FROM STARTING PROGRAM.
*      2. PLACES DATA INTO MAP.
*      3. SENDS MAP TO PRINTER.
 IDENTIFICATION DIVISION.
 PROGRAM-ID. PRTREC.
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  PRINT-OUT.
     02  PARTNO-OUT          PIC X(4).
     02  DESCR-OUT           PIC X(24).
     02  QTY-OUT             PIC X(4).
 77  LEN USAGE IS COMP       PIC S9(2) VALUE 32.
 01  DFHAID COPY DFHAID.
 01  PRT10 COPY PRTMAP.
 01  DFHBMSCA COPY DFHBMSCA.
 PROCEDURE DIVISION.
 GET-DATA.
      EXEC CICS RETRIEVE INTO(PRINT-OUT) LENGTH(LEN) END-EXEC.
     PERFORM MAP-BUILD.
 MAP-BUILD.
     MOVE PARTNO-OUT TO PARTNOO
     MOVE DESCR-OUT TO DESCRO
     MOVE QTY-OUT TO QTYO
     EXEC CICS SEND MAP('PRT1') MAPSET('PRTMAP')
         ERASE PRINT L80 END-EXEC.
     GO TO FIN.
 FIN.
     EXEC CICS RETURN END-EXEC.
     GOBACK.


Nusrat Waheed
Technical Support Project Leader
Olayan (Saudi Arabia)    ) Xephon 1988

















































