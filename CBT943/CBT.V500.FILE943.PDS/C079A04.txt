Storage violation analysis


WHAT IS A STORAGE VIOLATION?

A storage violation (either a CICS DFH0501 abend or an
ASCF abend) indicates that a request has been made to the
CICS Storage Control Program (SCP), DFHSCP, and, in
attempting to satisfy the request, CICS has found an
inconsistency in the storage control areas.

SCP controls the allocation of CICS storage to transactions via
a GETMAIN call and the freeing up of storage on completion
via a FREEMAIN call. It is only while processing a storage
request that CICS can identify a storage violation.
Consequently, the actual corruption of the storage control
blocks can occur at any time from transaction creation (task
attach) to the last request to the SCP.

CICS assists us in debugging storage violations by identifying
through a storage violation code how the storage control block
is incorrect and providing the address of the storage control
block in question.

RESOLUTION SUMMARY

1      Collect CICS logs, the CICS dump, the CICS Messages
      and Codes manual, and the CICS Data Areas manual.

2      From the dump, identify the date, time, region, and
      storage violation code.

3      Review the cause of the abend from the CICS Messages
      and Codes manual and identify the storage control area
      involved.

4      Locate within the DSA portion of the dump the block of
      storage identified by the abend and identify blocks of
      storage on either side of the block in error. Review the
      contents of the block in error attempting to identify its
      function.

5      From either the trace or the TCA (pointed to by register
      12), identify the failing task and program.

6      Trace via the program source code and the CICS trace the
      usage of the storage area resulting in the storage
      corruption.

7      Resolve the problem!


STORAGE CONTROL BLOCKS' SAAS AND FAQES

Within the CICS DSA all storage is either allocated to a task
(GETMAINed) and in use, or not allocated to a task
(FREEMAINed). Every block of storage within the CICS DSA
is described by a Free Area Queue Element (FAQE) or a
Storage Accounting Area (SAA).

SAA

The SAA is used by CICS to keep track of allocated blocks of
storage. Each and every block of allocated storage is preceded
(and, in the case of user storage, followed) by an SAA. The
SAA contains a one-byte code describing the type of storage, a
two-byte length field, and, often, a chain address pointing to
the next SAA in the chain.

FAQE

The FAQE is used by CICS to manage unallocated blocks of
storage, that is storage that has been used previously and has
been freed (FREEMAINed) or has never been allocated. CICS
manages free blocks of storage in FAQE chains, where each
FAQE points to both the next and previous block of free
storage. These blocks are maintained in address order.


HOW IS A CICS STORAGE VIOLATION DUMP ORGANIZED?

When a storage violation is detected by SCP, the active
transaction is abended U501 and a DFH0501 message is
written to the JES job log. A complete storage dump of the
CICS address space is taken to aid diagnosis. The CICS dump
file requires formatting before it is readable via program
DFHDUP.

The first page of the dump contains the storage interrupt code
in word 3 of the PSW. Word 4 often contains the address of the
control block in question.

In chapter 3 of CICS Messages and Codes, under the heading
'DFH0501 abends', are descriptions of each of the interrupt
codes and which of the general purpose registers contain
relevant information.

The next part of the dump is an unformatted printout of the
CICS DSA not including resident program storage. Within the
CICS DSA all storage is dumped to allow examination of
allocated and unallocated storage.

Following the unformatted dump is a formatted dump of CICS
system areas, a formatted printout of the CICS trace table, and
a formatted dump of every transaction accompanied by all
storage allocated to the transaction at the time of the storage
violation.


THE ANALYSIS

What are we looking for?

A storage violation occurs because a program is using a block
of storage for something for which it was not intended. Often
this is because an error or exception condition arises. It may be
that the block of storage is not big enough. We are looking for
a program that has made an incorrect assumption.

In our examination of the snapshot that CICS has made of itself
at the time the violation was detected we should ask the
following questions:


o      What problem is CICS reporting?

o      Who has been affected and what happened to them?

o      What was the transaction?

o      What was the program?

o      What was the program/transaction doing at the time?

o      Were there any abnormal conditions such as MAPFAIL or
      end of file?

o      What control blocks or transaction work areas are in use?
o      Who caused the storage violation?

o      Under what conditions was it caused?

o      How can we stop it from recurring?

The basic analysis

The storage violation is first observed via the DFH0501
message in the CICS JES job log. At this point, the date, time,
and region should be noted and the CICS log checked and
printed for any message within five minutes of the problem. In
MRO-connected systems all connected CICS regions should be
looked at and all CICS and JES logs kept.

The system programmer should be contacted to run the dump
analysis program and to send a copy of the dump to your user-
id's SDSF hold class.

The first page of the dump will provide essential identifying
information such as:

o      Date and time violation was detected

o      Storage violation interrupt code

o      Address of storage control block in error

o      SCP's registers at time of abend

o      RIDs identifying a program name (usually the victim).

This information is sufficient to identify the problem uniquely.
We file this information until we can perform further, more
detailed, analysis.

The storage area in error

Using the interrupt code and the CICS Messages and Codes
manual, we can determine the register that contains the address
of the storage control block that CICS has determined to be in
error. This control block will be described by either an SAA
(or SAA pair) or an FAQE.

Using this address, we locate in the unformatted dump of CICS
dynamic storage the block of storage in question, and print out
some 100 lines of dump either side.

Examination of the failing storage control area and the
preceding storage control areas will identify the exact cause of
the storage violation and what has enabled SCP to identify the
problem. Having found the cause of the storage violation, the
challenge is to identify the owner of the corrupted storage - the
corruptee.

In most cases, the corrupter is the owner of the corrupted
storage. Often, storage will be obtained for a transaction and,
while that transaction has explicitly asked for a certain amount
of storage, the storage will be incorrectly utilized and destroy
storage control areas. This results in a storage violation when
the block of storage is FREEMAINed, usually at transaction
end.

While this is an assumption and must always be regarded as a
rule of thumb, the identification of the transaction which owns
(or did own) the block of storage will lead to the identification
of the program using the storage and, in fact, the specific
purpose of the storage and subsequently the condition that
caused a corruption of the storage control element.

If the storage violation does not have a DFH0501 violation
code (for example an SOC4), we can identify the corrupted
storage block in several ways. We can look at the TCA in the
formatted dump and chain through the allocated and free
storage chains looking for a corrupted control block. Using the
address in the PSW, it is possible to identify the failing
instruction in DFHSCP (with OMEGAMON's view storage
function, for example), and subsequently the register with the
invalid address, and deduce from the code from where that
register was loaded.

Identification can be done in three possible ways:

1      By using the IEHEYEBALL utility and looking at the
      corrupted block of storage (in particular the character
      representation on the right of the dump), an application
      programmer will often recognize the information as a
      COMMAREA or a program's working storage. In
      application problems (rather than system software), if the
      storage violation code indicates a corruption in an FAQE
      chain, look at the block of allocated storage immediately
      prior to the FAQE, ie look for an SAA (and duplicate SAA
      for user storage, code '8C') representing a block of
      allocated storage immediately prior to the FAQE. It is
      often this storage that has overrun into a following FAQE.
      It is the owner of this allocated storage we are looking for.

2      Both SAAs and FAQEs are chained together in address
      chains that originate with the system TCA. Once the
      system TCA has been found, information such as
      transaction code, active program, terminal-id, and user-id
      are available. The active TCA can also be found via
      register 12. CICS conventionally uses register 12 to
      address the current Task Control Area (TCA) and register
      13 to address the Common Storage Area (CSA). But make
      sure that this TCA addresses the task when CICS detects
      the storage violation not when the storage violation
      actually occurs.

3      Use the CICS trace, in particular the type 'F1' SCP entry
      and exit traces, to identify on whose behalf the corrupted
      block of storage is GETMAINed and FREEMAINed.

The CICS trace

The characteristic peculiar to storage violations is that CICS
can only identify that a problem has occurred when the SCP is
invoked, either for a GETMAIN or a FREEMAIN, and in
satisfying the request, SCP must process the corrupted block of
storage.

This means that we must examine the past history of CICS in
order to identify the last time the corrupted storage block was
processed without error. Of necessity, the last time SCP
processed (ie FREEMAINed or GETMAINed) the corrupt
block of storage without detecting a storage violation, the
storage was not corrupted.

Using trace to determine when the block was last processed
without error gives a definite period when the problem
occurred, and with the trace we know all the processes
(application and system) that CICS performed in that time.

Reading the CICS trace

The CICS dump formatting program (DFHDUP) will print a
formatted trace. All trace entries are readable but the CICS
User's Handbook or CICS Diagnosis Reference explain each
type of trace entry in detail.

The trace is an historical record of the calls made to CICS
programs by application transactions in requesting CICS
services. Each call is time-stamped and the trace is printed in
time-of-day order. Each CICS service invoked writes a trace
record detailing a trace identification code and the calling
parameters. On exit from the CICS service, an exit trace record
is also written with the result of the call.

The processing of a transaction can be followed by using the
task field to identify a single transaction. This is a number
assigned by CICS when a transaction is attached (created). The
right-hand side of the formatted trace is an explanation of the
trace entry. It shows the CICS service requested and the
invoking parameters. The register 14 field identifies the address
of the code invoking the CICS service.

SCP writes trace entries (code 'F1') on entry, detailing the
service requested and the parameter list and a trace entry (code
'C8') on exit. The SCP exit trace includes the address of the
storage and the first four bytes of the SAA for a GETMAIN
and a FREEMAIN.

EXEC INTERFACE PROGRAM (EIP) trace entries are useful
in following the logic within a particular application program.
These entry and exit traces are written whenever a CICS
program makes an EXEC CICS call. The trace in this context
is very similar to using the CEDF debugging transaction in
CICS to follow the execution logic in the program.

Identification of which user program is currently running is by
using the Program Control Program LOAD and XCTL (type
'F2') trace entries. The name of the program is detailed and the
address at which the program is loaded.

When CICS services are requested, the CICS program invoked
is also recorded in the trace type field. For example, SCP
traces are from DFHSCP, XTP traces are from DFHXTP -
External Transformer Program etc. As a general rule, prefix the
trace type with DFH.

What to look for

Having previously identified the storage control block in error
we use the CICS trace to find who owns that storage block.
Although knowing the owner of the storage block doesn't
necessarily identify the culprit, a good rule of thumb is that
transactions often damage their own storage more readily than
they damage another transaction's storage. This is because
storage violations are more frequently detected on
FREEMAINs of transaction storage at the end of transactions.
It is when CICS is tidying up after a transaction has completed
that it detects storage control block corruptions.

Searching the trace table, in particular field A, for the address
of the storage control area in error, will identify the last time
that that storage block was successfully GETMAINed or
FREEMAINed. At that point of transaction processing the
storage must have been uncorrupted or else the storage
violation would have been detected then (instead of later). This
reduces the amount of trace that must be examined in detail. It
also identifies the transaction that last successfully processed
that block of storage.

A good hint here is that if the corrupted block of storage is in
fact controlled by an FAQE (that is, it was a free block of
storage) and SCP has detected a violation while scanning the
FAQE chains for a GETMAIN, you should also examine the
allocated block of storage immediately preceding the FAQE.
Often the transaction using the allocated block of storage has
'run off' the end of its allocated storage and corrupted the
following FAQE.

Having identified both the corrupt block of storage and, with
the trace, the processing that CICS has done since the block of
storage was intact, we must examine in detail the programs -
both user-written and CICS-provided - to discover the usage
(purpose) of the corrupted storage block.

Identifying the usage of the corrupted storage block

The next step in storage violation analysis is to identify the
normal function and user of the storage block in error. Most
often, storage violations occur because application programs
make assumptions about the storage areas they have requested
or obtained.

For example, many programs are passed a COMMAREA
containing information about a previous iteration in a pseudo-
conversational series of transactions. Programs check for the
existence of the COMMAREA by verifying whether the
COMMAREA length is greater than zero. They then proceed
via a Linkage Section to map that COMMAREA to a COBOL
01 level. There is nothing in COBOL or CICS that validates
that the COMMAREA obtained matches the length of the 01-
level structure used by the program. In this instance the
program assumes that it has been invoked correctly, but may
legitimately write off the end of the COMMAREA causing a
corruption in whatever storage follows the COMMAREA. A
better verification would be to validate that the length of the
COMMAREA passed matches the length of the COMMAREA
01 defined in the program Linkage Section.

It is these 'assumptions' (or perhaps presumptions) that we are
looking for now. When an invoked program or CICS service
incorrectly uses a storage area, often the incorrect use can be
attributed to an exceptional condition that infrequently occurs.
Such exceptional conditions are often difficult to test and the
exception condition code often makes assumptions.

An example that occurs frequently in CICS applications is of
programs that make allowance for a MAPFAIL condition by
incorporating a HANDLE MAPFAIL CONDITION, but then
forget in the HANDLE code that there is no map and attempt to
write an error message to a non-existent map. This causes a
storage violation because the program assumes that CICS has
returned a map address when, in fact, it has returned nothing.

By examining each program invoked from the last time the
storage block was processed correctly and the storage areas
being utilized, we eventually identify the usage of the
corrupted storage block. Very often the information in the
corrupted storage can provide very good clues as to its usage.
This is why most application programs identify working
storage and COMMAREAs in particular. With maps it's a
good idea to include a field for the invoking program name as
identification.

This is the most difficult part of the storage violation analysis.
It is essential because most storage violations are caused by the
incorrect use of an area of storage under exception or error
conditions rather than by a purely random move of some data
from anywhere to anywhere.

Once the usage of the block of storage is determined, the only
remaining task is to identify the corrupter.

Determining the corrupter - WHODUNIT

Using the information found so far (the corrupted storage area,
the trace showing the programs invoked, and the storage areas
used - COMMAREA and working storage), we isolate the
problem to a particular program, hopefully an application
rather than system software.

The CICS trace is the key to doing this. Within the trace, by
looking backwards for the last trace entry made by the PCP for
this transaction, we can identify the last application program to
which control passed.

Much useful information can be obtained from the TCA. The
address of the TCA is always in register 12. In the formatted
portion of the dump, the TCA is laid out with important fields
highlighted. It is always divided into User TCA, System TCA,
Task Abend Control Block, and Exec Interface Storage. These
areas contain all relevant information about the transaction
(transaction-id, last abend code, COMMAREA address, and
length address of terminal table entry are a few). For full
details, the CICS Data Areas documents every byte of these
areas.

Having determined the program indicated in the trace and
found the transaction's COMMAREA and working storage we
must go through the code attempting to identify the logic that
causes storage to be overwritten.

In analysing the program, we often make assumptions about
the contents of variables and results of instructions. It pays to
be suspicious and check the results in the dump of any
instruction no matter how simple. Always keep in mind what
the violated storage looks like. For example, a move may have
moved the correct information but may have moved other fields
also.


FIXING THE PROBLEM

The previous step sounds simple. After all the diagnosis (we
know the result of the corruption, the program concerned, and
the processing logic from the trace) we should be able readily
to identify the problem and resolve it.

However, identifying the exact cause of the violation may
highlight a point in the logic of the program where, given
information, the program has performed correctly but the
information passed to the program was invalid.

Program logic can be checked and tested in the development
environment with tools from third-part software vendors, and,
where the problem is data related, such data can be copied
from production to the test region's files.

If, however, the problem appears to be CICS-software related,
sometimes several occurrences are necessary to gain sufficient
insight. A search of the INFO/OZ problem database or a call to
the IBM Support Centre can reveal similar scenarios that can
give hints about which control blocks to look at in the dump.

The ultimate solution will prevent a recurrence of the storage
violation. It may not necessarily be a code change. An 'occurs
depending on' problem that I experienced required programs to
be made resident in order to force working storage to a
particular range of addresses. Be especially wary of programs
that use facilities that may have been permitted in previous
releases of the software but are now disallowed, such as using
the TWA in CICS start-up programs. Restrictions are
documented in the CICS Application Programmer's Reference
Command Level manual. Consult all local expertise - someone
may have unique knowledge of a particular program or may
have seen a similar condition and often be able to provide a
different perspective.

Finally, practice makes perfect. Every dump and storage
violation looked at provides more insight into the workings of
applications and CICS software and the types of problem that
can occur. Document each problem addressed, the program and
specific circumstances, observations, theories, and resolutions
or bypasses.

Know your application function, facilities, and user practices!

David L Evans
Systems Programmer (Australia)

