Never again compress CICS.LOADLIB


THE PROBLEM

Suppose you modify a CICS table and try to Assemble it, but
the assembly fails with an SB37 or SD37 because
CICS.LOADLIB is full.  You know better than to compress
LOADLIB while any production CICS is still up.  What will
you do?


AN EXPLANATION

CICS.LOADLIB may not be safely compressed while CICS is
up because CICS does not use a LOAD macro to retrieve
modules from the RPL.  CICS uses something fancier and
faster (a BLDL), the exact nature of which is only hinted at in
the CICS manuals, and which apparently is best not revealed to
the likes of you.  This means that an in-core directory of the
modules in DFHRPL is built at CICS start-up time.  This
directory is not updated.  If you compress a load library that
appears in the RPL while CICS is up, any module that is
moved as a result of the compression cannot be correctly
retrieved by that CICS system.


THE SOLUTION

Most CICS tables can't be NEWCOPYed.  We can utilize this
fact as a feature.  If these same table load modules are
segregated into their own load library, we can compress that
load library any time we like, say after a D37.  This compress
will do no harm to any CICS system that is running.

A list of tables that may be linked into this new library
includes:

o      DBD
o      DCT
o      FCT
o      JCT
o      MCT
o      PCT
o      PPT
o      PSB
o      SIT
o      TCT.

A list of tables that may not be safely linked in this new library
includes:

o      PLT
o      SNT.

If you can NEWCOPY a module, it doesn't belong in this new
library.  Here is a sample RPL with our compressible table
LOADLIB inserted.

//DFHRPL DD DISP=SHR,DSN=CICS211.LOADLIB2
//       DD DISP=SHR,DSN=CICS211.LOADLIB
//       DD DISP=SHR,DSN=CICS211.COMPRESS.TABLES
//       DD DISP=SHR,DSN=USER.PROGRAMS.LOADLIB


Stephen Kuske
Systems Programmer
Iowa Methodist Medical Center (USA)      c Iowa Methodist Medical Center 1991

