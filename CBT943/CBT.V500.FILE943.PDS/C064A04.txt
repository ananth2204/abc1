CEMT from batch for VSE (continued)

This month we conclude our article about issuing CEMT
commands from batch under VSE by taking a look at the main
CICS task and the start-up/shutdown processor.


THE CICS TASK

To actually get the CEMT commands executed, the subtask
passes the data from the batch program to a CICS task that is
waiting on an ECB.  The subtask posts the ECB and then waits
for the CEMT command to be processed.  The CICS task calls
the CEMT interface program to execute the actual CEMT
command.  After execution is complete, the CICS task posts
the ECB on which the subtask is waiting, then waits on its own
ECB.  The subtask then notifies the batch program of
command completion.

This program could be easily expanded to handle more than
CEMT commands.  It could also be used to open/close DL/I
databases or send messages to groups of users etc.

         TITLE 'CFBPROC  - APPLICATION DETERMINATION'
* This is a command level program and should be processed through
* DFHEAP1$ before being assembled.
DFHEISTG DSECT
@WORK    DS    F
CEMTPARM DS    5F
         ORG   CEMTPARM
@CMD     DS    F
@CMDL    DS    F
@IND     DS    F
@OUT     DS    F
@OUTL    DS    F
OUT      DS    CL200
WOP      DS    CL80
ABCD     DS    CL4
*                     C F B P R O C                                 *
CFBPROC  CSECT
* Here we set for any abends or errors so that we are given control
* in the event of a termination or such. This is important so that
* we can post the ECB for the CICS subtask; otherwise, he'll wait
* for a long time.
         EXEC  CICS HANDLE ABEND LABEL(ABND)
         EXEC  CICS HANDLE CONDITION ENDDATA(NODATA) ERROR(UNKNOWN)
* We are passed the address of the work area so that we have access
* to the ECBs used to communicate between us and the CICS subtask.
         EXEC  CICS RETRIEVE INTO(@WORK) LENGTH(H4)
         L     R10,@WORK                   pointer to work area
         USING WORKAREA,R10                tell assembler
         LA    R8,WFROMECB                 point to our ECB
* Send a message to CSMT so that everyone knows we are OK.
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(STARTMSG) LENGTH(H80)
WAITER   DS    0H
* Wait for the CICS subtask (or something) to post our ECB.
         EXEC  CICS WAIT EVENT ECADDR(R8)
         MVC   WFROMECB,=F'0'              reset it for next time
         CLC   WORKBUF(8),=CL8'SHUTDOWN'   is this a shutdown ?
         BE    SHUTTER                     yes - special processing
         LA    R4,WORKBUF                  gotta do
         ST    R4,@CMD                     all these
         LA    R4,CMDL                     loads and
         ST    R4,@CMDL                    stores so
         LA    R4,IND                      that we
         ST    R4,@IND                     are re-entrable
         LA    R4,OUT
         ST    R4,@OUT
         LA    R4,OUTL
         ST    R4,@OUTL
* Go pass the command to CEMT
         EXEC  CICS LINK PROGRAM('DFHEMTA') COMMAREA(CEMTPARM)
         MVC   WORKRPLY(1),OUT+11          save return code
         MVC   WORKRPLY+1(L'WORKRPLY-1),OUT+12     and reply
         MVC   WOP,CMDMSG                  move skeleton
         MVC   WOP+11(L'WOP-11),WORKBUF    and fill it in
* Display command passed and CEMT response.
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(WOP) LENGTH(H80)
         MVC   WOP,REPLYMSG                insert message
         MVC   WOP+11(L'WOP-11),WORKRPLY   and fill it in
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(WOP) LENGTH(H80)
* Here we post the ECB on which the CICS subtask is waiting.
         OI    WTOECB+2,X'80'              post it and
         B     WAITER                      go wait some more
* Shutdown processing
SHUTTER  DS    0H
         MVC   WORKRPLY+1(L'WORKRPLY-1),=CL79'SHUTDOWN COMPLETE'
         OI    WTOECB+2,X'80'              reset ECB
         MVI   WORKRPLY,X'00'              indicate all's OK
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(SHUTMSG) LENGTH(H80)
         EXEC  CICS RETURN             ,   finished
* Error processing
NODATA   DS    0H                          NODATA error
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(DATAMSG) LENGTH(H80)
         B     COMERR
ABND     DS    0H                          ABEND
         EXEC  CICS ASSIGN ABCODE(ABCD)   , save abend code
         MVC   WOP,ABNDMSG                 in stick it
         MVC   WOP+17(4),ABCD              into message
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(WOP) LENGTH(H80)
         EXEC  CICS DUMP DUMPCODE(=CL4'CFB1') TASK  , give a dump
         B     COMERR
UNKNOWN  DS    0H                          WTF ?
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(UNKNMSG) LENGTH(H80)
         EXEC  CICS DUMP DUMPCODE(=CL4'CFB2') TASK  , give a dump
         B     COMERR
COMERR   DS    0H
         MVI   WORKRPLY,X'FF'              indicate error
         MVC   WORKRPLY+1(L'WORKRPLY-1),=CL79'CFBPROC TERMINATED.'
         OI    WTOECB+2,X'80'              reset ECB
         EXEC  CICS RETURN               , fini
         LTORG
*                  M E S S A G E S                                *
DATAMSG  DC    CL80'CFBPROC-1  No data address passed. CFB terminated.'
ABNDMSG  DC    CL80'CFBPROC-2  Abend XXXX occurred. CFB terminated.'
UNKNMSG  DC    CL80'CFBPROC-3  Unknown error occurred. CFB terminated.'
STARTMSG DC    CL80'CFBPROC-4  CFB startup complete.'
SHUTMSG  DC    CL80'CFBPROC-5  CFB shutdown complete.'
CMDMSG   DC    CL80'CFBPROC-6'
REPLYMSG DC    CL80'CFBPROC-7'
H4       DC    H'4'
H80      DC    H'80'
TDQ      DC    CL4'CSMT'
CMDL     DC    H'80'
OUTL     DC    H'200'
IND      DC    X'00'
*                  D S E C T S                                    *
WORKAREA DSECT
WORKSAVE DS    CL120
WORKBUF  DS    CL80
WORKRPLY DS    CL80
WFROMECB DS    CL4
WTOECB   DS    CL4
WORKMFG  DS    CL64
@CFBSUB  DS    CL4
LWORK    EQU   *-WORKAREA
         END   CFBPROC


THE START-UP/SHUTDOWN PROCESSOR

The only other program in the system is the start-up/shutdown
processor, which would normally be executed in the PLTPI and
PLTSD; however, a provision was made to execute this
program from a terminal with a 'START' or 'STOP' option.
Normally, VSE system service routines such as GETVIS and
ATTACH would not be included in a CICS program.  Under
normal circumstances this program will only run at CICS
initialization and shutdown and should cause no problems.
Also, the program handles all its own errors and tries to clean
up as much as possible from error conditions.

         TITLE 'CFBMAIN - INIT/SHUTDOWN PGM FOR CFB'
*     CICS PLT PROGRAM TO STARTUP/SHUTDOWN C.F.B.                 *
*                  W O R K   A R E A S                            *
DFHEISTG DSECT
@CSA     DS    F
@GETVIS  DS    F
ATTRC    DS    F
PGMADDR  DS    F
FWORK    DS    F
RLEN     DS    H
CFBTASK  DC    CL8' '
PARTID   DS    CL2
WOP      DS    CL80
ABCD     DS    CL4
INPARMS  DS    0CL80
INPTRNID DS    CL4
         DS    CL1
INPTYPE  DS    CL4
         DS    CL71
SC       DS    CL2
CFBMAIN  CSECT
         EXEC  CICS HANDLE ABEND LABEL(QUIT)
         EXEC  CICS HANDLE CONDITION ERROR(EQUIT)
*  Check if this is CICS startup or shutdown. If it is, perform
*  appropriate processing. If neither, we are probably executing
*  from a terminal.
         MVC   SC,=CL2' '                  clear start code
         EXEC  CICS ADDRESS CSA(R4)        , get CSA address
         USING DFHCSADS,R4                 point to CSA
         TM    CSAXST1,CSAXSI              system initialization ?
         BO    STARTUP                     yes - go start CFB
         TM    CSAXST1,CSAXSTM             system termination ?
         BO    SHUTDOWN                    yes - go shutdown CFB
         EXEC  CICS ASSIGN STARTCODE(SC)   , get startcode
         DROP  R4                          not needed anymore
* We are probably running at a terminal. Check to see what he wants.
STATTERM DS    0H
         CLC   SC,=CL2'TD'                 terminal oriented ?
         BE    CHKIPT                      yes - go check input
         EXEC  CICS RETURN                 , no - just go away
CHKIPT   DS    0H
         EXEC  CICS IGNORE CONDITION LENGERR
         MVC   RLEN,H80                    , set receive length
         EXEC  CICS RECEIVE INTO(INPARMS) LENGTH(RLEN) , get data
         CLC   INPTYPE,=CL4'STOP'          shutdown ?
         BE    SHUTDOWN                    yes
         CLC   INPTYPE,=CL4'SHUT'          shutdown ?
         BE    SHUTDOWN                    yes
         CLC   INPTYPE,=CL4'STAR'          startup ?
         BE    STARTUP                     yes
         EXEC  CICS SEND FROM(PARMMSG) LENGTH(H80) ERASE , must be err
         EXEC  CICS RETURN                 , send msg and go home
* Here we do our shutdown.
SHUTDOWN DS    0H
         EXEC  CICS HANDLE CONDITION QIDERR(NOTSQ)
         EXEC  CICS READQ TS QUEUE(TSQ) INTO(@GETVIS) LENGTH(H4)
               ITEM(QITEM)                 , get ptr to work area
         L     R10,@GETVIS                 load base
         USING WORKAREA,R10                tell assembler
         LA    R1,WORKSAVE                 point to subtask savearea
         DETACH SAVE=(R1)                  kill subtask
         MVC   WORKBUF(8),=CL8'SHUTDOWN'   indicate shutdown
         LA    R1,WFROMECB                 tell CICS task
         POST  (R1)                        kick him off
         LA    R8,WTOECB                   wait for him
         EXEC  CICS WAIT EVENT ECADDR(R8)  , to complete
         LA    R1,WORKSAVE                 start of GETVIS
         LA    R0,LWORK                    length
         FREEVIS ADDRESS=(R1),LENGTH=(R0)  return it
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(EOJMSG) LENGTH(H80)
         CLC   SC,=CL2'TD'                 if not at a terminal,
         BNE   SHUTEOJ                     don't display a message
         EXEC  CICS SEND FROM(EOJMSG) LENGTH(H80) ERASE
SHUTEOJ  DS    0H
         EXEC  CICS IGNORE CONDITION QIDERR
         EXEC  CICS DELETEQ TS QUEUE(TSQ)   , delete ts data
         EXEC  CICS RETURN                  , and quit
* We can't find the temp storage queue, so we don't know the location
* of our work area. This prevents us from doing a normal shutdown.
NOTSQ    DS    0H
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(NOQMSG) LENGTH(H80)
         CLC   SC,=CL2'TD'
         BNE   SHUTEOJ
         EXEC  CICS SEND FROM(NOQMSG) LENGTH(H80) ERASE
         B     SHUTEOJ
* Here we do our startup.
STARTUP  DS    0H
* get some storage to be used for task save areas and ECBs.
         LA    R0,LWORK                     number of bytes needed
         GETVIS ADDRESS=(R1),LENGTH=(R0),PAGE=YES  go get it
         LTR   R15,R15                      any errors ?
         BNZ   VISERR                       yes - go print a message
         LR    R10,R1                       load work area base
         ST    R10,@GETVIS                  (and save it)
         USING WORKAREA,R10                 tell assembler
         MVC   WFROMECB,=F'0'               clear
         MVC   WTOECB,=F'0'                   ECBs
         EXEC  CICS IGNORE CONDITION QIDERR , get rid of old queue
         EXEC  CICS DELETEQ TS QUEUE(TSQ)
         EXEC  CICS HANDLE CONDITION QIDERR
         EXEC  CICS WRITEQ TS QUEUE(TSQ) FROM(@GETVIS) LENGTH(H4)
* Go load the subtask for batch communications
         CDLOAD CFBSUB,RETPNF=YES          load subtask phase
         LTR   R15,R15                     any errors ?
         BNZ   LODERR                      yes - go print a message
         ST    R1,@CFBSUB                  save load address
* Here we retrieve the partition ID (BG,F1, etc.) of the partition
* in which we are currently running. This value is used to modify
* the subtask name field, thus providing a unique subtask name for
* each CICS partition.
         BAL   R9,GETPART                   go get partition ID
         MVC   CFBTASK(3),=CL3'CFB'         insert task name
         MVC   CFBTASK+3(2),PARTID          with partition id
         MVC   WORKSAVE(8),CFBTASK          tell system the sub name
         L     R5,@CFBSUB                   load subtask entry point
         LA    R2,WORKSAVE                  load save area address
         LA    R4,WORKMFG                   load system MFG address
         ATTACH (R5),MFG=(R4),SAVE=(R2)     start subtask
         ST    R1,ATTRC                     save for TM instruction
         TM    ATTRC,X'80'                  ATTACH error ?
         BNZ   ATTERR                       yes - go print a message
* Here we start the CICS task that will call the programs that
* perform the CEMT (or whatever) processing.
         EXEC  CICS START TRANSID(=CL4'CFBP') FROM(@GETVIS) LENGTH(H4)
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(OKMSG) LENGTH(H80)
         CLC   SC,=CL2'TD'
         BNE   EOJ
         EXEC  CICS SEND FROM(OKMSG) LENGTH(H80) ERASE
EOJ      DS    0H
         EXEC  CICS RETURN
*               GET PARTITION ID                                  *
* This routine calculates the familiar 'BG,Fn' partition ID from  *
* the partition id key in the partition communications region.    *
*    Register usage
*          R1,R4,R5,R6 - work
*          R9       - return
GETPART  DS    0H
         COMRG                             get COMREG address
         USING COMREG,R1                   tell assembler
         LH    R4,PWTIMS                   get partition id key
         SRL   R4,4                        divide by 16
         BCTR  R4,R0                       reduce by 1
         SLL   R4,1                        multiply by two for offset
*                                           into table entry
         DROP  R1                          not needed anymore
         L     R1,X'80'                    point to SYSCOM
         USING SYSCOM,R1                   tell assembler
         LH    R5,IJBNPART                 load number of partitions
         DROP  R1                          not needed anymore
         BCTR  R5,R0                       subtract 2
         BCTR  R5,R0
         MH    R5,=H'24'                   multiply by 24
         LA    R6,PARTTAB                  point to start of table
         AR    R6,R5                       add offset into table
         AR    R6,R4                       get partition id
         MVC   PARTID,0(R6)                 and save it
         BR    R9                          go back to caller
PARTTAB  DS    0CL264
         DC    CL24'BGF1'
         DC    CL24'BGF2F1'
         DC    CL24'BGF3F2F1'
         DC    CL24'BGF4F3F2F1'
         DC    CL24'BGF5F4F3F2F1'
         DC    CL24'BGF6F5F4F3F2F1'
         DC    CL24'BGF7F6F5F4F3F2F1'
         DC    CL24'BGF8F7F6F5F4F3F2F1'
         DC    CL24'BGF9F8F7F6F5F4F3F2F1'
         DC    CL24'BGFAF9F8F7F6F5F4F3F2F1'
         DC    CL24'BGFBFAF9F8F7F6F5F4F3F2F1'
*               E R R O R S                                       *
LODERR   DS    0H                          CDLOAD error
         MVC   WOP,VSEERR                  move error message
         MVC   WOP+11(8),=CL8'CDLOAD'      insert function
         B     DSPERR                      go to common rtns
VISERR   DS    0H                          GETVIS error
         MVC   WOP,VSEERR                  move error message
         MVC   WOP+11(8),=CL8'GETVIS'      insert function
         B     DSPERR                      go to common rtns
ATTERR   DS    0H                          ATTACH error
         MVC   WOP,VSEERR                  move error message
         MVC   WOP+11(8),=CL8'ATTACH'      insert function
         B     DSPERR                      go to common rtns
DSPERR   DS    0H                          VSE errors - common rtns
         ST    R15,FWORK                   save register 15
         LA    R8,4                        and
         LA    R14,FWORK                     display
         LA    R15,WOP+35                       it
         BAL   R9,HX2CHAR
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(WOP) LENGTH(H80)
         B     EOJ                         serious error - end job
QUIT     DS    0H
         EXEC CICS ASSIGN ABCODE(ABCD)     , process CICS abend
         MVC   WOP,ABNDMSG
         MVC   WOP+17(4),ABCD
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(WOP) LENGTH(H80)
         EXEC  CICS DUMP DUMPCODE(=CL4'CFB1') TASK
         EXEC  CICS RETURN
EQUIT    DS    0H                          , unknown CICS error
         MVC   WOP,ERRRMSG
         EXEC  CICS WRITEQ TD QUEUE(TDQ) FROM(WOP) LENGTH(H80)
         EXEC  CICS DUMP DUMPCODE(=CL4'CFB2') TASK
         EXEC  CICS RETURN
*                  HEX TO CHARACTER ROUTINE                       *
*        R8  = NUMBER OF BYTES TO PROCESS
*        R14 = INPUT FIELD
*        R15 = OUTPUT FIELD
HX2CHAR  DS    0H
         TRT   0(0,R14),ZONETBL             translate zone
         STC   R2,0(R0,R15)                 and put in output area
         TRT   0(0,R14),NUMTBL              translate numerics
         STC   R2,1(R0,R15)                 and store in output area
         LA    R14,1(R0,R14)                reset to next arg byte
         LA    R15,2(R0,R15)                reset to next output byte
         BCT   R8,HX2CHAR                   process next byte
         BR    R9                           return to caller
ZONETBL  DC    16X'F0',16X'F1',16X'F2',16X'F3',16X'F4',16X'F5',16X'F6'
         DC    16X'F7',16X'F8',16X'F9',16X'C1',16X'C2',16X'C3',16X'C4'
         DC    16X'C5',16X'C6'
NUMTBL   DC    16X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*                  M E S S A G E S                                *
OKMSG    DC    CL80'CFBMAIN-1  Cemt-From-Batch ATTACH successful.'
VSEERR   DC    CL80'CFBMAIN-2  XXXXXXXX error. R15 = X''XXXXXXXX''.'
ABNDMSG  DC    CL80'CFBMAIN-3  Abend XXXX occurred. CFBM terminated.'
ERRRMSG  DC    CL80'CFBMAIN-4  Unknown error has occurred.'
PARMMSG  DC    CL80'CFBMAIN-5  Invalid or missing parameter.'
EOJMSG   DC    CL80'CFBMAIN-6  Cemt-from-batch shutdown complete.'
NOQMSG   DC    CL80'CFBMAIN-7  TS queue QIDERR. Shutdown aborted.'
*                  C O N S T A N T S                              *
TDQ      DC    CL4'CSMT'
TSQ      DC    CL8'@!CFB!@'
H4       DC    H'4'
H80      DC    H'80'
QITEM    DC    H'1'
         LTORG
*                  D S E C T S                                    *
WORKAREA DSECT
WORKSAVE DS    CL120
WORKBUF  DS    CL80
WORKRPLY DS    CL80
WFROMECB DS    CL4
WTOECB   DS    CL4
WORKMFG  DS    CL64
@CFBSUB  DS    CL4
LWORK    EQU   *-WORKAREA
         MAPCOMR
SYSCOM   SYSCOM
         COPY  DFHCSADS
         END   CFBMAIN


CICS TABLE ENTRIES REQUIRED

Add the following entry to your start-up PLT:

         DFHPLT TYPE=ENTRY,PROGRAM=CFBMAIN      START CFB

Add the following entry to your shutdown PLT (prior to
DFHDELIM):

         DFHPLT TYPE=ENTRY,PROGRAM=CFBMAIN       SHUTDOWN CFB

The following are the RDO definitions for the PCT and PPT:

PROGRAM(CFBMAIN)  LANGUAGE(ASSEMBLER) RELOAD(NO) RESIDENT(NO)
PROGRAM(CFBPROC)  LANGUAGE(ASSEMBLER) RELOAD(NO) RESIDENT(NO)
TRANSACTION(CFBM) PROGRAM(CFBMAIN) SPURGE(YES) TPURGE(YES) PROFILE(XXXX)
TRANSACTION(CFBP) PROGRAM(CFBPROC) SPURGE(YES) TPURGE(YES) PROFILE(XXXX)


CONCLUSION

The overhead for this system is minimal - about 20K of
storage.  A little CPU is used by the CICS dispatcher when it
checks the ECB for the one CICS task that is in a wait state.
Any other CPU consumed is done so only when a CEMT
command is being processed.


Michael P Kilroy
Systems Programming Supervisor
Progress Lighting Inc (USA)

