On-line VSAM LISTCAT information

Did you ever want to know something about a VSAM file
without waiting to submit a LISTCAT and then having to look
over the poorly formatted output to find the answer? The
following program can display the information you want to see
from the LISTCAT on your CICS screen.

The VSAM catalog is itself a VSAM file. Because of this, you
can define the VSAM catalog as a VSAM file to your CICS
system, then write a program to access and manipulate the data
in the catalog just as you can use any VSAM file. This
program displays some of the more useful fields from the
VSAM catalog.

The most useful part in this demonstration program concerns
the definitions of the cluster and data and index areas. If you
know the data formats of the VSAM catalog records, you can
select the information that's important in your shop and tailor
the program to make it more useful to you.

This program is not meant to be efficient. It gets the job done.
It doesn't have elegant routines and shortcuts that would make
the program faster and of commercial quality. Instead, it is
written in a simple style so that it is, hopefully, easy to follow.

Since every shop has different VSAM needs, you will probably
want to tailor the displays to reflect the information you think
is important. To make this simpler we have defined twenty-
four 80-character lines, where you can change the format of the
display just by changing the data definitions in the data
division.

The general descriptions of the catalog records (even the fields
not used in this program) are defined in the data division. This
facilitates your making changes to the program to get the
information you need for your shop

Most fields on the catalog record are binary. To avoid any
possible complications with unsynchronized fields, we treat all
input fields as character, then move the input fields to work
fields redefined as binary. This is not terribly elegant, but it is
easy to get the information from these fields without getting
needlessly involved with binary manipulation.


GROUP OCCURRENCE POINTERS

VSAM catalog records use a concept called Group Occurrence
Pointers. Some variable information is put at the end of the
VSAM catalog records in the next available location with
pointers that indicate where the information starts. The two
pointer groups we use in this program are the association
group, which ties together the cluster, data, and index record,
and the statistics group, which maintains record counts and
similar information. There are also Group Occurrence Pointers
for extents allocated, which we ignore in this program.

Practical experience shows that 95% of the time, the variable
information starts at the same displacement in every record.
The logic manual has the information necessary to find the
variable information for every record, not just the records that
fit the usual pattern. Even though using these pointers instead
of constant addresses adds a level of complexity to the
program, it is necessary to include this logic to make the
program general enough to give the correct information for all
VSAM files in the catalog.

In the interests of keeping the demonstration program simple,
we have ignored extension records and alternate indexes and
paths. These records contain important information for
determining volume and extent information and where
individual records are located on the disks. If enough people
are interested in these topics, I'll be glad to write a follow-up
article in the future.

The program runs on a VSE system. I do not know if it will
work on an MVS system, but since VSAM is standardized
across the operating systems, I assume it will work with only
minor alterations.


GENERAL BACKGROUND INFORMATION

The VSAM catalog record is 505 characters long. It has a key
of 44 characters. There are two types of keys. The first is a
sequentially numbered record with the sequential CI number as
the key. All the associations between data, index, cluster, AIX,
and path records are based on this sequential CI number.

For instance, fields in the cluster record for one specific file
might indicate that the associated data record is located at CI
number 65 and the associated index record is located at CI
number 67. The other type of record has the entire 44-character
name as a key. The only other information in this type of
record is the CI where all the information about this cluster,
data, or index is stored. This type of record serves the same
purpose as an alternate index, which allows the system to find
detailed information about a VSAM element when it knows the
alphabetic name it is searching for.

The program in this article allows you to enter a cluster name,
which accesses these indexes, or to browse the entire catalog,
which creates a table of the entire LISTCAT in core for you to
process sequentially.

To run the program:

1      Add to your FCT an entry, TECHF01, describing the
      catalog file.

2      Include the label in your start-up deck, for instance:
      // DLBL TECHF01'TEST VSAM CATALOG',VSAM,CAT=XXXX

3      Assemble the map using BMS.

4      Compile the COBOL program.

5      Add PCT and PPT entries for the program and map.

There are a few blank lines on the screen you can use to
perform your own calculations based on the LISTCAT
information. As an example, the program includes a calculation
for the number of unused CIs at EOF. This calculation
represents a quick way of seeing if you have enough room (or
too much) for your estimated file growth. It will also show if
you have overallocated your primary allocation.


PROGRAM SOURCE CODE

 IDENTIFICATION DIVISION.
 PROGRAM-ID.  TS05.
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 77  BROWSE-OPT                 PIC X  VALUE SPACE.
 77  CAT-IN-COUNT               PIC S9(9) VALUE +0.
 77  CAT-STATUS                 PIC XX VALUE SPACES.
 77  TYPE-FILE                  PIC X  VALUE SPACE.
 77  IX                         PIC S9(4) COMP SYNC VALUE +0.
 77  IX2                        PIC S9(4) COMP SYNC VALUE +0.
 77  IX3                        PIC S9(4) COMP SYNC VALUE +0.
 77  IX-TBL                     PIC S9(4) COMP SYNC VALUE +0.
 77  START-IX                   PIC S9(4) COMP SYNC VALUE +0.
 77  START-POS                  PIC S9(4) COMP SYNC VALUE +0.
 77  MOVE-STOP                  PIC S9(4) COMP SYNC VALUE +0.
 77  BIN-NO-GROUPS              PIC S9(4) COMP SYNC VALUE +0.
 77  NO-ENTRIES                 PIC S9(4) COMP SYNC VALUE +0.
 77  WORK-AMT                   PIC S9(9) COMP SYNC VALUE +0.
 77  WORK-CISIZE                PIC S9(9) COMP SYNC VALUE +0.
 01  VSMKEY.
     05  FILLER                 PIC X.
     05  VSMKEY-CINO            PIC XXX.
     05  VSMKEY-FILLER          PIC X(40).
*  WORK AREAS FOR BINARY TO DECIMAL CONVERSIONS
 01  BIN-X.
     05  BIN-X1                 PIC X.
     05  BIN-X2                 PIC X.
 01  BIN-DECODE     REDEFINES  BIN-X.
     05  BIN-BIN                PIC S9(4) COMP.
 01  BIN-4X                     PIC X(4).
 01  BIN-4DECODE     REDEFINES  BIN-4X.
     05  BIN-4BIN               PIC S9(9) COMP.
 01  BIN-3X-GROUP    REDEFINES  BIN-4X.
     05  BIN-3X-FILL            PIC X.
     05  BIN-3X                 PIC XXX.
 01  BIN-CONSTANTS.
     05  BIN-CON1X.
         10  FILLER             PIC X.
         10  HEX1               PIC X.
     05  FILLER    REDEFINES BIN-CON1X.
         10  BIN-1              PIC S9(4) COMP.
     05  BIN-CON2X.
         10  FILLER             PIC X.
         10  HEX2               PIC X.
     05  FILLER    REDEFINES BIN-CON2X.
         10  BIN-2              PIC S9(4) COMP.
 01  MOVE-AREA1.
     05 MOVE1-CHAR     PIC X  OCCURS 505 TIMES.
 01  MOVE-AREA2.
     05 MOVE2-CHAR     PIC X  OCCURS 505 TIMES.
 01  FILLER  PIC X(16) VALUE '** CAT REC ****'.
*  DEFINITION OF DATA AND INDEX RECORDS IN CATALOG
 01  CAT-RECORD.
     05  C-KEY.
         10  FILLER             PIC X.
         10  C-KEY-CI           PIC XXX.
         10  FILLER             PIC X(40).
     05  C-TYPE                 PIC X.
     05  C-RECLEN               PIC XX.
     05  C-NOFLDS               PIC X.
     05  C-LENFLDS              PIC X.
     05  C-NAME                 PIC X(44).
     05  C-OWNERID              PIC X(8).
     05  C-CREATE-DATE          PIC S9(5) COMP-3.
     05  C-EXPIRE-DATE          PIC S9(5) COMP-3.
     05  C-ATTRIBUTE1           PIC X.
     05  C-ATTRIBUTE2           PIC X.
     05  C-OPEN-INDICATOR       PIC X.
     05  C-BUFSIZE              PIC X(4).
     05  C-PRIM-SPACE           PIC X(3).
     05  C-SECON-SPACE          PIC X(3).
     05  C-SPACE-OPTION         PIC X.
     05  C-HI-USED-RBA          PIC X(4).
     05  C-HI-ALLOC-RBA         PIC X(4).
     05  C-LRECL                PIC X(4).
     05  FILLER                 PIC X(10).
     05  C-EXT-REC-PTR          PIC X(5).
     05  C-NO-GRP-PTRS          PIC X.
     05  FILLER                 PIC X(27).
     05  ADDED-SLACK            PIC X(15).
*  THIS FIELD ADDED SO STAT AREA CAN BE MOVED TO A CONSTANT
*  LOCATION, INSTEAD OF BEING DEPENDENT ON DISPLACEMENT
*  FROM GROUP OCCURRENCE POINTERS
     05  STAT-AREA.
         10 C-CONTROL-INFO      PIC XX.
         10 C-X60               PIC X.
         10 C-ATTR3             PIC X.
         10 C-AMDLENGTH         PIC XX.
         10 C-AMDENTRIES        PIC XX.
         10 C-KEY-POS           PIC XX.
         10 C-KEY-LEN           PIC XX.
         10 C-PCTFREE-CA        PIC X.
         10 C-PCTFREE-CI        PIC X.
         10 C-CI-PER-CA         PIC XX.
         10 C-FREE-CI-PER-CA    PIC XX.
         10 C-FREEBYTE-PER-CI   PIC X(4).
         10 C-CI-SIZE           PIC X(4).
         10 C-MAX-REC-SIZE      PIC X(4).
         10 C-SAM-LRECL         PIC X(4).
         10 C-RBA-FIRST-REC     PIC X(4).
         10 C-POINTER-TO-ARDB   PIC X(4).
         10 C-MORE-ATTR         PIC X.
         10 C-FILLER            PIC X(7).
         10 C-TIMESTAMP         PIC X(8).
         10 C-NO-INDX-LVLS      PIC X(2).
         10 C-NO-EXTENTS        PIC X(2).
         10 C-NO-RECS           PIC X(4).
         10 C-NO-DELETED        PIC X(4).
         10 C-NO-INSERTED       PIC X(4).
         10 C-NO-UPDATED        PIC X(4).
         10 C-NO-RETRIEVED      PIC X(4).
         10 C-FREESPACE-BYTES   PIC X(4).
         10 C-CI-SPLITS         PIC X(4).
         10 C-CA-SPLITS         PIC X(4).
         10 C-NO-EXCPS          PIC X(4).
         10 FILLER              PIC X(100).
* NOTE - STAT AREA STARTS AT LOCATION 177 FOR MOST RECORDS
*  DEFINITION OF CLUSTER RECORD FROM VSAM CATALOG FILE
 01  FILLER       PIC X(16) VALUE '** CLUST REC ***'.
 01  CAT-CLUSTER-RECORD.
     05  C-CL-KEY.
         10  FILLER             PIC X.
         10  C-CL-CINO          PIC X(3).
         10  FILLER             PIC X(40).
     05  C-CL-RECTYPE           PIC X.
     05  C-CL-RECLEN            PIC XX.
     05  FILLER                 PIC X.
     05  C-CL-PTR-TO-EXT        PIC X.
     05  C-CL-NAME              PIC X(44).
     05  C-CL-OWNERID           PIC X(8).
     05  C-CL-CREATE-DATE       PIC S9(5) COMP-3.
     05  C-CL-EXPIRE-DATE       PIC S9(5) COMP-3.
     05  FILLER                 PIC X.
     05  C-CL-EXT-PTR           PIC X(5).
     05  C-CL-NO-GRP-PTRS       PIC X.
     05  C-CL-GROUP-AREA.
         10  FILLER             PIC X(200).
*  DEFINITION OF NAME CROSS REFERENCE RECORD
*  THIS RECORD IS USED TO LOCATE MORE DETAILED BASE RECORD
 01  CAT-NAME-RECORD.
     05  C-NAME-NAME            PIC X(44).
     05  C-NAME-KEY             PIC X(4).
     05  FILLER                 PIC X(457).
*  DEFINITION OF GROUP OCCURRENCE POINTER
 01  FILLER       PIC X(16) VALUE '** GRP AREA ***'.
 01  GROUP-AREA.
     05  GRP-RESERVED           PIC X.
     05  GRP-DISPLACEMENT       PIC XX.
     05  GRP-TYPE-CODE          PIC X.
     05  GRP-SEQ-NO             PIC X.
*  DEFINITION OF ASSOCIATION GROUP OCCURRENCE
*  USED TO ASSOCIATE CLUSTER, DATA, AND INDEX RECORDS
 01  ASSOCIATION-GROUP.
     05  ASSOC-NO-VAR-FLDS      PIC X.
     05  ASSOC-DISP-TO-FIRST    PIC X.
     05  ASSOC-TYPE-CODE        PIC X.
     05  ASSOC-CI-NO            PIC XXX.
*  THE 23 LINES OF THE SCREEN ARE DEFINED HERE
*   AS 80 CHARACTER DIPLAY LINES
*  MOVING OR CHANGING CONSTANTS AND DATA CAN BE DONE HERE WITHOUT
*  AFFECTING ANY PROCEDURE DIVISION  STATEMENTS
 01  SCREEN-TABLE-AREA.
     03  LINE1.
         10  FILLER             PIC X  VALUE SPACES.
         10  P-NAME             PIC X(44).
         10  FILLER             PIC X(35)  VALUE SPACES.
     03  LINE2.
         10  FILLER            PIC X(16) VALUE '   DATA NAME -'.
         10  P-DATANAME      PIC X(44).
         10  FILLER          PIC X(20) VALUE SPACES.
     03  LINE3.
         10  FILLER          PIC X(16) VALUE '   INDEX NAME -'.
         10  P-INDEXNAME     PIC X(44).
         10  FILLER          PIC X(20) VALUE SPACES.
     03  LINE4.
         10  FILLER          PIC X(80) VALUE SPACES.
     03  LINE5.
         10  FILLER          PIC X(15) VALUE ' RECSIZE'.
         10  P-RECSIZE       PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'C I SPLITS'.
         10  P-CI-SPLITS     PIC Z(4)9.
         10  FILLER          PIC X(20) VALUE SPACES.
    03  LINE6.
         10  FILLER          PIC X(15) VALUE ' KEY START'.
         10  P-KEY-POS-X.
             15  P-KEY-POS       PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'C A SPLITS'.
         10  P-CA-SPLITS     PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
     03  LINE7.
         10  FILLER          PIC X(15) VALUE ' KEY LENGTH'.
         10 P-KEY-LENGTH     PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(9) VALUE 'EXCPS'.
         10  P-EXCPS         PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
     03  LINE8.
         10  FILLER          PIC X(15) VALUE ' CISIZE'.
         10  P-CISIZE        PIC ZZZZ9.
         10  FILLER          PIC X(60) VALUE SPACES.
     03  LINE9.
         10  FILLER          PIC X(15) VALUE ' FREESPACE-CI'.
         10 P-FREE-CI        PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'CREATION DATE'.
         10  P-CRE-DATE      PIC 99B999.
         10  FILLER          PIC X(19) VALUE SPACES.
     03  LINE10.
         10  FILLER          PIC X(15) VALUE ' FREESPACE-CA'.
         10  P-FREE-CA       PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'NO. RECS'.
         10  P-NO-RECS       PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE11.
         10  FILLER          PIC X(15) VALUE ' ALLOC'.
         10  P-ALLOC         PIC ZZZZ9.
         10  FILLER          PIC XXX   VALUE SPACES.
         10  P-ALLOC2        PIC ZZZZ9.
         10  FILLER          PIC X(12) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'NO. DELETED'.
         10  P-DELETED       PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE12.
         10  FILLER          PIC X(15) VALUE ' NO. EXTENTS'.
         10  P-NO-EXTENTS    PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'NO. INSERTED'.
         10  P-INSERTED      PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE13.
         10  FILLER          PIC X(15) VALUE '              '.
         10  FILLER          PIC ZZZZ9.
         10  FILLER          PIC X(20) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'NO. UPDATED'.
         10  P-UPDATED       PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE14.
         10  FILLER          PIC X(20) VALUE ' UNUSED CI AT EOF'.
         10  P-UNUSED        PIC ZZZZ9.
         10  FILLER          PIC X(15) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'NO. RETRIEVED'.
         10  P-RETRIEVED     PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE15.
         10  FILLER          PIC X(80) VALUE SPACES.
     03  LINE16.
         10  FILLER          PIC X(40) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'NO. INDEX RECS'.
         10  P-IX-RECS       PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE17.
         10  FILLER          PIC X(40) VALUE SPACES.
         10  FILLER          PIC X(15) VALUE 'INDEX EXCPS'.
         10  P-IX-EXCPS      PIC ZZZ,ZZZ,ZZ9.
         10  FILLER          PIC X(14)  VALUE SPACES.
     03  LINE18.
         10  P-ERROR         PIC X(80).
 01  SCREEN-TABLE-2       REDEFINES SCREEN-TABLE-AREA.
     03  SCREEN-LINE      PIC X(80)  OCCURS 18 TIMES.
 01  BLANK-LINE        PIC X(80) VALUE SPACES.
 01  HOLD-AREA1.
     05  HOLD-KEY-C       PIC X(3).
     05  HOLD-KEY-D       PIC X(3).
     05  HOLD-KEY-I       PIC X(3).
     05  HOLD-RECORD-C    PIC X(400).
     05  HOLD-RECORD-D    PIC X(400).
     05  HOLD-RECORD-I    PIC X(400).
*  WORK AREA TO HOLD NAME CROSS REFERENCE INDEX FOR BROWSE OPTION
*  CAN BE INCREASED IF YOU HAVE A LARGER CATALOG
 01  NAME-TBL.
     05  NAME-TBL-REC        OCCURS 250 TIMES.
         10  TBL-NAME-NAME    PIC X(44).
         10  TBL-NAME-KEY     PIC X(4).
 01  DFHAID                  COPY DFHAID.
 01  DFHBMSCA                COPY DFHBMSCA.
*  DEFINITION OF MAP (22 OUTPUT LINES OF 80 CHAR AND 1 INPUT LINE)
 01  TECH5I      COPY TECH5DS.
  PROCEDURE DIVISION.
     MOVE LOW-VALUES TO TECH5I.
     MOVE SPACES TO VSMKEY.
      MOVE 1 TO BIN-1.
      MOVE 2 TO BIN-2.
     MOVE 'ENTER VALUE OR * TO BROWSE CATALOG' TO OLINEI (23)
     EXEC CICS HANDLE CONDITION MAPFAIL (EOJ) ENDFILE (EOJ)
           NOTFND (NOTFND-MESSAGE) END-EXEC.
     EXEC CICS HANDLE AID CLEAR (RETURN-INST)  END-EXEC.
 MAP-SEND.
     EXEC CICS SEND MAP ('TECH5') MAPSET ('TECH5DS')
         ERASE END-EXEC.
     EXEC CICS RECEIVE MAP ('TECH5') MAPSET ('TECH5DS')
         END-EXEC.
 PROCESS-SCREEN-IN.
     IF ILINEI = '*   '
          GO TO BROWSE-PROCESSING.
*  ROUTINE TO PROCESS ONE CATALOG ENTRY, AFTER CLUSTER NAME IS
*   ENTERED AT CONSOLE
     MOVE ILINEI TO VSMKEY.
     EXEC CICS READ DATASET ('TECHF01') INTO (CAT-NAME-RECORD)
           RIDFLD (VSMKEY) END-EXEC.
     MOVE LOW-VALUES TO VSMKEY.
     MOVE C-NAME-KEY TO VSMKEY-CINO.
     EXEC CICS READ DATASET ('TECHF01') INTO (CAT-RECORD)
         RIDFLD (VSMKEY) GENERIC KEYLENGTH (4) GTEQ  END-EXEC.
     IF C-TYPE NOT = 'C'
           MOVE 'PLEASE SPECIFY CLUSTER NAME' TO OLINEO (23)
           PERFORM MAP-SEND
           GO TO PROCESS-SCREEN-IN.
     PERFORM GET-INFO THRU END-GET-INFO.
*  AFTER CLUSTER, DATA AND INDEX RECORDS ARE READ, GO TO EOJ
*  TO PROCESS AS IF THERE WAS ONLY ONE ENTRY IN THE CATALOG
     MOVE C-NAME-KEY TO TBL-NAME-KEY (1).
     MOVE 1 TO NO-ENTRIES.
     GO TO EOJ.
*  FOR BROWSE OPTION
*  PROCESS EVERY CATALOG RECORD (UNTIL EOF OR TABLE LIMIT IS
*  REACHED
 BROWSE-PROCESSING.
     EXEC CICS STARTBR  DATASET ('TECHF01') RIDFLD (VSMKEY)
          GENERIC KEYLENGTH (10) GTEQ   END-EXEC.
     MOVE 'B' TO BROWSE-OPT.
 PROCESS-RECORD.
     MOVE 'ENTER CLEAR TO END BROWSE' TO OLINEI (23)
      MOVE SPACE TO P-ERROR.
      PERFORM READ-CAT.
      ADD 1 TO NO-ENTRIES.
      MOVE CAT-NAME-RECORD TO NAME-TBL-REC (NO-ENTRIES).
*  TEST TO GET OUT IF TABLE OVERFLOWS
*  CHANGE THIS INSTRUCTION AND WORKING STORAGE IF YOU
*  HAVE MORE THAN 250 ENTRIES IN YOUR VSAM CATALOG
      IF NO-ENTRIES > 250  GO TO EOJ.
      GO TO PROCESS-RECORD.
 READ-CAT.
     EXEC CICS READNEXT INTO (CAT-NAME-RECORD)
         DATASET ('TECHF01') RIDFLD (VSMKEY) END-EXEC.
     ADD 1 TO CAT-IN-COUNT.
 GET-INFO.
* READ THE CORRESPONDING CLUSTER, DATA AND INDEX RECORDS
     MOVE C-KEY-CI TO HOLD-KEY-C.
     PERFORM CLUSTER-ROUTINE THRU END-CLUSTER-ROUTINE.
     MOVE LOW-VALUES TO VSMKEY.
     MOVE HOLD-KEY-D TO VSMKEY-CINO
     EXEC CICS READ DATASET ('TECHF01') INTO (CAT-RECORD)
         RIDFLD (VSMKEY) GENERIC KEYLENGTH (4) GTEQ  END-EXEC.
     PERFORM DATA-ROUTINE THRU END-DATA-ROUTINE.
     MOVE LOW-VALUES TO VSMKEY.
     MOVE HOLD-KEY-I TO VSMKEY-CINO
     EXEC CICS READ DATASET ('TECHF01') INTO (CAT-RECORD)
         RIDFLD (VSMKEY) GENERIC KEYLENGTH (4) GTEQ  END-EXEC.
     PERFORM INDEX-ROUTINE THRU END-INDEX-ROUTINE.
 END-GET-INFO.
     EXIT.
* MOVE TO DISPLAY FIELDS FROM CLUSTER RECORD AND DATA RECORD
*   BINARY FIELDS ARE CONVERTED TO DISPLAY
 PRINT-PART1.
     MOVE C-CL-NAME TO P-NAME.
     MOVE C-CREATE-DATE TO P-CRE-DATE.
     EXAMINE P-CRE-DATE REPLACING ALL ' ' BY '-'.
     MOVE C-NAME TO P-DATANAME.
     MOVE LOW-VALUES TO BIN-X.
     MOVE C-ATTR3 TO BIN-X2.
     MOVE 'X' TO TYPE-FILE.
     IF BIN-BIN < 128
          MOVE '* NOT A KSDS FILE *' TO P-INDEXNAME
          MOVE SPACES TO P-KEY-POS-X
          MOVE 0 TO P-IX-RECS, P-IX-EXCPS
          MOVE SPACE TO TYPE-FILE.
     MOVE C-NO-RECS TO BIN-4X.
     MOVE BIN-4BIN TO P-NO-RECS.
     MOVE C-MAX-REC-SIZE TO BIN-4X.
     MOVE BIN-4BIN TO P-RECSIZE.
     MOVE C-CA-SPLITS TO BIN-4X.
     MOVE BIN-4BIN TO P-CA-SPLITS.
     MOVE C-CI-SPLITS TO BIN-4X.
     MOVE BIN-4BIN TO P-CI-SPLITS.
     MOVE LOW-VALUES TO BIN-X.
     MOVE C-PCTFREE-CI TO BIN-X2.
     MOVE BIN-BIN TO P-FREE-CI.
     MOVE LOW-VALUES TO BIN-X.
     MOVE C-PCTFREE-CA TO BIN-X2.
     MOVE BIN-BIN TO P-FREE-CA.
     MOVE C-NO-EXCPS TO BIN-4X.
     MOVE BIN-4BIN TO P-EXCPS.
     MOVE C-NO-DELETED TO BIN-4X.
     MOVE BIN-4BIN TO P-DELETED.
     MOVE C-NO-INSERTED TO BIN-4X.
     MOVE BIN-4BIN TO P-INSERTED.
     MOVE C-NO-UPDATED TO BIN-4X.
     MOVE BIN-4BIN TO P-UPDATED.
     MOVE C-NO-RETRIEVED TO BIN-4X.
     MOVE BIN-4BIN TO P-RETRIEVED.
     MOVE C-KEY-POS TO BIN-X.
     MOVE BIN-BIN TO P-KEY-POS.
     MOVE C-KEY-LEN TO BIN-X.
     MOVE BIN-BIN TO P-KEY-LENGTH.
     MOVE C-NO-EXTENTS TO BIN-X.
     MOVE BIN-BIN TO P-NO-EXTENTS.
     MOVE LOW-VALUES TO BIN-3X-GROUP.
     MOVE C-PRIM-SPACE TO BIN-3X.
     MOVE BIN-4BIN TO P-ALLOC.
     MOVE C-SECON-SPACE TO BIN-3X.
     MOVE BIN-4BIN TO P-ALLOC2.
     MOVE C-HI-USED-RBA TO BIN-4X.
     MOVE BIN-4BIN TO WORK-AMT.
     MOVE C-CI-SIZE TO BIN-4X.
     MOVE BIN-4BIN TO WORK-CISIZE P-CISIZE.
     MOVE C-HI-ALLOC-RBA TO BIN-4X.
*  YOU CAN ADD ANY CALCULATIONS OR ADDITIONAL DISPLAY
*  FIELDS HERE IN THE CODE
     MOVE 0 TO P-UNUSED.
     IF WORK-CISIZE NOT = 0
     COMPUTE P-UNUSED ROUNDED =
                     (WORK-AMT - BIN-4BIN) / WORK-CISIZE.
*  CALC = (HI-ALLOC-RBA - HI-USED-RBA) / CISIZE
 END-PRINT-PART1.
     EXIT.
*  DISPLAY FIELDS FROM INDEX RECORD
*    (BOTH DATA AND INDEX RECORDS WERE SAVED IN WORKING
*     STORAGE)
 PRINT-PART2.
     IF TYPE-FILE = 'X'
          MOVE C-NAME TO P-INDEXNAME
          MOVE C-NO-RECS TO BIN-4X
          MOVE BIN-4BIN TO P-IX-RECS
          MOVE C-NO-EXCPS TO BIN-4X
          MOVE BIN-4BIN TO P-IX-EXCPS.
* SEND EACH LINE TO SCREEN AS 80 CHARACTER FIELD
     MOVE 0 TO IX.
 PRINT-LOOP.
     ADD 1 TO IX.
     MOVE SCREEN-LINE (IX) TO OLINEO (IX).
     IF IX LESS THAN 18 GO TO PRINT-LOOP.
     PERFORM MAP-SEND.
 END-PRINT-PART2.
     EXIT.
  CLUSTER-ROUTINE.
     MOVE CAT-RECORD TO HOLD-RECORD-C.
     MOVE CAT-RECORD TO CAT-CLUSTER-RECORD.
     MOVE 0 TO BIN-BIN.
     MOVE C-CL-NO-GRP-PTRS TO BIN-X2.
     MOVE BIN-BIN TO BIN-NO-GROUPS.
     COMPUTE START-POS = 115 + BIN-BIN * 5.
*  START POS IS BEGINNING OF DATA AREA FOR GROUP OCCURRENCES
     MOVE 115 TO IX START-IX.
     PERFORM PROCESS-GOPS THRU END-PROC-GOPS.
  END-CLUSTER-ROUTINE.
     EXIT.
  DATA-ROUTINE.
     MOVE CAT-RECORD TO HOLD-RECORD-D.
     MOVE ZERO TO BIN-BIN.
     MOVE C-NO-GRP-PTRS TO BIN-X2.
     MOVE BIN-BIN TO BIN-NO-GROUPS.
     COMPUTE START-POS = 150 + BIN-BIN * 5.
*  START POS IS BEGINNING OF DATA AREA FOR GROUP OCCURRENCES
     MOVE 150 TO IX START-IX.
     PERFORM PROCESS-GOPS THRU END-PROC-GOPS.
     MOVE CAT-RECORD TO HOLD-RECORD-D.
  END-DATA-ROUTINE.
     EXIT.
  INDEX-ROUTINE.
     MOVE CAT-RECORD TO HOLD-RECORD-I.
     MOVE ZERO TO BIN-BIN.
     MOVE C-NO-GRP-PTRS TO BIN-X2.
     MOVE BIN-BIN TO BIN-NO-GROUPS.
     COMPUTE START-POS = 150 + BIN-BIN * 5.
*  START POS IS BEGINNING OF DATA AREA FOR GROUP OCCURRENCES
     MOVE 150 TO IX START-IX.
     PERFORM PROCESS-GOPS THRU END-PROC-GOPS.
     MOVE CAT-RECORD TO HOLD-RECORD-I.
  END-INDEX-ROUTINE.
     EXIT.
*  ROUTINE TO PROCESS GROUP OCCURRENCE POINTERS
*  AND GET LOCATIONS OF START OF STATISTICS AREA AND
*  ASSOCIATIONS BETWEEN CLUSTER, DATA AND INDEX RECORDS
  PROCESS-GOPS.
     MOVE 0 TO IX3.
  NEXT-GROUP.
     ADD 1 TO IX3.
     MOVE 6 TO MOVE-STOP
     MOVE CAT-RECORD TO MOVE-AREA1.
     COMPUTE IX = START-IX + 5 * (IX3 - 1).
     PERFORM MOVE-CHARS-RTN THRU END-MOVE-CHARS.
     MOVE MOVE-AREA2 TO GROUP-AREA.
     MOVE GRP-DISPLACEMENT TO BIN-X.
     COMPUTE IX = START-POS + BIN-BIN.
     IF GRP-TYPE-CODE = HEX2
          PERFORM ASSOC-GROUP-RTN THRU END-ASSOC.
     IF GRP-TYPE-CODE = HEX1
          PERFORM STAT-GROUP-RTN THRU END-STAT.
     IF IX3 > 7
         GO TO END-PROC-GOPS.
     IF IX3 < BIN-NO-GROUPS  GO TO NEXT-GROUP.
 END-PROC-GOPS.
     EXIT.
 ASSOC-GROUP-RTN.
*  IX CONTAINS THE START OF THIS ASSOCIATION AREA.
     MOVE 7 TO MOVE-STOP
     PERFORM MOVE-CHARS-RTN THRU END-MOVE-CHARS.
     MOVE MOVE-AREA2 TO ASSOCIATION-GROUP.
     IF ASSOC-TYPE-CODE = 'D'
          MOVE ASSOC-CI-NO TO HOLD-KEY-D.
     IF ASSOC-TYPE-CODE = 'I'
          MOVE ASSOC-CI-NO TO HOLD-KEY-I.
     IF ASSOC-TYPE-CODE = 'C'
          MOVE ASSOC-CI-NO TO HOLD-KEY-C.
 END-ASSOC.
     EXIT.
 STAT-GROUP-RTN.
*  IX CONTAINS THE START OF THE STATISTICS AREA.
     MOVE 200 TO MOVE-STOP.
     PERFORM MOVE-CHARS-RTN THRU END-MOVE-CHARS.
     MOVE '***STAT AREA***' TO ADDED-SLACK.
     MOVE MOVE-AREA2 TO STAT-AREA.
 END-STAT.
     EXIT.
 MOVE-CHARS-RTN.
     IF MOVE-STOP > 200  MOVE 200 TO MOVE-STOP.
     MOVE 1 TO IX2.
     MOVE SPACES TO MOVE-AREA2.
 MOVE-CHAR-LOOP.
     MOVE MOVE1-CHAR (IX) TO MOVE2-CHAR (IX2).
     ADD 1 TO IX IX2.
     IF IX2 < MOVE-STOP   GO TO MOVE-CHAR-LOOP.
 END-MOVE-CHARS.
     EXIT.
 NOTFND-MESSAGE.
     MOVE 'CLUSTER NAME NOT FOUND - TRY AGAIN' TO OLINEO(23)
     PERFORM MAP-SEND
     GO TO PROCESS-SCREEN-IN.
 EOJ.
     EXEC CICS HANDLE CONDITION MAPFAIL (PROCESS-TABLE) END-EXEC.
     MOVE 0 TO IX-TBL.
     IF BROWSE-OPT = 'B'
         EXEC CICS ENDBR DATASET('TECHF01') END-EXEC.
*  IF * WAS ENTERED, THE TABLE CONTAINS ONE ENTRY FOR EACH
*  CLUSTER
*  IF A CLUSTER NAME WAS ENTERED, THAT CLUSTER NAME IS THE
*  ONLY ENTRY IN THE TABLE
 PROCESS-TABLE.
      ADD 1 TO IX-TBL.
      IF IX-TBL > NO-ENTRIES  GO TO RETURN-INST.
      MOVE LOW-VALUES TO VSMKEY.
      MOVE TBL-NAME-KEY (IX-TBL) TO VSMKEY-CINO.
      EXEC CICS READ DATASET ('TECHF01') INTO (CAT-RECORD)
          RIDFLD(VSMKEY) GENERIC KEYLENGTH (4) GTEQ END-EXEC.
      IF C-TYPE NOT = 'C'
          GO TO PROCESS-TABLE.
      PERFORM GET-INFO.
      MOVE HOLD-RECORD-D TO CAT-RECORD.
      MOVE HOLD-RECORD-C TO CAT-CLUSTER-RECORD.
      PERFORM PRINT-PART1 THRU END-PRINT-PART1.
      MOVE HOLD-RECORD-I TO CAT-RECORD.
      PERFORM PRINT-PART2 THRU END-PRINT-PART2.
      GO TO PROCESS-TABLE.
      MOVE SPACES TO CAT-RECORD.
 RETURN-INST.
     MOVE 'PROCESSING COMPLETED' TO BLANK-LINE
     EXEC CICS SEND FROM (BLANK-LINE) LENGTH (80) ERASE
         END-EXEC.
     EXEC CICS RETURN END-EXEC.


MAP SOURCE CODE

TECH5DS  DFHMSD TYPE=&SYSPARM,LANG=COBOL,MODE=INOUT,STORAGE=AUTO,      X
               TERM=3270,CTRL=FREEKB
TECH5    DFHMDI SIZE=(24,80)
OLINE    DFHMDF POS=(1,1),LENGTH=79,ATTRB=ASKIP,OCCURS=23
ILINE    DFHMDF POS=(24,1),LENGTH=79,ATTRB=(UNPROT,IC)
         DFHMSD TYPE=FINAL


Joe Krynicky
Technical Support Manager
ASCAP (USA)

