 VSAM performance tuning basics
INTRODUCTION
My favourite IBM PSR once advised me that there is no magic, only magicians.  It
is easy to let the magic of VSAM with all its options and parameters blind us to
the basics of DASD tuning which, behind all the smoke and mirrors of VSAM, are
also the basics of VSAM tuning.  Before you can tune VSAM effectively you must
understand these basics.  This article, while dealing primarily with tuning VSAM
indexed files in a CICS environment, is also applicable to batch processing.
OVERVIEW OF DASD CHARACTERISTICS
LetUs consider disk drives in general.  When you issue a read or write, three
things occur which take time.  First, the access arm must move to the
appropriate track (yes, I know, only sometimes).  This is seek time.  Second,
you must wait while the disk spins around to the place on the track where a
record is to be read or written.  This is rotational delay.  Third, data must be
transferred to or from the disk.  This data transfer time is dependent on track
density, ie the number of characters which can be stored on a single track.
Disks spin at 3600 Revolutions Per Minute (RPM), 60 revolutions per second, or
0.017 second per revolution.  3330 drives have a track capacity of 13 030 bytes.
60 revolutions per second times 13 030 bytes per track gives us a data transfer
rate of 781 800 bytes per second or, rounded, 0.8 megabytes per second.  3350
drives with a track capacity of 19 090 have a transfer rate of 1 145 400
characters per second or 1.15 megabytes per second.  Similarly, 3380 drives with
a track capacity of 47 476 have a transfer rate of 2.85 megabytes per second.
Excluding seek time, random reads will experience an average rotational delay of
about 9 milliseconds (half a revolution) regardless of device type.
A 4096 byte Control Interval (CI) on a 3330 drive requires about a third of a
track and takes 6 milliseconds to read.  A random read of that CI, therefore,
requires an average 9 milliseconds rotational delay plus 6 milliseconds for data
transfer for a total of 15 milliseconds.  To read the next consecutive CI we
must wait a full revolution of the disk.  The minimum time to read that CI is 17
milliseconds for rotational delay and 6 milliseconds for data transfer giving 23
milliseconds.  Further, when browsing a file in the multi-tasking environment of
CICS, a read request for the next CI is not likely to be issued during a single
revolution of the disk.  If we assume an average of two 17 millisecond
revolutions plus 6 milliseconds data transfer time per sequential read we can
expect each read to occur 40 milliseconds after the last.  With 3380 drives,
data transfer would take 2 milliseconds rather than 6 milliseconds but the
rotational delay would be the same.
VSAM KSDS INDEXES
The index of a simple VSAM KSDS file comprises a single master index record,
sequence set records, and, if the file is large enough, one or more levels of
intermediate index records.  The lowest index level is the sequence set.  There
is one sequence set record for every Control Area (CA).  This record contains
the largest key and a pointer for every CI in its CA.  The sequence set is used
to determine which CI is to be read next when accessing a KSDS file sequentially
and to determine which CI to read when reading a random record.  The master
index record contains the largest key and a pointer to the sequence set record
for each CA.  If, however, there are so many CAs that the keys and pointers
cannot all fit in the single master index record, additional index records are
built until there is a pointer to the sequence set record of every CA.  This set
of index records then becomes the second level index and a new master index
record is created which contains the largest key and a pointer for each second
level index record.  There can be only one master index record.  The master
index record now points to second level index records which point to sequence
set records which point to the CIs which contain the data records.  This chain
of pointers is followed for every random access.  If the file is large enough,
VSAM will create additional index levels.
The IMBED operand of the define cluster causes the first CI in each CA to be
reserved for use as a sequence set index record.  This is useful because once
the sequence set record for a CA has been read the access arm is already
positioned to read a data CI without causing an additional seek.  The REPLICATE
operand causes the sequence set record to be repeated as many times as possible
around the first track in every CA.  This reduces rotational delay when reading
the sequence set record at the expense of one track per CA.
Typically, the index of a VSAM KSDS file resides on the same drive as the data
component.  When you read a random record from a KSDS file (worst case), you
 seek to the index track, read one or more index CIs (perhaps with an additional
seek), seek to another track, read the sequence set index record, and then read
the data CI.  Two or more seeks and multiple reads occur just to read one
record.  Someone will probably suggest that you move your index to a different
drive.  Since it is likely that this second drive will also have other file
activity on it all you are likely to accomplish is to move the seek and read
from one drive to another.
VSAM KSDS DATA
The best thing to do with seek time is eliminate it.  The more active a disk
drive is the more likely any particular I/O will cause a seek and the more seeks
that occur the greater the impact on performance.  Each time we avoid a disk I/O
we avoid a possible seek and we certainly avoid rotational delay.  We can
eliminate disk I/Os by eliminating reads of the index.  We can further reduce
disk I/Os by reading fewer data records.  The remainder of this article
discusses how to accomplish this.  There are software packages which attempt to
reduce seek time by monitoring all read/write requests to ensure they are
handled in order by cylinder rather than first come first served.  However, this
article is concerned with what you can do without spending money.
Consider a KSDS file on a 3330 disk drive where the data CI size is 2048 and
there are 2000 data CIs.  If no seeks occur (ignore accessing the index) and we
process so fast we read every data CI after only one disk rotation, we could
sequentially read the CIs at 20 millisecond intervals (17 milliseconds for
rotation plus 3 milliseconds read time).  The entire file could be read in 40
seconds.  However, in the real world we come closer to reading once every other
rotation, every 37 milliseconds,  for a total of 74 seconds.  By simply changing
the CI size to 4096 we reduce the number of data reads by half.  Still reading
once every other revolution, we now read 1000 CIs at 40 millisecond intervals
instead of 2000 CIs at 37 millisecond intervals.  We have reduced the time to
read the file from 74 to 40 seconds.  The same relative performance gains are
experienced in CICS when browsing a file.
There are other benefits to be gained from increasing the data CI size.  Each
sequence set index record must be large enough to contain keys and pointers to
every CI in its CA.  By increasing the data CI size we reduce the number of CIs
in each CA and therefore reduce the size needed for the index records.  Smaller
index CIs mean we can have more index records in the same amount of memory.
When a program requests that VSAM reads a record, any index records already in
memory are not read again.  More index records in memory results in fewer disk
I/Os and, therefore, fewer seeks and less rotational delay.  Increasing the data
CI size may also improve disk storage utilisation.  A 4096-byte CI might hold
five data records while two 2048-byte CIs would hold only two records each.  Be
aware that if the size of the index CI is so small that VSAM cannot fit keys and
pointers into sequence set index records for every CI in its CA, the
unreferenced CIs in the CA will not be used.
FCT OPERANDS
In the CICS FCT there are three operands which greatly affect VSAM performance.
These are STRNO, BUFND, and BUFNI.  STRNO (string number) is the number of
requests which can be processed against a file concurrently.  For infrequently-
used files a value of one is usually adequate.  Two is adequate for most other
files.  Very high-use files may require a larger value.  When there are more
requests for file access than the STRNO value a Twait-on-stringU condition
exists.  Transactions waiting for file access are enqueued until a string
becomes available.  Waits-on-string can be reduced or eliminated by increasing
the STRNO value by one.
Contrary to popular opinion, wait-on-string conditions are not necessarily bad.
For example, consider what happens if STRNO is greater than one and two
transactions need to sequentially read ten records each from the same file.
Transaction A issues a read, then transaction B, then A, then B, etc, until both
transactions have read their ten records.  Seeks are required with each disk I/O
to access the different areas of the file.  Both transactions take about the
same time because their file reads were processed alternately.  Now consider
what would happen if STRNO caused transaction B to be enqueued due to a wait-on-
string.  Transaction A would complete much quicker.  Transaction B, getting a
later start due to waiting on transaction A to finish with the file, performs
its file accesses without interference and therefore completes at about the same
time as it would have in the first instance.  You can see that the wait-on-
string condition actually improves performance of the first transaction without
seriously affecting the performance of the second.  In fact, we actually improve
overall system performance by eliminating seeks between the two file areas.  The
point is that you should check the CICS shutdown statistics occasionally.  DonUt
be concerned if the report shows that a few Twait-on-stringU conditions have
occurred for a file.  If the report shows too many then raise the STRNO value by
one.
The BUFND operand specifies the number of data buffers CICS will create.  This
value should always be at least the value of STRNO since each string needs a
buffer for its data CI.  If records can be added to the file, BUFND should be at
least one greater than the STRNO value.  The extra buffer might be needed in the
event of a CI or CA split.  A larger value means extra buffers will be
available.  It is possible that a read request might find the data CI already in
one of the buffers in memory, but not likely.
The BUFNI operand specifies the number of index buffers CICS will create.  This
value should be a minimum of one plus the BUFND value.  The value should be
large enough so that there is at least one buffer for each string plus one for
the master index record.  CICS allocates buffer space on page boundaries.  If
your page size is 2K, your index CI size is 512, and you specify BUFNI=3, you
waste 512 bytes of the allocated buffer space.  You can increase BUFNI to 4
without CICS allocating an additional page of memory.
You will achieve greater performance improvement by allocating additional index
buffers than by allocating additional data buffers.  When you load all of a
fileUs index into memory you eliminate all physical reads of the index when
accessing that file.  This can provide a dramatic performance improvement.  If
it is not possible to load all indexes for all VSAM files into memory, the
following guideline is suggested.  First, set STRNO, BUFND, and BUFNI to at
least the minimum values described above.  For smaller VSAM files with high
activity, specify BUFNI so that all of the index is loaded into memory.  For
larger high activity files, specify BUFNI large enough for all of the index
above the sequence set and as much of the sequence set as you can afford.  If
any transactions do multiple accesses to low activity files, tune those files as
though they were high activity if you want to improve the response time of those
specific transactions.  If you load all of the index into memory, specify
NOIMBED when you define the file otherwise specify NOIMBED for small files and
IMBED for large files.  When you specify IMBED, specify REPLICATE for high
activity files if you cannot provide buffer space for at least 20% of the
sequence set otherwise specify NOREPLICATE.

James Holler
President
Little Blue Systems (USA)     ) Xephon 1988

























