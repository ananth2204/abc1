Shared storage subpool analysis

With the conversion to Resource Definition On-line (RDO)
table entries and the use of auto-install for TCT entries we
needed a way to monitor the use of the shared storage subpool.
Performance monitors such as CICSPARS,
OMEGAMON/CICS, THE MONITOR FOR CICS, etc,
provide information on the amount of storage consumed by the
shared subpool, but this generally is of limited value when
trying to explain why the shared subpool grew after the last
change was installed.

We decided it would be helpful if we knew the number and
sizes of storage blocks within the shared storage subpool, so
we wrote our own program to collect and display this
information.  Using the data collected by the program and
information in CICS/OS/VS 1.7 Performance Data (SC33-
0212) or CICS/MVS Version 2.1 Performance Guide (SC33-
0521) we are able to monitor and determine the reasons for the
growth of the shared subpool.

The program is an Assembler command-level program which
uses data from the Page Allocation Map (PAM) to scan the
pages of shared storage and collect data on the type, size, and
number of storage blocks within the shared storage subpool.
After the data is collected it is printed via an extra-partition
transient data queue.  The program uses interval control
facilities to restart itself every hour.  This will allow analysis of
a growing subpool.  The program can run as a PLTPI program
and has been tested under CICS/OS 1.7 and CICS/MVS 2.1.1.
Those wishing to use the program may want to alter the name
of the transient data queue in the two WRITEQ commands.
They may also wish to remove the START command at the end
of the program or alter the interval.


CONTROL BLOCK SIZES

In our environment we have found that table entries require the
following sizes of storage for control blocks:

Shared storage type 93

PPT

PPT entry P 64 bytes

Table management P 64 bytes.

PCT

PCT entry P 128 bytes

Table management P 64 bytes.

TCT LUTYPE2

TCTTE P 448 bytes

TCTTE extension P 64 bytes

NIB P 96 bytes

Security P 64 bytes

Bind image P 32 bytes

Table management P 64 bytes

TCTUA P 288 bytes.

System entry

TCTTE P 192 bytes.

MRO session

TCTTE P 384 bytes

NIB P 96 bytes

Security P 64 bytes

Table management P 64 bytes.

ISC session

TCTTE P 448 bytes

TCTTE extension P 64 bytes

LUC extension P 160 bytes

NIB P 96 bytes

Security P 64 bytes

Bind P 64 bytes

Table management P 64 bytes.

FCT

Table management P 32 bytes.

TSTABLE storage type 98

Temporary Storage Unit Table P 2048 bytes

Temporary Storage TSGID Table P 32 bytes.

An additional feature that was included is the analysis of the
shared subpool Free Area Queue Elements (FAQEs).  This
information is helpful in determining the rounding value to use
if you have PL45175 (CICS 1.7) or PL53966 (CICS 2.1.1)
installed.  If you have a large number of FAQEs that are
smaller than the smallest allocated block of storage, consider
raising the rounding value to reduce the CPU time used by
storage control to GETMAIN shared storage.  We have
experienced a 5 to 8 percent improvement by tuning this
subpool's GETMAINs.

Figure 1 illustrates a sample report from one of our test CICS
regions.


PROGRAM SOURCE CODE

         TITLE 'SHARED STORAGE SUBPOOL ANALYZER'
DFHEISTG DSECT
CNCLRESP DS    F        RESPONSE FROM CANCEL COMMAND
STORADDR DS    F        WORKING STORAGE FOR GETMAIN ADDRESS
TYPE00AD DS    F        ADDRESS OF FAQE ANALYSIS STORAGE
TYPE80AD DS    F        ADDRESS OF TYPE 80 ANALYSIS STORAGE
TYPE93AD DS    F        ADDRESS OF TYPE 93 ANALYSIS STORAGE
TYPE96AD DS    F        ADDRESS OF TYPE 96 ANALYSIS STORAGE
TYPE97AD DS    F        ADDRESS OF TYPE 97 ANALYSIS STORAGE
TYPE98AD DS    F        ADDRESS OF TYPE 98 ANALYSIS STORAGE
TYPE99AD DS    F        ADDRESS OF TYPE 99 ANALYSIS STORAGE
TYPE9FAD DS    F        ADDRESS OF TYPE 9F ANALYSIS STORAGE
SAVER14A DS    F        BAL R14 SAVE REGISTER
SAVER14B DS    F        BAL R14 SAVE REGISTER
SAVER14C DS    F        BAL R14 SAVE REGISTER
SAVER14D DS    F        BAL R14 SAVE REGISTER
SAVER14E DS    F        BAL R14 SAVE REGISTER
SKPDPAGE DS    PL3      NUMBER OF PAGES WHERE ANALYSIS WAS SKIPPED
NUMBYTES DS    PL6      NUMBER OF BYTES USED FOR THIS SIZE
OCCURPKD DS    PL4      NUMBER OF OCCURRENCES
LENPACKL DS    0PL8     SIZE OF CONTROL BLOCK
         DS    XL5
LENPACKS DS    PL3 SIZE OF CONTROL BLOCK
SAVETYPE DS    CL2      STORAGE CLASS
MSGOUT01 DS    0CL80    OUTPUT MESSAGE RECORD FORMAT
         DS    CL20
MSGTYPE  DS    CL2      STORAGE CLASS
         DS    CL8
MSGLENG  DS    CL5      SIZE OF CONTROL BLOCKS
         DS    CL8
MSGOCCR  DS    CL7      NUMBER OF CONTROL BLOCKS
         DS    CL13
MSGBYTE  DS    CL11     NUMBER OF BYTES OCCUPIED BY
         DS    CL6
MSGOUT02 DS    0CL80    EXCEPTION REPORT FOR INVALID SAA
MSGNUMPG DS    CL5      NUMBER OF PAGES WHERE ANALYSIS WAS SKIPPED
         DS    CL75
TCAKCTTA DS    PL3      NEEDED FOR PAM DSECT GENERATION
ANALDSCT DSECT
         DS    0CL4080
STORLEN  DS    H
NUMOCCUR DS    PL4
         DFHREGS
PAMBAR   EQU   6
SAACBAR  EQU   7
         COPY  DFHCSADS
         DROP  R13
         COPY  DFHPAMDS
         COPY  DFHSAADS
ICTSHARE DFHEIENT CODEREG=3,DATAREG=13,EIBREG=11
         ZAP   SKPDPAGE,=P'0'         INIT NUMBER OF SKIPPED PAGES
CNCLLOOP DS    0H                     CANCEL ANY ADDITIONAL ICES
         EXEC CICS CANCEL                                              X
               REQID('SHRDSTOR')                                       X
               TRANSID('SRST')                                         X
               RESP(CNCLRESP)
         CLC   CNCLRESP,DFHRESP(NORMAL)  PERFORM LOOP UNTIL ALL EXTRA
         BE    CNCLLOOP                  REQUESTS ARE CANCELLED
         BAL   R14,GETSTORG           GET STORAGE FOR FAQE ANALYSIS
         ST    R2,TYPE00AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 80 ANALYSIS
         ST    R2,TYPE80AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 93 ANALYSIS
         ST    R2,TYPE93AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 96 ANALYSIS
         ST    R2,TYPE96AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 97 ANALYSIS
         ST    R2,TYPE97AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 98 ANALYSIS
         ST    R2,TYPE98AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 99 ANALYSIS
         ST    R2,TYPE99AD
         BAL   R14,GETSTORG           GET STORAGE FOR TYPE 9F ANALYSIS
         ST    R2,TYPE9FAD
         EXEC CICS ADDRESS CSA(R10)
         USING DFHCSADS,R10
         L     R6,CSAPAMA            POINTS TO PAM
         L     R8,PAMMAPST           POINTS TO 1ST BYTE OF DSA MAP1
CHCKPAGE DS    0H
*          DELAY IS TO PREVENT THIS TRAN FROM MONOPOLIZING THE CPU
         EXEC  CICS DELAY
         CLI   0(R8),X'05'           IS IT A SHARED POOL PAGE?
         BE    SHRDPAGE              ...YES, GO ANALYZE
NEXTPAGE DS    0H
         LA    R8,1(,R8)             LOOK AT NEXT PAGE
         L     R4,PAMMAPST           POINT TO 1ST BYTE OF DSA MAP1
         LR    R5,R8                 GET CURRENT BYTE OF DSA MAP1
         SR    R5,R4                 COMPUTE OFFSET INTO DSA MAP1
         C     R5,PAMPGNUM           COMPARE TO NUMBER OF DSA PAGES
         BH    WEREDONE              ..LARGER - GET OUT OF HERE
         B     CHCKPAGE
SHRDPAGE DS    0H
*                           COMPUTE ADDRESS OF PAGE
         L     R4,PAMMAPST           POINT TO 1ST BYTE OF DSA MAP1
         LR    R5,R8                 GET CURRENT BYTE OF DSA MAP1
         SR    R5,R4                 COMPUTE OFFSET INTO DSA MAP1
         C     R5,PAMPGNUM           COMPARE TO NUMBER OF DSA PAGES
         BH    WEREDONE              ..LARGER - GET OUT OF HERE
         M     R4,PAMPGSZE           COMPUTE OFFSET FROM FIRST DSA PAGE
         L     R7,PAMDYNAM           LOAD ADDR OF FIRST DSA PAGE
         AR    R7,R5                 COMPUTE ADDRESS OF DSA PAGE
         LR    R5,R7
         A     R5,PAMPGSZE           ADDRESS OF NEXT PAGE
SAMEPAGE DS    0H
         BAL   R14,STORANAL          DO STORAGE ANALYSIS
         AH    R7,SAASAD             POINT TO NEXT STORAGE UNIT
         CR    R7,R5                 COMPARE TO END OF THE PAGE
         BL    SAMEPAGE              IS IT THE SAME PAGE
*                           COMPUTE ADDRESS OF MAP1 BYTE
         LR    R5,R7
         S     R5,PAMDYNAM           SUBTRACT START OF DSA
         SR    R4,R4                 CLEAR R4
         D     R4,PAMPGSZE           DIVIDE BY PAGE SIZE
         C     R5,PAMPGNUM           COMPARE TO NUMBER OF DSA PAGES
         BH    WEREDONE              ..LARGER - GET OUT OF HERE
         L     R4,PAMMAPST           LOAD ADDR OF START OF PAM MAP1
         AR    R5,R4                 ADD OFFSET TO START FOR NEW PAGE
         LR    R8,R5                 POINT A CURRENT MAP1 PAGE BYTE
         CLI   0(R8),X'05'           IS IT A SHARED POOL PAGE?
         BNE   NEXTPAGE              ...NO - GO CHECK NEXT PAGE
*                           COMPUTE ADDRESS OF NEXT PAGE
         L     R4,PAMMAPST           POINT TO 1ST BYTE OF DSA MAP1
         LR    R5,R8                 GET CURRENT BYTE OF DSA MAP1
         SR    R5,R4                 COMPUTE OFFSET INTO DSA MAP1
         C     R5,PAMPGNUM           COMPARE TO NUMBER OF DSA PAGES
         BH    WEREDONE              ..LARGER - GET OUT OF HERE
         M     R4,PAMPGSZE           COMPUTE OFFSET FROM FIRST DSA PAGE
         A     R5,PAMDYNAM           LOAD ADDR OF FIRST DSA PAGE
         A     R5,PAMPGSZE           ADDRESS OF NEXT PAGE
         B     SAMEPAGE              GO ANALYZE STORAGE
GETSTORG DS    0H
         ST    R14,SAVER14A
         EXEC  CICS GETMAIN FLENGTH(4080) SET(R2) INITIMG(=X'00')
         L     R14,SAVER14A
         BR    R14
STORANAL DS    0H
         ST    R14,SAVER14B
         CLI   SAASCI,X'00'          IS IT AN FAQE?
         BNE   CHCK80
         L     R2,TYPE00AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK80   DS    0H
         CLI   SAASCI,X'80'          IS IT ONE-WORD?
         BNE   CHCK93
         L     R2,TYPE80AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK93   DS    0H
         CLI   SAASCI,X'93'          IS IT SHARED?
         BNE   CHCK96
         L     R2,TYPE93AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK96   DS    0H
         CLI   SAASCI,X'96'          IS IT TACLE STORAGE?
         BNE   CHCK97
         L     R2,TYPE96AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK97   DS    0H
         CLI   SAASCI,X'97'          IS IT TEMP STORAGE MAIN?
         BNE   CHCK98
         L     R2,TYPE97AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK98   DS    0H
         CLI   SAASCI,X'98'          IS IT TEMP STORAGE TABLE?
         BNE   CHCK99
         L     R2,TYPE98AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK99   DS    0H
         CLI   SAASCI,X'99'          IS IT MAP STORAGE?
         BNE   CHCK9F
         L     R2,TYPE99AD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
CHCK9F   DS    0H
         CLI   SAASCI,X'9F'          IS IT DL/I?
         BNE   STGANEND
         L     R2,TYPE9FAD           LOAD ADDRESS FOR STORAGE TYPE
         BAL   R14,COLLSTAT
         B     STGANEND
STGANEND DS    0H
         L     R14,SAVER14B
         BR    R14
COLLSTAT DS    0H                    COLLECT STATS FOR THIS BLOCK
         ST    R14,SAVER14C
         USING ANALDSCT,R2
         LR    R1,R2                 LOAD ADDRESS OF BEGINNING OF TABLE
         A     R1,=F'4074'           SET LAST ENTRY IN TABLE ADDRESS
TESTOCCR DS    0H
*        THE FOLLOWING TWO INSTRUCTIONS WERE ADDED AFTER WE DISCOVERED
*        32 BYTES OF STORAGE FOLLOWING THE TS BYTE MAP THAT DO NOT
*        HAVE A VALID FAQE HEADER OR SAA.  WE WILL SKIP TO THE NEXT
*        PAGE OF SHARED STORAGE THAT FOLLOWS A NON-SHARED PAGE.
*        THE REMAINDER OF THE STORAGE IN THIS PAGE AND CONTIGUOUS
*        SHARED STORAGE PAGES WILL NOT BE ANALYZED. OUR IBM SE'S HAVE
*        RESEARCHED THIS AND HAVE FOUND CODE THAT ALTERS THE SAA
*        LENGTH AFTER THE GETMAIN IS DONE FOR THE TS BYTE MAP.
         CLC   SAASAD,=H'0'          IS SAA LENGTH VALID?
         BE    NEXTSEGM              .. NO, SKIP AND TRY NEXT SEGMENT?
         CLC   SAASAD,STORLEN        COMPARE LENGTHS
         BE    ADDOCCUR              .. IF EQUAL ADD TO NUMBER OF OCCUR
         CLC   STORLEN,=H'0'         IS TABLE LENGTH 0
         BE    NEWOCCUR              .. YES, WE NEED TO ADD AN ENTRY
         LA    R2,6(,R2)              BUMP TO NEXT ENTRY
         CR    R2,R1                 TEST FOR END OF TABLE
         BL    TESTOCCR              .. STILL MORE TRY AGAIN
TBLOVFLW DS    0H
         CP    STORLEN,=H'9999'      IS OVERFLOW ENTRY FORMATTED
         BE    ADDOCCUR              .. YES, THEN ADD TO OCCURRENCES
         MVC   STORLEN,=H'9999'      .. NO, THEN FORMAT ENTRY
         ZAP   NUMOCCUR,=P'0'
         B     ADDOCCUR
NEWOCCUR DS    0H
         MVC   STORLEN,SAASAD        FORMAT NEW OCCURRENCE ENTRY
         ZAP   NUMOCCUR,=P'0'
ADDOCCUR DS    0H
         AP    NUMOCCUR,=P'1'        ADD ONE TO NUMBER OF OCCURRENCES
         L     R14,SAVER14C
         BR    R14
NEXTSEGM DS    0H
*   THIS ROUTINE FINDS THE START OF THE NEXT NONSHARED STORAGE PAGE
*   IT IS USED WHEN WE DETECT AN ERROR ON THE SAA OR FAQE HEADER.
         AP    SKPDPAGE,=P'1'        ADD ONE TO SKIPPED PAGE COUNTER
         LA    R8,1(,R8)             LOOK AT NEXT PAGE
         L     R4,PAMMAPST           POINT TO 1ST BYTE OF DSA MAP1
         LR    R5,R8                 GET CURRENT BYTE OF DSA MAP1
         SR    R5,R4                 COMPUTE OFFSET INTO DSA MAP1
         C     R5,PAMPGNUM           COMPARE TO NUMBER OF DSA PAGES
         BH    WEREDONE              ..LARGER - GET OUT OF HERE
         CLI   0(R8),X'05'           IS IT A SHARED POOL PAGE?
         BE    NEXTSEGM              ...YES, SKIP TO NEXT PAGE
         B     NEXTPAGE              CONTINUE ANALYSIS
PRNTRPT  DS    0H
         ST    R14,SAVER14D
         MVC   MSGOUT01,MSGFORMT FORMAT MESSAGE AREA
         MVC   MSGTYPE,SAVETYPE  SET STORAGE TYPE
NXTENTRY DS    0H
         LH    R4,STORLEN
         CH    R4,=H'0'          CHECK FOR VALID ENTRY
         BE    PRNTEXIT          NOT VALID WE ARE DONE
         CVD   R4,LENPACKL       CONVERT LENGTH TO PACKED
         MVC   MSGLENG,LENFORMT  SET UP FOR THE EDIT
         MVC   MSGOCCR,NUMFORMT  SET UP FOR THE EDIT
         MVC   MSGBYTE,BYTFORMT  SET UP FOR THE EDIT
         ED    MSGLENG,LENPACKS  UNPACK LENGTH
         ED    MSGOCCR,NUMOCCUR  UNPACK NUMBER OF OCCURRENCES
         ZAP   NUMBYTES,NUMOCCUR SET UP TO COMPUTE TOTAL STORAGE
         MP    NUMBYTES,LENPACKS COMPUTE TOTAL STORAGE
         ED    MSGBYTE,NUMBYTES  UNPACK LENGTH
         EXEC  CICS WRITEQ TD QUEUE('MSGS') FROM(MSGOUT01) LENGTH(80)
         C     R4,=H'9999'       CHECK FOR OVERFLOW ENTRY
         BE    PRNTEXIT          ..YES, IT IS THE LAST ENTRY
         LA    R2,6(,R2)         BUMP TO NEXT ENTRY
         B     NXTENTRY
PRNTEXIT DS    0H
         L     R14,SAVER14D
         BR    R14
WEREDONE DS    0H
         L     R2,TYPE00AD       GET ADDRESS OF FAQE ANALYSIS STORAGE
         MVC   SAVETYPE,=C'00'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE80AD       GET ADDRESS OF TYPE 80 ANALYSIS STRG
         MVC   SAVETYPE,=C'80'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE93AD       GET ADDRESS OF TYPE 93 ANALYSIS STRG
         MVC   SAVETYPE,=C'93'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE96AD       GET ADDRESS OF TYPE 96 ANALYSIS STRG
         MVC   SAVETYPE,=C'96'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE97AD       GET ADDRESS OF TYPE 97 ANALYSIS STRG
         MVC   SAVETYPE,=C'97'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE98AD       GET ADDRESS OF TYPE 98 ANALYSIS STRG
         MVC   SAVETYPE,=C'98'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE99AD       GET ADDRESS OF TYPE 99 ANALYSIS STRG
         MVC   SAVETYPE,=C'99'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         L     R2,TYPE9FAD       GET ADDRESS OF TYPE 9F ANALYSIS STRG
         MVC   SAVETYPE,=C'9F'   SET TYPE OF STORAGE FOR MSG
         BAL   R14,PRNTRPT
         CP    SKPDPAGE,=P'0'    ANY SKIPPED PAGES
         BE    SKIPMSG2          ..NO, SKIP MESSAGE 2
         MVC   MSGOUT02,MG2FORMT FORMAT MESSAGE AREA
         MVC   MSGNUMPG,LENFORMT SET EDIT MASK
         ED    MSGNUMPG,SKPDPAGE UNPACK NUMBER OF SKIPPED PAGES
         EXEC  CICS WRITEQ TD QUEUE('MSGS') FROM(MSGOUT02) LENGTH(80)
SKIPMSG2 DS    0H
         EXEC CICS START                                               X
               INTERVAL(10000)                                         X
               TRANSID('SRST')                                         X
               REQID('SHRDSTOR')
         EXEC CICS RETURN
LENFORMT DC    XL5'2020202021'
NUMFORMT DC    XL7'20202020202021'
BYTFORMT DC    XL11'2020202020202020202021'
MSGFORMT DS    CL80'SHARED STORAGE TYPE XX LENGTH 99999 NUMBER 9999999 X
               TOTAL BYTES 99999999999'
MG2FORMT DC    CL80'XXXXX PAGES WERE NOT ANALYZED'
         END


Mark Sobotka
Project Leader
Citibank (USA)                                     c Citibank 1991

