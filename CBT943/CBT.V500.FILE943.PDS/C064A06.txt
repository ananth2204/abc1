Exploiting the CICS-JES interface


INTRODUCTION

Flipping through the CICS Customization Guide (SC33-0507-
1) on my way to the index I ran across the section CICS
Interface to JES as I had done many times before.  Once again
I caught myself thinking "Hmm this looks interesting.  I'll have
to explore this facility I when I have the time".

Fortunately an opportunity finally presented itself in the form
of a project.  One of our application groups expressed a desire
to print reports 'directly' from CICS.  In the past, the printing
of reports and subsequent report management had been handled
through a facility called CICS Job Submission.  This facility
would allow the submission of a job or procedure from JCL
fabricated within a CICS application program.  The job would
then execute and route the report to the desired destination
using a third-party vendor remote print manager product called
VTAM Printer Support System (VPS) from Levi, Ray, and
Shoup.  On this occasion, however, the applications group was
building a temporary storage queue with report records created
for on-line viewing.  They wanted the ability to print the report
directly from CICS without having to use the CICS Job
Submission facility described above to execute a batch program
which contained the identical report logic as its on-line
counterpart.


PRINTING DIRECTLY FROM CICS - CONSTRAINTS

It was our (ie the systems programming group's) desire that all
printing and report routing should be handled by VPS.
Therefore CICS-managed printers were not a desirable option.
With that constraint in mind, I began exploring the possibility
of using the CICS-JES interface.

I began my research in the CICS Customization Guide (SC33-
0507-1) with high hopes that it would fulfil our needs.  As I
read it became apparent that the CICS-JES interface facility
would indeed provide a convenient solution to our challenge.


CICS PRINTING FACILITY - THE APPLICATION

The CICS-JES interface appeared to be the solution - it was
time to design, code, and test our CICS-JES application
program interface.  We decided that it would be desirable to
isolate the application programmer from having to know the
details of using the CICS-JES interface, so our purpose was to
provide utility code that met the following criteria:

1      Minimize the print request delay for the end-user

2      Minimize performance impact on the rest of the CICS system

3      Provide an easy interface for the application programmer

4      Require as few parameters as possible (ie Keep It Simple I).

With those objectives in mind we began designing the
application program interface.  The final design included a
couple of programs which accept/reject the request and process
the writes to the spool respectively.  The details of each
program are presented below.

There are two programs involved in our application interface to
the CICS-JES facility.  The first, CJQMGR, provides the
function of interfacing directly to the application program to
accept the print request.  The application programmer needs
only to supply the printer name and number of copies.
CJQMGR checks for the presence of the temporary storage
queue and that the number of copies is acceptable.  It then
passes the printer destination and number of copies to the
second program, CJRPTM, which actually processes the reads
from the 'report' temporary storage queue and subsequent
writes to the JES spool.  The first program, CJQMGR, passes
the parameters through a START with the FROM option.  The
second program, CJRPTM, RETRIEVEs the parameters and
processes the spool writes.

The reason for the front-end interface to the application
program is so that the user does not experience a response time
delay by having to wait until the spool writes are actually
completed.  This approach has the disadvantage of the inability
to communicate to the user when a print request failed in the
second of the two programs, but as mentioned has the
advantage of eliminating the response time delay that would be
experienced from having the user wait for the JES spool writes
to complete.  It was our opinion that the CICS-JES interface
was reliable enough to warrant the assumption that it would
complete properly.  You may, however, with minor alterations
to the code, elect to have the user wait until the spool writes
complete by executing a LINK to program CJRPTM instead of
a START.


WHAT HAPPENS WHEN I

Assuming a print request passes the edits (temporary storage
queue present, number of copies does not exceed maximum,
printer name present), CJQMGR passes the request via an
EXEC CICS START command with the FROM option to
CJRPTM.  CJRPTM then does an EXEC CICS SPOOLOPEN
command to initialize the connection to JES.  This initialization
produces a token which is used to perform subsequent writes to
the spool.  The token name is in the format of Snnnnnnn,
where nnnnnnn is a sequential number beginning with
0000001.  For example, the first request after bringing CICS
up would be S0000001.  As lines are being written using
EXEC CICS SPOOLWRITE commands, JES has created a
SYSOUT under the CICS job name/started task (STC) name
that CICS is running under and is placing the lines in that
SYSOUT.

In the JES3 environment, the printer DESTination is specified
with the NODE parameter on the SPOOLOPEN comand while
the writer (WTR) name is specified with the USERID option.
In this implementation, we have used the name CICSXWTR as
the USERID so that the WTR name will appear as
CICSXWTR.  When CJRPTM completes and executes a
SPOOL CLOSE command, the report is made available to VPS
which in turn routes the report to the printer specified in the
NODE (DESTination) of the SPOOLOPEN command.


SYSTEM ENVIRONMENT, DEFINITIONS, AND DEFAULT LIMITS

Environment

CJQMGR and CJRPTM execute in a CICS Release 2.1.1
environment running on an MVS/ESA JES3 system.  For the
JES2 environment, changes may be necessary to pass the
correct parameters through with SPOOLOPEN.  Please consult
the CICS Customization Guide (SC33-0507-1) for possible
changes for the JES2 environment.

Definitions

The two programs and one transaction may be defined through

RDO through the following commands:

   CEDA DEFINE PROGRAM(CJQMGR) GR(your groupname) LANG(ASSEMBLER)
   CEDA DEFINE PROGRAM(CJRPTM) GR(your groupname) LANG(ASSEMBLER)
   CEDA DEFINE TRANSACTION(CS85) PROGRAM(CJRPTM) GR(your groupname)

Default limits

There are two governors that may be used to control the
amount of work the CICS Printing Facility will accept.  The
first, HLIMIT, is a halfword field appearing in the first
program, CJQMGR.  This field is used to limit the number of
copies that may be requested. The limit is currently set to five,
but may be changed by FINDing the variable definition
HLIMIT at the end of the CJQMGR code and changing it to
whatever is desired.  The second control is found in the second
program, CJRPTM, and is defined in variable LINELIMT.
LINELIMT is used to control the maximum number of lines
that the printing facility will process.  Currently it is set to
1,199 which will allow a maximum of 1,200 lines.  This limit
may be changed by FINDing LINELIMT at the bottom of the
CJRPTM program listing and altering it to meet your needs.


APPLICATION USAGE INSTRUCTIONS

Step one

Prepare to create the report just as you would in a batch
programming environment (ie set up headers in working
storage, set up a line counter, etc).  The report that you format
will be exactly as if you were creating it from a batch
program.  You must supply the carriage control in the first
character of the 133-byte print line and report headings where
appropriate.

Step two

Create the report queue. You will create a temporary storage
queue that will hold the report that your program formats. The
name of the queue will be the four-character terminal-id of the
requesting user combined with the literal 'REPT'.  For
instance, if the requesting user is logged on to terminal 1234,
the report queue that you will create will be '1234REPT'.

Step three

Link to program CJQMGR to actually request that your report
queue be printed.  You need only supply CJQMGR with the
printer destination (an example of a printer name is
PRINTER1) since CJQMGR will determine the rest of its
requirements automatically.  The number of copies may be
optionally specified as well.  The limit is 5 copies, the default
is 1.

Step four

Interrogate the return code produced by CJQMGR to determine
if there were any errors and act on them accordingly.  Several
return codes may result from CJQMGR.  Below is a list and
brief description of them.


REPORT-QUEUED-OK -- VALUE '00'

This means that your report is being sent to the JES spool to be
printed at the printer destination that you specified.  No validity
checking of the printer-id is done, so you must take care to
supply a correct printer destination name.  If an invalid printer
address is supplied, your report will be discarded (purged).
There is no default destination printer address.


REPORT-PRINTER-NAME-MISSING -- VALUE '01'

This indicates that you did not pass the printer destination name
that you want the report sent to.  You must supply a printer
address and it is your responsibility to ensure that the printer
address is a valid and correct one.


REPORT-QUEUE-NOT-FOUND -- VALUE '02'

CJQMGR determined that the report queue that should have
been formulated by combining the terminal-id with the
characters 'REPT' was not present.


REPORT-QUEUE-START-ERROR -- VALUE '03'

CJQMGR encountered an internal error attempting to start the
task that will ultimately pass your report to JES.  This situation
is extremely rare, but is provided for with this return code.



AN EXAMPLE

The relevant portions of a typical COBOL/CICS command-
level program are presented below to illustrate the elements
needed to produce and print a report directly from CICS using
the CICS Report Printing Facility.

        WORKING-STORAGE SECTION.
        77  RCA-LENGTH                          PIC S9(4) COMP
               VALUE +10.
        77  REPORT-FINISHED-SW                  PIC X VALUE 'N'.
            88  REPORT-FINISHED                       VALUE 'Y'.
        77  RL-LENGTH                           PIC S9(4) COMP
               VALUE +133.
        77  TOTAL-REPORT-LINES                  PIC S9(4) COMP-3
               VALUE ZEROS.
        77  LINE-COUNTER                        PIC S9(4) COMP-3
               VALUE +56.
        01  REPORT-COMMAREA.
            05  PRINTER-NAME                    PIC X(8).
            05  NUMBER-COPIES                   PIC S9(4) COMP VALUE 1.
            05  RC                              PIC X(2)
                  VALUE '00'.
                88  REPORT-QUEUED-OK            VALUE '00'.
                88  REPORT-PRINTER-NAME-MISSING VALUE '01'.
                88  REPORT-QUEUE-NOT-FOUND      VALUE '02'.
                88  REPORT-QUEUE-START-ERROR    VALUE '03'.
        01  STANDARD-CARRIAGE-CONTROLS.
            05  TOP-OF-PAGE                     PIC X VALUE '1'.
            05  ADVANCE-ONE-LINE                PIC X VALUE SPACE.
            05  ADVANCE-TWO-LINES               PIC X VALUE '0'.
            05  ADVANCE-THREE-LINES             PIC X VALUE '-'.
            05  SUPRESS-SPACING                 PIC X VALUE '+'.
        01  QNAME.
            05  TERMID                          PIC X(4).
            05  FILLER                          PIC X(4)
                  VALUE 'REPT'.
        01  REPORT-LINE.
            05  CARRIAGE-CONTROL                PIC X.
            05  REPORT-DATA                     PIC X(132).
        01  etc...
            .

Here (or somewhere in your code) you should prompt the user
or somehow determine the printer destination.  After you have
obtained the desired printer destination name, execute the
following MOVE statement (your-obtained-printer-name in the
MOVE statement below indicates the field that contains the
desired printer name or a literal of the printer name).

    MOVE your-obtained-printer-name TO PRINTER-NAME.
            .
            .
       * FORMULATE QUEUE NAME...
            MOVE EIBTRMID TO TERMID.
       * NEXT, GENERATE REPORT...
            PERFORM 1000-BUILD-REPORT
              UNTIL
                REPORT-FINISHED
              OR
                TOTAL-REPORT-LINES IS GREATER THAN +1199.
       * NOW THAT THE REPORT QUEUE HAS BEEN BUILT, QUEUE IT TO PRINT
            EXEC CICS LINK
                      PROGRAM('CJQMGR')
                      COMMAREA(REPORT-COMMAREA)
                      LENGTH(RCA-LENGTH)
            END-EXEC.
            IF REPORT-QUEUED-OK
               NEXT SENTENCE
            ELSE
               Move the field RC to some display area on your map
               and tell the user that something went wrong and
               to contact the help desk...be sure to include the
               "RC" field in your message, though, so that you can
               determine what the problem is from the descriptions
               listed above in the "88" level fields. You might
               even want to display literals in your error message
               to detail the nature of the error based on the
               88 levels under RC.
            END-IF.
            IF TOTAL-REPORT-LINES IS GREATER THAN +1199
               Inform user here that her/his report was truncated.
            ELSE
               Inform user that report was queued to print.
            END-IF.
            .
            .
            EXEC CICS RETURN END-EXEC.
        1000-BUILD-REPORT.
       *****************************************************
       ** FORMAT REPORT LINE AND WRITE TO 'REPORT QUEUE'. **
       *****************************************************
            IF LINE-COUNTER IS GREATER THAN +55
               PERFORM 1100-FORMAT-HEADERS
               MOVE +3 TO LINE-COUNTER
            END-IF.
            .
            .
            Your report line should be formatted here in whatever
            fashion is desired. After it is formatted, execute
            the following two MOVEs and PERFORM to write it to
            the report queue:
           * YOU MAY USE WHATEVER CARRIAGE CONTROL (LISTED IN
           * WORKING-STORAGE ABOVE) IS APPROPRIATE.
            MOVE ADVANCE-ONE-LINE TO CARRIAGE-CONTROL.
            MOVE your-report-line to REPORT-LINE.
            PERFORM 1199-WRITE-REPORT-QUEUE.
            .
            .
           * USE WHATEVER MEANS YOU NEED TO DETERMINE 'WHEN'
           * YOU HAVE COMPLETED YOUR REPORT...
            IF your-report-is-finished
               MOVE 'Y' TO REPORT-FINISHED-SW
            END-IF.
        1100-FORMAT-HEADERS.
       *****************************************************
       ** THIS IS WHERE YOU WOULD FORMAT YOUR REPORT      **
       ** HEADINGS EVERY 55 LINES OR ON TOTAL BREAKS..ETC.**
       *****************************************************
            MOVE TOP-OF-PAGE TO CARRIAGE-CONTROL.
            MOVE your-header-line-1 to REPORT-DATA.
            PERFORM 1199-WRITE-REPORT-QUEUE.
            MOVE ADVANCE-ONE-LINE TO CARRIAGE-CONTROL.
            MOVE your-header-line-2 to REPORT-DATA.
            PERFORM 1199-WRITE-REPORT-QUEUE.
            MOVE ADVANCE-ONE-LINE TO CARRIAGE-CONTROL.
            MOVE your-header-line-3 to REPORT-DATA.
            PERFORM 1199-WRITE-REPORT-QUEUE.
        1199-WRITE-REPORT-QUEUE.
       *****************************************************
       ** THE ACTUAL WRITE TO THE 'REPORT' QUEUE...       **
       *****************************************************
            EXEC CICS WRITEQ TS
                      QUEUE(QNAME)
                      FROM(REPORT-LINE)
                      LENGTH(RL-LENGTH)
            END-EXEC.
            ADD +1 TO TOTAL-REPORT-LINES.


USAGE NOTES

When your report has printed at its destination, a one-line
message will print indicating the end of the report and the
requestor's CICS user-id.  The message will print at the top of
a new page in the following format:

      CJP0001I REPORT PROCESSING COMPLETE FOR USERID: requestor's userid

If by chance your program does not adhere to the line limit and
creates a report queue that exceeds the line limit as specified in
CJRPTM, the line limit value will be printed and the following
message will be printed on the last page of the report:

      CJP0002W LINE LIMIT EXCEEDED--REPORT IS NOT COMPLETE!

The report queue in which you placed your report, is
automatically deleted after the report has been passed to JES
and VPS to print.


CJQMGR SOURCE CODE

         TITLE 'CJQMGR - STARTER FOR REPORT QUEUE TO SPOOL'
* CJQMGR - QUEUE MANAGER FOR CICS TO JES INTERFACE                  *
* Function: CJQMGR is the 'USER' (PROGRAMMER) interface for         *
*           requesting that reports be queued to JES for SYSOUT     *
*           processing. CJQMGR is a front-end to the actual JES     *
*           interface program CJRPTM.                               *
* Method:   The application programmer simply writes to Transient   *
*           Data Queue 'termid'+"REPT" (eg. if the end-user was     *
*           on termid '1234' the queue name would be '1234REPT')    *
*           the report he/she wants to print -- including all       *
*           headers (every 55 lines or whatever and on pagebreaks)  *
*           just as he/she would do if they were creating a batch   *
*           report. Carriage Control characters must also be        *
*           inserted as character 1 of the 133 byte print line.     *
*           After the report is written to the TS Queue of the name *
*           formulated by the method mentioned above, he/she simply *
*           links to this program (CJQMGR) passing only the         *
*           printer-ID of where they want the printout routed.      *
*           This program then executes a CICS START TRANSID('CJ85') *
*           passing the printer name and the queue to print (which  *
*           it formulated by the method mentioned above).           *
*           CJRPTM (transid CJ85) then takes the queue and the      *
*           printer name and writes it to JES. After the report     *
*           has been written to JES, VPS (the remote printer        *
*           manager) routes the print automatically to its          *
*           destination.                                            *
*           The reason for this 'front-end' to CJRPTM is to allow   *
*           multiple concurrent printouts to be processed without   *
*           causing delays to the end-user.                         *
DFHEISTG DSECT
RQDATA   DS    0CL26
PRINTER  DS    CL8
QNAME    DS    0CL8
TERMID   DS    CL4
RPTLIT   DS    CL4
USERID   DS    CL8
NUMCOPY  DS    H
ONE      DS    H
OUTLINE  DS    CL133
COMAINP  DSECT
CMPRINTR DS    CL8
CMNUMCPY DS    H
CMRETCD  DS    CL2
EISCBAR  EQU   5                   EIS      POINTER
COMPTR   EQU   5                   COMMAREA POINTER
GMPTR    EQU   6                   POINTER FOR GETMAINED AREA
         DFHTCA CICSYST=YES
         COPY  DFHTCADS
         COPY  DFHEISDS
         COPY  DFHAID
CJQMGR   DFHEIENT CODEREG=3,DATAREG=13,EIBREG=4
         L     R8,TCASYAA                   LOAD TCA SYSTEM ADDR
         L     EISCBAR,TCAEISA-DFHTCADY(R8) AND THEN GET EIS ADDR
         LH    COMPTR,EIBCALEN              POKE IN LEN OF COMMAREA
         LTR   COMPTR,COMPTR                IS COMMEAREA PRESENT?
         BZ    BADBACK                      NO...SET BAD RETURN & QUIT
         USING COMAINP,COMPTR
         L     COMPTR,DFHEICAP              FETCH COMMAREA ADDR
GETQNME  EQU *
         CLI   CMPRINTR,X'40'               IS PRINTER ID BLANK?
         BE    GQERR1                       YES, FLAG ERROR & RETURN
         CLI   CMPRINTR,X'00'               IS PRINTER ID LOVALS?
         BE    GQERR1                       YES, FLAG ERROR & RETURN
         MVC   PRINTER,CMPRINTR             MOVE IN PRINTER NAME
         MVC   RPTLIT,=C'REPT'              REPORT LITERAL
         MVC   TERMID,EIBTRMID              TERMID OF REQUESTOR
         EXEC CICS HANDLE CONDITION                                    X
                   QIDERR(NOQUEUE)                                     X
                   ITEMERR(NOQUEUE)
         MVC   ONE,H1
         EXEC CICS READQ TS                                            X
                   QUEUE(QNAME)                                        X
                   INTO(OUTLINE)                                       X
                   LENGTH(H133)                                        X
                   ITEM(ONE)*
         CLC   CMNUMCPY,H0                  IS NUMBER OF COPIES ZERO?
         BE    SETCOPY1                     YES, DEFAULT TO ONE
         CLC   CMNUMCPY,HLIMIT              CHECK COPY LIMIT EXCEEDED
         BH    CPYERR                       GREATER THAN LIMIT, FLAG
         MVC   NUMCOPY,CMNUMCPY             ALL OK, MOVE TO DATA AREA
         B     GETUID                       CONTINUE
SETCOPY1 EQU *
         MVC   NUMCOPY,H1                   DEFAULT TO ONE COPY
GETUID   EQU *
         EXEC CICS INQUIRE                                             X
                   TERMINAL(EIBTRMID)                                  X
                   USERID(USERID)
         EXEC CICS HANDLE CONDITION ERROR(ABSTRT)
         EXEC CICS START                                               X
                   TRANSID('CJ85')                                     X
                   INTERVAL(0)                                         X
                   FROM(RQDATA)                                        X
                   LENGTH(H26)
         MVC   CMRETCD,=C'00'               OK, REPORT Q'D TO START..
RETURN   EQU *
         EXEC CICS RETURN
GQERR1   EQU *
         MVC   CMRETCD,=C'01'               FLAG NO QUEUE NAME ERROR
         EXEC CICS RETURN
NOQUEUE  EQU *
         MVC   CMRETCD,=C'02'               FLAG START FAILURE
         EXEC CICS RETURN
ABSTRT   EQU *
         MVC   CMRETCD,=C'03'               FLAG START FAILURE
         EXEC CICS RETURN
CPYERR   EQU *
         MVC   CMRETCD,=C'04'               COPY LIMIT EXCEEDED
         EXEC CICS RETURN
BADBACK  EQU *
         EXEC CICS ABEND ABCODE('NOCA')
H0       DC H'0'
H1       DC H'1'
H26      DC H'26'
H133     DC H'133'
HLIMIT   DC H'5'
         END


CJRPTM SOURCE CODE

         TITLE 'CJRPTM - WRITE REPORTS TO JES SPOOL'
* CJRPTM -  INTERFACE TO JES                                        *
* Function: CJRPTM gets started by program CJQMGR through a START   *
*           command for TRANSID 'CJ85'. The purpose of this program *
*           is to take the queue name along with the printer ID     *
*           passed from CJQMGR                                      *
*           and 'SPOOLWRITE' it to JES with the correct DESTination.*
*           VPS will then pick up the output from JES and route it  *
*           to its proper destination.                              *
* Method:   CJRPTM uses standard CICS interfaces to JES to          *
*           accomplish the puts to the JES spool. At any point      *
*           in time if errors are encountered, CJRPTM ABENDs with   *
*           an ABCODE of some indication of where in the program    *
*           the error occurred.                                     *
DFHEISTG DSECT
LINECT   DS    PL4
RCNTL    DS    0CL26
PRINTER  DS    CL8
QNAME    DS    CL8
USERID   DS    CL8
NUMCOPY  DS    H
RTOKEN   DS    CL8
CMDRSP1  DS    CL4
CMDRSP2  DS    CL4
CMOUTLNE DS    CL133
ONE      DS    H
EISCBAR  EQU   5                   EIS      POINTER
         DFHTCA CICSYST=YES
         COPY  DFHTCADS
         COPY  DFHEISDS
         COPY  DFHAID
CJRPTM   DFHEIENT CODEREG=3,DATAREG=13,EIBREG=4
** STEP 1: GET QUEUE NAME TO PROCESS                            **
         EXEC CICS HANDLE CONDITION
         MVI   QNAME,X'40'                  BLANK OUT
         MVC   QNAME+1(L'QNAME-1),QNAME     QUEUE NAME
         EXEC CICS RETRIEVE                                            X
                   INTO(RCNTL)                                         X
                   LENGTH(H26)
         CLI   QNAME,X'40'                  STILL BLANK?
         BE    RETURN                       FORGET IT..NO Q NAME
         SR    R7,R7                        INIT R7 FOR COPY COUNT
         LH    R7,NUMCOPY                   LOAD IN NUMBER OF COPIES
         LTR   R7,R7                        CHECK FOR ZERO
         BZ    RETURN                        ...JUST IN CASE
** STEP 2: (A) SET UP HANDLE CONDITIONS                         **
QPROC    EQU *
         EXEC CICS HANDLE CONDITION                                    X
                   QIDERR(SPLCLS)                                      X
                   ITEMERR(ENDRPT)
** STEP 2: (B) EXEC SPOOLOPEN COMMAND                           **
         EXEC CICS SPOOLOPEN OUTPUT                                    X
                   NODE(PRINTER)                                       X
                   USERID('CICSXWTR')                                  X
                   TOKEN(RTOKEN)                                       X
                   RESP(CMDRSP1)                                       X
                   RESP2(CMDRSP2)                                      X
                   MCC
         CLC   CMDRSP1,DFHRESP(NORMAL)      ALL OK?
         BNE   OPERR1                       BAD RETURN CODE ON OPEN
STRTRPT  EQU *
         ZAP   LINECT,=P'0'                 INIT LIMIT CTR
         MVC   ONE,H1
         EXEC CICS READQ TS                                            X
                   QUEUE(QNAME)                                        X
                   INTO(CMOUTLNE)                                      X
                   LENGTH(H133)                                        X
                   ITEM(ONE)
** STEP 2: (C) READ REPORT SPOOL, WRITE QUEUE                   **
QP001    EQU *
         EXEC CICS SPOOLWRITE                                          X
                   FROM(CMOUTLNE)                                      X
                   TOKEN(RTOKEN)                                       X
                   FLENGTH(L133)                                       X
                   RESP(CMDRSP1)                                       X
                   RESP2(CMDRSP2)
         EXEC CICS SUSPEND
         CLC   CMDRSP1,DFHRESP(NORMAL)      ALL OK?
         BNE   WRERR1                       NO--ABEND WITH WRITE ERROR
         AP    LINECT,PONE
         EXEC CICS READQ TS                                            X
                   QUEUE(QNAME)                                        X
                   INTO(CMOUTLNE)                                      X
                   LENGTH(H133)                                        X
                   NEXT
         CP    LINECT,LINELIMT
         BH    QPLIMIT
         B     QP001                        DO IT AGAIN...UNTIL QZERO
QPLIMIT  EQU *
         MVI   CMOUTLNE,X'40'
         MVC   CMOUTLNE+1(L'CMOUTLNE-1),CMOUTLNE
         MVI   CMOUTLNE,C'-'
         MVC   CMOUTLNE+1(L'TRUMSG),TRUMSG
         EXEC CICS SPOOLWRITE                                          X
                   FROM(CMOUTLNE)                                      X
                   TOKEN(RTOKEN)                                       X
                   FLENGTH(L133)                                       X
                   RESP(CMDRSP1)                                       X
                   RESP2(CMDRSP2)
         CLC   CMDRSP1,DFHRESP(NORMAL)      ALL OK?
         BNE   WRERR1                       NO--ABEND WITH WRITE ERROR
         BCT   R7,STRTRPT
         B     SPLCLS
** STEP 2A: BRANCH BACK UNTIL NUMCOPIES IS ZERO                 **
ENDRPT   EQU *
         BCT   R7,STRTRPT
SPLCLS   EQU *
** STEP 3: CLOSE SPOOL AND RELEASE REPORT FOR PRINTING          **
         MVI   CMOUTLNE,X'40'
         MVC   CMOUTLNE+1(L'CMOUTLNE-1),CMOUTLNE
         MVI   CMOUTLNE,C'1'
         MVC   CMOUTLNE+1(L'EORMSG),EORMSG
         MVC   CMOUTLNE+L'EORMSG+2(8),USERID
         EXEC CICS SPOOLWRITE                                          X
                   FROM(CMOUTLNE)                                      X
                   TOKEN(RTOKEN)                                       X
                   FLENGTH(L133)                                       X
                   RESP(CMDRSP1)                                       X
                   RESP2(CMDRSP2)
         CLC   CMDRSP1,DFHRESP(NORMAL)      ALL OK?
         BNE   WRERR1                       NO--ABEND WITH WRITE ERROR
         EXEC CICS SPOOLCLOSE                                          X
                   TOKEN(RTOKEN)                                       X
                   RESP(CMDRSP1)                                       X
                   RESP2(CMDRSP2)
         CLC   CMDRSP1,DFHRESP(NORMAL)      CLOSE OK?
         BNE   CLERR1                       NO->ABEND WITH CLOSE ERROR
         EXEC CICS IGNORE CONDITION                                    X
                   QIDERR                                              X
                   ISCINVREQ                                           X
                   NOTAUTH                                             X
                   SYSIDERR
         EXEC CICS DELETEQ TS QUEUE(QNAME)
         EXEC CICS RETURN
OPERR1   EQU *
         EXEC CICS ABEND ABCODE('OP01')
WRERR1   EQU *
         EXEC CICS ABEND ABCODE('WR01')
CLERR1   EQU *
         EXEC CICS ABEND ABCODE('CL01')
RETURN   EQU *
         EXEC CICS RETURN
EORMSG   DC C'CJP0001I REPORT PROCESSING COMPLETE FOR USERID:'
L133     DC F'133'
H26      DC H'26'
H133     DC H'133'
H80      DC H'80'
H1       DC H'1'
PONE     DC P'1'
LINELIMT DC P'1199'
TRUMSG   DC C'CJP0002W LINE LIMIT EXCEEDED--REPORT IS NOT COMPLETE!'
         END


David H Hite
Senior Systems Programmer (USA)

