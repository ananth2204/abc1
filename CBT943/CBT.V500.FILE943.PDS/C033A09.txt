 A front-end program for CEDA
BACKGROUND
We are an MVS/XA shop running CICS 1.7 on two 3090s.  At our installation we run
over 35 different CICS systems, at least 20 of which are Tdevelopment systemsU.
This means that defining resources takes up a very large slice of our time, and
development staff, knowing we have Resource Definition Online (RDO), get
frustrated that new resources are not always available immediately.
We also maintain resources in three CICS System Definition (CSD) files - TEST,
DEVT, and PROD.  Logging off of one system and on to another to access a
different CSD is tedious and time-consuming.
A SOLUTION
To overcome these two problems I developed the following program to Tfront-endU
the existing program for RDO, DFHEDAP.
It uses the new EXEC CICS INQ and SET functions available in CICS 1.7 to switch
between CSDs depending on the third character of the transaction-id - T = TEST,
D = DEVT, P = PROD, and U = USER.  The fourth character defines the amount of
access - A = FULL ACCESS (like CEDA, B = NO INSTALL (like CEDB), C = VIEW ONLY
(like CEDC), and I = full access but with the dataset opened for read only.
This last option allows the CSD to be open for update in one system but still be
opened in another system to do an INSTALL.
By introducing a USER CSD allowing development staff to define and install their
own maps, programs, and transactions for immediate use we have considerably
reduced the work load of the technical support group and the frustration of
developers.
The resources they define are retained across warm and emergency restarts but
the GRPLIST and GROUPS have to be updated by the technical support group for a
COLD start.  This we can do in our own time when the resource requirements have
been finalised.
IMPLEMENTATION
To implement this program remove any JCL statements for DFHCSD from the CICS
start-up deck, this will allow CICS to perform a dynamic allocation for the
dataset, add TDISP=U and TDSNAME=U operands to the DFHFCT TYPE=ENTRY for the
DFHCSD, which will ensure the correct CSD is used for a cold start.
Replace GROUP(DFHSPI) in the start up GRPLIST with your own group.  This will be
a copy of DFHSPI with the additional transactions defined based on CEDA but
calling the front-end program rather than DFHEDAP, ie:
COPY ALL(*)G(DFHSPI)TO(WXXSPI)            copy group
COPY G(WXXSPI)PROG(DFHEDAP)AS(TDD024)     define front end prog
ALTER G(WXXSPI)TRAN(CEDA)PROG(TDD024)     change CEDA
ALTER G(WXXSPI)TRAN(CEDB)PROG(TDD024)     change CEDB
ALTER G(WXXSPI)TRAN(CEDC)PROG(TDD024)     change CEDC
COPY G(WXXSPI)TRAN(CEDA)AS(TDUA)          define your new
COPY G(WXXSPI)TRAN(CEDA)AS(TDDA)              transactions.
COPY G(WXXSPI)TRAN(CEDA)AS(TDPI) etc...
You will not be able to install this group because you are using transaction
CEDA.  To get around this, copy the new resources (TDD024 and your transactions)
and the new CEDB and CEDC to a temporary group and install that.  End the CEDA
transaction and initiate one of the new transactions (eg TDDA).  Copy the new
CEDA to a temporary group and install it.  Do this for all systems that will
support the new functions.
ADDITIONAL NOTES
There is some extra code to ensure that only members of the technical support
group access the TEST, DEVT, or PROD CSD and an eye-catcher is written to the
CSDL audit trail transient data queue reporting who, when, and where each time
the CSD is changed.  The transaction will abend if the transient data queue is
not available.  The use of XOPTS(NOEDF) will prevent CEDF being used to override
the rudimentary security checks.
PROGRAM SOURCE
*ASM XOPTS(NOEDF)
TDD024   START
*        EXEC INTERFACE STORAGE DSECT WITH PROGRAM WORK
*        AREAS APPENDED.
DFHEISTG DSECT
TRANID   DS    0CL4               4 CHAR TRANID
         DS    CL2                FILLER - FIRST 2 CHARS TRANID 'TD'
CSDNAME  DS    C                  1 CHAR MNEMONIC OF CSD TO ACCESS
 *                                  U = 'CICS.USER.CSD'
*                                  T = 'CICS.TEST.CSD'
*                                  D = 'CICS.DEVT.CSD'
*                                  P = 'CICS.PROD.CSD'
ACCTYPE  DS    C                  1 CHAR MNEMONIC OF ACCESS REQUIRED
*                                  A = FULL ACCESS QV 'CEDA'
*                                  B = NO INSTALL  QV 'CEDB'
*                                  C = READ ONLY   QV 'CEDC'
*                                  I = INSTALL WHEN OPEN IN OTHER REG.
OLDOBJ   DS    CL44               OBJECTNAME OF CSD CURRENTLY SET
NEWOBJ   DS    0CL44              OBJECTNAME OF CSD TO USE
         DS    CL5                FILLER - 'CICS.'
CSDNAM   DS    CL4                CSD NAME
         DS    CL35               FILLER - '.CSD     '
ACCESS   DS    CL6                ACCESS WANTED
APPLID   DS    CL8                ASSIGN APPLID HERE
USERID   DS    0CL8               ASSIGN USER ID HERE
GROUPID  DS    CL3                 GROUP ID
         DS    CL5                 FILLER - REST OF ID
         DS    0F                 FORCE FULL WORD ALIGN.
OLDACC   DS    0CL12              CURRENT ACCESS STATUS
OLDADD   DS    F                  CVDA FOR CURRENT ADD STATUS
OLDDEL   DS    F                  CVDA FOR CURRENT DEL STATUS
OLDUPD   DS    F                  CVDA FOR CURRENT UPDATE STATUS
NEWACC   DS    0CL12              WANTED ACCESS STATUS
NEWADD   DS    F                  CVDA FOR WANTED ADD STATUS
NEWDEL   DS    F                  CVDA FOR WANTED DEL STATUS
NEWUPD   DS    F                  CVDA FOR WANTED UPDATE STATUS
STATUS   DS    F                  CVDA FOR OPEN/CLOSE STATUS
TDMSG    DS    0CL120             TRANSIENT DATA MESSAGE TO 'CSDL'
         DS    CL24               FILLER
TDDATE   DS    CL5                DATE
         DS    CL7                FILLER
TDTIME   DS    0CL6               TIME
         DS    CL5                FILLER
TDSEC    DS    C                  LAST BYTE OF SECONDS
         DS    CL9                FILLER
TDSYS    DS    CL4                SYSTEM
         DS    CL7                FILLER
TDTERM   DS    CL4                TERMID
         DS    CL9                FILLER
TDUID    DS    CL8                USERID
         DS    CL6                FILLER
TDCSD    DS    CL4                CSD
         DS    CL9                FILLER
TDACC    DS    CL6                ACCESS
         DS    CL12               FILLER
TDD024   CSECT
         EXEC  CICS HANDLE CONDITION ERROR(BADEXEC)
         EXEC  CICS ASSIGN USERID(USERID) APPLID(APPLID)
         CLC   EIBTRNID(3),=C'CED'  CALLED BY CEDA/B/C ?
         BNE   NOTCED                NO, GO PROCESS OTHER TRANSIDS
         CLC   GROUPID,CCSYS      IS THIS A TDD USERID ?
         BNE   NOTSYS              NO, ACCESS DENIED
         B     PASSON             OK, JUST PASS CONTROL TO 'CEDA'
NOTCED   MVC   NEWOBJ,CSDSKEL     SET UP SKELETON OBJECT NAME OF CSD
         MVC   TRANID,EIBTRNID    MOVE TRANID TO WORK AREA
         CLI   CSDNAME,C'U'       DO WE WANT 'USER'?
         BNE   NOTUSER             NO, GO CHECK FOR 'SYS' UID
         MVC   CSDNAM,CCUSER      COMPLETE NAME OF CSD TO ACCESS
         CLI   ACCTYPE,C'B'       ACCESS TYPE 'B'?
         BNE   NOTB                NO, GO CHECK 'C'
         MVC   EIBTRNID,=C'CEDB'  RESET TRANID TO 'CEDB'
         B     CHEKACC            GO CHECK ACCESS REQUIRED
NOTB     CLI   ACCTYPE,C'C'       ACCESS TYPE 'C'?
         BNE   CHEKACC             NO, GO CHECK ACCESS REQUIRED
          MVC   EIBTRNID,=C'CEDC'  RESET TRANID TO 'CEDC'
         B     CHEKACC            GO CHECK ACCESS REQUIRED
NOTUSER  CLC   GROUPID,CCSYS      IS THIS A TDD USERID ?
         BNE   NOTSYS              NO, ACCESS DENIED
         CLI   CSDNAME,C'T'       DO WE WANT 'TEST'?
         BNE   NOTTEST             NO, GO CHECK FOR 'DEVT' UID
         MVC   CSDNAM,CCTEST      COMPLETE NAME OF CSD TO ACCESS
         B     CHEKACC            GO CHECK ACCESS REQUIRED
NOTTEST  CLI   CSDNAME,C'D'       DO WE WANT 'DEVT'?
         BNE   NOTDEVT             NO, GO CHECK FOR 'PROD' UID
         MVC   CSDNAM,CCDEVT      COMPLETE NAME OF CSD TO ACCESS
         B     CHEKACC            GO CHECK ACCESS REQUIRED
NOTDEVT  CLI   CSDNAME,C'P'       DO WE WANT 'PROD'?
         BNE   NOTCSD              NO, INVALID CSD REQUESTED
         MVC   CSDNAM,CCPROD      COMPLETE NAME OF CSD TO ACCESS
CHEKACC  CLI   ACCTYPE,C'C'       ACCESS TYPE 'C'?
         BE    READACC             YES, GO SET UP READONLY
         CLI   ACCTYPE,C'I'       ACCESS TYPE 'I'?
         BE    READACC             YES, GO SET UP READONLY
         MVC   NEWADD,DFHVALUE(ADDABLE)      SET UP ADD
         MVC   NEWDEL,DFHVALUE(DELETABLE)    SET UP DELETE
         MVC   NEWUPD,DFHVALUE(UPDATABLE)    SET UP UPDATE
         MVC   ACCESS,=C'UPDATE'
         B     CHEKSTAT           GO CHECK CURRENT STATUS
READACC  MVC   NEWADD,DFHVALUE(NOTADDABLE)   SET UP NO ADD
         MVC   NEWDEL,DFHVALUE(NOTDELETABLE) SET UP NO DELETE
         MVC   NEWUPD,DFHVALUE(NOTUPDATABLE) SET UP NO UPDATE
         MVC   ACCESS,=C' READ '
CHEKSTAT EQU   *  ENQUEUE AND CHECK CURRENT STATUS OF DATASET
         EXEC  CICS ENQ RESOURCE(CCDFHCSD) LENGTH(8)
         EXEC  CICS INQUIRE DATASET(CCDFHCSD) OBJECTNAME(OLDOBJ)       +
               ADD(OLDADD) DELETE(OLDDEL) UPDATE(OLDUPD)               +
               OPENSTATUS(STATUS)
         CLC   STATUS,DFHVALUE(CLOSED)     IS IT CLOSED ?
         BE    RESET                        YES, GO AND RESET
         CLC   STATUS,DFHVALUE(OPEN)     IS IT ALREADY OPEN ?
         BNE   NOTSAFE                  NO, UNDETERMINED STATUS, ABORT
         CLC   OLDOBJ,NEWOBJ      SAME DATASET REQUESTED ?
         BNE   NOTSAME             NO, NO CAN DO
         CLC   OLDACC,NEWACC      SAME ACCESS REQUESTED ?
         BNE   NOTACC              NO, NO CAN DO
         B     PASSON             JUST PASS CONTROL TO 'CEDA'
RESET    MVC   TDMSG,SKELTDM      MOVE SKELETON TD MESSAGE TO WORKAREA
         UNPK  TDDATE,EIBDATE     MOVE DATE TO TD MESSAGE
         UNPK  TDTIME,EIBTIME     MOVE TIME TO TD MESSAGE
         OI    TDSEC,X'F0'        MAKE SIGN QUARTET X'F'
         MVC   TDSYS,APPLID       MOVE APPLID TO TD MESSAGE
         MVC   TDUID,USERID       MOVE USERID TO TD MESSAGE
         MVC   TDTERM,EIBTRMID    MOVE TERMID TO TD MESSAGE
         MVC   TDCSD,CSDNAM       MOVE CSD NAME TO TD MESSAGE
         MVC   TDACC,ACCESS       MOVE ACCESS TO TD MESSAGE
         EXEC  CICS WRITEQ TD QUEUE('CSDL') FROM(CCTDMSG) LENGTH(TDLEN)
         EXEC  CICS WRITEQ TD QUEUE('CSDL') FROM(TDMSG) LENGTH(TDLEN)
         EXEC  CICS WRITEQ TD QUEUE('CSDL') FROM(CCTDMSG) LENGTH(TDLEN)
*     CLOSE DATASET TO ENSURE IT IS UNENABLED TO ALLOW CHANGES.
         EXEC  CICS SET DATASET(CCDFHCSD) CLOSED
         EXEC  CICS SET DATASET(CCDFHCSD) OBJECTNAME(NEWOBJ)           +
               ADD(NEWADD) DELETE(NEWDEL) UPDATE(NEWUPD) READABLE      +
               BROWSABLE
PASSON   EQU   *   DEQUEUE AND PASS CONTROL TO 'CEDA'
         EXEC  CICS DEQ RESOURCE(CCDFHCSD) LENGTH(8)
         EXEC  CICS XCTL PROGRAM('DFHEDAP')
         B     RETURN
NOTSYS   EQU   *   SEND MESSAGE - NOT AUTHORISED
         EXEC  CICS SEND TEXT FROM(MSGSYS) LENGTH(MSGLEN) ERASE
         B     RETURN
 NOTCSD   EQU   *   SEND MESSAGE - NOT A CSD
         EXEC  CICS SEND TEXT FROM(MSGCSD) LENGTH(MSGLEN) ERASE
         B     RETURN
NOTSAFE  EQU   *   SEND MESSAGE  -  UNDETERMINED STATUS
         EXEC  CICS SEND TEXT FROM(MSGSAFE) LENGTH(MSGLEN) ERASE
         B     RETURN
NOTSAME  EQU   *   SEND MESSAGE  -  ANOTHER CSD OPEN
         EXEC  CICS SEND TEXT FROM(MSGSAME) LENGTH(MSGLEN) ERASE
         B     RETURN
NOTACC   EQU   *   SEND MESSAGE  -  DIFFERENT ACCESS
         EXEC  CICS SEND TEXT FROM(MSGACC) LENGTH(MSGLEN) ERASE
         B     RETURN
BADEXEC  EQU   * COME HERE IF ANY CICS CALL FAILS AND ABEND WITH DUMP.
         EXEC  CICS DEQ RESOURCE(CCDFHCSD) LENGTH(8)
         EXEC  CICS ABEND ABCODE('TDXX')
RETURN   EQU   *   DEQUEUE DATASET AND RETURN TO CICS
         EXEC  CICS DEQ RESOURCE(CCDFHCSD) LENGTH(8)
         EXEC  CICS RETURN
         LTORG
CCTDMSG  DC    120C'*'            TD MESSAGE HIGH LIGHT
SKELTDM  DS    0CL120             SKELETON TD MESSAGE
         DC    CL40'* * * *    TDD024  DATE(YYMMM) TIME(HHMM'
         DC    CL40'SS) SYSTEM(XXXX) TERM(XXXX) USERID(XXXXX'
         DC    CL40'XXX) CSD(XXXX) ACCESS(XXXXXX)    * * * *'
TDLEN    DC    AL2(L'SKELTDM)     LENGTH OF TD MESSAGE
CSDSKEL  DC    CL44'CICS.    .CSD' SKELETON CSD NAME
CCDFHCSD DC    CL8'DFHCSD'
CCUSER   DC    C'USER'
CCTEST   DC    C'TEST'
CCDEVT   DC    C'DEVT'
CCPROD   DC    C'PROD'
CCSYS    DC    C'SYS'
MSGLEN   DC    AL2(L'MSGSYS)      MESSAGE LENGTH
MSGSYS   DS    0CL65
         DC    X'1103781DF8'      SET BUFFER ADDR. AND ATTRIBUTE
         DC    CL60'TDD024-1   ATTEMPT TO ACCESS UNAUTHORISED CSD'
MSGCSD   DS    0CL65
         DC    X'1103781DF8'      SET BUFFER ADDR. AND ATTRIBUTE
         DC    CL60'TDD024-2   ATTEMPT TO ACCESS UNKNOWN CSD'
MSGSAFE  DS    0CL65
         DC    X'1103781DF8'      SET BUFFER ADDR. AND ATTRIBUTE
         DC    CL60'TDD024-3   CSD STATUS IS CHANGING - RETRY LATER'
MSGSAME  DS    0CL65
         DC    X'1103781DF8'      SET BUFFER ADDR. AND ATTRIBUTE
         DC    CL60'TDD024-4   ANOTHER CSD IS OPEN - RETRY LATER'
MSGACC   DS    0CL65
         DC    X'1103781DF8'      SET BUFFER ADDR. AND ATTRIBUTE
         DC    CL60'TDD024-5   ACCESS NOT AVAILABLE - RETRY LATER'
         END


Garry Barker
Senior System Programmer
Woolwich Equitable Building Society (UK)     ) WEBS 1988












