 Tips for ADS users
ADS is a debugging package for CICS systems.  Like other packages of its type it
allows the user to set breakpoints, trap abends, examine working data, and
direct program flow.  I have found it to be effective and reliable.  However,
certain TtricksU must be kept in mind, particularly by COBOL programmers using
the Source Level Option:
1    If a data name appears alone on a line in the Procedure Division, followed
by a period, you will not be able to examine the data using the LABEL keyword.
ADS interprets the name as a paragraph name, and will display a portion of the
programUs executable code!  For example, if the following statement appears in a
program, an attempt to exhibit LABEL=BONUS-PAY will result in the display of the
executable code following the COMPUTE statement:
     COMPUTE TOTAL-SALARY = REGULAR-SALARY + OT-SALARY +
                            BONUS-PAY.
2    Use COBOLUs COPY...SUPPRESS with caution.  It may result in LABEL NOT FOUND
on every data item except those in the suppressed COPY.  ADS reads the computer
listing to find the offsets for all data items.  These are found conventionally
in the Data Division Map (DMAP) following the source program listing.  Certain
compilers/optimisers permit a Tmerged data mapU, which places the offset for
each item alongside its entry in the Data Division portion of the source
listing.  The difficulty arises when a merged data map is specified along with
COPY SUPPRESS.  Data items within the COPY are not affected by the merge; their
offsets continue to appear in the DMAP following the source listing.  ADS will
find only these items correctly.  It will disregard the data items in the merged
data map.
3    COBOL Tspecial registersU, eg RETURN-CODE and TALLY, cannot be accessed by
name.  However, they are available in the TGT, which is addressed by register
13.  The offsets are listed in the Memory Map portion of the compilation
listing.  Consequently, they may be viewed using the OPR keyword.  For example,
LABEL=RETURN-CODE is invalid, but OPR=D05C will correctly display the RETURN-
CODE register.
4    Index-names are also available in the TGT.  However, a fairly tedious
process is involved.  I have found it preferable to use subscripts while
debugging a program, and switch to the more efficient indexes when it is fairly
clean.  Should it be necessary to find the value of an index-name, do the
following:
     a    Find the definition of the index in the Data Division Map.  Alongside
it will be a compiler-generated entry showing which index cell will be used.
Indexes are numbered sequentially: INDEX=1, INDEX=2, etc.
     b    Find INDEX CELLS in the Memory Map portion of the compilation listing.
The offset in the TGT RELATIVE column will address INDEX=1.  Add 4 bytes for
each subsequent index.  For example, if you are looking for INDEX=6, and INDEX
CELLS begins at offset 0260, add 4 * 5 = 20 bytes, giving offset 0274.
     c    Using the offset calculated in step (b), use the OPR keyword to
display the current value of the index.  (In the example above, you would use
OPR=0274.)
     d    The first four bytes displayed will give the current offset into your
table.  Divide this number by the length of a single table entry, then add 1.
This will give the current occurrence number.  If you want to see the actual
data in that occurrence, you can use the offset directly in the LABEL command.
For example, assume the table in question looks like this:
          /1 PURCHASE-HISTORY    OCCURS 12 TIMES
                                 INDEXED BY PURCHASE-INDEX.
             /2 NUMBER-OF-PURCHASES   PIC 999.
             /2 VALUE-OF PURCHASES    PIC 9(9)V99.
     If the offset into the table is displayed as 0000002A (decimal 42), you can
view the current table entry by entering:
     LABEL=PURCHASE-HISTORY+2A
     The leading zeroes are not required.  Noting that each table entry has a
length of 14 bytes, you can calculate the current value of PURCHASE-INDEX =
(42/14) + 1 = 4.
5    The message LOAD MODULE IS OUT-DATED is often misleading.  It can also mean
that the source module is outdated.
6    The message INVALID OPTION FOR ADSFILE can sometimes be cleared up by
simply using CEMT to close, then open, the ADSFILE dataset.

 Monte Aronson
Consultant
SEI Information Technology (USA)   ) Xephon 1988































































