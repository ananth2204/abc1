Apparent loss of DFHCOMMAREA

I read the articles in the February 1989 and November 1989
issues of CICS Update on the apparent loss of the
DFHCOMMAREA.  We encountered the same problem but
had a different solution.  As was stated in the February article,
the problem occurs when COBOL generates an MVCL
instruction to do the move and there is a destructive overlap in
the sending and receiving fields.  To rectify this problem we
wrote an Assembler subroutine that executes the MVCL based
on the length in EIBCALEN.  The following program is part of
a multi-function utility.  I have just copied the code that is
applicable to this problem.  The program requires four
parameters (the fifth and sixth parameters are optional).  The
parameters are:

1   The character 'M' PIC X
2   Address of the sending field
3   Address of the receiving field
4   Length of the sending field PIC S9(4) COMP
5   Length of the receiving field (optional) PIC S9(4) COMP
6   Fill character (required with parameter 5) PIC X.

SOURCE CODE

OLLWUTL1 CSECT 0
         SAVE (14,12)
         BALR  R12,R0
         USING *,R12
         ST    R13,SAVEAREA+4
         LA    R13,SAVEAREA
         B     BEGIN
SAVEAREA DC    18F'0'
         DC    C'SAVEPARM'
SAVEPARM DC    F'0'
BEGIN    DS    0H
         ST    R1,SAVEPARM             SAVE PARM ADDRESS
         L     R2,0(R0,R1)             LOAD 1ST PARM
         CLI   0(R2),C'M'              MOVE DATA?
         BE    MOVERTN                  YES - GO TO MOVERTN
         B     GOBACK                  EXIT PROGRAM
MOVERTN  DS    0H
         ICM   R2,15,4(R1)             LOAD 2ND PARM
         BM    MOVEERR                 IF LAST THERE IS A PROBLEM
         ICM   R4,15,8(R1)             LOAD 3RD PARM
         BM    MOVEERR                 IF LAST THERE IS A PROBLEM
         L     R15,12(R0,R1)           LOAD 4TH PARM (LENGTH)
         LH    R3,0(R0,R15)            MOVE LENGTH TO R3
         LTR   R5,R3                   AND R5
         BM    MOVEERR                 IF NEGATIVE WE GOT PROBLEMS
         LTR   R15,R15                 IS 4TH THE LAST PARM
         BM    MOVEIT                   - YES GO MOVEIT
         L     R15,16(R0,R1)           LOAD 5TH PARM
         LH    R5,0(R0,R15)            RECEIVING LENGTH INTO R5
         L     R15,20(R0,R1)           LOAD 6TH PARM
         ICM   R3,B'1000',0(R15)       FILL CHARACTER IN R5
MOVEIT   DS    0H
         MVCL  R4,R2                   MOVE DATA
         B     GOBACK                  EXIT
MOVEERR  DS    0H
         MVC   MOVEMSG,=C'MOVE ERROR PARM1=XXXX PARM2=XXXX PARM3=XXXX LC
               ENGTH=XXXX'
         MVC   MOVEMSG+17(4),4(R1)
         MVC   MOVEMSG+28(4),8(R1)
         MVC   MOVEMSG+39(4),12(R1)
         STCM  R5,15,MOVEMSG+51
         B     GOBACK
MOVEMSG  DC    CL55' '
GOBACK   DS    0H
         L     R13,SAVEAREA+4
         RETURN (14,12)
         END

The calling program would contain the following code:

       WORKING-STORAGE SECTION.
       77  MOVE-ACT                    PIC X VALUE 'M'.
       01  WS-COMMAREA.
       .
       .
       PROCEDURE DIVISION.
       IF EIBCALEN IS POSITIVE
           CALL 'OLLWUTL1' USING MOVE-ACT DFHCOMMAREA WS-COMMAREA
               EIBCALEN.


Paul Moore
On-line System Development
Computer Power Inc (USA) ) Computer Power Inc 1990


