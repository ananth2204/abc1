CICS debugging using IPCS

The Interactive Problem Control System (IPCS) has been one
of the most effective tools for MVS systems programmers to
debug various software errors. Compared with browsing
through hard copy dumps (on paper), IPCS is several times
more economical and is faster too. Navigating through the
dump is facilitated via direct or relative addressing.

CICS, unfortunately by default, uses its own debugging and
dump formatting tool (the more popular DFHDUP program) for
its problem determination. From experience, this utility has
been adequate for relatively simple debugging tasks such as
transaction abends. For more complex problems, however,
such as system hangs and storage violations, the more
sophisticated IPCS is recommended.

To enable the use of IPCS instead of DFHDUP, additional
customization effort is required as documented in the CICS
Problem Determination Guide and the CICS Operations and
Installation Guide. The main, and probably the most difficult,
activity in this is setting up the MVS system to include all the
necessary CICS-related data areas and control blocks in the
SDUMP parameter, such as ALLPSA, CSA, GRSQ, LPA,
NUC, RGN, SQA, SUMDUMP, and TRT. This can be done
dynamically through the MVS console CD (CHNGDUMP)
SET command or statically in the SYS1.PARMLIB member
IEADMPxx. Some CICS tables will also have to be modified,
such as the DUMP and SVD parameters in the SIT.

Once enabled, CICS systems programmers accustomed to
DFHDUP facilities need not panic. IPCS can still format the
MVS dumps in a similar, if not better, fashion than DFHDUP
through the IPCS verb exit, DFHPDX, made available through
APAR PL18949. The exit module will be supplied in the
LOADLIB dataset. This target library has to be concatenated in
the ISPLLIB DD in ISPF or TSO log-on procedure. The exit
module also has to be defined in the SYS1.PARMLIB member
BLSCECT, such as:

      EXIT  EP(DFHPDX)  VERB(CICSDATA)

For more information and instructions in using this IPCS exit,
refer to the documentation provided in the above mentioned
APAR.

A TSO/IPCS CLIST, CICSEQU, supplements the formatting
provided by the exit module DFHPDX. The CLIST equates
symbolics of major and commonly accessed CICS control
blocks to real addresses. The IPCS LIST command can then be
invoked using the symbolics instead of the actual address to
display the contents. Compared with hexadecimal addresses,
symbolics are much easier to remember, for example:

o      CSA - CICS Common System Area
o      CSAOPFL - CSA Optional Feature List
o      USRTCA - User Task Control Area
o      SYSTCA - System Task Control Area
o      TCT - Active terminal at time of dump
o      PCT - Active transaction at time of dump
o      PPT- Active program at time of dump
o      TASKNO - Active task number at time of dump
o      TIOA - Terminal I/O area
o      EIS - Exec Interface Storage
o      EIB - Exec Interface Block
o      COMMAREA - Program Communication Area
o      WKSTG - COBOL Working Storage Area.
In addition, the CLIST queries the reason for the dump from
the title and attempts to equate additional symbolics, as
follows:

o      For program checks or ASRA/ASRB abend dumps:
      -      PCABTRTH - Program Check/Abend Trace Table Header
      -      PCABTRT - PC/AB current trace entry
      -      PCABREGS - PC/AB current trace entry registers
      -      PCABPSW - PC/AB current trace entry PSW
      -      PCABADDR - PC/AB PSW next instruction address
      -      PCABINST - Abended instruction address
      -      PCABDAT1 - Abended instruction operand 1
      -      PCABDAT2 - Abended Instruction operand 2.

o      For storage violation dumps:
      -      PAM - Page Allocation Map
      -      PAMREGS - PAM registers
      -      PAMCODE - PAM storage violation reason code
      -      PAMADDR - PAM overlay area address.


CICSEQU CLIST

The CICSEQU CLIST takes one argument (DSN) for the
dataset name of the MVS SVC dump. This argument is
optional and, if specified, drops and re-initializes all references
to the dump dataset in the IPCS directory. Otherwise, the
CLIST defaults to the current dump dataset name in the IPCS
directory.

The CLIST has been tested from CICS 1.7 up to CICS 2.1.1
with IPCS running under MVS/SP Version 1 up to MVS/XA
2.2.

PROC 0 DSN()
CONTROL NOFLUSH END(ENDO) MSG
WRITE **** CICS EQUATES CLIST ENTERED ****
IF &LENGTH(&STR(&DSN)) > 0 THEN +
   DO
     DROPD DSN('&DSN')
     SETD  DSN('&DSN')
   ENDO
/*--  MAJOR CONTROL BLOCKS  -----------------------------------------*/
/*--  CSA = PSAAOLD > ASCB > ASXB > TCB > TCBEXT2 > AFCB  -----------*/
EQU CSA     224.%+6C%+8%+D0%+14%+8% REMARK('COMMON SYSTEM AREA     ')
EQU CSAOPFL  CSA+C8%                REMARK('CSA OPTIONAL FEATURES  ')
EQU USRTCA   CSA+4C%                REMARK('USER TASK CONTROL AREA ')
EQU SYSTCA   USRTCA+0%              REMARK('SYS  TASK CONTROL AREA ')
EQU TCT      USRTCA+8%              REMARK('TERMINAL (TCT) ENTRY   ')
EQU PCT      SYSTCA+14%             REMARK('TRANSACTION (PCT) ENTRY')
EQU PPT      SYSTCA+34%             REMARK('PROGRAM (PPT) ENTRY    ')
EQU TASKNO   SYSTCA+11              REMARK('TASK NUMBER            ')
/*   DISPLAY COMMON CONTROL BLOCKS FOR INITIAL DEBUGGING             */
LIST TITLE
LIST CSA    LENGTH(16)
LIST PCT    LENGTH(16)
LIST PPT    LENGTH(16)
LIST TCT    LENGTH(16)
LIST TASKNO LENGTH(16)
/*--  APPLICATION STORAGE AREAS  ------------------------------------*/
EQU TIOA     TCT+C%                 REMARK('TERMINAL I/O AREA      ')
EQU EIS      SYSTCA+7C%             REMARK('EXEC INTERFACE STORAGE ')
EQU EIB      EIS+148%               REMARK('EXEC INTERFACE BLOCK   ')
EQU COMMAREA EIS+B8%                REMARK('COMMUNICATIONS AREA    ')
EQU WKSTG    EIS+C0%                REMARK('COBOL WORKING STORAGE  ')
/*--  CICS DUMP REASON CODE  ----------------------------------------*/
EVAL TITLE+39                                                        +
     CHARACTER LENGTH(4)                                             +
     CLIST(STORAGE(DUMPRSON))
/*--  PROGRAM CHECK/ABEND DEBUGGING INFORMATION  --------------------*/
EQU  PCABTRTH CSAOPFL+1D4%          REMARK('PC/ABEND TRACE HEADER  ')
EVAL PCABTRTH+2C                                                     +
     SIGNED      LENGTH(4)                                           +
     CLIST(STORAGE(PCABPCNO))
EVAL PCABTRTH+30                                                     +
     SIGNED      LENGTH(4)                                           +
     CLIST(STORAGE(PCABABNO))
SET &PCABCTR = &PCABPCNO + &PCABABNO
IF  &PCABCTR > 0 THEN                                                +
    DO
      EVAL PCABTRTH+20                                               +
           HEXADECIMAL LENGTH(4)                                     +
           CLIST(STORAGE(PCABNEXT))
      EVAL PCABTRTH+24                                               +
           HEXADECIMAL LENGTH(4)                                     +
           CLIST(STORAGE(PCABSTRT))
      IF  &PCABNEXT = &PCABSTRT THEN                                 +
          SET PCABLAST = 28
      ELSE                                                           +
          SET PCABLAST = 20
      EQU PCABTRT  PCABTRTH+&PCABLAST.%-80                           +
                   REMARK('PC/ABEND TRACE ENTRY          ')
      EQU PCABREGS PCABTRTH+&PCABLAST.%-80+30                        +
                   REMARK('PC/ABEND REGISTERS            ')
      EQU PCABPSW  PCABTRTH+&PCABLAST.%-80+70                        +
                   REMARK('PC/ABEND PSW INFO             ')
      EQU PCABADDR PCABTRTH+&PCABLAST.%-80+74%                       +
                   REMARK('PC/ABEND NEXT INSTRUCTION ADDR')
    ENDO
ELSE                                                                 +
    DO
      SET PCABLAST = 20
      EQU PCABTRT  PCABTRTH+20%                                      +
                   REMARK('PC/ABEND TRACE HAS NO VALID ENTRIES  ')
      EQU PCABREGS PCABTRTH+20%30                                    +
                   REMARK('PC/ABEND TRACE HAS NO VALID REGISTERS')
      EQU PCABPSW  PCABTRTH+20%+70                                   +
                   REMARK('PC/ABEND TRACE HAS NO VALID PSW INFO ')
      EQU PCABADDR PCABTRTH+20%+74%                                  +
                   REMARK('PC/ABEND TRACE HAS NO VALID INS ADDR ')
    ENDO
/*   EVALUATE PC/ABEND TRACE TYPE FOR ASRA/ASRB ABENDS               */
IF '&SUBSTR(1:4,&DUMPRSON)' NE 'ASRA' AND                            +
   '&SUBSTR(1:4,&DUMPRSON)' NE 'ASRB' THEN                           +
   GOTO PAMCHK
EVAL PCABTRT                                                         +
     CHARACTER LENGTH(2)                                             +
     CLIST(STORAGE(PCABTYP))
IF '&SUBSTR(1:2,&PCABTYP)' = 'PC' OR                                 +
   '&SUBSTR(1:2,&PCABTYP)' = 'AB' THEN                               +
   DO
     EVAL PCABTRTH+&PCABLAST.%-C                                     +
          SIGNED LENGTH(4)                                           +
          CLIST(STORAGE(PCABIADR))
     EVAL PCABTRTH+&PCABLAST.%-8                                     +
          SIGNED LENGTH(2)                                           +
          CLIST(STORAGE(PCABWLIC))
     EVAL PPT+C                                                      +
          SIGNED LENGTH(4)                                           +
          CLIST(STORAGE(PPTLP))
     EVAL PPT+14                                                     +
          SIGNED LENGTH(4)                                           +
          CLIST(STORAGE(PPTEPOFS))
     SET &PCABINSX = &PCABIADR - &PCABWLIC
     SET &PPTEPX   = &PPTLP    + &PPTEPOFS
     SET &PCABOFSX = &PCABINSX - &PPTEPX
     INTEGER &PCABOFSX                                               +
          CLIST(STORAGE(PCABOFS))
     INTEGER &PCABINSX                                               +
          CLIST(STORAGE(PCABINST))
     INTEGER &PPTEPX                                                 +
          CLIST(STORAGE(PPTEP))
     EQU  PCABINST PCABADDR-&PCABWLIC                                +
          REMARK('ABENDED INSTRUCTION ADDR, OFFSET FROM EP = &PCABOFS')
     LIST PCABTRT    LENGTH(32)
     LIST PCABREGS   LENGTH(64)
     LIST PCABPSW    LENGTH(16)
     LIST PCABINST   LENGTH(16)
     EVAL PCABINST                                                   +
          HEXADECIMAL LENGTH(6)                                      +
          CLIST(STORAGE(PCABINS0))
     IF  &PCABWLIC > 2 THEN                                          +
         DO
           SET PCABD1X = &SUBSTR(6:8,&PCABINS0)
           SET PCABR1X = &SUBSTR(5:5,&PCABINS0)
           IF &PCABR1X = A THEN                                      +
              SET PCABR1 = 10
           ELSE                                                      +
              IF &PCABR1X = B THEN                                   +
                 SET PCABR1 = 11
              ELSE                                                   +
                 IF &PCABR1X = C THEN                                +
                    SET PCABR1 = 12
                 ELSE                                                +
                    IF &PCABR1X = D THEN                             +
                       SET PCABR1 = 13
                    ELSE                                             +
                       IF &PCABR1X = E THEN                          +
                          SET PCABR1 = 14
                       ELSE                                          +
                          IF &PCABR1X = F THEN                       +
                             SET PCABR1 = 15
                          ELSE                                       +
                             SET PCABR1 = &PCABR1X
           SET  PCABR1  = 80 - (&PCABR1 * 4)
           INTEGER &PCABR1                                           +
                   CLIST(STORAGE(PCABR1O)
           EQU  PCABDAT1 PCABTRTH+&PCABLAST.%-&PCABR1O.%+&PCABD1X.    +
                REMARK('OPERAND 1, ADDR:OFFSET=&PCABD1X(REG=&PCABR1X)')
           LIST PCABDAT1  LENGTH(16)
         ENDO
     IF  &PCABWLIC > 4 THEN                                          +
         DO
           SET PCABD2X = &SUBSTR(10:12,&PCABINS0)
           SET PCABR2X = &SUBSTR(9:9,&PCABINS0)
           IF &PCABR2X = A THEN                                      +
              SET PCABR2 = 10
           ELSE                                                      +
              IF &PCABR2X = B THEN                                   +
                 SET PCABR2 = 11
              ELSE                                                   +
                 IF &PCABR2X = C THEN                                +
                    SET PCABR2 = 12
                 ELSE                                                +
                    IF &PCABR2X = D THEN                             +
                       SET PCABR2 = 13
                    ELSE                                             +
                       IF &PCABR2X = E THEN                          +
                          SET PCABR2 = 14
                       ELSE                                          +
                          IF &PCABR2X = F THEN                       +
                             SET PCABR2 = 15
                          ELSE                                       +
                             SET PCABR2 = &PCABR2X
           SET  PCABR2  = 80 - (&PCABR2 * 4)
           INTEGER &PCABR2                                           +
                   CLIST(STORAGE(PCABR2O)
           EQU  PCABDAT2 PCABTRTH+&PCABLAST.%-&PCABR2O.%+&PCABD2X.    +
                REMARK('OPERAND 2, ADDR:OFFSET=&PCABD2X(REG=&PCABR2X)')
           LIST PCABDAT2  LENGTH(16)
         ENDO
     LIST &PPTEP..    LENGTH(48)                                      +
                     REMARK('ABENDED PROGRAM ENTRY POINT ADDR      ')
     LIST PPT+C%     LENGTH(16)                                      +
                     REMARK('ABENDED PROGRAM LOAD POINT ADDR       ')
   ENDO
/*--  STORAGE VIOLATION DUMP DEBUGGING INFORMATION  -----------------*/
PAMCHK:                                                              +
EQU PAM      CSA+98%                REMARK('PAGE ALLOCATION MAP    ')
EQU PAMREGS  PAM+108                REMARK('PAM REGISTERS          ')
EQU PAMCODE  PAM+150                REMARK('PAM INTERRUPT CODE     ')
EQU PAMADDR  PAM+154%               REMARK('PAM OVERLAY AREA ADDR  ')
/*   EVALUATE PAGE ALLOCATION MAP (PAM) FOR STORAGE VIOLATION DUMPS  */
IF '&SUBSTR(1:4,&DUMPRSON)' NE '0501' AND                            +
   '&SUBSTR(1:4,&DUMPRSON)' NE '0504' THEN                           +
   GOTO LSTSYM
EVAL PAMCODE                                                         +
     HEXADECIMAL LENGTH(2) POSITION(2)                               +
     CLIST(STORAGE(PAMECINT))
IF &PAMECINT > 0 THEN                                                +
   DO
     EVAL PAM+154                                                    +
          HEXADECIMAL LENGTH(4)                                      +
          CLIST(STORAGE(PAMERADR))
     EVAL PAM+70                                                     +
          HEXADECIMAL LENGTH(4)                                      +
          CLIST(STORAGE(PAMPGSZE))
     SET  PAMOFSET = &PAMERADR / &PAMPGSZE
     EVAL PAM+7C%+&PAMOFSET                                          +
          HEXADECIMAL LENGTH(1)                                      +
          CLIST(STORAGE(PAMSTORC))
IF &PAMSTORC = 01 THEN                                               +
   DO
     SET PAMSTGCL = CONTROL
     SET PAMFQOFS = 00                                  /* EQ X'00' */
   ENDO
ELSE                                                                 +
   IF &PAMSTORC = 02 THEN                                            +
      DO
        SET PAMSTGCL = TP
        SET PAMFQOFS = 16                               /* EQ X'10' */
      ENDO
   ELSE                                                              +
      IF &PAMSTORC = 04 THEN                                         +
         DO
           SET PAMSTGCL = TASK
           SET PAMFQOFS = 48                            /* EQ X'30' */
         ENDO
      ELSE                                                           +
         IF &PAMSTORC = 05 THEN                                      +
            DO
              SET PAMSTGCL = SHARED
              SET PAMFQOFS = 64                         /* EQ X'40' */
            ENDO
         ELSE                                                        +
            IF &PAMSTORC = 06 THEN                                   +
               DO
                 SET PAMSTGCL = RPL
                 SET PAMFQOFS = 80                      /* EQ X'50' */
               ENDO
            ELSE                                                     +
               IF &PAMSTORC = 08 THEN                                +
                  DO
                    SET PAMSTGCL = PROGRAM
                    SET PAMFQOFS = 96                   /* EQ X'60' */
                  ENDO
               ELSE                                                  +
                  DO
                    SET PAMSTGCL = UNALLOCATED
                    SET PAMFQOFS = 99                   /* INVALID  */
                  ENDO
EVAL PAMADDR                                                         +
     SIGNED LENGTH(2) POSITION(2)                                    +
     CLIST(STORAGE(PAMADRLN))
SET &PAMADRLN = &PAMADRLN + 8
LIST PAM               LENGTH(16)
LIST PAMREGS           LENGTH(64)
LIST PAMCODE           LENGTH(16)
LIST PAM+7C%+&PAMOFSET LENGTH(16)                                    +
     REMARK('PAM ADDR SUBPOOL ALLOC = &PAMSTGCL')
LIST PAMADDR           LENGTH(&PAMADRLN)
IF &PAMFQOFS < 99 THEN                                               +
   DO
     EVAL CSA+98                                                     +
          SIGNED LENGTH(4)                                           +
               CLIST(STORAGE(PAMSTART))
          SET PAMFAQEX = &PAMSTART + &PAMFQOFS
          INTEGER &PAMFAQEX                                          +
                  CLIST(STORAGE(PAMFAQE))
          RUNC ADDR(&PAMFAQE..) LINK(4) LENGTH(16)                   +
               REMARK('PAM FAQE CHAIN FOR SUBPOOL = &PAMSTGCL')
        ENDO
   ENDO
LSTSYM:                                                              +
SETD LENGTH(2048)
LISTSYM


Pedronilo T Perez
RCG/Information Technology (USA)

