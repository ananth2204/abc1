A dump suppression exit for CICS/ESA

CICS/ESA introduced a dump management capability as part
of the new dump domain.  This long overdue capability allows
unnecessary dumps to be suppressed, permits you to request a
system dump or CICS shutdown when specified transaction
dumps are encountered, and lets you control the facility using
CEMT or EXEC CICS SET/INQ commands.  However, this
facility falls short in the area of automating dump management,
specifically in the area of duplicate dump suppression.

When a system or transaction dump request is detected, the
dump domain will either dynamically create a new element in
the system or transaction dump table, or will process/suppress
the dump request based on values found in an already existing
dump table element, which may be present as a result of a
previous dump request or as a result of a CEMT or EXEC
CICS SET dump management request.  If CICS creates a new
element, this element will not have any dump limit specified
(CEMT will show such an element as having a limit of 999
dumps, but 999 in fact means 'no limit').  On the other hand,
you can use CEMT or EXEC CICS SET commands to create
(or modify existing) elements in the dump tables, as well as to
specify a dump limit from 0 to 998, or 999 (no limit).

The hole in the above process is that you cannot simply tell
CICS to suppress all duplicate dumps.  Yet the ability to
simply suppress duplicate dumps automatically is exactly what
CICS installations require the most!

Within the dump domain is a global exit point, XDUREQ, that
is driven whenever a dump request is encountered.  While it is
not a difficult thing to write a program to run at this exit that
will suppress all dumps, it becomes more complex if you want
to suppress duplicate dumps, because you must keep track in
the exit, of whether or not this is the first or subsequent request
for a given dump code.  CICS does not pass this information to
you when the exit is driven.  In addition, you must write a
service program to administer your exit program, since you
may need to 'unsuppress' certain dump codes, for example if
more than one program is suffering the same dump code, or if
you had a problem that is now corrected and want to reset the
dump limit.  You can use CEMT for these administrative-type
functions only if you use CEMT to control suppression of the
dumps, which in most cases will require manual intervention.

My approach was to use the exit to suppress duplicate dumps,
but to do so by manipulating the information in the CICS-
maintained dump table elements.  Since CICS dynamically
creates the dump table elements prior to invoking the
XDUREQ exit you can effectively use the CICS-supplied dump
suppression facility by simply changing the CICS-supplied
default dump limit from 'no limit' to a value of your choosing
by using a global variable in the program, &MAXDUMP,
which is set to default to '1'.  This tells the exit to take one
dump and suppress all subsequent requests.  If I set
&MAXDUMP to '0', all transaction dumps will be suppressed.
Basically, this gives me the ability to administer the dump
suppression exit using the CICS-supplied CEMT dump
management commands.  There are several advantages to this
approach:

o      I do not need to write a PLTPI program to suppress
      needless dumps.  I will never get more dumps for any one
      dump code than the limit specified in the exit, so why
      worry about it.

o      I do not have to use CEMT manually to tell CICS to
      suppress dumps I deem unnecessary.

o      I can still use CEMT to override the exit program, raising
      or lowering the limit for any given dump code based on the
      need to, for example, capture additional dumps,
      eliminating the need to write my own dump management
      transaction.

o      I can still use the other dump control features of CEMT,
      such as requesting that a system dump be taken for certain
      transaction codes should the need arise, without the need to
      disable the exit or have special handling in the exit, or
      having to write my own dump management transaction.

In addition, the exit will optionally suppress AP0001 system
dumps, which CICS will produce as a result of any program
check (such as an ASRA transaction abend).  Most installations
will choose to suppress these dumps, and even if you do
choose to do so by specifying a zero value for global
&APDMAX when you assemble this program, you can still
override it using CEMT should the need arise.

To install this program, simply select your values for the
&MAXDUMP and &APDMAX global variables and assemble
the program.  Be sure to link-edit the program AMODE=31,
RMODE=ANY.  Add the program, XDUSUP, to the PPT
(LANGUAGE=ASSEMBLER,RES=YES).  Also you will need
a PLTPI phase two program to enable the program at the dump
request exit point with the following command:

      EXEC CICS ENABLE PROGRAM(XDUSUP) EXIT(XDUREQ) START

Finally, note that no system dumps, other than AP0001 dumps,
are affected by the exit program.  I did not think it was
appropriate to suppress CICS system dumps, as they are
usually necessary.  And because of the way the exit program
works, you cannot use CEMT to create a dump table element
with a limit of 999 (that is, no limit).  Should you do so, the
exit program will change the limit to the value specified by you
with the &MAXDUMP variable in the program.  Your range
for dumps using CEMT is 0 to 998, which ought to be plenty.
If you do need more, you can always delete the dump table
entry with CEMT or disable the exit program using CECI.


PROGRAM SOURCE CODE

         TITLE 'CICS/ESA SYSTEM/TRANSACTION DUMP SUPPRESSION EXIT'
         GBLA  &DUMPMAX
&DUMPMAX SETA  1                   <== TRANSACTION DUMP LIMIT
         GBLA  &APDMAX
&APDMAX  SETA  0                   <== AP0001 SYSTEM DUMP LIMIT
         DFHUEXIT TYPE=EP,ID=(XDUREQ)
* MODULE NAME: XDUSUP                                                 *
* MODULE TYPE: RENT, AMODE=31, RMODE=ANY                              *
* MODULE LANGUAGE: ASSEMBLER                                          *
* MODULE SIZE: 224 BYTES                                              *
* DESCRIPTIVE NAME: CICS/ESA DUMP SUPPRESSION EXIT PROGRAM.           *
* STATUS: CICS/ESA 3.1.1                                              *
* NOTE: THIS PROGRAM MUST BE LINK-EDITED "AMODE=31,RMODE=ANY".        *
*       THIS PROGRAM EXAMINES AND MODIFIES "PRODUCT SENSITIVE" AREAS  *
*       OF CICS. THESE INCLUDE:                                       *
*          KCB    - KERNAL ANCHOR BLOCK                               *
*                   KERNAL DOMAIN VECTOR TABLE                        *
*                   DU_DOMAIN VECTOR TABLE ENTRY                      *
*          DUA    - DU_DOMAIN ANCHOR BLOCK                            *
*                   DU_ANCHOR TRANSACTION DUMP TABLE CHAIN POINTERS   *
*          DTE    - DUMP TABLE ELEMENT FORWARD CHAIN POINTER          *
*                   "DUMPCODE" FIELD IN DUMP TABLE ELEMENT            *
*                   "MAX_DUMP" FIELD IN DUMP TABLE ELEMENT            *
*       SINCE DSECTS ARE NOT PROVIDED FOR THESE AREAS THERE ARE       *
*       EQUATES AT THE END OF THE PROGRAM FOR EACH FIELD REFERENCED.  *
*       THESE MAY NEED ADJUSTMENT PERIODICALLY WHEN PTF MAINTAINANCE  *
*       IS APPLIED OR CICS IS UPGRADED TO A NEW RELEASE.              *
XDUSUP   CSECT
         STM   R14,R12,12(R13)           SAVE CALLER'S REGISTERS
         USING XDUSUP,R15                SET MODULE ADDRESSIBILITY
         USING DFHUEPAR,R1               SET UEP ADDRESSABILITY
         XC    16(4,R13),16(R13)         INITIALIZE RETURN CODE
*        LOCATE THE CICS DUMP DOMAIN ANCHOR BLOCK.
L00100   DS    0H
         DFHAFCD TYPE=LOCATE,CB=KCB,REG=R2
         LA    R2,KCB_DOMAIN_VECTOR(,R2) ADDRESS DOMAIN VECTOR TABLE
         L     R2,DU_DOMAIN_INDEX*4(,R2) FIND DU_DOMAIN VECTOR TBL ENT.
         L     R2,DU_DOMAIN_ANCHOR(,R2)  ADDRESS OF DU_ANCHOR
         CLC   2(12,R2),=C'>DFHDUANCHOR' DU_DOMAIN ANCHOR FOUND?
         BNE   L09999                    ..NO  - ERROR
*        LOCATE THE CICS DUMP TABLE ELEMENT FOR THIS DUMP CODE. SINCE
*        THE EXIT IS INVOKED AFTER THE ELEMENT IS CREATED WE SHOULD
*        ALWAYS FIND ONE, EVEN ON THE FIRST DUMP OF THE DAY.
         L     R4,UEPDUMPC               ADDRESS DUMP CODE
         L     R5,UEPDUMPT               ADDRESS DUMP TYPE AREA
         CLI   0(R5),UEPDSYST            SYSTEM DUMP?
         BNE   L00200                    ..NO  - USE TRAN DUMP TABLE
         CLC   0(8,R4),=CL8'AP0001'     "AP0001" SYSTEM DUMP?
         BNE   L09999                    ..NO  - EXIT
         L     R3,DUA_SDTFIRST(,R2)      ADDRESS HEAD OF SY_DMP CHAIN
         L     R5,DUA_SDTLAST(,R2)       ADDRESS END OF SY_DUMP CHAIN
         L     R0,=A(&APDMAX)            LOAD SY_DUMP DEFAULT LIMIT
         B     L00300                    GO SEARCH FOR DUMP TABLE ENTRY
L00200   DS    0H
         L     R3,DUA_TDTFIRST(,R2)      ADDRESS HEAD OF TR_DMP CHAIN
         L     R5,DUA_TDTLAST(,R2)       ADDRESS END OF TR_DUMP CHAIN
         L     R0,=A(&DUMPMAX)           LOAD TR_DUMP DEFAULT LIMIT
L00300   DS    0H
         CLC   DTE_DUMPCODE(8,R3),0(R4)  ENTRY FOR THIS DUMP CODE?
         BE    L00400                    ..YES
         CLR   R3,R5                     ARE WE THROUGH?
         BE    L09999                    ..YES - EXIT
         L     R3,DTE_NEXT(,R3)          ADDRESS NEXT DUMP TABLE ENTRY
         B     L00300                    LOOP
*        IF DUMP TABLE ENTRY CURRENTLY HAS NO LIMIT, ASSIGN IT
*        THE LIMIT WE HAVE CHOSEN.
L00400   DS    0H
         CLC   DTE_MAXIMUM_DUMPS(4,R3),=A(-1)
*                                        ANY LIMIT FOR THIS DUMP CODE?
         BNE   L09999                    ..YES - DON'T MESS WITH IT
         ST    R0,DTE_MAXIMUM_DUMPS(,R3) SET MAX DUMPS TO NEW LIMIT
*        FINALLY, FOR SYSTEM DUMPS THE DUMP TABLE ENTRY IS NOT
*        USED ON THE FIRST INVOCATION, SO IF "APDMAX" WAS SPECIFIED
*        AS ZERO WE WILL HAVE TO SET R15 TO FORCE SUPPRESSION FOR
*        THIS INSTANCE.
L00500   DS    0H
         CLC   0(8,R4),=CL8'AP0001'     "AP0001" DUMP?
         BNE   L09999                    ..NO  - DO NOTHING
         LTR   R0,R0                     WAS SPECIFIED DEFAULT ZERO?
         BNZ   L09999                    ..NO  - DO NOTHING
         MVC   16(4,R13),=A(UERCBYP)     TELL CICS TO SUPPRESS DUMP
         B     L09999                     EXIT
*        RETURN TO CALLER
L09999   DS    0H
         LM    R14,R12,12(R13)           RESTORE CALLER'S REGISTERS
         BR    R14                       RETURN TO CALLER
*        C O N S T A N T S
KCB_DOMAIN_VECTOR    EQU  X'10C'         START OF DOMAIN VECTOR TABLE
DU_DOMAIN_INDEX      EQU  X'0C'          DOMAIN NUMBER OF DUMP DOMAIN
DU_DOMAIN_ANCHOR     EQU  X'10'          ADDRESS OF DOMAIN ANCHOR BLOCK
DUA_TDTFIRST         EQU  X'118'         HEAD OF TRANSACTION DUMP TABLE
DUA_TDTLAST          EQU  X'11C'         END OF TRANSACTION DUMP TABLE
DUA_SDTFIRST         EQU  X'110'         HEAD OF SYSTEM DUMP TABLE
DUA_SDTLAST          EQU  X'114'         END OF SYSTEM DUMP TABLE
DTE_NEXT             EQU  X'00'          NEXT DUMP TABLE ENTRY IN CHAIN
DTE_DUMPCODE         EQU  X'08'          DUMP CODE (IN DUMP TBL ENTRY)
DTE_MAXIMUM_DUMPS    EQU  X'14'          DUMP LIMIT (IN DUMP TBL ENTRY)
         END


Christopher Frank
Lead Systems Programmer
AMEV Data Center (USA)

