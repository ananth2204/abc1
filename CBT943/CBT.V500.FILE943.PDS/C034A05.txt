 Conversational programming considerations
Recently, we had a debate on whether we should run our CICS transactions
conversationally or pseudo-conversationally.  Up to now, we had accepted IBMUs
advice to run pseudo-conversationally.  But what the factors that dictate the
decision were, nobody knew.  To find the answer I had to do a lot of research.
As a result, I have gathered some information from here and there and now it can
be presented here for the benefit of all CICS users.
In a pseudo-conversational transaction, whenever operator communication is
desired, a programmer codes his program as follows in a High Level Language
(HLL):
1    Format the map as desired.
2    SEND MAP (this displays the map on the screen).
3    RETURN control to CICS.  This releases all resources, eg file locks, file
positions, storage, etc.
4    The map is displayed to the operator and he starts filling the screen in
his own time.  During the time he is entering the various fields, CICS is not
waiting for him to finish; for CICS this transaction has practically finished.
There is no resource tied up with this transaction.  The storage it had occupied
up to step 3 has been released and may be in use by another transaction.
5    When the operator has finished filling the screen (and it could be hours
before he does that), he hits the ENTER key.  Now CICS wakes up to this
terminal, allocates storage to the terminal and starts a fresh transaction.
This transaction will hold some storage and other resources until a return to
CICS is performed.
A conversational transaction is coded with the difference that step 3 is
missing.  Therefore, during the time the operator is filling the screen, CICS is
waiting for him with all the resources used by the transaction tied up.  The
storage is tied up and so are the file strings and locks, if any.
ADVANTAGES OF PSEUDO-CONVERSATIONAL TRANSACTIONS
As is obvious from the above discussion, storage is utilised more efficiently.
While the operator is filling the screen, the storage may be used by other
transactions.  The storage becomes a pool from which resources are drawn only
for the time really needed.  That means we can run more transactions compared to
the conversational approach in a given amount of storage.  In many installations
this could be the single deciding factor in favour of a pseudo-conversational
approach.
It is usual to use many distinct transaction-ids, each transaction type handling
a small set of business functions.  Transaction-ids can be switched at each
input from the terminal.  This granularity of transaction-ids enables a more
effective implementation of several aspects of CICS performance and control:
%    Security checking of user against transaction-id.
%    Varying the dispatch priority by transaction type.
%    Grouping transactions into transaction classes, and limiting the number of
a given class in the system concurrently.
%    Collecting performance monitoring data by transaction type.
%    Several DB2 transactions may be matched by many smaller DB2 plans, rather
than using a few large DB2 plans.
This approach ensures that applications do not hold on to a record or other
locks across operator think time.  A pseudo-conversational program will always
be of a modular nature, and will generally have an installation-prescribed
standard layout.
Sync pointing is left to CICS.  CICS automatically performs a sync point at the
end of each transaction, ie at each RETURN to CICS.  There is more flexibility
in providing restart capability from the point of failure rather than from the
start of a sequence of operations.
ADVANTAGES OF CONVERSATIONAL TRANSACTIONS
There is a considerable saving in the amount of code that needs to be written.
There is no need to determine the amount of working data that needs to be
carried forward and to issue the CICS commands to save it, usually in temporary
storage.
Provided that virtual storage constraints do not apply, there is a corresponding
reduction in CPU and I/O time spent doing these housekeeping operations.  The
resulting application code is far more compact, and less error-prone to write
and maintain.
However, there are a few additional responsibilities that fall on the programmer
of conversational transactions.  He must issue CICS sync points if necessary at
 each CONVERSE in the transaction and ensure that the transaction does not hold
onto the resources that may affect execution performance.
SPECIAL CONSIDERATIONS FOR CSP/AD
While the above discussion holds good for any CICS transaction the following
considerations apply for CICS transactions written in CSP/AD.
With CSP, the terminology is slightly extended by IBM.  A pseudo-conversational
transaction is called a TsegmentedU transaction and a conversational one is
called Tnon-segmentedU.  The term TsegmentationU refers to making a transaction
segmented, ie pseudo-conversational.  An application in CSP may be considered
the equivalent of a program in an HLL implementation.
An important point is that with CSP applications, segmentation becomes an
implementation option and does not affect the way the application is coded.  You
always write a CSP application as though it will run conversationally.  Code is
compact and easy to maintain, sync points are inserted by CSP as necessary, and
work areas are automatically saved and restored by CSP using CICS temporary
storage.
Note, however, that CSP must take a generalised approach to this saving and
restoring of application work areas.  The overhead in this work is generally a
lot heavier with CSP (and other 4GLs) than when the programmer selects what is
necessary to carry forward.  Segmentation typically adds about half a second to
response times and a further 33% to the CPU cost of each message pair.  It can
be more.
In a CSP implementation, whether segmented or not, it is possible to set up
different applications to run under different transaction-ids, but a special and
somewhat artificial technique must be used.  I have described it later in the
section Switching CICS transaction-ids in CSP applications.
It is also possible to implement a CSP system so that it functions in a similar
way to the traditional pseudo-conversational style used with an HLL
implementation, where a transaction-id can be changed on any input.  This
requires segmenting the CSP application, and a particular implementation
technique is described later in this article.
MVS/XA CONSIDERATIONS
The introduction of full XA support for CSP appplications in CSP Version 3
requires a re-evaluation of whether conversational or segmented (ie pseudo-
conversational) execution of CSP applications running above 16Mb is to be
recommended.
Prior to CSP Version 3 the recommendation has been to run CSP applications as
segmented.  This has been to conserve virtual storage in the CICS Dynamic
Storage Area (DSA), especially as by conserving virtual storage in this way more
CSP applications could then be made resident.
With CSP Version 3 and MVS/XA there is a lot of storage available above 16Mb for
the applications to be made resident.  The arguments for and against running the
applications segmented need to be explored with this in mind.
Under MVS/XA, CSP applications may run wholly above 16Mb.  While this is largely
true, there are still some virtual storage requirements that must be satisfied
from the CICS DSA below 16Mb.  CSP will use about 4K of DSA per transaction,
there are the DCA and TCA control blocks, a TIOA is held, and a few more small
areas may be required.  This may amount to about 12K of storage, held for the
life of the CSP transaction.
From the points already made the following main considerations emerge for CSP
Version 3 transactions running under MVS/XA:
1    That the associated cost in virtual storage below 16Mb, arising from
running the CSP applications conversationally, is about 12K per user of the CSP
applications.  As all the rest of CSP is above 16Mb, a CICS region dedicated to
CSP applications should have at least 3600K of storage available in the DSA,
which could support up to 300 CSP concurrent users.
2    That controlling access to CSP applications by association of different
CICS transaction-ids remains an available and recommended option, using the
technique described below.
3    That the likely reduction in CPU and I/O costs and in response times will
generally be significant, when moving from segmented to conversational
implementation.
Therefore, the conclusion is that for most CSP applications running under
MVS/XA, a conversational implementation is recommended.  The exceptions would be
where virtual storage in the CICS DSA (12K per user) is still seen as a limiting
constraint or where there is a requirement to switch transaction-ids on each
 input to CICS for security or other control reasons.  In this case, the
technique described below is recommended.
SWITCHING TRANSACTION-IDS IN CSP APPLICATIONS
In a CSP implementation, whether segmented or not, it is possible to set up
different applications to run under different transaction-ids, but a special and
somewhat artificial technique must be used.  This is described in detail later.
It is also possible to implement a CSP system so that it functions in a way
similar to the traditional pseudo-conversational style used with HLL
implementations, where a transaction-id can be changed on any input.  This
requires segmenting the CSP application, and a particular implementation
technique which is outlined below.
The CSP statement that must be used is an XFER.  This statement identifies the
CICS transaction-id for which a CICS START will be issued.  It is possible for
the CICS transaction code to be associated directly with the new CSP application
following a procedure described in the CSP manuals, but this carries with it the
unwelcome limitation that the CSP application must come from the default
Application File (ALF) called FZERSAM.  Most installations, as they grow, find
that their library of CSP applications will prefer to employ several ALFs.  In
order to run the CSP application from any ALF a further step must be inserted
into the START sequence.  The STARTed transaction should be associated with a
small COBOL or PL/I program, which then does a CICS XCTL to the CSP application.
Using this technique, the name of the ALF and the CSP application name are
passed using a CICS COMMAREA.
Most CICS systems are front-ended by a menu application which then transfers
control to the main applications.  It is recommended that a CICS EXEC START is
used for this, rather than the CICS XCTL.  If the menu system is itself coded in
CSP then the XFER, as described above, should be used.
SWITCHING TRANSACTION-IDS AT EACH TERMINAL INPUT
This technique is an extension of the technique described above.  It is
necessary that the CSP application is generated with the segmented option.  For
this technique, two programs in COBOL or PL/I are required.  PROG1 will run at a
higher level than CSP, so that, each time the CSP application does a CONVERSE,
control is returned to PROG1, which can then set a new transaction-id, perform
other control functions if required, and RETURN to CICS.
On terminal input, the new transaction-id will be associated again with PROG1,
which must LINK to PROG2.  PROG2Us function is just to pass control by XCTL to
the CSP application. It is important to pass control in this way, as now the CSP
application is MAIN rather than CALLED, and so it can use segmented CONVERSE.
Communication between PROG1 and the CSP application is also possible.  PROG1 may
make its COMMAREA available to PROG2.  Provided PROG2 then passes on the same
COMMAREA to CSP, the CSP application, through its working storage definition,
also has access to the COMMAREA which is actually part of PROG1.
PROG2 must XCTL to the right CSP module.  As control is passed first to the CSP
application, the XCTL must name DCBINIT as the new program.  But following the
applicationUs first CONVERSE all subsequent XCTLs must be to DCBRINIT.  In this
way CSP will correctly refresh its working storage areas which have been saved
on CICS temporary storage.

Nustrat Waheed
Technical Support Project Leader
Olayan (Saudi Arabia)    ) Xephon 1988















