 Expanding the CICS-DL/I storage pools
Users of the CICS-DL/I interface are often frustrated by the restrictions CICS
imposes on IMS functions.  CICS itself is often not to blame - many of these
restrictions are because it is the IMS batch component that runs within the CICS
address space; it was not originally intended to run in a multi-tasking
environment, and thus certain functions, for example the IMS DB monitor, are
restricted because a single-thread batch environment is assumed.
I should state here that I am addressing the CICS/OS-DL/I interface.  The DOS-
DL/I interface used under VSE is quite different, and has both advantages and
disadvantages compared to the OS version, but is not addressed here.
In fact, CICS development has greatly improved the interface over the years.
DBRC can be used for recovery control; IMS log utilities will handle CICS
journals; IRLM can be used for locking, as well as allowing CICS systems to
participate in block-level data sharing with other CICS and IMS systems; and
restrictions imposed due to CICS internal architecture are being lifted.  The
64K limit on PSB size is an example - this restriction was because CICS Storage
Control manages storage area lengths in half words, thus the maximum of 64K.
But a recent APAR, PL21788, lifted this restriction by altering Storage Control
to permit CLASS=DLI storage to use a 3-byte length field, and raised the limit
to 512K, the same as the IMS limit.  These examples demonstrate the efforts of
CICS development to exploit facilities of IMS more fully.
However, there are some limits that are arbitrarily imposed,  examples of which
are the limits on the size of the DL/I control block pools used by IMS.  These
are the DMB (Data Management Block) pool, the PSB (Program Scheduling Block)
pool, and the QCB (Queue Control Block, or Enqueue) pool.  These are IMS storage
pools, but, as they exist in the CICS region, the limits are defined to CICS in
the SIT, and all have an upper limit of 999K.
Now, one may argue that 999K (over a million bytes) of storage should be plenty,
and for many it is.  However, more and more installations are hitting this limit
for one or more of these pools, and find they have nowhere to go except to split
their CICS systems.  Note that these pools are not actual TpoolsU; the storage
is not necessarily contiguous.  Rather, the values specified in the SIT for
these pools are upper limits.  As these TpoolsU are allocated out of the CICS
region, these values serve to prevent IMS from consuming so much of the region
that CICS stalls or fails.  Note too that the pools never contract; once storage
is allocated to them, other CICS subpools cannot allocate that storage, and
there is no TcompressionU process as there is in the CICS program subpool.
For a variety of reasons, virtual storage constraint relief being a major one,
many MVS users have, using MRO, moved their DL/I databases to a separate
database-owning region.  They may find that now they have enough virtual storage
to allocate pools far larger than 999K; perhaps even several megabytes for each
or all of these pools.  There can be many advantages to making these pools
larger, assuming the need exists.
Take the DMB pool.  DMBs are loaded when databases are opened, but are not
deleted when the task ends.  Thus the pool continues to expand until either all
the DMBs are loaded or the pool is exhausted.  If the DMB pool runs out of
space, IMS closes currently open databases, on a Tleast recently usedU basis, to
allow new transactions access to databases that are not currently open.  This
opening and closing of databases can add considerable overhead to the system.
The PSB pool is handled differently.  Like DMBs, PSBs are not released after the
task that used them completes, but are re-used.   PSBs are generally larger than
DMBs but, unlike DMBs, there may be multiple copies of any or all PSBs in
storage at the same time.  Fortunately, when this pool fills up, databases are
not closed but PSBs are deleted, also on a Tleast recently usedU basis.  The
problem here is that, in a busy system, or if the PSBs are large or the pool is
under-allocated, heavy load activity takes place against the ACB library IMSACB,
which, like DFHRPL, is a single-threaded loader.  This too can affect response
time.  (Note: the IMS 2.2 user has a new facility called TPSB CloningU, which
can reduce this overhead somewhat.)
The QCB, or enqueue pool, is quite different.  For one thing, it is allocated
out of OSCORE not the DSA.  Storage for these blocks is acquired in 1K
increments which are not freed.  Thus a single task that requires a large amount
of QCB storage will cause that amount to be lost from free OSCORE until CICS
termination.  Should one or several update tasks cause storage to be allocated
from this pool to the point that OSCORE is depleted - well, we all know what
happens when we run out of OSCORE.  On the other hand, if the enqueue pool is
 too small, transactions can suffer ADLA abends, caused by intercepted U775 IMS
batch abends.  This could ultimately force you to stop and restart CICS.  Now
with MVS/XA and IMS 2.2, this pool is allocated in extended private storage.
Since it will not reduce below-the-line OSCORE, you can make it much larger than
you would have done in the past.
Also, the IMS 2.2 user has the additional problem that DMBs and PSBs are 10%
larger, and (under MVS/XA) QCBs are 20% larger.  This could put additional
stress on these storage pools, and donUt forget APAR PL21788, as mentioned
earlier, which allows a single PSB to be as large as 512K (in a 999K pool?).
With these control blocks getting larger but the maximum pool size remaining the
same, installations are realising more and more the need to expand these pools
beyond their current limit, the PSB pool especially.
Some may be at the 999K limit for one or more of these pools, but feel that this
is not a significant concern.  Bear in mind that any resource for which there is
contention is going to increase the average task life.  This in turn will result
in other resources being held longer, perhaps ending with resources (DASD, MIPS,
etc) that could be avoided by reducing or eliminating the original resource
contention problem.  This is the idea behind expanding the limits of these
pools.
It should be noted that, from the point of view of the CICS architecture, these
pools can be expanded easily; the amounts specified in the SIT are stored in the
DLP in binary full words.  It is therefore easy to put a far larger value than
999K into these fields.  If you think this would be of benefit to you, several
methods of raising this limit are described below.  These include doing it at
SIT assembly time, at DL/I initialisation time, or with a user program, either
executed at PLTPI time or from a terminal.  You can pick the method most suited
to your installation and personal preference, or use one of these as a base in
developing your own method.
METHOD ONE
Apply a USERMOD to DFHSIT.  The DFHSIT macro calls an inner macro to validate
the keywords entered.  Apply the following to raise the limit from 999K to
9999K:
++ USERMOD (UMOD001).
++ VER (C150) FMID(HCI1703).
++ MACUPD (DFHSIT) DISTLIB (MACLIB)
   /* MODULE : DFHSIT --- TYPE : MACLIB */ .
./ CHANGE NAME=DFHSIT
         DFHPRMCK  PSBPL,&PSBPL,&REQ,N,0,9999,4                        58900000
         DFHPRMCK  DMBPL,&DMBPL,&REQ,N,0,9999,4                        59800000
         DFHPRMCK  ENQPL,&ENQPL,&REQ,N,0,9999,2                        61120000
./ ENDUP
You don't have to raise the ceiling to 9999K; in fact, you probably want a more
realistic limit.  If so, simply change the T999U to anything you want, eg 1500,
2500 etc.
METHOD TWO
Apply a USERMOD to DFHDLQ.  This module initialises the CICS-DL/I interface.
The existing code multiplies the amount specified in the SIT by 1024.  With this
change, the amount specified in the SIT will be multiplied by 4096, raising the
current limit by a factor of 4:
++ USERMOD (UMOD001).
++ VER (C150) FMID(HCI1703).
++ SRCUPD (DFHDLQ) DISTLIB (SOURCE)
   /* MODULE : DFHDLQ --- TYPE : SOURCE */ .
./ CHANGE NAME=DFHDLQ
         SLL   R1,12               MULTIPLY DMBPL= BY 4K               32970000
         SLL   R1,12               MULTIPLY PSBPL= BY 4K               33250000
         SLL   R1,12               MULTIPLY ENQPL= BY 4K               33530000
./ ENDUP
Note that you do not need to increase all three pools; just alter the USERMODs
to adjust the specific pool or pools you need increased.
If you choose this method you should make a note in your CICS Resource
Definition Guide for the SIT definition that the DMBPL, PSBPL, and/or ENQPL
values should be specified in 4K increments, rather than 1K.  Also remember to
change your existing SIT definitions to reflect this change.  This is important,
if, for example, you apply this modification to DFHDLQ and have PSBPL=999
specified, you will end up with as much as 3996K allocated to this pool!  So if
 you want to go from 999K to 1200K, you would apply this USERMOD and change the
SIT values to PSBPL=300 for example.
METHOD THREE
This method is the one I use, and I think it is both the easiest and safest to
add and control.  It is a PLTPI program that simply goes in after DL/I
initialisation and multiplies the values specified for any or all these pools by
4, with the end result being the same as the USERMOD shown in the second method.
         TITLE 'CICS/DLI IMS POOL EXPANDER'
*****    SELECT THE APPROPRIATE OPTIONS BELOW.
*        &PSB - WILL GENERATE CODE TO PERFORM EXPANSION OF THE
*               PSB POOL AT START-UP.
*        &DMB - WILL GENERATE CODE TO PERFORM EXPANSION OF THE
*               DMB POOL AT START-UP.
*        &ENQ - WILL GENERATE CODE TO PERFORM EXPANSION OF THE
*****           QCB POOL AT START-UP.
         GBLB  &PSB                EXPAND PSB POOL
&PSB     SETB  1                   1=YES - 0=NO
         GBLB  &DMB                EXPAND DMB POOL
&DMB     SETB  0                   1=YES - 0=NO
         GBLB  &ENQ                EXPAND QCB POOL
&ENQ     SETB  0                   1=YES - 0=NO
         COPY  DFHCSADS
         COPY  DFHTCADS
         COPY  DFHTCTFX
         DFHDLP DLP=DSECT
         DFHSIT TYPE=DSECT
         ISCD   SCDBASE=0
         XC00   TYPE=D
TCTPFBAR EQU   0
***** MODULE NAME = DLPLPGM                                       *****
* MODULE TYPE = NORENT                                                *
* FUNCTION = EXECUTES AT PLTPI TIME, AND EXPANDS THE DMB, PSB OR      *
*            ENQ POOLS; THIS IS DONE TO ALLOW EXPANSION OF THE        *
*****        POOLS BEYOND THE ARBITRARY LIMIT OF '999' SET BY IBM.*****
START    CSECT
         BALR  R3,0                ESTABLISH
         USING *,R3                   ADDRESSABILITY
         B     L00100              BYPASS EYECATCHER
         DC    CL8'DLPLPGM'        MODULE NAME
         DC    CL8'&SYSDATE'       DATE
         DC    CL8'&SYSTIME'       TIME
L00100   TM    CSASSI2.CSAPLTPI    ARE WE AT PLT TIME?
         BO    L09999              ..NO  - GET OUT
         L     R7,CSAOPFLA         ESTABLISH OPFL
         USING CSAPOFL,R7            ADDRESSABILITY
         L     R2,CSADLI           ESTABLISH DLP
         USING DFHDLPDS,R2          ADDRESSABILITY
         LTR   R2,R2               DL/I IN THIS SYSTEM?
         BZ    L09999              ..NO
         TM    DLPFLG,DLPNLCL      ANY LOCAL PSB'S HERE?
         BO    L09999              ..NO
         L     R1,CSATCTBA         ADDRESS TCT PREFIX
         MVC   JOBID,TCTVJBNM-DFHTCTFX(R1)
*                                  PUT JOBNAME IN WTO MESSAGE AREA
         AIF   (NOT &DMB).NODMB
***      PROCESS DMB POOL EXPANSION.
         L     R4,DLPDMBMS         FETCH CURRENT POOL SIZE
         SLL   R4,2                MULTIPLY BY 4
         ST    R4,DLPDMBMS         UPDATE POOL SIZE IN DLP
         L     R4,DLPDMBBA         FETCH CURRENT POOL SIZE
         SLL   R4,2                MULTIPLY BY 4
         ST    R4,DLPDMBBA         UPDATE POOL SIZE IN DLP
         MVC   POOLID,=C'DMB'      PUT POOLID IN WTO MESSAGE AREA
         BAL   R6,SUB0100          GO PUT MESSAGE OUT
.NODMB   ANOP
         AIF   (NOT &PSB).NOPSB
 ***      PROCESS PSB POOL EXPANSION.
         L     R4,DLPPSBMS         FETCH CURRENT POOL SIZE
         SLL   R4,2                MULTIPLY BY 4
         ST    R4,DLPPSBMS         UPDATE POOL SIZE IN DLP
         L     R4,DLPPSBBA         FETCH CURRENT POOL SIZE
         SLL   R4,2                MULTIPLY BY 4
         ST    R4,DLPPSBBA         UPDATE POOL SIZE IN DLP
         MVC   POOLID,=C'PSB'      PUT POOLID IN WTO MESSAGE AREA
         BAL   R6,SUB0100          GO PUT MESSAGE OUT
.NOPSB   ANOP
         AIF   (NOT &ENQ).NOENQ
*****    PROCESS QCB (ENQUEUE) POOL EXPANSION.
*        NOTE 1 - ALTERING THE DL/I PARAMETER LIST ALONE IS NOT
*                 ENOUGH TO EXPAND THIS POOL. WE MUST ALSO ALTER
*                 THE CMAX FIELD IN DFSFXC00. FOR IMS BATCH THIS
*                 CONTAINS THE VALUE SPECIFIED ON THE 2'ND SUBPARAMETER
*                 OF THE 'CORE' OPERAND FROM THE 'IMSCTF' MACRO. THIS
*                 CONTAINS THE MAXIMUM STORAGE TO BE USED BY DFSFXC10
*                 FOR QCBS.
*        NOTE 2 - IMS 2.2 MOVED DFSFXC00 ABOVE THE LINE. THIS HAS
*****             BEEN HANDLED IN THIS PROGRAM. BUT TAKE CARE.
         TM    DLPFLG.DLPPISHD     ARE WE USING PI?
         BNO   L09999              ..NO  - BYPASS
         L     R4,DLPENQMS         FETCH CURRENT POOL SIZE
         SLL   R4,2                MULTIPLY BY 4
         ST    R4,DLPENQMS         UPDATE POOL SIZE IN DLP
         L     R7,DLPSCD           ADDRESS SCD
         CLI   CSAOPSYS,C'X'       OPSYS=MVS/XA?
         BNE   L00400              ..NO
         CLC   SSCDIMSR-SCD(2,R7),=X'0220'
*                                  IMS RELEASE 2.2 OR HIGHER?
         BNL   L00500              ..YES
L00400   L     R7,SCDXC0EP-SCD(,R7) ADDRESS FXC00
         ST    R4,CMAX-DFSFXC00(,R7) STORE UPDATED VALUE
         B     L00700              GO WRITE MESSAGE
L00500   LA    R3,0(,R3)           MAKE SURE BASE IS 24 BIT
         L     R15,=A(X'80000000'+L00600)
*        BSM   R14,R15             FLIP TO 31 BIT MODE
         DC    X'0BEF'  <=========== NEEDED IF NO ASSEMBLER 'H'
L00600   L     R7,SCDXC0EP-SCD(,R7) ADDRESS FXC00
         ST    R4,CMAX-DFSFXC00(,R7) STORE UPDATED VALUE
         L     R15,=A(L00700)
*        BSM   R14,R15             FLIP BACK TO 24 BIT MODE
         DC    X'0BEF'  <=========== NEEDED IF NO ASSEMBLER 'H'
L00700   MVC   POOLID,=C'ENQ'      PUT POOLID IN WTO MESSAGE AREA
         BAL   R6,SUB0100          GO PUT MESSAGE OUT
         B     L09999              EXIT
.NOENQ   ANOP
L09999   DFHPC TYPE=RETURN
*****    W T O    S U B R O U T I N E    *****
*        THIS ROUTINE WRITES A MESSAGE TO THE CONSOLE, AND IDENTIFIES
*        THE CICS SYSTEM AND DL/I POOL THAT WAS EXPANDED.
SUB0100  DFHWTO (JOBID,CL8' ',' -- ',POOLID,CL3' ',                    X
               ' POOL HAS BEEN EXPANDED'),UNCOND
         BR    R6
         END
To me, this is the best method because no CICS source code is modified; I feel
that USERMODs cause nothing but trouble and are best avoided.  Also, should a
problem occur, it is easier to remove a program from the PLT than it is to
remove a USERMOD.
Also, this program has conditional assembly statements in it so that you need
not expand all the pools, but only those that in your installation are in need
of expansion.  At my installation we only expanded the PSB pool, as this is the
only one I have greater than 999K.  Set globals &DMB, &PSB, or &ENQ to T1U to
get the corresponding pool expanded.  At start-up, a message:
     JOBNAME : DMB|PSB|ENQ POOL HAS BEEN EXPANDED.
 will be sent to the console announcing the expansion of each pool.  Again, with
this method you should make a note in your CICS Resource Definition Guide for
the SIT definition that the DMBPL, PSBPL, and/or ENQPL values should be
specified in 4K increments, rather than 1K, and make sure you change your
existing SIT definitions appropriately.  Finally, be careful not to raise the
pools too much, or youUll just be trading one problem for another.
Should you so choose, this program could be modified to allow dynamic changing
of the pools, for example from a terminal.  This is up to you; I didnUt see the
need for it.  Keep in mind that this program assumes you are expanding the
pools, and once pool space is used, it is permanently allocated.  Use extreme
caution if you want to make the pools smaller; while this will work, IMS could
go into a frenzy of closing databases or abending tasks.  I wouldnUt recommend
it.
As for release levels, all three of the above methods are written at the CICS
1.7.0 level, but should work with CICS 1.6.1 as well.  I canUt say for CICS 2.1.
As for IMS, it should work with Releases 1.2 through 2.2, and the program has
been written to handle IMS 2.2 under MVS/XA, where the QCB pool is above the
line.  Finally, remember that, when you assemble the program, the IMS macro
libraries GENLIB, GENLIBA, and GENLIBB must be included in the SYSLIB
concatenation.
My installation has used this program for several months to expand the PSB pool
to 1600K, with no ill effects in CICS-DL/I, the shut-down statistics program
(which displays information about utilisation of these pools), or OEM products
like OMEGAMON or DADS.  If other users do experience problems, I would be
interested in hearing about them, either personally or through the pages of this
journal.

Christopher Frank
Lead Systems Programmer
Western Life Insurance (USA)  ) Xephon 1988




































