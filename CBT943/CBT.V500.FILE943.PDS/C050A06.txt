CICS LINK versus standard CALL to subroutine

There are times when an Assembler subroutine that was written
initially for batch programs is also used by CICS applications.  In
our shop we have a date verification and manipulation routine
called UTDATE to which the caller passes a single parameter
area containing all the fields necessary for data transfer from and
to the caller.  We began coding:

    CALL 'UTDATE' USING DATE-PARMS

in our on-line COBOL programs (the same as for batch).

After coding this call into several command-level programs, I
realised that each time I did so I was link-editing a separate copy
of the subroutine (this one is about 300 bytes long) into each
program needing it.  With our CICS storage already at a
premium, a means of sharing one copy of the subroutine in CICS
program storage was to be much preferred.

It is not necessary to write and maintain two versions of the same
subroutine logic to accomplish this - you simply need a short
command-level Assembler program to be linked to, which in turn
internally calls the subroutine.  When the command-level
subprogram is link-edited, it then contains the copy of the
subroutine that will be shared.

The following code will accomplish what has been described
above.

*ASM      XOPTS(NOEPILOG)
          DFHEISTG
DATECICS  DFHEIENT                     USE DEFAULT REGISTERS
          B     *+12                   BYPASS IDENTIFICATION
          DC    CL8'DATECICS'          PROGRAM ID
          LA    1,DFHEICAP             USE COMMAREA POINTER AS PLIST
          L     15,=V(UTDATE)          SUBROUTINE ENTRY POINT
          BALR  14,15                  STANDARD SYSTEM CALL
          EXEC  CICS RETURN            RETURN TO HIGHER LEVEL
          LTORG ,
          END  DATECICS

Now our on-line programs replace:

    CALL 'UTDATE' USING DATE-PARMS

with:

    EXEC CICS LINK PROGRAM('DATECICS')
         COMMAREA(DATE-PARMS)
         LENGTH(35)
    END-EXEC.

A couple of Assembler items to note.

1   By coding the DFHEIENT macro without the DATAREG
operand, the EXEC Interface Dynamic Storage base register
defaults to 13, which saves three instructions per translated
command since register 13 does not have to be saved and
restored each time.  The first part of this storage area contains
a standard register save area normally used by the EXEC
interface each time DFHEI1 is called (in the expansion of
each EXEC CICS).  We are free to use this save area in the
meantime, saving the time and space of setting up our own.

2   Instead of setting up a unique parameter list area for the call,
I simply loaded register 1 with the address of the
COMMAREA pointer, DFHEICAP.  Although it is
customary to set the high-order byte of the last entry in a
parameter list to X'80' to denote the end, the subroutine
UTDATE in my case never tests for a variable number of
parameter addresses, so it was perfectly safe to omit setting
it.  Thus, DFHEICAP serves as a CICS-provided, one-entry
parameter list for the call.


Lawrence Keith Holder
Senior Programmer/Analyst
University of Tennessee at Martin (USA) ) UTM 1990


