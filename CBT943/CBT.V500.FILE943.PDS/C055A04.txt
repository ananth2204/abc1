DFHCOMMAREA suggestions

After reading a couple of articles in CICS Update in 1989
regarding problems encountered with DFHCOMMAREAs, I
thought I would write and mention a couple of techniques I
have found useful in dealing with these problems in command-
level COBOL programs.

The first involves an application designed to use many
modules, which will be invoked using COMMAREAs of
varying lengths.  For this example, it is assumed that the
programs all have their own transaction codes so that they get
control via an XCTL and then issue a RETURN TRANID until
the user is ready to move to another module, at which time
they XCTL to the appropriate program.

In this situation it is impossible to know what size
COMMAREA the program will be given when it is invoked via
the XCTL.  If all programs are forced to use the same
COMMAREA size, that forces all COMMAREAs to the size
of the largest one needed in the application and wastes storage
the rest of the time.  If specific values are hard coded into
programs as sub-fields under 01  DFHCOMMAREA and if the
lengths of the COMMAREAs that these values represent were
to change, all of the programs would have to be changed to
reflect this.

Try coding the DFHCOMMAREA as a variable-length area as
in the following example:

       WORKING-STORAGE SECTION.
       01  WORK-FIELDS.
           03 WS-CALEN               PIC S9(4) COMP.
           03 MY-CALEN               PIC S9(4) COMP VALUE +1024.
           03 MY-TRANID              PIC X(4)       VALUE 'TRAN'.
       01  WS-COMMAREA.
       COPY COMMAREA.
C          03 APPLICATION-COMMAREA.
C              05 FIRST-TIME-FLAG    PIC.
C                  88 IT-IS-FIRST-TIME  VALUE 'Y'.
               .
               .
C     *  END OF FIXED PORTION OF COMMAREA
           03 PROGRAM-RELATED-DATA.
               .
               .
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           03 FILLER    PIC X    OCCURS 1 TO 4000 TIMES
                               DEPENDING ON WS-CALEN.
               .
               .
       PROCEDURE DIVISION.
           IF EIBCALEN > MY-CALEN
               MOVE MY-CALEN     TO WS-CALEN
           ELSE
               MOVE EIBCALEN     TO WS-CALEN.
           IF WS-CALEN = ZERO
               EXEC CICS RETURN END-EXEC.

           MOVE DFHCOMMAREA TO WS-COMMAREA.
           IF IT-IS-FIRST-TIME
               PERFORM FIRST-TIME-LOGIC
           ELSE
               PERFORM REGULAR-LOGIC.

           EXEC CICS RETURN TRANSID(MY-TRANID)
                            COMMAREA(WS-COMMAREA)
                            LENGTH(MY-CALEN)
                            END-EXEC.

The first thing the program must do is set the value of the WS-
CALEN field to the desired length that we wish to move.  If
the COMMAREA that was passed to us is longer than we are
going to use there is no point in moving more into working
storage than we will use, so the length of the variable area is
set to the length of the COMMAREA that this program will
use.  If the passed COMMAREA is shorter, the length of the
variable area will be set to the length that was passed to us and
only that amount will be moved into working storage.  This
should prevent the potential of the destructive overlap in the
'move long' instruction mentioned in the articles.  We are
assuming for the example that the largest COMMAREA in the
application will be 4000 bytes or less.  This must be known for
a fact.  The maximum value can be set to whatever is realistic
for the given application, but all programs should agree on
what the maximum is to be.

For this example we are going to assume that if the received
COMMAREA length is zero, we will simply return to CICS.
This is in case the user enters our transaction code from a blank
screen in CICS.  However, the program is not meant to be
invoked in this manner.

The FIRST-TIME-LOGIC routine is responsible for initializing
the program's own part of the COMMAREA and any fields in
the main part that need to be initialized.  This includes resetting
the first time flag to something other than 'Y'.  It also probably
sends the initial screen to the user.

The REGULAR-LOGIC routine is responsible for receiving
data from the user and acting upon it.  This includes checking
to see if the user is ready to move to another program
whereupon our program sets the first time flag in the
COMMAREA and XCTLs to the next program passing WS-
COMMAREA with a length of MY-CALEN.

If indeed all programs run under their own transaction code,
then checking that 'EIBTRNID NOT = MY-TRANID' can be
used in place of a first time flag.

As one of the authors of the previous articles mentioned, it is
quite common to move the COMMAREA from the linkage
section to working storage in command-level COBOL.  That is
one of the disadvantages of coding with each program running
under its own transaction code and XCTLing to other programs
as needed.  Unless each program is going to GETMAIN an
area to pass to the next program of the length that that program
will use, it becomes necessary to move the DFHCOMMAREA
to working storage in the next program's first time logic in
order to set the subsequent COMMAREAs to the desired
length.  Of course, this means that all of the sub-fields of the
COMMAREA are actually defined in working storage for
initialization, and, unless you are willing to define them again
in the linkage section with different names, you are now forced
to move the DFHCOMMAREA to working storage each time
you get control, even though the COMMAREA which was
passed to you is more often than not going to be exactly what
you are looking for.  Since the area passed as
DFHCOMMAREA is not freed until the task terminates, you
end up with double the size of your COMMAREA actually
being used for each transaction: one area as the actual CICS
COMMAREA and one area in working storage as your work
area.

If the COMMAREAs used throughout the application vary in
size very little (say by ten percent or less, even up to 200 bytes
or so) it may be worthwhile to set them at a fixed length of the
largest one needed.  Although this will waste some storage
when the active program does not need this extra space, it can
save overall storage for the tasks and save the extra 'move
long' instruction of moving the linkage section area to working
storage each time the program is invoked.  The application
COMMAREA copy book can be copied into the linkage
section under the '01 DFHCOMMAREA' group name and thus
reduce the size of working storage.  This will also, by the way,
remove the headaches addressed by the first part of this article.

One other example I would like to give is an application which
runs under basically one transaction code (saving PCT storage).
This program performs first time logic for only a small
percentage of the time it is executed, because once users enter
the application they tend to stay there for some time.  If the
application is small, consisting of one or two screens, this may
be the only program in the application.  On the other hand, it
might be a large application where the original program is kept
as small as possible and LINKs to the appropriate sub-program
to handle the specific screen involved at this point in the
application.

Normally, the first program invoked by the transaction code
must maintain its COMMAREA in working storage because
the first time the transaction is entered from a terminal there is
no COMMAREA passed to the program by CICS.  However,
in this example, there is a way to save transaction storage used
after first time logic is performed by sacrificing some overhead
during first time processing.

Consider the following program example:

       WORKING-STORAGE SECTION.
       01  WORK-FIELDS.
           03 MY-CALEN          PIC S9(4) COMP VALUE +1024.
           03 WS-SPACE          PIC X          VALUE SPACE.
           03 MY-PROGRAM-NAME   PIC X(8)       VALUE 'THISPROG'.
               .
               .
       LINKAGE SECTION.
       01  DFHCOMMAREA.
       COPY COMMAREA.
C          03 APPLICATION-COMMAREA.
C              05 FIRST-TIME-FLAG    PIC.
C                  88 IT-IS-FIRST-TIME  VALUE SPACE.
       01  BLL-CELLS.
           03 FILLER            PIC S9(8) COMP.
           03 GETMAIN-PTR       PIC S9(8) COMP.
       01  GETMAIN-AREA         PIC X.
               .
               .
       PROCEDURE DIVISION.
           SERVICE RELOAD BLL-CELLS.
           IF EIBCALEN NOT = MY-CALEN
               EXEC CICS GETMAIN SET(GETMAIN-PTR)
                                 LENGTH(MY-CALEN)
                                 INITIMG(WS-SPACE)
                                 END-EXEC
               SERVICE RELOAD GETMAIN-AREA
               EXEC CICS XCTL PROGRAM(MY-PROGRAM-NAME)
                              COMMAREA(GETMAIN-AREA)
                              LENGTH(MY-CALEN)
                              END-EXEC.

           IF IT-IS-FIRST-TIME
               PERFORM FIRST-TIME-LOGIC
           ELSE
               PERFORM REGULAR-LOGIC.

           EXEC CICS RETURN TRANSID(EIBTRNID)
                            COMMAREA(DFHCOMMAREA)
                            LENGTH(MY-CALEN)
                            END-EXEC.

In this example, we determine by examining EIBCALEN that
this is the first execution of the program.  The program asks
CICS to acquire and initialize an area large enough to hold the
COMMAREA.  The program then XCTLs to itself in order that
this area will be passed to it as DFHCOMMAREA.  The only
reference to GETMAIN-AREA is during this first process and
the picture of this area does not have to be more than one byte
as there will be no COBOL reference to it other than as a
passed parameter in the CALL statement generated by the
command-level translator.  Our first time flag in the
COMMAREA now uses an indicator of a space to indicate that
we must perform our logical first time process including setting
FIRST-TIME-FLAG to 'N' or something other than space.
The SERVICE RELOADs are in the example in case you wish
to use the COBOL OPTIMIZE option.  In all subsequent
processing, our COMMAREA will be returned to us in the
linkage section and it is never necessary to move it to working
storage.

I do recall that this last technique did not work in the only
CICS 1.5 shop in which I was able to try it.  The area I had
just GETMAINed was freed during the XCTL process.  This
was a VSE machine.  I would therefore have to assume that it
does not work in CICS 1.5.  However I have used it
successfully in all CICS releases since, in both VSE and MVS.

Randy Benderman
Vice-President
Computer Application Services Inc (USA)  ) Computer Application Services 1990


