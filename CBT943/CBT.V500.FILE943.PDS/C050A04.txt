CICS 3270 - PC file transfer program exits

If you have been looking for an economical method of transferring
files between a CICS host system and a personal computer, give
consideration to the IBM CICS/VS 3270-PC File Transfer Program
Offering, 5798-DQH (CFTP for short).  CFTP as packaged
provides the vehicle for uploading or downloading files between a
CICS host and a personal computer.  All the source code is
supplied including two exits called UGETFILE and UPUTFILE (ie
RECEIVE and SEND processing exits respectively).

Customising both exits using Assembler command-level code can
enhance the basic function of transmitting files into a complete
system.  Benefits include:

1   It allows for the prototyping of file transfer facilities within
your installation and provides an understanding of how the
IND$FILE interface works.

2   It provides another solution other than TSO file transfer or
CMS file transfer for uploading/downloading data.

3   It is an economical method for sharing files (eg LOTUS 1-2-3,
DBASE III, Wordperfect, etc) between multiple personal
computer users (ie a host-based network).

What CICS facilities are required by CFTP?  Primarily, CICS
auxiliary temporary storage is required to provide an intermediate
resource used by CFTP for storing data during the transfer process.
BMS must also be generated.  A temporary storage queue name of
CFTRtttt  (where tttt is the terminal-id) is the default queue name
which CFTP writes to on a SEND operation and reads from on a
RECEIVE operation.

All file transfer activity is initiated by a PC user issuing either
SEND or RECEIVE commands.  A file name of up to eight
characters can be coded on either command.  Examples of SEND
and RECEIVE commands would be:

    SEND    C:\DATA\TEST.WK1 B:WORKFILE (BINARY) comments
    RECEIVE C:\DATA\GET.TXT B:SOURCE (ASCII

Two PC file formats are supported by CFTP.  ASCII format is
usually source code delimited by carriage return/line feed codes.
Binary or object format is usually a string of binary codes.  Binary
code formats include LOTUS 1-2-3 worksheets, DBASE III files,
Wordperfect documents, compiled BASIC programs, etc.  The
format must be known prior to a file transfer by specifying the
type on the SEND/RECEIVE command.

Now that you have the concepts for CFTP, let's take a look at the
enhancements gained by customising the UGETFILE and
UPUTFILE exits.  Using the exits, two types of file transfer were
developed.  The first need was the capability to transfer files
between (either SEND or RECEIVE) a PC and a CICS-owned
VSAM ESDS file.  Both fixed and variable format ESDS files
were used (this could be expanded depending on requirements).
This type, known as a 'permanent' type, would be dynamically
allocated/deallocated from CICS so the data could be
loaded/unloaded by a batch job.  A separate program called
UGETCLOS is started via interval control to perform file close
and job submission functions.

The second type, known as 'shareable', allows files to be shared
between PC users.  Using a unique 1-4 character alphanumeric
identifier, files are stored in auxiliary temporary storage.

As discussed before, up to eight characters are allowed by CFTP.
Although file names of eight characters are allowed, the
customised exits only use a maximum of five characters in the
following format:

    TIIII

where T is the type (P for permanent, S for shareable, and D for
delete ÝShareable file-ids¨) and IIII is a 1-4 character alphanumeric
identifier.

Other features and specifications designed into the exits are:

1   The audit logging of all SEND/RECEIVE activity by terminal-
id, which enables a listing of all file transfer activity to be
produced using IDCAMS REPRO.

2   An author control feature, which  allows only the user who
created a shareable file to delete or overwrite it.

3   The ability to specify that security checking is performed at
the terminal-id level.

4   ASCII and binary file formats support.

5   The dynamic allocation/deallocation of permanent files, with
automatic job submission.

The steps required for the installation of CFTP and the customised
exits are:

1   Unload from the distribution tape source and LOADLIB
PDSs.

2   Include the following PCT table entries definitions:

    DFHPCT TRANID=IND$,PROGRAM=HFTR
    DFHPCT TRANID=ZCLO,PROGRAM=UGETCLOS

3   Include the following PPT table entries definitions:

    DFHPPT PROGRAM=HFTR,LANGUAGE=ASSEMBLER
    DFHPPT PROGRAM=UGETFILE,LANGUAGE=ASSEMBLER
    DFHPPT PROGRAM=UPUTFILE,LANGUAGE=ASSEMBLER
    DFHPPT PROGRAM=UGETCLOS,LANGUAGE=ASSEMBLER

4   Include the following FCT table entries definitions:

    DFHFCT TYPE=DATASET,DATASET=CFTAUDIT,ACCMETH=VSAM,
                   SERVREQ=(ADD),
                   RECFORM=(FIXED,BLOCKED),DISP=OLD,LSRPOOL=NONE,
                   FILSTAT=(ENABLED,OPENED),LOG=NO,JID=NO,STRNO=2,
                   DSNAME='CICSI.DEV1.CFTAUDIT'
    DFHFCT TYPE=DATASET,DATASET=CFTDAT1,ACCMETH=VSAM,
                   SERVREQ=(READ,ADD,UPDATE,DELETE,BROWSE),
                   RECFORM=(FIXED,BLOCKED),DISP=OLD,LSRPOOL=NONE,
                   FILSTAT=(DISABLED,CLOSED),LOG=NO,JID=NO,STRNO=2,
                   DSNAME='CICSI.DEV1.CFTDAT1'
    DFHFCT TYPE=DATASET,DATASET=CFTDAT2,ACCMETH=VSAM,
                   SERVREQ=(READ,ADD,UPDATE,DELETE,BROWSE),
                   RECFORM=(VARIABLE,BLOCKED),DISP=OLD,
                   LSRPOOL=NONE,FILSTAT=(DISABLED,CLOSED),LOG=NO,
                   JID=NO,STRNO=2,
                   DSNAME='CICSI.DEV1.CFTDAT2'

5   Include the following DCT table entry definition:

    DFHDCT TYPE=SDSCI,DEVICE=DISK,DSCNAME=IRDR,
                   RECFORM=FIXUNB,BLKSIZE=80,RECSIZE=80,
                   TYPEFLE=OUTPUT
    DFHDCT TYPE=EXRA,DESTID=IRDR,DSCNAME=IRDR

6   Move load modules into a DFHRPL library.

7   Assemble UGETFILE, UPUTFILE, and UGETCLOS
programs.

8   Define three ESDS VSAM Clusters using IDCAMS control
statements:

    DEFINE CLUSTER                    -
    (NAME(CICSI.DEV1.CFTAUDIT) -
    VOL(VVVVVV)                -
    KEYS(32 0)                 -
    SPEED NIXD OWNER(YOU)      -
    SHR(3 3) TRK(15 1))        -
    DATA                         -
    (NAME(CICSI.DEV1.CFTAUDIT.DATA) -
    CISZ(1024) RECSZ(121 121))

    DEFINE CLUSTER                   -
    (NAME(CICSI.DEV1.CFTDAT1) -
    VOL(VVVVVV)               -
    KEYS(7 0) SPEED NIXD      -
    OWNER(YOU)  SHR(3 3)      -
    TRK(15 1))                -
    DATA                        -
    (NAME(CICSI.DEV1.CFTDAT1.DATA) -
    CISZ(2048) RECSZ(80 80))

    DEFINE CLUSTER                   -
    (NAME(CICSI.DEV1.CFTDAT2) -
    VOL(VVVVVV)               -
    KEYS(7 0) SPEED NIXD      -
    OWNER(YOU) SHR(3 3)       -
    TRK(15 1))                -
    DATA                        -
    (NAME(CICSI.DEV1.CFTDAT2.DATA) -
    CISZ(32767) RECSZ(80 32760))

9   Include the following JCL DD statement:

    //IRDR  DD  SYSOUT=(A,INTRDR)

A personal computer issuing SEND/RECEIVE commands must
have a control program which supports IND$FILE format.
EXTRA, by Attachmate Corporation, was the control program
used to develop and test all the CFTP exit code.  By using the
NOW! product, by Attachmate Corporation, a menu interface was
developed, with an automatic CICS log-on/log-off function,
eliminating the need to issue SEND/RECEIVE commands from
the DOS prompt.  Also, menus are presented to the user for
entering PC file names and CFTP file name parameters.  In
essence, this is a more user-friendly method for delivering file
transfer for PC users.

In conclusion, customising the UGETFILE and UPUTFILE exits
will extend the functionality of the CICS File Transfer Program,
from merely an upload and download facility, into an inexpensive
host-based network.  The prototype supplied by this article was
developed on an MVS/SP 1.3.5 CICS 1.7 system.

UGETFILE - CICS PC FILE TRANSFER EXIT

DFHEISTG DSECT
AUDFLD   DS    F
DISP     DS    F
QUEUEID  DS    0CL8
QUEUEHD  DS    CL4
QUEUENM  DS    CL4
AUDITOUT DS    0CL121
AUDIEXIT DS    CL3
AUDIFIL1 DS    CL2
AUDIDATE DS    CL8
AUDIFIL2 DS    CL2
AUDITIME DS    CL8
AUDIFIL3 DS    CL2
AUDINAME DS    CL8
AUDIFIL4 DS    CL2
AUDITERM DS    CL4
AUDIFIL5 DS    CL2
AUDINREC DS    CL8
AUDIFIL6 DS    CL2
AUDIRCC  DS    CL10
AUDIFIL7 DS    CL2
AUDIRESV DS    CL58
DAT1IN   DS    CL80
CFTDAT1X DS    0CL11
CFTDAT1Y DS    CL8   QUEUE ID
CFTDAT1Z DS    CL3   TYPE
DATA2OUT EQU   7
LENG     DS    H
STATITEM DS    H
NUMITEMS DS    H
COMITEMS DS    H
COMPTR   EQU   8
TERMID   DS    CL4
SAVECOM  DS    0CL20
SAVERC   DS    CL4
SAVEFILE DS    0CL8     FILENAME
SAVETYPE DS    CL1
SAVENAME DS    CL4
SAVEFIL1 DS    CL3
SAVECNTL DS    0CL8     QUEUE NAME
SAVECFT  DS    CL3
SAVECFTN DS    CL4
SAVEFIL2 DS    CL1
ASKTIMED DS    D
PKAREA   DS    D
UGETFILE DFHEIENT CODEREG=(3,9)
         B     START
         DC    CL16'UGETFILE'         NAME OF PROGRAM.
         DC    CL16'&SYSDATE'         DATE OF ASSEMBLY.
         DC    CL16'&SYSTIME'         TIME OF ASSEMBLY.
         DC    CL16'COMPANY NAME    ' COMPANY.
START    DS    0H
         LH    COMPTR,EIBCALEN              CHECK COMMAREA..RETURNED?
         LTR   COMPTR,COMPTR
         BZ    RETURN                       NOT 1ST. TIME..BRANCH!
         SR    COMPTR,COMPTR
         L     COMPTR,DFHEICAP
         MVI   SAVECOM,X'40'
         MVC   SAVECOM+1(L'SAVECOM-1),SAVECOM
         MVI   AUDITOUT,X'40'
         MVC   AUDITOUT+1(L'AUDITOUT-1),AUDITOUT
         MVI   DAT1IN,X'40'
         MVC   DAT1IN+1(L'DAT1IN-1),DAT1IN
         MVC   SAVECOM(20),0(COMPTR)
* VALIDATE TERMINAL ID.
         EXEC CICS ASSIGN FACILITY(TERMID)
         LA    R6,TERMTBL              LOAD TERMINAL ID TABLE
TERMCK   DS    0H
         CLC   0(4,R6),=C'9999'        ARE WE AT END OF LIST.
         BE    TERMERR                 TERMINATE PROCESS.
         CLC   TERMID,0(R6)            COMPARE PASSED TERMID TO LIST.
         BE    PROCESS                 PASSED TEST...CONTINUE.
         LA    R6,4(0,R6)              BUMP TO NEXT TERMINAL ID.
         B     TERMCK
* MAINLINE ROUTINE.
PROCESS  DS    0H
         MVC   QUEUEHD,HEADCFTR        SET UP QUEUE HEADER
         MVC   QUEUENM,TERMID          SET UP QUEUE TERMID
         MVC   COMITEMS,H0             INIT ITEMS COMPARE AREA
         LH    R10,COMITEMS            LOAD REG UP FOR ADD
         MVC   STATITEM,H1             SET ITEM VALUE TO ONE
*                                      FOR READ ACTION
         CLC   SAVETYPE,PERMID         IS IT A PERMANENT ID REQUEST?
         BE    PROCPERM
         CLC   SAVETYPE,SHARID         IS IT A SHAREABLE ID REQUEST?
         BE    PROCSHAR
         B     TYPEERR
* PERMANENT TYPE PROCESSING ROUTINE.
PROCPERM DS    0H
* MAKE SURE TEMPORARY STORAGE QUEUE IS DELETED PRIOR TO LOADING DATA
* INTO IT.
         MVC   SAVECNTL,QUEUEID        MOVE HEADER TO COMMAREA
         EXEC CICS HANDLE CONDITION                                    X
               ITEMERR(PROCFILE)                                       X
               QIDERR(PROCFILE)
         EXEC CICS DELETEQ TS QUEUE(QUEUEID)
PROCFILE DS    0H
         EXEC CICS HANDLE CONDITION                                    X
               DISABLED(READERR)                                       X
               DSIDERR(READERR)                                        X
               INVREQ(READERR)                                         X
               NOTFND(READERR)                                         X
               NOTOPEN(READERR)
         CLC   SAVENAME,DAT1           IS IT A DAT1 FILE REQUEST?
         BE    PROCDAT1
         CLC   SAVENAME,DAT2           IS IT A DAT2 FILE REQUEST?
         BE    PROCDAT2
         B     FILEERR
PROCDAT1 DS    0H
         EXEC CICS HANDLE CONDITION                                    X
               ENDFILE(FINDAT1)
* PERFORM DYNAMIC ALLOCATION AND OPEN/CLOSE FOR DAT1 FILE.
         MVC   DISP,DFHVALUE(OLD)
         EXEC CICS SET DATASET(CFTDAT1) OBJECTNAME(DSNDAT1)            X
               DISPOSITION(DISP)
         EXEC CICS SET DATASET(CFTDAT1) ENABLED
         EXEC CICS SET DATASET(CFTDAT1) OPEN
* WRITE TO 'CFTRNNNN' A HEADER RECORD SO THE FILE TRANSFER MAIN MODULE
* CAN READ AND PROCESS IT.
         MVC   DAT1IN(8),SAVEFILE         MOVE PASSED FILENAME.
         EXEC CICS WRITEQ TS QUEUE(QUEUEID) FROM(DAT1IN) LENGTH(H80)
* PROCESS RECORDS FROM ESDS FILE.
         EXEC CICS STARTBR DATASET(CFTDAT1) RIDFLD(AUDFLD) RBA
PROCNXT1 DS    0H
         EXEC CICS READNEXT DATASET(CFTDAT1) RIDFLD(AUDFLD) RBA        X
               LENGTH(H80) INTO(DAT1IN)
         EXEC CICS WRITEQ TS QUEUE(QUEUEID) FROM(DAT1IN) LENGTH(H80)
         B      PROCNXT1
FINDAT1  DS    0H
* A TASK SHOULD BE SCHEDULED HERE TO DISABLE AND CLOSE FILE, BECAUSE
* YOU CAN'T DO IT IN THE SAME TASK.  ALSO OTHER PROCESSING COULD
* BE SCHEDULED (E.G., SUBMIT BATCH JOB TO CLEAR FILE).
         MVC   CFTDAT1Y,CFTDAT1
         MVC   CFTDAT1Z,=C'GET'
         EXEC CICS START TRANSID('ZCLO') INTERVAL(000100) REQID('ZCL') X
               FROM(CFTDAT1X) LENGTH(H11)
         B      FINISH
PROCDAT2 DS    0H
         EXEC CICS HANDLE CONDITION                                    X
               ENDFILE(FINDAT2)
* PERFORM DYNAMIC ALLOCATION AND OPEN/CLOSE FOR DAT1 FILE.
         MVC   DISP,DFHVALUE(OLD)
         EXEC CICS SET DATASET(CFTDAT2) OBJECTNAME(DSNDAT2)            X
               DISPOSITION(DISP)
         EXEC CICS SET DATASET(CFTDAT2) ENABLED
         EXEC CICS SET DATASET(CFTDAT2) OPEN
* WRITE TO 'CFTRNNNN' A HEADER RECORD SO THE FILE TRANSFER MAIN MODULE
* CAN READ AND PROCESS IT.
         MVC   DAT1IN(8),SAVEFILE         MOVE PASSED FILENAME.
         EXEC CICS WRITEQ TS QUEUE(QUEUEID) FROM(DAT1IN) LENGTH(H80)
* PROCESS RECORDS FROM ESDS FILE.
         EXEC CICS STARTBR DATASET(CFTDAT2) RIDFLD(AUDFLD) RBA
PROCNXT2 DS    0H
         EXEC CICS READNEXT DATASET(CFTDAT2) RIDFLD(AUDFLD) RBA        X
               LENGTH(LENG) SET(DATA2OUT)
         EXEC CICS WRITEQ TS QUEUE(QUEUEID) FROM(0(R7)) LENGTH(LENG)
         B      PROCNXT2
FINDAT2  DS    0H
* A TASK SHOULD BE SCHEDULED HERE TO DISABLE AND CLOSE FILE, BECAUSE
* YOU CAN'T DO IT IN THE SAME TASK.  ALSO OTHER PROCESSING COULD
* BE SCHEDULED (E.G., SUBMIT BATCH JOB TO CLEAR FILE).  NOTE: AN ATCV
* ABEND MAY OCCUR IF THE STARTED TASK EXECUTES 'BEFORE' THE FILE
* TRANSFER PROCESS IS COMPLETED (BY ADJUSTING INTERVAL TIME WILL
* CIRCUMVENT THIS FROM OCCURING).
         MVC   CFTDAT1Y,CFTDAT2
         MVC   CFTDAT1Z,=C'GET'
         EXEC CICS START TRANSID('ZCLO') INTERVAL(000100) REQID('ZCL') X
               FROM(CFTDAT1X) LENGTH(H11)
         B      FINISH
* SHAREABLE TYPE PROCESSING ROUTINE.
PROCSHAR DS    0H
         MVC   SAVECFT,HEADER         MOVE 'CFT' HEADER.
         MVC   SAVECFTN,SAVENAME      MOVE PASSED NAME TO COMMAREA.
* CHECK IF DATA QUEUE ID EXISTS.  CFTNNNN
         EXEC  CICS HANDLE CONDITION                                   X
               LENGERR(LENGERR)                                        X
               ITEMERR(CFTNF)                                          X
               QIDERR(CFTNF)
         EXEC  CICS READQ TS                                           X
               QUEUE(SAVECNTL)                                         X
               INTO(DAT1IN)                                            X
               LENGTH(H80)                                             X
               NUMITEMS(NUMITEMS)                                      X
               ITEM(STATITEM)
         B     FINISH                GOOD QUEUE, LET HFTR HAVE IT.
CFTNF    DS    0H
         MVC   AUDIRCC,=C'RC=CFTNF  '
         B     ERRSTAT
LENGERR  DS    0H
         MVC   AUDIRCC,=C'RC=LENGERR'
         B     ERRSTAT
TERMERR  DS    0H
         MVC   AUDIRCC,=C'RC=TERMERR'
         B     ERRSTAT
TYPEERR  DS    0H
         MVC   AUDIRCC,=C'RC=TYPEERR'
         B     ERRSTAT
READERR  DS    0H
         MVC   AUDIRCC,=C'RC=READERR'
         B     ERRSTAT
FILEERR  DS    0H
         MVC   AUDIRCC,=C'RC=FILEERR'
         B     ERRSTAT
FINISH   DS    0H
         MVC   AUDIRCC,=C'RC=00     '
         BAL   R6,AUDITRTN
         B     RETURN
ERRSTAT  DS    0H
         BAL   R6,AUDITRTN
         MVC   SAVERC,=X'0016'         SETS A BAD RETURN CODE
         B     RETURN
AUDITRTN DS    0H
         EXEC CICS ASKTIME ABSTIME(ASKTIMED)
         EXEC CICS FORMATTIME ABSTIME(ASKTIMED) MMDDYY(AUDIDATE)       X
               TIME(AUDITIME) DATESEP('/') TIMESEP(':')
         MVC   AUDIEXIT,=C'GET'
         MVC   AUDINAME,SAVEFILE
         MVC   AUDITERM,TERMID
         EXEC CICS WRITE DATASET(CFTAUDIT) FROM(AUDITOUT)              X
               RIDFLD(AUDFLD) RBA
         MVI   AUDITOUT,X'40'
         MVC   AUDITOUT+1(L'AUDITOUT-1),AUDITOUT
         BR    R6
H0       DC    H'0'
H1       DC    H'1'
H8       DC    H'8'
H11      DC    H'11'
H80      DC    H'80'
MASK5    DC    X'4020202020202120'
CFTAUDIT DC    CL8'CFTAUDIT'
CFTDAT1  DC    CL8'CFTDAT1 '
CFTDAT2  DC    CL8'CFTDAT2 '
DSNDAT1  DC    CL44'CICSI.DEV1.CFTDAT1                          '
DSNDAT2  DC    CL44'CICSI.DEV1.CFTDAT2                          '
HEADER   DC    CL3'CFT'
HEADCFTR DC    CL4'CFTR'
PERMID   DC    CL1'P'
SHARID   DC    CL1'S'
LISTID   DC    CL1'L'
TERMTBL  DC    C'DLS5'
         DC    C'PCT2'
         DC    C'9999'
DAT1     DC    C'DAT1'
DAT2     DC    C'DAT2'
RETURN   DS    0H
         MVC   0(20,COMPTR),SAVECOM
         EXEC CICS RETURN
         LTORG
         END

This article will be continued in next month's issue when we shall
be publishing the source code for the UGETCLOS routine and the
CICS file transfer exit program, UPUTFILE.


Dave Stauss
Staff Software Specialist (USA) ) Xephon 1990


