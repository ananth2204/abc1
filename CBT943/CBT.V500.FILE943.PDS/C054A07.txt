CICS internals revisited

I was recently faced with solving two mysterious problems in
my major production CICS region.  As a result, an article in
the July 1989 issue of CICS Update combined with these
incidents prompted me to write the following.  The article to
which I refer is Controlling CICS dataset names.  The author,
PJ Butler, presented an excellent solution to a difficult problem
along with a program (DALLOC) containing a major flaw.
The portion of the program that presents a problem is as
follows:

                 LINKAGE SECTION.
                *    BLL CELLS FOR ADDRESSING THE DALLOC RECORD.
                 01  BLL-CELLS.
                     03 FILLER                     PIC S9(8) COMP.
                     03 BLL-BC-REC                 PIC S9(8) COMP.
                *    RECORD LAYOUT
                 01  BC-RECORD.
                     03 BC-CICS-NAME.
                       05 BC-CICS-NAME-INITIAL     PIC X.
                       05 FILLER                   PIC X(7).
                     03 BC-DATASET-NAME            PIC X(44).
                     03 BC-CICSD-IND               PIC X.
                     03 FILLER                     PIC X(8).
                     03 BC-DATE                    PIC 9(6).
                     03 BC-PROGRAM                 PIC X(4).
*********************************************************
                 PROCEDURE DIVISION.
                *    START A BROWSE.
                     MOVE SPACES TO BC-CICS-NAME.
                     EXEC CICS STARTBR
                               DATASET('DALLOC')
                               RIDFLD(BC-CICS-NAME)
                               END-EXEC.

The immediate result of executing the first line of code in this
program is a corrupt Common System Area (CSA) and a high
probability of at least a transaction abend if not a CICS crash.
If there is not a crash when this program is executed, an S0C4
abend at CICS termination is almost guaranteed.

As I said, some recent incidents in my own shop were part of
my impetus for writing this article.  In one incident, for no
obvious reason, my major production CICS address space
started getting S0C4 abends at shutdown.  All of the normal
shutdown functions were being performed.  The PLTSD
programs were being executed and my recovery file was being
properly written for a warm start at the next execution.  For
some reason, however, the DFH1799 xxxxxxxx
TERMINATION OF CICS/VS IS COMPLETE message would
be followed immediately by an S0C4 abend.  In the second
incident, CICS suddenly stopped dispatching all tasks in a
specific transaction group.  By using our CICS monitor and the
CEMT transaction, I determined that the CMAX (maximum
task) value for this transaction class had been set to zero
instead of its normal value.  Experimentation in a test region
proved that it is not possible to set a CMAX value to zero using
CEMT.

These two seemingly unrelated problems turned out to have
very similar causes.  My research in finding the solutions to
these problems, coupled with the code segment shown above,
has led me to the conclusion that there is a lack of
understanding (at least among newer programmers) about the
function of the Base Locator for Linkage (BLL) cells in
command-level CICS programs.  This lack of understanding is
not totally surprising if one examines the CICS command-level
interface.  The command-level interface has been extremely
effective in increasing the productivity of CICS programmers
by almost eliminating the need to understand CICS internals.
The one exception to this is in the use of BLL cells.

To understand how my two problems (and my prediction of
dire consequences if the DALLOC program is executed as
shown) are connected to each other, it is necessary to
understand how BLL cells work in a CICS program.  To
explain how BLL cells work and why they even exist, it is
necessary to go back into a little bit of CICS history and
internals.

HISTORY

In releases of CICS prior to the introduction of the command-
level interface (DFHEIC), all applications were written in what
is now called macro-level code.  It was called macro because it
was necessary to imbed Assembler macro instructions (to
invoke CICS services) in the program regardless of its native
language.  The source code was pre-processed to convert the
Assembler macro instructions into the native programming
language very similarly to the way that command-level
instructions are currently translated by a pre-processor program
prior to invoking the compiler or assembler.  (For simplicity, I
will restrict the rest of this discussion to COBOL programs.
Other languages use techniques similar to those described but
with different terminology.)

COBOL programs produced by this hybrid compile process
were termed quasi re-entrant.  All concurrent users of a
program shared the same copy of the working-storage section
and the procedure division.  As a result, a programmer could
only rely on variables defined in working storage having values
in them that were placed there after the program was
dispatched by CICS.  A request for CICS services (reading a
file for example) that resulted in a temporary suspension of the
task could give another user (task) an opportunity to execute a
portion of the program that could alter the contents of a
working-storage variable that had been set by the user (task)
currently waiting for a file I/O to complete.

Since the contents of working storage could not be relied on for
long periods of time, those variables that were unique to what a
program was doing during any execution were stored in a CICS
control block (the Transaction Work Area or TWA) that served
the function of the command-level COMMAREA.  Working
storage was used largely to store static information like error
messages or very short lived variables like subscripts.

The TWA is appended to a CICS control block (the Task
Control Area or TCA) and has to be addressed, like any other
CICS internal control block, through the use of BLL cells.  In
fact, from its earliest release, CICS has been made up of a
series of control blocks each of which contains the address of
one or more additional control blocks.  To do anything at all in
a macro-level program, it is necessary to have a fairly intimate
knowledge of the storage chains contained in the CICS control
blocks.  There are certain control blocks that are mandatory in
every program.  Others are optional depending on the functions
that the program performs.  All of them are referenced by
using (and sometimes manipulating) BLL cells.  Most macro-
level COBOL programs started something like this:

                MOVE CSAOPFLA TO CSAOPBAR.
                MOVE CSACDTA  TO TCACBAR.
                MOVE TCAFCAAA TO TCTTEAR.
                MOVE TCTTEDA  TO TIOABAR.
                ADD 12 TIOABAR GIVING MAPBAR.

When a macro-level program receives control from CICS, the
only storage area that can be referenced immediately is the
central CICS control block, the CSA.  It is entirely the
programmer's responsibility to establish addressability to any
other control block(s) that are to be accessed by moving data
fields containing addresses to the appropriate BLL cell.  The
strange looking segment of code above is the minimum
required to be able to access the area of storage where CICS
has stored input from a user's terminal.  Each of the objects of
the move statements ends (by convention) in the suffix BAR
which is an acronym for Base Address Register.  Each of these
BAR fields is defined in a BLL-CELL list in the program's
linkage section.  The use of the term Base Address Register
reveals just how close to the underlying machine architecture
macro-level programs really are.

BLL CELLS TODAY

This mechanism has remained unchanged through all of the
releases of CICS up to and including Version 2.1.  It worked
then exactly as it works now.  The introduction of the
command-level (EIP) interface made CICS programming much
easier by insulating the programmer from the CICS control
block/storage chain internal architecture.  It did nothing to alter
that architecture.  The CICS control blocks still exist much as
they did in earlier releases of CICS and still need to be
addressed in the same way.  The command-level interface
assumes the responsibility for establishing addressability to the
CICS control blocks instead of requiring the programmer to do
so.  Most of the information that an application program might
need from a CICS control block (eg terminal address,
transaction identifier, or the date) is made available in the
Execute Interface Block to eliminate the need to access the
actual CICS control block that contains this data.

The areas of storage to be referenced in the linkage section of a
COBOL program require a BLL cell.  Each storage area is
defined with an 01 level declaration.  All of the storage area
declarations must be preceded with a declaration of a list of
BLL cells.  The classic text book illustration is usually
something like this:

                01  BLL-CELLS.
                    02  FILLER                 PIC S9(08) COMP.
                    02  REC1-POINTER           PIC S9(08) COMP.
                    02  REC2-POINTER           PIC S9(08) COMP.

                01  REC1.
                    02  RECORD1-ID             PIC  X(04).
                    02  REC1-KEY               PIC  9(09).
                    02  REC2-DATA              PIC  X.

                01  REC2.
                    02  RECORD2-ID             PIC  X(04).
                    02  REC2-KEY               PIC  9(09).
                    02  REC2-DATA              PIC  X.

The most significant thing about the BLL cell definitions is that
there must be one BLL cell for each subsequent 01 level group
declaration and that the BLL cells are defined in the same
sequence as the storage areas that they will be used to address.
(A storage area larger than 4096 bytes will require multiple
BLL cells.)  The actual storage occupied by, for example,
REC1 could be anywhere in the CICS region's Dynamic
Storage Area (DSA).  Prior to any reference to a field in
REC1, it is necessary to ensure that the BLL cell pointing to
REC1 contains a valid storage address.  This associates the
program's definition of REC1 with the actual storage that
contains REC1.  In other words, the program has addressability
to REC1.  This is accomplished by executing some CICS
command-level instruction that contains the SET option.
Usually, this is a READ or RECEIVE instruction.  Less
frequently, the GETMAIN or the ADDRESS instruction is
used.  In either case, after the successful completion of the
instruction, the BLL cell referenced will contain a valid storage
address.  Note that the instruction that is to initialize the BLL
cell must have completed successfully.  A READ instruction
that completes with a 'record not found' return code will not
successfully initialize the BLL cell referenced.

The real key to understanding how BLL cells work is knowing
what the FILLER under the BLL-CELLS statement is for.
This can also be useful, on occasions, for debugging a CICS
program.  Like any variable name that is declared in a COBOL
program, the BLL cells must have storage allocated to them.
In the case of BLL cells, the required storage is located in the
program's Task Global Table (TGT).  This is a storage area
contained in all COBOL programs.  It is created by the
compiler and is located immediately following the working-
storage section.  The TGT is used to store much more than
BLL cells, but these are our only concern in this context.  The
address of each storage area referenced in the linkage section is
stored in a BLL cell in the TGT and must be loaded into a
register prior to any reference to the storage area.  (Ultimately,
any reference to any area of storage is a reference to the
address stored in some register plus an offset value).  The
compiler determines which actual register will be used for
which BLL cell.

When a command-level COBOL program is prepared for
execution in CICS, several things happen.  If necessary, the
program is loaded into virtual storage from DASD.  Then, a
copy of the entire working-storage section is made for the
exclusive use of one task.  This copy includes the TGT and,
implicitly, the storage used for the BLL cells.  As part of the
preparation, CICS initializes some of the BLL cells.  The code
used to do this can be found in module DFHEIP.  BLL-1 and
BLL-2 are reserved for COBOL internal use.  BLL-3 is used to
address the Execute Interface Block (DFHEIB) that will be
created for every command-level program.  BLL-4 will address
DFHCOMMAREA.  If a program does not contain an explicit
reference to DFHCOMMAREA, the command-level pre-
processor program will insert one to define a COMMAREA
one byte long in the linkage section.

BLL-5 will be used to address the '01  BLL-CELLS' storage
definition.  (Note:  If DFHCOMMAREA is larger than 4096
bytes, the actual BLL cell number used will be greater than 5.)
This is done by moving the address of the fifth BLL cell in the
TGT to the fifth BLL cell in the TGT.  In other words, BLL-5
contains its own address or points to itself.  The storage that is
referenced when a program refers to a BLL cell name by using
the SET option of a CICS command is actually in the
program's TGT.  This is how CICS addresses the BLL cells
that a programmer defines names for and how they become
available as operands for COBOL program statements.  The
last thing that DFHEIP does, in respect of the BLL cells, is to
store the address of the CICS CSA in BLL-6.  I can only guess
that this was done by IBM to prevent an accidental reference to
storage address zero (the value that the compiler initializes the
BLL cell with) by selecting an address that is guaranteed to
exist in every CICS system.

The BLL cells used by CICS are initialized automatically.  It is
the programmer's responsibility to manage the others.
Normally, as stated previously, valid addresses for storage
areas are obtained by using the SET option of a CICS
instruction.  It is still the programmer's responsibility to ensure
addressability by placing a SERVICE RELOAD instruction in
the program after doing  anything to alter the contents of a BLL
cell.  This will inform the compiler that it is necessary to reload
the actual machine register used to address the storage area
prior to the next reference to any field in the area.  The register
will, of course, be loaded from the appropriate BLL cell area in
the TGT.

If a programmer fails to initialize a BLL cell prior to referring
to the storage area that it references, the results are what IBM
likes to call 'unpredictable'.  This is true for all BLL cells
except for (in our example) BLL-6.  Since this BLL cell was
initialized with the address of the CICS CSA, references to the
storage area that it is supposed to point to will actually be to
the CSA.

As an aside, I should point out that merely having a valid
storage address in a BLL cell is not a guarantee that a program
will function properly.  It is also necessary to ensure that the
storage area being addressed is large enough to accommodate
the functions being performed.  A successful RECEIVE
operation for terminal input will cause CICS to allocate only
enough storage to contain the actual terminal input.  This is
frequently only a few characters representing the fields that
were actually changed by a user.  Attempting to use this small
storage area to build a large output screen to be returned to the
terminal will very likely result in overlaying storage that is
allocated to some other CICS task.  The proper approach for
this situation is to save any information needed from the
terminal input, use the FREEMAIN instruction to release the
storage that CICS acquired, and then use the GETMAIN
instruction to obtain an area of storage large enough to
accommodate all of the terminal output.

THE SOLUTION TO THESE MYSTERIES

My two problems turned out to be two different results of
program references to storage areas supposedly addressed by
BLL cells.  In both cases, the BLL cells had not been properly
initialized by the program and references to the storage areas
involved resulted in the destruction of CICS internal storage.

The S0C4 mystery was caused by the system register save area
address stored in the second fullword of the CICS CSA being
invalid.  The first 72 bytes (18 fullwords) of the CICS CSA are
the register save area where information is saved when CICS
receives control from the operating system.  The application
program involved thought that it was moving 6 bytes of data to
the sixth byte of a record storage area.  In fact, it was moving
data into the second and third fullwords of the CICS CSA
because the BLL cell used to address the program's storage
definition had not been initialized by the program.  When CICS
attempted to return to MVS/XA by using the invalid address
acquired from the register save area in the corrupted CICS CSA
the result was a protection exception abend.

The mystery of CICS failing to dispatch tasks in a specific
CICS transaction class was very similar.  As with my first
incident, there was an instruction to move data to a storage area
addressed by a BLL cell.  Again, the BLL cell had not been
initialized.  This time, the field being referenced was at offset
X'74E' into the storage area that the BLL cell was referencing.
This offset, combined with the data being moved, just
happened to cause a transaction class maximum task value (SIT
CMXT parameter) to be set to zero.  As soon as that happened,
CICS quit dispatching tasks in that transaction group.  It was
very lucky that the  packed decimal format of the CMXT field
was not altered or the results could have been much worse.

As you can easily see by now, the code segment at the
beginning of this article will result in similar corruption of the
CICS CSA.  In this instance, the first 2 fullwords (8 bytes) of
the CSA will contain spaces.  Since these are part of the
register save area, some portion of the saved register
information will be destroyed.  This includes the address of the
operating system's register save area so attempting to restore
the registers at CICS termination will probably result in an
S0C4 abend.

My intent in writing this article has not been to criticize, but to
educate.  I hope that I have succeeded.  With the command-
level interface, it is very easy to become isolated from the way
that CICS functions internally.  In fact, IBM's stated intention
is to first reduce and eventually eliminate the need (and the
ability) to access any of the CICS internal control blocks.
When that intention becomes a reality, life will become a little
bit simpler for those of us who are involved with CICS on a
daily basis.  Until that day actually arrives, we must remember
what an intricate and delicate thing CICS really is.


Keith L Alloway
Senior Systems Programmer
Associated Grocers Inc (USA)               ) Xephon 1990


