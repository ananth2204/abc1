Macro-level and command-level programs

With newer systems being developed that interface with older
systems, it sometimes becomes necessary to make an existing
macro-level CICS program call a command-level subroutine.
When the command-level subroutine expects to receive a
parameter passed via the communications area interface, the call
cannot be performed directly.  Most macro-level programs know
nothing about the command-level interface.

To get around this problem it is necessary to link to an
intermediate command-level stub program that does not require a
COMMAREA.  The name of the original subroutine, the address
of the COMMAREA, and length of the COMMAREA are passed
to the stub program in one of the many ways that macro-level
programmers have at their disposal.  The stub program can then
set up addressability to the COMMAREA and call the original
subroutine in the usual way.

Figure 1 shows the flow of the programs. The steps to implement
this program flow are:

1   In the calling program define a COMMAREA with the same
definition that would be used if it were a command-level
program being called.

2   In the calling program, save the name of the original
subroutine, the address of the COMMAREA, and the length
of the COMMAREA in a commonly available storage
medium.  The choices are generally in the task work area, the
terminal work area, or a temporary storage record.  It
simplifies the interface to use the task work area or the
terminal work area, but generally they are being used by the
existing macro-level system. In this case, the temporary
storage record becomes the least invasive choice.  Some
program pieces are shown below that should be inserted into
the macro-level program to save the information in a
temporary storage queue keyed on the terminal-id and a
constant.

3   Write a command-level stub program that retrieves the
information saved by the macro-level program, sets up
addressability to the COMMAREA, and calls the command-
level subroutines using command-level linkage.

A sample general-purpose stub program that uses temporary
storage is also shown below.

SAMPLE MACRO-LEVEL COBOL PROGRAM

These program pieces demonstrate how the macro-level program,
written in COBOL, could be set up to save the necessary
information in a temporary storage queue.

 .
 LINKAGE SECTION.
 .
     02  WSDBAR             PIC S9(8) COMP.
     02  TSIOABAR           PIC S9(8) COMP.
     02  COMMAREA-BAR       PIC S9(8) COMP.
 .
 01  WORKING-STORAGE-DATA.
*
*    THE NAME OF THE TEMPORARY STORAGE QUEUE
*
     02  TS-NAME.
         03  TS-NAME-1      PIC X(4).
         03  TS-NAME-2      PIC X(4).
     02  FILLER             PIC X(92).
*
*    THE FORMAT OF THE TEMPORARY STORAGE RECORD
*
 01  DFHTSIOA COPY DFHTSIOA.
     02  CA-SUBROUTINE     PIC X(8).
     02  CA-ADDRESS        PIC S9(8) COMP.
     02  CA-LENGTH         PIC S9(4) COMP.
     02  FILLER            PIC X(86).
*
*    THE COMMAREA FOR THE CALL TO MYSUB
*
 01  MYSUB-COMMAREA COPY MYSUBCA.
 .
 .
 PROCEDURE DIVISION.
 .
*
*    GET STORAGE FOR THE COMMAREA FOR THE CALL TO MYSUB
*
     DFHSC TYPE=GETMAIN,CLASS=USER,NUMBYTE=4096,INITIMG=00
     MOVE TCASCSA          TO COMMAREA-BAR
*
*    INITIALISE THE COMMAREA FOR THE CALL TO MYSUB
*
     .
     .
*
*    GET STORAGE FOR NAME OF THE TEMPORARY STORAGE QUEUE
*
     DFHSC TYPE=GETMAIN,CLASS=USER,NUMBYTE=104,INITIMG=00
     MOVE TCASCSA          TO WSDBAR.
*
*    GET STORAGE FOR THE TEMPORARY STORAGE RECORD
*
     DFHSC TYPE=GETMAIN,CLASS=TEMPSTRG,NUMBYTE=104,INITIMG=00
     MOVE TCASCSA          TO TSIOABAR
     MOVE 104              TO TSIOAVRL
*
*    BUILD THE TEMPORARY STORAGE RECORD
*
     MOVE 'MYSUB'          TO CA-SUBROUTINE
     MOVE COMMAREA-BAR     TO CA-ADDRESS
     MOVE +4096            TO CA-LENGTH
*
*    DELETE ANY PREVIOUS ENTRIES IN THIS TS QUEUE
*        (IGNORING ANY SYSTEM ERRORS THAT MIGHT OCCUR)
*
     MOVE 'XXXX'           TO TS-NAME-1.
     MOVE TCTTETI          TO TS-NAME-2.
     DFHTS TYPE=PURGE,DATAID=TS-NAME
*
*    WRITE THIS FIRST ENTRY IN THE TS QUEUE FOR THE STUB
*
     DFHTS TYPE=PUTQ,DATAID=TS-NAME,TSDADDR=TSIOAVRL,NORESP=NEXT
     DFHPC TYPE=ABEND,ABCODE='APUT'
*
*    COME HERE ON NORMAL RESPONSE FROM PUTQ
*
 NEXT.
*
*    LINK TO THE STUB PROGRAM
*
     DFHPC TYPE=LINK,PROGRAM=CLSTUB,NORESP=BACKHERE
     DFHPC TYPE=ABEND,ABCODE='stub'
*
*    COME HERE ON NORMAL RESPONSE FROM LINK
*
 BACKHERE.

SAMPLE COMMAND-LEVEL COBOL STUB PROGRAM
 IDENTIFICATION DIVISION.
 PROGRAM-ID     CLSTUB.
 REMARKS.
*
     IF A CLIENT WANTS TO CALL A COMMAND-LEVEL SUBROUTINE
     FROM A MACRO LEVEL PROGRAM, IT IS VERY
     DIFFICULT TO PASS A COMMAREA
*
     THIS COBOL COMMAND-LEVEL ROUTINE IS A SAMPLE STUB
     THAT MIGHT BE USED AS AN INTERMEDIATE INTERFACE BETWEEN
     THE MACRO LEVEL PROGRAM AND THE COMMAND-LEVEL SUBROUTINE.
*
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 77  TS-LENGTH             PIC S9(4) COMP VALUE +100.
 77  CALL-LENGTH           PIC S9(4) COMP VALUE ZERO.
 77  CALL-SUBROUTINE       PIC X(8) VALUE SPACES.
*
*    THE NAME OF THE TEMPORARY STORAGE QUEUE
*
 01  TS-NAME.
     02  TS-NAME-1         PIC X(4).
     02  TS-NAME-2         PIC X(4).
*
*    THE FORMAT OF THE TEMPORARY STORAGE RECORD
*
 01  TS-CA-DATA.
     02  CA-SUBROUTINE     PIC X(8).
     02  CA-ADDRESS        PIC S9(8) COMP.
     02  CA-LENGTH         PIC S9(4) COMP.
     02  FILLER            PIC X(86).
*
 LINKAGE SECTION.
 01  DFHCOMMAREA           PIC X.
 01  BLLCELLS.
     02  FILLER            PIC S9(8) COMP.
     02  COMMAREA-BAR      PIC S9(8) COMP.
 01  CALL-COMMAREA         PIC X.
 PROCEDURE DIVISION.
*
*    SET UP FOR AN ERROR IN THE TS READQ COMMAND
*
     EXEC CICS HANDLE CONDITION
          INVREQ    (ERROR-1)
          IOERR     (ERROR-2)
          ISCINVREQ (ERROR-3)
          ITEMERR   (ERROR-4)
          LENGERR   (ERROR-5)
          QIDERR    (ERROR-6)
          SYSIDERR  (ERROR-7)
          END-EXEC.
*
*    READ THE FIRST ENTRY IN THE TS QUEUE FOR THE ADDRESS
*
     MOVE 'XXXX'           TO TS-NAME-1.
     MOVE EIBTRMID         TO TS-NAME-2.
     EXEC CICS READQ TS
          QUEUE(TS-NAME)
          INTO(TS-CA-DATA)
          LENGTH(TS-LENGTH)
          END-EXEC.
*
*    SET UP FOR AN ERROR IN THE LINK
*
     EXEC CICS HANDLE CONDITION
          PGMIDERR (ERROR-8)
          END-EXEC.
*
*    SET UP FOR THE CALL TO THE PROGRAM REQUESTED
*
     MOVE CA-ADDRESS       TO COMMAREA-BAR
     MOVE CA-LENGTH        TO CALL-LENGTH
     MOVE CA-SUBROUTINE    TO CALL-SUBROUTINE
     EXEC CICS LINK
          PROGRAM  (CALL-SUBROUTINE)
          COMMAREA (CALL-COMMAREA)
          LENGTH   (CALL-LENGTH)
          END-EXEC.
*
*    RETURN TO THE CALLING PROGRAM
*
     EXEC CICS RETURN END-EXEC.
*
*      SET UP FOR ABNORMAL ERRORS
*
 ERROR-1.
     EXEC CICS ABEND ABCODE('AINV') END-EXEC.
 ERROR-2.
     EXEC CICS ABEND ABCODE('AIOE') END-EXEC.
 ERROR-3.
     EXEC CICS ABEND ABCODE('AISC') END-EXEC.
 ERROR-4.
     EXEC CICS ABEND ABCODE('AITE') END-EXEC.
 ERROR-5.
     EXEC CICS ABEND ABCODE('ALEN') END-EXEC.
 ERROR-6.
     EXEC CICS ABEND ABCODE('AQID') END-EXEC.
 ERROR-7.
     EXEC CICS ABEND ABCODE('ASYS') END-EXEC.
 ERROR-8.
     EXEC CICS ABEND ABCODE('APGM') END-EXEC.
*
*    THAT'S ALL FOLKS  (THIS GOBACK IS NEVER EXECUTED)
*
     GOBACK.


Debra Kaye
Software Engineer
Group 1 Software Inc (USA) ) Group 1 Software 1989


