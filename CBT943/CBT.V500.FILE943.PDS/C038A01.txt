 An alternative to the ADYN transaction
As those who have used the CICS-supplied de-allocation transaction ADYN will
know, itUs not exactly user friendly.  So, with the assistance of two articles I
came across in MVS Update, I set out to write a friendlier version that would
remove the need for the user to enter the DSNAME or issue the CEMT command
during de-allocation.  I came up with a transaction which initially sends the
screen shown in Figure 1 and works in the following way.
DE-ALLOCATION
During de-allocation it locates the DSNAME by using the DDNAME and writes it out
to a temporary storage queue using the DDNAME as the queue name.  It then
invokes CEMT to close the dataset.  Finally, it de-allocates the dataset from
the CICS region by issuing an SVC99.
ALLOCATION
For re-allocation the user enters the DDNAME to be allocated.  The program reads
the temporary storage queue written by the de-allocation routine.  It then
issues an SVC99 to allocate the dataset name found in the temporary storage
queue and finally invokes CEMT to open the dataset.
NOTES
%    If no queue is found (maybe a new dataset is being added), it requests the
user to enter the DSNAME.
%    If a queue does exist for this DDNAME but the user has keyed in a DSNAME,
the allocation is performed on the DSNAME that has been keyed in (maybe a
different dataset is required).
%    All return codes and error codes are displayed on the screen and can be
found in the OS/VS2 MVS SPL: Job Management manual.
%    The system library SYS1.AMODGEN will need to be added to the SYSLIB search
chain to pick up IEFJFCBN and IEFTIOT1 macros when assembling the program.
%    This transaction runs successfully in a CICS 1.6.1-MVS/SP environment.
PROGRAM SOURCE CODE
*  PROGRAM WRITTEN TO ALLOW DYNAMIC ALLOCATION / DE-ALLOCATION OF
*  DATASETS WHILE CICS IS RUNNING.
*  THE DSNAME IS PUT INTO A TS QUEUE AT DE-ALLOCATION TIME AND THEN
*  READ IN DURING ALLOCATION.  THUS PREVENTING THE NEED TO CODE THE
*  DSNAME WHEN RE-ALLOCATING THE DATASET.
*  TO INVOKE ENTER : U346
UT346   TITLE 'DYNAMIC DE/ALLOCATION OF CICS DATASETS'
JFCBDSCT DSECT ,
         IEFJFCBN LIST=NO
TIOTDCST DSECT ,
         IEFTIOT1
UT346    CSECT
         EXEC  CICS HANDLE AID ENTER,CLEAR(RETURN),PA1(PA1)
         EXEC  CICS HANDLE CONDITON MAPFAIL(INVALOP)
SENDIT   MVC   OPTIONL,=H'-1'
SENDIT1  EXEC  CICS SEND MAP('UT46M'),MAPSET('UT46S'),                 X
               ALARM,FREEKB,CURSOR,ERASE
         EXEC  CICS RECEIVE MAP('UT46M'),MAPSET('UT46S')
         CLI   OPTIONI,C'A'              IS OPTION TO ALLOCATE D/S ?
         BE    ALLOCRTN                    YES - THEN GO DO IT.
         CLI   OPTIONI,C'D'              OR IS OPT TO DE-ALLOCATE D/S?
         BNE   INVALOP                     NO - THEN ISSUE ERR MSG.
         CLC   DDNAMEI(8),=CL8' '            YES - CHECK DDNAME
         BE    INVALDD                               HAS BEEN
         CLC   DDNAMEI(8),=XL8'00'                     ENTERED.
         BE    INVALDD
* ROUTINE TO FIND DSNAME
         L     R2,16                     POINT TO CVT
         L     R2,0(,R2)                 POINT TO TCB/ASCB WORDS
         L     R2,4(,R2)                 POINT TO TCB
         L     R2,12(,R2)                POINT TO TIOT
         LA    R1,TIOENTRY-TIOT1         OFFSET TO 1ST TIOT ENTRY
TIOSCAN  AR    R2,R1                     POINT TO 1ST/NEXT ENTRY
         USING TIOENTRY,R2            PROVIDE TIOT ENTRY ADDRESSABILITY
         TM    TIOESTTA,TIOSLTYP         IS THIS ENTRY IN USE ?
         BO    TIOBYPAS                 NO
         CLC   TIOEDDNM,DDNAMEI      IS THIS ENTRY FOR REQUESTED DDNAME
          BE    ALLOCATD               YES - GO USE IT
TIOBYPAS ICM   R1,1,TIOELNGH          GET LENGTH OF THIS TIOT ENTRY
         BNZ   TIOSCAN              CONTINUE IF ANOTHER ENTRY AVAILABLE
NOTFOUND MVC   MSGARE10,=CL67'DDNAME NOT FOUND - NO QUEUE WRITTEN'
         MVC   MSGCEMOO(7),=CL7'CLOSE ='
         B     CEMTCHK
ALLOCATD SR    R1,R1                    CLEAR WORK REGISTER
         ICM   R1,7,TIOEJFCB       GET THE JFCB ADDRESS FOR DATASET
         LA    R1,16(,R1)              INCREMENT PAST JFCB HEADER
         USING JFCBDSCT,R1              PROVIDE JFCB ADDRESSABILITY
         MVC   DSNAME0(44),JFCBDSNM     COPY THE DSNAME TO TS QUEUE
         EXEC  CICS HANDLE CONDITION QIDERR(WRITEQ)
         EXEC  CICS DELETEQ TS QUEUE(DDNAMEI)
WRITEQ   EXEC  CICS WRITEQ TS QUEUE(DDNAMEI),FROM(DSNAMEO),LENGTH(44)
         MVC   FLD1B,=CL28'CLO'
         MVC   MSGCEMOO(7),=CL7'CLOSE ='
         B     CEMTCHK
ALLOCRTN CLC   DDNAMEI(8),=CL8' '        CHECK FOR
         BE    INVALDD                     DDNAME
         CLC   DDNAMEI(8),=XL8'00'           AND IF
         BE    INVALDD                         DSNAME
         CLC   DSNAMEL,=H'1'                      HAS
         BL    READTSQ                             BEEN
         CLC   DSNAMEI(44),=CL44' '                 ENTERED
         BE    READTSQ
         MVC   DSNAM#2(44),DSNAMEI
         B     ALLSET
READTSQ  EXEC  CICS HANDLE CONDITION QIDERR(INVALQN),ITEMERR(INVALQN)
         EXEC  CICS READQ TS QUEUE(DDNAMEI),INTO(DSNAM#2),LENGTH(LEN)
         MVC   DSNAME0(44),DSNAM#2
ALLSET   MVC   DDNAM#2(8),DDNAMEI
         MVC   MSGCEMOO(7),=CL7'OPEN = '
         MVC   FLD1B,=CL28'OPE'
         B     ALLOCHK
* CONVERT DDNAME TO FCT NAME FOR DATABASES - (INSTALLATION DEPENDENT)
*     DATABASE  DDNAME=JHO1DOO  BECOMES  FCTNAME=JHOIPX
*     SECINDEX  DDNAME=JHO1DO1  BECOMES  FCTNAME=JHO1PY1
CEMTCHK  MVC   FLD1A(8),DDNAMEI       MOVE IN DSNAME FOR CEMT CMD
* STMNTS FROM HERE TO LABEL CEMTLNK CAN BE DELETED IF NO DDNAME
* CONVERSION IS REQUIRED FOR CEMT COMMAND.
         CLC   FLD1A+4(2),=C'DO'        IS IT A HDAM DATABASE ?
         BE    HDAMCNV                   YES - THEN CHANGE FOR CEMT
         CLC   FLD1A+4(2),=C'IO'        IS IT A HIDAM DATABASE ?
         BNE   CEMTLNK                   NO - THEN ISSUE CEMT
         MVC   FLD1A+4(3),=C'PI '         YES - THEN CHANGE DDNAME
         B     CEMTLNK                        BEFORE ISSUING CEMT
HDAMCNV  CLI   FLD1A+6,C'0'               HDAM - THEN CHANGE DDNAME
         BNE   SECINDX                      FROM DOO TO PX FOR D/B
         MVC   FLD1A+4(3),=C'PX '            OR DO1 TO PY1 FOR SECINDX
         B     CEMTLNK                       BEFORE ISSUING CEMT
SECINDX  MVC   FLD1A+4(2),=C'PY'
* ISSUE CEMT TO OPEN OR CLOSE DATASET
CEMTLNK  EXEC  CICS LINK PROGRAM('DFHEMTA') COMMAREA(COMREG) LENGTH(20)
         CLC   FLD4+70(6),=C'NORMAL'
         BE    OKCEMT
         MVC   MSGCEMNO(8),FLD1A
         MVC   MSGCEMTO(10),=CL10'FAILED'
         CLI   OPTIONI,C'D'
         BE    DALLOCHK
         B     SENDIT
OKCEMT   MVC   MSGCEMNO(8),FLD1A
         MVC   MSGCEMTO(10),=CL10'SUCCESSFUL'
         CLI   OPTIONI,C'D'
         BE    DALLOCHK
         B     SENDIT
* ISSUE DYNAMIC ALLOCATION - SVC 99
 ALLOCHK  LA    R1,ALLOC            LOAD R1 W/ADDR OF ALLOC PARM LIST
         B     SVC99
DALLOCHK MVC   DDNAM#1(8),DDNAMEI
         LA    R1,DEALLOC          LOAD R1 W/ADDR OF DEALLOC PARM LIST
SVC99    SVC   99                   ISSUE DYNALLOC SVC
         LTR   R15,R15               CHECK RETURN CODE
         BZ    CHKCODES               IS ZERO, GO DISPLAY RETURN CODES
         MVC   MSGARE20,=CL67'ERROR HAS OCCURRED' ELSE ISSUE ERROR MSG
* DISPLAY RETURN CODES
CHKCODES MVC   RETCODE(12),=3F'00'    CLEAR OUR RETURN AREA
         ST    R15,RETR15#              THEN MOVE
         MVC   RETR15(2),RETR15#+2        RETURN CODE
         CLI   OPTIONI,C'A'
         BE    ALLCNV
         MVC   ERROR##(2),ERROR#1           ERROR CODE FOR DEALLOC
         MVC   INFO##(2),INFO#1             & INFO TO CONCNV WORK AREAS
         B     CONCNV
ALLCNV   MVC   ERROR##(2),ERROR#2           ERROR CODE FOR ALLOC
         MVC   INFO##(2),INFO#2             & INFO TO CONCNV WORK AREAS
CONCNV   UNPK  CONVFLD(7),RETR15           CONVERT HEX VALUE
         BAL   R10,CHARCONV                 RETURN CODES INTO
         MVC   MSGRCO(2),CONVFLD+2           CHARACTERS FOR
         UNPK  CONVFLD(7),ERROR##             DISPLAYING ON SCREEN
         BAL   R10,CHARCONV
         MVC   MSGERRO(4),CONVFLD
         UNPK  CONVFLD(7),INFO##
         BAL   R10,CHARCONV
         MVC   MSGINFO(4),CONVFLD
         CLI   OPTIONI,C'A'
         BE    CEMTCHK
         B     SENDIT
* IF PA1 RETURN TO INSTALLATION MAIN MENU
PA1      EXEC CICS START TRANSID('MENU'),TERMID(EIBTRMID)
RETURN   EXEC CICS RETURN
INVALDD  MVC  DDNAMEL,=H'-1'
         MVC  MSGARE20,=CL67'ENTER DDNAME'
         B    SENDIT1
INVALOP  MVC  OPTIONL,=H'-1'
         MVC  MSGARE20,=CL67'ENTER VALID OPTION'
         B    SENDIT1
INVALQN  MVC  DSNAMEL,=H'-1'
         MVC  MSGARE20,=CL67'DSNAME NOT FOUND - PLEASE ENTER IT'
         B    SENDIT1
CHARCONV LA   R7,CONVFLD
         LA   R8,4
CHGALPHA CLI  0(R7),X'FA'      NAME SURE ANY ALPHA
         BL   NEXT             CHARACTERS IN THE RETURN
         SR   R9,R9            CODE ARE DISPLAYED AS
         IC   R9,0(R7)         ALPHA CHARACTERS
         S    R9,=F'57'
         STC  R9,0(R7)
NEXT     LA   R7,1(R7)
         BCT  R8,CHGALPHA
         BR   R10
LEN      DC   H'44'
COMREG   DS   0F
         DC   A(FLD1)
         DC   A(FLD2)
         DC   A(FLD3)
         DC   A(FLD4)
         DC   A(FLD5)
FLD1     DC   CL12'CEMT SET DA('
FLD1A    DC   CL8' '
         DC   CL2') '
FLD1B    DC   CL28'???'
FLD2     DC   H'50'
 FLD3     DC   XL1'00'              * X'80' TO DISPLAY REPLY ON TERM
FLD4     DC   CL80'RETURN AREA FOR CEMT COMMAND'
FLD5     DC   H'80'
DEALLOC  DC   A(DYNRB#1+X'80000000')  POINTER TO REQUEST BLOCK
DYNRB#1  DC   AL1(20,2,0,0)           LENGTH, DEALLOC VERB, FLAGS1
ERROR#1  DC   AL2(0)                  ERROR CODE
INFO#1   DC   AL2(0)                  INFORMATION CODE
TUPTR#1  DC   A(TXTPP#1),AL4(0,0)     TEXT UNIT POINTER, RSVD, FLAGS2
TS#11    DC   XL2'01',AL2(1,8)        DDNAME KEY, NUM, PARMLEN
DDNAME1  DC   CL8' '                  DDNAME FIELD
TS#21    DC   XL2'07',AL2(0)          REMOVE PERM ALLOC ATTR KEY, NUM
TXTPP#1  DC   A(TS#11)                TEXT UNIT POINTER
         DC   A(TS#21+X'80000000')    LAST TEXT UNIT POINTER
ALLOC    DC   A(DYNRB#2+X'80000000')  POINTER TO REQUEST BLOCK
DYNRB#2  DC   AL1(20,1,0,0)           LENGTH, ALLOC VERB, FLAGS1
ERROR#2  DC   AL2(0)                  ERROR CODE
INFO#2   DC   AL2(0)                  INFORMATION CODE
TUPTR#2  DC   A(TXTPP#2),AL4(0,0)     TEXT UNIT POINTER, RSVD, FLAGS2
TS#12    DC   XL2'01',AL2(1,8)        DDNAME KEY, NUM PARMLEN
DDNAM#2  DC   CL8' '                  DDNAME FIELD
TS#22    DC   XL2'02',AL2(1,44)       DSNAME KEY, NUM, PARMLEN
DSNAM#2  DC   CL44' '                 DSNAME FIELD
TS#32    DC   XL2'04',AL2(1,1)        DATASET STATUS KEY, NUM, PARMLEN
STATS#2  DC   XL1'08'                 CONSTANT FOR DISP=SHR
TXTPP#2  DC   A(TS#12)                TEXT UNIT POINTER
         DC   A(TS#22)                TEXT UNIT POINTER
         DC   A(TS#32+X'80000000')    LAST TEXT UNIT POINTER
RETR15#  DC   F'0'
DFHEISTG DSECT
CONVFLD  DS   CL7
RETCODE  DS   0F
RETR15   DS   F
ERROR##  DS   F
INFO##   DS   F
         COPY UT46S
         END  UT346
MAP SOURCE CODE
UT46S    DFHMSD TYPE=&SYSPARM,MODE=INOUT,CTRL=(FREEKB,FRSET),          X
               LANG=ASM,TIOAPFX=YES,STORAGE=AUTO
UT46M    DFHMDI SIZE=(24,80)
         DFHMDF POS=(2,12),LENGTH=54,INITIAL='UT346 - DYNAMIC ALLOCATIOX
               N / DE-ALLOCATION OF DATASETS'
         DFHMDF POS=(5,8),LENGTH=14,INITIAL='ENTER OPTION :'
OPTION   DFHMDF POS=(5,23),LENGTH=1,ATTRB=(UNPROT,NORM,IC,FSET)
         DFHMDF POS=(5,25),LENGTH=1
         DFHMDF POS=(5,30),LENGTH=30,INITIAL='A - ALLOCATE   D - DE-ALLX
               OCATE'
         DFHMDF POS=(7,8),LENGTH=14,INITIAL='       DDNAME :'
DDNAME   DFHMDF POS=(7,23),LENGTH=8,ATTRB=(UNPROT,NORM,FSET)
         DFHMDF POS=(7,32),LENGTH=1
         DFHMDF POS=(9,8),LENGTH=14,INITIAL='      DSNAME :'
DSNAME   DFHMDF POS=(9,23),LENGTH=44,ATTRB=(UNPROT,NORM)
         DFHMDF POS=(9,68),LENGTH=1
         DFHMDF POS=(13,8),LENGTH=9,INITIAL='DATASET ='
MSGCEMN  DFHMDF POS=(13,18),LENGTH=8,ATTRB=(PROT,BRT,ASKIP)
MSGCEMO  DFHMDF POS=(13,27),LENGTH=7,ATTRB=(PROT,NORM,ASKIP)
MSGCEMT  DFHMDF POS=(13,35),LENGTH=10,ATTRB=(PROT,BRT,ASKIP)
         DFHMDF POS=(16,8),LENGTH=24,INITIAL='ALLOCATION RETURN CODE ='
MSGRC    DFHMDF POS=(16,33),LENGTH=2,ATTRB=(PROT,BRT,ASKIP)
         DFHMDF POS=(16,37),LENGTH=12,INITIAL='ERROR CODE ='
MSGERR   DFHMDF POS=(16,50),LENGTH=4,ATTRB=(PROT,BRT,ASKIP)
         DFHMDF POS=(16,56),LENGTH=11,INITIAL='INFO CODE ='
MSGINF   DFHMDF POS=(16,68),LENGTH=4,ATTRB=(PROT,BRT,ASKIP)
MSGARE1  DFHMDF POS=(18,8),LENGTH=67,ATTRB=(PROT,BRT,ASKIP)
MSGARE2  DFHMDF POS=(19,8),LENGTH=67,ATTRB=(PROT,BRT,ASKIP)
         DFHMDF POS=(21,8),LENGTH=30,ATTRB=(PROT,NORM,ASKIP),          X
                INITIAL='CLEAR - EXIT      PA1 - RETURN'
         DFHMSD TYPE=FINAL
         END


Julian Herbert
Systems Programmer
Mercantile and General Reinsurance Co (UK)   ) Xephon 1989


























































