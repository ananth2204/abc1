 Another method of keeping programs resident
A recent article (Making CICS programs resident in the February 1988 issue)
discussed a method of getting around the CICS limitation that, when a program
defined as RESIDENT is NEWCOPYUd, it loses the residency attribute, and is
subject to deletion at, for example, program compression time.  I too view this
as a serious problem, and have encountered it several times.  However, I came up
with a much simpler solution - one that does not require the use of undocumented
(and therefore unsupported) facilities; in fact, it can be done with a command-
level program.
The article suggested using the DFHTM Table Management Macro to scan the PPT
and, when the entry for the program in question is found, toggle the residency
indicators PPTPCRES and PPTRESTG in flag byte PPTTLR.  This solution will work,
but there are several downsides to this approach.
For example, rather than using the more direct LOCATE function of DFHTM, the
program scans the PPT from the beginning, one entry at a time, looking for the
desired program.  Statistically, this method will, on average, result in half
the PPT entries being scanned before the right one is located.  For those who
have thousands of programs in their systems, this could cause a serious paging
spike, as well as consuming quite a few CPU cycles.  While this is not the type
of program one would use many times a day, it could be a concern.
Also, making a program resident by flipping these flag bits may not be the best
way to fix it in storage - after all, CICS Development could have done that.
They didnUt do so because there is the potential for serious problems in making
CICS Storage Management think that a program that it thinks is resident is
actually loaded in the DSA.
It goes without saying that when such a program is NEWCOPYUd, the storage in the
resident area is lost until CICS is brought down and back up.  New storage is
allocated in the DSA and, during events such as program compression, the effect
of having set the resident program indicators is that the storage will be
Tflagged for deletionU, but will never actually be released.
But consider the situation where you NEWCOPY such a program several times
(nothing works right the first time, right?).  When this is done to a non-
resident program, the storage is reclaimed by CICS.  But by making the program
TresidentU in the DSA, the storage is lost to CICS, just as it would be if it
had been in the resident program area.  If you NEWCOPY a program five times, the
storage allocated for each occurrence will be lost.  This may not seem like a
real problem, but it certainly could be if you have large programs or if you
only shut your systems down once a week since the effect of this is cumulative.
Also, CICS Development tends to change the layout of control blocks from time to
time.  They probably do this just to irritate imaginative Systems Programmers.
For example, the flag byte in question here, PPTTLR in the PPT, is at offset
XT1BU in PPT entries for the current releases of CICS; however, in CICS 1.5 it
was at offset XT15U.  Imagine when you go to a new release of CICS, are you
going to remember to reassemble this program before you use it?  Most likely
youUll forget, and damage or crash your system during the day! Better to stick
to the supported interface wherever possible, IUm sure youUll agree.
IUm not saying IUve never zapped a CICS control block here and there, but if you
simply want to fix the program in storage so that following a NEWCOPY it wonUt
be subsequently deleted, a far easier method is to write a program to simply do
a load of the program using the option that fixes it in the DSA.  This is a
supported function, and is very easy to use.  If one were to use the program
shown in the article, virtually all the code in subroutine RTN01 and RTN02 could
be replaced with the following:
     MVC   TCAPCPI,PROGID        set program id
     DFHPC TYPE=LOAD,            perform the load
           LOADLST=NO            fix it in storage
The LOADLST=NO option tells Program Control not to add this program to the
current taskUs LOADLIST; in other words, that the program is to remain resident
even after the end of the task, until it is explicitly deleted by another task.
CICS itself loads tables such as DFHNET this way.  It will not be deleted even
during program compression. As I said, this is a supported option, as documented
in the CICS 1.7 APRM(ML), page 233.  Of course, to NEWCOPY it again, you will
have to do a TDFHPC TYPE=DELETEU first, or the NEWCOPY will fail.
It would be best to rewrite the program using the command-level interface, as
this is IBMUs strategic CICS interface.  The command-level equivalent to the
above macro is:
      EXEC CICS LOAD PROGRAM (name) HOLD
The HOLD option also fixes the program in storage, as documented in the CICS 1.7
APRM(CL), page 343.  Remember to use a corresponding EXEC CICS RELEASE should
you need to NEWCOPY the program again.
Finally, bear in mind that you really donUt need to write a program at all!
After performing the NEWCOPY, just use the CECI transaction (the CICS Command
Interpreter) to enter the LOAD HOLD and RELEASE commands.

Christopher Frank
Lead Systems Programmer (USA) ) Xephon 1988
























































