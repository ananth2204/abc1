Alternative for restricted COBOL verb INSPECT

It is generally known that several COBOL verbs are restricted
within CICS because they use up the partition's GETVIS area
(without giving it back), or they communicate directly with the
operating system instead of interfacing the request with CICS
system services.

However, there are times when a programmer needs the
functionality of one or more of these restricted verbs, without
incurring system degradation.  In my shop, I found instances of
the 'illegal' use of INSPECT in several COBOL programs.  I
came up with an alternative, written in Assembler to avoid a
cumbersome COBOL routine as well as to maximise its
efficiency.

In our shop, many user-keyable fields are sent out with
underlines.  Upon receiving the map, a partially filled-in field
may contain one or more trailing underlines, which BMS treats
as part of the data keyed, dutifully passing them back to the
program.  Supposing the input data field were named NAMEI,
the statement:

    INSPECT NAMEI REPLACING ALL '_' BY SPACE

comes to mind.  The following subroutine will accomplish the
same thing by coding:

    CALL 'UL2SPACE' USING NAMEL

It is important to note that the parameter passed to the
subroutine is the length field (suffix 'L') within the symbolic
map (DSECT), and not the data field (suffix 'I' or 'O').  Since
the distance between the length and data fields is constant we
are able to save the trouble of passing the address of the data
area in addition to the address of the length of that area.  The
subroutine below is for maps without extended attributes.  To
make it support extended attributes, simply change the 'Point to
data field' line from:

            LA 4,3(,2)

to:

            LA 4,7(,2)

If your shop uses both non-extended and extended attribute
mapsets, you will need to assemble two different versions with
appropriately different names.

Knowing that somewhere along the line a programmer would
forget and try to pass the data field instead of the length field, I
included a safeguard: if the 2-byte 'length' passed is less than 1
or greater than 79 (we don't have fields that wrap to another
line), no action will be taken.  Consider a data field containing
the value, 'CARD': the hexadecimal value of the first two
characters 'CA' would be X'C3C1', equivalent to decimal
50,113.  Imagine the silent destruction that could occur if the
subroutine were let loose to parse an area of such length.

The subroutine makes use of the SR/ICM instruction
combination instead of LH to load the 2-byte length into a
register, in order to allow for symbolic maps that do not have
their length fields aligned on halfword boundaries.

* PURPOSE:       CONVERT UNDERLINES TO SPACES IN A FIELD WITHIN A     *
*                BMS SYMBOLIC MAP.                                    *
* PARAMETER:     ADDR OF THE LENGTH FIELD WITHIN SYMBOLIC MAP.        *
*                NOTE: TO PROTECT AGAINST CALLER ACCIDENTALLY PASSING *
*                ADDRESS OF THE ACTUAL DATA FIELD, NO ACTION WILL     *
*                OCCUR IF LENGTH IS LESS THAN 1 OR GREATER THAN 79.   *
* RETURN CODE:   ALWAYS ZERO.                                         *
* ATTRIBUTES:    REENTRANT.                                           *
UL2SPACE CSECT                                                        *
         USING UL2SPACE,15            (NOTIFY ASSEMBLER).             *
         STM   14,12,12(13)            SAVE CALLER'S REGISTERS.       *
         B     UL2START                ==> BYPASS LITERALS.           *
         DC    CL8'UL2SPACE'           SOME INTERNAL ID.              *
UL2START DS    0H                                                     *
         L     2,0(,1)                 POINT TO LENGTH FIELD.         *
         SR    3,3                     MOVE LENGTH VALUE INTO R3,     *
         ICM   3,B'0011',0(2)            ALLOWING FOR UNALIGNMENT.    *
         CH    3,H01                   IS LENGTH LESS THAN 1 ?        *
         BL    UL2EXIT                 ==> YES..GO HOME.              *
         CH    3,H79                   IS LENGTH MORE THAN 79 ?       *
         BH    UL2EXIT                 ==> YES..GO HOME.              *
         LA    4,3(,2)                 POINT TO DATA FIELD.           *
UL2LOOP  DS    0H                                                     *
         CLI   0(4),C'_'               CURRENT CHAR AN UNDERLINE ?    *
         BNE   UL2NEXT                 ==> NOPE...LEAVE THIS ALONE.   *
         MVI   0(4),C' '               ELSE CHANGE CHAR TO SPACE.     *
UL2NEXT  DS    0H                                                     *
         LA    4,1(,4)                 POINT TO NEXT DATA CHAR.       *
         BCT   3,UL2LOOP              ==> LOOP TIL EXHAUSTED.         *
UL2EXIT  DS    0H                                                     *
         LM    14,12,12(13)           RESTORE CALLER'S REGISTERS.     *
         SR    15,15                  CLEAR RETURN CODE.              *
         BR    14                     ==> RETURN TO CALLER.           *
H01      DC    H'01'
H79      DC    H'79'
         END   UL2SPACE


Lawrence Keith Holder
Senior Programmer/Analyst
University of Tennessee at Martin (USA) ) UTM 1990


