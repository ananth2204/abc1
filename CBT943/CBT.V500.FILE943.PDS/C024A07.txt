 A bit manipulation program


GENERAL PROGRAM DESCRIPTION

This program will perform several kinds of bit manipulation for the user.  It
will take a byte and turn on or off any bit as well as reversing any bit within
the byte passed to it.  Following the bit manipulation process, the new byte
will be passed back to the calling program along with a series of zeros and ones
in bit format representing the bits in the new byte.  The hexadecimal characters
representing the new byte will also be passed back.

We found the program to be very helpful in converting CICS return codes to a
display format in the event of an abend or unexpected response to a CICS
command.  We also used it when converting an employee's sign-on security keys
and security levels to bit sequences representing the security values entered
into our own sign-on program.

Another use would be to store on/off flags in a file in bit format instead of
byte format.  In large databases, this could be a real space-saver.

PROGRAM REQUIREMENTS

To use this routine, the user must pass 12 bytes to the subroutine; the first
byte being the character to be manipulated, the next 8 bytes contain the process
to be performed on each of the bits within the character (these bytes will, in
the end, contain the zeros and/or ones reflecting the status of each new bit), 2
bytes which will reflect the hexadecimal representation of the new byte, and
finally, the new byte itself.

The 8 bytes containing the action to be performed on each bit may contain any of
the following characters:

0    Turn the bit off
1    Turn the bit on
R    Reverse the bit.

Any other character will cause the bit to remain unchanged.

COBOL working storage will look like this:

     * * *   BYTE & BIT SUBROUTINE RECORD DESCRIPTION   * * *
      01  BYTE-REC.
          05  BYTE-INPUT-VALUE                PIC X.
          05  BYTE BITS.
              10  BYTE-BIT
                      OCCURS 8 TIMES          PIC X.
     *        ACTION REQUESTS - IF UNABLE TO DETERMINE ACTION REQUEST
     *                          *DISPLAY* WILL BE ASSUMED
                  88  BYTE-SET-BIT-OFF                VALUE ZERO.
                  88  BYTE-SET-BIT-ON                 VALUE '1'.
                  88  BYTE-SET-BIT-TO-RECIPROCAL      VALUE 'R'.
     *        OUTPUT RESULTS
                  88  BYTE-BIT-IS-OFF                 VALUE ZERO.
                  88  BYTE-BIT-IS-ON                  VALUE '1'.
          05  BYTE OUTPUT-IN-HEX-DISPLAY.
              10  BYTE-HEX-CHAR OCCURS 2 TIMES PIC X.
          05  BYTE-OUTPUT-VALUE               PIC X.

The COBOL procedure division would look like this:

          MOVE EIBFN-BYTE-1 TO BYTE-INPUT-VALUE.
     *  THIS WILL RETURN THE HEX VALUES FOR THE FIRST EIBFN BYTE
          CALL 'BITRTN' USING BYTE-REC.
          MOVE BYTE-OUTPUT-IN-HEX-DISPLAY TO SAVE-AREA...

          or

          MOVE '11001110' TO BYTE-BITS.
     *  THIS WILL RETURN THE BYTE VALUE REPRESENTING A HEX 'CE'
     *  (I.E. 8 BITS OF AN OPERATOR'S SECURITY LEVEL)
          CALL 'BITRTN' USING BYTE-REC.
          MOVE BYTE-OUTPUT-VALUE TO RESOURCE-SECURITY-LEVEL-1...


THE BIT MANIPULATION PROGRAM

BITRTN   CSECT                     NAME OF THIS PROGRAM
         STM   R14,R12,12(R13)     SAVE REGISTERS 14,15,0,1,...,12
         BALR  R12,0               ESTABLISH BASE ADDRESS IN REG 12
         USING *,R12
         ST    R13,SAVE+4          SAVE CALLER'S SAVE AREA ADDRESS
         L     R13,SAVE            LOAD OWN SAVE AREA ADDRESS
         L     R2,0(R1)            SAVE PARAMETER ADDRESS
         MVC   INDATA,0(R2)        MOVE PARAMETER DATA TO WORK AREA
         MVC   TSTBYTE,INBYTE      MOVE INPUT BYTE TO WORK AREA
         MVC   OUTBYTE,BIT0        INITIALIZE OUTBYTE TO LOW-VALUES
         LA    R4,INBIT            MOVE ADDRESS OF  INBIT" TO REGISTER
         LH    R5,=H'8'            LOAD NBR OF INDICATORS IN "INBIT"
         B     BEGIN               SKlP SHIFT LEFT FIRST TIME AROUND
ALTERLP  IC    R6,0UTBYTE          MOVE "OUTBYTE" INTO REGISTER
         SLA   R6,1                SHIFT "OUTBYTE" BITS LEFT ONE
         STC   R6,OUTBYTE          STORE NEW "OUTBYTE" FROM REGISTER
         IC    R6,TSTBYTE          MOVE "TSTBYTE" INTO REGISTER
         SLA   R6,1                SHIFT "TSTBYTE" BITS LEFT ONE
         STC   R6,TSTBYTE          STORE NEW "TSTBYTE" FROM REGISTER
BEGIN    CLI   0(R4),C'R'          ACTION = REVERSE BIT STATUS?
         BNE   ALTER1              NOPE. GO TO THE NEXT CHECK
         TM    TSTBYTE,B'10000000' WHAT WAS ORIGINAL BIT?
         BO    DSPBOFF             "ON"--SHIFT LEFT TURNED IT "OFF"
*                                  GO TO DISPLAY FOR "OFF" BIT
         OI    OUTBYTE,B'00000001' "OFF"-TURN BIT "ON"
         B     DSPBON              GO DISPLAY STATUS OF "ON" BIT
ALTER1   CLI   0(R4),C'0'          ACTION = TURN BIT "OFF"?
         BE    NEXTBIT             TURN IT "OFF".SHIFT LEFT WILL DO IT
ALTER2   CLI   0(R4),C'1'          ACTION = TURN BIT "ON"?
         BNE   ALTER3              NOPE. GO TO THE NEXT CHECK
         OI    OUTBYTE,B'00000001' TURN LOW ORDER BIT "ON"
         B     NEXTBIT             TAKE ON THE NEXT BIT
ALTER3   TM    TSTBYTE,B'10000000' MOVE BIT W/O CHANGE. WHAT IS IT?
         BZ    DISPLAY             STATUS="OFF". SHIFT LEFT WILL DO IT
         OI    OUTBYTE,B'00000001' TURN LOW ORDER BIT "ON"
DISPLAY  TM    OUTBYTE,B'00000001' IS LOW-ORDER BIT "ON" OR "OFF"?
         BO    DSPBON              GO DISPLAY BIT STATUS OF "ON"
DSPBOFF  MVI   0(R4),C'0'          REFLECT "OFF" BIT STATUS IN "INBIT
         B     NEXTBIT             TAKE ON THE NEXT BIT
DSPBON   MVI   0(R4),C'1'          REFLECT "ON" BIT STATUS IN "INBIT"
NEXTBIT  LA    R4,1(R4)            ADJUST ADDRESS TO NEXT "INBIT" BYTE
         BCT   R5,ALTERLP          NOT DONE. DECREMENT COUNTER & LOOP
*   AT THIS STAGE OF THE GAME WE HAVE 1) CREATED A NEW BYTE USING
*   THE "INBIT" ACTION INDICATORS AND A STARTING BYTE, AND 2) WE HAVE
*   REFLECTED THE NEW BIT STATUS' IN THE "INBIT" BYTES WHERE THE
*   ACTION INDICATORS USED TO BE.
HEXDISP  LA    R4,TBLF0            LOAD ADDRESS OF FIRST HEX TABLE
         LA    R5,TBLF0            LOAD ADDRESS OF FIRST HEX TABLE
         LA    R6,OUTHEX           LOAD ADDRESS OF FIRST HEX CHAR
         BAL   R7,FINDHEX          FIND CHAR REPRESENTED IN TSTBYTE
         LA    R4,TBL0F            LOAD ADDRESS OF SECOND HEX TABLE
         LA    R5,TBL0F            LOAD ADDRESS OF SECOND HEX TABLE
         LA    R6,1(0,R6)          LOAD ADDRESS OF SECOND HEX CHAR
         BAL   R7,FINDHEX          FIND CHAR REPRESENTED IN TSTBYTE
*  RETURN TO CALLING PROGRAM
 RETURN   MVC   0(12,R2),INDATA     MOVE WORK AREA BACK TO PARAM LIST
         L     R13,SAVE+4          RESTORE CALLER'S SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGS 14,15,0,...,12
         BR    R14
*** SUBROUTINE USED TO FIND HEX CHAR ***
FINDHEX  LA    R8,15               LOAD NUMBER OF ELEMENTS IN TABLE
NEXTHEX  MVC   TSTINST+1(1),0(R4)  LOAD MASK
TSTINST  TM    OUTBYTE,X'FF'       TEST FOR HEX CHARACTER
         BO    SETHEX              GOT IT! NOW SET THE HEX CHARACTER
         LA    R4,1(R4)            NOPE. LOAD ADDRESS FOR NEXT ELEMENT
         BCT   R8,NEXTHEX          LOOP BACK TO TRY THE NEXT ELEMENT
SETHEX   SR    R4,R5               CALC DISPLACEMENT INTO INPUT TABLE
         LA    R5,TBLOUT           LOAD ADDRESS OF TBLOUT
         AR    R5,R4               ADD IN DISPLACEMENT TO TBLOUT
         MVC   0(1,R6),0(R5)       SAVE HEX CHARACTER
         BR    R7                  GO BACK TO MAINLINE
* WORK AREA
INDATA   DS    0CL12               PARAMETER LIST
INBYTE   DS    CL1                 INPUT BYTE TO BE MANIPULATED
INBIT    DS    8CL1                8 ACTION INDICATOR BYTES
OUTHEX   DS    CL2                 2 HEX OUTPUT BYTES
OUTBYTE  DS    CL1                 RESULTING OUTPUT BYTE
SAVE     DS    9D                  18 FULLWORDS ON DOUBLEWORD BOUNDARY
BIT0     DC    B'00000000'         LOW VALUES
TSTBYTE  DS    CL1                 USED FOR TESTING FOR BIT DISPLAY
TBLF0    DC    X'F0E0D0C0B0A090807060504030201000' TBL FOR 1ST HEX CHAR
TBL0F    DC    X'0F0E0D0C0B0A09080706050403020100' TBL FOR 2ND HEX CHAR
TBLOUT   DC    X'C6C5C4C3C2C1F9F8F7F6F5F4F3F2F1F0' TBL FOR BYTE CHAR
         END


Curt Swindoll
MIS Director
Insight for Living (USA) ) Insight for Living 1987
































