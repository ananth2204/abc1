Controlling 'simultaneous' updates

In previous issues of CICS Update, I have read several articles
regarding the control of 'simultaneous' updates on a dataset in
a CICS system.  The solutions suggested in the articles were,
in my opinion, too complicated.

The difficulty really only arises in applications which are
designed to run in pseudo-conversational mode.  The problem
is this: what occurs if two, or more, users simultaneously
display the same record on their screen for update?

If we take a look at the simple case of only two users
attempting to update the same record simultaneously, we find
that the first user will process his/her update and the record will
be updated.  When the second user processes an update, the
data being updated will not be the data that he/she thinks it is.
This is because the data on the screen of the second user is no
longer current.

What is required is a mechanism to tell the second user that the
record has been updated since it was last displayed.  To do this
controls must be built into the application.  A simple method
which requires very little overhead works as follows:

1      Each record to be updated contains a field which we will
      call its 'update number'.  This number could be a binary
      halfword or fullword depending on the anticipated
      frequency of update.  When the record is first created its
      update number is set to zero.

2      Whenever a transaction reads a record and displays its
      contents with the intention of updating it, it 'remembers'
      the update number by storing it in a COMMAREA or
      similar area.

3      When the record is actually to be updated, the record is
      read again for update (thus locking it from other updates)
      and the stored update number is compared with the current
      update number from the copy of the record just read.  If
      the user decides not to proceed with the update, then there
      is no extra processing required as the stored update number
      may simply be forgotten.

4      If the update numbers are the same, the record data may be
      updated.  However, an extra step must now occur in the
      update processing to include incrementing the update
      number of the record.

5      If the update numbers are not the same, this means that
      someone else has updated the record since this user
      displayed it.  In this case the new version of the record
      could simply be displayed again with an appropriate
      message.

Of course this method will work equally well for two or for
many users updating the same record.

This method has advantages in that it requires minimal extra
storage, both on disk and in memory (a halfword of fullword
for each).  It also requires little extra program logic and costs
no extra I/O as an extra read will only be required if the record
has been updated by another user (and this re-read would be
required anyway to refresh the user's display of the record).  It
is also very simple since is does not employ any complicated
locking mechanisms.

An additional benefit of the method is that analysis of the
update number may provide useful information about update
activity on the dataset.  This information could be used in
VSAM dataset tuning, dataset placement, etc.

The only problem which may arise is that the update number
may eventually overflow, although even a halfword update
number would permit 32,767 updates before this would
happen.  In any case, a batch job could be run periodically to
reset the update number.  This method may also be extended to
include audit trail information for each data record if required.


Paul Bouwman
Senior Systems Programmer (Australia)            c Paul Bouwman 1991

