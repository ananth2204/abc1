Task priorities and performance tuning

Many CICS users have schemes for using task priority as a
performance tuning device.  Some assign a higher priority to
certain users - perhaps the boss or an especially important
department head, some assign higher priorities to terminals in
certain departments, and some assign higher priorities to
certain transactions.  Probably, most use a combination of the
above.  In any case, the objective of using task priorities for
performance tuning is to achieve quicker response for all (or at
least some) CICS tasks.

Task priority is a value from 1 to 255 and is calculated by
summing the transaction priority, the terminal priority, and the
operator priority.  If the sum is greater than 255, then 255 is
used.  Regardless of what your scheme is, there are bottlenecks
which can defeat even the best priority schemes.  The greater
your system's activity, the greater the probability of your
experiencing these bottlenecks.  This article will identify some
of these bottlenecks and suggest an approach to reduce or
eliminate them.

Tasks are placed on either the active or the suspended task
string, depending upon what the tasks are waiting for.  Tasks
placed on the active task string are kept in order by task
priority number, highest priority first.  When CICS is ready to
dispatch a task for processing, it scans the active task string for
a ready task, beginning with the highest priority task.  The
Active Maximum Task value, specified in AMXT of the SIT,
determines how many tasks on the active task string will be
checked.  Any tasks on the active string beyond this point are
ignored even if they are ready to process.  Obviously, AMXT
can be a bottleneck as well as a tuning aid.  Too large a value
may over-commit resources and too small a value will prevent
tasks from being dispatched even though resources are
adequate.  I make no recommendation on how to set AMXT
here.  It is only necessary to understand its impact in the
situations described later on.  When a program requests any
service from CICS through an EXEC command or by issuing a
CICS macro, CICS always resumes task processing by
dispatching the highest priority active task ready for dispatch.
There is no way of telling how long it will be before a task
which gives up control will be dispatched again.

Certain resources are very limited.  A VSAM file might have a
small STRNO or a database might allow only a small number
of users to be scheduled at the same time.  A low priority task
which has control of one of these resources may prevent the
continuation of higher priority tasks which are waiting for that
resource.  In this situation, the otherwise low priority task
becomes every bit as important as the high priority task.  On
the other hand, higher priority tasks sometimes become
involved in time consuming processing such as browsing a file,
creating or reading large temporary storage queues, or
performing several random file accesses.  These tasks, while
important, can cause lower priority tasks which normally
process very quickly to wait for very long times simply because
they are lower on the active task string.  Notice that the low
priority tasks may not be waiting for any particular resource,
they are simply waiting to be dispatched.  This is one possible
cause of those occasional instances of poor response for
transactions you know ought to be very fast.

Some application programming techniques will reduce a task's
impact on other tasks and on itself.  First, simple as it sounds,
don't schedule a database before you are actually ready to use
it.  Many programmers perform a database schedule as part of
their housekeeping regardless of whether they are ready to
access the database.  Sometimes the database isn't used at all,
just scheduled during the life of the task.  Next, release your
database as quickly as possible when you have finished
accessing it.  Don't wait until you go to a program exit routine.
Don't release storage, perform a terminal write, or whatever
else you can think of first.  Release that database immediately
so other tasks don't have to wait for it any longer than
necessary.  The same is true of initiating and terminating a file
browse.  If your task is short running, don't bother releasing
any storage areas you may have acquired during the life of the
task.  When your task terminates, CICS will handle all those
releases for you much more efficiently.  Remember, each time
you ask CICS to do something for you, your task must wait for
all higher priority tasks before it can resume processing.  Never
tie up a limited resource longer than absolutely necessary and
never give up control to CICS unless it is absolutely necessary.

There is still the problem of tasks waiting for resources held by
lower priority tasks and of tasks having to wait for long
running, higher priority tasks to be considered.  A solution to
these problems is a scheme whereby a task's priority changes
during the task's life, as appropriate to improve overall system
throughput.

One such scheme works as follows.  Transactions, terminals,
and operators are assigned priorities according to the scheme of
your choice except that it must be impossible for any user to
initiate a task with a priority greater than an arbitrary value
such as 240.  When a program schedules a DL/I database it
immediately raises its priority to 250.  After issuing a DL/I
TERM call, the priority is immediately reset to its original
value.  When a start browse is issued, a program raises its
priority to 249.  After ending a browse, the priority is reset to
its original value.  Any program which finds itself running for
a long period, creating multiple BMS pages, processing many
records etc, occasionally reduces its priority to 1, perhaps after
every 20 file reads or once every second or two, and then
immediately changes its priority back to its high value or
original value as appropriate.  With this scheme, programs
owning a limited resource temporarily become higher in
priority so they can release that resource sooner.  Programs
which run for long periods can give up control briefly so lower
priority tasks have a chance to be dispatched.

Implementing this scheme for changing task priority is easy
although it does require changes to all programs that
participate.  A task's current priority is a one-byte value found
in the field named TCATCDP in the TCA.  In macro-level
CICS, a task's priority can be changed simply by moving a new
value to the field, TCATCDP, and issuing the change priority
command, DFHKC TYPE=CHAP.  Remember, however, that
the program must save the task's original priority so it can be
used to reset the priority to the original value.  Do not hard
code the original priority value in the program itself.  The same
transaction might have different priority values, depending
upon the terminal and operator priorities for the task initiated.

Currently, command-level CICS does not provide a command
to change task priority.  Macro-level programs are required to
perform this function.  I hope that when IBM implements CICS
with extended addressing, which only supports command-level
programs, it will have included capabilities currently available
only in macro-level including a change priority command.  In
the meantime, command-level programs must link to macro-
level programs in order to achieve a change in task priority.
With this article, I have included macro-level programs that
can be used to implement the scheme described above.

ÝEditor's note: CICS/ESA 3.1 will provide a SET TASK
PRIORITY (nnn) command¨

Although they can be linked to by any program, the programs
included with this article are intended for use by command-
level programs written in a high-level language.  Any
transaction in which these programs are used must have a
TWASIZE of at least 1.  I use 10, for no particular reason, and
ensure that all user transactions have this minimum whether
requested by the application programmer or not.  These
programs use the first byte of a task's TWA to save the task's
original priority.  Since most command-level programs do not
use a TWA this should not cause any problem.  To change a
task's priority, a program simply links to one of these
programs.  The new priority is implied in the program name.
If the first byte of the TWA is zero, the current task priority is
saved there.  The task priority is then changed.  To reset a
task's priority to its original value a program would link to
JHOPR.  If the first byte of the TWA is not zero, JHOPR
changes the task priority to that value and then changes the first
byte of the TWA to 0.  When using these programs, the linking
program does not need to know or remember the original
priority.

In implementing a priority change scheme, you might decide to
use more than two high values or to change priority for
different reasons.  It is important that changing task priorities is
done only for good reason.  If programs are allowed to change
task priority for reasons not compatible with the guidelines of
your scheme then chaos reigns and the benefits gained by your
scheme may be lost.  However you implement your scheme, be
consistent.  If you use these programs, I recommend that you
make them resident and place them adjacent to each other so
that they all reside on the same page as they will certainly see
high usage.

JHOP1 - SET TASK PRIORITY TO 1

         DFHCSAD TYPE=DSECT
         DFHTCA  CICSYST=NO
TWAPRTY  DS      XL1
JHOP1    CSECT
         BALR    3,0
         USING   *,3
         TM      TWAPRTY,X'FF'         IS THERE A PRIORITY
         BNZ     PRTYOK                ...YES
         MVC     TWAPRTY,TCATCDP       SAVE OLD PRIORITY
         TM      TWAPRTY,X'FF'         IS CURRENT PRIORITY GT ZERO
         BNZ     PRTYOK                ...YES
         MVI     TWAPRTY,1             ....NO, MAKE IT 1
PRTYOK   CLI     TCATCDP,1             IS THE PRIORITY ALREADY 1
         BE      RETURN                ...YES, DON'T CHAP
         DFHKC   TYPE=CHAP,PRTY=1      CHANGE PRIORITY
RETURN   DFHPC   TYPE=RETURN           RETURN TO CALLER
         END     JHOP1

JHOP249 - SET TASK PRIORITY TO 249

         DFHCSAD TYPE=DSECT
         DFHTCA  CICSYST=NO
TWAPRTY  DS      XL1
JHOP249  CSECT
         BALR    3,0
         USING   *,3
         TM      TWAPRTY,X'FF'         IS THERE A PRIORITY
         BNZ     PRTYOK                ...YES
         CLI     TCATCDP,249           IS CURRENT PRIORITY GT 249
         BH      RETURN                ...YES, NO NEED TO CHANGE IT
         MVC     TWAPRTY,TCATCDP       SAVE OLD PRIORITY
         TM      TWAPRTY,X'FF'         IS CURRENT PRIORITY GT ZERO
         BNZ     PRTYOK                ...YES
         MVI     TWAPRTY,1             ....NO, MAKE IT 1
PRTYOK   CLI     TCATCDP,249           IS THE PRIORITY ALREADY 249
         BE      RETURN                ...YES, DON'T CHAP
         DFHKC   TYPE=CHAP,PRTY=249    CHANGE PRIORITY
RETURN   DFHPC   TYPE=RETURN           RETURN TO CALLER
         END     JHOP249

JHOP250 - SET TASK PRIORITY TO 250

         DFHCSAD TYPE=DSECT
         DFHTCA  CICSYST=NO
TWAPRTY  DS      XL1
JHOP250  CSECT
         BALR    3,0
         USING   *,3
         TM      TWAPRTY,X'FF'         IS THERE A PRIORITY
         BNZ     PRTYOK                ...YES
         CLI     TCATCDP,250           IS CURRENT PRIORITY GT 250
         BH      RETURN                ...YES, NO NEED TO CHANGE IT
         MVC     TWAPRTY,TCATCDP       SAVE OLD PRIORITY
         TM      TWAPRTY,X'FF'         IS CURRENT PRIORITY GT ZERO
         BNZ     PRTYOK                ...YES
         MVI     TWAPRTY,1             ....NO, MAKE IT 1
 PRTYOK  CLI     TCATCDP,250           IS THE PRIORITY ALREADY 250
         BE      RETURN                ...YES, DON'T CHAP
         DFHKC   TYPE=CHAP,PRTY=250    CHANGE PRIORITY
RETURN   DFHPC   TYPE=RETURN           RETURN TO CALLER
         END     JHOP250

JHOPR - RESET TASK PRIORITY

         DFHCSAD TYPE=DSECT
         DFHTCA  CICSYST=NO
TWAPRTY  DS      XL1
JHOPR    CSECT
         BALR    3,0
         USING   *,3
         TM      TWAPRTY,X'FF'         IS THERE A PRIORITY
         BZ      RETURN                ...NO
         CLC     TCATCDP,TWAPRTY       DO WE NEED TO CHAP
         BE      RETURN                ...NO
         MVC     TCATCDP,TWAPRTY       GET OLD PRIORITY
         DFHKC   TYPE=CHAP             CHANGE PRIORITY
RETURN   MVI     TWAPRTY,0             CLEAR PRIORITY SAVE BYTE
         DFHPC   TYPE=RETURN           RETURN TO CALLER
         END     JHOPR


James E Holler
President
Little Blue Systems (USA)                        ) James E Holler 1990


