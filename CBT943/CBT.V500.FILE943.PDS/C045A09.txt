Improved linkage to command-level programs

When using the LINK command, the command-level interface
allows only one parameter to be passed via the COMMAREA.
When linking to programs requiring multiple parameters, the
storage areas for each of the parameters must be duplicated to be
passed within the one COMMAREA.  Since the addresses of the
storage areas are not readily available to COBOL, an address
parameter list cannot be easily built to pass just the addresses of
the parameters to the linked-to program and then use BLL cells
(or COBOL V2 ADDRESS statements) in the LINKAGE
SECTION to address the storage areas.

The supplied module allows the 'linked to' program to expect a
COMMAREA with an address parameter list rather than a large
COMMAREA containing all the parameter data.  This is similar
to the linkage convention used by non-CICS 'called' modules.

The module should only be used to conserve CICS storage when
multiple large storage areas are being passed to a linked-to
program.  The module's main overhead is the implicit CICS
GETMAIN/FREEMAIN for working set variables and save area
storage when entering and exiting (ie each call to) the module.
An alternative method would be to code an Assembler module to
return the address of each parameter and build your own
parameter list to be passed to the linked-to program.  However,
this module performs the function for you by analysing the call
parameter structure.

The module listing illustrates the use of COBOL Linkage Section
BLL cells.  However, the supplied sample program utilises
COBOL V2 ADDRESS statements, so Linkage Section BLL cells
are not required.  If you are using BLL cells and the optimising
feature of an IBM COBOL compiler, SERVICE RELOAD
statements will be necessary after each of the BLL cell loads (ie
COBOL MOVE statements).

The module must be link-edited into a load library prior to the
link-edit of the calling program as the module is 'statically linked'
to the 'calling' program.  'Statically linked' means that the calling
program must contain the executable code for this module in the
executable load module.  VSE users should catalog the module as
a .OBJ member (formerly a module in the relocatable library)
prior to link-editing the calling program as a .PHASE member
(formerly a phase in the core image library).

Since the module is statically linked to the calling program, no
PPT entry is necessary for the module.  The module has been
tested successfully in an MVS/XA environment running CICS
Version 1.7.0 using AMODE=31 and RMODE=ANY as linkage
editor options.

ASSEMBLER MODULE

         TITLE 'TA0160 - LINK TO CICS WITH ARGUMENTS'
* CICS LINK - PERFORM LINK TO CICS WITH ARGUMENTS
* ABSTRACT
*      CICS DOES NOT PROVIDE THE FACILITY FOR THE PASSING OF MULTIPLE
*      ARGUMENTS TO A CALLED PROGRAM WITHOUT COMBINING THEM INTO ONE
*      LARGE ARGUMENT (IE COMMAREA).
* OPERATION
*      IF THE ARGUMENT LIST IS OMITTED, THE CALL IS IGNORED.
*      THIS IS A COBOL CALL IMPLEMENTATION.  THE FIRST ARGUMENT
*      IN THE CALL IS REQUIRED AND POINTS TO THE EIGHT BYTE,
*      LEFT JUSTIFIED, BLANK FILLED PROGRAM NAME TO BE LINKED TO
*      (MUST HAVE A PPT ENTRY).  ALL OTHER SUPPLIED ARGUMENTS ARE
*      PASSED TO THE LINKED TO PROGRAM.
* EXAMPLE:
*
*  --  CALLING PROGRAM --
*  WORKING-STORAGE SECTION.
*      01  LINK-TO-PGM-NAME               PIC X(8) VALUE 'PGMNM  '.
*  PROCEDURE DIVISION.
*  LINKED-FROM.
*      CALL 'TA0160' USING LINK-TO-PGM-NAME ARG1, ARG2, ... ARGn.
*
*  -- CALLED PROGRAM --
*  LINKAGE SECTION.
*  01  DFHCOMMAREA.
*      05  COM-1  PIC S9(8) COMP.            (PTR TO PGMNAME
*      05  COM-2  PIC S9(8) COMP.            (PTR TO ARG1
*      ..  ...... ..............
*      05  COM-n  PIC S9(8) COMP.            (PTR TO ARGn
*  01  FILLER.
*      05  COM-PTR-B  PIC S9(8) COMP.        (PTR BASE
*      05  COM-PTR-1  PIC S9(8) COMP.        (PTR ARG1
*      ..  .........  ..............
*      05  COM-PTR-n  PIC S9(8) COMP.        (PTR ARGn
*  01  ARG1           PIC XXXXXXXX.
*      ....
*  01  ARGn.
*      05  FILLER ........
*  PROCEDURE DIVISION.
*  LINKED-TO.
*     MOVE COM-1 TO COM-PTR-1.       REQUIRED FOR RC
*      ....
*     MOVE COM-n TO COM-PTR-n.       REQUIRED FOR EACH ARGUMENT
*     MOVE ARG1 TO ....
*     ... DO PROCESSING.
*     MOVE ...  TO ARG1
*     EXEC CICS RETURN END-EXEC.        CICS GOBACK
DFHEISTG DSECT
COMMLEN  DS    H
TA0160   DFHEIENT CODEREG=12,DATAREG=11,EIBREG=10
         LTR   R1,R1               CHECK FOR PARM LIST
         BZ    GOBACK              NO ARGS
         SR    R3,R3               CLEAR COMMAREA LENGTH ACCUMULATOR
         ICM   R2,B'1111',0(1)     ADDR(PROG NAME) - LOAD/SET CC
         BM    LINKPGM             LINK IF NO OTHER PARMS
         LA    R4,4(,R1)           ADDR(NEXT ARGUMENT ADDR)
         LR    R6,R4               R6 = A(NEW PARM LIST (R1 + 4))
FNDARGS  EQU   *
         LA    R3,4(,R3)           INCREMENT COMMAREA LENGTH
         ICM   R5,B'1111',0(R4)    LOAD NEXT ARG ADDR - LOAD/SET CC
         BM    LINKPGM             LAST PARM?
         LA    R4,4(,R4)           ADDR(NEXT ARGUMENT SLOT)
         B     FNDARGS             AND LOOP
LINKPGM  EQU   *
         STH   R3,COMMLEN          SAVE COMMAREA LENGTH
         EXEC CICS LINK PROGRAM (0(2)) COMMAREA(0(6)) LENGTH(COMMLEN)
GOBACK   EQU   *
         END

CALLING PROGRAM

 IDENTIFICATION DIVISION.
 PROGRAM-ID.    ZTST01.
*********************************************************************
*  PROGRAM PURPOSE: TEST PROGRAM FOR EXPERIMENTATION
*********************************************************************
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 01  PGM-NAME               PIC X(08)  VALUE 'ZTST02'.
 01  AREA-1.
     05  AREA-1-DATA        PIC X(80) VALUE SPACES.
 01  AREA-2.
     05  AREA-2-DATA        PIC X(80) VALUE SPACES.
 PROCEDURE DIVISION.
     MOVE 'SUB PGM INVOKED '      TO AREA-1-DATA.
     MOVE 'DEFAULT MESSAGE '      TO AREA-2-DATA.
     CALL 'TA0160' USING PGM-NAME AREA-1 AREA-2.
     EXEC CICS SEND FROM(AREA-2-DATA) LENGTH(80) END-EXEC.
     EXEC CICS RETURN END-EXEC.
     GOBACK.

CALLED PROGRAM

 IDENTIFICATION DIVISION.
 PROGRAM-ID.    ZTST02.
*********************************************************************
*  PROGRAM PURPOSE: TEST PROGRAM FOR EXPERIMENTATION
*********************************************************************
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 LINKAGE SECTION.
*********** COBOL V2 ADDRESSABILITY ***********
 01  DFHCOMMAREA.
     05  PTR-ARG-1          POINTER.
     05  PTR-ARG-2          POINTER.
 01  AREA-1.
     05  AREA-1-DATA        PIC X(80).
 01  AREA-2.
     05  AREA-2-DATA        PIC X(80).
 PROCEDURE DIVISION.
*    VALIDATE COMMAREA LENGTH FOR CORRECT NUMBER OF PARMS
     IF EIBCALEN LESS 4
       GO TO Z0090-RETURN.
     SET ADDRESS OF AREA-1       TO  PTR-ARG-1.
     EXEC CICS SEND FROM(AREA-1-DATA) LENGTH(80) END-EXEC.
     IF EIBCALEN GREATER 7
         SET ADDRESS OF AREA-2       TO  PTR-ARG-2
         MOVE 'SUB PGM COMPLETE'     TO AREA-2-DATA.
 Z0090-RETURN.
     EXEC CICS RETURN END-EXEC.
     GOBACK.


Steve Noble (USA) ) Steve Noble 1989


