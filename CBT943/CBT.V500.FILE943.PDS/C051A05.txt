CICS 3270 - PC file transfer program exits (cont)

We conclude our look at transferring files between a CICS host
and personal computers by publishing the source code for the
UGETCLOS routine and the CICS file transfer exit program,
UPUTFILE.

UGETCLOS ROUTINE

*  DESCRIPTION:
*       UGETCLOS IS SCHEDULED BY THE UGETFILE EXIT OF CICS FILE
*       TRANSFER.
DFHEISTG DSECT
CFTDATA  DS   0CL11
CFTDATQ  DS   CL8
CFTDATT  DS   CL3
CFTSWI   DS   CL1
QUEUEID  DS   CL8
DATAOUT  DS   CL80
*    COMMAND LIST BLOCK
         DS    0F
COMMLIST DS    0CL20
COMMA    DS    F
COMMB    DS    F
COMMC    DS    F
COMMD    DS    F
COMME    DS    F
COMMAND  DS    0CL80         COMMAND
COMMLBL1 DS    CL12          COMMAND KEYWORDS
         DS    0CL68
COMMDBID DS    CL8           DATA BASE ID
COMMLBL2 DS    CL8           OPEN/CLOSE KEYWORD
COMMLBL4 DS    CL9           ENABLE/DISABLE KEYWORD
COMMJFIL DS    CL43          FILLER
COMMANDL DS    H             COMMAND LENGTH
COMMANDI DS    CL1           INDICATOR
COMMANDO DS    0CL320        RETURNED OUTPUT FROM DFHEMTA
COMDQINF DS    CL72
COMDQNOR DS    CL6
COMDQFI1 DS    CL242
COMMANDX DS    H             LENGTH OF FIELD RETURNED BY DFHEMTA
COMDDBID DS    CL8           DATA BASE ID - WORKAREA
UGETCLOS CSECT
         B     START
         DC    CL16'UGETCLOS'         NAME OF PROGRAM.
         DC    CL16'&SYSDATE'         DATE OF ASSEMBLY.
         DC    CL16'&SYSTIME'         TIME OF ASSEMBLY.
         DC    CL16'COMPANY NAME    ' COMPANY.
START    DS    0H
         EXEC CICS RETRIEVE INTO(CFTDATA) LENGTH(H11)
         CLC   CFTDATQ,=C'CFTDAT1 '
         BE    CLOSDAT
         CLC   CFTDATQ,=C'CFTDAT2 '
         BE    CLOSDAT
         B     RETURN
CLOSDAT  DS   0H
         EXEC CICS SET DATASET(CFTDATQ) DISABLED FORCE
         EXEC CICS SET DATASET(CFTDATQ) CLOSED
         CLC   CFTDATT,=C'GET'        IF = THEN NO SUBMIT REQUIRED.
         BE    RETURN
SUBMIT   DS    0H
         CLC   CFTDATQ,=C'CFTDAT2 '
         BNE   RETURN
         MVC   QUEUEID,=C'IRDR    '
         MVI   DATAOUT,X'40'
         MVC   DATAOUT+1(L'DATAOUT-1),DATAOUT
         MVC   DATAOUT,JOBSTMT
         BAL   R6,WRITEQ
         MVI   DATAOUT,X'40'
         MVC   DATAOUT+1(L'DATAOUT-1),DATAOUT
         MVC   DATAOUT,EXECSTMT
         BAL   R6,WRITEQ
         MVI   DATAOUT,X'40'
         MVC   DATAOUT+1(L'DATAOUT-1),DATAOUT
         MVC   DATAOUT,PARMSTMT
         BAL   R6,WRITEQ
         MVI   CFTSWI,X'01'            INITIALIZE SWITCH
INTRPROC DS    0H
         MVI   COMMAND,X'40'
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
         MVC   COMMDBID,=C'IRDR    '
         CLI   CFTSWI,X'01'            IS THIS FIRST TIME THROUGH?
         BE    INTRCLOS
         B     INTROPEN
INTRCLOS DS    0H
         MVC   COMMLBL1,COMDLBL4       SET CMD KEYWORD FOR QUEUE
         MVC   COMMLBL2,COMDQUEC       CLOSE COMMAND KEYWORD
         MVC   COMMLBL4,COMDQUED       DISABLED COMMAND KEYWORD
         B     INTRBYP
INTROPEN DS    0H
         MVC   COMMLBL1,COMDLBL4       SET CMD KEYWORD FOR QUEUE
         MVC   COMMLBL2,COMDQUEO       OPEN COMMAND KEYWORD
         MVC   COMMLBL4,COMDQUEE       ENABLE COMMAND KEYWORD
INTRBYP  DS    0H
* SETTING OF CEMT S DATASET COMMAND FOLLOWS:
         LA    R7,COMMAND
         ST    R7,COMMA
         MVC   COMMANDL,=H'80'
         LA    R7,COMMANDL
         ST    R7,COMMB
         MVI   COMMANDI,X'00'   00=DO NOT DISPLAY, 80=DISPLAY
         LA    R7,COMMANDI
         ST    R7,COMMC
         LA    R7,COMMANDO
         ST    R7,COMMD
         MVC   COMMANDX,=H'320'
         LA    R7,COMMANDX
         ST    R7,COMME
         EXEC CICS LINK PROGRAM('DFHEMTA') COMMAREA(COMMLIST)
         L     R7,COMMD       LOADS CONTENTS WHICH = ADDRESS OF
*                             RETURNED OUTPUT FROM DFHEMTA.
         MVC   COMMANDO(100),0(R7) ADDRESS LABELS
         CLC   COMDQNOR,NORMAL        WAS IT NORMAL?
         BE    INTRSET                YES
         B     ABEND                  NO
INTRSET  DS    0H
         CLI   CFTSWI,X'02'          HAVE WE BEEN HERE?
         BE    RETURN
         MVI   CFTSWI,X'02'          SET ENABLE/OPEN STATUS.
         B     INTRPROC
WRITEQ   DS    0H
         EXEC CICS WRITEQ TD QUEUE(QUEUEID) FROM(DATAOUT) LENGTH(H80)
         BR   R6
H8       DC   H'8'
H11      DC   H'11'
H80      DC   H'80'
COMDLBL4 DC   CL12'SET QUEUE  ('
COMDQUEC DC   CL8') CLOSED'
COMDQUEO DC   CL8') OPEN  '
COMDQUED DC   CL9' DISABLED'
COMDQUEE DC   CL9'ENABLED  '
NORMAL   DC   CL6'NORMAL'
JOBSTMT  DS   0CL80
         DC   CL32'//Z38CFTCL JOB (AM,PS,3330,038),'
         DC   CL27'TECHSUPT,CLASS=S,MSGCLASS=X'
         DC   CL21' '
EXECSTMT DS   0CL80
         DC   CL32'//INTRSTEP EXEC CFTPROC         '
         DC   CL48' '
PARMSTMT DS   0CL80
         DC   CL32'/*JOBPARM PROCLIB=PROC98        '
         DC   CL48' '
ABEND    DS   0H
         EXEC CICS ABEND ABCODE('ZP00') CANCEL
RETURN   DS   0H
         EXEC CICS RETURN
         END

UPUTFILE - CICS FILE TRANSFER EXIT

DFHEISTG DSECT
AUDFLD   DS    F
DISP     DS    F
QUEUEIDO DS    CL8
QUEUEIDX DS    0CL8
QUEUEHDX DS    CL4
QUEUENMX DS    CL4
QUEUEID  DS    0CL8
QUEUEHD  DS    CL3
QUEUENM  DS    CL4
QUEUEFIL DS    CL1
QUEUECFT DS    0CL8
QUEUECHD DS    CL3
QUEUECNM DS    CL4
QUEUEFIX DS    CL1
AUDITOUT DS    0CL121
AUDIEXIT DS    CL3
AUDIFIL1 DS    CL2
AUDIDATE DS    CL8
AUDIFIL2 DS    CL2
AUDITIME DS    CL8
AUDIFIL3 DS    CL2
AUDINAME DS    CL8
AUDIFIL4 DS    CL2
AUDITERM DS    CL4
AUDIFIL5 DS    CL2
AUDINREC DS    CL8
AUDIFIL6 DS    CL2
AUDIRCC  DS    CL10
AUDIFIL7 DS    CL2
AUDIRESV DS    CL58
DATA1OUT DS    CL80
DATA2OUT EQU   7
CFTDAT1X DS    0CL11
CFTDAT1Y DS    CL8   QUEUE ID
CFTDAT1Z DS    CL3   TYPE
LENG     DS    H
STATITEM DS    H
NUMITEMS DS    H
COMITEMS DS    H
COMPTR   EQU   8
SAVECOM  DS    0CL20
SAVERC   DS    CL4
SAVEFILE DS    0CL8
SAVETYPE DS    CL1
SAVENAME DS    CL4
SAVEFIL1 DS    CL3
SAVECNTL DS    0CL8
SAVECFTR DS    CL4
SAVETERM DS    CL4
ASKTIMED DS    D
PKAREA   DS    D
UPUTFILE DFHEIENT CODEREG=(3,9)
         B     START
         DC    CL16'UPUTFILE'         NAME OF PROGRAM.
         DC    CL16'&SYSDATE'         DATE OF ASSEMBLY.
         DC    CL16'&SYSTIME'         TIME OF ASSEMBLY.
         DC    CL16'COMPANY NAME    ' COMPANY.
START    DS    0H
         LH    COMPTR,EIBCALEN              CHECK COMMAREA..RETURNED?
         LTR   COMPTR,COMPTR
         BZ    RETURN                       NOT 1ST. TIME..BRANCH!
         SR    COMPTR,COMPTR
         L     COMPTR,DFHEICAP
         MVI   SAVECOM,X'40'
         MVC   SAVECOM+1(L'SAVECOM-1),SAVECOM
         MVI   AUDITOUT,X'40'
         MVC   AUDITOUT+1(L'AUDITOUT-1),AUDITOUT
         MVI   DATA1OUT,X'40'
         MVC   DATA1OUT+1(L'DATA1OUT-1),DATA1OUT
         MVC   SAVECOM(20),0(COMPTR)
* VALIDDATE TERMINAL ID.
         LA    R6,TERMTBL              LOAD TERMINAL ID TABLE.
TERMCK   DS    0H
         CLC   0(4,R6),=C'9999'        ARE WE AT END OF LIST.
         BE    TERMERR                 TERMINATE PROCESS.
         CLC   SAVETERM,0(R6)          COMPARE PASSED TERMID TO LIST.
         BE    PROCESS                 PASSED TEST...CONTINUE.
         LA    R6,4(0,R6)              BUMP TO NEXT TERMINAL ID.
         B     TERMCK
* MAINLINE ROUTINE.
PROCESS  DS    0H
         MVC   QUEUEID(8),SAVECNTL     SET UP QUEUE ID
         MVC   COMITEMS,H0             INIT ITEMS COMPARE AREA
         LH    R10,COMITEMS            LOAD REG UP FOR ADD
         MVC   STATITEM,H1             SET ITEM VALUE TO ONE
*                                      FOR READ ACTION
         CLC   SAVETYPE,PERMID         IS IT A PERMANENT ID REQUEST?
         BE    PROCPERM
         CLC   SAVETYPE,SHARID         IS IT A SHAREABLE ID REQUEST?
         BE    PROCSHAR
         CLC   SAVETYPE,DELID          IS IT A DELETE ID REQUEST?
         BE    PROCDEL
         B     TYPEERR
* PERMANENT TYPE PROCESSING ROUTINE.
PROCPERM DS    0H
         EXEC  CICS HANDLE CONDITION                                   X
               LENGERR(LENGERR)                                        X
               ITEMERR(ITEMERR)                                        X
               DISABLED(PERWERR)                                       X
               DSIDERR(PERWERR)                                        X
               DUPREC(PERWERR)                                         X
               ILLOGIC(PERWERR)                                        X
               INVREQ(PERWERR)                                         X
               IOERR(PERWERR)                                          X
               NOSPACE(PERWERR)                                        X
               NOTOPEN(PERWERR)
         CLC   SAVENAME,=C'DAT1'
         BE    PROCDAT1
         CLC   SAVENAME,=C'DAT2'
         BE    PROCDAT2
         B     PERMERR
PROCDAT1 DS    0H
* PERFORM DYNAMIC ALLOCATION AND OPEN/CLOSE FOR DAT1 FILE.
         MVC   DISP,DFHVALUE(OLD)
         EXEC CICS SET DATASET(CFTDAT1) OBJECTNAME(DSNDAT1)            X
               DISPOSITION(DISP)
         EXEC CICS SET DATASET(CFTDAT1) ENABLED
         EXEC CICS SET DATASET(CFTDAT1) OPEN
* READ HEADER RECORD, BUT DO NOT PROCESS IT (I.E., SKIP IT)
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               INTO(DATA1OUT)                                          X
               LENGTH(H80)                                             X
               NUMITEMS(NUMITEMS)                                      X
               ITEM(STATITEM)
NEXTTS1  DS    0H
         AH    R10,H1
         CH    R10,NUMITEMS
         BE    FINDAT1
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               INTO(DATA1OUT)                                          X
               NEXT
         EXEC CICS WRITE DATASET(CFTDAT1) FROM(DATA1OUT)               X
               RIDFLD(AUDFLD) RBA
         MVI   DATA1OUT,X'40'
         MVC   DATA1OUT+1(L'DATA1OUT-1),DATA1OUT
         B     NEXTTS1
FINDAT1  DS    0H
* A TASK SHOULD BE SCHEDULED HERE TO DISABLE AND CLOSE FILE, BECAUSE
* YOU CAN'T DO IT IN THE SAME TASK.  ALSO OTHER PROCESSING COULD
* BE SCHEDULED (E.G., SUBMIT BATCH JOB TO PROCESS UPLOADED DATA).
         MVC   CFTDAT1Y,CFTDAT1
         MVC   CFTDAT1Z,=C'PUT'
         EXEC CICS START TRANSID('ZCLO') INTERVAL(000015) REQID('ZCL') X
               FROM(CFTDAT1X) LENGTH(H11)
         B      CFTRNNNN            BRANCH...DELETE QUEUE.
PROCDAT2 DS    0H
* PERFORM DYNAMIC ALLOCATION AND OPEN/CLOSE FOR DAT2 FILE.
         MVC   DISP,DFHVALUE(OLD)
         EXEC CICS SET DATASET(CFTDAT2) OBJECTNAME(DSNDAT2)            X
               DISPOSITION(DISP)
         EXEC CICS SET DATASET(CFTDAT2) ENABLED
         EXEC CICS SET DATASET(CFTDAT2) OPEN
* READ HEADER RECORD, BUT DO NOT PROCESS IT (I.E., SKIP IT)
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               SET(DATA2OUT)                                           X
               LENGTH(LENG)                                            X
               NUMITEMS(NUMITEMS)                                      X
               ITEM(STATITEM)
NEXTTS2  DS    0H
         AH    R10,H1
         CH    R10,NUMITEMS
         BE    FINDAT2
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               LENGTH(LENG)                                            X
               SET(DATA2OUT)                                           X
               NEXT
         EXEC CICS WRITE DATASET(CFTDAT2) FROM(0(R7))                  X
               RIDFLD(AUDFLD) LENGTH(LENG) RBA
         B     NEXTTS2
FINDAT2  DS    0H
* A TASK SHOULD BE SCHEDULED HERE TO DISABLE AND CLOSE FILE, BECAUSE
* YOU CAN'T DO IT IN THE SAME TASK.  ALSO OTHER PROCESSING COULD
* BE SCHEDULED (E.G., SUBMIT BATCH JOB TO PROCESS UPLOADED DATA).
         MVC   CFTDAT1X,CFTDAT2
         EXEC CICS START TRANSID('ZCLO') INTERVAL(000015) REQID('ZCL') X
               FROM(CFTDAT1X) LENGTH(H8)
         B      CFTRNNNN            BRANCH...DELETE QUEUE.
* SHAREABLE TYPE PROCESSING ROUTINE.
PROCSHAR DS    0H
* CHECK IF DATA QUEUE ID EXISTS.  CFTNNNN
         MVI   QUEUECFT,X'40'
         MVC   QUEUECFT+1(L'QUEUECFT-1),QUEUECFT
         MVC   QUEUECHD,HEADER         MOVE 'CFT' HEADER.
         MVC   QUEUECNM,SAVENAME       MOVE SHAREABLE FILE NAME.
         MVC   QUEUEID(4),SAVETERM     MOVE TERMINAL ID PASSED.
         MVC   QUEUEID+4(4),SAVENAME   MOVE SHAREABLE NAME PASSED.
         EXEC  CICS HANDLE CONDITION                                   X
               LENGERR(LENGERR)                                        X
               ITEMERR(CFTNF)                                          X
               NOSPACE(NOSPERR)                                        X
               IOERR(IOERR)                                            X
               QIDERR(CFTNF)
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUECFT)                                         X
               SET(DATA2OUT)                                           X
               LENGTH(LENG)                                            X
               NUMITEMS(NUMITEMS)                                      X
               ITEM(STATITEM)
* CHECK AUTHOR QUEUE.
         EXEC  CICS HANDLE CONDITION                                   X
               ITEMERR(AUTHERR)                                        X
               QIDERR(AUTHERR)
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               INTO(QUEUEIDO)                                          X
               LENGTH(H8)
*  DELETE AUTHOR QUEUE ITEM.
         EXEC CICS DELETEQ TS QUEUE(QUEUEID)
*  DELETE CFTNNN QUEUE ITEM.
         EXEC CICS DELETEQ TS QUEUE(QUEUECFT)
* WRITE AUTHOR QUEUE RECORD.  (TERMNNNN)
CFTNF    DS    0H
         EXEC  CICS HANDLE CONDITION                                   X
               ITEMERR(ITEMERR)                                        X
               QIDERR(QIDERR)
         EXEC  CICS WRITEQ TS                                          X
               QUEUE(QUEUEID)                                          X
               FROM(QUEUEID)                                           X
               LENGTH(H8)
         MVI   QUEUEID,X'40'
         MVC   QUEUEID+1(L'QUEUEID-1),QUEUEID
* READ HEADER RECORD AND WRITE IT (THIS WILL BE CHECKED BY RECEIVE).
         MVC   QUEUEID,SAVECNTL        SET UP QUEUE ID
         MVI   QUEUECFT,X'40'
         MVC   QUEUECFT+1(L'QUEUECFT-1),QUEUECFT
         MVC   QUEUECHD,HEADER         SET UP 'CFT' HEADER
         MVC   QUEUECNM,SAVENAME       SET UP SHAREABLE FILENAME
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               SET(DATA2OUT)                                           X
               LENGTH(LENG)                                            X
               NUMITEMS(NUMITEMS)                                      X
               ITEM(STATITEM)
         EXEC  CICS WRITEQ TS                                          X
               QUEUE(QUEUECFT)                                         X
               FROM(0(R7))                                             X
               LENGTH(LENG)
         MVI   DATA1OUT,X'40'
         MVC   DATA1OUT+1(L'DATA1OUT-1),DATA1OUT
NEXTSTS  DS    0H
         AH    R10,H1
         CH    R10,NUMITEMS
         BE    CFTRNNNN
* READ TRANSMITTED TEMPORARY STORAGE DATA RECORDS. (CFTRTERM)
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               LENGTH(LENG)                                            X
               SET(DATA2OUT)                                           X
               NEXT
* WRITE SHAREABLE RECORDS TO NEW TEMPORARY QUEUE.  (CFTNNNN)
         EXEC  CICS WRITEQ TS                                          X
               QUEUE(QUEUECFT)                                         X
               FROM(0(R7))                                             X
               LENGTH(LENG)
         MVI   DATA1OUT,X'40'
         MVC   DATA1OUT+1(L'DATA1OUT-1),DATA1OUT
         B     NEXTSTS
* DELETE TYPE PROCESSING ROUTINE.
PROCDEL  DS    0H
* CHECK IF DATA QUEUE ID EXISTS.  CFTNNNN
         MVI   QUEUECFT,X'40'
         MVC   QUEUECFT+1(L'QUEUECFT-1),QUEUECFT
         MVC   QUEUECHD,HEADER         MOVE 'CFT' HEADER.
         MVC   QUEUECNM,SAVENAME       MOVE SHAREABLE FILE NAME.
         EXEC  CICS HANDLE CONDITION                                   X
               LENGERR(LENGERR)                                        X
               ITEMERR(CFTDNF)                                         X
               NOSPACE(NOSPERR)                                        X
               IOERR(IOERR)                                            X
               QIDERR(CFTDNF)
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUECFT)                                         X
               SET(DATA2OUT)                                           X
               LENGTH(LENG)                                            X
               NUMITEMS(NUMITEMS)                                      X
               ITEM(STATITEM)
* CHECK AUTHOR QUEUE.
         EXEC  CICS HANDLE CONDITION                                   X
               ITEMERR(AUTHERR)                                        X
               QIDERR(AUTHERR)
         MVC   QUEUEID(4),SAVETERM     MOVE TERMINAL ID PASSED.
         MVC   QUEUEID+4(4),SAVENAME   MOVE SHAREABLE NAME PASSED.
         EXEC  CICS READQ TS                                           X
               QUEUE(QUEUEID)                                          X
               INTO(QUEUEIDO)                                          X
               LENGTH(H8)
*  DELETE AUTHOR QUEUE ITEM.
         EXEC CICS DELETEQ TS QUEUE(QUEUEID)
*  DELETE CFTNNN QUEUE ITEM.
         EXEC CICS DELETEQ TS QUEUE(QUEUECFT)
         B     CFTRNNNN
CFTRNNNN DS    0H
* MAKE SURE TEMPORARY STORAGE QUEUE 'CFTRNNNN' IS DELETED ... NO
* LONGER REQUIRED, SO LET'S GET RID OF IT.
         MVC   QUEUEHDX,HEADCFTR       MOVE HEADER TO QUEUE.
         MVC   QUEUENMX,SAVETERM       MOVE TERMID TO QUEUE.
         EXEC  CICS HANDLE CONDITION                                   X
               ITEMERR(ITEMERR)                                        X
               QIDERR(QIDERR)
         EXEC CICS DELETEQ TS QUEUE(QUEUEIDX)
         B     FINISH
LENGERR  DS    0H
         MVC   AUDIRCC,=C'RC=LENGERR'
         B     ERRSTAT
QIDERR   DS    0H
         MVC   AUDIRCC,=C'RC=QIDERR '
         B     ERRSTAT
NOSPERR  DS    0H
         MVC   AUDIRCC,=C'RC=NOSPERR'
         B     ERRSTAT
IOERR    DS    0H
         MVC   AUDIRCC,=C'RC=IOERR  '
         B     ERRSTAT
ITEMERR  DS    0H
         MVC   AUDIRCC,=C'RC=ITEMERR'
         B     ERRSTAT
TERMERR  DS    0H
         MVC   AUDIRCC,=C'RC=TERMERR'
         B     ERRSTAT
TYPEERR  DS    0H
         MVC   AUDIRCC,=C'RC=TYPEERR'
         B     ERRSTAT
AUTHERR  DS    0H
         MVC   AUDIRCC,=C'RC=AUTHERR'
         B     ERRSTAT
PERMERR  DS    0H
         MVC   AUDIRCC,=C'RC=PERMERR'
         B     ERRSTAT
PERWERR  DS    0H
         MVC   AUDIRCC,=C'RC=PERWERR'
         B     ERRSTAT
CFTDNF   DS    0H
         MVC   AUDIRCC,=C'RC=DEL NF '
         B     ERRSTAT
FINISH   DS    0H
         MVC   AUDIRCC,=C'RC=00     '
         BAL   R6,AUDITRTN
         B     RETURN
AUDITRTN DS    0H
         EXEC CICS ASKTIME ABSTIME(ASKTIMED)
         EXEC CICS FORMATTIME ABSTIME(ASKTIMED) MMDDYY(AUDIDATE)       X
               TIME(AUDITIME) DATESEP('/') TIMESEP(':')
         MVC   AUDIEXIT,=C'PUT'
         MVC   AUDINAME,SAVEFILE
         MVC   AUDITERM,SAVETERM
         LH    R10,NUMITEMS
         CVD   R10,PKAREA
         MVC   AUDINREC,MASK5
         ED    AUDINREC,PKAREA+4
         EXEC CICS WRITE DATASET(CFTAUDIT) FROM(AUDITOUT)              X
               RIDFLD(AUDFLD) RBA
         MVI   AUDITOUT,X'40'
         MVC   AUDITOUT+1(L'AUDITOUT-1),AUDITOUT
         BR    R6
ERRSTAT  DS    0H
         BAL   R6,AUDITRTN
         MVC   0(4,COMPTR),=X'0016'       SETS A BAD RETURN CODE
         B     RETURN
H0       DC    H'0'
H1       DC    H'1'
H8       DC    H'8'
H11      DC    H'11'
H80      DC    H'80'
MASK5    DC    X'4020202020202120'
CFTAUDIT DC    CL8'CFTAUDIT'
CFTDAT1  DC    CL8'CFTDAT1 '
CFTDAT2  DC    CL8'CFTDAT2 '
DSNDAT1  DC    CL44'CICSI.DEV1.CFTDAT1                          '
DSNDAT2  DC    CL44'CICSI.DEV1.CFTDAT2                          '
HEADER   DC    CL3'CFT'
HEADCFTR DC    CL4'CFTR'
PERMID   DC    CL1'P'
SHARID   DC    CL1'S'
DELID    DC    CL1'D'
TERMTBL  DC    C'DLS5'
         DC    C'PCT2'
         DC    C'9999'
RETURN   DS    0H
         EXEC CICS RETURN
         LTORG
         END


Dave Stauss
Staff Software Specialist (USA) ) Xephon 1990


