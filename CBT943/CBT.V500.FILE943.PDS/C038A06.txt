 Submitting jobs to VSE/POWER from PCs
Our installation is configured as follows:
%    IBM 4341/12.
%    VM Version 4.
%    DOS machine DOSVSE running VSE 1.3.5 with CICS 1.5 under BTAM.
%    DOS machine VSESP2 running VSE SP2 2.1.5 with CICS 1.6 under VTAM.
%    IBM XTs with the IBM PC 3270 emulation program (Version 2.03 is required
for non-SNA communication) and the IBM PC emulation adaptor board (part number
8665789).
%    A locally-attached 3274/41D non-SNA with Distributed Function Terminal
(DFT).  The microcode is at release 65.0.
The first machine (DOSVSE) runs our production work while the second machine
(VSESP2) is used for testing and preparing for migration.
PC users needed the facility to submit JCL and data, prepared on the PC, for
execution on either one of the machines.  We decided to take advantage of the
Intelligent Workstation (IWS) function found in VSE/SP2.  The IWS utility
enables us to transfer files between a PC (running 3270 emulation program) and
CICS.
In CICS the data to be transferred (or that has been transferred) can be stored
either on a temporary VSAM file (host transfer file) or on the CICS temporary
storage file.  The PC user can specify where to store the data (or from where to
retrieve it) in the SEND or RECEIVE command.  Once the file has been transferred
to temporary storage this program can read the data and process it.  For this
situation we wrote a program that reads the temporary storage records and
transfers them to the POWER queue.
SYSTEM PROGRAMMER TASKS
1    Enable the IWS capability in VSESP2:
     %    Add IWS entries in PCT (add TCOPY IESWPCTU to your DFHPCT).
     %    Add IWS entries in PPT (add TCOPY IESWPPTU and TCOPY IESWPPTLU).
     %    Add IWS entries in FCT (remove the asterisk (*) in front of the TCOPY
IESWFCTU statement in DFHFCTSP (ICCF library 59), or add a TCOPY IESWFCTU
statement to your FCT).
     %    Add IWS entries in DCT (add TCOPY IESWDCTU to your DFHDCT).
     %    Add an entry in TCT for the PC 3270EP.  Be sure you do not define the
terminal with the extended data stream feature.
2    Install the IBM PC 3270 emulation program on PC.  (When we customised the
PC 3270EP we specified on the Tcommunication profile tasksU screen that our PC
was a stand-alone DTE (non-SNA) station.  On the Tcommunication set-upU screen
we specified that we wanted the file transfer capability.)
3    Customise the 3274 to support DTE terminals.  Check your answer to question
number 170.  We set it to 2.
4    There is some VM preparation to perform if you want to transfer the job
cards from VSESP2Us punch queue to DOSVSEUs reader queue (you can skip these
steps if you want to transfer a file from the PC to the POWER queue within the
same VM machine).
     %    In the VM userUs directory add:
          spool 06C 3505 Z      for user DOSVSE
          (define a reader with an arbitrary class Z)
          spool 06D 3525 Z    for user VSESP2
          (define a punch with the same class as above)
          06C and 06D are the addresses of a dummy reader and punch.  You can
change them to any address that fits your installation.  Be sure to make the
appropriate change wherever there is a reference to either 06C or 06D in the
following text.
     %    In VSESP2 VM machine enter:
          SP 06D DOSVSE CL Z
          If you are using VOLLIE you can enter:
          VMI CP 06D DOSVSE CL Z
5    Preparation for user exit program:
     %    Copy and assemble the program CFTR2PUN (PC to punch queue).
     %    Add an entry in the PPT for CFTR2PUN.
     Or if you want the temporary storage file to be transferred to the reader
queue
     %    Copy and assemble the program CFTR2RDR (PC to reader queue).
     %    Add an entry in the PPT for CFTR2RDR.
6    On the VSESP2 console:
      S PUN,06D,Z
     G 06D (ANSWER FOR MESSAGE 1Q40A - ON 06D FORM NEEDED)
     The cards will be transferred to VM RDR queue for DOSVSE.
7    On the DOSVSE console enter:
     S RDR,06C,Z
     The cards will be sent to the RDR queue.
END-USER TASKS
To initiate the program the user has to:
1    Create a file on A-disk (weUll name this file JCL RUN).  This file includes
all the JCL and the data required for the execution.  Be sure to insert Carriage
Return/Line Feed (CR/LF) characters at the end of each record.  Most of the
editors will insert CR/LF characters at the end of the record.  If you create
the records in the user-written program it is your responsibility to put CR/LF
characters at the right place.
2    Activate the IBM PC 3270 emulation program on the PC.
          A> PSCAPI                 (to load program PSCAPI)
          A> PSCPG       (to load and execute program PSCPG)
3    Attach the PC (in its 3270 mode) to CICS, for example by dialling to the
VSESP2 machine:
          DIAL VSESP2 cuu
     where cuu is the terminal address in the TCT that was generated for the PC.
4    Sign-on to CICS.
5    Switch to PC mode (ALT-ESC).
6    At the prompt
     A> - ENTER, send JCL RUN JOB1 (FILE=TS PROGRAM=CFTR2PUN REPLACE
     where:
     %    JCL RUN is the PC file name.
     %    JOB1 is an arbitrary name.  This name will be stored in the header
record in the temporary storage queue.
     %    FILE=TS is an indication that the transferred file will be stored on
temporary storage.
     %    PROGRAM=CFTR2PUN is a user-written program that will gain control
after the file has been transferred from the PC to temporary storage.  This
program reads the records from the temporary storage queue named CFTRDXXX (where
DXXX is the terminal-id as defined in the JCT) and sends them to the POWER punch
queue.  The first four characters of the program name have to be TCFTRU.
     %    REPLACE P to replace an existing queue with the same name.  For a
detailed explanation of the send parameters see Hardware and System Support
Extension SC33-6184 pages 64 to 84.
7    Switch back to CICS (ALT ESC) to transfer a job from the PC to be executed
on another VSE machine (VSEPRD P in this case).  Replace step 6 above by:
     At the prompt
     A> - ENTER SEND JCL RUN JOB1 (FILE=TS PROGRAM=CFTR2PUN REPLACE
     This command will activate the user-written program CFTR2PUN, which will
read the temporary storage queue and send the records to the punch queue.
THE PROGRAM IWS2RDR
This program is a modified merge of the sample program in VSE/POWER Installation
and Operation Guide SH12-5329-5 pages 7-78 to 7-103) and INWSAMA1 in ICCF
library (59) VSE/SP2 2.1.5.  The communication between the file transfer program
and this program is via the COMMAREA).
PROGRAM LOGIC
1    Establish connection to POWER.  Identify the connection name as IWS2RDR.
2    Check if the COMMAREA has been transferred (by checking the length of the
COMMAREA).  If not P disconnect POWER, terminate the cross-partition
communication, and return to CICS.
3    Read the first (header) record from the temporary storage queue.  The queue
name is transferred in the COMMAREA.  The data in this record is ignored.  If
there is no record for this queue name, disconnect POWER and return to CICS.
4    Set the POWER Spool Parameter List (SPL) values.  Among them are :
     %    QUEUE=RDR P to write the records on the reader queue.
     %    CLASS=Z P to set the class to Z.
     %    JOBN=JOBN P to set the POWER job name.
5    Read the temporary storage queue.  At the end disconnect from POWER and
return to CICS.
6    Move the record to the POWER buffer and send it to POWER.
7    Repeat steps (5) and (6) until all data has been read.
 THE PROGRAM IWS2PUN
The program IWS2PUN (to transfer records from TS to PUN-QUEUE) is identical to
IWS2RDR.  The only difference is in the POWER SPL setting.  Change TQUEUE=U from
TRDRU (for reader queue) to TPUNU (for punch queue).  I would recommend changing
all the occurrences of TIWS2RDRU to TIWS2PUNU.
OTHER CHANGES
If you do not like my TCLASS=ZU you can change it.  Remember to set the same
class in the VM definition of the punch and the reader.
THE PROGRAM ISW2RDR
DFHEISTG DSECT
****       DEFINITION OF THE USER COMMON AREA:                    ****
*    TO COMMUNICATE BETWEEN THE FILE-TRANSFER-PROGRAM AND THE USER-  *
*    PROGRAM, A COMMON AREA IS USED AND CONTAINS THE FOLLOWING INFOR-*
*    MATION:                                                         *
*    - USER RETURN CODE : ON UPLOAD, THE RETURN CODE RECEIVED FROM   *
*                         THE USER WILL BE DISPLAYED IN THE INW0024  *
*                         COMPLETION MESSAGE.                        *
*    - HOST FILE NAME   : THIS NAME IS STORED IN THE HEADER RECORD   *
*    - TS QUEUE NAME    : SPECIFIES THE NAME OF THE TS QUEUE INTO    *
****                      WHICH THE DATA FROM THE PC IS STORED.   **** USERCOM
DSECT                     USER COMMUNICATION AREA
FILLER   DS    CL2                 RESERVED FIELD
URETCODE DS    CL2                 USER RETURN CODE
UFILE    DS    CL8                 HOST FILE NAME
UQUEUE   DS    CL8                 TS QUEUE NAME
CFTR2RDR CSECT
BUFPTR   EQU   10                  PTR TO SENDBUF
DATAPTR  EQU   11                  PTR TO CARDIN
         LA    R4,OWNXPCCB      GET ADDR FOR CROSS PART. CONTROL BLK
         USING IJBXPCCB,R4      ESTABLISH ADDRESSABILITY FOR DSECT
         LA    R5,IJBXSUSR      GET ADDR FOR USER DATA TO BE SENT
         USING PXUUSER,R5
         LA    R6,IJBXRUSR      GET ADDR FOR RECEIVED USER DATA
         USING PXPUSER,R6
         LA    R7,OWNSPL        GET ADDR OF SPL
         USING OWNSPLDS,R7
* CREATE CONNECTION TO POWER RDR - IDENTIFY THE CONNECTION AS IWS2RDR *
IDENT    XPCC  XPCCB=(R4),FUNC=IDENT   IDENTIFY 'IWS2RDR' TO AF-XPCC
         CLM   RF,M1,EIGHTDC           WAS RC X'08' GIVEN BACK?
         BNO   CONCT                   .. NO, CONTINUE WITH CONNECTN
         B     FINEND                  TERMINATE AND RETURN TO CICS
CONCT    XPCC  XPCCB=(R4),FUNC=CONNECT      CONNECT TO VSE/POWER
         LTR   RF,RF                   IS CONNECTION ALREADY AVAILABLE
         BZ    CONNOK                  ..YES, BYPASS WAIT FOR CONN
         CLM   RF,M1,EIGHTDC           WAS RC X'08' GIVEN BACK
         BL    WAITCECB                ..NO, MUST BE 04. WAIT FOR CECB
         B     TERMN                   GO TO CLOSE XPCC INTERFACE
WAITCECB DS    0H                      CONNECTION IS STILL PENDING
         SETIME 120,INTECB             SET WAIT INTERVAL OF 2 MIN
         LA    R8,IJBXCECB             LOAD ADDR OF CONNECTION ECB
         ST    R8,LISTCECB             COMPLETE WAITLIST
         WAITM WAITLIST                WAIT FOR CONNECTION OR 2 MIN
         TM    IJBXCECB+2,POSTBIT      CONNECTION COMPLETED
         BO    CONNOK                  .. YES, CONNECTION OK
         B     DISCT                   GO TO DISCONNECT AND TERMINATE
*   CONNECTION ESTABLISHED - START OF EXECUTION                       *
CONNOK   LH    R8,EIBCALEN         HAS A COMMAREA BEEN RETURNED?
         LTR   R8,R8               (BY CHECKING THE LENGTH OF COMMAREA)
         BZ    DISCT               ..NO, DISCONNECT POWER
*    READ TS QUEUE HEADER RECORD                                      *
         USING USERCOM,R8
         L     R8,DFHEICAP         GET ADDRESSABILITY TO COMMAREA
         MVC   TSQUE,UQUEUE        SAVE QUEUE NAME
         LA    R2,160              GET THE LENGTH TO READ TS QUEUE
         LA    R2,1                READ FIRST RECORD
         STH   R2,RECNO            STORE 1 IN RECNO
          EXEC CICS HANDLE CONDITION  ERROR(DISCT)
      EXEC CICS READQ TS QUEUE(TSQUE) INTO(HDRECORD) LENGTH(HDRLEN)    X
               ITEM(RECNO)
***  NOW START TO READ AND SEND CARDS UNTIL EOF                     ***
*  THE PWRSPL ESTABLISH THE POWER SPECIFICATION. TO CHANGE THE        *
*  OUTPUT FROM RDR TO PUN - CHANGE QUEUE=PUN (INSTEAD OF QUEUE=RDR).  *
*  TO CHANGE THE CLASS - CHANGE CLASS=X (WHERE X IS THE DESIRED CLASS)*
***TO CHANGE THE POWER JOB-NAME - CHANGE THE CONTENT OF JOBN        ***
         PWRSPL TYPE=UPD,SPL=OWNSPL,REQ=PUT,QUEUE=RDR,CLASS=Z          X
               JOBN=JOBN,USERID=USERID
         MVI   SPLORCFM,SPLORASA       INDICATE ASA CC FOR OUTPUT
         MVI   PXUBTYP,PXUBTSPL        INDICATE BUFFER TYPE = SPL
         MVI   PXUACT1,0               CLEAR ALL OTHER BYTES IN PXUUSER
         MVI   PXUSIGNL,0              WHICH MAY BE CHANGED BY USER
* THE SPL IS DIRECTLY USED AS XPCC SEND BUFFER
         STCM  R7,M7,IJBXADR           ISRT SPL ADDR AS BUFFER ADDR
         LA    R8,SPLGLEN              LOAD LENGTH OF SPL
         ST    R8,IJBXBLN              ISRT BUF LEN INTO XPCCB
         BAL   R9,SENDR                GO TO SENDER ROUTINE
         CLI   PXPRETCD,PXPRCOK        WAS RC ZERO?
         BNE   DISCT                   ...NO, GO TO HANDLE FAILURE
         MVI   PXUBTYP,PXUBTNDB        BUF TYPE - NORMAL DATA BUFFER
         MVI   PXUACT1,0               CLEAR ACTION BYTE
         LA    BUFPTR,SENDBUF          GET ADDR OF SEND BUFFER
         STCM  BUFPTR,M7,IJBXADR       ISRT BUF ADDR INTO XPCCB
         LA    DATAPTR,CARDIN          GET ADDR OF INPUT CARD FROM TS
         EXEC CICS HANDLE CONDITION                                    X
               QIDERR(QZERO) INTEMERR(QZERO) ERROR (DISCT)
READQ    DS    0H                       READ A RECORD FROM TS QUEUE
      EXEC CICS READQ TS QUEUE (TSQUE) INTO(CARDIN)
         USING RECPRFIX,BUFPTR        GET DSECT FOR RECORD LAYOUT
         XC    0(RECPRFXL,BUFPTR),0(BUFPTR) CLEAR BYTES FOR PREFIX
         MVI   RECTYPE,RECTNORM        ISRT RECTYPE IN REC PREFIX
         LA    R8,L'CARDIN             LOAD LENGTH OF CARDIN
         STH   R8,RECLNGTH             ISRT LENGTH OF CARDIN
         LA    BUFPTR,RECPRFXL(,BUFPTR)          SKIP PREFIX IN BUFFER
         DROP  BUFPTR
         MVC   0(L'CARDIN,BUFPTR),0(DATAPTR)     MOVE DATA INTO BUFFER
         LA    BUFPTR,L'CARDIN(,BUFPTR) INCREMENT BUFPTR BY CARDIN LNG
         LA    R8,SENDBUF              GET AGAIN START ADDR OF SENDBUF
         SR    BUFPTR,R8               CALC LENGTH OF BUFF
         ST    BUFPTR,IJBXBLN          ISRT LENGTH INTO XCPPB
         BAL   R9,SENDR                GO TO SENDER ROUTINE
         CLI   PXPRETCD,PXPRCOK        WAS PWR RC OK?
         BNE   DISCT                   ..NO, GO TO HANDLE REQ. FAILED
         LA    BUFPTR,SENDBUF          LOAD AGAIN ADDR OF SEND BUF
         B     READQ                   GO TO READ NEXT RECORD
*    NO MORE INPUT CARDS                                               *
QZERO    XC    IJBXBLN,IJBXBLN         INDICATE ZERO BUFFER LENGTH
         MVI   PXUBTYP,0               CLEAR BUF TYPE BYTE IN USERAREA
         MVI   PXUACT1,PXUATEOD        INDICATE END OF DATA
         BAL   R9,SENDR                GO TO SENDER ROUTINE
         B     DISCT                   GO TO DISCONNECT
DISCT    XPCC  XPCCB=(R4),FUNC=DISCONN   DISCONNECT LINK TO POWER
         LTR   RF,RF                   WAS DISCONN SUCCESSFUL RF = 0
         BZ    TERMN                   .. YES, CONTINUE WITH TERMINATION
         B     FINEND                  BRANCH TO RETURN TO CICS
TERMN    XPCC  XPCCB=(R4),FUNC=TERMIN  TERMINATE CROSS PARTITION
         B     FINEND                  BRANCH TO RETURN TO CICS
FINEND  EXEC CICS RETURN
SENDR    XPCC  XPCCB=(R4),FUNC=SENDR   SEND BUFFER TO VSE/POWER
         LTR   RF,RF                   DID WE GET A ZERO RC?
         BZ    WAITSECB                .. YES, TEN WAIT FOR PWR REPLY
         B     DISCT
WAITSECB LA    R8,IJBXSECB          LOAD ADDR OF SEND COMPLETION ECB
         WAIT  (R8)                 WAIT FOR COMPLETION OF SENDER
          CLI   IJBXREAS,REASOK      DID ANY CONN ERR OCCUR ?
         BER   R9                   .. NO, RETURN TO CALLER
         B     DISCT
*    D E F I N I T I O N S
EIGHTDC  DC    X'08'
WAITLIST DC    A(INTECB)            1ST ELEMENT OF WAITLIST
LISTCECB DC    A(0)
LISTEND  DC    X'FF'
INTECB   DS    F                    ECB USED FOR TIME INTERVAL
POSTBIT  EQU   X'80'                MASK FOR POSTED ECB
REASOK   EQU   X'00'                ZWRO VSE/AF REASON CODE
M1       EQU   1                    MASK BIT SETTING
M7       EQU   7                    MASK BIT SETTING
JOBN     DC    CL8'IWS2RDR '
USERID   DC    CL8'IWS2RDR '
TSQUE    DC    CL8'CFTR....'        TS QUEUE NAME
CARDIN   DS    CL80                 AREA FOR INPUT CARDS FROM TS
HDRLEN   DS    H                    HEADER LENGTH
RECNO    DS    H                    RECORD NO FOR TS FIRST READ
***        DEFINITION OF THE HEADER RECORD:                         ***
*    THE HOST FILE NAME, ITS OPTIONS AND ANY COMMENTS WILL BE STORED  *
*    AS THE FIRST ITEM IN THE TS QUEUE: THIS RECORD IS CALLED THE     *
*    HEADER RECORD, THIS INFORMATION CAN BE USED BY THE USER APPLICA- *
*    TION TO DETERMINE THE NATURE OF THE FILE. ADDITIONAL INFORMATION *
*    CAN BE PASSED TO THE USER PROGRAM IN THE FORM OF COMMENTS.       *
***  (FOR DETAILED LAYOUT OF THE HEADER SEE INWSAMA1 IN ICCF (59)   ***
HDRECORD DS    CL160' '             HEADER RECORD DESCRIPTION
RECLEN   DS    H                    LENGTH OF TS QUEUE RECORD
         LTORG
*  CROSS PARTITION CONTROL BLOCK                                      *
OWNXPCCB XPCCB APPL=IWS2RDR,TOAPPL=SYSPWR,                             X
               BUFFER=(SENDBUF,88)
SENDBUF  DS    CL88
OWNSPL   PWRSPL TYPE=GEN,USERID=IWS2RDR,PRFX=OWN
OWNSPLDS PWRSPL TYPE=MAP
         MAPXPCCB
         END


Dan Sivan
Systems Programmer
Cedarapids Inc (USA)     ) Xephon 1989
























