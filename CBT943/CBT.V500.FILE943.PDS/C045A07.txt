Faster printing for CICS CSP transactions

CICS CSP transactions are very slow in printing because they only
print one line at a time.  Our normal CICS COBOL transactions
send a buffer of 1920 characters to the CICS printer which
represents several lines of printed output.  For CICS users
experiencing this problem, the following program will come to the
rescue.  This program is especially important in the case of remote
printers.  It sends a 1920-character buffer to the terminal printer,
which is received in the terminal printerUs buffer from where it
can be printed.  This saves on the number of data transmissions
and the delay time the printer spends waiting for the data to print.
I am sure users will find it extremely valuable in improving their
response times.

To use the program, perform the following steps:

1   Translate, assemble, and catalogue the following source code
with the name FZETPRT.

2   Change the PCT entry for transaction XSPP to execute
FZETPRT.

3   Add a PPT entry for program FZETPRT.

FZETPRT SOURCE CODE

DFHEISTG DSECT
STRTCODE DS    H                    READ IN AREA LENGTH
READAREA DS    0CL200
READASA  DS    CL1
SINGLE   EQU   X'40'                SINGLE SPACE
DOUBLE   EQU   X'F0'                DOUBLE SPACE
TRIPLE   EQU   X'60'                TRIPLE SPACE
SKIPTO1  EQU   X'F1'                SKIP TO CHANNEL 1
         DS    CL199
SENDAREA DS    CL4
READLENG DS    H
SENDLENG DS    H
FLAGS    DS    C                    FLAG BYTE
NOTFIRST EQU   X'80'                NOT FIRST TIME
FZETPRT  DFHEIENT CODEREG=(10)
         B     AROUND               GO AROUND ID
         DC    C'FZETPRT 03'        ID
AROUND   DS    0H
         MVI   FLAGS,0              RESET ALL FLAGS
    EXEC CICS HANDLE CONDITION ERROR(RETURN)
    EXEC CICS ASSIGN STARTCODE(STRTCODE)
         CLC   STRTCODE,=C'QD'      STARTED BY TRANS DATA?
         BE    PARMSOK              YES, BRANCH
*        TRANSACTION STARTED FROM OTHER THAN TRANSIENT DATA, QUIT
    EXEC CICS SEND FROM(MESSAGE1) LENGTH(MSGLENG)                     X
               CTLCHAR(WCC) ERASE WAIT
         B     RETURN
PARMSOK  EQU   *
    EXEC CICS GETMAIN SET(4) LENGTH(1936)
         USING TIOADSCT,4           TELL ASSEMBLER
         LR    6,4                  MOVE BUFFER POINTER
         A     6,=A(16)             ADD 16 TO BYPASS PREFIX AREA
         ST    6,BDATA              STORE THE ADDRESS OF DATA START
         ST    6,CDATA              STORE ADDRESS OF CURRENT DATA
         L     6,=A(1918)           LOAD THE LENGTH OF BUFFER
*                                       LESS 2 SLACK BYTES
         STH   6,TLEN               STORE TOTAL BUFFER LENGTH
         SR    6,6                  SET REG TO ZERO
         STH   6,CLEN               SET CURRENT LENGTH TO ZERO
READMORE EQU   *
         MVC   READLENG,=AL2(L'READAREA) SET LENGTH
    EXEC CICS READQ TD QUEUE(EIBTRMID) INTO(READAREA) LENGTH(READLENG)
         TM    FLAGS,NOTFIRST       FIRST TIME ?
         BO    NOSKIP               NO, BRANCH
***   SKIP TO TOP OF PAGE   ***
         L     7,=A(SKIP1)          LOAD THE ADDRESS OF THE SKIP CTRL
         L     8,=A(L'SKIP1)        SET THE LENGTH OF SKIP CONTROL
         BAL   9,PUTBUF             GO PUT THE DATA IN THE BUFFER
         OI    FLAGS,NOTFIRST       SET NOT FIRST TIME
***   SPACE DOWN THE PAGE 53 LINES   ***
         LA    7,SPACE53            GET THE NL'S TO MOVE DOWN THE PAGE
         LH    8,=AL2(L'SPACE53)    LOAD THE LENGTH OF THE NL'S
         BAL   9,PUTBUF             GO WRITE THE SPACING DOWN
***   WRITE OUT 20 LINES OF ASTERISKS   ***
         LA    5,2(0,0)             WE'RE GOING TO DO THIS TWO TIMES
PAGE2    EQU   *
         LA    6,21(0,0)            WE'RE GOING TO WRITE 20 LINES
LINE20   EQU   *
         LA    7,ASTERISK           GET THE PLACE WHERE THE * ARE
         LH    8,=AL2(L'ASTERISK)   GET THE LENGTH OF THE WRITE
         BAL   9,PUTBUF             GO WRITE THE LINE
         BCT   6,LINE20             LOOP THROUGH 20 TIMES
***   SPACE DOWN THE PAGE 47 LINES   ***
         LA    7,SPACE47            LOAD THE ADDR OF THE 47 NL'S
         LH    8,=AL2(L'SPACE47)    LOAD THE LENGTH
         BAL   9,PUTBUF             GO WRITE THE DOWN SPACING
         BCT   5,PAGE2              DO THE SECOND PAGE
***   SKIP TO TOP OF PAGE   ***
         L     7,=A(SKIP1)          LOAD THE ADDRESS OF THE SKIP CTRL
         L     8,=A(L'SKIP1)        SET THE LENGTH OF SKIP CONTROL
         BAL   9,PUTBUF             GO PUT THE DATA IN THE BUFFER
***   DETERMINE THE SPACING AND WRITE THE LINE OF OUTPUT   ***
NOSKIP   EQU   *
         LA    7,SPACE1             ASSUME ADDITIONAL SINGLE SPACE
         L     8,=A(L'SPACE1)       AND LENGTH
         CLI   READASA,DOUBLE       DOUBLE SPACE?
         BE    SETSPACE             YES, BRANCH
         LA    7,SPACE2             ASSUME ADDITIONAL DOUBLE SPACE
         L     8,=A(L'SPACE2)       AND LENGTH
         CLI   READASA,TRIPLE       TRIPLE SPACE?
         BE    SETSPACE             YES, BRANCH
         LA    7,SKIP1              ASSUME SKIP TO CHANNEL 1
         L     8,=A(L'SKIP1)        AND LENGTH
         CLI   READASA,SKIPTO1      SKIP TO CHANNEL ONE?
         BNE   AFTRSKIP             NO, DEFAULT SPACE SUPPRESS
         SR    5,5                  CLEAR
         ICM   5,3,READLENG         LENGTH
         SH    5,=H'2'              DECREMENT FOR EXECUTE AND ASA CHAR
         BM    READMORE             STAND ALONE SKIP TO ONE
         EX    5,BLANKCHK           CHECK FOR BLANK LINE
         BNE   SETSPACE          SKIP TO 1 AND BLANK LINE, MAY BE LAST
         NI    FLAGS,255-NOTFIRST   SET FIRST TIME PROCESSING
         B     READMORE             GO LOOK AT NEXT
SETSPACE EQU   *
         BAL   9,PUTBUF             PUT THE DATA IN THE BUFFER
AFTRSKIP EQU   *
         SR    8,8                  CLEAR
         ICM   8,3,READLENG         GET LENGTH
         BZ    RETURN               NO DATA, BRANCH
         BCTR  8,0                  DECREMENT FOR EXEC AND ASA CHAR
         BCTR  8,0                  DECREMENT FOR EXEC AND ASA CHAR
         LTR   8,8                  CHECK IT AGAIN
         BM    RETURN               NONE THERE, QUIT
         EX    8,XLATE              TRANSLATE OUT BAD CHARACTERS
         ICM   8,3,READLENG         TRUE LENGTH AGAIN
         LA    7,READAREA-1(8)      POINT TO LAST CHARACTER
LOOP     EQU   *                    SHORTEN OUT ALL BLANKS
         CLI   0(7),C' '            BLANK
         BNE   NONBLANK             NO, BRANCH
         BCTR  7,0                  BACK UP SOME MORE
         BCTR  8,0                  DECREMENT LENGTH
         CH    8,=H'3'              LENGTH 3
         BH    LOOP                 CHECK SOME MORE
NONBLANK EQU   *                    FIRST NON BLANK
         BCTR  8,0                  LENGTH LESS 1 FOR ASA CHAR
         LA    7,READAREA+1         SET POINTER TO DATA BUFFER ADDR
         BAL   9,PUTBUF             GO PUT THE DATA IN THE BUFFER
         B     READMORE             GO SOME MORE
*** ROUTINE TO PUT THE DATA INTO THE BUFFER AND SEND WHEN FULL   ***
PUTBUF   L     2,CDATA              GET THE CURRENT BUFFER DATA POS
         SR    3,3                  CLEAR REG FIRST
         ICM   3,3,CLEN             GET THE CURRENT DATA LENGTH
         AR    3,8                  ADD THE REQUESTED OUTPUT LENGTH
         CLM   3,3,TLEN             IS REQUEST FOR MORE THAN BUFFER
         BH    SENDIT               YES- GO SEND THE DATA
         BCTR  8,0                  NO- DECREMENT THE LENGTH
         EX    8,MOVTOBUF           MOVE THE DATA TO OUTPUT BUFFER
         LA    2,1(2,8)             NEXT BUFFER DATA POSITION
         MVI   0(2),X'15'           INSERT NL
         LA    2,1(0,2)             BUMP BUFFER ADDRESS BY 1
         ST    2,CDATA              SAVE IT
         S     2,BDATA              CALCULATE NEW LENGTH OF DATA
         STCM  2,3,CLEN             STORE LENGTH
         BR    9                    RETURN TO THE CALLER
MOVTOBUF MVC   0(0,2),0(7)          EXECUTED MOVE DATA TO BUFFER
SENDIT   SR    3,3                  CLEAR REG
         ICM   3,3,CLEN             GET THE CURRENT DATA LENGTH
         MVI   0(2),X'19'           PLACE EOM AT END OF DATA
         LA    3,1(0,3)             INCREMENT THE COUNT
         STCM  3,3,CLEN             UPDATE THE CURRENT DATA LENGTH
    EXEC CICS SEND FROM(BDATA+16) LENGTH(CLEN) CTLCHAR(WCC) WAIT ERASE
         L     3,BDATA              LOAD THE ADDRESS OF START OF DATA
         ST    3,CDATA              STORE IN THE CURRENT DATA ADDRESS
         SR    3,3                  ZERO THE REG
         STH   3,CLEN               SET CURRENT LENGTH TO ZERO
         B     PUTBUF               GO PUT THE DATA IN THE BUFFER
RETURN   DS    0H
***   FLUSH THE LAST BUFFER WHEN END OF FILE   ***
         SR    3,3                  CLEAR REG
         ICM   3,3,CLEN             GET THE CURRENT DATA LENGTH
         LTR   3,3                  IS LENGTH ZERO?
         BZ    RETURN1              CONTINUE, NOTHING IN BUFFER
         L     2,CDATA              GET THE CURRENT BUFFER DATA POS
         MVI   0(2),X'19'           PLACE EOM AT END OF DATA
         LA    3,1(3)               INCREMENT THE COUNT
         STCM  3,3,CLEN             UPDATE THE CURRENT DATA LENGTH
    EXEC CICS SEND FROM(BDATA+16) LENGTH(CLEN) CTLCHAR(WCC) WAIT ERASE
         L     3,BDATA              LOAD THE ADDRESS OF START OF DATA
         ST    3,CDATA              STORE IN THE CURRENT DATA ADDRESS
         SR    3,3                  ZERO THE REG
         STH   3,CLEN               SET CURRENT LENGTH TO ZERO
         B     READMORE             TRY TO READ TD QUEUE ONE MORE
***   EXECUTED INSTRUCTIONS   ***
BLANKCHK CLC   READAREA+1(1),BLANKSTR
XLATE    TR    READAREA+1(1),TRTABLE EXECUTED TRANSLATE
CCMOVE   MVC   SENDAREA(1),0(7)     MOVE THE SPACING CHARACTERS
***   MESSAGE1, MESSAGE2, & SPACE1 MUST REMAIN CONTIGUOUS IN STORAGE ***
MSGLENG  DC    AL2(L'MESSAGE1+L'MESSAGE2+L'SPACE1) MESSAGE LENGTH
MESSAGE1 DC    C'FZE10040I  PRINT TRANSACTION NOT STARTED'
MESSAGE2 DC    C' FROM TRANSIENT DATA QUEUE'
SPACE1   DC    X'40'               ONE NL      (1 NL ADDED BY PUTBUF)
SPACE2   DS    0CL1                TWO NL'S    (1 NL ADDED BY PUTBUF)
SPACE3   DS    0CL2                THREE NL'S  (1 NL ADDED BY PUTBUF)
SPACE47  DS    0CL46               FORTY SIX   (1 NL ADDED BY PUTBUF)
SPACE53  DS    0CL52               FIFTY TWO   (1 NL ADDED BY PUTBUF)
         DC    52X'15'
ASTERISK DS    CL120
         DC    120C'*'
SKIP1    DC    X'0C'               SKIP TO TOP OF PAGE
WCC      DC    X'C8'                START PRINT
*               0 1 2 3 4 5 6 7 8 9 A B C D E F
TRTABLE  DC   X'00404040404040404040404040404040'         0        D03
         DC   X'40404040404040404040404040404040'         1
         DC   X'40404040404040404040404040404040'         2
         DC   X'40404040404040404040404040404040'         3
         DC   X'404142434445464748494A4B4C4D4E4F'         4        D03
         DC   X'505152535455564058405A5B5C5D5E5F'         5        D03
         DC   X'606140404040404040406A6B6C6D6E6F'         6
         DC   X'404040404040404040797A7B7C7D7E7F'         7
         DC   X'408182838485868788898A408C8D8E8F'         8        D03
         DC   X'909192939495969798999A40409D9E9F'         9        D03
         DC   X'40A1A2A3A4A5A6A7A8A9AA40ACADAEAF'         A        D03
         DC   X'40404040404040404040BABBBCBDBEBF'         B        D03
         DC   X'C0C1C2C3C4C5C6C7C8C9404040404040'         C
         DC   X'D0D1D2D3D4D5D6D7D8D9404040404040'         D
         DC   X'E140E2E3E4E5E6E7E8E9404040404040'         E
         DC   X'F0F1F2F3F4F5F6F7F8F9404040404040'         F
BLANKSTR DC    CL200' '             BLANKS
         LTORG
PATCH    DS    CL256
***   TIME IN CASE SOME LINES CAME IN WHILE WE WERE PRINTING   ***
RETURN1  DS    0H
    EXEC CICS HANDLE CONDITION ERROR
READIN   DSECT
ASA      DS    C
TIOADSCT DSECT
BDATA    DS    A
CDATA    DS    A
TLEN     DS    H
CLEN     DS    H
         END   FZETPRT


Nusrat Waheed
Technical Support Project Leader
Olayan (Saudi Arabia) ) Xephon 1989


