 Displaying local terminals
When a user calls to complain that his terminal is TbrokenU, or that he is
having trouble with a particular application, it is usually necessary for you to
look at his screen image to determine what the problem is.  There are several
ways to do this, some of which have already been documented in previous editions
of CICS Update.  The method of operation that is documented here only works for
local terminals; however, it will work if the target terminal is executing a
conversational task.
To execute the transaction, the user simply enters:
     SPYT,xxxx
where xxxx is the terminal identifier (eg L200).  The screen will then be
TcopiedU onto your screen.
The SPYTERM program receives the target terminal-id entered by the user and
determines whether the terminal exists.  If it does exist the physical hardware
address is obtained from the TCTTE (TCTTECCU) and passed to a transient
($$BRTERM), which will issue an SIO to read the target terminalUs buffer.  This
implies that $$BRTERM gets into supervisor state in order to issue the SIO.
SPYTERM
         LCLC  &REL
&REL     SETC  '1.0'
         TITLE 'SPYTERM: DISPLAY ANY LOCAL TERMINAL'
DFHEISTG DSECT                     CICS DYNAMIC STORAGE
         CNOP  0,8
TEXTLTH  DS    1H                  LENGTH OF TEXT MESSAGE
TERMID   DS    CL4                 TERMID TO BE DISPLAYED
RECVBUFF DS    CL4095              FROM 'RECEIVE SCREEN'
RECVCUU  EQU   RECVBUFF,2          CUU TO READ
SPYTERM  CSECT
         LA    R4,4095(,R3)        SET UP SECOND BASE
         LA    R4,1(,R4)          ALL THE WAY UP
         USING SPYTERM+4096,R4     TELL ASM
         LA    RF,16               READ 16 BYTES
         STH   RF,TEXTLTH          STORE IT...
         EXEC  CICS RECEIVE INTO (RECVBUFF) LENGTH (TEXTLTH)
         MVC   TERMID,RECVBUFF+5   MOVE TERMID
         EXEC  CICS ADDRESS CSA (R6)
         USING DFHCSADS,R6         TELL ASM
         L     R8,CSACDTA          GET OUR TCA
         USING DFHTCADS,R8         TELL ASM
         USING DFHTCTTE,R9         TELL ASM
         L     R7,CSATCTBA         POINTER TO FIRST TCT
         L     R9,X'1C'(R7)        POINTER TO FIRST TCTTE
SPY000   CLC   TCTTETI,HEXFF       END OF TCTTE ?
         BE    ERR01               YES... ERROR
         CLC   TCTTETI,TERMID      OUR TERMINAL ?
         BE    SPY010              YES...
         AH    R9,TCTTETEL         NEXT ENTRY...
         B     SPY000              LOOP
         DROP  R6                  DON'T NEED R6 ANYMORE
         DROP  R8                  DON'T NEED R8 ANYMORE
SPY010   MVC   RECVCUU,TCTTECCU    MOVE PHYSICAL HARDWARE ADDRESS
         LA    R0,RECVBUFF         ADDRESS PLIST (CUU,BUFFER)
         LA    R1,=CL8'$$BRTERM'         READ TRANSIENT
         SVC   2                   DO IT !!
         LH    RF,RECVBUFF         LENGTH OF DATA
         SH    RF,=H'3'            - FIRST 3 BYTES...
         STH   RF,TEXTLTH          STORE IT
         EXEC  CICS SEND FROM (RECVBUFF+3) LENGTH(TEXTLTH) ERASE
RETURN   EXEC  CICS RETURN         RETURN TO PROGRAM WHO CALLED ME
ERR01    LA    RF,MSG01L           LENGTH OF MESSAGE.
         STH   RF,TEXTLTH          STORE IT
         EXEC  CICS SEND FROM (MSG01) LENGTH(TEXTLTH) ERASE
         B     RETURN              AND GET OUT
MSG01    DC    X'1DC8'
         DC    X'114B5F'           SBA 10,16
         DC    C'*==================================================*'
          DC    X'114C6F'           SBA 11,16
         DC    C'*         Terminal Not Defined in TCT              *'
         DC    X'114D7F'           SBA 12,16
         DC    C'*==================================================*'
MSG01L   EQU   *-MSG01             MESSAGE LENGTH
HEXFF    DC    8XL1'FF'
         DFHCSAD TYPE=DSECT        CSA DSECT
         COPY  DFHTCADS            TCA DSECT
         COPY  DFHTCTTE            TCTTE DSECT
TCTTEAR  EQU   2                   FOR TCTTE DSECT
         END   SPYTERM
$$BRTERM
         LCLC  &REL
&REL     SETC  '1.0'
***     $$BRTERM -    READ LOCAL Terminal                          ***
*  THIS TRANSIENT WILL MODIFY THE SVC NEW PSW TO POINT TO            *
*  ITS OWN CODE. IT WILL THEN ISSUE A DUMMY SVC TO GET INTO          *
*  SUPERVISOR STATE. THEN IT'LL DO AN SIO TO THE TUBE AND RETURN     *
*  TO PROBLEM STATE AND THE APPLICATION PROGRAM.                     *
*  NOTE: THIS ROUTINE IS INTENDED TO BE USED AS A PROBLEM            *
*        DETERMINATION AID ONLY.                                     *
*  REGISTER USAGE:                                                   *
*   R0     -   I/O AREA ADDRESS (THE FIRST 2 BYTES CONTAIN THE       *
*              CUU TO BE READ. AFTER COMPLETION, THE DATA LENGTH     *
*              IS PASSED BACK IN THE FIRST 2 BYTES OF THE I/O AREA.  *
*   R2     -   CUU FOR START I/O                                     *
*   R3     -   BASE                                                  *
*   R6     -   PLIST                                                 *
*   R7     -   RESIDUAL COUNT FROM READ BUFFER                       *
*   R9     -   NO. BYTES READ.                                       *
*** R15    -   WORK                                                ***
$$BRTERM CSECT
         USING *,RF
         DC    CL8'$$BRTERM'  PHASE NAME
         DROP  RF             DON'T NEED THIS ANYMORE
         BALR  R3,0           ADDRESSABILITY
         USING *,R3
         LR    R6,R0               LOAD PLIST
         SLR   R0,R0               CLEAN REG 0
         SVC   22                  SYSTEM SEIZE
         MVC   CUU,0(R6)           MOVE TUBE ADDRESS TO READ
         STCM  R6,B'0111',RDCCW+1  STORE I/O AREA
         LA    RF,SVC010           OUR SVC ADDRESS
         MVC   SAVEOLD,X'64'(R0)   SAVE OLD SVC NEW PSW
         ST    RF,X'64'(R0)        MODIFY IT
         SVC   99                  DUMMY SVC
SVC010   LA    RF,RDCCW            ADDRESS READ CCW
         ST    RF,X'48'(R0)        SET UP CAW
         LH    R2,CUU              TUBE ADDRESS
         TIO   0(R2)               IS IT FREE ?
         BC    2,*-4               LOOP IF BUSY
         SIO   0(R2)               ISSUE START I/O
         BC    2,*-4
         TIO   0(R2)               LET I/O FINISH
         BC    2,*-4               LOOP IF BUSY
         LH    R7,X'46'            LOAD RESIDUAL COUNT
         LH    R9,RDCCW+6          ORIGINAL CCW DATA LENGTH
         SR    R9,R7               GIVES BYTES READ
         STH   R9,0(R6)            STORE IT INTO I/O AREA
         MVC   X'24'(4,R0),=AL4(SVC020)       SET UP TO RETURN
         MVC   X'64'(4,R0),SAVEOLD            RESTORE SVC NEW PSW
         LPSW  X'20'                          BACK TO PROBLEM STATE
SVC020   LA    R0,255              RETURN SYSTEM
         SVC   22                  VIA SVC 22
         SVC   11                  RETURN TO A/P
RDCCW    CCW   X'02',*,X'20',4095
 CUU      DS    1H
SAVEOLD  DS    1F                  SAVE AREA FOR SVC NEW
         LTORG
         END   $$BRTERM


James Young
Technical Support Manager
Reader's Digest Association (Canada)    ) Xephon 1988

























































