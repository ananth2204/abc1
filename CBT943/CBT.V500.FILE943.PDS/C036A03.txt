 A CICS dump front-end program
We currently run CICS 1.6 under VSE.  The following short program serves as a
front end to the CICS DFHDUP program and causes each CICS dump produced to be
created as a separate piece of output on the VSE/POWER LST queue.
No changes are made to the DFHDUP program itself - the original DFHDUP program
is loaded Tas isU from its usual library to produce the dumps.  This works fine
with the DFHDUP program provided with CICS 1.5 and 1.6, and should probably work
with CICS 1.7 as well, although this has not been tested.
Assemble and catalogue the module, then replace DFHDUP in your // EXEC DFHDUP
JCL statement with whatever name you have chosen to call the program.  The
LIBDEF statement, if present, must continue to access the library containing the
existing IBM version of DFHDUP because DFHDUP is loaded from within our program.
PSLDUP   CSECT
*               THIS PROGRAM IS A FRONTEND TO DFHDUP THAT WILL CAUSE
*               POWER SEGMENTATION FOR EACH CICS DUMP PRODUCED.
*               EACH DUMP IS GIVEN A POWER NAME OF 'DUMPXXXX'
*               WHERE 'XXXX' lS THE TRANSACTION ID (IF KNOWN).
         BALR  10,0
         USING *,10                                      R10=BASE
         LR    9,1   SAVE SYSPARM, IF ANY, FOR DFHDUP       R9=PARM
* WE PREPARE A HOOK IN THE COMMUNICATIONS REGION SO THAT WE CAN
* DIVERT DFHDUP INTO OUR EXIT ROUTINE, AND ONLY PATCH 8 BYTES OF
* DFHDUP'S MACHINE CODE TO DO SO.
         MVCOM 12,10,PATCH
* POINT AT THE COMRG AND GET INFO, THEN LOAD DFHDUP
         L     8,20                GET COMRG ADDRESS        R8=COMRG
         L     3,36(8)                END OF THIS PHASE
         LA    3,8(3)
         N     3,=X'FFFFFFF8'      ALIGN ON DWB FOR LOAD MACRO
         LOAD  DFHDUP,(3)          LOAD UP THE REAL DFHDUP
         LR    4,1                 ENTRYPOINT FOR THE REAL DFHDUP
         L     5,36(8)             END OF DFHDUP PHASE
         STM   3,5,DFHADS
* WE GO THROUGH OBJECT CODE FOR DFHDUP AND CHANGE EACH WRITE REQUEST
* (WHICH WE RECOGNIZE FROM ITS STANDARD ASSEMBLER CODING CONVENTION)
* SO THAT IT IS DIVERTED INTO OUR EXIT ROUTINE.
         LM    3,5,DFHADS            PREPARE TO CODE-CRAWL
LOOP     LA    3,2(3)              BUMP
         CR    3,5                  END OF DFHDUP?
         BH    LOOPX                   YES, OUT
         CLC   4(8,3),DFHWRIT       A FILE WRITE?
         BNE   LOOP
         MVC   4(8,3),PSLWRIT        YES, DIVERT TO OS
         B     LOOP
LOOPX    DS    0H
* OK, PUT OUR REGISTERS IN ORDER AND PASS CONTROL TO DFHDUP...
         LR    1,9    SYSPARM, IF ANY, FOR DFHDUP
         BR    4                      NOW GO AND DO DFHDUP...
         DROP  10
* WE ENTER HERE EVERY TIME DFHDUP WANTS TO WRITE SOMETHING.
* IF ITS NOT FOR SYSLST, EXIT; IF ITS FOR SYSLST BUT ITS NOT
* THE BEGINNING OF A NEW DUMP, EXIT.  BUT IF IT IS, WE'LL SEGMENT.  SEGENTR  DS
0H
         USING *,15
         STM   0,15,SV
         LR    12,15
         DROP  15
         USING SEGENTR,12
         CLC   6(2,1),=X'0003'       CHECK DTF; IS WRITE FOR SYSLST?
         BNE   OUT                        NO, GO AND WRITE
* WE KKOW THAT DFHDUP'S PRINT LINE IS POINTED AT BY R11.
* (BECAUSE WE LOOKED AT DFHDUP HACHINE CODE AND FOUND OUT).
         CLC   =C'PAGE    1',112(11)    IS IT BEGIN OF A DUMP?
         BNE   OUT                        NO, RETURN
* OK, LET'S SEGMENT!!!!!!!!!!!!!!!!!!!!!
         MVC   NAME,=C'DUMPXXXX'     DEVELOP THE PRINTOUT'S NAME
          CLI   69(11),C'A'
         BL    SEG                     USING TRANSACTION ID
         MVC   NAME+4(4),69(11)          (IF PRESENT)
         CLI   NAME+5,C'A'
         BNL   *+8
         MVI   NAME+5,C'X'
         CLI   NAME+6,C'A'
         BNL   *+8
         MVI   NAME+6,C'X'
         CLI   NAME+7,C'A'
         BNL   *+8
         MVI   NAME+7,C' '
SEG      SEGMENT DEVADDR=SYSLST,JECL=JCL,NAME=DUMPXXXX
         ORG   *-14
NAME     DS    CL8
         ORG
OUT      LM    0,15,SV              PUT BACK TRUE ADDRESSES
         L     15,16(1)             GET THE IOMOD ADDR FROM DTF
         B     12(15)               GO AND WRITE
SV       DS    16F
JCL      DC    CL80'* $$ LST CLASS=H,JSEP=1   '
DFHADS   DS    3A    DFHDUP  BEGIN,ENTRYPT,END
         LTORG
DFHWRIT  L     15,16(1)     THESE 8 BYTES ARE THE STD ASSEMBLY
         BAL   14,12(15)       CODE FROM THE PUT MACRO.
PSLWRIT  L     15,20        THESE 8 BYTES POINT AT COMRG AND THEN
         BAL   14,16(15)       BAL TO OUR PATCH THEREIN.
PATCH    DC    A(SEGENTR)   THESE 3 LINES ARE PATCHED INTO THE COMRG
         L     15,12(15)       THIS LINE LOADS THE A(SEGENTR)
         BR    15              AND THIS LINE BRANCHES TO IT.
         END   PSLDUP


Jim Wagner
Senior Systems Programmer
Pacific Standard Life Insurance Co (USA)     ) Xephon 1988






























