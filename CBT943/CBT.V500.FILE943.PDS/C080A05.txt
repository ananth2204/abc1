Defining CICS resources in batch

While resource definitions such as programs, transactions, and
files can be defined on-line in CICS using the CEDA
transaction, it is sometimes useful to be able to do this in
batch. In addition, the batch job can act as a back-up for the
definitions, allowing you to re-create entries on a CSD should
the CSD become damaged. The DFHCSDUP batch utility
program allows you to define resources such as transactions,
programs, files, and terminals but the input is restricted to a
single card per resource. This makes it virtually impossible to
define many of the resources even though the DFHCSDUP
program is capable of doing so.

The DFHCSDUP UPGRADE command can be used to define
resources if the commands are first assembled and link-edited
into a load module. Within the assembly source, each
definition should be preceded by four bytes of X'FF's, and
following the last definition, there should be eight bytes of
X'FF's.

The following example shows the source to define a
TYPETERM and a TERMINAL definition into a 'work' group
called TCT.

ANYNAME CSECT
        DC    4X'FF'
        DC    C'DEFINE TYPETERM(FIXTYP) GROUP(TCT) '
        DC    C'DESCRIPTION(NON AUTO INSTALL TERMINAL) '
        DC    C'DEVICE(LUTYPE2) TERMMODEL(2) '
        DC    C'SHIPPABLE(NO) '
        DC    C'PAGESIZE(024,080) ALTPAGE(024,080) '
        DC    C'AUTOPAGE(YES) '
        DC    C'DEFSCREEN(024,080) ALTSCREEN(024,080) '
        DC    C'DUALCASEKYBD(YES) '
        DC    C'SENDSIZE(01536) RECEIVESIZE(02048) '
        DC    C'ERRLASTLINE(YES) ERRINTENSIFY(YES) '
        DC    C'ERRCOLOR(NO) '
        DC    C'AUTOCONNECT(NO) ATI(YES) TTI(YES) '
        DC    C'CREATESESS(YES) '
        DC    C'RELREQ(YES) DISCREQ(YES) SIGNOFF(YES) '
        DC    C'USERAREALEN(044) IOAREALEN(02048,04096) '
        DC    C'UCTRAN(YES) '
*
        DC    4X'FF'
        DC    C'DEFINE TERMINAL(TD15) GROUP(TCT) '
        DC    C'DESCRIPTION(NON AUTO INSTALL TERMINAL) '
        DC    C'TYPETERM(FIXTYP) NETNAME(E2ATM01) '
*
        DC    8X'FF'
        END

The following sample JCL shows how the above source can be
assembled and defined to the CICS CSD.

//ASMHCL   EXEC ASMHCL
//C.SYSIN  DD DISP=SHR,DSN=source.dsn(mbrname)
//CSDUP    EXEC PGM=DFHCSDUP,COND=(4,LT)
//STEPLIB  DD DSN=CICS.LOADLIB,DISP=SHR
//         DD DSN=&&GOSET,DISP=(OLD,DELETE)
//SYSPRINT DD SYSOUT=*
//DFHCSD   DD DSN=CICS.CSD,DISP=SHR
//SYSIN    DD *
DELETE GROUP(TCT)
UPGRADE USING(GO)
COPY GROUP(TCT) TO(FIXTCT) MERGE
DELETE GROUP(TCT)
/*

In the above JCL, ASMHCL assembles and links the source
into a temporary load library as module name GO. The
DFHCSDUP step then:

1      Deletes the group TCT, as that is the group in which the
      define commands will create the resource definitions. In
      this case the group TCT is being used as a 'work' group.

2      Creates the resource definitions by using the commands
      contained in the assembled module (GO).

3      Copies the definitions from the 'work' group TCT to the
      real group (in this case merging the entries with any
      existing ones although this is optional).

4      Deletes the 'work' group TCT.

The advantages of using this method are that many resource
definitions can be created off-line simply by using an editor to
repeat the definitions and then changing the actual resource
names.

If a definition fails for some reason, the remaining definitions
will still be defined, unlike the normal use of DFHCSDUP
where a major error prevents other commands from executing.

You must still use the CEDA command to install the
definitions into a running CICS system unless you add the
group to a group list and cold-start CICS.

David E Ellis
Senior Systems Programmer (Saudi Arabia)             c David E Ellis 1992

