 Problems with making CRTE user friendly
This is an update to the article published in the October 1987 CICS Update, on
the subject Making CRTE user friendly.  I want to make your readers aware of a
problem in the code as shown in the article.  The program, if the &AUTOSCN
option was selected, automatically shipped CICS security information to the
target CICS region.  However, while I did ship the security keys, I did not ship
the three-character operator-id.  I didnUt notice for quite some time, as my
installation has few applications that reference it.  But many installations do
perform verification against the operator-id, and to satisfy such applications,
it must be placed in the surrogate TCTTE in field TCTTEOI.
The following code will correct this problem.  In the TAutomatic Sign-onU
routine, seven instructions after label SUB300, replace the instruction:
         MVC   TIOATDL,=H'14'         SET DATA LENGTH
with the following instructions:
         MVC   TIOADBA+14(3),TCTTEOI  MOVE IN OPERATOR ID
         MVC   TIOATDL,=H'17'         SET DATA LENGTH
This will ship the operator-id across to the target region.  To get it placed in
the surrogate TCTTE when the routing session is started, you must add the
following instruction to the TInternal CallU routine, near label L00200.  Five
instructions after this label, between the MVC and OI instructions, insert the
following:
         MVC   TCTTEOI,TIOADBA+14     SET OPERATOR ID
These changes will see to it that the operator-id is set in the target CICS
region.  As I said, you donUt need this change if you are not using the
automatic sign-on feature.  But if you are, you will eventually have problems
without this change.
If any readers have tried the Tuser-friendlyU CRTE program with CICS 1.7, they
have doubtless found (as I did) that it is not user friendly, but user hostile!
Why?  Because the automatic sign-on feature (global &AUTOSCN) no longer works.
Not only doesnUt it work, but it causes storage violations, U601 and U602
abends, etc.  But fear not;  the code to allow the program to work with CICS 1.7
is supplied below.  Let me first, however, explain the problem.
What has happened is that IBM has changed the way security information is stored
in the TCTTE.  You are probably aware that CICS 1.7 provides a new sign-on
transaction, and that, in addition to the OPERID, CICS now supports the eight-
character USERID.  This makes it compatible with most external security
managers.  Also, the applications programmer has access to the USERID via the
new command EXEC CICS ASSIGN USERID.  But if you look in the TCTTE, you see that
the USERID is not stored there, as is, for example, the OPERID.  It is located
instead in a new control block called the TPseudo SNTU.  This block is allocated
out of the shared subpool when you sign-on, chained off the TCTTE at field
TCTTESNT, and filled with the information that is normally located in the TrealU
SNT entry.  But CICS development, not satisfied with just keeping the USERID
there, also decided to move some of the security information that used to be
stored directly in the TCTTE into this new control block, specifically the
extended security bits from field TCTTESKE.  This is the cause of the problems
with this program and CICS 1.7.  Since the content and format of CICS internal
control blocks is not guaranteed from release to release, this is not
surprising.
So, when a transaction is routed, either implicitly, or explicitly via CRTE, a
pseudo SNT control block is allocated and chained off the surrogate TCTTE.
Again, this is necessary to support the new ASSIGN USERID command and to
facilitate attach-time security, a new security feature with CICS 1.7.  So, to
make the Tuser-friendlyU CRTE program user friendly with CICS 1.7, it must be
changed to place the extended security bits in the pseudo SNT, rather than the
TCTTE.
To add this support, add the following to the beginning of the program:
         DFHSNT TYPE=DSECT
The following must then be changed in the TInternal CallU routine.  Five
instructions after label L00200 is the instruction:
         MVC   TCTTESKE,TIOADBA+9       SET EXTENDED SECURITY KEYS
Replace this instruction with the following instructions:
         L     R2,TCTTESNT              ADDRESS THE PSEUDO SNT
         LTR   R2,R2                    IS THERE ONE?
         BZ    L00250                   ..NO
         MVC   SNNTSKE-DFHSNNT(L'SNNTSKE,R2),TIOADBA+9
 *                                      SET EXTENDED KEYS IN PSEUDO SNT
L00250   DS    0H
Since CICS has already built and attached the pseudo SNT to the surrogate TCTTE
for you when the routing session was established, this is all you need to do to
make this program work under CICS 1.7.  However, the changes made to CICS in
this area present a new opportunity that you may want to consider.
The program as it stands really TfakesU a sign-on in the target region.  Because
of this, if you use an external security manager, or if you use CICS internal
security but users have different levels of access in different systems, you
could not use the automatic sign-on feature.  However, these changes in CICS 1.7
now make it possible for the automatic sign-on feature to work with external
security managers such as RACF and ACF2, by performing an actual sign-on in the
target region!  How?  Let me explain.
Whether you use CICS internal security or an external security manager, the
pseudo SNT will be built at sign-on.  And whatever security manager you use,
this block will contain the same basic information:  the USERID, the OPERID, the
password, and the security bits.  You can change the TInternal CallU routine to
package the USERID, OPERID, and the password into the TIOA, and pass them to the
target system.  Then, by changing the TAutomatic Sign-onU routine, you can
perform an actual sign-on in the target region with this information, rather
than just setting the security bits.  Setting the security bits alone is usually
not sufficient for an external security manager, but most external security
managers do provide an API, which allows you to programmatically perform a sign-
on.  By building an appropriate parameter list from the security information
passed by the originating system and invoking the security managerUs API, you
can dynamically perform the sign-on in the target region.
Specifically, the TInternal CallU routine (at label L00200) must package in the
TIOA the USERID (from field SNNTUSID in the pseudo SNT), the OPERID (from field
SNNTID) and the password (from field SNNTPS), and then pass them to the target
system, where the TAutomatic Sign-onU routine (at label SUB300) will extract
them and invoke your external security manager via its API.  If you use CICS
security, you can drive it by formatting a one-line sign-on in a TIOA, and
linking to DFHSNP, as described on page 70 of the CICS Supplied Transactions
manual.
Sound easy?  Well, thereUs one thing to note.  While the pseudo SNT does contain
the password, it is encrypted.  This was done to make it difficult to see other
peopleUs passwords, for example in a transaction dump.  Before you can pass it
to the security manager in an internal request, it will have to be deciphered.
Fortunately, the encryption done is not terribly complex;  for each byte, bits
0-3 and bits 4-7 are swapped, and then bits 4-7 are inverted.  Thus the password
TABCDEFU or XTC1C2C3C4C5C6U, is encrypted to XT132333435363U.   An external
security manager will not accept the encrypted password, so you'll have to
decipher it before invoking its API.  The following sample code will decipher a
password encrypted in this way:
********
*        THIS ROUTINE DECIPHERS PASSWORDS THAT ARE ENCRYPTED BY
*        CICS. THE FOLLOWING REGISTERS ARE USED -
*             R0  - WORK - USED FOR XLATE
*             R1  - WORK - USED FOR XLATE
*             R2  - LOOP CONTROL
*             R3  - POINTER TO ENCRYPTED PASSWORD
*             R4  - TARGET AREA FOR DECIPHERED PASSWORD
*                   (MUST BE 8 BYTES)
*             R15 - WORK
*        ANY REGISTERS CAN BE SUBSTITUTED, BUT R0 & R1 MUST BE
*        REPLACED BY AN EVEN/ODD PAIR.
********
         XR    R0,R0               CLEAR R0
         XR    R1,R1               CLEAR R1
         XR    R15,R15             CLEAR R15
         LA    R2,8                LOAD LOOP CONTROL
         L     R3,TCTTESNT         ADDRESS PSEUDO SNT
         LA    R3,SNNTPSWD-DFHSNNT(,R3)
*                                  POINT AT ENCRYPTED PASSWORD
         LA    R4,WORKAREA         ADDRESS WORK AREA FOR PASSWORD
LOOPPS   DS    0H
          IC    R0,0(,R3)           GET CHARACTER TO BE DECIPHERED
         SRDL  R0,4                SPLIT CHARACTER IN HALF
         SRL   R1,28               BITS 4-7 TO END OF R1
         LA    R15,15              LOAD COMPLEMENT VALUE
         SLR   R15,R1              COMPLEMENT BITS 4-7
         LR    R1,R15              SAVE BITS 4-7
         SLL   R1,4                SHIFT BITS 0-3 TO POSITION 4-7
         OR    R1,R0               FOLD THE TWO HALVES TOGETHER
         STC   R1,0(,R4)           SAVE DECIPHERED CHARACTER
         LA    R3,1(,R3)           POINT TO NEXT CHARACTER IN PASSWORD
         LA    R4,1(,R4)           POINT TO NEXT BYTE IN WORKAREA
         BCT   R2,LOOPPS           LOOP TO DO THE NEXT ONE
         B     CONTINUE            DONE
So the choice is yours.  You can run without the automatic sign-on, or make the
CICS 1.7 changes required to simply Tfake outU CICS security, or you can try the
above approach, to drive either CICS internal security or your external security
manager to perform the sign-on for you.  Good luck!

Christopher Frank
Lead Systems Programmer
Western Life Insurance (USA)  ) Xephon 1988













































