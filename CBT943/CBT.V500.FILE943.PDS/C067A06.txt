Converting from macro level to command level

On 7 February, 1991, a three hour IBM Field Television
Network (FTN) satellite television broadcast was dedicated to
the topic of eliminating macro-level coding from CICS
applications.  In the process, significant new information was
offered about CICS/ESA and related IBM products.


THE END OF MACRO LEVEL

From its introduction in 1968, until command-level coding was
introduced in 1977, macro-level coding was the only practical
way to obtain CICS services from within an application
program.  It involved placing information in, or retrieving
information from, CICS control blocks, and coding Assembler-
like macros, even in PL/I and COBOL, to initiate the
appropriate CICS service routine for the desired function.

Upward compatibility with new CICS releases was possible
since the macros provided a standard interface, at least in terms
of the initiation of the CICS service.  IBM could modify the
internals of CICS routines, but the interfaces used by the
macros, and any control blocks documented for use with
macro-level coding, had to be frozen in time forever.

But, could IBM not just modify the source of the macros with
each new release?  The answer to that depends on what you
mean by upward compatibility.  In the FTN, Bob Yelavich,
who has been with CICS since the beginning of macro-level
coding in 1968, spent a great deal of effort differentiating
between source-level compatibility and object-level
compatibility.  While the former ensures that no changes need
to be made to the source code when a new release or version of
CICS is introduced, the latter ensures that neither re-compiling
nor re-linkage editing is necessary.

For more information on these terms, see the beginning of
Appendix C of the CICS Application Programmer's Reference
Manual - Macro Level (SC33-0079-5), one of the few manuals
that applies equally to CICS/MVS Version 2, CICS/OS/VS
Version 1.7, and CICS/DOS/VS Version 1.7.

1977 saw the introduction of CICS Version 1.3 and command-
level coding, but only for COBOL and PL/I:  Assembler had to
wait until well into the 1980s for command-level coding.

I was in Dallas for the first CICS command-level coding course
IBM ever offered, which was also my first introduction to
CICS.  Command level seemed such a natural way to code.  A
month or two later, I learned macro level from the manual,
because I needed some Assembler subroutines to provide some
bit-twiddling (DASD data compression) not possible with
COBOL.  In comparison, I did not find myself disliking
macro-level coding, but it was both more time-consuming to
code and more difficult to debug.  IBM summarizes the
advantages of command level over macro level this way:

o      Command level is easier to learn, use, and debug.

o      In command level, data elements are separate and distinct,
      being part of the application, never a part of CICS.

o      Command level has better error and condition handling
      facilities.  Outside of the CHECK macro, which looks at
      error and condition codes in control blocks, macro-level
      coding provides almost no error or condition handling.

Since 1977, IBM has not made any enhancements to macro
level.  But it was not until CICS Version 3 that IBM has
consciously tried to provide all essential capabilities of macro
level in command level.  A Program Alteration System Request
(PASR) is the appropriate method of informing IBM of
anything it may have missed.


Why support for macro-level has been eliminated

Anyone doing an analysis of the phrasing in the System/390
announcements of 5 September, 1990, would notice 'customer
requirements' in the top ten in terms of use.  IBM has
continually emphasized customer input, especially through
SHARE and GUIDE, in recent software and hardware
announcements.  The CICS developers did not see any feasible
way to meet these needs without a complete restructuring of
CICS and, with it, eliminating at least upward compatibility for
macro-level programs.  Given the assumption that few, if any,
MVS installations are coding new programs in macro level, the
impact of eliminating macro level all together is not
significantly greater than eliminating upward compatibility.

Version 3 of CICS offers not just advanced functionality - it
has been physically restructured.  Rather than being divided
into the traditional areas like task control, storage control, etc,
CICS management modules are now more formally divided
into domains, with strict internal interfaces to isolate problems
to a single domain whenever possible.  Any code rewritten in
the process, and a large portion of CICS has been rewritten for
Version 3, is pure re-entrant, 31-bit addressable code, which
has significant performance ramifications.

Thirty-one bit addressability means the code can be run above
the 16-megabyte line, to provide virtual storage constraint
relief.  Being re-entrant means it is LPA-eligible, which means
it provides:

o      Faster loading during restarts of a CICS region.

o      Lower real storage requirements through sharing of code
      between CICS regions.

o      Improved integrity because the code is in a storage-
      protected area.  Because the Link Pack Area (LPA) is read-
      only, an errant application program can not overwrite
      CICS modules in the LPA.

Use of the LPA does involve one disadvantage:  any
maintenance to CICS modules in the LPA will require an IPL.


THE CONVERSION PLATFORM

CICS/MVS Version 2 is IBM's recommended
conversion/migration/compatibility environment to move
applications to CICS/ESA Version 3.  Although a direct
conversion from CICS Version 1.7 is possible, taking two easy
steps tends to be many times more manageable than taking one
hard step.  Version 2.1.1 is also functionally richer, including
some new command-level capabilities that should deliver
replacement function for some macro-level coding situations.

A significant case could be made for using CICS/ESA Version
3.1.1 as a platform for the conversion of macro-level to
command-level coding in applications.  Version 3 adds more
command-level capabilities that provide functionality only
previously available in macro-level coding:  eg the
INPUTMSG keyword provides an equivalent of the TIOA
addressability provided by macro level.  More information is
available in the CICS/ESA Release Guide (GC33-0655-2).

However, Version 3.1.1 only supports macro-level coding of
Assembler object modules.  Macro-level COBOL and PL/I
programs can neither be compiled nor run in CICS/ESA, and
macro-level Assembler programs can only be run, not
assembled.  Even Assembler object modules that contain
macro-level coding and have run successfully in previous
versions of CICS for years are not guaranteed to run in CICS
Version 3.1.1.  A macro-level Assembler routine is only
guaranteed to run if it is written strictly as documented in the
CICS Application Programmer's Reference Manual - Macro
Level.  No other control blocks or macros, or modified
versions of documented macros, can be used.  These other
controls blocks and interface points for macros may no longer
exist in Version 3.

Unfortunately, often the reason a CICS application program
was written in macro-level Assembler in the first place was to
take advantage of these undocumented control blocks and/or
macros.  Reading micro-fiche or machine-readable source of
IBM's CICS modules, many programmers discovered, and
began using, internal CICS system macros like DFHTM.
DFHTM is the table manager for RDO and was never intended
for customer usage.

If conversion of all macro-level programs is not feasible now,
or even in the foreseeable future, co-existence is a good
compromise.  Convert as much as possible to command level
and run the rest in Version 2.  This would involve running both
Version 2 and 3 in production.  Transaction routing can be
used to access macro-level code running in Version 2 from
Version 3.  Function shipping would be used to access
resources that will only run on Version 2.  One thing to
remember, however, is that macro-level code cannot function
ship.

As well as the reasons just mentioned, a rather short future of
support makes CICS Version 3.1.1 a poor choice for
indefinitely running macro-level code in production.  Clearly,
IBM would like to reduce the number of releases of CICS it is
supporting (presently four just for MVS).  Although such
predictions are always dangerous, it would seem likely that
IBM will announce discontinuation of support for Version
3.1.1 as soon after Version 3.2 is delivered as written and
verbal agreements with customers will allow.  On the other
hand, there is every indication that the then-current release of
Version 2 will be supported for at least another five years.  To
summarize, any installation using Version 3.1.1 should be
prepared to move to Version 3.2.

As a final word in favour of CICS Version 2 as a conversion
platform, there is IBM's request for input on what is needed to
improve Version 2 as the place to convert macro-level
programs to command-level.  The number of requests, via
PASRs, from customers for specific capabilities, and their
justification, will determine what goes into Version 2.
Admittedly, converting as much as possible in Version 2 and
the last parts in a Version 3 test region is another practical
alternative.


WHAT NEEDS TO BE DONE

Do an inventory.  Any installation planning to migrate to
Version 3 of CICS is strongly recommended to find out
conclusively whether or not they have any macro-level code
that is ever used in any CICS region, and as much about it as
possible.  IBM provides DFHMSCAN free of charge just for
this purpose.  The IBM Support Centre is the place to call to
obtain a copy.

Many, many installations have had some shocking surprises
when they first ran DFHMSCAN.  They have either found old
code that no one remembers who wrote or packaged software
from IBM or other vendors that has never been converted to
command level.  Although IBM runs Vendor Support Programs
and Early Test Programs for vendors, it is the installation, not
IBM, which bears the responsibility for contacting vendors
using macro-level coding as to their plans to convert.

DFHMSCAN is easy to run.  It reads load libraries and prints
information on what it finds.  It does not read source code.
DFHMSCAN should provide all of the information necessary
for a complete macro-level to command-level conversion plan.
It even tries to identify the use of modified IBM macros.  As
stated in the April issue of CICS Update, DFHMSCAN will
soon be enhanced to detect the command-level EXEC CICS
ADDRESS CSA, since access to the CSA is no longer
permitted by CICS Version 3.2.

Appendix C of the CICS Application Programmer's Reference
Manual lists the equivalent commands, if any, for each macro.
Be sure to have the correct manual for the version of CICS
where the conversion will take place:  Version 2.1.1 is IBM's
recommendation (see above).  With the information from
Appendix C and DFHMSCAN, a fairly complete picture of
what needs to be done should be emerging.  It should also help
identify any programs for which conversion will be very costly,
possibly even infeasible.  Two choices exist for these
programs:  rewrite them rather than converting them or run
them in CICS Version 2 indefinitely, or at least until the end of
the life of the application.

In short, a decision must be made for each program containing
macro-level code whether to keep them (no conversion - run
them in Version 2), purge them (ie stop using them), or convert
them.


AVAILABLE TOOLS

Rather than relying on a strictly manual conversion, serious
consideration should be given to using the CICS Application
Migration Aid (AMA), Program Number 5695-061, which
became available in the United States in December, 1990.  It
assists in the conversion effort for COBOL and Assembler
programs by converting simple macros, doing a partial
conversion of more complex macros, and providing guidance
for manual conversion of macros where no automatic
conversion is deemed feasible.

AMA is a Program Offering, which means that it will receive
support for at least two to three years, longer if it is heavily
used.  This is not the first time that IBM has offered a macro-
level to command-level conversion tool.  No longer supported,
the Conversion Utility Program (CVT) was first introduced
about 1983, and received a less than warm reception from the
CICS community.

CVT had a lot of things going against it.  First of all, with no
announced end to macro-level support (in fact, command-level
had only just been introduced for Assembler) it was hard to
justify the business case for converting at that time.  Secondly,
CVT supported COBOL and PL/I, but not Assembler.  Those
installations that were willing to undertake a conversion, if
some automated assistance could be offered, wanted
simultaneously to convert and to move their applications above
the 16-megabyte line.  A new COBOL compiler had just been
introduced that supported 31-bit addressability, but CVT did
not provide that conversion.

CVT does share one drawback with AMA.  Any macro-level
code converted to command-level does mimic the macro-level
program.  This is perhaps most obvious in the way that it
handles storage.  Rather than using Working Storage (to steal
the term used by COBOL for storage acquired when the
program begins execution), storage is acquired dynamically as
it is needed.  AMA, to its credit, does allow the programmer to
override the automatic conversion to dynamic storage, but
considerably more manual effort is required to use a working
storage approach.

Although IBM offers a very generous sixty day test allowance
(ie the first two months of usage are free), unusual for a
program requiring so little effort to install, you would not
derive maximum benefit from AMA by merely running it on
the source of all programs identified as containing macro-level
coding and then cancelling the licence.  AMA was designed as
the programmer's companion during conversion.  It can be
used repetitively on the same program:  it does the initial
conversion and makes some suggestions, the programmer does
the manual conversion suggested by AMA, AMA further
refines what the programmer has done manually and makes
some more suggestions, and so on.


WHAT MAKES MACRO LEVEL HARD TO CONVERT?

As was repeated many times in the FTN broadcast, macro-level
to command-level conversion is not simply a case of running
every source program through AMA and re-compiling, re-
linking, and running in production without human intervention.
An easily overlooked fact about macro-level coding is that
there can be a lot of implied parameters.  If not explicitly stated
as a macro-level parameter, CICS would know to look in some
CICS table or control block for the required information, be
that the location of some required data or its length.  Often this
location was in the form of a base plus displacement.  It is even
possible to set a TCA field for some macros to indicate where
the data is to come from.

Because some of these conditions can be dynamically set in a
program, and different logic paths can result in different
conditions being true for a single occurrence of a macro, there
is no obvious way to do a full conversion on such a program.

User areas like the CWA, TWA, and TCTUA are still there in
CICS Version 3, and will be for the foreseeable future, but
references to these control blocks can still indicate trouble.
Some programs have been written based on assumptions about
the relative locations  of these user control blocks to each
other.  In Version 3, they may no longer be adjacent to each
other as they were in past versions of CICS.

All of this said, a fairly strong case can be made for having
access during the conversion to at least one programmer with
macro-level coding experience.  This need not be someone who
has actually written a macro-level application - maintenance
programmers responsible for macro-level code must have
developed a fairly strong understanding of macro-level coding
to do their job.


IS IT WORTH IT?

Why convert at all?  Just as with DFP, and many other IBM
products, all of the most sought after enhancements are
appearing in the latest versions of software, with few being
retrofitted to the latest release of a previous version.  Using
DFP as an example, PDSE, the long awaited re-design of
partitioned data sets, was released for Version 3 of DFP, but
will never be available in any future release of Version 2.
Although some code will be retrofitted from CICS Version 3 to
Version 2, the major advancements will always be delivered
only for the latest version.

Performance is also an issue, and was described in some detail
in April's article.  IBM is now working on running benchmarks
comparing Version 3 to Version 2 of CICS.  Item 4WRBF is
being regularly updated in INFO/MVS (also accessible through
IBMLink's SRCHservice in the Questions and Answers
database).  This item describes IBM's latest findings.

Another side of the performance question is the often made
comment that macro-level coding runs faster.  Although it
could have been argued at one time that macro-level code did
provide a (typically trivial) performance boost over command-
level code, Version 3.2 has completely changed this situation.
By eliminating macro-level support, most notably in File
Control, command-level code running in Version 3.2 can offer
a significant performance boost over both command-level and
macro-level code running in Version 3.1, Version 2, or
Version 1.


RECOMMENDED READING

o      GG22-9461 3270 Workstation Printer Reference and Install
      Guide.

o      SC33-0768 CICS Application Migration Aid Guide.

o      GG24-3485 CICS/ESA V3 Migration - Planning and
      Implementation.

o      GC33-0656-2 CICS/ESA V3 Migration Guide.

o      GG24-3484 CICS/ESA and IMS/ESA: DBCTL Migration f
      or CICS Users.

Jon E Pearkins
Certified Software Specialists (Canada)

