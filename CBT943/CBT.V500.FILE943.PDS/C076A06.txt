Minimizing data transmission


INTRODUCTION

Handling terminal I/O operations in CICS application
programming often involves considerable effort. Although the
BMS mapping functions already hide many of the details about
network data streams, the application programmer still needs to
manipulate terminal I/O screens in the form of BMS maps. In
particular, the amount of data transmission largely depends on
how the data and attributes are assigned to the map during a
terminal operation.

Whether data in a screen field is transmitted to the host or not
depends on the field's Modified Data Tag (MDT) setting. The
MDT of a field will be turned on if the operator enters data or
presses the ERASE-EOF key in the field and/or the attribute in
the field, as formatted by the previous SEND MAP command
issued by the program, has the MDT bit (bit 7) on. From the
programmer's point of view, it is tempting to send 'MDT on'
attributes to all the fields on a screen so that data in each field
will be sent back to the host in every input operation,
regardless of whether the data is actually modified by the user.
This makes all the data on the physical screen as seen by the
operator available to the application program and simplifies the
program logic. However, the drawback is that a large amount
of unnecessary data transmission, including the data that was
not explicitly modified by the operator, is involved in every
input operation.

As data transmission is extremely slow and expensive
compared with CPU processing, for performance reasons a
good application program design should stipulate that only
'MDT off' attributes are adopted in terminal I/O manipulations.
Nevertheless, the program has to keep track of what data is
currently on the screen and update such a screen image for
every terminal input, because screen data that is not modified
by the operator will not be transmitted in an input operation.


MDT DATA TRANSMISSION

A method has been developed in our shop to allow application
programs to minimize data transmission by using only 'MDT
off' attributes: the extra programming details necessary for
maintaining a screen image are made transparent to the
application programmer. The method is known as the MDT
Mapping Technique. The concept of the MDT in CICS refers
to the switch in each screen field that will be turned on if the
content of the field is modified by the operator. The MDT flag,
when set on, signals to the 3270 hardware that the data in the
corresponding field will be included in the next transmission
from the terminal to the host. The MDT Mapping Technique
extends the notion of the MDT. A program using the technique
keeps an exact image of the screen data (actually only variable
data). In each initiation of the program (transaction), if any
data in the image is modified by the program for the next
output operation, only the modified data will be included in the
transmission from the host to the terminal.

The MDT Mapping Technique is implemented with two
routines: one to be used for every terminal input and the other
for every terminal output. To characterize their unique
functionalities, we refer to them as MDT-IN and MDT-OUT,
respectively.

To benefit from this method, a CICS application program
should use only 'MDT off' attributes for screen I/O. The
program will have to keep a current image of each screen it is
manipulating, in the form of a symbolic map. After a
RECEIVE MAP command is issued, MDT-IN will be invoked
to update the screen image.  Before a SEND MAP command is
executed, MDT-OUT will be called to construct a symbolic
map that contains only the necessary data to be transmitted.
The remaining logic of the application program works as if
'MDT on' attributes were used in every terminal output
operation.

In summary, the objective of the technique is twofold.  First,
we desire to reduce the lengths of both the input data stream to
the host and the output data stream to the terminal. This
improves the response time of the application transactions.
Second, we aim at lightening the programming overhead
involved in handling terminal I/O in CICS application
programs in that the maintenance of the data on the physical
screen is transparent to the application.


GENERAL TERMINAL I/O OPERATIONS

The usual terminal I/O operations performed by a CICS
application program can be analysed as follows:

     IF first time initiation or re-initiation of transaction
        fill symbolic map with any initial data
        SEND MAP with ERASE to format screen
     ELSE
        IF CLEAR pressed (screen data destroyed)
           refill symbolic map with screen data
           process
           SEND MAP with ERASE to reformat screen
        ELSE
           RECEIVE MAP
           process
           SEND MAP with DATAONLY
        ENDIF
     ENDIF

Note that the ERASE option in a SEND MAP command
destroys the physical screen contents and should be used only
for first time screen building or subsequent screen reformatting.
To build a new screen this way, besides specifying ERASE,
one should specify neither MAPONLY nor DATAONLY so
that the data defined in the physical map and the data specified
in the symbolic map are merged to form the output data stream.
However, if we are not building a new screen but only adding
new data (eg an error message) to the existing screen, the
DATAONLY option should be specified in the SEND MAP
command so that only the data given in the symbolic map will
be used by BMS to construct the data stream, reducing any
unnecessary output.

When a SEND MAP ERASE command is issued this way and
'MDT off' attributes are being used, there is a need to initialize
the screen image with the default data defined for variable
fields in the map definition so that the image reflects what is on
the physical screen from the start.

Moreover, as suggested in the CICS Performance Guide, one
should use the FRSET option, either defined in the map or
explicitly specified in a SEND MAP command, to turn off any
MDTs which were previously set on by the operator.

Another point worth mentioning concerns handling CLEAR
key depressions.  When the CLEAR button is pressed, it causes
a physical operation in the terminal device, namely, the
terminal buffer is cleared. Now if the original screen data has
to be recovered, the program must have maintained the current
screen image. Rebuilding the screen amounts to resending to
the terminal the data saved in the screen image together with
the constant data as defined in the physical map. Thus, a
SEND MAP with ERASE is used. However, if the system is
designed in such a way that a depression of the CLEAR key
exits a transaction, the data transmission that is involved in
such screen recovery activities can be avoided.


MDT MAPPING ROUTINES

Both MDT-IN and MDT-OUT are linked from any CICS
application programs using the MDT Mapping Technique. On
entry, the routines will be given a mapset-id and a map-id, a
screen image (IMAGE), and a screen buffer area (BUFFER).
Both IMAGE and BUFFER take the same form as the map's
symbolic map. The contents of IMAGE must be saved by the
program. For pseudo-conversational transactions, IMAGE will
most probably be stored in the COMMAREA. The routines
have been tested under CICS/OS/VS 1.7.0.

The following copy book describes the COMMAREA layout
for invoking the MDT routines:

 01  MAP3270-COMMAREA.
     05  MAP3270-MAPSET-ID       PIC X(8).
     05  MAP3270-SCREEN-ID       PIC X(8).
     05  MAP3270-OPTION          PIC X(1).
*        'I' - INITIALIZE FIELDS TO INITIAL DATA OR SPACES
*        'U' - UPDATE SCREEN IMAGE WITH MAP DATA
     05  MAP3270-STATUS          PIC X(4).
     05  MAP3270-SCREEN-IMAGE    PIC X(1920).
     05  MAP3270-SCREEN-BUFFER   PIC X(1920).
 01  MAP3270-COMMAREA-LENGTH     PIC S9(4)   COMP VALUE +3861.


MDT-IN

MDT-IN provides two processing options: one to be used for
initializing the screen image and the other for updating it.

Initialize option

When the I option is specified, MDT-IN initializes every fieldI
field in IMAGE to its initial value as specified in the map
definition, or to spaces if no initial value is defined. All length
fields will be set to zero. This processing option is needed for
the program to construct an initial image when the screen is
formatted the first time.

Update option

When this processing option is specified, BUFFER should
contain the data in the form of a symbolic map just received
using a RECEIVE MAP command. MDT-IN updates IMAGE
for each (variable) field in the symbolic map.

Source code

         TITLE 'MDT INPUT MAPPING TECHNIQUE'
* FUNCTION : THIS PROGRAM ACCEPTS A COMMAREA CONTAINING THE MAPSET    *
*            ID AND MAP ID OF A SCREEN, THE CURRENT IMAGE OF THE      *
*            SCREEN IN THE FORM OF A SYMBOLIC MAP, AND A SYMBOLIC MAP *
*            CONTAINING THE DATA JUST RECEIVED FROM THE TERMINAL.     *
*            THE PROGRAM LOADS THE PHYSICAL MAP USING THE MAPSET ID   *
*            AND MAP ID, EXAMINES THE FORMAT OF THE CORRESPONDING     *
*            SYMBOLIC MAP SO AS TO UPDATE THE SCREEN IMAGE WITH THE   *
*            MAP DATA JUST RECEIVED FROM THE TERMINAL.                *
*            THE FOLLOWING UPDATE LOGIC IS FOLLOWED:                  *
*               IF ERASE-EOF KEY PRESSED                              *
*                  L-IMG := FIELD LENGTH                              *
*                  I-IMG := SPACES                                    *
*               ELSE                                                  *
*                  IF L-BUF = ZERO                                    *
*                     L-IMG := ZERO                                   *
*                  ELSE                                               *
*                     L-IMG := L-BUF                                  *
*                     I-IMG := I-BUF.                                 *
*            IN OTHER WORDS, THE LENGTH FIELDS OF THE SCREEN IMAGE    *
*            MAP ARE SIGNIFICANT AND INDICATE WHETHER INPUT DATA      *
*            WAS ENTERED IN THE CORRESPONDING FIELDS.                 *
*            IN ADDITION, THE CALLER ALSO HAS AN OPTION OF REQUESTING *
*            INITIALIZATION OF ALL INPUT FIELDS IN THE SCREEN IMAGE   *
*            BY SPECIFYING 'I' IN THE OPTION PARAMETER.  IN THIS CASE *
*            ALL INPUT FIELDS WILL BE SET TO THEIR INITIAL VALUES     *
*            OR SPACES FOR THOSE THAT HAVE NO INITIAL VALUES.         *
* REMARKS  : THIS PROGRAM ASSUMES THAT THE EXTENDED ATTRIBUTES ARE    *
*            NOT USED IN THE BMS MAP.                                 *
COMMAREA DSECT
COMMC400 DS    0CL3861
COMMAPST DS    CL8
COMSCNID DS    CL8
COMOPT   DS    CL1
COMRETCD DS    CL4
COMIMAGE DS    CL1920
COMBUFFR DS    CL1920
COMLEN   EQU   *-COMMAREA
DATAREG  EQU   R9                  DFHEISTG STORAGE
CODEREG  EQU   R10                 BASE REGISTER
EIBREG   EQU   R11                 EIB BASE REGISTER
ERASEEOF EQU   X'80'               ERASE EOF KEY PRESSED
CU1P400  DFHEIENT CODEREG=CODEREG,DATAREG=DATAREG,                     *
               EIBREG=EIBREG
         L     R12,DFHEICAP            GET ADDRESSABILITY TO COMMAREA
         USING COMMAREA,R12            TELL ASSEMBLER ABOUT IT
         LTR   R12,R12                 TEST POINTER TO COMMAREA
         BZ    COMMERR                 IF NULL, ERROR
         CLC   EIBCALEN,=AL2(COMLEN)   TEST COMMAREA LENGTH
         BNE   COMMERR                 IF WRONG, ERROR
         MVC   COMRETCD,=CL4'****'     SET RETURN CODE TO GOOD
         CLC   COMMAPST,=CL8' '        IF INPUT MAPSET IS BLANK
         BNH   MAPERR
         CLC   COMMAPST,=XL8'0000000000000000'         OR LOW-VALUES
         BNH   MAPERR                     ERROR
         CLC   COMSCNID,=CL8' '        IF INPUT MAP IS BLANK
         BNH   MAPERR
         CLC   COMSCNID,=XL8'0000000000000000'         OR LOW-VALUES
         BNH   MAPERR                     ERROR
         CLI   COMOPT,C'U'             IF OPTION IS U
         BE    LOADMAP                    GO ON PROCESSING
         CLI   COMOPT,C'I'             ELSE IF OPTION IS I
         BE    LOADMAP                    GO ON PROCESSING
         B     PARMERR                 ELSE ERROR
LOADMAP  DS    0H
         EXEC  CICS LOAD PROGRAM(COMMAPST) SET(R8) NOHANDLE
         CLC   EIBRESP,DFHRESP(NORMAL) IF RESP NOT NORMAL
         BNE   LOADERR                    ERROR
         USING MSMSD,R8                TELL ASM ABOUT ADDRESSABILITY
         CLC   MSSETNM,COMMAPST        IF MAPSET IN MODULE NOT INPUT
         BNE   MAPSTERR                   MAPSET, ERROR
         LA    R2,12(R8)               POINT R2 TO 1ST MAP IN MAPSET
         USING MSMDI,R2                TELL ASM ABOUT ADDRESSABILITY
         DROP  R8
FINDMAP  DS    0H
         CLC   MSNAME,COMSCNID         IF CURRENT MAP = INPUT MAP
         BE    FOUNDMAP                   EXIT LOOP
         AH    R2,MSLNGTH              ELSE ADVANCE R2 TO NEXT MAP
         CLI   MSMDI,X'FF'             IF END OF MAPSET
         BE    NOMAPERR                   ERROR
         B     FINDMAP                 LOOP BACK
FOUNDMAP DS    0H
         LH    R3,MSDLEN               LOAD LENGTH OF MAP LEAD
         AR    R3,R2                   BUMP PAST MAP LEAD TO FIRST FLD
         USING MSMDF,R3                TELL ASM ABOUT ADDRESSABILITY
         LA    R8,COMBUFFR+12          POINTS TO FIRST FLD IN SYMB MAP
         LA    R6,COMIMAGE+12          POINTS TO FIRST FLD IN SCR IMAGE
         USING BUFFER,R8               TELL ASM ABOUT ADDRESSABILITY
         USING IMAGE,R6                TELL ASM ABOUT ADDRESSABILITY
CHKFIELD DS    0H
         CLI   MSMDF,X'FF'             IF END OF MAP
         BE    RELPROG                    RETURN
         TM    MSDESC,MSVAR            IS THIS A VARIABLE FIELD ?
         BNO   NEXTFLD                 IF NO, SKIP THE FOLLOWING
         LH    R7,MSFLTH               LOAD LENGTH OF FIELD
         CLI   COMOPT,C'U'             IF UPDATE OPTION NOT SPECIFIED
         BNE   MOVEZLEN                   GO AND SET LENGTH TO ZERO
         CLI   BUFFERF,ERASEEOF        IF ERASE-EOF NOT PRESSED
         BNE   CHKLENG                    GO CHECK LENGTH
         STH   R7,IMAGEL               ELSE SET LENGTH TO FLD LENGTH
         B     MOVESPC                      GO MOVE SPACES
MOVEZLEN MVC   IMAGEL,=H'0'            SET FIELD LENGTH TO ZERO
         TM    MSDESC,MSVALUE          DOES FIELD HAVE INITIAL VALUE?
         BNO   MOVESPC                 IF NOT, MOVE SPACES
         LA    R4,MSINIT               SET SOURCE ADDRESS TO INIT VAL
         LR    R5,R7                   SET LENGTH OF SOURCE
         B     MOVEDATA                GO MOVE DATA
MOVESPC  SR    R4,R4                   SET SOURCE ADDRESS TO NULL
         L     R5,SPACES               SET LEN=0; PAD CHAR=SPACE
         B     MOVEDATA                GO DO ACTUAL MOVE
CHKLENG  CLC   BUFFERL,=H'0'           IF INPUT LENGTH NOT = ZERO
         BNE   FLDTOUCH                   GO MOVE DATA TO SCRN IMAGE
         MVC   IMAGEL,=H'0'            ELSE MOVE ZERO TO IMAGE FLD LEN
         LA    R6,3(R6)                SKIP LENG+ATTR IN IMAGE
         AH    R6,MSFLTH               ADV PTR BY FLD LEN TO NEXT FLD
         B     ADVSYMB                    GO ADV PTR TO NEXT FIELD
FLDTOUCH MVC   IMAGEL,BUFFERL          MOVE INPUT LENGTH TO IMG LENGTH
         LR    R5,R7                   LOAD DEST LENG WITH SOURCE LENG
         LA    R4,BUFFERI              LOAD BUFFER FIELD AS SOURCE ADDR
MOVEDATA LA    R6,IMAGEI               LOAD IMAGE FIELD AS DEST ADDR
         MVCL  R6,R4                   MOVE DATA FROM BUFFER TO IMAGE
ADVSYMB  LA    R8,3(R8)                SKIP LENG+ATTR IN BUFFER
         AH    R8,MSFLTH               ADV PTR BY FLD LEN TO NEXT FLD
NEXTFLD  SR    R1,R1                   CLEAR FIELD LENGTH
         TM    MSDESC,MSVALUE          DOES FIELD HAVE INITIAL VALUE?
         BNO   NOINIT                  IF NOT, SKIP
         LH    R1,MSFLTH               LOAD LENGTH OF FIELD
NOINIT   DS    0H
         LA    R3,8(R3)                ADVANCE 8 BYTES FOR OTHER INFO
         AR    R3,R1                   ADV PTR BY FLD LEN TO NEXT FLD
         B     CHKFIELD                LOOP BACK
*        ERROR HANDLING
COMMERR  MVC   COMRETCD,=CL4'*COM'     NO COMMAREA OR INCORRECT LENGTH
         B     RETURN
MAPERR   MVC   COMRETCD,=CL4'*MAP'     NO MAPSET NOR MAP ID GIVEN
         B     RETURN
MAPSTERR MVC   COMRETCD,=CL4'*MST'     MAPSET DOES NOT MATCH THAT IN
         B     RELPROG                  LOAD MODULE
LOADERR  MVC   COMRETCD,=CL4'*LOA'     ERROR LOADING MAPSET
         B     RETURN
NOMAPERR MVC   COMRETCD,=CL4'*MNF'     CANNOT FIND MAP IN MAPSET
         B     RELPROG
PARMERR  MVC   COMRETCD,=CL4'*PRM'     INVALID OPTION SPECIFIED
         B     RETURN
RELPROG  DS    0H
         EXEC CICS RELEASE PROGRAM(COMMAPST) NOHANDLE
RETURN   DS    0H
         DFHEIRET
         DS    0F
SPACES   DC    XL4'40000000'
         LTORG
MSMSD    DSECT
MSSETNM  DS     CL8
         DS     CL4
MSMDI    DSECT
MSDLEN   DS     AL2
         DS     CL6
MSNAME   DS     CL8
MSLNGTH  DS     AL2
         DS     CL15
MSIND    DS     AL1           MAP INDICATOR
MSEXTAT  EQU    X'40'         EXTENDED FUNCTION
         DS     CL8
MSMDF    DSECT
         DS     CL2
MSFLTH   DS     AL2
MSDESC   DS     AL1
MSVALUE  EQU    X'02'         FIELD HAS INITIAL VALUE
MSVAR    EQU    X'01'         VARIABLE FIELD
MSATTR   DS     CL1
MSDARK   EQU    X'0C'         DARK ATTRIBUTE
MSPOS    DS     AL2           FIELD POSITION
MSINIT   DS     0CL1
BUFFER   DSECT
BUFFERL  DS     CL2
BUFFERA  DS     CL1
BUFFERF  EQU    BUFFERA
BUFFERI  DS     0CL1
IMAGE    DSECT
IMAGEL   DS     CL2
IMAGEA   DS     CL1
IMAGEF   EQU    IMAGEA
IMAGEI   DS     0CL1
         END    CU1P400

We shall be concluding our look at minimizing data
transmission next month with the description and source of
MDT-OUT, plus an overview of the MDT Mapping
Technique.

Felix Luke
Systems Programmer
Caltex Oil  Limited (Hong Kong)

