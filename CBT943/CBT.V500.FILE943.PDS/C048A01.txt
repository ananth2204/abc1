Quick and easy on-line file mode changing

Many applications running under CICS allow files to be updated
on-line during the day and run batch jobs during the night.
However, sometimes it is desirable to maintain an enquiry
capability to files during these batch runs.  Such a situation
resulted in the following program.

Before converting to CICS 1.7, it would have been necessary to
re-cycle CICS twice daily to re-allocate the desired files in their
new modes.  However, in CICS 1.7 under MVS/XA, it is now
possible to change the modes in which a file is open by simply
closing it, making the change, and re-opening it.  If you choose to
do this by hand, CEMT will do just fine.  However, if you wish
to program it in, perhaps for use in a sequential terminal, the
EXEC CICS SET command (see the CICS Customisation Guide)
becomes very useful.

This program takes as input its transaction-id, a file mode string,
and a list of one or more file DDNAMEs, each separated by a
separator, as defined in the variable WS-SEPARATOR (including
spaces).  It can receive input from:

1   A blank screen
2   A sequential terminal
3   A calling program.

In each case the input format is the same, although an additional
length variable is expected if the data is passed in the
COMMAREA.

The comments within the program should clarify any
uncertainties
about expected input.  The program itself is written in VS
COBOL II, but is simple enough to be converted to old COBOL
or Assembler without much difficulty.

 IDENTIFICATION DIVISION.
 PROGRAM-ID.    FILEMODE-CHANGE-FILE-MODES.
*REMARKS. FILE MODE CHANGING PROGRAM.  THIS PROGRAM TAKES
*         INPUT FROM EITHER THE CALLING TERMINAL OR TRANSACTION,
*         DEPENDING ON IF A COMMAREA EXISTS.  THE FIRST VALUE
*         IS SIMPLY THE LENGTH OF THE DATA, AND IS AUTOMATICALLY
*         CALCULATED BY CICS IF CALLED FROM A TERMINAL.
* THE INPUT STRING CONSISTS OF THREE PARTS:
*         TRANSID     MODESTRING    DDNAMES
*   TRANSID: 1 TO 8 (YES, 8) CHARACTERS.
*   MODESTRING: DESCRIBES ACTIONS TO BE PERFORMED ON ALL DDNAMES
*            SPECIFIED. MUST CONTAIN AT LEAST ONE CHARACTER.
*            VALUES ARE:  O - OPEN DATASET WHEN DONE
*                         C - CLOSE DATASET BEFORE BEGINNING
*                           ** NOTE: IF NEITHER C NOR O ARE
*                              SPECIFIED, BOTH ARE DONE.   **
*                         R - READ MODE
*                         B - BROWSE MODE
*                         A - ADD MODE
*                         U - UPDATE MODE
*                         D - DELETE MODE
*                         N - NULL; USE TO SPECIFY NO MODES.
*           THIS STRING MUST NOT EXCEED 8 CHARACTERS IN LENGTH.
*   DDNAMES: 1 OR MORE DDNAMES (UP TO 8 CHARACTERS EACH,
*            OF COURSE), SEPARATED BY SPACES OR OTHER COMMON
*            SEPARATORS (SEE BELOW).
 ENVIRONMENT DIVISION.
 DATA DIVISION.
 WORKING-STORAGE SECTION.
 77  WS-PROGRAM              PIC X(08) VALUE 'FILEMODE'.
 77  WS-IN-LEN               PIC S9(4) COMP VALUE +1840.
 77  WS-SC-INDEX             PIC S9(4) COMP VALUE +1.
 77  WS-ARG-INDEX            PIC S9(4) COMP VALUE +1.
 01  WS-SCREEN-IN            PIC X(1840) VALUE SPACES.
 01  WS-SCREEN-ARG.
     05 WS-SC-CHAR  PIC X(1) OCCURS 1840 TIMES.
 01  WS-ARG                  PIC X(9) VALUE SPACES.
 01  WS-ARG-ARRAY REDEFINES WS-ARG.
     05 WS-ARG-CHAR  PIC X(1) OCCURS 9 TIMES.
 01  WS-TEST-VAL             PIC X(1)  VALUE ' '.
     88 WS-SEPARATOR  VALUE ' ' ',' '.' '(' '+'
                            ')' '/' ';' ':'.
     88 WS-T-OPEN     VALUE 'O'.
     88 WS-T-CLOSE    VALUE 'C'.
     88 WS-T-OPCL     VALUE 'C' 'O'.
     88 WS-T-ADD      VALUE 'A'.
     88 WS-T-BROWSE   VALUE 'B'.
     88 WS-T-DELETE   VALUE 'D'.
     88 WS-T-READ     VALUE 'R'.
     88 WS-T-UPDATE   VALUE 'U'.
     88 WS-T-NULL     VALUE 'N'.
     88 WS-T-MODE     VALUE 'A' 'B' 'D' 'R' 'U'.
 01  WS-V-OPEN               PIC X(1) VALUE ' '.
     88 WS-OPEN        VALUE 'O'.
 01  WS-V-CLOSE              PIC X(1) VALUE ' '.
     88 WS-CLOSE       VALUE 'C'.
 01  WS-V-OPCL               PIC X(1) VALUE ' '.
     88 WS-OPCL        VALUE 'C' 'O'.
 01  WS-V-ADD                PIC S9(8) COMP VALUE +42.
 01  WS-ADD                  PIC S9(8) COMP VALUE +41.
 01  WS-V-BROWSE             PIC S9(8) COMP VALUE +40.
 01  WS-BROWSE               PIC S9(8) COMP VALUE +39.
 01  WS-V-DELETE             PIC S9(8) COMP VALUE +44.
 01  WS-DELETE               PIC S9(8) COMP VALUE +43.
 01  WS-V-READ               PIC S9(8) COMP VALUE +36.
 01  WS-READ                 PIC S9(8) COMP VALUE +35.
 01  WS-V-UPDATE             PIC S9(8) COMP VALUE +38.
 01  WS-UPDATE               PIC S9(8) COMP VALUE +37.
 01  WS-V-MODE               PIC X(1)  VALUE ' '.
     88 WS-MODE        VALUE 'A' 'B' 'D' R' 'U'.
 01  WS-V-NULL               PIC X(1)  VALUE ' '.
     88 WS-NULL        VALUE 'N'.
 01  WS-MODECHK              PIC X(1)  VALUE 'N'.
     88 MODECHK                        VALUE 'Y'.
 LINKAGE SECTION.
 01  DFHCOMMAREA.
     05 DFH-LEN              PIC S9(4) COMP.
     05 DFH-ARGS             PIC X(1840).
 PROCEDURE DIVISION.
 0000-MAINLINE-PROCESS.
     IF EIBCALEN = 0
         EXEC CICS
                   RECEIVE INTO(WS-SCREEN-IN)
                       LENGTH(WS-IN-LEN)
         END-EXEC
         MOVE WS-SCREEN-IN TO WS-SCREEN-ARG
     ELSE
         MOVE DFH-ARGS TO WS-SCREEN-ARG
         MOVE DFH-LEN TO WS-IN-LEN.
     PERFORM 0100-DECONCAT THRU 0100-END.
     MOVE 'Y' TO WS-MODECHK.
     PERFORM 0100-DECONCAT THRU 0100-END.
     MOVE 'N' TO WS-MODECHK.
     PERFORM 0050-DATASET THRU 0050-END
         UNTIL WS-SC-INDEX > WS-IN-LEN.
 0000-MAINLINE-EOJ.
     EXEC CICS
               RETURN
     END-EXEC.
     GOBACK.
 0050-DATASET.
     PERFORM 0100-DECONCAT THRU 0100-END.
     IF WS-ARG-INDEX < 2 GO TO 0050-END.
     IF (NOT WS-OPCL) OR WS-CLOSE
         EXEC CICS SET DATASET(WS-ARG)
                       DISABLED
         END-EXEC
         EXEC CICS SET DATASET(WS-ARG)
                       CLOSED
         END-EXEC.
     IF NOT (WS-MODE OR WS-NULL) GO TO 0050-OPEN.
 0050-MODE.
     EXEC CICS SET DATASET(WS-ARG)
                   ADD(WS-V-ADD)
                   BROWSE(WS-V-BROWSE)
                   DELETE(WS-V-DELETE)
                   READ(WS-V-READ)
                   UPDATE(WS-V-UPDATE)
     END-EXEC.
 0050-OPEN.
     IF (NOT WS-OPCL) OR WS-OPEN
         EXEC CICS SET DATASET(WS-ARG)
                       ENABLED
         END-EXEC
         EXEC CICS SET DATASET(WS-ARG)
                       OPEN
         END-EXEC.
 0050-END.
     EXIT.
 0100-DECONCAT.
     MOVE +1 TO WS-ARG-INDEX.
     MOVE SPACES TO WS-ARG.
     PERFORM 0200-CHECK-AND-MOVE THRU 0200-END
        UNTIL (NOT WS-SEPARATOR) OR (WS-SC-INDEX > WS-IN-LEN).
     IF WS-SC-INDEX > WS-IN-LEN GO TO 0100-END.
     PERFORM 0200-CHECK-AND-MOVE THRU 0200-END
         UNTIL WS-SEPARATOR OR (WS-SC-INDEX > WS-IN-LEN)
         OR (WS-ARG-INDEX > 8).
 0100-END.
     EXIT.
 0200-CHECK-AND-MOVE.
     MOVE WS-SC-CHAR(WS-SC-INDEX) TO WS-TEST-VAL.
     ADD 1 TO WS-SC-INDEX.
     IF WS-SEPARATOR
         GO TO 0200-END.
     MOVE WS-TEST-VAL TO WS-ARG-CHAR(WS-ARG-INDEX).
     ADD 1 TO WS-ARG-INDEX.
     IF MODECHK PERFORM 0250-SET-MODE THRU 0250-END.
 0200-END.
     EXIT.
 0250-SET-MODE.
     IF WS-T-OPEN    MOVE WS-TEST-VAL TO WS-V-OPEN.
     IF WS-T-CLOSE   MOVE WS-TEST-VAL TO WS-V-CLOSE.
     IF WS-T-OPCL    MOVE WS-TEST-VAL TO WS-V-OPCL.
     IF WS-T-MODE    MOVE WS-TEST-VAL TO WS-V-MODE.
     IF WS-T-NULL    MOVE WS-TEST-VAL TO WS-V-NULL.
     IF WS-T-ADD     MOVE WS-ADD      TO WS-V-ADD.
     IF WS-T-BROWSE  MOVE WS-BROWSE   TO WS-V-BROWSE.
     IF WS-T-DELETE  MOVE WS-DELETE   TO WS-V-DELETE.
     IF WS-T-READ    MOVE WS-READ     TO WS-V-READ.
     IF WS-T-UPDATE  MOVE WS-UPDATE   TO WS-V-UPDATE.
 0250-END.
     EXIT.


Reg Harbeck
CICS Consultant (Canada) ) Reg Harbeck 1989


