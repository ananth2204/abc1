Deadlocks - systems programming considerations

This article discusses some problems in CICS File Control
which are not just conflicts of access by application programs
but are caused mainly by unsuitable string specifications in the
FCT.  Since the effects on the terminal user are equally
unsatisfactory - one dead screen looks much like another - this
article lists some of the factors the systems programmer should
understand.


CICS STRING PRE-ALLOCATION

Before CICS File Control passes on a request to VSAM, it
checks that the necessary VSAM strings will be available, by
maintaining its own set of 'string counts'.  String numbers are
defined in the FCT for both individual files and (where
applicable) the LSR pool.  It is important that sufficient strings
are allocated.  If AIXs and upgrade sets are supported under
LSR, a substantial surplus is required, to support extra strings
used internally for upgrading indexes.

Requests concerning non-LSR files are checked against the
string numbers in the associated FCT entry only.  There are
two limits, one applicable to direct read-only requests and
another, possibly lower, limit for add, update, and browse
requests.

In CICS/OS/VS these are determined by the STRNO and
STRNOG FCT operands - the limits are STRNO and (STRNO-
STRNOG) respectively.  In CICS/DOS/VS, STRNOG is
forced  to be STRNO/5, rounded down, so it will be zero if
STRNO is less than 5.

The way these limits work is that a new request is only
accepted if the number of currently active strings allocated
against that file is less than the relevant limit.  For example, if
STRNO=4 and STRNOG=3 are specified and there are two
browses in progress with a read-only GET right in the middle
of an I/O, the count of currently active strings would be 3.
CICS would then allow another GET to proceed but not
another SETL.  No attempt is made to count the requests by
class, so you can get some inconsistencies.  If three browses
were already under way, CICS would allow an extra read-only
GET.

Requests for LSR files are checked against the LSR string
number.  No distinction is made between direct read-only and
other requests when allocating LSR strings.  However CICS
still checks the VSAM requests against the string numbers for
the individual file.  Although the latter no longer represents
actual VSAM string usage (all the strings come from the LSR
pool), the local file limit serves to balance the use of the LSR
pool across the various files it services.  For example, you
might have STRNO=8 specified for the LSR pool and
STRNO=5 specified for FILEA, thus ensuring that only five of
the eight strings can be used for FILEA and at least 3 are
certain to be available for other file requests.

Suppose now that an FCT entry specifies STRNO=1 (the
default).  Obviously, one transaction can access the file at any
given time.  If one task is holding position (ie holding a string),
CICS will make another task requesting access wait until the
string is freed up.  But also, if the task now holding position
issues an independent request against the same file, it will
deadlock itself (for example, if it is in the middle of a browse
and it tries to issue a second STARTBR).

Similarly a task can deadlock itself if it is accessing LSR files
and needs more strings to access its various files than there are
defined in the pool.  One could construct cases where multiple
tasks are deadlocked by the mutual need for more strings than
are available.  Such cases can always be prevented if sufficient
strings are defined, but this can cost quite a lot in storage for
extra control blocks and buffers.


LIMITATIONS ON RETRY AFTER A TASK CONFLICT

Normally CICS manages the queueing of a task whose request
can not proceed because of some conflict in VSAM: very rarely
does VSAM do the queueing.  Normally, VSAM signals to
CICS that the request has failed with error code X'14',
meaning 'exclusive control conflict'. CICS then makes the task
wait until some other position associated with the named FCT
entry has been released, and then retries the request.  If the
retry is unsuccessful, the request is queued again, and this goes
on until the request succeeds.

The underlying assumption is that the exclusive control conflict
is caused by another string in use for that file.  Eventually that
locking string will be released by some other task, and so, by
retrying every time a position is released, we should eventually
be able to proceed.

It is obvious that, if a task makes a request which conflicts with
a position it has already established, it will be deadlocked.
Although the request may be retried many times as other tasks
give up their strings, the crucial string that is already owned by
the waiting task will never be freed.

Suppose now that the same data is also accessed through a
separate AIX path.  As already explained, there is a possibility
that, in the LSR environment, a browse already established
through the path could cause an update request through the
base to be rejected.  When CICS detects this conflict, it will
queue the task to retry whenever a position is released.  But the
retry will be based on requests against the base dataset FCT
entry releasing position, while the conflicting position is held
via the AIX path.

Thus, the task that is forced to wait may not be retried as soon
as a conflicting position is released, but only at some later time
when another task establishes position and then releases it by a
request against the base dataset.  How soon this happens will
depend on the level of transaction activity - it's simply a matter
of luck.

Note also that STRNO for the base must be specified as greater
than one, so that it is possible for a subsequent task to get in
while the first task is waiting, otherwise it will never be retried.

Lastly, even where only one path is used, you can still get a
similar problem if there is a high level of exclusive control
contention against a given file.

The CICS retry function copes with the case where two or
more tasks are waiting because of VSAM exclusive control
conflicts in the same file.  It does not matter whether they are
all contending for one control interval or for separate control
intervals.  But each time that position is released by a non-
waiting task, CICS only allows one of the waiting tasks to
retry, namely the one at the highest priority on the dispatch
chain.  Since the position that is released may not resolve that
task's own conflict, it can happen that several retries are
'wasted' until the first waiting task gets the control interval it
wants.

Substantial code changes in CICS File Control would be
needed to prevent such situations arising.  DL/I offers more
sophisticated data management.

A Y Khan
Systems Programmer (Saudi Arabia)

