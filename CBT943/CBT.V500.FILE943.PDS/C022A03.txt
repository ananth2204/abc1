 Defining VSAM files with IMBED

Using the IMBED option when you define your VSAM files can significantly
decrease the amount of time CICS spends waiting for file processing.  This
improvement in response time can occur even though the total number of I/Os does
not change.

The time spent getting to (seeking) the correct cylinder is a major component of
total service time.  For instance, on a 3380 disk drive, the average seek time
is 16 milliseconds, while the average rotation time is 8.3 milliseconds.  Seek
time can vary from 0 milliseconds if the head is already positioned on the
correct cylinder to 42 milliseconds if it has to move past all 883 cylinders.

The CICS application sees this reponse time as a total of 24.3 milliseconds
composed of mechanical head movement, rotational latency, and data transfer.  If
you can improve any one of these three components, your total response time will
be better.


WHAT IMBED DOES

The IMBED option on VSAM puts the indexes on the same physical cylinder as the
data, so when you have an I/O request, you can perform the seek to get to the
index portion, and then be positioned so that the reading of data will not
require the arm to physically move.  The second of your I/Os will have a seek
time of 0 milliseconds instead of the 3380 device average of 16 milliseconds.
These saved 16 milliseconds can add up in a transaction that does a lot of
random I/O and can be a pretty significant amount by the end of a day.

Without the IMBED option, the indexes are generally put on different cylinders
to the data, so getting the data for a two-step (index and data) operation will
generally require head movement to go back and forth between index and data
areas of the file.  The computer will have to wait for the the movement to
complete before it can continue its work.

Extra seeks also make the device more busy, so other files on the same device
will have a longer response time while they wait for the arms to move during
your file's two-step I/O.


FILES WITH GREATEST POTENTIAL FOR IMPROVEMENT

The savings will be greatest in very large files that are accessed randomly.
The savings will decrease as the size of the file decreases.  The more time you
spend now in arm movement, the more potential you have to improve it.  For files
small enough for you to keep the entire index in core, there will be no savings,
since the index will never have to be read.

If you do a lot of sequential processing, you may actually hurt your response
time by using IMBED because the file will occupy more total space on your disks.
But for your big files, you can save theoretically as much as 66% of your I/O
time without changing the total count of I/Os that appear on most of your tuning
reports.  In practice it is not unrealistic to expect I/O wait time to decrease
by 20 - 30% for some files.


MANUALS TO READ FOR FULL DETAILS

There is a very good discussion of how the components of disk I/O are calculated
in manuals GG22-9217 DASD Path and Device Contention Considerations and GG22-
9241 DASD Access Method Performance Considerations.  These manuals are both
written by S E Friesenborg from IBM's Washington Systems Center.  The main
purpose is to help people calculate the response improvements they can expect
when they convert from 3350 to 3380 disk drives.  In discussing the differences
between these devices, he gives a very good explanation of how to determine how
long it physically takes to accomplish each component of an I/O and includes
some hints (such as this one about using IMBED) that work with any DASD devices.
Systems programmers should order and read both of these manuals for a very clear
discussion on the basics of the important subject of tuning DASD.


Joe Krynicky
Technical Support Manager
ASCAP (USA)    ) Xephon 1987


























































