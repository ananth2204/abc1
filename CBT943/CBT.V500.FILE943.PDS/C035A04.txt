 U2803 abend with upgraded CSD
We have four pairs of CICS systems: two production, two user test, two system
test, and two development; plus a couple of systems used for the initial testing
of new packages and changes to DFHPEP and other system programs.
Each pair is connected using IRC and both CICS systems in each pair share the
same CICS System Definition (CSD) file.  All of our CSDs for 1.7 have been
upgraded from our existing 1.6.1 CSDs.
Over the last couple of months we have been moving these CICS systems onto
Release 1.7 on our IBM 3081K running MVS/XA 2.1.7.  Obviously, we started with
our own test systems and moved steadily and without any major problems through
the development and system test layers.  The first user test system, UACICS,
presented no problems either, but when we got to the second user test system,
UBCICS, the trouble really started.
CONVERSION TEST STRATEGY
The first task we undertook on converting each CICS to 1.7 was to run through
the process of cold, warm, and emergency restarts, checking out our applications
and functions such as dump and auxiliary trace on the way.  Unfortunately,
UBCICS would not complete the emergency restart test - it abended with a U2803
abend code.
The Messages and Codes manual gives a list of six possible conditions which
could cause this problem.  We checked and discounted each one in turn, re-
assembled tables, and re-formatted journals and restart datasets - in short we
tried everything.  We even applied a PTF found in INFO MVS which looked as if it
might have had some bearing on the subject.  All this was to no avail.
Finally, the print-outs of the auxiliary trace taken on our second attempt
arrived, together with the formatted dump.  Using this information, together
with the CICS source code available to us, we set about tracking down the
problem.
The short symptom string in the dump and the PSW both pointed to DFHRUP as being
the active program at the time of the abend.  It had received a bad return code
from DFHJCO on requesting the initial open of the system journal (DFHJ01A), and
had therefore requested the U2803 abend.  However, the console log messages
indicated that this had already been done: the message DFH2800I - DFHRUP IN
PROGRESS had appeared twice.
A quick look at the source code of RUP showed that a flag field - RUINVKFL - is
used to test for the Tfirst time throughU condition.  The DFH2800I DFHRUP IN
PROGRESS message should be displayed once only, following which RUINVKFL is set
to XT01U.
A REPEATING RUP
As DFHRUP is called only twice during emergency restart, once to perform its
major functions and a second time to print out its statistics.  This field,
along with several others, is placed in the main CSECT - the program is not re-
entrant.
Looking at the dump, we found RUINVKFL contained XT00U.  Could another program,
or indeed RUP itself, have over-written this byte?  There was no evidence of
other damage to storage in the area, so we discounted this possibility.
We then began to look at the auxiliary trace around the area of the second call
to RUP.  This showed an unexpected entry made by the Storage Control Program
acquiring program storage.  This was followed with KCP waits, while the CICS
Asynchronous Program Loader went through its paces.  This caused a new copy of
DFHRUP to be loaded.  Obviously, it was this that caused RUINVKFL to contain
XT00U instead of the anticipated XT01U.
But why had this happened?  The first call to RUP was executed before the PPT
had been re-built, therefore a PPT entry had not been necessary - why did one
exist now?  The answer was simple, once we knew what to look for.  The GRPLIST
used to TcoldU start the CICS system contained the group DFHRCVRY, which holds
the 1.6.1 definitions of DFHRUP, DFHTBP1$, plus a few other programs that no
longer need PPT entries in 1.7.
We had remembered to remove this group from the GRPLISTs of all the other CICS
systems, including UACICS, which shares the same CSD as UBCICS, but had
forgotten on this occasion.
Removing DFHRCVRY from our GRPLIST and repeating the cold, warm, and emergency
restart test sequence showed that we had indeed discovered and removed the cause
of this self-inflicted wound.
We were very relieved at this point, and decided to protect ourselves against
any further, accidental repetitions of this particular problem.  Anybody could
make a typing error and install DFHRCVRY into a CICS system - the first we might
know of it would be a U2803 in an emergency restart, which would mean a
subsequent cold start and possibly losing data integrity.
RSimpleS, I hear you say, Rjust delete all the objects defined in the group
DFHRCVRYS.  Unhappily, itUs not that easy - this group, like all other DFH
groups on the CSD, is IBM-protected.  ItUs not present on CSDs initialised using
the 1.7 version of DFHCSDUP, but on our upgraded 1.6.1 CSDs it remains in
DFHLIST, which is itself appended to DFHLIST2.
THE MYSTERIOUS RDT
However, some weeks before we had looked at the output from the Assembly and
link-edit of one of our TCTs, which was to be migrated to a CSD.  We noticed
that, not one, but two CSECTs were produced - the TCT itself and a module called
an RDT, bearing the same suffix as the TCT.
If you look at it, you will see that the RDT contains CEDA commands, in plain
English.  Well, we thought this was very interesting, so we had a look at the
CICS170.LOADLIB members DFHCU170, DFHCU17S, and DFHCU17T.  These are used to
upgrade a CSD from 1.6 to 1.7.  Sure enough, these also contain CEDA commands,
just as you might type them in at a terminal.  We tried the following program:
NCBRDT01 CSECT,
.        DC  C'UNLOCK GROUP(DFHRCVRY)'
.        DC  X'FFFFFFFF'
.        DC  C'DELETE GROUP(DFHRCVRY)'
.        DC  X'FFFFFFFF'
.        DC  X'FFFFFFFF'
.        END
We ran this against an unused test CSD, with the following parameter card for
DFHCSDUP:
     UPGRADE USING(NCBRDT01)
and were pleased to see that all trace of DFHRCVRY had disappeared from the CSD,
except the entries in the two IBM-supplied GRPLISTs, which we have never used.
CAVEAT EMPTOR!
Now obviously, this is a very dangerous technique, and is not for the faint
hearted.  Some people may prefer to initialise new CSDs for their 1.7 CICS
systems, and use DFHCSDUP to copy their own groups from the old to the new CSDs.
However, in our case, the amount of work required to do this would be
substantial; DFHCSDUP will not accept wild card characters.  It will only work
once per command.  A separate copy statement is required for each group, which
could leave room for another typographical error.
We decided that the risk of using this undocumented interface to DFHCSDUP was,
on this occasion, very small and fully justified.  However, anyone else
considering using this technique for other purposes would be well advised to
thoroughly consider all the implications.

Ian Hall
Systems Programmer
SoftLance Ltd (UK)  ) SoftLance Ltd 1988




















