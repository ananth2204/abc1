 CMS EXECs for monitoring CICS (continued)
In this latest article in our series of CMS EXECs for monitoring CICS, we take a
look at how LSR statistics can be collected and presented.
Keying PF11 locates the FCTSR by scanning FCT entries until the first LSR file
is located.  It displays the number of strings, maximum key length, and the
number of buffers for each Control Interval size, indicating whether these
values have been explicitly defined or computed, and if so, by what percentile
value.  Statistics for the number of strings used and string waits are also
displayed.  Keying PF2 dumps the FCTSR.
LSR EXEC
/* LSR EXEC ******************************************************* */
/*                 CICS LSR                                         */
/*                 ========                                         */
/*    PARAMETERS REQUIRED:   VMID                                   */
/*                           FCT ADDRESS                            */
/* **************************************************************** */
  ARG VMID FCT .
  'X A D A ( PROFILE LSR )' VMID FCT
LSR XEDIT
/* LSR XEDIT */
      ARG . . . . . . . VMID FCT .
      FCTSR = '000000'
/* ---------------------------------------------------------------- */
/* SCAN FCT ENTRIES FOR 1ST FILE WITH POINTER TO FCTSR              */
/* ---------------------------------------------------------------- */
      DO I = 1 TO 500
          VADD = HEXADD(FCT,A)
          CALL FWORD
          LEN  = X2D(SUBSTR(FWORD,1,4))  /* FCT ENTRY LENGTH */
          IF LEN = '0' THEN SIGNAL QUIT
          IF LEN > '72' THEN DO
              VADD = HEXADD(FCT,54)
              CALL FWORD
              FCTSR = SUBSTR(FWORD,3,6)
              END
          IF FCTSR Â¬= '000000' THEN LEAVE
          FCT  = D2X(X2D(FCT) + LEN)
          END I
/* ---------------------------------------------------------------- */
/* EXTRACT STATISTICS FROM FCTSR                                    */
/* ---------------------------------------------------------------- */
      VADD = HEXADD(FCTSR,10)
      CALL FWORD
      PCT  = X2D(SUBSTR(FWORD,1,4))     /* PERCENTILE VALUE */
      KYL  = X2D(SUBSTR(FWORD,5,4))     /* KEY LENGTH */
      VADD = HEXADD(FCTSR,8)
      CALL FWORD
      IND =  X2C(SUBSTR(FWORD,1,2))     /* INDICATOR */
      IF BITAND(IND,'80'X) = '80'X THEN CSN = 'COMPUTED AT 'PCT'%'
                                   ELSE CSN = 'EXPLICITLY DEFINED'
      IF BITAND(IND,'40'X) = '40'X THEN CKL = 'COMPUTED AT 'PCT'%'
                                   ELSE CKL = 'EXPLICITLY DEFINED'
      IF BITAND(IND,'20'X) = '20'X THEN CCI = 'COMPUTED AT 'PCT'%'
                                   ELSE CCI = 'EXPLICITLY DEFINED'
      VADD = HEXADD(FCTSR,14)
      CALL FWORD
      STN  = X2D(SUBSTR(FWORD,1,4))      /* STRING NO. */
      VADD = HEXADD(FCTSR,18)
      CALL FWORD
      NAS  = X2D(SUBSTR(FWORD,1,4))     /* CURRENT ACTIVE STRINGS */
      HAS  = X2D(SUBSTR(FWORD,5,4))     /* HIGHEST ACTIVE STRINGS */
      VADD = HEXADD(FCTSR,1C)
      CALL FWORD
      CSW  = X2D(SUBSTR(FWORD,1,4))     /* CURRENT STRING WAITS */
      HSW  = X2D(SUBSTR(FWORD,5,4))     /* HIGHEST STRING WAITS */
      VADD = HEXADD(FCTSR,20)
       CALL FWORD
      TSW  = X2D(SUBSTR(FWORD,1,8)      /* TOTAL    STRING WAITS */
/* ---------------------------------------------------------------- */
/* FOR EACH CI SIZE                                                 */
/* ---------------------------------------------------------------- */
      VADD = HEXADD(FCTSR,24)
      CISIZES = '  512 1K 2K 4K 8K12K16K20K24K28K32K'
      DO I = 1 TO 11
          CIS.I = SUBSTR(CISIZES,3*I,3)
          CALL FWORD
          NCI.I = X2D(SUBSTR(FWORD,1,4))    /* NUMBER OF STRINGS */
          VADD = HEXADD(VADD,10)
          END I
/* ---------------------------------------------------------------- */
/* DISPLAY                                                          */
/* ---------------------------------------------------------------- */
      'CTL' '%' 'E'
      'CTL' '-' 'P GRE REV H'     /* VSE SYS NAME       */
      'CTL' '.' 'P WHI     H'     /* BACKGROUND         */
      'CTL' '>' 'P YEL     H'     /* VSAM               */
      'SET MSGLINE ON 24 OVERLAY'
      'SET LINEND OFF'
      'SET TOFEOF OFF'
      'SET PREF OFF'
      'SET CMD OFF'
      'SET PF04 BEFORE QUIT'
      'EXTRACT ?LSCREEN?'
"RESER  1 N %-" VMID" %.  VSAM LOCAL SHARED RESOURCES"
"RESER  2 N %>"
"RESER  3 N %>"
"RESER  4 N %>  KEY LENGTH            " RIGHT(KYL,3, )    " ("CKL")"
"RESER  5 N %>  STRINGS NUMBER        " RIGHT(STN,3, )    " ("CSN")"
"RESER  6 N %>"
DO J = 1 TO 11
"RESER" J+6 "N %>  "CIS.J" CI'S NUMBER       ",
                    RIGHT(NCI,J,3, ) " ("CCI")"
    END J
"RESER 18 N %>"
"RESER 19 N %>  CURRENT ACTIVE STRINGS" RIGHT(NAS,3, ) "      ",
               "CURRENT STRING WAITS  " RIGHT(CSW,3, )
"RESER 20 N %>  HIGHEST ACTIVE STRINGS" RIGHT(HAS,3, ) "      ",
               "HIGHEST STRING WAITS  " RIGHT(HSW,3, )
"RESER 21 N %>                                 ",
               "TOTAL   STRING WAITS  " RIGHT(HSW,3, )
"RESER 22 N %>"
"RESER 23 N %>"
"RESER 24 N %. PF2=DUMP FCTSR    PF3=QUIT"
/* ----------------------------------------------------------------- */
/* PROCESS RESPONSE                                                  */
/* ----------------------------------------------------------------- */
    DO FOREVER
        CUR S 1 1
        READ NOCHANGE TAG
        PULL K1 K2 .
        KEYID = K1||K2
        SELECT
              WHEN KEYID = 'PFK2' THEN 'CMS VSTOR' VMID FCTSR
              WHEN KEYID = 'PFK3' THEN LEAVE
              OTHERWISE NOP
              END
        END
QUIT:
    QUIT
    EXIT


 Mike Jones
Senior Systems Programmer
Wavin Building Products (UK)  ) Xephon 1989































































