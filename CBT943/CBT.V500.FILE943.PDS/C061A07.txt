Distributed processing under CICS

Distributed processing is the current trend in mainframe/PC
computing.  Usually, distributed designs involve sharing data
and/or processing between mainframes, mini computers, and
PCs.  However, distributed processing can also be a strategic
development philosophy for mainframe-to-mainframe based
CICS applications.

The design presented here is a simple 'home-grown' messaging
system which supports distributed CICS applications.  The
system was developed in 1985 and uses standard features
available with CICS (1.6 and above).  It initiates and controls
SNA LU6.2 conversations between CICS systems running on
CPUs residing at different locations.

The conversations involve sending messages to remote CPUs
and receiving status replies.  The messages are designed to
stimulate application processing such as starting remote
programs and passing user data to those programs.  A
messaging system such as the one detailed here can play an
important role in the daily flow of company-wide information.

Communication between host machines running CICS (under
VSE or MVS) is provided through CICS Inter-System
Communication (ISC).  ISC topics are documented in IBM's
Intercommunication Facilities Guide.  This guide explains the
various types of communications which are made available
through ACF/VTAM for CICS.  I found it valuable during the
development of the messaging system and it is also the
reference for much of this article.

ISC between CICS programs running on different hosts
requires special macro entries in CICS and VTAM.  In each
CICS TCT the TYPE=INITIAL macro must specify the local
system (SYSIDNT and APPLID).  Also, TYPE=SYSTEM
macros are required for the remote CICS systems to specify the
remote network name, number of parallel sessions, and other
options.  Additionally, the ISC parameter in the SIT must be
set to 'YES' since the default is 'NO'.

CICS systems are defined as applications in VTAM.  The
VTAM CDRM and CDRSC lists (for cross domain resource
macros) must specify the CICS APPLIDs.  The APPLIDs in
the VTAM lists must match those specified in the CICS tables.

You will need to research ISC topics in more detail than can be
presented here if cross-domain processing is not already
established in your shop.  For our discussion, we will proceed
as if we have several CICS systems running on different hosts
which are defined to communicate across a VTAM network.

Note that ISC can be used for communications between CICS
systems running on the same processor or different processors
in the same physical location.  The messaging system in this
discussion was developed for CICS systems running on
different processors at different locations.  This type of
communication is referred to as 'cross domain' communication.
CICS provides three types of cross-domain communication:

o      Function request shipping

o      Asynchronous processing

o      Distributed Transaction Processing (DTP).

Function request shipping allows CICS systems to share their
resources.  A request to access a resource (such as a VSAM
file or a storage queue) or to initiate a transaction is 'shipped' to
a remote CICS system where a mirror transaction executes the
request.

Asynchronous processing is much like function request
shipping except that the request for remote resources (such as a
file enquiry) is made and the conversation is ended.  The result
is returned in a separate conversation.  The results sent back do
not necessarily match the requests.  This is most suitable for
enquiry-type transactions where you do not want to tie up local
resources while accessing remote resources.

These two types of cross-domain processing are great because
the application does not need to be aware of the physical
location of the resource.  However, it also makes your local
application dependent on the availability of the remote system,
its resources, and the communication lines.

DTP is like asynchronous processing in that processing is
distributed between cross-domain CICS systems; however,
DTP is a synchronous communication - it is a conversation
between two CICS transactions running on separate host
machines.  The conversation is a VTAM-bound session in
which data, in the form of messages, can be sent back and
forth.  DTP is best suited for application programs which are
specifically designed for cross-domain communication.

In DTP the initiating transaction uses a CICS ALLOCATE
command to acquire the ISC session.  Once the session is
allocated using the system names that have been defined in the
VTAM and CICS tables, the transactions can exchange data
using SEND and RECEIVE commands.

This type of cross-domain processing, like the others, makes
your local application dependent on the availability of the
remote system.  However, with DTP the program has more
control over  communications.  It is best suited for the type of
program-to-program communication that was needed for our
messaging system.  Since this system receives a status reply for
every message sent, a synchronous communication was
required.

A unique design feature with this messaging system is its
independence from remote system availability.  This system
queues messages on a VSAM file and then reads the VSAM
queue and sends the messages when the destination CICS
system is available (that is if an ISC session can be allocated).
If the destination site is not available, it keeps trying every few
minutes using Interval Control until the system or
communications line is back up.

A special requirement of this system is that no messages are
lost even if the line or destination CPU goes down in the
middle of sending a message!  This requirement is met by not
deleting a message from the message queue until a reply is
made that the message has been received by the destination
site.

To distribute processing using DTP, messages are sent by a
'sender' program to a targeted CICS system.  At the remote
CICS the messages are received by a 'receiver' program.  The
receiver program digests the message and, based on its
contents, starts other programs and passes information from the
message.  Refer to Figure 1 for a flow diagram of the
messaging system.

In this discussion I refer to local and remote CICS systems.
The distinction is only one of perspective.  Actually the
messaging system has the same SEND/RECEIVE programs
residing on all the machines and considers all location as
equals.

The messages which are sent to other locations are variable
length, keyword-based strings of data.  You can change the
format of the message to another if you prefer.  I found the
keyword-based message the easiest to work with and the
simplest to parse in a program.

The messages have a three-level structure.  The levels are built
as they are prepared to be sent and are then stripped down as
they are processed at the remote site.

The first message level contains the data which application
programs need to perform their functions.  Each message at
this level has an identifier and a set of keywords to which
values are assigned.  The keywords in this system are all four
bytes in length to make the parsing of the message easier.
Application programs that need to stimulate remote processing
build this level of message.  The general format is:

      MSGID:KEYWORD=value,KEYWORD=value,...KEYWORD=value;;;;

Some of the standard keywords which should exist for all
messages include:

o      TRAN - CICS transaction-id to start at the remote site

o      FLOC - from location

o      TLOC - to location

o      FTRM - from terminal

o      OPID - from operator-id.

Other keywords will apply depending upon the type of
application.  For example, to send a file update that was done
at a central location to all the remote locations (so that they can
perform the same update on their copies of the file), the
message would possibly contain an action code (for add,
change, or delete) and an image of the record.

Depending upon the state of the process, messages reside on
one of three VSAM files:

1      The MSGQUE file holds messages to be sent to remote
      locations.

2      The MSGTLOG is a log of messages already transmitted
to
      remote locations.

3      The MSGRLOG is a log of messages received from local
      and remote locations.

Messages reside on these VSAM files in a second-level format
with a location, date and time as the file key:

      LOCATION + DATE + TIME + STATUS + LEVEL 1 MESSAGE

Before messages are sent, they are also prefixed with the
transaction-id of the remote receiver program and the session
name.  The session name is not required; however, the
transaction-id is required as it causes the receiver program at
the remote location to start when the message arrives.

The messaging system consists of only three small programs:
o      The editor/router program

o      The sender program

o      The receiver program.

All three programs reside at each location.

The editor/router program is linked to by application programs
which pass a level 1 message.  The message is first checked to
make sure all the required keywords exist and then a status
code is passed back to the calling program.  Valid messages are
routed to the location specified in the message.  If the TLOC
keyword value is the local location, the level 1 message is
passed to the receiver program.  Otherwise, the message is
written to the MSGQUE file in a level 2 format.

The sender program is initially started every time CICS starts
(as it is specified in the PLTPI).  Only one copy of this
program executes on each CICS system in the ISC network.
This is done to single-thread the messaging request.  Each time
this program starts, it reads the MSGQUE file and tries to send
the messages.  Whenever it runs into problems or runs out of
messages to send it 'sleeps' for pre-determined intervals using
Interval Control.

The receiver program receives messages from either the local
messaging system or from a remote system.  Local messaging
can be used to mirror processing that occurs remotely or it can
be used as a handy way to start processing and have the actions
logged.  A local message has TLOC=FLOC.  The editor/router
program passes local messages (in level 1 format) directly to
the receiver program.

The receiver program is primarily designed to receive messages
from remote sender programs (as level 3 messages).  If a
message is received from a remote site, a reply is sent back to
the remote sender program.  The message is also written to the
MSGRLOG file.  It is then parsed and the transaction specified
in the TRAN keyword is started.  The level 1 part of the
message is passed to the application program when it is started.

The messaging system as discussed can be used in many ways.
The programs which are started at remote locations can read
and/or update files, send file data back to the local site, display
data from the message to a remote operator console, or start a
chain of processing which can include loading a remote
message queue with data to be sent to locations not defined to
the local site.

With a messaging system such as this, a company with several
physical locations each running CICS can have decentralized
systems which communicate and exchange data with one
central location.  An example of this type of application
structure is if your company wanted to key customer orders at
each location yet have the credit and billing processing done at
one central location.  Distributed order processing can facilitate
better customer service while centralized billing and credit can
provide better control of company assets.  I am sure you will
discover many other applications which yield similar benefits
using distributed processing in CICS.

P C Shumway
Project Leader
Masonite Corp (USA)                        c   P C Shumway 1990


