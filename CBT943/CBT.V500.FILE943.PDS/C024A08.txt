 A VSAM initialisation program for VSE users

In the August 1986 and March 1987 issues of CICS Update, Thomas leNoir and Harry
S Cheung respectively submitted two versions of a program called VSAMINIT.  The
problem I found was that you had to be an OS user and could only initialise one
file at a time.  This process of a batch submission for every file seems rather
tedious.

The following program, INITVSAM, allows any number of VSAM files (either ESDS,
RRDS, or KSDS) to be initialised in a single run.  Below is a listing of
INITVSAM, which currently runs under VSE.  To use the program, you need to
submit a batch job containing one or more DLBL statements as illustrated below.
This program also initialises alternate indexes.  Firstly, define your base
cluster and alternate index, then make sure that the DLBL for the base cluster
appears before the DLBL for the alternate index in the JCL.


SAMPLE JCL

// JOB ....
// DLBL FILENAME,'FILEA',,VSAM,CAT=....          RRDS
// DLBL FILENAM1,'FILEB',,VSAM,CAT=....          ESDS
// DLBL FILENAM2,'FILEC',,VSAM,CAT=....          KSDS without Alternate Index
// DLBL FILENAM3,'FILED',,VSAM,CAT=....          KSDS with Alternate Index
// DLBL FILENAM4,'FILEE',,VSAM,CAT=....          Alternate Index
// EXEC INITVSAM
FILENAME
FILENAM1
FILENAM2
FILENAM3
FILENAM4
/*
/&


THE SOURCE CODE

INITVSAM CSECT
         STM   R14,R12,12(R13)
         LR    R11,R15
         USING INITVSAM,R11
         ST    R13,SAVEAREA+4           SET UP ADDRESSABILITY
         LA    R14,SAVEAREA             AND SAVE REGISTERS
         ST    R14,8(R13)
         LR    R13,R14
***********************************************************************
*     OPEN CARD-FILE(SYSIPT DATA) AND PRINT-FILE(PRINTER)             *
*     MODIFY INFILE'S ACCESS CONTROL BLOCK AND OPEN INFILE            *
*     CHECK INFILE FOR KSDS OR RRDS OR ESDS                           *
*     CHECK TO SEE IF DATASET INFILE IS ALREADY LOADED                *
***********************************************************************
         OPEN  CARDFLE,PRINTER          OPEN CARDFILE, PRINTFILE
READAGIN GET   CARDFLE                  READ A CARD
         MODCB RPL=RPLLIST,             RESET OPEN ACB                 X
               OPTCD=(KEY,SEQ,ARD,FWD,NUP,KEQ,FKS,MVE)
         MODCB ACB=INFILE,DDNAME=(*,FILENM), MODIFY TO SEQUENTIAL      X
               MACRF=(SEQ,OUT,ADR),                                    X
               AM=VSAM
         MVC   DATAOUT(80),MODERR       MOVE MOD ERR MSG TO PRINT
         LTR   R7,R15                   GOOD MODIFY
         BNZ   ERROR                    BAD MODIFY .. BRANCH
         OPEN  INFILE                   OPEN INFILE
         MVC   DATAOUT(80),OPERR        MOVE OPEN ERR TO PRINT
         LTR   R7,R15                   GOOD OPEN
         BNZ   NOCLOSE                  NO .. BRANCH
         TESTCB ACB=INFILE,             TEST ACB FOR ESDS              X
                ATRB=ESDS,                                              X
               ERET=BADTEST
         BE    ESDS                     BRANCH IF ESDS
         TESTCB ACB=INFILE,             TEST FOR KSDS                  X
               ATRB=KSDS,                                              X
               ERET=BADTEST
         BE    SKIP                     BRANCH IF KSDS
         MODCB RPL=RPLLIST,             MODIFY RPL FOR RRDS            X
               ARG=RECNO
         MVC   DATAOUT(80),MODERR1      MOVE MOD ERR TO PRINT
         LTR   R7,R15                   TEST IF MOD GOOD
         BNZ   END                      BRANCH IF NOT ZERO
SKIP     SHOWCB ACB=INFILE,             GET LOGICAL RECORD             X
               AREA=DISPLAY,            LENGTH AND NUMBER OF           X
               FIELDS=(NLOGR,LRECL),    RECORDS                        X
               LENGTH=8
         MVC   DATAOUT(80),SHOWERR      MOVE SHOW ERR TO PRiNT
         LTR   R7,R15                   SHOW GOOD
         BNZ   END                      IF NOT BRANCH
         MVC   DATAOUT(80),DATAFND      MOVE DATA ERR TO PRINT
         CLC   NLOGR,=F'0'              IS FILE EMPTY
         BNE   END                      IF NOT BRANCH
***********************************************************************
*     GETVIS RECORD AREA, ZERO IT OUT                                 *
*     PUT DUMMY RECORD AND CLOSE FILE                                 *
***********************************************************************
         L     R0,LRECL                 LOAD LENGTH OF REC IN R0
         GETVIS                         GETVIS A RECORD AREA
         LR    R2,R1
         L     R3,LRECL
         SR    R5,R5
         MVCL  R2,R4                    SET UP & MVCL
         LR    R2,R1
         L     R3,LRECL
         MODCB RPL=RPLLIST,             MODIFY RPLLIST                 X
               AREA=(R2),               FOR KSDS                       X
               AREALEN=(R3),                                           X
               LRECL=(R3),                                             X
               OPTCD=(KEY,SEQ)
         MVC   DATAOUT(80),MODERR1      MOVE MOD ERR TO PRINT
         LTR   R7,R15                   TEST FOR GOOD MOD
         BNZ   END                      BRANCH IF NOT
         PUT   RPL=RPLLIST              WRITE YOUR DUMMY RECORD
         MVC   DATAOUT(80),PUTERR       MOVE BADWRITE TO PRINT
         LTR   R7,R15                   TEST IF WRITE GOOD
         BNZ   ERROR                    IF NOT BRANCH
         CLOSE INFILE                   CLOSE FILE
         MVC   DATAOUT(80),CLOSERR      MOVE CLOSE ERR TO PRINT
         LTR   R7,R15                   WAS CLOSE GOOD
         BNZ   NOCLOSE                  IF NO BRANCH
***********************************************************************
*     OPEN THE FILE, THEN MODIFY IT                                   *
***********************************************************************
         OPEN  INFILE                   OPEN INFILE
         MVC   DATAOUT(80),OPERR2       MOVE OPEN ERR TO PRINT
         LTR   R7,R15                   WAS OPEN GOOD
         BNZ   NOCLOSE                  IF NOT BRANCH
         MODCB RPL=RPLLIST,             MODIFY RPLLIST                 X
               OPTCD=(UPD)
         MVC   DATAOUT(80),MODERR1      MOVE MOD ERR TO PRINT
         LTR   R7,R15                   WAS MOD GOOD
         BNZ   END                      IF NOT BRANCH
         GET   RPL=RPLLIST              GET RECORD
         MVC   DATAOUT(80),GETERR       MOVE GET ERR TO PRINT
         LTR   R7,R15                   WAS GET GOOD
         BNZ   ERROR                    IF NOT BRANCH
 ***********************************************************************
*     DELETE THE DUMMY RECORD                                         *
*     PRINT STATUS AND CLOSE THE FILE                                 *
***********************************************************************
         ERASE RPL=RPLLIST              DELETE RECORD (DUMMY)
         MVC   DATAOUT(80),ERASERR      MOVE DELETE MSG TO PRINT
         LTR   R7,R15                   WAS DEL GOOD
         BNZ   ERROR                    IF NOT BRANCH
         MVC   DATAOUT(80),NORMAL       MOVE OK TO PRINT
END      CLOSE INFILE                   CLOSE FILE
NOCLOSE  MVC   DATAOUT(8),FILENM        MOVE FILENAME TO PRINT
         PUT   PRINTER                  WRITE TO PRINTFILE
         B     READAGIN                 BRANCH FOR ANOTHER READ
ENDOFJOB CLOSE PRINTER                  CLOSE PRINTFILE
         LR    R15,R6
         L     R13,SAVEAREA+4           RESTORE REGISTERS
         LM    R14,R12,12(R13)
         EOJ                            END OF JOB - GET OUT
ERROR    SHOWCB RPL=RPLLIST,                                           X
               FIELDS=FDBK,                                            X
               AREA=FEEDBK,             GET ERROR CODE                 X
               LENGTH=4
         MVC   DATAOUT(8),FILENM        MOVE FILENAME TO PRINT
         PUT   PRINTER                  WRITE PRINTFILE
         UNPK  WKFLD,FEEDBACK+2(3)
         TR    WKFLD,TRTBL-C'0'         UNPACK AND MOVE ERROR
         MVC   RETCDE,WKFLD             CODE TO PRINTFILE
         MVC   DATAOUT(80),FDBKMSG
         B     END
ESDS     SHOWCB ACB=INFILE,             GET LOGICAL RECORD             X
               AREA=DISPLAY,            LENGTH AND NUMBER OF           X
               FIELDS=(NLOGR,LRECL),    RECORDS                        X
               LENGTH=8
         MVC   DATAOUT(80),SHOWERR      MOVE SHOW ERR TO PRINT
         LTR   R7,R15                   WAS SHOW GOOD
         BNZ   END                      IF NOT BRANCH
         MVC   DATAOUT(80),DATAFND      WAS FILE LOADED
         CLC   NLOGR,=F'0'              CHECK
         BNE   END                      IF NOT BRANCH
***********************************************************************
*     GETVIS RECORD AREA, ZERO OUT AREA                               *
*     PUT DUMMY RECORD AND CLOSE FILE                                 *
***********************************************************************
         L     R0,LRECL                 LOAD LENGTH OF REC IN R0
         GETVIS
         LR    R2,R1
         L     R3,LRECL
         SR    R5,R5
         MVCL  R2,R4                    SET UP & MVCL
         LR    R2,R1
         L     R3,LRECL
         MVI   0(R2),X'FF'              FLAG RECORD
         MODCB RPL=RPLLIST,             MODIFY RPLLIST                 X
               AREA=(R2),               TO REFLECT ESDS                X
               AREALEN=(R3),                                           X
               LRECL=(R3),                                             X
               OPTCD=(ADR,SEQ)
         MVC   DATAOUT(80),MODERR1      MOVE MOD ERR TO PRINT
         LTR   R7,R15                   TEST FOR GOOD MOD
         BNZ   END                      BRANCH IF NOT
         PUT   RPL=RPLLIST              WRITE YOUR DUMMY RECORD
         MVC   DATAOUT(80),PUTERR       MOVE BADWRITE TO PRINT
         LTR   R7,R15                   TEST IF WRITE GOOD
         BNZ   ERROR                    IF NOT BRANCH
         MVC   DATAOUT(80),NORMAL       MOVE OK TO PRINT
         B     END                      BRANCH
 BADTEST  MVC   DATAOUT(80),TESTERR      MOVE TESTCB ERR TO PRINT
         B     END
***********************************************************************
*                          DTFS                                       *
***********************************************************************
CARDFLE  DTFCD BLKSIZE=80,RECFORM=FIXUNB,IOAREA1=VSAMFLE,TYPEFLE=INPUT,X
               DEVADDR=SYSRDR,DEVICE=2540,EOFADDR=ENDOFJOB
PRINTER  DTFPR BLKSIZE=80,IOAREA1=PRTOUT,DEVADDR=SYSLST,DEVICE=PRT1,   X
               RECFORM=FIXUNB,CONTROL=YES,PRINTOV=YES
***********************************************************************
*              CONSTANTS AND WORK AREAS                               *
***********************************************************************
VSAMFLE  DS    0CL80                    CARD INPUT AREA DESCRIPTION
FILENM   DS    CL8                      CATALOG NAME OF WHERE FILE IS
         DS    CL72                     FILLER
PRTOUT   DS    0CL80
DATAOUT  DS    CL80
SAVEAREA DS    18F
DISPLAY  DS    0D
NLOGR    DS    F
LRECL    DC    F'00'
FEEDBACK DS    F
         DS    C
WKFLD    DS    CL4
RECNO    DS    CL4
MODERR   DC    CL80'          RETURN CODE = XX --- ACB MODIFY FAILED  '
NORMAL   DC    CL80'          RETURN CODE = 00 --- FILE INITIALISED   '
OPERR    DC    CL80'          RETURN CODE = 01 --- CANNOT OPEN FILE   '
OPERR2   DC    CL80'          RETURN CODE = 02 --- CANNOT REOPEN FILE '
SHOWERR  DC    CL80'          RETURN CODE = 03 --- NOTIFY SYSTEMS     '
DATAFND  DC    CL80'          RETURN CODE = 04 --- FILE IS NOT EMPTY  '
PUTERR   DC    CL80'          RETURN CODE = 05 --- ADD RECORD FAILED  '
CLOSERR  DC    CL80'          RETURN CODE = 06 --- CLOSE FILE FAILED  '
TESTERR  DC    CL80'          RETURN CODE = 07 --- NOTIFY SYSTEMS     '
MODERR1  DC    CL80'          RETURN CODE = 08 --- RPL MODIFY FAILED  '
GETERR   DC    CL80'          RETURN CODE = 09 --- RETRIEVE RECORD FAILX
               ED'
ERASERR  DC    CL80'          RETURN CODE = 10 -- DELETE RECORD FAILED'
* 0 NORMAL END OF TASK
* 1 ERROR OPENING VSAM FILE
* 2 ERROR ON SECOND OPENING OF VSAM FILE
* 3 FAILED = SHOWCB
* 4 VSAM FILE NOT EMPTY
* 5 UNABLE TO ADD DUMMY RECORD TO VSAM FILE
* 6 UNABLE TO CLOSE VSAM FILE
* 7 UNABLE TO ACCESS METHOD CONTROL INFILE
* 8 UNABLE TO MODIFY REQUEST PARAMETER RPLLIST
* 9 UNABLE TO RETRIEVE DUMMY RECORD
* 10 UNABLE TO DELETE DUMMY RECORD
FDBKMSG  DS    0CL80
         DC    CL32'          VSAM RETURN CODE IS = '
RETCDE   DS    CL3
         DC    CL45' '
TRTBL    DC    C'0123456789ABCDE'
         LTORG
INFILE   ACB   DDNAME=INFILE,                                          X
               MACRF=(SEQ,OUT,ADR),                                    X
               AM=VSAM
RPLLIST  RPL   ACB=INFILE,                                             X
               OPTCD=(KEY,SEQ,ARD,FWD,NUP,KEQ,FKS,MVE),                X
               AM=VSAM
         END   INITVSAM


Bryan Changaris
Senior Systems Programmer
 First National Bank of Central Jersey (USA)  ) Bryan Changaris 1987

































































