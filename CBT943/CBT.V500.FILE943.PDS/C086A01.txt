Debugging Version 3 transaction dumps

CICS transaction dumps seem to have become the poor relation
now that CICS can take SDUMPs of the whole address space.
However, they offer many advantages, particularly to
application programmers who probably do not have access to
SDUMPs and IPCS to format them. The aim of this article is to
offer some guidance to finding your way around transaction
dumps.


INTRODUCTION

CICS writes its transaction dumps to the DFHDMPA and, if
available, the DFHDMPB datasets. These are sequential
datasets and CICS uses them in a flip-flop manner.

By issuing the command:

      CEMT S DUMP AUTO

CICS will switch from the current dump dataset to the other
when the current dataset becomes full. However, it only does
this once. By enabling a global exit program at the XDUCLSE
exit point to set return code UERCSWCH, auto switch status
can be maintained indefinitely.

Each transaction dump consists of the control blocks, storage
areas, and trace table entries for the abending task only. Each
dump is given a dump identifier of the form aa/bbbb, where aa
is the CICS run number since the last time the CICS local
catalog was reformatted increasing by 1 for each start of CICS
and bbbb is the dump number within that run of CICS - this is
set to 1 at each CICS start-up.

Message DFHDU0203I is written to the CDUL transient data
destination when a transaction dump is taken and gives the
dump-id of the dump.


CONTROLLING TRANSACTION DUMPS

CICS maintains a transaction dump table, which is built
dynamically each time a transaction dump is taken. You can
maintain this table using the CEMT SET TRDUMPCODE
command to add, alter, and delete entries from the transaction
dump table. Each entry in the transaction dump table is for an
abend code. This table is maintained across CICS starts in the
CICS global catalog.

Options that can be set for each abend code are:

o      To suppress the transaction dump - no transaction dump is taken.

o      To take a system dump (SDUMP) when this transaction
      abend code occurs.

o      To shut down CICS when this abend code occurs.
o      To limit the number of transaction dumps taken to a fixed
      number and to suppress them after that limit is reached.

A default definition is created when an abend code first occurs
with options set to take a transaction dump, not to take an
SDUMP, not to perform a shut-down, and no limit on the
number of transaction dumps (maximum set to 999). Dump and
trace can also be controlled at the transaction level when the
transaction is defined to CICS using CEDA. Each transaction
can specify whether or not a transaction dump is to be taken if
it abends and if trace is to be active for the transaction.


PRINTING TRANSACTION DUMPS

Transaction dumps are printed in batch using the DFHDUP
utility program. You print dumps selectively by transaction-id,
abend code, dump-id, or any combination of these. In addition
you can print just an index of all the dumps on the dump
datasets.

With earlier releases of CICS it was necessary to close or
switch dump datasets before printing transaction dumps, and
this required you to know which dump dataset was active when
the dump you wanted to print was taken. With Version 3 of
CICS I have had no problems with simply concatenating both
the DFHDMPA and DFHDMPB datasets together as input to
the DFHDUP utility and running without closing or switching
the dump datasets in CICS.


ANALYSING THE TRANSACTION DUMP

Using the trace entries

If the CICS internal trace was active when the transaction
dump was taken, the dump will include all the entries for the
abending task that were in the trace table. Even if you have the
CICS internal trace turned off, CICS still maintains a 16K
internal trace table for exception trace entries. Thus, there may
still be one or two trace entries for the transaction even with
CICS tracing turned off. Exception entries are flagged '*EXC'
in the trace so if you are viewing the dump output on-line
simply issue a find for the string '*EXC'.

Note that if you suppress tracing at the transaction level in the
transaction definition, you will not get any trace entries at all in
the transaction dump.

The trace table is printed in two forms: an abbreviated short
form, which consists of single-line entries; and the full form,
which prints all the data from each trace entry. Each trace entry
in the full trace can be several print lines long.

Start with the summary trace. Scan down it until you find the
abend being issued then back up to the previous EIP (EXEC
CICS call). You can often determine the cause of the abend
simply by looking at the intervening comments of each trace
entry. For example, an APCT abend can be caused because of
a missing load module in the DFHRPL library. This can be
seen as a BLDL failure in the trace just prior to the APCT
abend. The name of the module that could not be found is also
shown in the trace entries.

A more complex situation is a file I/O error or ILLOGIC type
of failure when accessing a VSAM file. This requires that you
refer to the full trace entries. An ILLOGIC error (AEIU abend)
for file I/O error will result in a '*EXC' entry in the trace table
for the error. The data printed as part of this entry is the VSAM
RPL that was used to access the file. You can find the file
name from an earlier trace entry. The four-byte area at offset
X'0C' is the RPL feedback code. The byte at offset X'0D' in
the RPL is the return code from the operation (RPLRTNCD).
The byte at offset X'0E' is the component code, indicating the
VSAM component that suffered the failure (base cluster, AIX,
or upgrade set), and the byte at offset X'0F' is the reason code
(RPLERRCD), which gives the reason for the failure. These
codes can be found in the manual, MVS/DFP Macro
Instructions for VSAM datasets, in the chapter on macro
instruction return codes.

As an example, a return code of X'08', component code
X'04', and reason code X'6C', indicates a RECLEN error in
an alternate index, which is part of the upgrade set of a base
cluster. Such an error can be caused by the number of duplicate
keys in an alternate index exceeding the maximum that can be
contained in a single AIX record. Finding the record in the
dump that caused such an error is discussed later.

Determining where a CICS call was made from

The full trace can be used to determine from where an EXEC
CICS call was made to CICS. EXEC CICS calls result in a
trace entry type of EIP in the application domain (AP). In the
full trace one of the operands printed is labelled RET-aaaaaaaa,
where aaaaaaaa is an address. This is the return address into the
application program immediately after the call to CICS.

At the end of the transaction dump there is a module index that
lists all the modules currently loaded in CICS and their entry
points and load addresses. By subtracting the load address from
the return address in the trace entry you can determine where in
the program the call was made from.


FINDING THINGS WITHOUT USING THE TRACE

Often, in the production environment, the internal trace is
turned off for performance reasons. This leaves us with the
problem of finding from where a failing CICS call was made.
All is not lost, however, and in certain circumstances it is still
possible to find out from where the last EXEC CICS call was
made. This method also leads us on to finding data areas used
by the call.

When an application program makes an EXEC CICS call to
CICS it uses the standard operating system convention that
register 1 points to a list of addresses of the passed parameters
with the high bit set on in the last address to indicate the end of
the list. Register 14 is the return address and register 15 the
entry point address of the called routine. When the call is made
to CICS, CICS saves the application program registers in a
standard operating system save area - that is, registers 14
through 12 from the save area start, plus 12 (decimal).

How to find the register save area

At the start of the transaction dump are the user and system
task control areas (TCAs). In the system TCA, the field
TCAPCHS addresses the high-level language register save
area. (Refer to CICS Data Areas for the offset of TCAPCHS in
the system TCA.) Although the manual calls this the high-level
language save area, it is also the address of the register save
area used by command-level Assembler programs, which is the
first 18 words of the DFHEISTG area. Find this address in the
transaction dump. Offset 12 decimal is register 14, the return
address into the application, and offset 24 decimal is register 1
at the time of the call.

The address in register 14 is exactly the same as if obtained
from the full trace RET-aaaaaaaa entry and can be used in the
same way to find the offset within the abending program of the
failing CICS call.

Now that we have register 1 we can find the address list in
storage that pointed to the parameters of the EXEC CICS call.
The overall structure is as follows:

o      TCSPCHS points to the Register Save Area (RSA).

o      RSA plus 24 contains the address of register 1.

o      Register 1 contains the address list address, where:
      -      Address 1 contains the EIBFN call type and additional
            parameters.
      -      Address 2 contains the first operand of the call.
      -      Address 3 contains the second operand of the call.
      -      etc.
      -      Address n contains the n-1th operand of the call, and
            the high bit is on indicating it is the last address.

Once you have the address list you can find each operand of
the call that was made to CICS. The first operand is always the
function code that identifies the call type to CICS. The first
two bytes are the same as the EIBFN field of the EIB.
Subsequent operands depend on the individual call.

The simplest way to determine what the other operands are,
once you know the call type from the function code, is to code
the basic command in a simple Assembler program and
translate it. You do not even need to assemble it: simply
translate it and look at the order of the parameters passed by
the DFHECALL macro inserted by CICS.

Some operands of EXEC CICS calls do not pass parameters to
CICS but indicate options to be used with the call, for example
the UPDATE of an EXEC CICS READ FILE(..) UPDATE
command. The presence of these keywords in a call is
indicated by bit settings in the function parameter string passed
to CICS, which is the first parameter in the list of parameters
passed to CICS.

Again, the simplest way to determine the bit settings is to code
a dummy Assembler program (Assembler because the bit
settings are actually shown in the listing) with the CICS
command coded twice, once without an option and once with
it. There will only be one bit difference in the first parameter
string passed to the DFHECALL macro and this bit represents
the presence or otherwise of that operand.

For example, the EXEC CICS READ FILE() command can be
specified with or without the UPDATE operand. The function
parameter string is of the form:

      X'0602xxxx xxxxxxx4'

The x's represent unknown bits. If the bit in the final 4 position
is on, a read for update was specified: if it is off, then the read
was not for update. Unless you have the program source code
this is the only way to determine such operands as they are not
indicated in the EIB block.

In the same way you can find which parameters in the address
list point at which operands, for example the RIDFLD of a read
or write from or to a file, the I/O area used to write a record to
a file, etc.

This method is subject to one limitation and that is that it will
only work providing no subroutines have been called by the
application program since the call was made. Obviously if the
transaction dump is as a result of a failing EXEC CICS call,
there is no problem, but sometimes the dump is the result of a
program check within the application program. In such cases it
is possible for the program to have called a subroutine since the
last EXEC CICS call was made. The subroutine will have
saved its registers in the same high-level save area used by
CICS and so destroyed the evidence. Register 15, from the
register save area plus 16 (decimal), will point to the
subroutine entry point within the load module if this is the
case.

David E Ellis
Senior Systems Programmer (Saudi Arabia)

