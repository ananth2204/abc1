A poor man's CICS monitor

A few years ago, I wrote some code to assist in the
identification and resolution of various problems in the CICS
area.  The operating budget of the client was insufficient to
acquire a vendor product to monitor the CICS regions, so a
limited set of programs was written to address specific
problems.  The goal was to improve the availability of the
CICS regions by shortening the problem identification and
resolution time.  For the systems programming staff anything
that eliminated the need to print and research problems buried
in a full region/partition dump would be a big, big benefit.

The result was the creation of three programs.  These three
programs are executed via CICS links from one task that is
started in the PLT processing at system start-up.  This driver
task runs every minute and drives each of the three modules
that scan the region for the various problems.  The driver
module is so simple it is not included here - it is a command-
level COBOL module that merely links to the other modules.
When a problem is found it is recorded on the operator's
console and/or a transient data queue that drives a printer.
These programs were written and tested under CICS/DOS 1.5
in 1985, then were revised slightly for CICS/DOS 1.6 and
finally CICS/OS 1.6.1.  I am certain little, if any, modification
would be required for execution under 1.7 or 2.1 for either
MVS or VSE.

The first program is a trap for Short On Storage (SOS)
conditions.  The time to research an SOS from a full dump is
extensive.  This module gathers all the information and
displays it upon the console.  It proved to be a great time saver.
It chases the storage chained from the individual tasks and
associated terminals and displays the dispatch codes and total
storage etc.  After all the tasks are displayed, it will collect
pertinent information from the PAM about temporary storage
and Dynamic Transaction Backout (DTB).  The amounts of
storage associated with each task and/or temporary storage or
DTB have always been able to reveal the culprit.  Right after
implementation of this program I learned a valuable lesson
which I have used several times since, but had not seen until
that time.  The specific lesson was that CICS could go SOS
trying to load a large program with insufficient contiguous
storage to hold it.  The information provided by this module
made quick work of this particular problem.

         TITLE 'SHORT ON STORAGE  SEARCH PROGRAM BY ROBERT BILYEU'
*               THIS PROGRAM WAS DESIGNED AND TESTED ON CICS 1.5 1985.
*               IT WAS REVISED FOR 1.6 IN 1987.
*               THE CICS STALL TIME INTERVAL SHOULD BE SET AT A VALUE
*               GREATER THAT 1 MINUTE AND LESS THAN OR EQUAL TO 5 MIN
*               UTES.  IF SO, THEN THIS PROGRAM WILL DISPLAY SHORT COND
*               ITIONS OF NO AREA OF CONTIGUOUS STORAGE LARGE ENOUGH
*               OR A TRUE SHORT WHERE THERE ARE NO AREAS LEFT.
*               THE DRIVING TASK IS A SIMPLE COMMAND LEVEL PROGRAM
*               THAT LINKS TO THIS MODULE. IN THE TOP OF THIS MODULE
*               WE ISSUE A 1 MINUTE WAIT. WE WAIT IN THIS MODULE SO
*               THAT ALL NECESSARY STORAGE HAS BEEN ACQUIRED ALREADY.
*               THE DRIVING TASK HAS A TWA AREA THAT IS COMMON TO
*               TWO OTHER MONITORING PROGRAMS. (ENQUEUE AND LONG RUNNING
*               SEARCHES)
SHORTST  CSECT
         USING *,R11
         LR    R11,R14     LOAD SO CALLED VOLATILE REGISTER INTO BASE
         USING DFHCSADS,R13
         USING DFHTCADS,R12
         USING DFHDCADS,R10
         USING DFHTCADY,R2
         XR    R1,R1
         XR    R2,R2
         XR    R3,R3
         XR    R4,R4       CLEAR ALL NEEDED REGISTERS FOR SAFETY SAKE
         XR    R5,R5
         XR    R6,R6
         XR    R7,R7
         XR    R8,R8
         XR    R9,R9
         XR    R10,R10
         DFHIC TYPE=WAIT,INTRVAL=0100  ISSUE WAIT FOR 1 MINUTE INTRVL
REDSPLY  CLI   CSASOSI,X'01'
         BNE   GETOUT
         MVC   TIMEFLD(L'DTTMEDIT),DTTMEDIT
         ED    TIME1,CSATODP
         ED    DATE,CSAJYDP
         LA    (R1),SHRTMSG1
         DFHWTO (R1)
BYPASS1  LA    R10,CSASUSOF
         MVC   FLAG,=C'S'         INDICATE TASK WAS FROM SUSPEND CHAIN
DCALOOP  L     R10,DCAKCFA        WHEN PUTTING INFO INTO TABLE
         CLI   0(R10),X'81'       TEST FOR STORAGE CLASS STILL DCA
         BE    ADDITUP            WHEN ITS NOT THEN LOAD THE ACTIVE
         LA    R1,CSAACTOF        CHAIN OFFSET TO CONTINUE
         CR    R10,R1             WHEN ACTIVE CHAIN IS EXHAUSTED THE
         BE    RETURN             DCAKCFA FORWARD POINTER IS EQUAL TO
         LR    R10,R1             CSAACTOF
         MVC   FLAG,=C'A'         INDICATE TASK WAS FROM ACTIVE CHAIN
         B     DCALOOP            WHEN PUTTING INFO INTO TABLE
ADDITUP  L     R2,DCATCAA         GET THE OWNERS TCA ADDRESS
         L     R2,0(,R2)          BACK IT UP TO OWNER SYSTM TCA ADDRSS
         XR    R4,R4
* AT THIS POINT WE HAVE A VALID TASK AND WILL RUN THE STORAGE
* CHAIN OFF THE TCA, TCTTE, AND IDENTIFY WHETHER OR NOT IT HAS A DTB
* LOG CHAIN
ADDMORE  LH    R3,2(,R2)          GET LENGTH OF STORAGE
         AR    R4,R3              ADD TO REG 4
         L     R2,4(,R2)          ADD 4 TO STORAGE ADDRSS TO NEXT PTR
         CLI   0(R2),X'8A'        CHECK FOR WRAP BACK TO TCA
         BE    REPORTIT
         B     ADDMORE
REPORTIT MVC   DSPLYNO1,=C'SYSTM'
         CLI   TCAKCTTA,C'T'          AVOID SYSTEM TASKS FOR NUMBERS
         BE    PASS1
         CLI   TCAKCTTA,C'K'
         BE    PASS1
         CLI   TCAKCTTA,C'J'
         BE    PASS1
         UNPK  WORK1(5),TCAKCTTA-DFHSYTCA(3,R2)
         OI    WORK1+4,X'F0'
         TR    WORK1(5),TRANSTAB  MESSAGES WITH TASK NUMBER AND TIMES
         MVC   DSPLYNO1(5),WORK1  AND DATES.
PASS1    MVC   DTBLOG(3),=C'   '
         L     R3,TCADBDLA-DFHSYTCA(,R2) LOAD THE DYNAMIC LOG ADDRESS
         LTR   R3,R3
         BZ    PASS2
         MVC   DTBLOG(3),=C'DTB'
PASS2    L     R1,TCATCPC-DFHSYTCA(,R2)  LOAD POINTER TO TRANS ID
         MVC   DSPLYNM1(4),0(R1) MOVE THE TRAN NAME INTO THE MESSAGE
         MVC   WAITRSN,=C'  '
         MVC   NUMBYTE,=C'       '
         CLC   TCATCDC-DFHUSTCA+TCASYAEA-DFHTCADY(1,R2),=X'18'
         BNE   NOSUSPND
         UNPK  WORK1(3),TCATCDC-DFHUSTCA+TCASYAEA-DFHSYTCA(2,R2)
         MVC   WAITRSN(2),WORK1
         MVC   HOLD(4),=X'00000000'    PREPARE AND DSPLY NUMBYTES REQST
         MVC   HOLD+2(2),TCASCNB-DFHUSTCA+TCASYAEA-DFHSYTCA(R2)
         L     R1,HOLD
         CVD   R1,UNPACK
         MVC   NUMBYTE,STOREDT
         ED    NUMBYTE(7),UNPACK+4
         MVC   DSPLYTM1(4),=C'????' MOVE TERM NAME INTO THE MESSAGE
NOSUSPND CLC   TCAFCAAA-DFHUSTCA+TCASYAEA-DFHTCADY(1,R2),=X'01'
         BNE   NOTRMNME
         L     R1,TCAFCAAA-DFHUSTCA+TCASYAEA-DFHTCADY(0,R2)
         LA    R1,0(,R1)          CLEAR HIGH BYTE
         MVC   DSPLYTM1(4),0(R1)  MOVE THE TERM NAME INTO THE MESSAGE
         L     R6,8(R1)               SET UP FOR TERM STORAGE LOOP
         LA    R7,4(R1)               LOAD R7 WITH END OF CHAIN ADDRES
LOOPTERM CR    R6,R7                  COMPARE FOR END OF CHAIN
         BE    NOTRMNME               GET OUT
         LH    R3,2(,R6)              LOAD LENGTH
         AR    R4,R3                  ADD IT
         L     R6,4(,R6)              BUMP TO NEXT STORAGE ADDRESS
         B     LOOPTERM               LOOK AGAIN
NOTRMNME CVD   R4,UNPACK
         MVC   STORAGE,STOREDT
         ED    STORAGE(7),UNPACK+4    PUT TOTAL STORAGE IN MESSAGE
         LA    (R1),SHRTMSG2
         DFHWTO (R1)
         B     DCALOOP               TEST NEXT TRANSACTION ON CHAIN
RETURN   EQU   *
         L     R6,CSAPAMA
         L     R4,0(,R6)
         CVD   R4,UNPACK
         MVC   DSPLCONT,STOREDT
         ED    DSPLCONT(5),UNPACK+5   PUT CONTROL STORAGE IN MESSAGE
         L     R4,16(,R6)
         CVD   R4,UNPACK
         MVC   DSPLTERM,STOREDT
         ED    DSPLTERM(5),UNPACK+5   PUT TERMINAL STORAGE IN MESSAGE
         L     R4,32(,R6)
         CVD   R4,UNPACK
         MVC   DSPLMIXD,STOREDT
         ED    DSPLMIXD(5),UNPACK+5   PUT MIXED  STORAGE IN MESSAGE
         L     R4,48(,R6)
         CVD   R4,UNPACK
         MVC   DSPLISOL,STOREDT
         ED    DSPLISOL(5),UNPACK+5    PUT ISOLATED STORAGE IN MESSAGE
         L     R4,64(,R6)
         CVD   R4,UNPACK
         MVC   DSPLSHRD,STOREDT
         ED    DSPLSHRD(5),UNPACK+5    PUT SHARED STORAGE IN MESSAGE
         L     R4,80(,R6)
         CVD   R4,UNPACK
         MVC   DSPLRPL,STOREDT
         ED    DSPLRPL(5),UNPACK+5     PUT RPL STORAGE IN MESSAGE
         L     R4,96(,R6)
         CVD   R4,UNPACK
         MVC   DSPLPROG,STOREDT
         ED    DSPLPROG(5),UNPACK+5    PUT PROGRAM STORAGE IN MESSAGE
         L     R4,116(,R6)
         CVD   R4,UNPACK
         MVC   DSPLTOTL,STOREDT
         ED    DSPLTOTL(5),UNPACK+5    PUT TOT PGE STORAGE IN MESSAGE
         L     R4,132(,R6)
         CVD   R4,UNPACK
         MVC   DSPLCUSH,STOREDT
         ED    DSPLCUSH(5),UNPACK+5    PUT CUSH SIZE IN MESSAGE
         L     R4,136(,R6)
         CVD   R4,UNPACK
         MVC   DSPLRELT,STOREDT
         ED    DSPLRELT(5),UNPACK+5    PUT STORAGE RELATIVE TO SHORT
         LA    (R1),SHRTMSG3
         L     R6,CSATSATA             LOAD ADDRESS OF TEMPSTORAGE
         L     R4,32(,R6)              COMMON AREA AND GET TOTAL CURRNT
         CVD   R4,UNPACK               STORAGE IN USE
         MVC   TEMPTOTL,STOREDT
         ED    TEMPTOTL(7),UNPACK+4    PUT TOTAL TEMP STORAGE IN MESGE
         DFHWTO (R1)
         LA    (R1),SHRTMSG4
         DFHWTO (R1)
         LA    (R1),SHRTMSG5
         DFHWTO (R1)
         LA    (R1),SHRTMSG6
         DFHWTO (R1)
         DFHIC TYPE=WAIT,INTRVAL=0600
         B     REDSPLY
*        DFHDC TYPE=TRANSACTION,DMPCODE=ANLZ
GETOUT   DFHPC TYPE=RETURN
         LTORG
**********************************************************************
*                   P R O G R A M  C O N S T A N T S
**********************************************************************
DTTMEDIT DS   0CL24                DATE AND TIME EDIT FIELD
         DC    CL1'  '
TIMEDIT  DC    X'2120',C':',X'2020',C':',X'2020',C'.',X'20'
         DC    CL3' ON'
         DC    C' ',X'20202020',C'/',X'202020'
STOREDT  DC    X'21202020202020'
EDIT00   DC    X'4B20202020202120'
TRANSTAB EQU   *-C'0'
         DC    CL16'0123456789ABCDEF'
UNPACK   DS    D
HOLD     DS    F
*     CONSOLE MESSAGES FOLLOW
         DS    0F
SHRTMSG1 DC    Y(64)
         DC    B'10000000'
         DC    B'00000000'
         DC    C'XANL '
TIMEFLD  DS    CL1
TIME1    DS    CL11                HH:MM:SS.TH
         DS    CL3
DATE     DS    CL9                 BBBYY/DDD
         DC    C' CICS IS SHORT ON STORAGE    '
         DS    0F
SHRTMSG2 DC    Y(72)
         DC    B'10000000'
         DC    B'00000000'
         DC    C' TASK '
DSPLYNM1 DS    CL4
         DC    C' NUMBER '
DSPLYNO1 DS    CL5
         DC    C' AT '
DSPLYTM1 DS    CL4
         DC    C' STORAGE = '
STORAGE  DS    CL7
         DC    C' '
DTBLOG   DS    CL3
         DC    C' '
WAITRSN  DS    CL2
         DC    C' '
NUMBYTE  DS    CL7
         DC    C'                                    '
         DS    0F
SHRTMSG3 DC    Y(72)
         DC    B'10000000'
         DC    B'00000000'
         DC    C' CONT '
DSPLCONT DS    CL5
         DC    C' TERM '
DSPLTERM DS    CL5
         DC    C' MIXD '
DSPLMIXD DS    CL5
         DC    C' ISOL '
DSPLISOL DS    CL5
         DC    C' SHRD '
DSPLSHRD DS    CL5
         DC    C'                                    '
SHRTMSG4 DC    Y(72)
         DC    B'10000000'
         DC    B'00000000'
         DC    C' RPL  '
DSPLRPL  DS    CL5
         DC    C' PROG '
DSPLPROG DS    CL5
         DC    C' TOTL '
DSPLTOTL DS    CL5
         DC    C' CUSH '
DSPLCUSH DS    CL5
         DC    C' RELT '
DSPLRELT DS    CL5
         DC    C'                                    '
         DS    0F
SHRTMSG5 DC    Y(72)
         DC    B'10000000'
         DC    B'00000000'
TEMPTOTL DS    CL7
         DC    C' TOTAL TEMP STORAGE MAIN CURRENTLY HELD '
         DC    C'                                    '
         DS    0F
SHRTMSG6 DC    Y(72)
         DC    B'10000000'
         DC    B'00000000'
         DC    C' NOTIFY SYSTEMS PROGRAMMING IMMEDIATELY!'
         DC    C'                                    '
         COPY  DFHCSADS
         CWA
         DFHTCA CICSYST=YES
         TWA
         ORG   TWA
* TWA AREA IS USED BY MULTIPLE PROGRAMS--BE CAREFUL NOT TO MOVE THINGS
         DS    CL16        LEAVE SPACE FOR RLBANAL5 DATA
FOUNDSW  DS    CL14        SWITCH TO CONTROL CONSOLE REPLY MESSAGE
FLAG     DS    CL1         REPRESENTS ACTIVE OR SUSPEND CHAIN A OR S
LONGSW1  DS    CL3         VALUE YES OR NO TO CONTROL CONSOLE REPLYS
LONGSW2  DS    CL4         VALUE 00000000 OR ONCE TO LOAD POINTERS
LONGSW3  DS    CL16        VALUE CONSOLE REPLY OR NO CONSOLE REPLY
WORK1    DS    CL12        WORK FIELD FOR VARIOUS USES
TWRK1    DS    CL4         TWRK1 = CURRENT TIME TURNED TO MINUTES
TWRK2    DS    CL4         TWRK2 = ORIGINAL TIME TURNED TO MINUTES
TWRK3    DS    CL4         TWRK3 = WORK FOR TIME CALCULATIONS
SAVE13   DS    F           USED FOR CERPAKU CALL FOR SCALAR DATE
SAVEREGS DS    18F         USED FOR CERPAKU CALL FOR SCALAR DATE
SAVERUN  DS    F           SAVE RUNAWAY TIME INTERVAL
SAVEQEA  DS    F           SAVE CURRENT QEA BASE ADDRESS FOR COMPARES
STOREBEG DS    F           SAVE BEG ADDRESS ON THE LONG RUN TABLE
STOREEND DS    F           SAVE END ADDRESS ON THE LONG RUN TABLE
STORENXT DS    F           SAVE THE NEXT ENTRY ADDRESS OF LONG RUN TAB
TESTFLD  DS    CL8         USED TO TRANSPOSE TABLE ENTRIES AND COMPARE
PAIRLIST DS    200CL8      PAIRLIST TABLE FOR FINDING DEADLOCKED TASKS
ENDLIST  DS    0CL1
LONGLIST DS    100CL12     LONGLIST TABLE FOR FINDING LONG RUN TASKS
ENDLONG  DS    0CL1
DCACBAR  EQU   0
         COPY  DFHDCADS
         END

The remaining two programs which make up Robert Bilyeu's
poor man's monitor will be published in the next two issues of
CICS Update.

Robert Bilyeu
Consultant (USA)                         ) Xephon 1990


