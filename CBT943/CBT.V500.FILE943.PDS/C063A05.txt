CEMT from batch for VSE (continued)

This month we continue our article about issuing CEMT
commands from batch under VSE by taking a look at the CICS
subtask.


THE CICS SUBTASK

Data from the batch program is passed to a subtask in the CICS
partition.  Its function is to transfer CEMT commands (and
such) from a batch job to a CICS task, and to transfer return
codes and comments from the CICS task back to the batch
program.  Communication between the batch job and this
program is done via XPCC.  Communication between the
CICS task and this program is done via ECBs.

This task runs on a different TCB to the CICS main task so that
CICS is not degraded or damaged while VSE macros are
issued.  Also, if this subtask terminates abnormally, it will
have no effect on CICS.  Because it is not running under the
CICS TCB and runs at a lower priority than CICS, this subtask
can do pretty much whatever it wants without degrading
response time or threatening the integrity of the CICS partition.


         TITLE 'CFBSUB  - CEMT FROM BATCH SUBTASK'
*                     C F B S U B                                   *
CFBSUB   CSECT
         BALR  R3,R0                       load base
         USING *,R3                        tell assembler
         LR    R10,R2                      load workarea base
         USING WORKAREA,R10                tell assembler
         STXIT  AB,ABERROR,ABSAVE,OPTION=NODUMP arm our
         STXIT  PC,PCERROR,PCSAVE                  exits
* The change priority macro is issued because we are running as
* a subtask in the CICS partition. We do not want to be at a higher
* priority than the CICS main task (for performance reasons).
         CHAP
* Here we identify ourselves to XPCC. Notice that we place the
* partition id in the APPL parameter value so that each CICS
* subtask has a unique name associated with it.
         LA    R11,CFBXPCCB                load XPCCB base
         USING XPCCBLAY,R11                tell assembler
         BAL   R9,GETPART                  get partition id
         MVC   CFBXPCCB+15(2),PARTID       and save in APPL parm
IDENT    DS    0H
         MVC   IJBXCECB,=F'0'              reset
         MVC   IJBXRECB,=F'0'               the
         MVC   IJBXSECB,=F'0'                ECBs
         XPCC  XPCCB=CFBXPCCB,FUNC=IDENT   identify ourselves
         LTR   R15,R15                     any errors ?
         BZ    IDOK                        no - IDENT ok
* The following two reason codes are OK. They indicate that our
* identification was used previously on the system.
         CLI   IJBXRETC,IJBXDAPP           different partition ?
         BE    IDOK                        IDENT OK
         CLI   IJBXRETC,IJBXAPSP           same partition ?
         BE    IDOK                        IDENT OK
         B     IDERR                       error - go display a msg
IDOK     DS    0H
         XPCC  XPCCB=CFBXPCCB,FUNC=CONNECT CONNECT application
         LTR   R15,R15                     alles gut ?
         BZ    CONNOK                      yah
* The following two reason codes are OK. They indicate that the batch
* job that will communicate with us has not yet issued an ident or
* connect.
         CLI   IJBXRETC,IJBXNIDN           no IDENT issued ?
         BE    CONNOK                      this is ok
         CLI   IJBXRETC,IJBXNCNN           no CONNECT issued ?
         BE    CONNOK                      this is ok
         B     CONNERR                     must be really bad
CONNOK   DS    0H
         LA    R1,IJBXCECB                 now we must wait for
         WAIT  (R1)                        somebody to connect to us
         LA    R1,IJBXRECB                 now let's wait for them
         WAIT  (R1)                        to send us something
         LA    R1,WORKBUF                  load buffer address
         ST    R1,BUFPTR                   and store it in ptr cell
         MVI   BUFPTR,X'80'                indicate end of list
         XPCC  XPCCB=CFBXPCCB,FUNC=RECEIVE,BUFFER=BUFPTR receive it
         LTR   R15,R15                     any errors ?
         BNZ   RECVERR                     yes
         MVI   WORKRPLY,C' '               no errors
         MVC   WORKRPLY+1(L'WORKRPLY-1),WORKRPLY   clear reply area
         LA    R1,WFROMECB                 and post ECB
         POST  (R1)                        let other guy go
* Here we wait three minutes for the CICS task to complete its
* processing. If we don't hear from him by them, we'll assume he
* bit the big one.
         LA    R2,36                       number of times to loop
CHECKECB DS    0H
         TM    WTOECB+2,X'80'              ECB posted ?
         BO    WAITDONE                    yes
         MVC   XTECB,=XL4'00'              reset timer ECB
         SETIME 5,XTECB                    set interval timer
         WAIT  XTECB                       wait for time to elapse
         BCT   R2,CHECKECB                 if any more, try again
         B     WAITERR                     connection error
WAITDONE DS    0H
         MVC   WTOECB,=F'0'                reset ECB
         LA    R1,WORKRPLY                 load buffer address
         ST    R1,BUFPTR                   and store it in ptr cell
         MVI   BUFPTR,X'80'                indicate eol
         XPCC  XPCCB=CFBXPCCB,FUNC=REPLY,BUFFER=BUFPTR    go reply
         LTR   R15,R15                     any errors ?
         BH    REPLYERR                    yes
         XPCC  XPCCB=CFBXPCCB,FUNC=DISCONN break connection
         LTR   R15,R15                     any errors ?
         BNZ   DISCERR                     yes
         XPCC  XPCCB=CFBXPCCB,FUNC=TERMIN  terminate XPCC services
         LTR   R15,R15                     any errors ?
         BNZ   TERMERR                     yes
         CLC   WORKBUF(8),=CL8'SHUTDOWN'   request for shutdown ?
         BE    GOHOME                      yes
         B     IDENT                       go set up again
GOHOME   DS    0H
         MVC   LOG,SHUTMSG                 load message
         MVC   LOG+14(2),PARTID            insert partition ID
         BAL   R9,PUTCONS                  go display it
         DETACH                            hara-kiri
*                  WRITE TO CONSOLE ROUTINE                       *
PUTCONS  DS    0H
         LA    R1,CONSCCB                  load console CCB
         EXCP  (R1)                        write
         WAIT  (R1)                         and wait
         BR    R9                          return to caller
DUMP     DS    0H
         MVC   WOP(72),LOG
*        PUT   REPORT
         PDUMP CFBXPCCB,CONSCCB
         BR    R12
*                  HEX TO CHARACTER ROUTINE                       *
*        R9  = RETURN ADDRESS
*        R13 = NUMBER OF BYTES TO PROCESS
*        R14 = INPUT FIELD
*        R15 = OUTPUT FIELD
HX2CHAR  DS    0H
         TRT   0(0,R14),ZONETBL            translate zone
         STC   R2,0(R0,R15)                and save
         TRT   0(0,R14),NUMTBL             translate numerics
         STC   R2,1(R0,R15)                and save
         LA    R14,1(R0,R14)               point to next input byte
         LA    R15,2(R0,R15)               point to next output byte
         BCT   R13,HX2CHAR                 go do another
         BR    R9                          all done
ZONETBL  DC    16X'F0',16X'F1',16X'F2',16X'F3',16X'F4',16X'F5',16X'F6'
         DC    16X'F7',16X'F8',16X'F9',16X'C1',16X'C2',16X'C3',16X'C4'
         DC    16X'C5',16X'C6'
NUMTBL   DC    16X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*               GET PARTITION ID                                  *
* This routine calculates the familiar 'BG,FN' partition ID from  *
* the partition id key in the partition communications region.    *
*    register usage
*          R1,R4,R5,R6 - work
*          R9       - return
GETPART  DS    0H
         COMRG                             point to COMREG
         USING COMREG,R1                   tell assembler
         LH    R4,PID                      get partition ID key
         SRL   R4,4                        divide by 16
         BCTR  R4,R0                       reduce by 1
         SLL   R4,1                        multiply by two for offset
*                                            into table entry
         DROP  R1                          not needed anymore
         L     R1,X'80'                    pointer to SYSCOM
         USING SYSCOM,R1                   tell assembler
         LH    R5,IJBNPART                 load number of partitions
         DROP  R1                          not needed anymore
         BCTR  R5,R0                       subtract 2
         BCTR  R5,R0
         MH    R5,=H'24'                   multiply by 24
         LA    R6,PARTTAB                  point to start of table
         AR    R6,R5                       add offset into table
         AR    R6,R4                       get partition id
         MVC   PARTID,0(R6)                and save it
         BR    R9                          go back to caller
PARTTAB  DS    0CL264
         DC    CL24'BGF1'
         DC    CL24'BGF2F1'
         DC    CL24'BGF3F2F1'
         DC    CL24'BGF4F3F2F1'
         DC    CL24'BGF5F4F3F2F1'
         DC    CL24'BGF6F5F4F3F2F1'
         DC    CL24'BGF7F6F5F4F3F2F1'
         DC    CL24'BGF8F7F6F5F4F3F2F1'
         DC    CL24'BGF9F8F7F6F5F4F3F2F1'
         DC    CL24'BGFAF9F8F7F6F5F4F3F2F1'
         DC    CL24'BGFBFAF9F8F7F6F5F4F3F2F1'
*               E R R O R S                                       *
ABERROR  DS    0H
         LM    R2,R15,16(R1)               reload our registers
         STC   R0,ABERR                    save abend code
         CLI   ABERR,X'1D'                 maintask terminated ?
         BE    GOHOME                      yes - not our error
         LA    R13,1                       convert
         LA    R14,ABERR                     abend code
         LA    R15,ABENDERR+39                to displayable
         BAL   R9,HX2CHAR                       characters
         MVC   LOG,ABENDERR                move message and
         BAL   R9,PUTCONS                  display it on console
         DETACH                            commit suicide
PCERROR  DS    0H
         LM    R2,R15,16(R1)               reload our regs
         LR    R4,R1                       save savearea address
         LA    R13,2                       convert
         LA    R14,2(,R4)                   program interrupt
         LA    R15,PCMSG+26                 code into something
         BAL   R9,HX2CHAR                   displayable
         L     R4,4(,R4)                   load address of PC
         SR    R4,R3                       subtract base
         ST    R4,OFFSET                   to get offset
         LA    R13,3                       and then
         LA    R14,OFFSET+1                  convert
         LA    R15,PCMSG+45                  this
         BAL   R9,HX2CHAR                    too
         MVC   LOG,PCMSG                   move message
         BAL   R9,PUTCONS                  and display on console
         DETACH                            bye bye
IDERR    DS    0H                          XPCC IDENT error
         MVC   XPCCERR+15(8),=CL8'IDENT'   insert function
         OI    ERRORSW,BOOM                indicate serious error
         B     COMMERR                     common rtns
CONNERR  DS    0H                          XPCC CONNECT error
         MVC   XPCCERR+15(8),=CL8'CONNECT' insert function
         OI    ERRORSW,BOOM                indicate serious error
         B     COMMERR                     common rtns
RECVERR  DS    0H                          XPCC RECEIVE error
         MVC   XPCCERR+15(8),=CL8'RECEIVE' insert function
         B     COMMERR                     common rtns
REPLYERR DS    0H                          XPCC REPLY error
         MVC   XPCCERR+15(8),=CL8'REPLY'   insert function
         B     COMMERR                     common rtns
DISCERR  DS    0H                          XPCC DISCONNECT error
         MVC   XPCCERR+15(8),=CL8'DISCONN' insert function
         B     COMMERR                     common rtns
TERMERR  DS    0H                          XPCC TERMINATE error
         MVC   XPCCERR+15(8),=CL8'TERMIN'  insert function
         B     COMMERR                     common rtns
COMMERR  DS    0H
         MVC   LOG,XPCCERR                 move message
         LA    R13,1                       and convert
         LA    R14,IJBXRETC                  return code
         LA    R15,LOG+44
         BAL   R9,HX2CHAR
         BAL   R9,PUTCONS                  display on console
         XPCC  XPCCB=CFBXPCCB,FUNC=TERMPRG severe connection
         TM    IJBXREAS,IJBXDISC+IJBXABDC  requester choked ?
         BZ    NOCHOKE                     no
         MVC   LOG,CHOKEMSG                he choked so send a
         BAL   R9,PUTCONS                  message to console
NOCHOKE  DS    0H
         TM    ERRORSW,BOOM                should we terminate ?
         BZ    IDENT                       no - go wait again
         MVC   LOG,BOOMMSG                 load message
         MVC   LOG+14(2),PARTID            with partition id
         BAL   R9,PUTCONS                  and display it
         DETACH                            bye bye
WAITERR  DS    0H
         MVC   LOG,WAITERR                 move msg to work area
         BAL   R9,PUTCONS                  display on console
         XPCC  XPCCB=CFBXPCCB,FUNC=TERMPRG severe connection
         DETACH                            terminate
*                  W O R K   A R E A S                            *
ABSAVE   DC    9D'0'
PCSAVE   DC    9D'0'
CONSCCB  CCB   SYSLOG,CONSCCW
CONSCCW  CCW   X'09',LOG,X'20',72
OFFSET   DC    F'0'
BUFPTR   DS    0F
         DC    XL1'80'
BUFADR   DC    XL3'0'
BUFLEN   DC    F'80'
PARTID   DC    CL2' '
ERRORSW  DC    XL1'00'
BOOM     EQU   X'80'
ABERR    DC    XL1'00'
CFBXPCCB XPCCB APPL=CFBXX,TOAPPL=CFBBATCH
LOG      DC    CL72' '
WOP      DC    CL132' '
XTECB    TECB
*                  M E S S A G E S                                *
XPCCERR  DC    CL72'CFBSUB-1  XPCC XXXXXXXX error    IJBXRETC=X''XX''.'
XPCCOK   DC    CL72'CFBSUB-2  XPCC XXXXXXXX successful'
SHUTMSG  DC    CL72'CFBSUB-3  CFB XX shutdown complete'
ABENDERR DC    CL72'CFBSUB-4  Abnormal termination. Code=X''XX''.'
PCMSG    DC    CL72'CFBSUB-5  Program check X''XXXX'' at offset +X''XXXC
               XXX''.'
BOOMMSG  DC    CL72'CFBSUB-6  CFB XX abnormal termination'
CHOKEMSG DC    CL72'CFBSUB-7  Requestor disconnected or terminated abnoC
               rmally'
WAITMSG  DC    CL72'CFBSUB-8  CICS task failed to reply. Connection terC
               minated'
         LTORG
*                  D S E C T S                                    *
WORKAREA DSECT
WORKSAVE DS    CL120
WORKBUF  DS    CL80
WORKRPLY DS    CL80
WFROMECB DS    CL4
WTOECB   DS    CL4
WORKMFG  DS    CL64
@CFBSUB  DS    CL4
LWORK    EQU   *-WORKAREA
         MAPCOMR
SYSCOM   SYSCOM
XPCCBLAY MAPXPCCB
         END   CFBSUB


We shall conclude this article about issuing CEMT commands
from batch under VSE next month.

Michael P Kilroy
Systems Programming Supervisor
Progress Lighting Inc (USA)

