CICS print function

Despite being a useful feature, the CICS print function can be
rather nasty, mainly when a 3286 printer has to be shared by CICS
and RSCS.  First, there is the problem of no separator page being
printed by CICS.  Secondly, CICS will not decode the 327x data
string, so the printed-out screen image may be quite different,
particularly if the screen contains a map with empty fields (ie
binary zeros).

To get around this problem, we have written the following two
small CICS command-level programs:

%   DFHPRK - to replace the IBM-supplied phase invoked by
    transaction CSPK.  The program works as a recursive
    transaction which on phase one reads the screen buffer and
    calls program SUEDS to decode the data string (terminal
    buffer).  On phase two it prints out the separator page and the
    'real' screen image.
%   SUEDS - called by DFHPRK.  It decodes the screen buffer.
    Although it does not handle extended colour terminals, this
    could be coded at label TIDEUP.

The programs were written for CICS 1.5 and VSE/SP 2.6 under
VM/SP Release 5.  Two other subroutines will be found in the
program: SSLPA obtains the name of the printer assigned to the
terminal (if any) and REVJJL transforms the Julian date into the
Gregorian date.  I have assumed that all CICS users have these or
similar subroutines already.  If not, the code for these calls may
simply be removed.


DFHPRK SOURCE CODE

DFHPRK   DFHEIENT DATAREG=(8,9,10)
         EXEC  CICS HANDLE CONDITION                                   X
               ERROR(SUPRT999)                                         X
               IOERR(SUPRT999)                                         X
               ENDDATA(SUPRT010)
         EXEC  CICS RETRIEVE SET(R6) LENGTH(WLENGTH)
         B     SUPRT500                * GO TO PRINT BUFFER.
****            PHASE 1                                             *
SUPRT010 LA    R0,WSHAREDA             * FILL USER AREA WITH SPACES
         LH    R1,WSHAREDL             * .
         XR    R14,R14                 * .
         XR    R15,R15                 * .
         ICM   R15,B'1000',=X'40'      * .
         MVCL  R0,R14                  * DO IT.
         XC    PRINTER,PRINTER         * CLEAR PRINTER ID.
         EXEC CICS LINK                                                X
               PROGRAM('SSLPA')                                        X
               COMMAREA(PRINTER)                                       X
               LENGTH(PRINTERL)                                        X
               NOHANDLE
         CLC   PRINTER,NOPRINT         * IS THERE A PRINTER?
         BE    SUPRT999                * NO. FORGET IT.
         LA    R7,WSCRBUFL             * SET LENGTH.
         STH   R7,WLENGTH              * STORE LENGTH
         EXEC  CICS RECEIVE                                            X
               INTO(WSCRBUF)                                           X
               MAXLENGTH(WLENGTH)                                      X
               BUFFER NOHANDLE
         EXEC  CICS LINK                                               X
               PROGRAM('SUEDS')                                        X
               COMMAREA(WSCRBUF)                                       X
               LENGTH(EDITL)                                           X
               NOHANDLE
         EXEC  CICS ASSIGN OPID(WOPID)
         MVC   TERMID,EIBTRMID         * TERMID FOR SEPARATOR
         LH    R7,WSHAREDL             * LENGTH OF WHOLE SHARED AREA
         STH   R7,WLENGTH              * SET LENGTH FOR START TRANS
         EXEC  CICS START                                              X
               TRANSID('CSPK')                                         X
               FROM(WSHAREDA)                                          X
               LENGTH(WLENGTH)                                         X
               TERMID(PRINTER)
         EXEC  CICS SEND CONTROL FREEKB ALARM
         EXEC  CICS RETURN
****           PHASE 2                                              *
SUPRT500 LA    R4,WSHAREDA             * ADDRESS OF SHARED AREA
         LH    R5,WLENGTH              * LENGTH SET UP BY RETRIEVE.
         LR    R7,R5                   *
         MVCL  R4,R6                   * RESTORE DYN AREA
         EXEC  CICS SEND TEXT                                          X
               FROM(LINECICS)                                          X
               LENGTH(LINECICL) ERASE PRINT NLEOM
         MVC   WLINE(WLINESL),WLINES
         MVC   WDATEJ,EIBDATE+1
         LA    R13,SAVEAREA                  * SAVEAREA FOR REVJUL
         L     R15,=V(REVJUL)                * HARD CODED CALL TO
         LA    R1,WDATEG                     * MAINTAIN REENTRANCY
         ST    R1,WDATEGA                    *
         OI    WDATEGA,X'80'                 *
         LA    R1,WDATEJ                     *
         ST    R1,WDATEJA                    *
         LA    R1,WDATEJA                    *
         BALR  R14,R15                       * CALL REVJUL
         UNPK  WLDATE(6),WDATEG              * UNPACK RESULT
         OI    WLDATE+5,X'F0'                * FIX UP SIGN
         ICM   R14,B'1111',WLDATE+2          * LOAD FOR MOVE
         STCM  R14,B'1100',WLDATE+3          * STORE MM
         STCM  R14,B'0011',WLDATE+6          * STORE DD
         MVI   WLDATE+2,C'/'                 * BEAUTIFY WITH SLASH
         MVI   WLDATE+5,C'/'                 * DO IT AGAIN
         MVC   WLTIME,=X'402120204B20204B2020' MASK FOR TIME EDITION
         ED    WLTIME(10),EIBTIME            * EDIT TIME
         MVC   WLTERMID,TERMID               * MOVE TERMID
         MVC   WLOPERID,WOPID                * MOVE OPERATOR IDENT.
         LH    R7,=AL2(WLINESL)
         STH   R7,WLENGTH
         EXEC  CICS SEND TEXT                                          X
               FROM(WLINE)                                             X
               LENGTH(WLENGTH) ERASE PRINT NLEOM
         EXEC  CICS SEND TEXT                                          X
               FROM(LINECICS)                                          X
               LENGTH(LINECICL) ERASE PRINT NLEOM
         MVI   WCC,FORMFEED
         MVI   WCC+1,ENDMSG
         LA    R7,2
         STH   R7,WLENGTH
         EXEC  CICS SEND TEXT                                          X
               FROM(WLINE)                                             X
               LENGTH(WLENGTH) ERASE PRINT NLEOM
         LA    R15,BUFFOUT
         USING OUTLINE,R15
         MVI   OUTCC,NEWLINE
         MVI   OUTAST1,C'*'
         MVI   OUTAST2,C'*'
         MVC   OUTDATA,=80C'*'
         LA    R15,BUFFOUT+83
         LA    R5,WSCRBUF
         LA    R4,24
LOOP1    MVI   OUTCC,NEWLINE
         MVI   OUTAST1,C'*'
         MVI   OUTAST2,C'*'
         MVC   OUTDATA,0(R5)
         LA    R5,80(R5)
         LA    R15,83(R15)
         BCT   R4,LOOP1
         MVI   OUTCC,NEWLINE
         MVI   OUTAST1,C'*'
         MVI   OUTAST2,C'*'
         MVC   OUTDATA,=80C'*'
         DROP  R15
         EXEC  CICS SEND TEXT                                          X
               FROM(BUFFOUT)                                           X
               LENGTH(DATALEN) ERASE PRINT NLEOM
         MVI   WCC,FORMFEED
         MVI   WCC+1,ENDMSG
         LA    R7,2
         STH   R7,WLENGTH
         EXEC  CICS SEND TEXT                                          X
               FROM(WLINE)                                             X
               LENGTH(WLENGTH) ERASE PRINT NLEOM
SUPRT999 EXEC  CICS RETURN
****     CONSTANTS
WLINES   EQU   *
WLINE1   EQU   *
         DC    X'15'
         DC    CL18'TRANSACTION ''PA1'' '
         DC    X'15'
         DC    CL19'DATE:..........   '
         DC    CL8' '
         DC    X'15'
         DC    CL17'TIME:..........   '
         DC    CL10' '
         DC    X'15'
         DC    CL18'OPERATOR ID:....  '
         DC    CL3' '
         DC    X'15'
         DC    CL19'TERMINAL ID:....  '
         DC    CL4' '
WLINESL  EQU   *-WLINES
NEWLINE  EQU   X'15'                   NEW LINE INDICATOR
ENDMSG   EQU   X'19'                   END OF MESSAGE INDICATOR
FORMFEED EQU   X'0C'                   FORM FEED INDICATOR
NOPRINT  DC    H'0'                    NO PRINTER AVAILABLE
PRINTERL DC    H'4'
LINECICS DC    119C'*',X'19'
LINECICL DC    H'120'
EDITL    DC    H'2564'
DATALEN  DC    AL2(BUFFOUTL)
WSHAREDL DC    AL2(ENDSHRDA-WSHAREDA)
****     DYNAMIC STORAGE
DFHEISTG DSECT
WSHAREDA EQU   *
SAVEAREA DS    18F
WOPID    DS    CL3
WDATEJA  DS    D
         ORG   WDATEJA+4
WDATEGA  DS    F
         ORG   ,
WDATEJ   DS    PL3
WDATEG   DS    PL4
WLENGTH  DS    H
WSAVE14  DS    F
PRINTER  DS    F
TERMID   DS    F
WLINE    DS    0C
WCC      DS    CL37
WLDATE   DS    XL8
         DS    CL18
WLTIME   DS    XL10
         DS    CL20
WLOPERID DS    CL03
         DS    CL19
WLTERMID DS    CL04
         DS    CL4
WSCRBUF  DS    2560C                   * BUFFER FOR RECEIVE
WSCRBUFL EQU   *-WSCRBUF
         DS    F                   * USED BY SUEDS ROUTINE AS END MARK.
BUFFOUT  DS    26CL83
BUFFOUTL EQU   *-BUFFOUT
ENDSHRDA EQU   *
OUTLINE  DSECT
         DS    0CL83
OUTCC    DS    X
OUTAST1  DS    X
OUTDATA  DS    CL80
OUTAST2  DS    X
         END   DFHPRK


SUEDS SOURCE CODE

SUEDS    DFHEIENT CODEREG=10
         LA    R0,WEDITED              CLEAR AREA FOR EDITION
         L     R1,WEDITLEN
         XR    R14,R14
         XR    R15,R15
         ICM   R15,B'1000',=X'40'      * FILL IT WITH BLANKS
         MVCL  R0,R14
         LH    R1,EIBCALEN
         L     R4,DFHEICAP
         LA    R4,0(R4)                * FORCE BYTE 1 TO ZEROS
         LA    R4,0(R1,R4)             * END OF COMMAREA + 1
         SH    R4,=H'4'                * LAST 4 BYTES OF COMMAREA
         MVC   0(4,R4),OBSTACLE        * MAKE SURE TRT WON'T OVERFLOW
         ST    R4,STOP                 * KEEP ADDRESS FOR TEST LATER ON.
         L     R4,DFHEICAP             * COMMAREA ADDRESS
         LA    R4,0(R4)                * FORCE BYTE 1 TO ZEROS
         LR    R1,R4                   *
         CLI   0(R1),X'11'             * IS IT SBA?
         BE    FIRST
         XR    R8,R8                   * ASSUME OFFSET X'00'
         B     FIRSTAT                 * SKIP OFFSET CALCULATION
FIRST    LA    R1,1(,R1)               * SKIP SBA
         BAL   R14,WORKOUTP            * DECODE SBA.
FIRSTAT  LA    R15,LOOP                * ADDRESS FOR BRANCH
         L     R3,=F'-1'               * ALLOW FOR A LOT OF LOOPS.
LOOP     XR    R5,R5                   * ZEROISE ELEMENT LENGTH
         BAL   R14,LOCATE              * LOCATE NEXT ELEMENT.
         C     R1,STOP                 * REACHED END???
         BL    NOTLAST                 * NO. KEEP GOING.
         LA    R15,ENDLOOP             * MAKE THIS ONE THE LAST MOVE.
NOTLAST  LR    R6,R4                   * ADDRESS TO MOVE FROM.
         LR    R7,R5                   * # OF TIMES TO BCT
         CLI   0(R6),X'11'             * IS IT SBA
         BNE   DONTADJ                 * NO. DO NOT ADJ LENGTH.
         LA    R6,3(R6)                * SUPPRESS SBA
         SH    R7,=H'3'                * ADJUST LENGTH.
DONTADJ  LA    R9,WEDITED              * BUFFER2 ADDRESS
         LA    R8,0(R8,R9)             * ADDRESS TO MOVE TO.
         BAL   R14,TIDEUP              * REMOVE ATTRIBUTES AND MOVE.
         LA    R4,0(R5,R4)             * NEW ELEMENT ADDRESS
         LA    R1,1(,R4)               * SKIP X'11'.
         BAL   R14,WORKOUTP            * DECODE SBA.
         BCTR  R3,R15                  * LOOP
ENDLOOP  L     R4,DFHEICAP             * POINT TO COMMAREA
         LH    R5,EIBCALEN             * COMMAREA LENGTH
         LA    R6,WEDITED              * EDITED BUFFER
         LA    R7,1920                 * LENGTH OF EDITED BUFFER
         ICM   R7,B'1000',=X'40'       * PAD IT WITH BLANKS
         MVCL  R4,R6                   * RETURN EDITED BUFFER
SUEDS999 EXEC  CICS RETURN
LOCATE   ST    R14,$BAL1SAV            * SAVE RETURN
LOOKFOR  TRT   0(256,R1),SBATAB        * POSITION ON THE NEXT X'11'
         BZ    TRYNEXT                 * THIS IS A CHUNK > 256 BYTES.
         LR    R5,R1                   * NEXT ELEMENT BEGINNING
         SR    R5,R4                   * R5= ELEMENT'S LENGTH
         L     R14,$BAL1SAV            * LOAD RETURN ADDRESS
         BR    R14
TRYNEXT  LA    R1,256(,R1)             * TRANSLATE NEXT CHUNK
         B     LOOKFOR                 * CONTINUE
WORKOUTP ST    R14,$BAL1SAV
         SR    R8,R8                   * ZEROISE
         SR    R9,R9                   * ZEROISE
         IC    R8,0(R1)                * INSERT FIRST BYTE
         IC    R9,1(R1)                * INSERT SECOND BYTE
         N     R8,=XL4'3F'             * ONLY SIX BITS ARE GOOD
         N     R9,=XL4'3F'             * ONLY SIX BITS ARE GOOD
         SLA   R8,6                    * SHIFT FIRST ELEMENT 6 BITS
         OR    R8,R9                   * R8 = OFFSET FOR MOVE
         L     R14,$BALISAV
         BR    R14
TIDEUP   STM   R0,R15,SAVEALL          * NOT TO UPSET PREVIOUS ROUTINE
TIDEUP01 CLI   0(R6),X'13'             * IS IT THE CURSOR?
         BE    TIDEUP90                * YES.
         CLI   0(R6),X'1D'             * IS IT START FIELD?
         BNE   TIDEUP30                * NO
         LA    R6,1(R6)                * SKIP START FIELD.
         BCT   R7,TIDEUP40
TIDEUP30 MVC   0(1,R8),0(R6)           * MOVE IT.
         CLI   0(R8),X'00'             * BINARY ZEROS?
         BNE   TIDEUP40                * NO
         OI    0(R8),X'40'             * MAKE IT A BLANK.
TIDEUP40 LA    R8,1(R8)                * NEXT TO MOVE TO.
TIDEUP90 LA    R6,1(R6)                * NEXT TO MOVE FROM.
         BCT   R7,TIDEUP01             *
         LM    R0,R15,SAVEALL
         BR    R14
         LTORG
         DS    0F
WEDITLEN DC    AL4(WEDITEDL)
OBSTACLE DC    XL4'11111111'           * BUFFER END MARK
SBATAB   EQU   *                       * TRANSLATION TABLE
         DC    17X'00'
         DC    X'FF'                   * STOPS ONLY ON X'11'
         DC    (256-(*-SBATAB))X'00'
SBATABL  EQU   *-SBATAB
****     DYNAMIC STORAGE
DFHEISTG DSECT
WOPERID  DS    CL3
SAVEALL  DS    16F
STOP     DS    F
$BAL1SAV DS    F
WEDITED  DS    CL2560                  * EDITED BUFFER
WEDITEDL EQU   *-WEDITED
         END   SUEDS


Nivaldo Moura
Comms Systems Programmer
St George Building Society Pty (Australia) ) Xephon 1989

