CICS security - part 1

The purpose of this series of articles on CICS security is to list
a set of programs which provide the basic facilities that are
normally required from a CICS security system, and which are
currently unavailable to the CICS system without buying
external security software.  The program code provided works
on CICS 1.7 systems, but is influenced by previous CICS
systems.  For example, the TCT security fields are filled in for
compatibility with programs written under CICS 1.5, the extra
security and resource level keys included in 1.7 are not used,
and the password is 4 bytes long (a throwback to earlier
versions of CICS).  This last restriction is however easily
altered, although the password encryption routines would either
need to be altered or omitted.  Alterations for other releases of
CICS (for example pre-1.7 versions should remove references
to the SNNT) should not present too much of a problem.
Additionally, the techniques used will be highlighted, so that
installations with their own code already in place should be
able to insert any extra facilities themselves.

It should be understood that these programs do not replace the
CICS-supplied program which actually handles CICS security.
The DFHSNP program which validates the sign on is replaced,
as is the sign on table (DFHSNT), but the security handler
DFHXSP continues to handle all security functions except sign
on (including sign off).  These programs merely provide the
user interface.

The programs are written in macro level, but should present no
trouble in being converted to command level.  One reason they
are written in macro level is that they were originally written
for versions of CICS available before IBM issued its threat to
withdraw macro level.  The second reason is that one of the
programs uses CICS code undocumented in either the macro-
level or command-level Programmer's Reference manuals.
The author managed to discover how to write the code in
macro level before finding the command-level description.
Details will be found in part 3.

There are five programs.  The first is a sign-on code creation
program, which writes the sign on information to a VSAM
KSDS file.  This program will be presented in part 2 of this
article.  The next program writes the sign-on panel, and passes
control to a third program.  This third program validates the
sign-on code and password, and then sets up security keys etc
(described in part 3).  A fourth program can be used by
authorized personnel to create a message which will be
displayed on the sign-on panel, while the fifth program releases
terminals which are denied access to CICS due to excessive
failed sign on attempts (also described in part 3).

The main features of the system are as follows:

1      Creation, deletion, and alteration of sign-on codes is on-
      line.  Real user names can be entered and there is a generic
      scan facility to enable identification of a user by any part
      of his name.

2      Users are able, and after a certain time period are forced,
      to change their passwords on-line.  This is currently hard
      coded to 90 days, with a count-down period of 30 days.
      The user is not permitted to change his password to any
      recently used one, and may only make one change per day
      (to prevent multiple changes in order to bypass the 'recent'
      password check).

3      There is an unattended terminal time out period of 30
      minutes (easily altered to suit installation standards).

4      There is an 'anti-guessing' feature, which prevents a
      terminal from being used after too many (currently set at
      five) failed sign on attempts.  The user is warned when he
      has only one more attempt left.

5      This implementation provides a bypass of the GENER/OL
      security system, on the basis that if a user has already
      signed on to CICS he should not need to sign on separately
      to GENER/OL.

6      Information on the user's actual use of the system is
      displayed, such as when he last used the system and when
      he last changed his password.  This can be useful in
      identifying redundant sign-on codes.

7      There is a facility for providing a nine-line message on the
      user's sign-on screen.  The message is held on a small
      VSAM file to ensure that it survives CICS shutdowns.

8      To assist in problem determination, the sign-on panel also
      displays the terminal's four-byte terminal identifier, and
      the CICS system's VTAM application name.

Before going on to the security programs themselves, it is
necessary to discuss a macro which is used extensively
throughout these programs, and which can be used by any
CICS Assembler program to create native mode 3270 data
streams.

Because native mode 3270 data streams are somewhat difficult
to handle, BMS is generally used to create maps enabling
simple handling of screen I/O.  However, native mode
processing is faster, and does not require the use of a separate
user generated CSECT to process screen handling.  Because
native mode processing is simple for screen output, but
difficult for a screen comprising multiple input fields, it is ideal
for displaying messages such as error messages onto screens
which have been created using a map.  It should be noted that
the use of native mode 3270 data streams does not interfere
with any successive BMS input mapping commands.

This macro, called SCFMT, has been written to create the data
streams without constant reference to manuals or handbooks to
establish the correct bit streams.  Understanding the use of
these data streams is necessary to make general use of the
macro, so a brief description of the basics follows.

There are two main control sequences, known as 'buffer
control orders', within 3270 data streams: the Start Field (SF)
and the Set Buffer Address (SBA).  The SF order code is
followed by the attribute byte, which primarily specifies
display intensity, field protection, and whether the Modified
Data Tag (MDT) is set on or not.  The MDT is normally set on
when a screen input field is altered, but can be set on by the
program, to force input of the field regardless of whether it has
been changed.  The SBA order code is followed simply by the
address on the screen at which you want the next field to be
placed.  Note that only the attribute byte and the field or data
will actually take up space on the screen, while the full data
stream (orders plus data) will be transmitted over the network.
Therefore, to avoid causing unnecessary network bottlenecks,
programmers should be careful to avoid transmitting redundant
orders and addresses.

Which order you place first may or may not be important.  So,
for example, if you have several heading lines, all of which
you wish to display in the same intensity and have them
protected from being overwritten, you could specify one SF
followed by the appropriate attribute byte, then several SBA
orders, each followed by the text you wish to display on the
screen.  Some programmers appear to believe that each SBA
must have an associated SF order (and vice versa), which is not
the case.  Consider the situation where you have a field of one
byte in length, with two order codes (SF and SBA) each using
one byte, an attribute byte using one byte, and a buffer address
using two bytes.  You may find that you are transmitting six
bytes through the network to display one on the screen, ie SBA
(1 byte), buffer address (2 bytes), SF (1 byte), attribute (1
byte), and the 1-byte data field.  Suppose you require a screen
display with several consecutive unprotected fields all
separated by one byte; you would only require the use of the
attribute byte to perform the separation (since the attribute byte
takes up one byte position on the screen, and is displayed as
blank).  There is a software package available on the market,
sold by a very well known software supplier, which has been
written by a programmer who did not apparently know this,
with the result that, although most of the screen consists of
fields separated by one space, an SBA and buffer address are
also generated unnecessarily for each of those fields.  If you
multiply those three extra bytes by the number of fields on the
screen, you discover that your network is having to handle vast
amounts of redundant data, which will have a significant effect
on remote terminals in particular.  In this particular example, a
screen buffer in excess of 3.5K was required to fill a 3270
screen (which can display a maximum of 1920 bytes of data).

The macro (SCFMT) will also generate two other major order
codes: the Insert Cursor (IC) and the Repeat To Address (RA).
IC will insert the cursor at the point at which it is specified.
RA uses a second address, and will repeat a specified character
up to that address.  Users of CICS 1.5 should note that, at one
PTF level of this software, the terminal would lock up if the
Insert Cursor command was specified anywhere but the end of
the data stream.  This problem was reported to IBM and fixed
at later levels, but required a short-term circumvention which
consisted of a second screen write consisting of the SBA,
address, and IC command.

The example below is written in command-level, although
macro-level has been used for much of the sign-on system.
Refer to the DFHTC macros in the sign-on programs for
examples of how to use SCFMT in macro level, although you
should be able to convert the example easily enough.

The format of the macro is as follows:

      name SCFMT parameter-1,parameter-2...parameter-10

1      name - This is a name given to the first field generated by
      the first parameter specified.  This will usually be used for
      variable output fields, because native mode processing is
       messy for all but a small number of input fields.  The name
      can only be used for addressing purposes, as it is set up as
      a character with a length of zero.  To use the name field,
      the first parameter must be specified as 'C' or 'X', in other
      words a character or hexadecimal field.

2      parameter-n - Up to 10 parameters may be entered, which
      may take the format of a normal Assembler DS or DC, for
      example:

      FLD1 SCFMT CL5
      FLD2 SCFMT C'ENTER INPUT:'
      FLD3 SCFMT XL7'00'

      Or the following buffer control commands:

      o      Set Buffer Address (SBA)
      o      Start Field (SF)
      o      Insert Cursor (IC)
      o      Repeat To Address (RA).

      Or a screen address in the format (r,c) where r is the row
      number and c is the column number, for example:

      SCFMT SBA,(2,10)

      which specifies that the following field will start at row 2,
      column 10 on the screen.

      Or an attribute specification as follows:

      o      1st character V (variable field, ie user can enter data)
            or P (protected field).

      o      Characters 2-3: RHI (high intensity), REG (regular
            intensity), OFF (non-display).

      o      5th character (optional): O (MDT to be set on).


EXAMPLE

SCREEN1  DS 0C ** line 1 **
         SCFMT SF,PRHI,SBA,(4,36),C'HEADING LINE*'
         SCFMT SBA,(5,36),RA,(5,49),C'-'
         SCFMT SBA,(7,20),SF,PREG,C'ENTER NAME:',SF,VREG,IC
NAME     SCFMT XL15'00',SF,PREG
SCSIZE   EQU   *-SCREEN1

Line 1 defines the name of the screen definition (although
SCREEN1 could have been defined as the name field of the
first SCFMT macro command with identical results).  Line 2
sets an attribute byte at position 1,1 on the screen, which will
display all fields defined until the next attribute byte as
protected and high intensity.  Finally, the heading is displayed
at row 4, column 36 on the screen.  Line 3 uses the repeat to
address command to underline the previous heading (using
hyphens).  Line 4 establishes the position of the variable field,
and inserts the cursor (note that VREG is specified to enable
data to be entered - at regular intensity).  Line 5 sets up the
variable field (NAME would only be used to initialize the field,
not to receive input), and causes the cursor to skip to the next
unprotected field (in this case itself).  The last line is used to
establish the size of the screen buffer required.

Note that the heading line will start at row 4, column 36, while
the ENTER NAME line will actually start at row 7, column 21,
because the attribute byte takes up the space at the specified
address (row 7, column 20).

The following command-level code would write and read the
above screen definition:

         LA    1,SCSIZE
         STH   1,LEN
         EXEC CICS GETMAIN SET(5) LENGTH(LEN) INITIMG(ZERO)
         MVC   OUTBUF(SCSIZE),SCREEN1
         EXEC CICS SEND FROM(OUTBUF) LENGTH(LEN) WAIT ERASE
         EXEC CICS RECEIVE SET(5) LENGTH(LEN)

Notes:

o      LEN is a halfword in the TWA.

o      OUTBUF is an area in the TWA large enough to take the
      largest screen buffer to be used in the program.

o      ZERO is a one-byte field defined as hexadecimal zero, and
      is used to initialize the screen buffer.

Note in particular that the above example always uses nulls to
initialize fields and the screen buffer.  This is because CICS
does not transmit nulls, whereas it does transmit blanks.  A
blank would therefore be a redundant byte for transmission
purposes.

A final point on the subject of native mode processing: the
above example reads a field in after displaying the screen.  The
input data stream will consist of an SBA byte, followed by the
address of the input field, followed by the field itself.  Because
native mode processing is suited to simple screen handling, it is
best used to write error messages, and perhaps to read in one or
two fields.  The extra three bytes should therefore be taken into
consideration when processing the input field.  Finally,
remember that, if a number of input fields are to be read using
native mode 3270 data streams, the input stream will consist of
the SBA and address sequence of only those fields which have
the MDT set on.  It is therefore not possible to assume that a
field will be in a particular place in the input stream, unless all
MDTs are set on.


SCFMT MACRO

&FNAME   SCFMT &A,&B,&C,&D,&E,&F,&G,&H,&I,&J
         LCLC  &B1
         LCLC  &B2
         LCLC  &C1
         LCLA  &A1
         LCLA  &A2
         LCLA  &A3
         LCLA  &L
&A3      SETA  0
         AIF   ('&A' EQ '').MCEND
         AIF   ('&A'(1,1) EQ 'C').L1
         AIF   ('&A'(1,1) NE 'X').L2
.L1      ANOP
&FNAME   DS    0C
.L2      ANOP
         AIF   ('&A(2)' EQ '').LAB1
&A1      SETA  &A(1)-1
&A2      SETA  &A(2)-1
         AGO   .ADDR
.LAB1    ANOP
         AIF   ('&A'(1,1) EQ 'C').LAB2
         AIF   ('&A'(1,1) NE 'X').LAB3
.LAB2    ANOP
         DC    &A
         AGO   .NEXT
.LAB3    ANOP
&C1      SETC  '&A'
.LAB4    ANOP
         AIF   ('&C1' EQ 'PREGO').PREGO
         AIF   ('&C1' EQ 'POFFO').POFFO
         AIF   ('&C1' EQ 'PRHIO').PRHIO
         AIF   ('&C1' EQ 'VREG').VREG
         AIF   ('&C1' EQ 'VOFF').VOFF
         AIF   ('&C1' EQ 'VRHI').VRHI
         AIF   ('&C1' EQ 'PREG').PREG
         AIF   ('&C1' EQ 'POFF').POFF
         AIF   ('&C1' EQ 'PRHI').PRHI
         AIF   ('&C1' EQ 'SBA').SBA
         AIF   ('&C1' EQ 'SF').SF
         AIF   ('&C1' EQ 'IC').IC
         AIF   ('&C1' EQ 'RA').RA
         AIF   ('&C1' EQ 'KBR').KBR
         AIF   ('&C1' EQ 'KB').KB
         AGO   .ERR
.PREGO   ANOP
         DC    X'F1'                   PROTECTED, REGULAR, MDT ON
         AGO   .NEXT
.POFFO   ANOP
         DC    X'F5'                   PROTECTED OFF, MDT ON
         AGO   .NEXT
.PRHIO   ANOP
         DC    X'F9'                   PROTECTED HIGH, MDT ON
         AGO   .NEXT
.VREG    ANOP
         DC    X'C1'                   VARIABLE, REGULAR INTENSITY
         AGO   .NEXT
.VOFF    ANOP
         DC    X'4D'                   VARIABLE, OFF INTENSITY
         AGO   .NEXT
.VRHI    ANOP
         DC    X'C9'                   VARIABLE, HIGH INTENSITY
         AGO   .NEXT
.PREG    ANOP
         DC    X'F0'                   PROTECTED, REGULAR INTENSITY
         AGO   .NEXT
.POFF    ANOP
         DC    X'F4'                   PROTECTED, OFF INTENSITY
         AGO   .NEXT
.PRHI    ANOP
         DC    X'F8'                   PROTECTED, HIGH INTENSITY
         AGO   .NEXT
.SBA     ANOP
         DC    X'11'                   SET BUFFER ADDRESS
         AGO   .NEXT
.SF      ANOP
         DC    X'1D'                   START FIELD
         AGO   .NEXT
.IC      ANOP
         DC    X'13'                   INSERT CURSOR
         AGO   .NEXT
.RA      ANOP
         DC    X'3C'                   REPEAT TO ADDRESS
         AGO   .NEXT
.KBR     ANOP
         DC    X'C3'                   WCC = RESET KEYBOARD, MDTS
         AGO   .NEXT
.KB      ANOP
         DC    X'C2'                   WCC = RESET KEYBOARD
.NEXT    ANOP
&A3      SETA  &A3+1
         AIF   (&A3 EQ 1).N1
         AIF   (&A3 EQ 2).N2
         AIF   (&A3 EQ 3).N3
         AIF   (&A3 EQ 4).N4
         AIF   (&A3 EQ 5).N5
         AIF   (&A3 EQ 6).N6
         AIF   (&A3 EQ 7).N7
         AIF   (&A3 EQ 8).N8
         AIF   (&A3 EQ 9).N9
         AGO   MCEND
.N1      ANOP
         AIF   ('&B' EQ '').MCEND
         AIF   ('&B(2)' EQ '').N1C
&A1      SETA  &B(1)-1
&A2      SETA  &B(2)-1
         AGO   .ADDR
.N1C     ANOP
         AIF   ('&B'(1,1) EQ 'C').N1F
         AIF   ('&B'(1,1) EQ 'X').N1F
&C1      SETC  '&B'
         AGO   .LAB4
.N1F     ANOP
         DC    &B
         AGO   .NEXT
.N2      ANOP
         AIF   ('&C' EQ '').MCEND
         AIF   ('&C(2)' EQ '').N2C
&A1      SETA  &C(1)-1
&A2      SETA  &C(2)-1
         AGO   .ADDR
.N2C     ANOP
         AIF   ('&C'(1,1) EQ 'C').N2F
         AIF   ('&C'(1,1) EQ 'X').N2F
&C1      SETC  '&C'
         AGO   .LAB4
.N2F     ANOP
         DC    &C
         AGO   .NEXT
.N3      ANOP
         AIF   ('&D' EQ '').MCEND
         AIF   ('&D(2)' EQ '').N3C
&A1      SETA  &D(1)-1
&A2      SETA  &D(2)-1
         AGO   .ADDR
.N3C     ANOP
         AIF   ('&D'(1,1) EQ 'C').N3F
         AIF   ('&D'(1,1) EQ 'X').N3F
&C1      SETC  '&D'
         AGO   .LAB4
.N3F     ANOP
         DC    &D
         AGO   .NEXT
.N4      ANOP
         AIF   ('&E' EQ '').MCEND
         AIF   ('&E(2)' EQ '').N4C
&A1      SETA  &E(1)-1
&A2      SETA  &E(2)-1
         AGO   .ADDR
.N4C     ANOP
         AIF   ('&E'(1,1) EQ 'C').N4F
         AIF   ('&E'(1,1) EQ 'X').N4F
&C1      SETC  '&E'
         AGO   .LAB4
.N4F     ANOP
         DC    &E
         AGO   .NEXT
.N5      ANOP
         AIF   ('&F' EQ '').MCEND
         AIF   ('&F(2)' EQ '').N5C
&A1      SETA  &F(1)-1
&A2      SETA  &F(2)-1
         AGO   .ADDR
.N5C     ANOP
         AIF   ('&F'(1,1) EQ 'C').N5F
         AIF   ('&F'(1,1) EQ 'X').N5F
&C1      SETC  '&F'
         AGO   .LAB4
.N5F     ANOP
         DC    &F
         AGO   .NEXT
.N6      ANOP
         AIF   ('&G' EQ '').MCEND
         AIF   ('&G(2)' EQ '').N6C
&A1      SETA  &G(1)-1
&A2      SETA  &G(2)-1
         AGO   .ADDR
.N6C     ANOP
         AIF   ('&G'(1,1) EQ 'C').N6F
         AIF   ('&G'(1,1) EQ 'X').N6F
&C1      SETC  '&G'
         AGO   .LAB4
.N6F     ANOP
         DC    &G
         AGO   .NEXT
.N7      ANOP
         AIF   ('&H' EQ '').MCEND
         AIF   ('&H(2)' EQ '').N7C
&A1      SETA  &H(1)-1
&A2      SETA  &H(2)-1
         AGO   .ADDR
.N7C     ANOP
         AIF   ('&H'(1,1) EQ 'C').N7F
         AIF   ('&H'(1,1) EQ 'X').N7F
&C1      SETC  '&H'
         AGO   .LAB4
.N7F     ANOP
         DC    &H
         AGO   .NEXT
.N8      ANOP
         AIF   ('&I' EQ '').MCEND
         AIF   ('&I(2)' EQ '').N8C
&A1      SETA  &I(1)-1
&A2      SETA  &I(2)-1
         AGO   .ADDR
.N8C     ANOP
         AIF   ('&I'(1,1) EQ 'C').N8F
         AIF   ('&I'(1,1) EQ 'X').N8F
&C1      SETC  '&I'
         AGO   .LAB4
.N8F     ANOP
         DC    &I
         AGO   .NEXT
.N9      ANOP
         AIF   ('&J' EQ '').MCEND
         AIF   ('&J(2)' EQ '').N9C
&A1      SETA  &J(1)-1
&A2      SETA  &J(2)-1
         AGO   .ADDR
.N9C     ANOP
         AIF   ('&J'(1,1) EQ 'C').N9F
         AIF   ('&J'(1,1) EQ 'X').N9F
&C1      SETC  '&J'
         AGO   .LAB4
.N9F     ANOP
         DC    &J
         AGO   .NEXT
.ADDR    ANOP
&A1      SETA  (&A1*80)+&A2
         AIF   (&A1 LT 64).ADD1
         AIF   (&A1 LT 640).ADD2
         AIF   (&A1 LT 1088).ADD1
         AIF   (&A1 LT 1664).ADD2
         AIF   (&A1 GT 1919).ERR
.ADD1    ANOP
&B1      SETC  '0'
         AGO   .ADDR2
.ADD2    ANOP
&B1      SETC  '1'
.ADDR2   ANOP
&A2      SETA  &A1
         AIF   (&A2 EQ 0).ADD3
         AIF   (&A2 LT 10).ADD4
&A2      SETA  &A2-10
.ADDR3   ANOP
         AIF   (&A2 LT 7).ADD3
         AIF   (&A2 LT 16).ADD4
         AIF   (&A2 LT 24).ADD3
         AIF   (&A2 LT 32).ADD4
         AIF   (&A2 LT 38).ADD3
         AIF   (&A2 LT 48).ADD4
         AIF   (&A2 LT 55).ADD3
         AIF   (&A2 LT 64).ADD4
&A2      SETA  &A2-64
         AGO   .ADDR3
.ADD3    ANOP
&B2      SETC  '0'
         AGO   .ADDR4
.ADD4    ANOP
&B2      SETC  '1'
.ADDR4   ANOP
         DC    AL2(&A1+&A1/64*192+16448+&B1*32768+&B2*128)
         AGO   .NEXT
.ERR     ANOP
         MNOTE ,'PARAMETER ERROR'
.MCEND   ANOP


Robin Lynch
Software Support Manager (UK)                  c Xephon/Reserved 1991

