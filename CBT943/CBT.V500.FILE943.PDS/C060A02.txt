A CICS sort utility program

This utility program provides CICS applications with the ability
to perform a sort operation, a function which cannot be
explicitly performed through CICS commands.

A 'quick-sort' algorithm is used to carry out the sorting
process.  The main factor in measuring sort algorithms is the
number of comparisons needed to perform the sort.  This
number determines directly the number of units of time to
accomplish the sort.  The traditional 'bubble' sort requires
about n*(n-1)/2 comparisons and thus should take a time
roughly proportional to n2, while the algorithm used in this
program requires about log2n comparisons, where n is the
number of records to be sorted.

The input to this program is a temporary storage queue, which
has to be created by the task requesting the sort.  The input
records have to be written to this queue using EXEC CICS
WRITEQ TS.  Each record will be an item in the queue.  The
name of the queue must consist of the terminal-id concatenated
with 'SORT' (eg L77ASORT).  The output is also a temporary
storage queue which will include the sorted records.  They can
be retrieved using EXEC CICS READQ TS.  The name of the
output queue consists of 'SORT' concatenated with the
terminal-id (eg SORTL77A).  As temporary storage queues are
not deleted at task termination, the task has to delete the two
queues as soon as they are no longer needed.

At our installation the program is named CICSSORT and it is
invoked in the following manner:

      EXEC CICS LINK PROGRAM('CICSSORT') COMMAREA(COMM-SORT) LENGTH(20)

The COMM-SORT area should be defined in COBOL
terminology as follows:

01 COMM-SORT.
   03 COMM-NAME    PIC X(8).
   03 COMM-NUMBER  PIC 9(4) COMP.
   03 COMM-RECLEN  PIC 9(4) COMP.
   03 COMM-KEYOFF  PIC 9(4) COMP.
   03 COMM-KEYLEN  PIC 9(4) COMP.
   03 COMM-SRTTYP  PIC X.
   03 FILLER       PIC X.
   03 COMM-ANSWER  PIC 9(4) COMP.

COMM-NAME is the name of the temporary storage input
queue as described above.  An error in this field returns 1 in
COMM-ANSWER.  In the case of the input queue not
existing, ie this queue has not been created by the user, 2 is
returned in COMM-ANSWER.

COMM-NUMBER is the number of records in the input queue.
This value may vary from 2 to 1000.  The actual number of
items in the input queue is compared to this value.  Any error
in this field returns 3 in COMM-ANSWER.

COMM-RECLEN is the length of the input records.  As the
length can be variable, this value is the length of the smallest
record.  An error in this field returns 5 in COMM-ANSWER.

COMM-KEYOFF is the offset of the sorting key from the
beginning of an input record.  This value may vary from 0 to
COMM-RECLEN minus 1.

COMM-KEYLEN is the key length.  This value may vary from
1 to 255.  An error in this field returns 6 in COMM-ANSWER.

COMM-SRTTYP is the requested sort type: A - ascending or
D - descending .

Failure to get CICS storage will return 7 in COMM-ANSWER,
an unexpected error will return 10 in COMM-ANSWER, while
successful completion of the sort operation will cause the
temporary storage output queue to be built and a value of 0 to
be returned in COMM-ANSWER.


THE SOURCE CODE FOR CICSSORT

********************************************
*            INTERNAL CICS SORT            *
********************************************
DFHEISTG DSECT
NUMCOMPR DS    F
NUMITEMS DS    H
RECLENIN DS    H
KEYLENA2 DS    H
LENMAIN  DS    H
SAVETABA DS    F
CURITEM  DS    H
TEMP     DS    CL258
NEWNAME  DS    CL8
SAVESTCK DS    F
LEFT     DS    H
RIGHT    DS    H
AIDLEFT  DS    H
CURVALUE DS    CL256
COMPTR   EQU   6      BASE REG FOR COMMAREA
COMSAVE  DSECT
         USING COMSAVE,COMPTR
COMTSNAM DS    CL8
COMTSNUM DS    H
COMRECLN DS    H
COMKEYOF DS    H
COMKEYLN DS    H
COMSRTYP DS    C
COMFIL   DS    C
COMANSWR DS    H
TSPTR    EQU   8      BASE REG FOR TSAREA
         USING TSAREA,TSPTR
TSAREA   DSECT
TABPTR   EQU   9      BASE REG FOR TABAREA
         USING TABAREA,TABPTR
TABAREA  DSECT
STCKPTR  EQU   12     BASE REG FOR STACK-AREA
         USING STCKAREA,STCKPTR
STCKAREA DSECT
CICSSORT CSECT
         EXEC  CICS HANDLE CONDITION QIDERR(NOTS)                      X
                                     ERROR(ERR)
         CLC   EIBCALEN,=H'0'
         BE    OUT                   NO COMMAREA PASSED
         L     COMPTR,DFHEICAP       ADDRESSABILITY TO COMMAREA
         CLC   COMTSNAM(4),EIBTRMID  THE FIRST 4 CHARS ARE THE TERMID ?
         BNE   ERRNAME
         CLC   COMTSNAM+4(4),=CL4'SORT'  THE LAST 4 CHARS ARE 'SORT'?
         BNE   ERRNAME
         EXEC  CICS READQ TS QUEUE(COMTSNAM) SET(TSPTR)                X
               ITEM(1) NUMITEMS(NUMITEMS) LENGTH(RECLENIN)
*  IS THE REAL NUMBER OF ITEMS EQUAL TO THAT WHICH HAS BEEN PASSED ?
         CLC   COMTSNUM,NUMITEMS
         BNE   ERRNUM
         CLI   COMSRTYP,C'A'   ASCENDING SORT  ?
         BE    GOONCHK
         CLI   COMSRTYP,C'D'   DESCENDING SORT ?
         BNE   ERRTYPE
GOONCHK  LH    R9,COMTSNUM
         CH    R9,RECLIMIT     MORE RECORDS THAN THE LIMIT ?
         BH    ERRNUM
         CH    R9,=H'1'        ONE RECORD TO SORT ?
         BE    ERRNUM
         LH    R9,COMRECLN
         CH    R9,=H'0'        RECLEN > 0
         BNH   ERRRECLN
         LH    R9,COMKEYLN
         CH    R9,=H'0'        KEYLEN > 0
         BNH   ERRKEY
         CH    R9,=H'255'      KEYLEN < 256
         BH    ERRKEY
         LH    R9,COMKEYOF
         CH    R9,=H'0'        KEYOFFSET NOT < 0
         BL    ERRKEY
         LH    R9,COMKEYOF
         AH    R9,COMKEYLN
         CH    R9,COMRECLN     KEYOFFSET + KEYLEN NOT > RECLEN
         BH    ERRKEY
*    BUILDING THE POINTERS TABLE       *
         SR    R9,R9
         LH    R9,COMKEYLN
         AH    R9,=H'2'
         STH   R9,KEYLENA2    KEYLENA2 = KEYLEN + 2
         MH    R9,COMTSNUM    AMOUNT OF STORAGE FOR GETMAIN - TABAREA
         STH   R9,LENMAIN
         TM    LENMAIN,X'80'  MORE THAN 32767 BYTES ?
         BO    ERRMNSTG
         EXEC  CICS HANDLE CONDITION NOSTG(ERRMNSTG)
         EXEC  CICS GETMAIN SET(TABPTR) LENGTH(LENMAIN) NOSUSPEND
         ST    TABPTR,SAVETABA    SAVING ADDRESS OF TABAREA BEGINNING
         MVC   CURITEM,=H'1'
         SR    R4,R4
         IC    R4,COMKEYLN+1   LOADING KEYLENGTH
         BCTR  R4,0            AND SUBTRACTING 1 - FOR EXECUTE COMMAND
LOOPTAB  EXEC  CICS READQ TS QUEUE(COMTSNAM) SET(TSPTR)                X
               ITEM(CURITEM) LENGTH(RECLENIN)
* IS THE SPECIFIED REC LENGTH LESS THAN THE CURRENT RECORD'S LENGTH ?
         CLC   RECLENIN,COMRECLN
         BL    ERRLNREC
         MVC   0(2,TABPTR),CURITEM    MOVING THE CURRENT ITEM NUMBER
         AH    TSPTR,COMKEYOF  ADVANCING TO KEY LOCATION(IN TSAREA)
         AH    TABPTR,=H'2'    ADVANCING TO KEY LOCATION(IN TABAREA)
         EX    R4,EX1MVC
         AH    TABPTR,COMKEYLN          ADVANCING TO NEXT ENTRY
         SR    R5,R5
         LH    R5,CURITEM
         AH    R5,=H'1'
         STH   R5,CURITEM        INCREASING CURRENT ITEM BY 1
         CH    R5,COMTSNUM       THE END OF INPUT TS QUEUE ?
         BNH   LOOPTAB
*     THE QUICK SORT ITSELF    *
         SR    R9,R9
         LH    R9,COMTSNUM
         MH    R9,=H'2'      AMOUNT OF STORAGE FOR GETMAIN - STACK-AREA
         STH   R9,LENMAIN
         EXEC  CICS GETMAIN SET(STCKPTR) LENGTH(LENMAIN) NOSUSPEND
         MVC   LEFT,=H'1'       IN THE SORT BEGINNING : LEFT = 1
         MVC   RIGHT,COMTSNUM   AND RIGHT = NUMBER OF ENTRIES
         ST    R12,SAVESTCK     SAVING ADDRESS OF STACK-AREA BEGINNING
         L     TABPTR,SAVETABA  TABPTR TO START OF TABAREA
MAINLOOP CLC   RIGHT,LEFT    RIGHT > LEFT
         BH    CHANGE        YES - GO CHANGE
         C     R12,SAVESTCK  R12 POINTS TO THE STACK BEGINNING ?
         BE    ENDSORT       YES - END OF SORT
         SH    R12,=H'2'
* POPPING THE CURRENT STACK ENTRY - TO RIGHT
         MVC   RIGHT,0(R12)
         MVC   0(2,R12),=2X'00'   'CLEANING' THE ENTRY
         SH    R12,=H'2'
* AND POPPING THE NEXT ENTRY - TO LEFT
         MVC   LEFT,0(R12)
         MVC   0(2,R12),=2X'00'   'CLEANING' THE ENTRY
         B     MAINLOOP
CHANGE   EQU   *
         SR    R5,R5
         LH    R5,RIGHT
         SH    R5,=H'1'
         MH    R5,KEYLENA2  R5 - OFFSET  OF RIGHT ENTRY
         AR    R5,TABPTR    R5 - ADDRESS OF RIGHT ENTRY
         EX    R4,EX2MVC
         SR    R1,R1
         LH    R1,LEFT      R1 - CURRENT-LEFT
         SR    R8,R8
         LH    R8,RIGHT
         SH    R8,=H'1'     R8 - CURRENT-RIGHT (RIGHT-1)
         LR    R10,R1
         SH    R10,=H'1'
         MH    R10,KEYLENA2   R10 - OFFSET  OF R1 ENTRY
         AR    R10,TABPTR     R10 - ADDRESS OF R1 ENTRY
         LR    R7,R8
         SH    R7,=H'1'
         MH    R7,KEYLENA2  R7 - OFFSET  OF R8 ENTRY
         AR    R7,TABPTR    R7 - ADDRESS OF R8 ENTRY
BACKCHNG EQU   *
         CR    R1,R8            CURRENT-LEFT < CURRENT-RIGHT
         BL    CHNGLOOP          YES - GO CHANGE
         CLC   COMSRTYP,=C'A'    ASCENDING SORT ?
         BE    ASCEND3
DESCND3  EX    R4,EX3CLC         DESCENDING SORT
         BNH   GOON
         B     CONT3
ASCEND3  EX    R4,EX3CLC
         BNL   GOON
CONT3    AH    R4,=H'2'       ADDING THE ENTRY NUMBER LENGTH - 2 BYTES
         EX    R4,EX3MVC      EXCHANGING THE
         EX    R4,EX6MVC      RIGHT WITH
         EX    R4,EX7MVC      THE CURRENT-LEFT ENTRIES
         SH    R4,=H'2'       SUBTRACTING 2 FROM R4
GOON     MVC   AIDLEFT,LEFT   SAVING THE PREVIOUS LEFT
         SR    R2,R2
         LR    R2,R1
         AH    R2,=H'1'
         STH   R2,LEFT      LEFT = CURRENT-LEFT + 1
         SH    R2,=H'2'     R2 - PREVIOUS LEFT - 1
         CH    R2,AIDLEFT
         BNH   OUTCHNG
         MVC   0(2,R12),AIDLEFT  PUSHING SAVED LEFT TO STACK
         AH    R12,=H'2'   ADVANCING TO NEXT STACK ENTRY
         STH   R2,0(R12)   AND PUSHING R2(RIGHT PART) TO STACK
         AH    R12,=H'2'   ADVANCING TO NEXT STACK ENTRY
OUTCHNG  B     MAINLOOP
CHNGLOOP EQU   *
LOOP1    CLC   COMSRTYP,=C'A'   ASCENDING SORT ?
         BE    ASCEND1
DESCND1  EX    R4,EX1CLC        DESCENDING SORT
         BL    LOOP2
         B     CONT1
ASCEND1  EX    R4,EX1CLC
         BH    LOOP2
CONT1    AH    R1,=H'1'         INCREASING R1  BY 1
         AH    R10,KEYLENA2     INCREASING R10 BY TABENTRY LENGTH
         CH    R1,RIGHT         R1 REACHED THE CURRENT RIGHT ?
         BL    LOOP1            NO - BACK TO LOOP1
LOOP2    CLC   COMSRTYP,=C'A'   ASCENDING SORT ?
         BE    ASCEND2
DESCND2  EX    R4,EX2CLC        DESCENDING SORT
         BH    OUTLOOP2
         B     CONT2
ASCEND2  EX    R4,EX2CLC
         BL    OUTLOOP2
CONT2    SH    R8,=H'1'         DECREASING R8 BY 1
         SH    R7,KEYLENA2      DECREASING R8 BY TABENTRY LENGTH
         CH    R8,LEFT          R8 REACHED THE CURRENT LEFT ?
         BH    LOOP2            NO - BACK TO LOOP2
OUTLOOP2 CR    R1,R8            CURRENT-LEFT < CURRENT-RIGHT
         BNL   BACKCHNG         NO - DO NOT EXCHANGE ENTRIES
         AH    R4,=H'2'      ADDING THE ENTRY NUMBER LENGTH - 2 BYTES
         EX    R4,EX3MVC     EXCHANGING THE
         EX    R4,EX4MVC     CURRENT-LEFT
         EX    R4,EX5MVC     WITH CURRENT-RIGHT ENTRIES
         SH    R4,=H'2'      SUBTRACTING 2 FROM R4
         B     BACKCHNG
*    BUILDING THE SORTED TS OUTPUT QUEUE     *
ENDSORT  L     TABPTR,SAVETABA      TABPTR TO START OF TABAREA
         SR    R5,R5
         LH    R5,COMTSNUM      IN R5-NUMBER OF ITEMS
         MVC   NEWNAME(4),=CL4'SORT'   THE SORTED OUTPUT TS NAME
         MVC   NEWNAME+4(4),EIBTRMID   IS 'SORT'+EIBTRMID
* DELETING THE OUTPUT TS QUEUE NAME - IN CASE IT EXISTS SOMEHOW
         EXEC  CICS DELETEQ TS QUEUE(NEWNAME) NOHANDLE
LOOPBLD  MVC   CURITEM,0(TABPTR)  THE SORTED SEQUENCE NUMBER TO CURITEM
         EXEC  CICS READQ TS QUEUE(COMTSNAM) SET(TSPTR)                X
               ITEM(CURITEM) LENGTH(COMRECLN)
         EXEC  CICS WRITEQ TS QUEUE(NEWNAME) FROM(TSAREA)              X
               LENGTH(COMRECLN) NOSUSPEND
         AH    TABPTR,KEYLENA2    ADVANCING TO NEXT TABAREA ENTRY
         BCT   R5,LOOPBLD
         L     TABPTR,SAVETABA      TABPTR TO START OF TABAREA
         EXEC  CICS FREEMAIN DATA(TABAREA)
         L     STCKPTR,SAVESTCK     STCKPTR TO START OF STACK-AREA
         EXEC  CICS FREEMAIN DATA(STCKAREA)
         MVC   COMANSWR,=H'0'
         B     OUT
EX1CLC   CLC   2(0,R10),CURVALUE  COMPARING CURRENT-LEFT  WITH CURVALUE
EX2CLC   CLC   2(0,R7),CURVALUE   COMPARING CURRENT-RIGHT WITH CURVALUE
EX3CLC   CLC   2(0,R5),2(R10)     COMPARING RIGHT WITH CURRENT-LEFT
EX1MVC   MVC   0(0,TABPTR),0(TSPTR) MOVING THE KEY INTO TABAREA
EX2MVC   MVC   CURVALUE(0),2(R5)    MOVING THE RIGHT KEY TO CURVALUE
EX3MVC   MVC   TEMP(0),0(R10)       MOVING CURRENT-LEFT  TO TEMP
EX4MVC   MVC   0(0,R10),0(R7)       MOVING CURRENT-RIGHT TO CURRENT-LEFT
EX5MVC   MVC   0(0,R7),TEMP         MOVING TEMP  TO CURRENT-RIGHT
EX6MVC   MVC   0(0,R10),0(R5)       MOVING RIGHT TO CURRENT-LEFT
EX7MVC   MVC   0(0,R5),TEMP         MOVING TEMP  TO RIGHT
ERRNAME  MVC   COMANSWR,=H'1'
         B     OUT
ERRNUM   MVC   COMANSWR,=H'3'
         B     OUT
ERRTYPE  MVC   COMANSWR,=H'4'
         B     OUT
ERRRECLN MVC   COMANSWR,=H'5'
         B     OUT
ERRLNREC L     TABPTR,SAVETABA      TABPTR TO START OF TABAREA
         EXEC  CICS FREEMAIN DATA(TABAREA)
         MVC   COMANSWR,=H'5'
         B     OUT
ERRKEY   MVC   COMANSWR,=H'6'
         B     OUT
ERRMNSTG MVC   COMANSWR,=H'7'
         B     OUT
* NO TS NAME EXISTS
NOTS     MVC   COMANSWR,=H'2'
         B     OUT
* ANY UNEXPECTED ERROR
ERR      EQU   *
         MVC   COMANSWR,=H'10'
         B     OUT
OUT      EXEC CICS RETURN
RECLIMIT DC    H'1000'
         END   CICSSORT


Safran Menachem
Systems Programmer
Mivtachim Computers (Israel)


