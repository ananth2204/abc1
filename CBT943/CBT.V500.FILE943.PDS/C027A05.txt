 Some thoughts on TA terminal input exitU
With regard to the article in the July 1987 issue, A CICS terminal input exit, I
feel that clarification is needed about some of the issues raised by the author.
It appears to me that while the program shown in the article may have solved
this particular problem for him, it was not the only solution, and certainly not
the best one.  If any readers adopted it without careful analysis, other
problems could ensue, problems that could be worse than those they are trying to
correct.
The author described his problem as a PLT program being TaccidentallyU invoked
by a terminal operator, who by chance had entered the transaction-id that starts
it.  His solution was therefore to write an exit program that would only allow
certain transactions to be entered by a user who hadnUt signed on.  But was an
exit program necessary to accomplish this?  This exit will be driven thousands,
perhaps hundreds of thousands of times every day.  ThatUs a lot of overhead, a
lot of cycles burned to prevent a very rare event.  Often many of us (myself
included) are lured by our desire to try something new into developing a complex
solution to a simple problem.  In this case, I feel there are some simpler,
better solutions to this type of problem that could be used without coding an
exit.  LetUs examine some.
The most obvious question is why is this even happening?  Why is a transaction-
id triggering a PLT program?  PLT programs do not require transaction-ids to
initiate them.  Why is a PCT entry even pointing to a PLT program in the first
place?  If the program is only supposed to run at PLTPI time, then the solution
is to remove the PCT entry that points to it, not to write an exit that will be
driven at every terminal input event.
I will concede that many applications are written that use a single program as a
driver and that this program can be invoked either by a transaction-id (to
perform manual initiation), or at PLT time (to be initiated at start-up).
However, this case still does not justify an exit program;  why not simply
secure the transaction-id with the TRANSEC option in the PCT?  Again, this is
far simpler than an exit program.
There is the possibility that the same program is used for both PLT initiation
and subsequent end-user processing.  However, even this situation does not
require an exit to circumvent it;  the application program can easily make the
following test to determine if it is running at PLT time or not:
     TM   CSASSI2,CSAPLTTI   PLT PROCESSING COMPLETED?
     BO   NORMAL             ..YES - GO TO STD ROUTINES
     BNO  INIT               ..NO  - GO TO INIT ROUTINES
Another test, perhaps more suited to a command-level program is:
     CLC  EIBTRNID,=C'CSTP'  PLT PROCESSING COMPLETED?
     BNE  NORMAL             ..YES - GO TO STD ROUTINES
     BE   INIT               ..NO  - GO TO INIT ROUTINES
Either of these tests can be done to see if the program is executing at PLT time
or not.  This will allow a program to perform both PLTPI initiation and also
later processing without the initiation functions being TaccidentallyU invoked.
One possible reason might still exist.  The PLT program might well be part of a
purchased software package, and the package may require that the program used to
initiate the application at PLT time also be pointed to by a PCT entry, for
whatever reason.  In this case it may well be impossible to modify the program
to test for this situation (although you certainly could complain to the
vendor).  This is a situation, assuming that the transaction cannot simply be
protected via CICS security, that could justify an exit program such as that
shown in the article.
However, the exit program provided, although it does work for the author, may
lead to problems for other CICS users.  For example, the exit as written will
not intercept all terminal-initiated transactions;  it only works for 3270-type
devices;  it could prevent legitimate transactions from executing;  the method
used to determine if the user is signed on or not is unreliable;  and it alters
static fields in the TCTTE.  Any and all of these things could lead to serious
problems in many shops, even though, again, the author does not seem to have any
problems at his installation.  LetUs address these issues one at a time.
First of all, let me make a few clarifications.  The article refers to exit
ZXCIN;  I think this is a typographical error, and should read XZCIN.  Also, for
those shops that currently do not use any CICS global exits, EXITS=YES must be
specified in the SIT to tell CICS that you will be using the global exit
interface.
 It is important to note that exit point XZCIN is only driven by VTAM terminal
input.  While the author may be a VTAM-only shop, if you use TCAM or BTAM, you
must run at exit point XTCIN, or input from those terminals will not be checked
by the exit program.  However, the program as it stands will fail if you try to
run it at exit XTCIN;  the register conventions are different at that exit
point.
Another potential problem is that the transaction-id, if not specified in the
next transaction-id field on the TCTTE (TCTTETC), is determined by looking at
the data in the TIOA.  This is an extremely unreliable method.  For example, PF
keys can be used to initiate transactions - the program only checks for PA keys.
Also, the program tests TIOASAL for a length of less than 16 bytes;  the
ambiguous comment on this instruction makes it unclear what he is trying to
accomplish, but I assume he feels that if the entire TIOA is less than 16 bytes,
no transaction-id was entered, because this would mean that the TIOA data area
is less than 4-bytes long.  This is a fallacious assumption for a couple of
reasons.  For example, what if the transaction-id is less than 4-bytes long?
But the real problem with this test is that it will never fail!  Why?  Because
CICS always acquires storage from the terminal subpool in doubleword increments.
That means the smallest TIOA you will ever have will be 20 bytes;  the 12-byte
Storage Accounting Area, and an 8-byte data area!
Also, the way it determines whether or not the user is signed on, by checking
TCTTESK for xT000001U, is unreliable.  Many shops define a minimum security
level for each TCT definition, by specifying a value for OPERSEC in the TCT
definition.  In such a case, a value would appear in TCTTESK, whether or not the
user had signed on!  A more reliable test would be to test bit xT02U in field
TCTTETS;  this is the TTerminal AttendedU flag, and is set when the user
actually signs on.
Another problem too is the assumption that an SBA in the first 3 bytes of the
TIOA always means a formatted screen was entered.  For one thing, the SBA (or
Set Buffer Address) only applies to 3270 datastreams.  What about other
supported terminal types?  What about SNA datastreams, where the data is
preceded by one or more FMHs?  These situations are not handled but are common
in many shops.  The SBA test for formatted screens is not even a reliable test;
an unformatted screen can come in with an SBA, if, for example, the cursor was
not left in the upper left-hand corner of the screen by the previous
transaction.  Finally, there could be major problems with conversational
transactions.  Since the XZCIN and XTCIN exits are driven for each terminal
input event, what if, in a conversational transaction, the first four characters
in the TIOA just happen to match a forbidden transaction-id?  This exit is going
to stick TLOGOU right at the front of the TIOA!  Neither the user nor the
application are going to like that very much.  A year or two down the road,
something like this will be very hard to diagnose.  You may say, Rbut I donUt
have any conversational transactionsS.  What about CEMT, CSSN, CEDA, or
DisplayWrite/370?  These are conversational transactions.  You may be surprised
by what else in your shop is conversational.  While none of these may have been
a problem for the author, one or more of these may well affect others.
Another potentially serious problem is that, in some cases, the exit program
goes and arbitrarily turns uppercase translation on by setting xT01Uin TCTEUCTB,
thus telling CICS to perform uppercase translation on all subsequent inputs from
this terminal.  First of all, this wonUt even work for BTAM and TCAM terminals;
not only is this exit not driven for those access methods, but uppercase
translation for such devices is not controlled by TCTEUCTB, but rather by xT10U
in TCTTEFIB.  More seriously, I cannot for the life of me imagine why the author
did this.  First of all, changing this byte will not affect the current input.
Secondly, if this had been a conversational transaction, what if the data on the
screen had happened to match one of these transaction-ids he is checking for?
He would have flipped UCTRAN on in the middle of a conversation!  If uppercase
translation is desired, this should be specified in the TCT definition with
FEATURE=UCTRAN, and not flipped on in an exit.  If the UCTRAN feature was not
specified in the TCT definition, it was probably for a reason, in which case you
certainly donUt want to go arbitrarily turning it on in an exit.  It is a
dangerous thing to change static fields in an exit program.
This is not to say that an installation might not want to write an exit to
control uppercase translation.  But generally, one would want to selectively
turn UCTRAN off, not on;  and if you are trying to accomplish both transaction
control and UCTRAN control, you are better off doing it in separate programs,
 thus enabling you to turn one on and off without affecting the other.  This is
one of the great things about the CICS global exit interface, the ability to
enable several, independent programs at a single exit point.
According to the article, what the author wanted to accomplish was to prevent
certain transactions being executed by users who were not signed on.  Assuming
that the suggestions at the beginning of this article wouldnUt work (and I think
in the majority of cases they would), a program driven at the CICS attach exit
points XZCATT and XTCATT would be far more suitable than the terminal input exit
points.  For one thing, at the time the attach exits are driven, CICS has
already determined the transaction-id it intends to attach, thereby eliminating
the need for complex logic in the exit program to account for all the input and
device-type possibilities, reducing the exit programUs dependency on CICS
internal control block formats.
Shown here is an example of such an exit.  Care was taken to keep the program as
generalised as possible, thus enabling it to function properly in a wide range
of CICS installations.  It will function for both CICS 1.6 and 1.7 users, and
can run at exit XZCIN or XTCIN, so it will work for VTAM, BTAM, or TCAM.
As shown, this program will require a terminal operator to be signed on to use
any transaction in the system except those coded in an exclusion table;  an
attempt to enter any other without being signed on will result in the CSSN sign-
on screen being displayed.  Rather than use CSSN, you could clear the
transaction-id with an XC TRANID,TRANID instruction, which would result in the
user getting a TDFH2001I INVALID TRANSACTION IDU message.  Or you may want to
change the transaction-id to one that triggers a program that you write
yourself, one that will send a message to the terminal operator asking why they
havenUt signed on.
This program is laid out such that any number of things can be used to determine
whether or not the user will be allowed to execute the entered transaction.  The
determination could be based on terminal-id, by using a table containing a
limited number of privileged terminal-ids and comparing each table entry against
TCTTETI.
Another method would be to do this by operator-id, the table in this case being
a list of privileged operator-ids, and comparing each against TCTTEOI.  In the
world of CICS 1.7 and Auto-install, this can be a means of controlling access to
different CICS systems, where certain operators may have access to some, but not
all, of the available systems.
Even if the function performed by this exit program is not needed in your
installation, look it over and think about its potential uses.  The CICS attach
exit points are probably the most useful of all the global exit points.  Using
this program as a model, there is no limit to the things you can do at attach
time.  Between all the CICS regions in my shop, I have written 12 different exit
programs to run at this exit point, performing a variety of functions.
In conclusion, this program, driven at the attach exit points, is both simpler,
yet more powerful, than that shown in the article from the July 1987 issue.
         TITLE  'TRANSACTION ATTACH GLOBAL EXIT SECURITY PROGRAM'
         COPY   DFHTCADS
         COPY   DFHTCTTE
         COPY   DFHTIOA
         DFHUEXIT TYPE=EP
TIOABAR  EQU   8
TCTTEAR  EQU   10
***********************************************************************
* MODULE NAME = ATTEXIT                                               *
* MODULE TYPE = REENTRANT, EXECUTABLE                                 *
* MODULE LANG = ASSEMBLER                                             *
* DESCRIPTIVE NAME = CICS ATTACH EXIT SECURITY PROGRAM.               *
* FUNCTION = ONLY PERMIT NON-SIGNED-ON USERS TO ACCESS THE TRANID'S   *
*            LISTED BELOW. ANY OTHER REQUESTS WILL INSTEAD DISPLAY    *
*            THE SIGN-ON PROGRAM'S SCREEN.                            *
*            THIS EXIT WILL FUNCTION FOR EITHER VTAM OR TCAM/BTAM     *
*            DEVICES. TO ENABLE IT FOR VTAM DEVICES -                 *
*                 EXEC CICS ENA PRO('ATTEXIT') EX('XZCATT') ST        *
*            TO ENABLE IT FOR TCAM/BTAM DEVICES -                     *
*                 EXEC CICS ENA PRO('ATTEXIT') EX('XTCATT') ST        *
*            ENABLE IT AT BOTH EXIT POINTS IF YOUR NETWORK            *
*            INCLUDES BOTH ACCESS METHODS.                            *
 * INSTALL  = ADD IT TO THE PPT AS FOLLOWS -                           *
*                 DFHPPT TYPE=ENTRY,PROGRAM=ATTEXIT,RES=YES           *
*                    Q OR Q                                           *
*                 DEFINE PROGRAM(ATTEXIT)                             *
*                        GROUP(EXITPGMS)                              *
*                        LANGUAGE(ASSEMBLER)                          *
*                        RESIDENT(YES)                                *
*            FINALLY, YOU MUST SPECIFY THE FOLLOWING IN THE SIT -     *
*                 EXITS=YES                                           *
*                 EXEC=YES                                            *
***********************************************************************
START    CSECT
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         USING START,R15           ESTABLISH ADDRESSABILITY
         USING DFHUEPAR,R1         ADDRESS UEP PARM LIST
         LA    R2,5(,R2)           ADDRESS TRANID IN PARMLIST
         L     R3,UEPEXN           ADDRESS EXIT PROGRAM NUMBER
         CLI   0(R3),XZCATT        ARE WE AT ZCP'S EXIT POINT?
         BE    L00100              ..YES - USE PARM LIST
         CLI   0(R3),XTCATT        ARE WE AT TCP'S EXIT POINT?
         BNE   L09999              ..NO  - DONUT DO ANYTHING
         L     TCACBAR,UEPTCA      ADDRESS TCA
         LR    TIOABAR,R4          ADDRESS TIOA
         LR    TCTTEAR,R2          ADDRESS TCTTE
         LA    R2,TCAKCTI          ADDRESS TRANID TO BE ATTACHED
L00100   DS    0H
         CLC   TCTTETI(2),=C'CN'   INPUT FROM A CONSOLE?
         BE    L09999              ..YES - LET IT PASS
         TM    TCTTETS,TCTTESTA    USER SIGNED ON?
         BO    L09999              ..YES
         OC    0(4,2),=X'40404040' MAKE SURE TRANID IS UPPERCASE
         LA    R1,TRIDTBL          ADDRESS TRANID TABLE
         LA    R3,TRIDTBLE         LOAD LOOP CONTROL
L00200   DS    0H
         CLC   0(4,R1),0(R2)       TRANID IN TABLE?
         BE    L09999              ..YES
         LA    R1,4(,R1)           BUMP TABLE POINTER
         BCT   R3,L00200           LOOP
         MVC   0(4,R2),=C'CSSN'    <== THIS WILL ATTACH CICS SIGNON PGM
***      XC    0(4,R2),0(R2)       <== THIS WILL RETURN MSG DFH2001I
***      MVC   0(4,R2),=C'USER'    <== THIS WILL ATTACH A USER PGM
L09999   DS    0H
         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
********
*        TRANID TABLE. ONLY THESE TRANSACTIONS WILL BE PERMITTED
*        FROM A TERMINAL THAT IS NOT SIGNED ON.
********
TRIDTBL  DS    0H
         DC    C'CSSN'             SIGN-ON TRANSACTION
         DC    C'9999'             NUMERIC SIGN-ON TRANSACTION
         DC    C'CSSF'             SIGN-OFF TRANSACTION
         DC    C'8888'             NUMERIC SIGN-OFF TRANSACTION
         DC    C'CSGM'             GOOD MORNING TRANSACTION
         DC    C'TERM'             TERMINAL TEST TRANSACTION
TRIDTBLE EQU   (*-TRIDTBL)/4
         END


Christopher Frank
Lead Systems Programmer
Western Life Insurance (USA)  ) Xephon 1988




