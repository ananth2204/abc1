CICS emergency restart - a cry for help

INTRODUCTION

This article describes a CICS disaster situation we were faced with
some weeks ago.  Potentially, every CICS installation could run
into this situation although I sincerely hope that they do not.  So
far we have not found a solution to this problem.

I think it is of great interest to all CICS users and I hope a solution
can be found.  Some readers may already have experienced this
problem.  The problem has been forwarded to the IBM
laboratories but so far we have not had any valuable response
from them.

OUR ENVIRONMENT

Hardware

%   IBM 3090-180E with 64 megabytes of expanded storage.

Software

%   MVS/XA 2.2.0
%   CICS/OS/VS 1.7
%   IMS/DB 1.3
%   THE MONITOR FOR CICS 7.1.
THE PROBLEM

Our CICS is cold-started in the morning.  The CICS system logs
(residing on disk) are formatted before start-up so that logging
starts on the primary system log dataset DFHJ01A.

A transaction is started some time later but never ends because,
after performing some updates on DL/I databases, it issues a GET
to a file and tries to read a record which has been enqueued by a
previous transaction (this is caused by erroneous software).  All
attempts to cancel or purge that transaction with CEMT and THE
MONITOR FOR CICS failed.  A similar situation could occur if a
conversational transaction is started and the operator goes away
leaving the terminal  in a terminal wait (unless a terminal read
time-out  is implemented).

Early in the afternoon the primary system log becomes full and a
journal switch occurs to the secondary system log, DFHJ01B.
The transaction in question is still in-flight.  At this point, the first
log is backed up to tape.  In the evening before shut down,
another log switch occurs.  The transaction is still in-flight and the
second log is backed up to tape.

The manuals say that the log should be large enough to hold all
the information for a complete CICS run.  But what if CICS runs
for 24 hours a day, five days a week?  What if databases are
closed while CICS is up, processed in batch, and re-opened in
CICS?  You must force a journal switch otherwise you will never
be able to perform forward recovery if needed.

Late in the evening at shut-down time, a SHUT IMMEDIATE is
required because a transaction is still active.  CICS tries to
backout the in-flight task and abends because not all the log
information is available on disk logs (DFHJ01A has been
overwritten on disk after the second log switch).  The operator, as
always when CICS abends, does an emergency restart which
naturally abends with the message 'DFH2802I LOG RECORD
INVALID - RESTART ABORTED'.  At this point, the operator
calls for help from the systems programmer.

ATTEMPTED SOLUTIONS

About two years ago I had been faced with the same problem
using CICS 1.6.1 so I decided to proceed in the same way as it
was successful at that time.  The log extent, DFHJ01A, which
was in use at the time of the abend, was left as it was.  A new
very large DFHJ01B dataset was allocated on an empty disk
volume.  Both backed-up extents (the first DFHJ01A and
DFHJ01B) were restored from tape to the new large DFHJ01B as
a single extent.  The emergency restart abended again with
DFH2802I.

During the night different attempts were made to resolve the
problem:

%   Other utilities (IEBGENER and IDCAMS) were used to
perform the restore from tape.
%   The new allocated disk extent was formatted using
DFHJCJFP before the restore.
%   The restore was performed in two steps with a disposition of
MOD being used for the second one.
%   The restore was performed in one step by concatenating the
DD statements for the tape input.

When all these failed, we were forced to take some risks and
perform a cold start.  We ran utilities to check the pointers on the
databases we suspected were in use at the time of the abend.  The
logical connections between databases could not be checked and
some corrections were necessary.  VSAM files could not be
checked and later some missing updates were detected.  We were
forced to cold start our transient data queues because pointers
were corrupted.  Normally, we always do a warm start.

At the time of the shut down, five transactions were found to be
'hanging' because of enqueues held by the first one causing a
second one to hang causing a third one to hang etc.

Fran ois Mortier
Systems Support Manager
Atlas Copco Airpower (Belgium) ) Xephon 1989


