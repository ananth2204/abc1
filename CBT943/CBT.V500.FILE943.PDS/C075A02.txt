Formatted dump summary

If you have had to wade through a CICS formatted dump lately
you know that it takes a lot of time to find out what tasks were
executing on what terminals, and what storage was allocated to
each task.  I wrote these programs to summarize this
information and also to print an error message when a task's
storage allocation pointers are not complete.

The first program gathers the information from the dump and
writes it to a sequential work file.  The data is then sorted and
loaded into a VSAM file.  The second program reads the
VSAM file and prints the report.  We are running CICS 1.7 in
an MVS environment.  You will need the CICS source library
in your SYSLIB concatenation during assembly to pick up the
DFHDCRDS copy book.


SAMPLE EXECUTION JCL

//SJ0018PD JOB  0,SYSPROG,CLASS=A,REGION=2048K,MSGCLASS=X
//STEP1   EXEC  PGM=DUMPCOL
//STEPLIB  DD   DISP=SHR,DSN=SYS2.LOADLIB
//SYSPRINT DD   SYSOUT=*
//DUMPIN   DD   DSN=SJ0018.DFHDMPA,DISP=SHR
//WORKFL   DD   DSN=&&WORK01,DISP=(NEW,PASS),UNIT=SYSDA,
//     DCB=(LRECL=80,BLKSIZE=6320,RECFM=FB),
//     SPACE=(CYL,(2,1))
//STEP1    EXEC PGM=IDCAMS,COND=(0,NE)
//SYSPRINT DD SYSOUT=*
//SYSIN    DD   *
       DEFINE CLUSTER ( -
              NAME(SJ0018.FDFILE) -
              VOL(SJH001) -
              CYL(2  1) -
              FREESPACE(0 0) -
              SHR(2 3) -
              SPEED -
              KEYS(9 0) -
              RECORDSIZE(80 80) ) -
            INDEX(NAME(SJ0018.FDFILE.INDEX) NOIMBED ) -
            DATA(NAME(SJ0018.FDFILE.DATA) CISZ(4096))
/*
//STEP2   EXEC  PGM=SORT,COND=(0,NE)
//SYSOUT   DD   SYSOUT=*
//SYSPRINT DD   SYSOUT=*
//SORTIN   DD   DSN=&&WORK01,DISP=(OLD,DELETE),UNIT=SYSDA
//SORTOUT  DD   DSN=SJ0018.FDFILE,DISP=SHR
//SYSIN    DD   *
  SORT FIELDS=(1,9,CH,A)
/*
//STEP3   EXEC  PGM=DUMPPRT,COND=(0,NE)
//STEPLIB  DD   DSN=SYS2.LOADLIB,DISP=SHR
//SYSPRINT DD   SYSOUT=*
//PRINTER  DD   SYSOUT=*
//SYSUDUMP DD   SYSOUT=*
//FDFILE   DD   DSN=SJ0018.FDFILE,DISP=SHR
//STEP4    EXEC PGM=IDCAMS
//SYSPRINT DD SYSOUT=*
//SYSIN    DD   *
       DELETE (SJ0018.FDFILE) -
              PURGE -
              NOERASE -
              CLUSTER
/*


DUMPCOL SOURCE CODE

         TITLE 'DUMPCOL - COLLECT INFO FROM FORMATTED DUMP'
*  SCAN A FORMATTED DUMP IN A CICS DUMP DATASET LOOKING FOR
*  TCA, TCT AND ALLOCATED STORAGE. WRITE THE INFORMATION
*  TO A SEQ. WORK FILE. RECORDS WRITTEN ARE:
*       TYPE A: SYSTEM INFO, DATE & TIME OF DUMP
*       TYPE B: USER TCA INFORMATION
*       TYPE C: SYSTEM TCA INFORMATION
*       TYPE D: ALLOCATED STORAGE LOCATION, TYPE AND LENGTH
*       TYPE E: TCT ENTRIES
DUMPCOL  CSECT
         USING *,R15
         STM   R14,R12,12(R13)    SAVE BACKWARD
         LA    R15,SAVEAREA    OUR SAVE
         ST    R15,8(R13)      SAVE FORWARD POINTER
         ST    R13,4(R15)      SAVE BACKWARD POINTER
         LR    R13,R15         POINT REG 13 TO SAVEAREA
         DROP  R15
         USING SAVEAREA,R13
         B     BEGIN
SAVEAREA DS    18F             OUR SAVE AREA
BEGIN    EQU   *
         LA    R12,INREC
         USING DCRECLEN,R12
         OPEN  (INPUT,(INPUT))      DUMP FILE FROM CICS
         OPEN  (WORKFL,(OUTPUT))    SEQ WORK FILE
READ     EQU   *
         BAL   R14,GETFILE        READ CICS DUMP FILE
         CLI   DCIRTSI,X'41'      IS THIS A FORMATTED DUMP HDR
         BE    SETPICK            ...YES, SELECT THIS DUMP
         CLI   DCIRTSI,X'7F'      IS THIS END OF FORMATTED DUMP
         BE    EOJ                ...YES,
         CLI   PICK,X'01'         HAS THIS DUMP BEEN REQUESTED
         BE    LOOK
         B     READ              GO READ AGAIN
SETPICK  MVI   PICK,X'01'        SIGNAL FORMATTED DUMP FOUND
         UNPK  FDTIME,DCTIME     DUMP TIME
         MVC   WFSTG2,FDTIME
         UNPK  WFSTG6,DCDATE     DUMP DATE
         MVC   WFSTG5,DCAPPLID
         MVI   WFRT,C'A'
         MVC   WFSTG1,=C'00000001'
         BAL   R14,PUTFILE       WRITE HEADER RECORD
         B     READ
LOOK     EQU   *
         CLI   DCIRTSI,X'49'     IS THIS A HEADER REC.
         BNE   LOOK2
         MVI   SW49,C'1'         INDICATE A 49 RECORD WAS READ
LOOK2    EQU   *
         CLC   DCLINE+14(7),=C'TCASYAA'   CHECK FOR USER TCA FIELD
         BE    DOTCAU
         CLC   DCLINE+14(7),=C'TCASCCA'   CHECK FOR SYS TCA FIELD
         BE    DOTCAS
         CLC   DCLINE+4(6),=C'TCTTE1'     CHECK FOR TCTTE FIELD
         BE    DOTCTTE
CHK47    EQU   *
         CLI   DCIRTSI,X'47'    IS THIS A HEX REC.
         BNE   READ
         CLI   SW49,C'0'        HAVE WE ALREADY HAD A TYPE 47 REC
         BE    READ              YES. READ NEXT RECORD
         MVI   SW49,C'0'     SET OFF 49 SWITCH WHEN ANY 47 REC IS READ
         MVC   RECTP(1),DCDATA   MOVE HEX REC TYPE
         LA    R8,SCTBL          ADDR OF STORAGE CLASSES
CMPSC    CLC   RECTP,0(R8)       FIND THIS STORAGE CLASS ON TABLE
         BE    FOUND             FOUND IT. - PUT USER STG REC
         LA    R8,9(R8)          GET NEXT TABLE VALUE
         CLI   0(R8),X'FF'       END OF SC TABLE?
         BE    READ              ...YES, GET NEXT RECORD
         B     CMPSC
DOTCAU   EQU   *
         MVC   WFSTG5,DCLINE+23     ADDR OF SYSTEM TCA
         MVC   WFSTG3,DCLINE+49     FIELD TCAFCAAA
DOTCAU2  EQU   *
         BAL   R14,GETFILE
         CLC   DCLINE+14(7),=C'TCATCEI'
         BNE   DOTCAU2
         MVC   WFSTG7(30),DCLINE+23  FIELD TCATCEI
         MVI   WFRT,C'B'             RECORD TYPE
         AP    CNTR,=P'1'
         UNPK  WFSTG1,CNTR    USE SEQ. NUMBER KEY FOR USER TCA
         MVZ   WFSTG1+7(1),=X'F0'
         BAL   R14,PUTFILE
         B     READ
DOTCTTE  EQU   *
         LA    R9,DCADDR   ADDRESS OF THIS TCT ENTRY
         LA    R10,WFSTG1
         LA    R11,4
         BAL   R14,HEXCH
         BAL   R14,GETFILE
         MVC   WFSTG2(4),DCLINE+12   TERMID
         MVI   WFRT,C'E'          RECORD TYPE = E
         BAL   R14,PUTFILE
         B     READ
DOTCAS   EQU   *
         MVC   WFSTG3,DCLINE+23   ADDR OF 1ST STORAGE IN CHAIN
         MVC   WFSTG6,DCLINE+101  TASK NUMBER
DOTCAS2  EQU   *
         BAL   R14,GETFILE
         CLC   DCLINE+14(7),=C'TCATCPC'
         BNE   DOTCAS3
         MVC   WFSTG4,DCLINE+23    TRAN ID
         B     DOTCAS2
DOTCAS3  EQU   *
         CLC   DCLINE+14(7),=C'TCAPCTA'
         BNE   DOTCAS4
         MVC   WFSTG5,DCLINE+23    PROGRAM NAME
         B     DOTCAS2
DOTCAS4  EQU   *
         MVC   RECTP(1),DCDATA    MOVE HEX REC TYPE
         CLI   RECTP,X'8A'
         BNE   DOTCAS2
         LA    R9,DCADDR           ADDRESS OF THIS TCA
         LA    R10,WFSTG1          PUT IT HERE
         LA    R11,4               LENGTH
         BAL   R14,HEXCH           CONVERT FROM HEX TO CHAR
         SR    R9,R9               CLEAR REG 9
         ICM   R9,3,DCDATA+2       MOVE LENG OF THIS STORAGE TO REG 9
         CVD   R9,DWORD            CONVERT TO PACKED
         MVC   WFSTG2,MASK
         ED    WFSTG2,DWORD+5
         MVI   WFRT,C'C'          RECORD TYPE = C
         BAL   R14,PUTFILE
         B     READ
FOUND    EQU   *
         LA    R9,DCADDR          ADDR OF THIS STORAGE
         LA    R10,WFSTG1         PUT IT HERE
         LA    R11,4              LENGTH
         BAL   R14,HEXCH          CONVERT HEX TO CHAR
         MVC   WFSTG1(2),=C'00'   MAKE SURE HIGH ORDER BYTES=00
         SR    R9,R9              CLEAR REG 9
         ICM   R9,3,DCDATA+2      MOVE LENGTH OF THIS STORAGE TO R9
         CVD   R9,DWORD           CONVERT IT TO PACKED
         MVC   WFSTG2,MASK
         ED    WFSTG2,DWORD+5
         MVC   WFSTG5,1(R8)       TYPE OF STORAGE (FROM EARLIER LOOKUP)
         LA    R9,DCDATA+4        CONVERT NEXT STRG IN CHAIN
         LA    R10,WFSTG3         PUT IT HERE
         LA    R11,4              LENGTH
         BAL   R14,HEXCH          CONVERT FROM HEX TO CHAR
         MVC   WFSTG3(2),=C'00'   MAKE SURE HIGH ORDER BYTES=00
         MVI   WFRT,C'D'          RECORD TYPE = D
         BAL   R14,PUTFILE
         B     READ
EOJ      EQU   *
         CLOSE INPUT              CICS DUMP FILE
         CLOSE WORKFL             WORK FILE
         SR    R15,R15            CLEAR RETURN CODE
         CLI   PICK,X'01'
         BE    GOODRC
         LA    R15,8     EXIT WITH CC=8 IF NO FORMATTED DUMP FOUND
GOODRC   EQU   *
         L     R13,SAVEAREA+4    POINT TO BACKWARD SAVE
         ST    R15,16(R13)       STORE RETURN CODE
         LM    R14,R12,12(R13)    RESTORE CALLERS REGS
         BR    R14                RETURN TO CALLER
HEXCHR   DS    F
* CONVERT HEX FIELDS TO CHAR
HEXCH    EQU   *
         ST    R14,HEXCHR       SAVE RETURN ADDR
         SR    R5,R5
* R9=SOURCE, R10=TARGET, R11=LENGTH
HEXLOOP  EQU   *
         IC    R5,0(R9)
         SRL   R5,4
         STC   R5,BYTE
         TR    BYTE,HEXTABLE
         MVC   0(1,R10),BYTE
         MVC   BYTE,0(R9)
         NI    BYTE,15
         TR    BYTE,HEXTABLE
         MVC   1(1,R10),BYTE
         LA    R9,1(R9)
         LA    R10,2(R10)
         BCT   R11,HEXLOOP
         L     R14,HEXCHR         RESTORE REG 14
         BR    R14
GETFILEH DS    F
GETFILE  EQU   *
         ST    R14,GETFILEH       SAVE RETURN ADDR
         GET   INPUT,INREC        READ DUMP RECORD
         L     R14,GETFILEH       RESTORE REG 14
         BR    R14                GO BACK
PUTFILEH DS    F
PUTFILE  EQU   *
         ST    R14,PUTFILEH       SAVE RETURN ADDR
         PUT   WORKFL,WFREC       PUT WORK FILE REC
         MVC   WFREC,=C' '
         MVC   WFREC+1(79),WFREC  CLEAR WORK FILE RECORD
         L     R14,PUTFILEH       RESTORE REG 14
         BR    R14                GO BACK
         LTORG
**************** C O N S T A N T S ******************
DWORD    DC    D'0'
PICK     DC    X'00'
BYTE     DC    C' '
MASK     DC    XL6'402020202020'
CNTR     DC    PL3'0'
SW49     DC    C'0'
FDTIME   DS    CL7
SCTBL    DS    0CL91
         DC    X'89'
         DC    CL8'RSA'
         DC    X'8A'
         DC    CL8'TCA'
         DC    X'8B'
         DC    CL8'LLA'
         DC    X'8C'
         DC    CL8'USER'
         DC    X'8D'
         DC    CL8'TRANDATA'
         DC    X'8E'
         DC    CL8'TEMPSTRG'
         DC    X'8F'
         DC    CL8'FILE'
         DC    X'9B
         DC    CL8'JCA'
         DC    X'9D'
         DC    CL8'DWE'
         DC    X'9E'
         DC    CL8'MAPCOPY'
         DC    X'FF'
HEXTABLE DC    C'0123456789ABCDEF'
RECTP    DS    CL1
WFREC    DS    0CL80
WFRT     DS    CL1
WFSTG1   DS    CL8
WFSTG2   DS    CL6
WFSTG3   DS    CL8
WFSTG4   DS    CL4
WFSTG5   DS    CL8
WFSTG6   DS    CL5
WFSTG7   DS    CL30
         DC    CL10' '
INPUT    DCB   DSORG=PS,MACRF=GM,EODAD=EOJ,DDNAME=DUMPIN
WORKFL   DCB   DSORG=PS,MACRF=PM,DDNAME=WORKFL,RECFM=FB,LRECL=80,      X
               BLKSIZE=6320
INREC    DS    CL32760
         COPY  DFHDCRDS
         END


DUMPPRT SOURCE CODE

         TITLE 'DUMPPRT - PRINT FORMATTED DUMP STORAGE CHAINS'
DUMPPRT  CSECT
         USING *,R15
         STM   R14,R12,12(R13)    SAVE BACKWARD
         LA    R15,SAVEAREA       OUR SAVE
         ST    R15,8(R13)         SAVE FORWARD POINTER
         ST    R13,4(R15)         SAVE BACKWARD POINTER
         LR    R13,R15            POINT REG 13 TO SAVEAREA
         DROP  R15
         USING SAVEAREA,R13
         B     BEGIN
SAVEAREA DS    18F                OUR SAVE AREA
BEGIN    EQU   *
         OPEN  (PRINTER,OUTPUT,FDFILE)
READ     EQU   *
         MVC   FDKEY,=C'A00000001' RECORD KEY
         BAL   R14,GETFILE        GET VSAM RECORD
         MVC   HEADDT,FDSTG6    PUT DATE OF DUMP IN HEADER
         MVC   HEADTM(2),FDSTG2  MOVE HOURS TO HEADER
         MVC   HEADTM+3(2),FDSTG2+2 MOVE MINUTES TO HEADER
         MVC   HEADTM+6(2),FDSTG2+4 MOVE SECONDS TO HEADER
         MVC   HEADRGN,FDSTG5    MOVE APPLID
         BAL   R14,PUTHDR       GO PRINT HEADER LINES
LOOP1    EQU   *
         MVI   RT,C'B'          USER TCA RECORD TYPE
         AP    CNTR,=P'1'
         UNPK  SEQ,CNTR
         MVZ   SEQ+7(1),=X'F0'
         BAL   R14,GETFILE        GET USER TCA RECORD
         MVC   SAVADDR,FDSTG5     SAVE ADDR OF SYSTEM TCA
         MVC   STSKIND,FDSTG7
         CLC   FDSTG3(2),=C'01'   IS THIS A TERMINAL TCAFCAAA
         BNE   GETC
         MVC   SEQ,FDSTG3        TCTTE ADDRESS
         MVC   SEQ(2),=C'00'
         MVI   RT,C'E'           TCTTE RECORD TYPE
         BAL   R14,GETFILE       GET TCTTE RECORD
         MVC   STERM,FDSTG2      MOVE TERMID TO DETAIL PRT REC
GETC     EQU   *
         MVI   RT,C'C'          SYSTEM TCA RECORD TYPE
         MVC   SEQ,SAVADDR      SYSTEM TCA ADDR
         BAL   R14,GETFILE
         MVC   STASK,FDSTG6     MOVE RECORD FIELDS TO REPORT LINE
         MVC   STRAN,FDSTG4
         MVC   SPROG,FDSTG5
         MVC   SLENG,FDSTG2
         MVC   SADDR,FDSTG1
         MVC   STYPE(7),=C'* TCA *'
         BAL   R14,PUTPRT       PRINT DETAIL RECORD
         MVC   SAVADDR,FDSTG1   SAVE SYSTEM TCA ADDR
         CLC   FDSTG1,FDSTG3    DOES NEXT STORAGE POINT TO TCA
         BE    LOOP1             YES...GET NEXT USER TCA
         MVI   RT,C'D'           TASK ASSOC. STORAGE RECORD
LOOP2    EQU   *
         MVC   SEQ,FDSTG3        ADDR OF STORAGE
         BAL   R14,GETFILE
         CLI   RT,C'X'           DID WE GET THE RECORD OK
         BNE   LOOP2A
         MVC   STYPE(7),=C'=ERROR='   INDICATE NEXT CHAIN MISSING
         MVC   SADDR,SEQ           ADDR OF MISSING STORAGE
         BAL   R14,PUTPRT
         B     LOOP1             GET NEXT TCA
LOOP2A   EQU   *
         MVC   SLENG,FDSTG2      MOVE RECORD FIELDS TO REPORT
         MVC   STYPE,FDSTG5
         MVC   SADDR,FDSTG1
         BAL   R14,PUTPRT
         MVI   FDFLAG,C'X'       INDICATE THAT THIS REC. WAS USED
         PUT   RPL=RPL1          UPDATE RECORD
         LTR   R15,R15
         BNZ   DUMP
         CLC   SAVADDR,FDSTG3    ARE BACK TO TCA YET?
         BNE   LOOP2             NO. GET NEXT RECORD
         B     LOOP1             YES. GET NEXT USER TCA
ENDRAND  EQU   *
         MODCB RPL=RPL1,OPTCD=(KEY,SEQ,MVE,KGE)
         MVC   FDKEY,=C'D00000000' RECORD KEY TO START SEQ GET WITH
         POINT RPL=RPL1
         MVC   HEADER+5(17),=C'UNCHAINED STORAGE'
         BAL   R14,PUTHDR
GETSEQ   EQU   *
* READ EVERY RECORD IN THE VSAM FILE. PRINT THE STORAGE RECORDS
* THAT ARE NOT ON ANY TCA CHAIN DUE TO STORAGE OVERLAYS.
         BAL   R14,GETFILE
         CLI   FDRT,C'D'       IS THIS A 'D' RECORD
         BNE   GETSEQ          NO.. GET NEXT REC
         CLI   FDFLAG,C'X'     WAS STORAGE CHAINED OK
         BE    GETSEQ          YES.. GET NEXT REC
         MVC   SLENG,FDSTG2
         MVC   STYPE,FDSTG5
         MVC   SADDR,FDSTG1
         BAL   R14,PUTPRT      PRINT UNCHAINED STORAGE LINE
         B     GETSEQ
EOJ      EQU   *
         CLOSE FDFILE            DUMP INFO FILE
         CLOSE PRINTER           REPORTS
         L     R13,SAVEAREA+4    POINT TO BACKWARD SAVE
         LM    R14,R12,12(R13)    RESTORE CALLERS REGS
         SR    R15,R15            CLEAR RETURN CODE
         BR    R14                RETURN TO CALLER
GETFILEH DS    F
GETFILE  EQU   *
         ST    R14,GETFILEH       SAVE RETURN ADDR
         GET   RPL=RPL1           READ VSAM RECORD
         LTR   R15,R15            CHECK FOR VSAM ERROR
         BNZ   ERROR
         L     R14,GETFILEH       RESTORE REG 14
         BR    R14                GO BACK
ERROR    EQU   *
         TESTCB RPL=RPL1,FDBK=16    TEST FOR NO RECORD FOUND
         BNE   CHKEOF
         CLI   RT,C'B'          WERE WE LOOKING FOR A TCA
         BE    ENDRAND          YES.. END OF RANDOM ACCESS
         MVI   RT,C'X'          INDICATE RECORD NOT FOUND
         L     R14,GETFILEH       RESTORE REG 14
         BR    R14                GO BACK
CHKEOF   EQU   *
         TESTCB RPL=RPL1,FDBK=4    TEST FOR END OF FILE
         BE    EOJ
DUMP     EQU   *
         DC    X'0000'
PUTPRTHR DS    F
PUTPRT   EQU   *
         ST    R14,PUTPRTHR       SAVE RETURN ADDR
         PUT   PRINTER,DETAIL
         MVC   DETAIL+1(132),DETAIL  CLEAR PRINT LINE
         AP    LC,=P'1'        INCR LINE COUNT
         CP    LC,#MAXLINE     CHECK FOR PAGE OVERFLOW
         BL    PUTPRTBY        ...NO, BYPASS HEADER
         BAL   R14,PUTHDR      GO DO HEADER PRINT
PUTPRTBY EQU   *
         L     R14,PUTPRTHR    RESTORE REG 14
         BR    R14             GO BACK
PUTHDRHR DS    F
PUTHDR   EQU   *
         ST    R14,PUTHDRHR    SAVE RETURN ADDR
         PUT   PRINTER,HEADER
         PUT   PRINTER,HEADER2
         PUT   PRINTER,DETAIL    FOR BLANK LINE AFTER HEADER LINES
         ZAP   LC,=P'3'          INCR LINE COUNT FOR HEADER LINES
         L     R14,PUTHDRHR      RESTORE REG 14
         BR    R14               GO BACK
         LTORG
**************** C O N S T A N T S ******************
#MAXLINE DC    P'60'
LC       DC    PL2'0'
CNTR     DC    PL3'0'
SAVADDR  DS    CL8
FDKEY    DS    0CL9
RT       DS    CL1
SEQ      DS    CL8
HEADER   DS    0CL133
         DC    C'1'
         DC    C'       STORAGE CHAINS FROM FORMATTED DUMP    DATE '
HEADDT   DC    CL5' '
         DC    C'  TIME '
HEADTM   DC    C'  :  :  '
         DC    CL5' '
         DC    C'REGION '
HEADRGN  DC    CL8' '
         DC    CL43' '
HEADER2  DS    0CL133
         DC    C' '
         DC    C'STORAGE ADDR   STORAGE TYPE     LENGTH  '
         DC    C' TCATCEI                         '
         DC    C' TRAN    PROGRAM      TERMINAL    TASK'
         DC    CL21' '
DETAIL   DS    0CL133
         DC    CL3' '
SADDR    DC    CL8' '
         DC    CL7' '
STYPE    DC    CL8' '
         DC    CL6' '
SLENG    DC    CL6' '
         DC    CL4' '
STSKIND  DC    CL30' '
         DC    CL3' '
STRAN    DC    CL4' '
         DC    CL4' '
SPROG    DC    CL8' '
         DC    CL7' '
STERM    DC    CL4' '
         DC    CL5' '
STASK    DC    CL5' '
         DC    CL21' '
FDFILE   ACB   MACRF=(KEY,DIR,SEQ,OUT),DDNAME=FDFILE
RPL1     RPL   ACB=FDFILE,                                             X
               AREA=FDREC,                                             X
               AREALEN=80,                                             X
               RECLEN=80,                                              X
               OPTCD=(KEY,DIR,MVE,UPD),                                X
               ARG=FDKEY
PRINTER  DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=133
FDREC    DS    0CL80
FDRT     DS    CL1
FDSTG1   DS    CL8
FDSTG2   DS    CL6
FDSTG3   DS    CL8
FDSTG4   DS    CL4
FDSTG5   DS    CL8
FDSTG6   DS    CL5
FDSTG7   DS    CL30
         DS    CL9
FDFLAG   DS    CL1
         END


Richard Durkee
Systems Programmer
St Joseph Hospital (USA)

