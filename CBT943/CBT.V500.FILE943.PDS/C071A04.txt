Deadlocks - programming considerations

CICS does not provide general facilities for the detection of, or
the recovery from, deadlocks between tasks or within a task.
However, the application programmer can reduce the
possibility of some types of deadlock and prevent other types
completely by being aware of the factors causing them and
following certain design and programming rules.

The combinations of resources potentially causing deadlocks
can be very complex.  For example, the resources involved
may be those associated with a particular dataset, a group of
datasets, multiple resource types within a single CICS system,
multiple CICS systems on a single CPU, or multiple CPUs.

This article describes the types of deadlock that can occur
within a single CICS system when accessing VSAM datasets
using File Control.


EXCLUSIVE CONTROL CONCEPTS

Access to VSAM datasets goes through checks for exclusive
control in both CICS and VSAM.  CICS exclusive control
serializes updates, insertions, and deletions of individual
records in a recoverable file (a file with LOG=YES specified in
the DFHFCT TYPE=DATASET macro).  The exclusive
control lasts until a syncpoint is taken or the transaction
terminates.

VSAM exclusive control serializes requests that change
individual control intervals (which may contain more than one
record), regardless of the CICS recovery specification.  It
distinguishes between shared use and exclusive use, and the
control lasts until the request or a series of related requests has
ended.


EXCLUSIVE CONTROL CONFLICT

A File Control request from a CICS task requires VSAM to
establish position within a control interval.  In some cases this
position is retained after control has been returned to the
application.  If position is retained and a subsequent request is
issued (from this task or another) which involves the same
control interval, an "exclusive control conflict" may be
signalled by VSAM to CICS.

When this happens, CICS or VSAM, depending on the type of
conflict, will queue the second request until the first position is
released.  The rules regarding exclusive control conflict vary
according to the types of request involved and whether or not
the dataset is participating in VSAM Local Shared Resources
(LSR).  Use of LSR is specified by SERVREQ=SHARE in the
DFHFCT TYPE=DATASET macro.


TYPES OF DEADLOCK

It is useful to distinguish between two major categories of
deadlock: those within a task and those between multiple tasks.

The application programmer can prevent deadlocks caused by
contention for VSAM resources within a single task and can
reduce the probability of deadlocks between multiple tasks.

Deadlocks within a single task

A type of deadlock can arise where a task issues an unsuitable
sequence of File Control requests against a particular VSAM
dataset.  Such cases can always be prevented by careful
program design.  Suppose a task issues a VSAM request which
establishes position within a control interval and then returns
control to the application program.  If the application then
issues another request against the same dataset and it happens
to involve the same control interval, exclusive control conflict
may be signalled.  The task is then forced into a permanent
wait.

Normally, the application program does not know how records
are grouped into control intervals because this grouping can be
changed at any time by the systems programmer.  Therefore,
the applications programmer should be aware that the records
being accessed in any two requests could be in the same control
interval.

Potential deadlock of this kind can be prevented by observing
the restrictions detailed later in this article.  These are more
stringent for datasets using LSR.  However, LSR is widely
used and provides many benefits.  Even if the systems
programmer has not specified resource sharing for a particular
dataset, he may do so in the future.  Therefore it is strongly
recommended that applications are written to execute correctly,
ie without deadlocks, in an LSR environment.

Deadlocks between multiple tasks

A similar situation can arise where two or more tasks issue
unsuitable sequences of File Control requests, so that one task
holds some resources and wants a resource held by the other
task(s).  Consider an example of two tasks updating multiple
files.  If each task needs to update records held by the other in
order to complete, a deadlock  will occur.  The simple case of
two tasks and two files can of course be extended to involve
many tasks and/or many files.

The probability of this type of deadlock is reduced by a system
design in which all applications needing to update multiple
resources do so in the same order.  This may mean accessing
files in a certain order, and/or accessing records within a file by
key order.

DL/I provides a mechanism to detect deadlocks between tasks
caused solely by the contention for DL/I resources.  However
this can not detect deadlocks where non-DL/I resources are
involved as well as DL/I.

Use of VSAM paths

CICS supports access to a VSAM dataset (base cluster) through
one or more alternate index.  Retrieving a record through an
alternate index path is similar to retrieving it directly from the
base.  The application provides the alternate key as a search
argument and the record from the base dataset is returned to the
application.

The programmer must be aware that requests made through an
alternate index and those directly against the base can lead to
the same resource (base cluster control interval).  Similarly,
access through two different alternate index paths may lead to
the same data.  This has three application programming
implications.  The discussion below applies to multiple access
either through multiple alternate index paths or by an alternate
index path together with direct access to the base dataset.

CICS exclusive control with multiple paths

The first concern is the operation of CICS exclusive control
when accessing a record through multiple paths.  Since the
CICS exclusive control mechanism uses the key provided by
the application, the mechanism will not be effective in
serializing updates (including insertions and deletions) if they
are made through different paths.  Therefore, to preserve data
integrity, applications should always use the alternate index
paths for non-update retrievals or browses and perform
updates, insertions, and deletions through the FCT dataset
entry that describes the base (ie by use of the primary key).

VSAM exclusive control with multiple paths

The second area of concern is the operation of VSAM
exclusive control when accessing a record through multiple
paths.  VSAM makes the same type of check whether the
request is made directly against the base or through an alternate
index path.

The scope of these checks, for concurrent update requests
through multiple paths, varies between DOS and OS VSAM.
However, this does not pose any problems in the CICS
environment because, as stated above, CICS exclusive control
can not handle this anyway.  The recommendation is that
alternate index paths should be used for non-update reads and
browses only.  This ensures that the position for exclusive use
in a base dataset control interval will never be obtained by a
request through the alternate index.  However, even the read-
only access to the control interval (so-called "shared use")
through a path may still lead to exclusive control conflict with
update requests issued directly against the base.  This happens
when LSR is used as described below.

DL/I deadlock detection can also handle the use of multiple
paths, ie it can detect deadlocks arising from requests directly
against a physical database and through alternate index paths
(secondary indexes) to that database.

Multiple tasks using multiple paths

The third concern is that if separate tasks can use multiple
paths to access the same data and more than one file is
involved, it may be very difficult to enforce a fixed order of
data access so as to avoid multi-task deadlocks.

One approach is to use alternate indexes to access data in two
stages.  First an alternate index is accessed as a dataset in its
own right to provide the primary key of the desired record and
then it is retrieved through the base.  Access order can then be
based on the primary record keys only.  This approach however
complicates application programming and carries a
performance penalty.  It may not even be feasible if the
alternate keys themselves are subject to update.

Another approach is to ensure that a task never attempts to hold
a position in more than one file at a time.  Then the rules given
below, which prevent self-deadlock by individual tasks, will
also be sufficient to stop deadlocks arising between multiple
tasks from VSAM requests.  However, the restriction of
accessing only one file at a time may make programming quite
difficult.

LSR with multiple paths

As already stated, more cases of exclusive control conflict exist
in the LSR environment.  The potential for deadlock is
therefore greater and, correspondingly, the rules to avoid
deadlocks have to be more stringent.

CICS releases up to Version 1.6 inclusive do not formally
allow non-DL/I VSAM datasets with alternate index paths or
upgrade sets to participate in LSR.  However, some
installations have made a small modification to CICS to allow
datasets with alternate index paths to use LSR.  These
installations must take care to:

1      Define a DFHFCT TYPE=SHRCTL statement in such a
      way as to provide enough strings so that the string wait
      condition never arises in the LSR pool.

2      Provide the proper number and size of buffer pools and
      proper key length specifications to accommodate the
      alternate index paths and upgrade sets in LSR.

CICS File Control deadlocks

CICS 1.6.1 and up includes support for alternate index paths
and upgrade sets in LSR.  CICS correctly handles the
allocation for VSAM"s use of additional strings internally for
upgrade sets, but it is still important to provide ample extra
LSR strings and buffers to avoid delays.  Any ability to use
alternate index paths and upgrade sets under LSR is still subject
to the constraint stated above that updates should only be made
through the base.


SUMMARY

CICS permits the following types of request against VSAM
files:

o      Direct read-only access to one record - in macro-level
      programs only, this can optionally use VSAM locate mode
      GET instead of the more usual move mode.

o      Read-only sequential browsing through multiple records -
      again, macro-level programs can use VSAM move mode
      or locate mode, but, as far as we are concerned, there is no
      difference in the effect on positioning.

o      Direct read for update access to a record in order to change
      or delete it.

o      Direct update or deletion of a record after a previous read
for update.

o      Stand-alone deletion of a record or a group of adjacent
      records - in this case CICS achieves the deletion by issuing
      one or more pairs of requests to VSAM, each comprising a
      GET for update followed by an ERASE.

o      Direct insertion (adding) of a single record and sequential
      insertion of multiple records (so called "mass insert").

These are listed below with the level of VSAM access required
(shared or exclusive access to the control interval) and also
showing whether or not, from the application programming
viewpoint, position in the VSAM control interval is retained
when control is returned from CICS to the application program.
Retention of position always corresponds to retention of a
VSAM string.

CICS File Control request type      Access      Position held?
Direct read-only (move mode)      Shared      No
Direct read-only (locate mode)      Shared      Yes
Read-only sequential browse
(move mode or locate mode)      Shared      Yes
Read-for-update      Exclusive      Yes
Direct update or delete after read      Exclusive      No
Stand-alone delete      Exclusive      No
Direct insertion      Exclusive      No
Sequential insertion      Exclusive      Yes

The rules for exclusive control conflict are as follows:

o      In the non-LSR environment, VSAM will reject a request
      requiring exclusive access to a control interval if position
      for exclusive access is currently held by another string, ie
      exclusive access only affects other update requests.

o      In the LSR environment, VSAM will reject a request
      requiring exclusive access to a control interval if any
      position (shared or exclusive) is currently held by another
      string and it will reject any request for access to a control
      interval if position for an exclusive access is currently held
      by another string.

Thus, for example, in the non-LSR environment, a direct add
would be rejected if another task has an outstanding read-for-
update against the same control interval or was in the middle of
another direct add or a stand-alone delete against the same
control interval, but read-only requests would still be accepted.
Also the direct add would be OK if another task was merely
browsing that control interval.

By contrast, in the LSR environment, a direct add (or any other
request needing exclusive access) will be rejected even if
another task is just holding position in the control interval with
a browse or if a direct read I/O is just taking place for a record
in the control interval.  Conversely, even read-only requests
will be rejected if another task is holding update position in the
control interval (eg between READ UPDATE and PUT
UPDATE).

It is important to distinguish between the possibility of a task
being delayed because of conflict with other tasks already
accessing the file and the possibility of deadlocks.  Deadlocks
can only occur if the task(s) involved is already holding one
position in the file when it makes a new request.

For example, stand-alone delete does not retain position once
the request has been processed.  Stand-alone deletes cause
multiple VSAM requests (at least two and in some "generic
deletes" possibly twenty or more).  Such requests may well
take some time to execute.  During this time, the task
requesting the deletion might run into, or cause, conflict with
other update tasks, so that one or other of the tasks has to wait,
but this does not mean that the tasks are deadlocked.  A task
could only get into a deadlock on a stand-alone delete request
if, as a result of a previous request, it was already holding a
conflicting position among the records it wanted to delete.


DETAILED PROGRAMMING RULES TO AVOID DEADLOCK

The next two sections of this article list and explain the rules to
be followed in CICS application programs to prevent tasks
deadlocking  themselves in their requests to access a VSAM
file.  They apply to each separate file under consideration.
However, to ensure tasks do not deadlock each other, programs
must treat the rules as if the requests for separate files were all
directed to the same file.

File Control requests in command-level programs

File Control commands against VSAM datasets can be
categorized by whether they require exclusive use or shared use
of a control interval, and whether they hold position when
return is made to the application.

      Require exclusive use      Require shared use
Hold position      READ UPDATE      READNEXT
            READPREV
      WRITE MASSINSERT      STARTBR RESETBR
Do not hold      WRITE  REWRITE      READ
position      DELETE
      DELETE RIDFLD

A delete without the RIDFLD option must be preceded by a
read for update, as must a rewrite.  A delete with RIDFLD
request results in CICS performing the equivalent of an internal
READ UPDATE followed by DELETE without RIDFLD (if
the delete is for a generic key, this sequence may be repeated
for further records).


CICS FILE CONTROL DEADLOCKS

There are three distinct types of potential deadlock and
corresponding rules when accessing VSAM datasets through
File Control commands.  A task can deadlock itself in the
following cases:

1      A task holds position for exclusive use over a control
      interval  and attempts to do another operation requiring
      exclusive use.  If a task has done a READ UPDATE and
      attempts a READ UPDATE, DELETE with RIDFLD, and
      WRITE; or if it has done a WRITE MASSINSERT and
      attempts a READ UPDATE, DELETE with RIDFLD, or
      WRITE without MASSINSERT, a deadlock may occur.
      Also, a second WRITE MASSINSERT with a non-
      ascending key can cause a deadlock.  To prevent
      deadlocks, the programmer should release position before
      attempting another operation requiring exclusive use.
      Follow a READ UPDATE with a REWRITE, DELETE
      without RIDFLD, or UNLOCK.  Follow a WRITE
      MASSINSERT by another WRITE MASSINSERT with an
      ascending key or release position with an UNLOCK.
      CICS provides some degree of protection by returning
      INVREQ when two READ UPDATE commands are
      received against the same dataset without an intervening
      command to release position.

2      In the LSR environment only, a task holds position for
      exclusive use over a control interval and attempts to do an
      operation requiring shared use.  If a task has done a READ
      UPDATE or WRITE MASSINSERT and attempts a
      browse (STARTBR) or non-update READ, a deadlock
      may occur.  The browse or non-update READ may be
      directly against the base dataset or through an alternate
      index path.  To prevent deadlocks, the programmer should
      release position as described in 1 above before attempting
      any other operation on the dataset, not just an operation
      requiring exclusive use.

3      In the LSR environment only, a task holds position for
      shared use over a control interval, and attempts to do an
      operation requiring exclusive use.  If a task is in the middle
      of a browse after doing a STARTBR, RESETBR,
      READNEXT, or READPREV and attempts a READ
      UPDATE, DELETE with RIDFLD, or WRITE, a deadlock
      may occur.  The browse may have been done directly
      against the base dataset or through an alternate index path.

To prevent deadlocks, the programmer should release position
by ending all browses on the dataset with ENDBR before
attempting an operation requiring exclusive use.


SUMMARY OF RULES FOR COMMAND-LEVEL PROGRAMS

In summary, command-level programmers will prevent
exclusive use deadlocks by following these rules:

1      All applications should update multiple VSAM datasets in
      the same order.

2      Follow a READ UPDATE by a REWRITE, DELETE
      without the RIDFLD option, or UNLOCK, before
      performing any other operation on the same dataset .

3      Follow a WRITE MASSINSERT by another WRITE
      MASSINSERT with an ascending key, or release position
      with an UNLOCK, before performing any other operation
      on the same dataset.

4      End all browses (including those through alternate index
      paths) with ENDBR, before issuing any of the commands
      READ UPDATE, DELETE-RIDFLD, or WRITE to the
      same dataset.

A Y Khan
Systems Programmer (Saudi Arabia)

