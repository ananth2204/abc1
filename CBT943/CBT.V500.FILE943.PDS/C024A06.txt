 CICS HANDLE commands versus RESP/RESP2

I read Larry Goldstein's article on CICS HANDLE commands in the July issue of
CICS Update with considerable interest.  As a data processing consultant, I have
encountered many different sets of CICS program design and coding standards.
Because different installations have different needs, what is required at one
installation may very well be forbidden at another.  It's worthwhile to evaluate
several alternatives to find the one most suitable for your installation.  Larry
Goldstein's routine represents one possibility for dealing with command-level
return code testing within the context of structured programming, but other
possibilities exist as well.

On page 31, Goldstein mentions several drawbacks of CICS HANDLE CONDITION and
HANDLE AID commands.  The first, second, and third of these drawbacks apply to
HANDLE commands, not to RESP/RESP2; the fourth drawback applies to a conflict
which could occur between RESP/RESP2 and HANDLE AID, if both are being used in
the same program.  In view of this, an alternative way to deal with error
handling in a CICS 1.7 installation would be to eschew the use of HANDLE AID and
HANDLE CONDITION entirely, substituting the RESP/RESP2 options for error
handling, and testing the contents of the EIBAID field to determine what
function key the terminal user has pressed.  If desired, standard code routines
could be provided by the installation for testing these fields.

Unlike the use of CICS HANDLE commands, testing of the contents of the RESP,
RESP2, and EIBAID fields is done entirely in the application program and does
not involve generation of GOTO logic.  I must qualify Goldstein's statement that
"even the improvements in CICS Release 1.7 continue to enforce the use of the GO
TO DEPENDING ON structure, turning conditions on and off permanently or
temporarily".  The fact that use of the RESP option implies NOHANDLE is a
relevant issue only in those application programs which contain CICS HANDLE
commands.  If you are not using HANDLE commands, the status of the condition
does not matter.

Not every installation is running under CICS 1.7.  Some installations prefer to
check for only a few exceptional conditions, allowing CICS default error
handling to take care of the other situations.  If your error handling needs are
relatively simple, and if you don't have (or prefer not to use) the RESP/RESP2
option, there is a way to tame the HANDLE CONDITION command so that it won't
unduly violate the structure of your application program.  This can be done by
confining the effect of the HANDLE to a very small area of the program.  Here is
an example:

     5000-READ-NEXT-ACCTSREC.
         EXEC CICS HANDLE CONDITION
              ENDFILE (5010-ACCTSREC-EOF)
              END-EXEC.
         EXEC CICS READNEXT
              DATASET('ACCTSREC')
              INTO(WS-ACCTSREC)
              LENGTH(WS-ACCTSREC-LENGTH)
              RIDFLD(CUSTOMER)
              END-EXEC.
         GO TO 5050-RESET.
     5010-ACCTSREC-EOF.
         MOVE "E" TO WS-ACCTSREC STATUS.
     5050-RESET.
         EXEC CICS HANDLE CONDITION
             ENDFILE
             END-EXEC.
     5099-EXIT.
         EXIT.

This routine would be PERFORMed whenever there was a need to read another
ACCTSREC record.  The calling routine would simply check WS-ACCTSREC-STATUS to
determine whether end of file had been reached.  Any conditions other than
normal and end of file would trigger the default CICS error handling.  For most
 abnormal conditions, this involves an ABEND with code AE1n, where n indicates
the type of abnormal condition encountered.  Notice that the HANDLE is reset
before leaving the routine, so that it will not affect other program logic.  For
greater efficiency, this routine should be located in the program near to the
calling routine which invokes it most often.

Once again, because of the implied GOTO DEPENDING ON logic which it generates, I
recommend avoiding the use of HANDLE AID.  Instead, test the contents of the
EIBAID field.  You can use HANDLE CONDITION in a program without also having to
use HANDLE AID.

Will these routines provide enough error handling?  CICS default error handling
might very often be exactly what you want.  Under most circumstances, if your
program encounters a severe error, ABENDing is a perfectly appropriate response.
It makes sense to test for an abnormal condition only if there is something else
you want to do in your application program when you find that condition.
NOTFND, ENDFILE, and MAPFAIL are conditions which you would very often want to
trap in your program.  Depending upon your site's operating procedures, you
might want to trap NOTOPEN (under releases prior to 1.7) and DISABLED in order
to send a message to the terminal user asking them to contact the master
terminal operator.

What about placing a standard routine in your application programs to diagnose
more serious exceptional conditions?  If good dump diagnostic packages are
unavailable at your site, it may make sense to use a standard routine that tests
for every possible condition and produces various terminal messages, log
entries, and so forth.  After this takes place, however, it might make sense for
the error handler to invoke the CICS ABEND command to terminate the transaction,
roll back pending updates, and produce a dump.  If you do have a good dump
diagnostic package at your site, there is generally no reason to duplicate its
logic in each of your application programs.  In that case, it is best to let
CICS abend the task as close as possible to the place where the problem
occurred.  Inserting your own error handling logic might cloud the evidence.

Standard methods for condition handling should be chosen to reflect the needs of
each installation.  It's very important to be consistent in the application of
those standards, so that the same type of condition is always handled in the
same way unless there is a well-thought-out reason to make an exception.



Alida M Jatich
Alida Jatich Consulting (USA) ) Alida M Jatich 1987























