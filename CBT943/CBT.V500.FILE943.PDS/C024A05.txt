 Integrated map generator


BACKGROUND

Recently I wrote a simple CICS routing program in macro-level Assembler and
decided to integrate the map within the body of the program (the advantages of
which are discussed below).  I achieved this by using a Terminal Control Write
(DFHTC) instead of BMS mapping.  But as all systems programmers know, building
basic native mode datastreams is time consuming.  Therefore, I took this idea of
an integrated map one stage further by writing a macro (MAPGEN) to generate a
map rather than using the tedious method of referring to the 3270 Reference Card
for SBA addresses, attribute bytes etc.

The net result is a CICS program with an integrated physical map requiring one
entry in the PPT instead of two as with the traditional method of a program plus
a separate map.

ADVANTAGES

The advantages of having an integrated map are:

%    BMS is not used (a DFHTC is used instead) thus saving approximately five
GETMAINs and also reducing the path length of such an operation.

%    A MAP LOAD is avoided, which can save up to 300 milliseconds depending on
whether the map is resident or not in DSA storage.

%    Locality of reference is vastly improved, thus reducing the possibility of
CICS or operating system paging.

The advantage of using a macro to generate SBA addresses, attributes, map length
etc is obviously to save time and effort in retrieving this data from the
relevant manual and transcribing this data into a program.


RESTRICTIONS

It must be pointed out that in its present form the MAPGEN macro creates a map
capable only of routing to other applications via PF or PA keys;  this means
there is no facility to define input fields and thus no facility to read in
variable input data.  However, it would not be difficult to alter the MAPGEN
macro to include this facility as long as the routing program regains control to
check these input fields.


USING THE MAPGEN MACRO

The MAPGEN macro mirrors the format of a typical CICS macro insofar as there are
three sub-functions:

     MAPGEN  TYPE=INITIAL,.....
     MAPGEN  TYPE=BUILD,.......
     MAPGEN  TYPE=FINAL


TYPE=INITIAL,TRANS=nnnn

The INITIAL function initialises the macro global definitions and builds the
first part of the basic native mode datastream; where 'nnnn' is the four-
character identification of the next transaction to be executed.  This
transaction-id will be stored in the map as zero intensity and MDT on.

Note:  if nnnn = MESS, MAPGEN builds a basic native mode message rather than a
complete map.  This function could, for example, be used for writing an error
message on a particular line on the screen.


TYPE=BUILD,L=line,C=col,LEN=len,CONT=con,ATT=attr

The BUILD function calculates the SBA addresses and loads the field contents and
attributes into the 3270 datastream; where:

line =    line number of field
col  =    column number of field
len  =    field length
con  =    contents of the field (ie text)
attr =    field attributes (OPTIONAL)


TYPE=FINAL

The FINAL function calculates the total map length and generates the code
necessary to display the map.


ENVIRONMENT

The macro was developed in the following environment:

%    Hardware - 43xx series
%    Software - VM Release 4, VSE/SP Release 2, CICS 1.6.


SAMPLE PROGRAM

Included with this documentation is a sample program that highlights the use of
the MAPGEN macro in two separate cases.

In the first case a complete set of macros (ie INITIAL, BUILD, and FINAL) is
used to generate a full screen map.  In the second case the macros simply
generate a one-line error message that will be displayed on line 24.


Source code for MAPGEN macro

         MACRO
         MAPGEN &TYPE=,                                              C
               &TRANS=,                                              C
               &L=,                                                  C
               &C=,                                                  C
               &LEN=,                                                C
               &ATT=(N),                                             C
               &CONT=
.* ********************************************* *
.*  &TYPE   -  INITIAL (SET UP GLOBALS)          *
.*             BUILD   (BUILD FIELDS)            *
.*             FINAL   (COMPLETE MAP)            *
.*  &TRANS  -  NEXT TRANSACTION ID               *
.*          -  OR 'MESS' (MESSAGES)              *
.*  &L      -  LINE                              *
.*  &C      -  COLUMN.                           *
.*  &LEN    -  FIELD LENGTH.                     *
.*  &ATT    -  DEFAULTS  -  PROTECTED,           *
.*                       -  NORMAL INTENSITY,    *
.*                       -  AUTO SKIP,           *
.*                       -  ALPHAMERIC,          *
.*             H = HIGH INTENSITY,               *
.*             Z = ZERO INTENSITY.               *
.*  &CONT   -  FIELD CONTENTS                    *
.* ********************************************* *
.* DEFINE GLOBALS
          GBLA &BLDCNT         TYPE=BUILD COUNT
         GBLA &INITCNT        TYPE=INITIAL COUNT
         GBLA &MSIZE          MAP SIZE
         GBLB &BBBS(8)        8 BITS USED TO CREATE HEX FIELDS
         GBLC &DEFSF          START FIELD
         GBLC &DEFSBA         SET BUFFER ADDRESS
         GBLC &DEFIC          INSERT CURSOR
         GBLC &DEFATT         DEFAULT ATTRIBUTE
         GBLC &MAPSW          MAP OR MESSAGE
.* DEFINE LOCALS
         LCLA &DECPOS
         LCLA &COLUMNS
         LCLA &SBAA           MTH ENTRY IN TABLE FOR 1ST SBA BYTE.
         LCLA &SBAB           NTH ENTRY IN TABLE FOR 2ND SBA BYTE.
         LCLA &WORK1
         LCLA &WORK2
         LCLC &SBA1           1ST SBA BYTE.
         LCLC &SBA2           2ND SBA BYTE.
         LCLC &SBAS(64)       TABLE FOR SBA'S (SET BUFFER ADDRESS)
&COLUMNS  SETA  80
.* INITIALISE LOCALS FOR SBA ADDRESSES.
&SBAS(1)  SETC  ' '
&SBAS(2)  SETC  'A'
&SBAS(3)  SETC  'B'
&SBAS(4)  SETC  'C'
&SBAS(5)  SETC  'D'
&SBAS(6)  SETC  'E'
&SBAS(7)  SETC  'F'
&SBAS(8)  SETC  'G'
&SBAS(9)  SETC  'H'
&SBAS(10) SETC  'I'
&SBAS(11) SETC  '"'
&SBAS(12) SETC  '.'
&SBAS(13) SETC  '<'
&SBAS(14) SETC  '('
&SBAS(15) SETC  '+'
&SBAS(16) SETC  '|'
&SBAS(17) SETC  '&&'
&SBAS(18) SETC  'J'
&SBAS(19) SETC  'K'
&SBAS(20) SETC  'L'
&SBAS(21) SETC  'M'
&SBAS(22) SETC  'N'
&SBAS(23) SETC  'O'
&SBAS(24) SETC  'P'
&SBAS(25) SETC  'Q'
&SBAS(26) SETC  'R'
&SBAS(27) SETC  '!'
&SBAS(28) SETC  '$'
&SBAS(29) SETC  '*'
&SBAS(30) SETC  ')'
&SBAS(31) SETC  ';'
&SBAS(32) SETC  'Â¬'
&SBAS(33) SETC  '-'
&SBAS(34) SETC  '/'
&SBAS(35) SETC  'S'
&SBAS(36) SETC  'T'
&SBAS(37) SETC  'U'
&SBAS(38) SETC  'V'
&SBAS(39) SETC  'W'
&SBAS(40) SETC  'X'
&SBAS(41) SETC  'Y'
&SBAS(42) SETC  'Z'
&SBAS(43) SETC  ' '
&SBAS(44) SETC  ','
&SBAS(45) SETC  '%'
 &SBAS(46) SETC  '_'
&SBAS(47) SETC  '>'
&SBAS(48) SETC  '?'
&SBAS(49) SETC  '0'
&SBAS(50) SETC  '1'
&SBAS(51) SETC  '2'
&SBAS(52) SETC  '3'
&SBAS(53) SETC  '4'
&SBAS(54) SETC  '5'
&SBAS(55) SETC  '6'
&SBAS(56) SETC  '7'
&SBAS(57) SETC  '8'
&SBAS(58) SETC  '9'
&SBAS(59) SETC  ':'
&SBAS(60) SETC  '#'
&SBAS(61) SETC  '@'
&SBAS(62) SETC  ''''
&SBAS(63) SETC  '='
&SBAS(64) SETC  '"'
.*  TEST MACRO FUNCTION
         AIF   ('&TYPE' EQ '').MN1
         AIF   ('&TYPE' EQ 'INITIAL').INIT
         AIF   ('&TYPE' EQ 'BUILD').BUILD
         AIF   ('&TYPE' NE 'FINAL').MN0
.* **************
.*  TYPE=FINAL  *
.* **************
.FINAL   ANOP
.* *****************************************
.*  CREATE CODE FOR BASIC NATIVE MODE MAP  *
.* *****************************************
         DS    0H
         LM    4,7,SAVE&INITCNT         SAVE REGISTERS
         B     GETS&INITCNT
SAVE&INITCNT    DS    4F
GETS&INITCNT    EQU   *
         DFHSC TYPE=GETMAIN,CLASS=TERMINAL,                          X
               INITIMG=00,                                           X
               NUMBYTE=&MSIZE
         L     TIOABAR,TCASCSA
         LA    4,TIOADBA                 TO TIOA
         LA    6,MSTA&INITCNT            FROM START OF MAP
         LA    5,&MSIZE                  LENGTH OF MOVE
         LA    7,&MSIZE                  LENGTH OF MOVE
         MVCL  4,6                       MOVE LONG (USES 4,5,6 + 7)
         MVC   TIOATDL(2),=H'&MSIZE'     STORE DATA LENGTH
         ST    TIOABAR,TCTTEDA
         AIF   ('&MAPSW' NE 'Y').MISWRI1
         DFHTC TYPE=(WRITE,ERASE,WAIT),CTLCHAR=C2
         AGO   .MISWRI2
.MISWRI1 ANOP
         DFHTC TYPE=(WRITE,WAIT),CTLCHAR=C2
.MISWRI2 ANOP
         STM   4,7,SAVE&INITCNT          RESTORE REGISTERS
         AGO   .MEND
.* ****************
.*  TYPE=INITIAL  *
.* ****************
.INIT    ANOP
         AIF   ('&INITCNT' GT '0').MISINIT
&INITCNT SETA  0
.MISINIT ANOP
&INITCNT SETA  &INITCNT+1
&BLDCNT  SETA  0                        BUILD MACRO USE COUNT
&MSIZE   SETA  0                        MAP SIZE
&BBBS(1) SETB  1
 &DEFSF   SETC  '000&BBBS(1)&BBBS(1)&BBBS(1)0&BBBS(1)'
&DEFSBA  SETC  '000&BBBS(1)000&BBBS(1)'
&DEFIC   SETC  '000&BBBS(1)00&BBBS(1)&BBBS(1)'
&DEFATT  SETC  '&BBBS(1)&BBBS(1)&BBBS(1)&BBBS(1)0000'
         AIF   ('&TRANS' EQ '').MN3
         AIF   (K'&TRANS GT 4).MN4
         DS    0H                       ALIGNMENT
         B     GETS&INITCNT             GOTO GET TERMINAL STORAGE
.*  IF TRANS = "MESS" THEN OMIT TRANSID CODE
         AIF   ('&TRANS' EQ 'MESS').MESONLY
MSTA&INITCNT   DC    X'1140401D7D'            START OF MAP.
         DC    C'&TRANS'
         DC    X'1DF0'                  END OF FIELD.
&MSIZE   SETA  &MSIZE+11                INCREMENT MAP SIZE.
&MAPSW   SETC  'Y'                      MAP
         AGO   .MEND
.MESONLY ANOP                           MESSAGES ONLY.
MSTA&INITCNT   DS    0H                       DUMMY START OF MAP.
&MAPSW   SETC  'N'                      NO MAP
         AGO   .MEND
.* **************
.*  TYPE=BUILD  *
.* **************
.BUILD   ANOP
&BLDCNT  SETA  &BLDCNT+1
         AIF   ('&L' EQ '').MN1
         AIF   ('&C' EQ '').MN1
         AIF   ('&LEN' EQ '').MN1
         AIF   ('&L' LT '1' OR '&L' GT '24').MN2
         AIF   ('&C' LT '1' OR '&C' GT '80').MN2
         AIF   ('&LEN' LT '1' OR '&LEN' GT '78').MN2
&DECPOS  SETA  (&L-1)*&COLUMNS+(&C-1)
&SBAA    SETA  &DECPOS/64
&WORK1   SETA  &SBAA*64
&SBAB    SETA  &DECPOS-&WORK1
&SBAA    SETA  &SBAA+1
&SBAB    SETA  &SBAB+1
&SBA1    SETC  '&SBAS(&SBAA)'
&SBA2    SETC  '&SBAS(&SBAB)'
.* *********************************
.*  BUFFER ADDRESS = SBA1 + SBA2   *
.* *********************************
         DC    B'&DEFSBA'
         DC    C'&SBA1'
         DC    C'&SBA2'
         DC    B'&DEFSF'
         AIF   ('&ATT(1)' EQ 'H').ATTH
         AIF   ('&ATT(1)' EQ 'Z').ATTZ
         DC    B'&DEFATT'
         AGO   .CONTENT
.ATTH    ANOP
         DC    X'F8'
         AGO   .CONTENT
.ATTZ    ANOP
         DC    X'7C'
.CONTENT ANOP
         AIF   ('&CONT' EQ '').MN5
&WORK2   SETA  (K'&CONT)                FIND LENGTH OF INPUT FIELDS
&WORK2   SETA  &WORK2-2                 REMOVE QUOTES
         DC    CL&WORK2&CONT            MOVE FIELD CONTENTS
         DC    X'1DF0'                  END OF FIELD
&MSIZE   SETA  &MSIZE+7+&WORK2
         AGO   .MEND
.* *********************** *
.*  MACRO NOTES OR ERRORS  *
.* *********************** *
 .MN0     MNOTE 2,'MACRO TYPE MUST BE "INITIAL", "BUILD" OR "FINAL"'
         AGO   .MEND
.MN1     MNOTE 2,'ROW, COLUMN AND LENGTH PARAMETERS MUST BE ENTERED'
         AGO   .MEND
.MN2     MNOTE 2,'PARAMETERS MUST FALL WITHIN THE FOLLOWING RANGES :'
         MNOTE 2,'LINE    :  1 - 24'
         MNOTE 2,'COLUMN  :  1 - 80'
         MNOTE 2,'LENGTH  :  1 - 78'
         AGO   .MEND
.MN3     MNOTE 2,'NEXT TRANSACTION ID NOT GIVEN ON TYPE=INITIAL'
         AGO   .MEND
.MN4     MNOTE 2,'TRANSACTION ID MUST NOT BE GREATER THAN 4 BYTES'
         AGO   .MEND
.MN5     MNOTE 2,'NO FIELD CONTENTS DEFINED'
         AGO   .MEND
.MEND    ANOP
         MEND
         END


Sample program

TIOABAR  EQU   10
TCTTEAR  EQU   11
         COPY  DFHTIOA
         COPY  DFHTCTTE
         COPY  DFHTCADS
         COPY  DFHCSADS
         CSECT
         BALR  2,0                      PROGRAM ADDRESSABILITY
         USING *,2
         L     TCTTEAR,TCAFCAAA         CICS ADDRESSABILITY
         CLI   TCTTEAID,X'7D'           ENTER PRESSED ?
         BE    GENERATE
         CLI   TCTTEAID,X'7C'           PF12  PRESSED ?
         BE    RETURN
*  TEST PF KEYS  *
         LA    3,PFTAB                  ADDRESS PF KEY TABLE
PFLOOP   CLC   0(1,3),TCTTEAID          CHECK FOR MATCHING PF KEYS
         BNE   BUMPREG                  - NO THEN CHECK NEXT ENTRY.
         MVC   TCAPCPI(8),1(3)          MOVE IN XTCL PROGRAM NAME.
         DFHPC TYPE=XCTL                TRANSFER TO RELEVANT PROGRAM.
BUMPREG  CLC   0(3,3),=C'END'           END OF TABLE ?
         BE    ERR1                     - YES THEN ERROR
         LA    3,9(3)                   INCREMENT POINTER
         B     PFLOOP                   LOOP
*  GENERATE INTEGRATED MAP  *
GENERATE MAPGEN TYPE=INITIAL,TRANS=TA01
         MAPGEN TYPE=BUILD,L=1,C=16,LEN=41,CONT='TEST PROGRAM FOR INTEGC
               RATED MAP GENERATOR',ATT=(H)
         MAPGEN TYPE=BUILD,L=2,C=16,LEN=41,CONT='**********************C
               *******************',ATT=(H)
         MAPGEN TYPE=BUILD,L=12,C=38,LEN=34,                           C
               CONT='ACCOUNTS       -        PRESS  PF1'
         MAPGEN TYPE=BUILD,L=14,C=38,LEN=34,                           C
               CONT='SALES LEDGER   -        PRESS  PF2'
         MAPGEN TYPE=BUILD,L=16,C=38,LEN=34,                           C
               CONT='GEN.LEDGER     -        PRESS  PF3'
         MAPGEN TYPE=BUILD,L=18,C=38,LEN=34,                           C
               CONT='OTHER LEDGER   -        PRESS  PF4'
         MAPGEN TYPE=BUILD,L=20,C=38,LEN=34,                           C
               CONT='SOMETHING ELSE -        PRESS  PF5'
         MAPGEN TYPE=BUILD,L=22,C=38,LEN=34,                           C
               CONT='QUIT           -        PRESS PF12'
         MAPGEN TYPE=FINAL
         DFHDC TYPE=TRANSACTION,DMPCODE=MCK1
 *  RETURN CONTROL TO CICS  *
RETURN   DFHPC TYPE=RETURN
*  ERROR ROUTINES  *
ERR1     MAPGEN TYPE=INITIAL,TRANS=MESS
         MAPGEN TYPE=BUILD,L=24,C=1,LEN=32,                            C
               CONT='* ERROR - INVALID PF KEY PRESSED'
         MAPGEN TYPE=FINAL
         B     RETURN
*  CONSTANTS  *
PFTAB    DC    X'F1'                    PF KEY TABLE
         DC    CL8'PROGRAM1'
         DC    X'F2'
         DC    CL8'PROGRAM2'
         DC    X'F3'
         DC    CL8'PROGRAM3'
         DC    X'F4'
         DC    CL8'PROGRAM4'
         DC    X'F5'
         DC    CL8'PROGRAM5'
         DC    CL8'END'
         LTORG
         END


M A Bell
Systems Consultant (The Netherlands)    ) Xephon l987








































