Who linked to me?

A CICS applications programmer expressed the need to know the
name of the program that linked to her own CICS application
subroutine program.  Such information could, of course, be useful
in determining different logic paths to be followed by the
subroutine program, or to add to the usefulness of error messages
by being able to indicate the higher-level program causing an
error; for example:

    PGM=SUBA RECEIVED A BAD COMMAREA FROM PGM=CALLER

I was not aware of any EIB-type field that could tell me the name
of the calling CICS program.  However, I knew that the Register
Save Area (RSA) chain entries would point to the PPT entries of
all higher-level CICS programs that had been linked through to get
to the subroutine.

I did not think it wise to let application programmers code such
chain-chasing logic in their CICS application programs.  Instead, I
wrote a small CICS command-level Assembler program to fulfil
the job of RSA chain chaser.

When program SUBA needs to know the name of the calling
program, program SUBA can execute a CICS link with an 8-byte
COMMAREA to my program OLINKPGM.  The program
OLINKPGM will return the name of the program that executed
the CICS link to SUBA in the COMMAREA.

If SUBA was not linked to by a higher-level program, the literal
NOTFOUND is returned in the COMMAREA to program SUBA
by program OLINKPGM.

COMPTR   EQU   R4    POINTER TO COMMAREA
PPTCBAR  EQU   R5
RSACBAR  EQU   R7
TCASBAR  EQU   R8
CSACBAR  EQU   R9
TCAUBAR  EQU   R12
         DFHCSAD      CICS CSA LAYOUT
         DFHTCA CICSYST=YES
         COPY   DFHRSADS     CICS REGISTER SAVE AREA LAYOUT
         COPY   DFHPPTDS     CICS PROGRAM PROCESSING TABLE LAYOUT
DFHEISTG DSECT  DYNAMIC STORAGE   TRANSLATOR WILL INSERT FIELDS THAT
*               IT NEEDS AND USE DEFAULT R13 TO ADDRESS THIS AREA.
*               THIS PROGRAM WILL TACK ON THE DYNAMIC STORAGE IT NEEDS.
*                  (I.E. STORAGE MODIFIED BY THIS PROGRAM)
WRITELEN DS    H
MSGDYNAM EQU   *
MSGDYNA1 DS    CL(L'MSG1)
PGMDYNAM DS    CL8
MSGDYNA3 DS    CL(L'MSG3)
*              END OF THIS PROGRAM'S DYNAMIC STORAGE
COMMAREA DSECT
COMPGM   DS    CL8
         TITLE 'DOCUMENTATION - PROGRAM FLOW'
*
* 010 EXEC CICS ADDRESS COMMAND TO GET CICS CSA ADDR
* 020 FIND ADDRESS OF CURRENTLY DISPATCHED TASK'S USER TCA(THIS TASK'S)
* 030 FIND ADDRESS OF CURRENTLY DISPATCHED TASK'S SYSTEM TCA
* 040 FIND ADDRESS OF CURRENT REG SAVE AREA
*     FIND PGM THAT LINKED TO THIS PGM (FOR POTENTIAL ERROR MESSAGE)
*     IF COMMAREA > 7 BYTES LONG
*        ADDRESS COMMAREA
*        NEXT SENTENCE
*     ELSE
*        SEND ERROR MESSAGE TO SCREEN
*        GO TO PGM TERMINATION.
* 050 FIND ADDRESS OF PREVIOUS REG SAVE AREA
*     IS ADDRESS VALID (I.E. DOES A PREVIOUS REG SAVE AREA EXIST?)
* 060 FIND ADDRESS OF PPT ENTRY IN PREVIOUS REG SAVE AREA
*     PREVIOUS PROGRAM NAME IS NOW AVAILABLE!
* 080 PGM TERMINATION.
*
         TITLE 'PROGRAM OLINKPGM - MAINLINE LOGIC'
OLINKPGM CSECT
* 010 EXEC CICS ADDRESS COMMAND TO GET CICS CSA ADDR
         EXEC  CICS ADDRESS CSA(CSACBAR)
         USING DFHCSADS,CSACBAR
* 020 ADDRESS TCA USER AREA
         L     TCACBAR,CSACDTA
         USING DFHTCADS,TCACBAR R12 NOW POINTS TO TCA USER   AREA
* 030 ADDRESS TCA SYSTEM AREA
         L     TCASBAR,TCASYAA
         USING DFHTCADY,TCASBAR R8 NOW POINTS TO TCA SYSTEM AREA
* 040 ADDRESS CURRENT  REG SAVE AREA
         L     RSACBAR,TCAPCSA
         USING DFHRSADS,RSACBAR R7 NOW POINTS TO CURRENT RSA
         L     PPTCBAR,RSAPCTA
         USING DFHPPTDS,PPTCBAR  R5 NOW POINTS TO LINKER   PPT ENTRY
         MVC   PGMDYNAM,PPTPI MOVE LINKER PGM NAME TO ERROR MSG AREA
*                        (HOPEFULLY, THERE WILL BE NO NEED TO DISPLAY)
         DROP  PPTCBAR
         CLC   EIBCALEN,HALF7     IS COMMAREA LEN > 7
         BH    LENGTHOK
         MVC   MSGDYNA1(L'MSG1),MSG1 MOVE LITERAL TO DYNAMIC STORAGE
         MVC   MSGDYNA3(L'MSG3),MSG3 MOVE LITERAL TO DYNAMIC STORAGE
         LA    R0,MSGLEN
         STH   R0,WRITELEN
         EXEC CICS SEND FROM(MSGDYNAM) LENGTH(WRITELEN)
         B     GOBACK
LENGTHOK EQU   *
         L     COMPTR,DFHEICAP
         USING COMMAREA,COMPTR
* 050 ADDRESS PREVIOUS REG SAVE AREA
         CLC   RSAPCSA,FULLZERO  0'S APPEAR IN RSAPCSA IF NO HIGHER RSA
         BH    FINDPGM
         MVC   COMPGM,NOTFOUND
         B     GOBACK
FINDPG4  EQU   *             FIND PGM THAT LINKED TO LINKER OF THIS PGM
         L     R6,RSAPCSA
         DROP  RSACBAR
         USING DFHRSADS,R6  R6 NOW POINTS TO PREVIOUS RSA
* 060 ADDRESS PPT ENTRY FOR PREVIOUS REG SAVE AREA
         L     PPTCBAR,RSAPCTA
         USING DFHPPTDS,PPTCBAR  R5 NOW POINTS TO PREVIOUS PPT ENTRY
         MVC   COMPGM,PPTPI      MOVE PREV PGM NAME TO COMMAREA
         B     GOBACK
* 080 GO BACK.
GOBACK   EQU   *
         EXEC  CICS RETURN
FULLZERO DC    F'0'
HALF7    DC    H'7'
NOTFOUND DC    CL8'NOTFOUND'
MSG      EQU   *
MSG1     DC    C'ERROR,PGM=OLINKPGM WAS LINKED TO BY PGM='
         DC    CL8'        '
MSG3     DC    C' WITH A COMMAREA < 8 BYTES LONG. '
MSGEND   EQU   *
MSGLEN   EQU   MSGEND-MSG
         LTORG
         END


Chuck Utermohlen
Systems Programmer/Analyst
First Wisconsin National Bank (USA) ) First Wisconsin National Bank 1989


