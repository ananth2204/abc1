A PLT processor - some words of caution

The article A PLT processor in the June 1989 issue of CICS
Update, which discussed an alternative method of executing user-
written start-up programs, was written in a manner that could
possibly mislead some into using the supplied program
incorrectly.  Not only are there some serious implications to using
this program, but the primary justification for it is incorrect!

The article says that the program is useful because it avoids U401
abends at start-up time if the PLT programs are not found in the
PPT.  This is not true.  If CICS cannot find a PLT program in the
PPT or DFHRPL it will not abend, but will send the following
message to the console:

    DFH1579 - PLT PROGRAM xxxxxxxx NOT FOUND, REPLY 'GO' OR 'CANCEL'

The operator can reply 'GO' and the program will be skipped over,
the next one in line being executed.  A reply of 'CANCEL' will
abend CICS with a U1579.

Of course, if a PLT program suffers an abend CICS will fail with
U401, U601, or other abends.  The program in the article is useful
in preventing CICS abends that would occur in this way.
However, there are several questions that a potential user of this
should consider.

The first one is, do you want CICS to continue running if one of
these programs should fail?  If your PLT programs are not
necessary for the correct operation of your on-line system this
program could prove quite useful.  Unfortunately, most programs
in the PLT must execute for proper operation of your system.  For
example, you may have OEM products that provide security,
control dynamic allocation of files, enable user exits, and so on.
Having your system up without them could be pointless, or, in the
case of a security manager, disastrous.  A system abend or the
DFH1579 WTOR message will ensure that a vital component of
your system is not missing for some period of time before you
detect it.

Along the same lines as the above, can your PLT programs even
run correctly after CICS is fully initialised, and while user tasks
are executing?  Many PLT programs run at PLTPI time because
they are somewhat lengthy, and the facilities they represent must
be fully initialised prior to any users accessing CICS.  If your PLT
programs must execute prior to any users accessing the system, it
is unlikely you can run them as STARTed transactions and ensure
that they will complete before users log on.

Another question to ask is, can your PLT programs run as stand-
alone tasks?  Many PLT programs verify that they are executing at
PLTPI time by checking EIBTRNID for CSTP or CSSY, or by
testing flag CSAPLTPI in byte CSASSI2.  Programs that do this
would not function correctly if they were initiated via an EXEC
CICS START.

I don't want to imply that the program supplied in the article is not
useful, but the above questions are important and were not
mentioned in the article.  Your readers could find themselves in
trouble if they went ahead and implemented this without fully
understanding all the implications.

Christopher Frank
Lead Systems Programmer (USA) ) Xephon 1989


