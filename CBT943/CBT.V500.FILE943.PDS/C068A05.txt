Assembler macro to command-level conversions

With many thousands of CICS macro-level programs in
existence one would have expected software vendors to be
racing to develop the necessary tools to simplify the conversion
process.  There are some products currently available which
claim to be able to achieve at least 95% conversion.  However,
the manual effort involved in testing all converted programs
and being able to identify those programs which will not
convert is enormous.  The cost of this manpower is likely to
outweigh the software costs by far.  This may be one of the
reasons why we have not seen much movement in this area
from software suppliers.  If programmers are having to
scrutinize closely and test each individual program, the
additional effort of converting it there and then without the aid
of any tools would seem to be a favourite choice.

How does a CICS user approach this dilemma?

o      Wait for a suitable tool to become available?

o      Convert manually?

o      Maintain multiple CICS releases (and licences!)?

For sites with fewer than 200 macro-level programs, a manual
conversion is likely to be the most cost effective strategy.  In
excess of this number, one must measure the degree of success
a conversion tool is likely to have before opting for either of
the first two techniques.  There are various scenarios for using
Multi-Region Operation (MRO) and different CICS release
levels to accommodate both command-level and macro-level
programs.  However, I believe this should be considered only
as a short-term solution.  The costs in licence fees and the
managing of the different systems is likely, in three or four
years, to exceed the original costing for conversion.  And the
cost of conversion is still there to be met!

Decision time is just around the corner for users contemplating
an upgrade to CICS/ESA 3.2.  To help understand some of the
complexities involved in developing a conversion tool I will
now briefly mention some of the more obvious problems which
must first be overcome.

The first, and probably the most difficult, problem to resolve is
the program's usage of registers:

o      Macro-level programs must have one register addressing
      the Task Control Area (TCA) and the adjacent Transaction
      Work Area (TWA), and a second register addressing the
      Common System Area (CSA) and the adjacent Common
      Work Area (CWA).

o      Command-level programs require a minimum of two
      registers (excluding program addressing): one addressing
      the EXEC Interface Block (EIB) and the second the
      program's dynamic storage.

As these scenarios both require two registers, their usage can
be easily transposed.  Complications begin to set in when a
program uses the TWA and/or CWA storage areas.  Many
programs make use of these areas to pass data from one
program to another.  So how do we identify one or two unused
registers from the source?  "With great difficulty" is usually the
answer.

Registers are also required for program addressing.  "No
problem here" is a justifiable initial reaction as the same
registers used in the macro-level program can be used in the
command-level program.  However, upon closer investigation,
in many cases an additional register may be necessary.  The
expansion of a command-level request will result in many
additional machine instructions compared with its macro-level
equivalent.  In most circumstances new command-level
instructions will need to be included to establish the
environment before the program can commence normal
processing, and several command-level requests may have to
be coded to handle a single macro-level request.  Many
additional Assembler instructions are also likely to be required
both before and after the CICS command.

Storage management is the next hurdle to overcome.  Macro-
level programs manage many storage types, while only two
storage types are available to command-level programs, the
remainder being controlled by the EXEC Interface (EI).  To
guarantee that storage areas are not freed prematurely,
additional storage must be acquired and the data moved
following completion of a CICS command.  There are many
further anomalies in this area and additional processing must be
included in all programs to manage storage that the EI is
already managing.  A transaction's storage requirements may
increase significantly as a result of the double acquisition and
release processing carried out by the two distinct storage
management functions.

For the direct processing of the terminal input data held in the
Terminal Input Output Area (TIOA), the question is whether to
RECEIVE or not to RECEIVE the data.  It is possible for data
to be RECEIVED and then subsequently mapped, but one must
look closely at the way in which the data is handled by all
programs invoked during the course of the transaction and have
a suitable strategy to cope with such a scenario.  By accessing
CICS control blocks (principally the TCTTE) one can establish
whether there is any incoming terminal data.  Unfortunately,
there is no command-level request from which this information
can be extracted: eg EXEC CICS ASSIGN TERMINL (where
TERMINL is the terminal input length) returning the amount of
terminal data to be received could prove most useful.

Direct accessing of control blocks is not recommended as the
program may not function correctly with later CICS releases.
It is also likely to create problems when attempting to use the
Execution Diagnostic Facility (EDF) and other debugging
tools.  An alternative approach would be to use the
INPUTMSG function introduced in Version 3.  Terminal data
can be passed from one program to another and when the
second or subsequent program issues the RECEIVE command,
CICS will automatically map the data from the INPUTMSG
area rather than attempting to retrieve it from the terminal.

Attempt to measure the success a tool may have when re-
working a typical cross-section of Assembler macro-level
programs at your installation.  There are many other questions
which also need to be asked regarding the capabilities of a
conversion tool; these include:

o      Will the resultant program be capable of functioning with
      31-bit addresses?  Are user storage areas acquired above
      the 16-megabyte line?

o      Can it convert macro-level DL/I code?

o      How easy will it be to introduce new command-level
      functionality and error handling, eg authorization and
      cross-system availability checking?

o      What effect is conversion likely to have on response times
      and resource utilization (CPU, storage etc)?

o      Will all reference to CICS macros (no longer supplied by
      IBM) and data names be removed?

o      Will macro-level programming expertise still be required o
      on-site to maintain code and resolve problems?

o      Does it remove TWA processing requirement (ie does it
      use Communication Areas to pass data from one program
      to another?)?

While there are many pitfalls awaiting the author of a
conversion tool, if these initial problem areas can be overcome
and the end product, the converted Assembler language code,
remains intelligible and maintainable (what I really mean is no
worse than it was before conversion), there is a waiting market.

Whether a tool is developed which manipulates the source, or
acts as an interface between an existing macro-level application
and the CICS EI, considerable human intervention is going to
be required during the conversion process.

One of the first contenders entering the ring offering source
conversion is IBM with the Application Migration Aid (AMA).
It will interrogate all CICS macros and attempt to convert
them.  Comments are added to the source for macros which
cannot be fully converted, detailing additional programmer
actions required to complete the conversion process.
Personally I find the product a little disappointing in that it
does not address, or even attempt to address, any of the
problem areas which have been highlighted - ie register usage,
storage handling, and receive processing.  Furthermore,
additional commands must be manually inserted to address
storage areas such as the TWA and CWA, and there is no
provision for converting DL/I file control macros.

Deployment of a tool which performs run-time conversion
requires careful consideration.  It is not a decision which
should be taken lightly and as such an independent assessment
is recommended.  Many questions must be asked regarding the
capabilities of such a tool and assurances must be sought that it
can keep pace with the current CICS architecture.  Viewed as a
short-term solution it may prove cost effective.  In the long
term, serious CICS and application design constraints may start
appearing.  Macro-level programming expertise must also be
retained to support these programs.

Leon Garfinkle
Technical Consultant
Circle Computer Consultants (UK)                   c Circle 1991

