Creating maps for a data entry system

INTRODUCTION

For an end-user to receive a dynamically-created map, the map
must have been created properly to begin with.  In a data entry
system which I designed, there was a need to create a map in any
format and to be able to receive the map back into the program to
process the data entry.

A formats file is used that contains records with the field layouts
for certain data entry types, eg payroll, billing, inventory, etc.
Each record can contain up to 25 fields.  Each field must contain
the position in the output record in which the field starts, the
length of the field, the name of the field, whether it is alpha or
numeric, and the filler for the field.  Output records are 80
characters long and filled with spaces as shown in Figure 1.

Using the above format record a map is created for data entry.

CODING THE MAP

Start with a mapset that is defined as follows:

%   The screen size is 24 by 80.

%   The top line is a title line containing program and map
information.

%   Lines 2 to 21 are 79-character fields (occurring 20 times).

%   The second and third lines are actually going to be used for
the titles of the fields.  The other 18 are the data entry lines.

%   The twenty-second and twenty-third lines are blank.

%   The twenty-fourth line has key information indicating the
type of data entry that is going to be processed.

%   The only modified data tags that are turned on are on the
twenty-fourth line.

CODING THE PROGRAM

1   Move low values into the mapset.

2   Send out the mapset so the user can put in the type of data
entry he wishes to do.

3   Return control to CICS.

4   When control is returned to the program the second time, do
a normal receive on the mapset.  Use the key information to
read the formats record described previously.  Move low
values into the mapset.

5   Do the following routine 18 times, building each line of the
data entry screen:

    %    Move spaces to a field that is defined as PIC X and
occurs 78 times.

    %    Loop through the format entries building a 3270 data
stream.  Keep track of the data stream length by adding
five every time you place a buffer on the table.

         -Compute the displacement, row and column of the
attribute to begin the field, remembering that the
data entry fields start on the fourth row.  The buffer
address is 5 bytes long comprising the following:

          byte 1: buffer address order (X'11')

          bytes 2-3: actual computed address

          byte 4: start field order (X'1D')

          byte 5: attribute.

         -For the attribute we refer back to the format record.
If the field is numeric we use 'N', if the field is alpha
we use 'E'.  (Refer to CICS Update Issue 7, page 5
on computing the displacement, row and column
buffer address.)

         -Move the buffer address to a table that will be sent
later.

         -Add the length of the field to the first column and
create another buffer address with a skip field, which
is a X'F0'.

         -On the field that is one byte occurring 78 times,
place the edit picture.  This field should be built
along with the data stream so the edit pictures (if
they are necessary) can be in alignment with the data
stream.

         -At this point move over one more column before
moving on to the next data entry field.  This will
cause three spaces to appear between each field on
the mapset.  It is also essential so the data entry can
be processed when it is read back in later.

    %    -After all of the entries in the format file are done for one
line, put one more skip attribute on the data stream, two
bytes from the end of the last field on the line.

    %    -Move the edit pictures (they should be on one line) into
the original mapset.  Place them on the correct data entry
line, according to the line that was just created.

6   After all 18 lines have been created, a header line must be
created.  This can be done by looping back through the
formats file and putting the names onto a line in the same
way as the edit occurrence on the original mapset.  The
second line is used when the data entry has to be split into
two lines.  You must check that there are enough bytes left
on a line before you put the attributes onto the data stream.
If there is not enough room on that line, you can put a skip
field and then move onto the next line.

7   Send out the BMS map without the FREEKB option; then
send the data stream.  This will automatically free the
keyboard.  Return control to CICS.

8   When control is passed to the program the third time the
screen must be received into a data area that is set up as
follows:

          01  DSECT.
              03  FILLER OCCURS 18 TIMES.
                  05  FILLER               PIC X(03).
                  05  DSECT-DATA.
                      07  FILLER OCCURS 79 TIMES.
                          09  DSECT-FIELD  PIC X(01).
              03  FILLER                   PIC X(03).
              03  DSECT-KEY                PIC X(03).

    The above data area can then be used to create the data entry
records.

9   Read the formats file for the data entry type being run.  Loop
down through the fields, pulling off the data entry from
DSECT-FIELD and placing the information  onto an 80-
character line starting at the position that is found in the
formats file.  The position is used so that the data entry can
be keyed in the order of the formats fields, but that might not
be the order in which the fields are needed on the actual
record when it is written.  Remember to skip three bytes after
each field because of the length and flag fields.  After each
line is processed, another data stream can be created and
sent.

The above procedures can be easily modified to allow for
updating of existing data entry.  Read the data entry already
written out to a file and place that information onto the BMS map
instead of the edit characters.  Then, when the information is re-
read, it can be updated or deleted where necessary.


    ) Xephon 1990


