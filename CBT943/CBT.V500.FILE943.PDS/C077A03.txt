Minimizing data transmission (continued)

This month, we conclude our look at minimizing data
transmission with the description and source of MDT-OUT,
plus an overview of the MDT Mapping Technique.


MDT-OUT

MDT-OUT constructs the output symbolic map in BUFFER by
comparing the contents of the current IMAGE as updated by
the application program with the contents of the previous
IMAGE before the update. This means that after each call to
MDT-IN and before IMAGE is modified by the application
program, IMAGE should be saved for MDT-OUT's later
processing: BUFFER is used for this purpose. Afterwards, the
application program may alter any fields in IMAGE according
to the program logic.  Then, on entry to MDT-OUT, IMAGE
will contain the image of the screen to be constructed by the
next SEND MAP command and BUFFER will contain the
before-update IMAGE of the screen.

MDT-OUT compares every field in BUFFER with the
corresponding field in IMAGE and updates the field in
BUFFER with the final output data that should be present in it.
Therefore, BUFFER is used as an I/O parameter to MDT-
OUT. BUFFER contains the before-update IMAGE of the
screen on entry to MDT-OUT and the modified data stream in
the form of a symbolic map (to be sent in the next SEND MAP
command) on exit from MDT-OUT. After invoking MDT-
OUT, the application program should send BUFFER to the
terminal with a SEND MAP FROM(BUFFER) command.

For every (variable) field in the symbolic map, MDT-OUT
updates BUFFER as follows:

1      IF L-IMG = -1 (Cursor Position)
         L-BUF := -1
      ELSE
         L-BUF := LOW-VALUE
      ENDIF

2      A-BUF := A-IMG
      A-IMG := LOW-VALUE
3      IF O-IMG = O-BUF
         O=BUF := LOW-VALUE
      ELSE
         O-BUF := O-IMG
      ENDIF

Source code

         TITLE 'MDT OUTPUT MAPPING TECHNIQUE'
* FUNCTION : THIS PROGRAM ACCEPTS A COMMAREA CONTAINING THE MAPSET    *
*            ID AND MAP ID OF A SCREEN, THE CURRENT IMAGE OF THE      *
*            SCREEN IN THE FORM OF A SYMBOLIC MAP, AND A COPY OF THE  *
*            PREVIOUS IMAGE BEFORE BEING UPDATED BY THE APPLICATION   *
*            PROGRAM.  THE ROUTINE LOADS THE PHYSICAL MAP USING THE   *
*            MAPSET ID AND THE MAP ID, EXAMINES THE FORMAT OF THE     *
*            CORRESPONDING SYMBOLIC MAP, AND COMPARES THE CURRENT     *
*            AND PREVIOUS SCREEN IMAGES, SO AS TO CONSTRUCT A         *
*            SYMBOLIC MAP TO CONTAIN ONLY THE DATA AND ATTRIBUTES     *
*            THAT NEED TO BE SENT OUT TO THE TERMINAL.                *
* REMARKS  : THIS PROGRAM ASSUMES THAT THE EXTENDED ATTRIBUTES ARE    *
*            NOT USED IN THE BMS MAP.                                 *
*            THIS PROGRAM ASSUMES THAT THE LONGEST SCREEN FIELD WILL  *
*            NOT EXCEED 256 BYTES.                                    *
COMMAREA DSECT
COMMC400 DS    0CL3861
COMMAPST DS    CL8
COMSCNID DS    CL8
COMOPT   DS    CL1
COMRETCD DS    CL4
COMIMAGE DS    CL1920
COMBUFFR DS    CL1920
COMLEN   EQU   *-COMMAREA
DATAREG  EQU   R9                  DFHEISTG STORAGE
CODEREG  EQU   R10                 BASE REGISTER
EIBREG   EQU   R11                 EIB BASE REGISTER
ERASEEOF EQU   X'80'               ERASE EOF KEY PRESSED
CU1P401  DFHEIENT CODEREG=CODEREG,DATAREG=DATAREG,                     *
               EIBREG=EIBREG
         L     R12,DFHEICAP            GET ADDRESSABILITY TO COMMAREA
         USING COMMAREA,R12            TELL ASSEMBLER ABOUT IT
         LTR   R12,R12                 TEST POINTER TO COMMAREA
         BZ    COMMERR                 IF NULL, ERROR
         CLC   EIBCALEN,=AL2(COMLEN)   TEST COMMAREA LENGTH
         BNE   COMMERR                 IF WRONG, ERROR
         MVC   COMRETCD,=CL4'****'     SET RETURN CODE TO GOOD
         CLC   COMMAPST,=CL8' '        IF INPUT MAPSET IS BLANK
         BNH   MAPERR
         CLC   COMMAPST,=XL8'0000000000000000'         OR LOW-VALUES
         BNH   MAPERR                     ERROR
         CLC   COMSCNID,=CL8' '        IF INPUT MAP IS BLANK
         BNH   MAPERR
         CLC   COMSCNID,=XL8'0000000000000000'         OR LOW-VALUES
         BNH   MAPERR                     ERROR
LOADMAP  DS    0H
         EXEC  CICS LOAD PROGRAM(COMMAPST) SET(R8) NOHANDLE
         CLC   EIBRESP,DFHRESP(NORMAL) IF RESP NOT NORMAL
         BNE   LOADERR                    ERROR
         USING MSMSD,R8                TELL ASM ABOUT ADDRESSABILITY
         CLC   MSSETNM,COMMAPST        IF MAPSET IN MODULE NOT INPUT
         BNE   MAPSTERR                   MAPSET, ERROR
         LA    R2,12(R8)               POINT R2 TO 1ST MAP IN MAPSET
         USING MSMDI,R2                TELL ASM ABOUT ADDRESSABILITY
         DROP  R8
FINDMAP  DS    0H
         CLC   MSNAME,COMSCNID         IF CURRENT MAP = INPUT MAP
         BE    FOUNDMAP                   EXIT LOOP
         AH    R2,MSLNGTH              ELSE ADVANCE R2 TO NEXT MAP
         CLI   MSMDI,X'FF'             IF END OF MAPSET
         BE    NOMAPERR                   ERROR
         B     FINDMAP                 LOOP BACK
FOUNDMAP DS    0H
         LH    R3,MSDLEN               LOAD LENGTH OF MAP LEAD
         AR    R3,R2                   BUMP PAST MAP LEAD TO FIRST FLD
         USING MSMDF,R3                TELL ASM ABOUT ADDRESSABILITY
         LA    R8,COMBUFFR+12          POINTS TO FIRST FLD IN SYMB MAP
         LA    R6,COMIMAGE+12          POINTS TO FIRST FLD IN SCR IMAGE
         USING BUFFER,R8               TELL ASM ABOUT ADDRESSABILITY
         USING IMAGE,R6                TELL ASM ABOUT ADDRESSABILITY
CHKFIELD DS    0H
         CLI   MSMDF,X'FF'             IF END OF MAP
         BE    RELPROG                    RETURN
         TM    MSDESC,MSVAR            IS THIS A VARIABLE FIELD ?
         BNO   NEXTFLD                 IF NO, SKIP THE FOLLOWING
         LH    R7,MSFLTH               LOAD LENGTH OF FIELD
         CLC   IMAGEL,=H'-1'           IF LENGTH IS NOT CURSOR POSITION
         BNE   CLRLEN                     GO CLEAR LENGTH FIELD
         MVC   BUFFERL,=H'-1'          ELSE MOVE -1 TO LENGTH FIELD
         B     MVCATTR                    GO MOVE ATTRIBUTE
CLRLEN   MVC   BUFFERL,=H'0'           CLEAR LENGTH FIELD
MVCATTR  DS    0H
         MVC   BUFFERA,IMAGEA          MOVE ATTRIBUTE
         MVI   IMAGEA,X'00'            CLEAR ATTRIBUTE FIELD
CHKDATA  DS    0H
         BCTR  R7,0                    DECREMENT LENGTH -1 FOR CLC/MVC
         EX    R7,CLCDATA              IF DATA FIELD DID NOT CHANGE
         BE    CLRDATA                    GO CLEAR DATA FIELD
         EX    R7,MVCDATA              ELSE MOVE DATA FIELD
         B     ADVSYMB                    GO ADVANCE PTR TO NEXT FLD
CLRDATA  MVI   BUFFERI,X'00'           CLEAR FIRST BYTE
         LTR   R7,R7                   IF LENGTH = 1
         BZ    ADVSYMB                    SKIP
         BCTR  R7,0                    ELSE DECREMENT LENGTH BY -1
         EX    R7,CLRREST                   CLEAR REST OF FIELD
ADVSYMB  LA    R8,3(R8)                SKIP LENG+ATTR IN BUFFER
         AH    R8,MSFLTH               ADV PTR BY FLD LEN TO NEXT FLD
         LA    R6,3(R6)                SKIP LENG+ATTR IN IMAGE
         AH    R6,MSFLTH               ADV PTR BY FLD LEN TO NEXT FLD
NEXTFLD  SR    R1,R1                   CLEAR FIELD LENGTH
         TM    MSDESC,MSVALUE          DOES FIELD HAVE INITIAL VALUE?
         BNO   NOINIT                  IF NOT, SKIP
         LH    R1,MSFLTH               LOAD LENGTH OF FIELD
NOINIT   DS    0H
         LA    R3,8(R3)                ADVANCE 8 BYTES FOR OTHER INFO
         AR    R3,R1                   ADV PTR BY FLD LEN TO NEXT FLD
         B     CHKFIELD                LOOP BACK
*        INSTRUCTIONS TO BE EX'ED
CLCDATA  CLC   BUFFERI(1),IMAGEI
MVCDATA  MVC   BUFFERI(1),IMAGEI
CLRREST  MVC   BUFFERI+1(1),BUFFERI
*        ERROR HANDLING
COMMERR  MVC   COMRETCD,=CL4'*COM'     NO COMMAREA OR INCORRECT LENGTH
         B     RETURN
MAPERR   MVC   COMRETCD,=CL4'*MAP'     NO MAPSET NOR MAP ID GIVEN
         B     RETURN
MAPSTERR MVC   COMRETCD,=CL4'*MST'     MAPSET DOES NOT MATCH THAT IN
         B     RELPROG                  LOAD MODULE
LOADERR  MVC   COMRETCD,=CL4'*LOA'     ERROR LOADING MAPSET
         B     RETURN
NOMAPERR MVC   COMRETCD,=CL4'*MNF'     CANNOT FIND MAP IN MAPSET
         B     RELPROG
PARMERR  MVC   COMRETCD,=CL4'*PRM'     INVALID OPTION SPECIFIED
         B     RETURN
RELPROG  DS    0H
         EXEC CICS RELEASE PROGRAM(COMMAPST) NOHANDLE
RETURN   DS    0H
         DFHEIRET
         DS    0F
SPACES   DC    XL4'40000000'
         LTORG
MSMSD    DSECT
MSSETNM  DS     CL8
         DS     CL4
MSMDI    DSECT
MSDLEN   DS     AL2
         DS     CL6
MSNAME   DS     CL8
MSLNGTH  DS     AL2
         DS     CL15
MSIND    DS     AL1           MAP INDICATOR
MSEXTAT  EQU    X'40'         EXTENDED FUNCTION
         DS     CL8
MSMDF    DSECT
         DS     CL2
MSFLTH   DS     AL2
MSDESC   DS     AL1
MSVALUE  EQU    X'02'         FIELD HAS INITIAL VALUE
MSVAR    EQU    X'01'         VARIABLE FIELD
MSATTR   DS     CL1
MSDARK   EQU    X'0C'         DARK ATTRIBUTE
MSPOS    DS     AL2           FIELD POSITION
MSINIT   DS     0CL1
BUFFER   DSECT
BUFFERL  DS     CL2
BUFFERA  DS     CL1
BUFFERF  EQU    BUFFERA
BUFFERI  DS     0CL1
IMAGE    DSECT
IMAGEL   DS     CL2
IMAGEA   DS     CL1
IMAGEF   EQU    IMAGEA
IMAGEI   DS     0CL1
         END    CU1P401


USING THE MDT MAPPING TECHNIQUE

Under different circumstances, the MDT routines should be
invoked in different ways.  The following summary lists the
different usages of the MDT routines in various situations.  The
symbolic map (abbreviated to SYMMAP) refers to a group
item containing elementary items used by the program to
reference the individual variable fields of the map.  Depending
on the program design, IMAGE can be defined in a symbolic
map format and the moves between IMAGE and SYMMAP in
the following logic can be discarded.

For first-time transaction initiation

1      Call MDT-IN to initialize all fields in IMAGE to spaces or
      their initial values if specified.
      Move IMAGE to BUFFER (to save before-update screen image).

2      Move IMAGE to SYMMAP.
      Modify any fields in SYMMAP.

3      Move SYMMAP to IMAGE.
      Call MDT-OUT to construct BUFFER (original contents in
      BUFFER is before-update image).

4      Send map using BUFFER with ERASE.

Handling normal terminal I/O task

1      Receive MAP into BUFFER.

2      If not MAPFAIL
            Call MDT-IN to update IMAGE with new data found
            in BUFFER.
      End if.
      Move IMAGE to BUFFER (to save before-update screen image).

3      Move IMAGE to SYMMAP.
      Modify any fields in SYMMAP.

4      Move SYMMAP to IMAGE.
      Call MDT-OUT to construct BUFFER (original contents in
      BUFFER is before-update image).

5      Send map using BUFFER with DATAONLY.

Handling CLEAR key depression (screen data to be recovered)

1      Move IMAGE to SYMMAP.
      Modify any fields in SYMMAP.

2      Move SYMMAP to IMAGE.

3      Send map using IMAGE with ERASE.

Handling PA key depression (no data transmission from terminal)

1      Move IMAGE to BUFFER (to save before-update screen image).

2      Move IMAGE to SYMMAP.
      Modify any fields in SYMMAP (eg add an error message).

3      Move SYMMAP to IMAGE.
      Call MDT-OUT to construct BUFFER (original contents in
      BUFFER is before-update image).
4      Send map using BUFFER with DATAONLY.

Application programs adopting the MDT Mapping Technique
can use IMAGE as the only source for screen field references.
After a terminal input operation and MDT-IN processing, the
application program examines IMAGE to refer to the field
data. The application program can now check for spaces (not
low-values) to determine whether a field is empty without
worrying about the ERASE-EOF flag (X'80'). Field lengths
(fieldLs) can still be used to determine if the operator has
modified the corresponding fields in the previous input. Then,
the application program modifies the field data in IMAGE as
desired, as if IMAGE would be used as the source for the next
terminal output operation.

To illustrate the control flow of a typical application transaction
that uses the MDT technique further, the following pseudo
code depicts the normal calling sequence of the routines:

      BEGIN (Task 1)
        .
      CALL MDT-IN USING OPTION-I IMAGE BUFFER
        .
      BUFFER := IMAGE
      SYMMAP := IMAGE
      modify SYMMAP
      IMAGE  := SYMMAP
        .
      ALL MDT-OUT USING IMAGE BUFFER
        .
      SEND MAP FROM(BUFFER)
        .
      RETURN
        .
        .
        .
        .
      BEGIN (Task 2)
        .
      RECEIVE MAP INTO(BUFFER)
        .
      CALL MDT-IN USING OPTION-U IMAGE BUFFER
        .
      BUFFER := IMAGE
      SYMMAP := IMAGE
      modify SYMMAP
      IMAGE  := SYMMAP
        .
      CALL MDT-OUT USING IMAGE BUFFER
        .
      SEND MAP FROM(BUFFER) DATAONLY
        .
      RETURN


FINAL REMARKS

The two functions provided by the MDT Mapping Technique
can be used separately. An application program may choose to
adopt only one function, ie only MDT-IN or MDT-OUT,
without affecting the program logic. However, an application
program using MDT-IN only, for instance, will result in short
input data streams but long output data streams.

One interesting and surprising finding about the 'intelligence'
of MDT-OUT is that it also saves on the data transmission of
output-only screen fields. For example, application programs
seldom check on what error message is currently on the screen
to determine that the same error message need not be
retransmitted in the next SEND. However, since a program
using the MDT Mapping Technique keeps an exact image of all
the data on the physical screen, MDT-OUT is able to determine
that the current error message that the application program
attempts to send is already being displayed on the screen and
exclude it from the next output, thus reducing the data stream
by, in our case, as much as 79 characters!

Finally, the MDT routines can work with any BMS maps
because the layout of a symbolic map is directly retrieved from
the corresponding physical map.  This physical map
manipulation technique is a variation on the same theme
presented in my earlier article, An approach to CICS on-line
report generation, published in the June 1991 issue.


Felix Luke
Systems Programmer
Caltex Oil  Limited (Hong Kong)

