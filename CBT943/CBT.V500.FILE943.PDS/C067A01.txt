An approach to CICS on-line report generation

A requirement of our stock control application is to be able to
generate documents that reflect the input data of transactions.
The user has an option of either requesting immediate printing
of the document or storing the document to be selected for later
printing at a convenient time.  A document so generated
usually looks the same as the screen displayed on the user
terminal.  However, for certain transactions, the document may
contain more detailed wording.  Because of these complicated
criteria, the print key function of CICS does not satisfy our
requirement.

Our installation uses an on-line printing package called VPS
(by Levi, Ray and Shoup Inc) and the printer terminals of our
system are under the control of VPS instead of CICS.  For this
reason, we do not start print transactions on printers to generate
on-line reports: the recovery capability provided by VPS is not
guaranteed this way.  Instead, our existing CICS system
contains a printing subsystem to interface to VPS as well as
providing the functionality of storing up reports for later
printing.  This makes our problem more complicated.
Although a CICS program can be written to accept different
map definitions for merging the input data from the same
symbolic map used by the stock control transaction to generate
on-line reports of varying formats on the user printer, such a
print transaction cannot be run on the printer unless we define
the printer as a CICS terminal.

Not willing to violate the existing standards but to integrate the
implementation of our new printing requirement into the
original printing subsystem, I wrote a routine that will accept a
map-id and a symbolic map, and merge the data from the two
to generate a 24 by 80 screen image.  This screen image can
then be passed to the printing subsystem to interface with VPS
for printing the document.  The storing of documents will also
be accomplished by the printing subsystem, which compresses
the print lines for more efficient use of file storage.

The routine may be linked to or called by any CICS programs
with a COMMAREA providing a mapset-id, a map-id, a
symbolic map of a maximum size of 1920 bytes, and an output
area of 1920 bytes to retrieve the screen image constructed by
the routine.  Given the mapset-id and the map-id, the routine
loads the physical map and examines the format of the
symbolic map in order to merge the constant fields from the
physical map and the variable data from the symbolic map.
Dark attributes are included to provide better flexibility in
formatting the report to be generated.

The routine was written in Assembler for easy string
manipulation and was tested under CICS 1.7.  It should be
acknowledged that part of the algorithm for examining the
physical map was borrowed from an earlier article in CICS
Update entitled Printing screens from mapset load modules by
Mike Lamkins.


PROGRAM GENSCRN

         TITLE 'CONSTRUCT REPORT FROM PRINT MAP'
* FUNCTION : THIS PROGRAM ACCEPTS A COMMAREA CONTAINING THE           *
*            MAPSET AND MAP ID OF A SCREEN, THE SYMBOLIC MAP OF THE   *
*            MAP AND AN OUTPUT AREA.  THE PROGRAM LOADS THE PHYSICAL  *
*            MAP USING THE MAPSET ID SPECIFIED AND MERGES THE         *
*            DEFINITION OF THE MAP SPECIFIED IN THE MAPSET WITH THE   *
*            DATA GIVEN IN THE INPUT SYMBOLIC MAP, TO GENERATE A      *
*            24 X 80 REPORT IN THE OUTPUT AREA CONTAINING THE SCREEN  *
*            DATA AS IF THE MAP SPECIFIED WAS SENT OUT TO A TERMINAL  *
*            WITH THE DATA IN THE SYMBOLIC MAP.                       *
* REMARKS  : THIS PROGRAM ASSUMES THAT THE EXTENDED ATTRIBUTES ARE    *
*            NOT USED IN THE BMS MAP.                                 *
***************************  COMMAREA  ********************************
COMDSECT DSECT
COMSCNID DS    CL8
COMMAPST DS    CL8
COMRETCD DS    CL4
BMSAREA  DS    CL1920
OUTSCRN  DS    CL1920
COMLEN   EQU   *-COMDSECT
DATAREG  EQU   R9                  DFHEISTG STORAGE
CODEREG  EQU   R10                 BASE REGISTER
EIBREG   EQU   R11                 EIB BASE REGISTER
GENSCRN  DFHEIENT CODEREG=CODEREG,DATAREG=DATAREG,                     *
               EIBREG=EIBREG
         L     R12,DFHEICAP            GET ADDRESSABILITY TO COMMAREA
         USING COMDSECT,R12            TELL ASSEMBLER ABOUT IT
         MVC   COMRETCD,=CL4'****'     SET RETURN CODE TO GOOD
         CLC   COMMAPST,=CL8' '        IF INPUT MAPSET IS BLANK
         BNH   MAPERR                     ERROR
         CLC   COMSCNID,=CL8' '        IF INPUT MAP IS BLANK
         BNH   MAPERR                     ERROR
LOADMAP  DS    0H
         EXEC  CICS LOAD PROGRAM(COMMAPST) SET(R8) NOHANDLE
         CLC   EIBRESP,DFHRESP(NORMAL) IF RESP NOT NORMAL
         BNE   LOADERR                    ERROR
         USING MSMSD,R8                TELL ASM ABOUT ADDRESSABILITY
         CLC   MSSETNM,COMMAPST        IF MAPSET IN MODULE NOT INPUT
         BNE   MAPSTERR                   MAPSET, ERROR
         LA    R2,12(R8)               POINTER R2 TO 1ST MAP IN MAPSET
         USING MSMDI,R2                TELL ASM ABOUT ADDRESSABILITY
         DROP  R8
FINDMAP  DS    0H
         CLC   MSNAME,COMSCNID         IF CURRENT MAP = INPUT MAP
         BE    FOUNDMAP                   EXIT LOOP
         AH    R2,MSLNGTH              ELSE ADVANCE R2 TO NEXT MAP
         CLI   MSMDI,X'FF'             IF END OF MAPSET
         BE    NOMAPERR                   ERROR
         B     FINDMAP                 LOOP BACK
FOUNDMAP DS    0H
         SR    R4,R4                   CLEAR SOURCE ADDRESS
         LA    R6,OUTSCRN              DESTINATION IS OUTPUT AREA
         L     R5,SPACES               LENGTH=ZERO; PAD CHAR=SPACE
         LA    R7,1920                 LENGTH OF DESTINATION = 1920
         MVCL  R6,R4                   CLEAR OUTPUT AREA
         LH    R3,MSDLEN               LOAD LENGTH OF MAP PREFIX
         AR    R3,R2                   BUMP PAST MAP PREFIX TO 1ST FLD
         USING MSMDF,R3                TELL ASM ABOUT ADDRESSABILITY
         LA    R8,BMSAREA+12           POINTS TO FIRST FLD IN SYMB MAP
CHKFIELD DS    0H
         CLI   MSMDF,X'FF'             IF END OF MAP
         BE    RETURN                     RETURN
         SR    R4,R4                   CLEAR SOURCE ADDRESS
         TM    MSDESC,MSVALUE          DOES FIELD HAVE INITIAL VALUE?
         BNO   CHKVAR                  GO CHECK IF VARIABLE FIELD
         TM    MSATTR,MSDARK           DARK ATTRIBUTE ?
         BO    CHKVAR                  GO CHECK IF VARIABLE FIELD
         LA    R4,MSINIT               POINT R4 TO INITIAL VALUE
CHKVAR   DS    0H
         TM    MSDESC,MSVAR            IS THIS A VARIABLE FIELD ?
         BNO   CHKPTR                  IF NO, SKIP THE FOLLOWING
         CLI   2(R8),X'00'             IS ATTRIBUTE LOW-VALUE ?
         BE    CHKVALUE                IF SO, GO CHECK DATA
         TM    2,(R8),MSDARK           DARK ATTRIBUTE ?
         BO    ADVSFLD                 IF SO, MOVE NO DATA
CHKVALUE CLI   3(R8),X'00'             IS VALUE FIELD LOW-VALUE ?
         BE    ADVSFLD                 IF SO, TAKE INITIAL VALUE
         LA    R4,3(R8)                ELSE POINT R4 TO VARIABLE DATA
ADVSFLD  LA    R8,3(R8)                ADVANCE R8 BY 3 BYTES (LEN+ATTR)
         AH    R8,MSFLTH               ADVANCE R8 BY FIELD LENGTH
CHKPTR   DS    0H
         LTR   R4,R4                   IF R4 ZERO (NO DATA TO MOVE)
         BZ    DONTMOVE                   SKIP THE FOLLOWING
         LH    R5,MSFLTH               SET SOURCE LENG TO FIELD LENG
         LR    R7,R5                   SET DEST LENG TO FIELD LENG
         LH    R1,MSPOS                LOAD DISPLACEMENT OF FIELD
         LA    R6,OUTSCRN+1            ADD 1 POSITION FOR THE ATTRIBUTE
         AR    R6,R1                   POINT R6 TO CURRENT POSITION
         MVCL  R6,R4                   MOVE DATA TO OUTPUT, BE IT
*                                       CONSTANT OR VARIABLE
DONTMOVE DS    0H
         SR    R1,R1                   CLEAR FIELD LENGTH
         TM    MSDESC,MSVALUE          DOES FIELD HAVE INITIAL VALUE?
         BNO   NOINIT                  IF NOT, SKIP
         LH    R1,MSFLTH               LOAD LENGTH OF FIELD
NOINIT   DS    0H
         LA    R3,8(R3)                ADVANCE 8 BYTES FOR OTHER INFO
*                                       (8 BYTES FOR NON-EXTENDED ATTR)
*                                       (12 BYTES IF EXTENDED ATTR)
         AR    R3,R1                   ADV POINTER BY FIELD LENGTH
         B     CHKFIELD                GO BACK TO CHECK NEXT FLD
*        ERROR HANDLING
MAPERR   MVC   COMRETCD,=CL4'*MAP'     NO MAPSET NOR MAP ID GIVEN
         B     RETURN
MAPSTERR MVC   COMRETCD,=CL4'*MST'     MAPSET DOES NOT MATCH THAT IN
         B     RETURN                   LOAD MODULE
LOADERR  MVC   COMRETCD,=CL4'*LOD'     ERROR LOADING MAPSET
         B     RETURN
NOMAPERR MVC   COMRETCD,=CL4'*MNF'     CANNOT FIND MAP IN MAPSET
         B     RETURN
RETURN   DS    0H
         EXEC CICS RELEASE PROGRAM(COMMAPST) NOHANDLE
         DFHEIRET
         DS    0F
SPACES   DC    XL4'40000000'
         LTORG
MSMSD    DSECT
MSSETNM  DS     CL8
         DS     CL4
MSMDI    DSECT
MSDLEN   DS     AL2
         DS     CL6
MSNAME   DS     CL8
MSLNGTH  DS     AL2
         DS     CL15
MSIND    DS     AL1           MAP INDICATOR
MSEXTAT  EQU    X'40'         EXTENDED FUNCTION
         DS     CL8
MSMDF    DSECT
         DS     CL2
MSFLTH   DS     AL2
MSDESC   DS     AL1
MSVALUE  EQU    X'02'        FIELD HAS INITIAL VALUE
MSVAR    EQU    X'01'        VARIABLE FIELD
MSATTR   DS     CL1
MSDARK   EQU    X'0C'        DARK ATTRIBUTE
MSPOS    DS     AL2          FIELD POSITION
MSINIT   DS     0CL1
         END    GENSCRN


Felix Luke
Assistant Systems Programmer
Caltex Oil Ltd (Hong Kong)

