 An auto-install exit
BACKGROUND
We are an MVS/XA shop running CICS 1.7 on two 3090s.  The auto-install exit
supplied with CICS 1.7 - DFHZATDX - uses the last four non-blank characters of
the NETNAME to create a terminal-id.  This does not create unique terminal-ids
at our installation.  It is not possible to create a unique four-character
terminal-id from any elements of the eight-character NETNAME.
A SOLUTION
To overcome this problem I copied and modified DFHZATDX to create the following
program - TDD022.  It creates a four-character terminal-id consisting of the
first two characters of the application-id and a two-character suffix in the
range AA to 99.  Using the first two characters of the application-id ensures
(at our installation) that the terminal-id will be unique across all systems;
this allows automatic terminal shipping using CRTE while maintaining uniqueness.
The two-character suffix is generated by adding one character to the last used
terminal-id starting from AA, eg PNAA becomes PNAB, PNL9 becomes PNMA etc.  The
last used terminal-id is saved in a main storage Temporary Storage (TS) queue.
If this queue does not exist it is created and terminal-ids start at AA.
After each terminal-id is generated it is tested using EXEC CICS INQ TERMINAL,
in case it already exists (eg after an emergency restart).  If it does exist the
program loops back and adds another character to the suffix and retests.  If the
generated terminal-id becomes AA again, ie all 1296 terminal-ids have been used,
the program sets an Tall in useU flag on and starts again from AA as some
terminal-ids generated earlier will have been deleted.  If the program reaches
AA again with the Tall in useU flag still on, all the possible terminal-ids are
in use and the bad exit is taken returning a non-zero return code.
The TS queue is written with the flag on to prevent the program searching
through all the terminal-ids again at the next log-on attempt.  The Tall in useU
flag is only turned off when the exit is driven for a terminal delete.
IMPLEMENTATION
To implement this program modify the AUTINST=(nnn, progname) parameter in the
SIT or override it at start-up.  For testing use to make a temporary change:
     CEMT SET AUTOINSTALL PROGRAM(progname)
PROGRAM SOURCE
* MODULE NAME = TDD022
* DESCRIPTIVE NAME = C.I.C.S./VS (VTAM) AUTOINSTALL USER PROGRAM
* FUNCTION = PROVIDE USER INPUT TO AUTOINSTALL PROCESSING
*            THIS MODULE IS A COMPONENT OF ZCP.
* > > > > >  IT IS BASED ON THE DEFAULT AUTOINSTALL USER PROGRAM
*            DFHZATDX.
*            IT IS CALLED VIA AN EXEC CICS LINK COMMAND, FROM
*            DFHZATD(THE AUTOINSTALL PROGRAM).
*            INPUT TO THE MODULE IS A PARAMETER LIST ADDRESSED BY
*            DFHEICAP.
*            THE PROGRAM IS INVOKED WHEN.
*            1) AN AUTOINSTALL INSTALL IS IN PROGRESS
*            2) AN AUTOINSTALL DELETE HAS JUST COMPLETED
*            THE FUNCTION TO BE PERFORMED IS INDICATED VIA THE PASSED
*            PARAMETER LIST.  THIS IS EVALUATED DURING COMMON INITIAL-
*            ISATION PROCESSING, AND CONTROL PASSED TO THE APPROPRIATE
*            ROUTINE.
* FUNCTION 1 - AUTOINSTALL INSTALL
*    PARAMETER LIST:
*    FULLWORD 1 =   FUNCTION FIELD
*      BYTE 1     -   REQUEST TYPE(X'F0' FOR INSTALL)
*      BYTE 2     -   RESERVED
*      BYTE 3     -   RESERVED
*      BYTE 4     -   RESERVED
*    FULLWORD 2 ==> NETNAME
*    FULLWORD 3 ==> MODEL_NAME LIST
*    FULLWORD 4 ==> RETURN FIELD
*    FULLWORD 5 ==> CINIT_RU
*    THE FORMAT OF THE DATA IS AS FOLLOWS:
*    NETNAME - |X|NETNAME|
*    (WHERE 'X' IS 2 BYTE LENGTH OF NETNAME)
*    MODEL_NAME LIST - |Y|MODEL1|MODEL2|...|MODELN|
 *    (WHERE 'Y' IS A 2 BYTE NUMBER OF NAMES IN THE LIST; EACH NAME
*     ELEMENT IS 8 BYTES IN LENGTH; Y MAY BE ZERO, IN WHICH CASE NO
*     LIST FOLLOWS).
*    RETURN FIELD - |MODEL_NAME|TRMIDNT|PRINTTO|ALTPRT |STATUS|
*                   |8 BYTES   |4 BYTES|4 BYTES|4 BYTES|1  BYTE|
*    (A 21 BYTE FIELD TO RETURN SELECTED ITEMS AND STATUS INFORMATION)
*    CINIT_RU - |Z|CINIT_RU|
*    (WHERE 'Z' IS 2 BYTE LENGTH OF CINIT_RU)
*    THE PURPOSE OF THIS FUNCTION IS TO SELECT A MODEL NAME, AND
*    CORRESPONDING TERMINAL ID TO BE USED AS INPUT FOR AN AUTOINSTALL
*    RESOURCE 'BUILDER' REQUEST.
*    OPTIONALLY, PRINTER AND ALTPRINTER VALUES MAY BE SUPPLIED.
*    THE ACTION OF THIS PROGRAM ON THIS EVENT IS AS FOLLOWS:
*    MODEL_NAME = THE FIRST NAME IN THE SUPPLIED LIST
*    TERMINAL= THE FIRST 2 CHARACTERS OF THE APPLID AND 2 MORE
*              CHARACTERS IN THE RANGE AA-99.
*    PRINTER = NOT SUPPLIED
*    ALTPRINTER = NOT SUPPLIED
*    THESE VALUES ARE PLACED IN THE RETURN FIELD, AND THE STATUS BYTE
*    SET TO ZERO TO INDICATE THAT A SELECTION HAS BEEN MADE.
*    RETURN IS THEN MADE TO THE CALLING PROGRAM.
*    IF THE LIST CONTAINS NO ELEMENTS, THEN NO ACTION IS TAKEN.
*    EXIT-NORMAL =
*         EXIT IS VIA AN EXEC CICS RETURN COMMAND.
*         STATUS IS SET TO ZERO IF ALL PROCESSING COMPLETES NORMALLY.
*    EXIT-ERROR =
*         EXIT IS VIA AN EXEC CICS RETURN COMMAND.
*         STATUS IS NON-ZERO ON ENTRY TO THIS MODULE, AND IS LEFT
*         UNTOUCHED IF ANY ERROR OCCURS, HENCE, A NON-ZERO RETURN
*         CODE IS PASSED BACK TO THE CALLING PROGRAM.
* FUNCTION 2 - AUTOINSTALL DELETE
*    PARAMETER LIST:
*    FULLWORD 1 =   FUNCTION FIELD
*      BYTE 1     -   REQUEST TYPE(X'F1' FOR DELETE)
*      BYTE 2     -   RESERVED
*      BYTE 3     -   RESERVED
*      BYTE 4     -   RESERVED
*    FULLWORD 2 =   TERMINAL ID OF DELETED TERMINAL
*    THIS FUNCTION GIVES THE USER THE OPPORTUNITY TO PERFORM
*    PROCESSING WHEN AN AUTOINSTALL'ED TERMINAL HAS BEEN DELETED.
*    THE ACTION OF THIS PROGRAM IS TO ESTABLISH ADDRESSABILITY
*    TO THE PARAMETER LIST, TURN OFF THE 'ALL TERMIDS IN USE' FLAG
*    AND RETURN.
*    EXIT-NORMAL =
*         EXIT IS VIA AN EXEC CICS RETURN COMMAND.
* NOTES :
*    PATCH LABEL = VIA DFHPATCH MACRO
*    MODULE TYPE = EXECUTABLE
*    PROCESSOR = ASSEMBLER
*    ATTRIBUTES = READ ONLY, SERIALLY REUSABLE
* ENTRY POINT = DFHZATDX
*     PURPOSE = ALL FUNCTIONS
*     THE REQUEST TYPE IS ANALYSED, AND CONTROL PASSED TO THE
*     APPROPRIATE ROUTINE.
* EXTERNAL REFERENCES = NONE
*     ROUTINES =
*         EXEC CICS RETURN - RETURN TO CALLING PROGRAM
*     CONTROL BLOCKS =
*         SEE FUNCTION SECTION FOR DESCRIPTION OF INPUT PARAMETERS
* DESCRIPTION
* A CHECK IS MADE TO ENSURE THE PRESENCE OF THE INPUT PARAMETERS
* (PASSED VIA COMMAREA). IF THESE DO NOT EXIST, THEN RETURN IS MADE
* TO THE CALLING PROGRAM.
* THE TYPE OF REQUEST(INSTALL|DELETE) IS THEN DETERMINED, AND A
* BRANCH TAKEN TO THE APPROPRIATE FUNCTION ROUTINE(SEE 'FUNCTION'
* ABOVE FOR DETAILS).
 DFHEISTG DSECT ,
*--- VARIABLE USER STORAGE FOLLOWS EXEC INTERFACE STORAGE ------------
*--- ASSIGN OUTPUT AREA ----------------------------------------------
APPLID   DS    0CL8               8 CHAR APPLICATION ID
SYSID    DS    CL2                UNIQUE 2 CHAR SYSTEM ID
         DS    CL6                THE REST
*--- TEMPORARY STORAGE RECORD ----------------------------------------
TSREC    DS    0CL5               TEMP STOR RECORD
TSTID    DS    0CL4               LAST USED TERMID
TSSYSID  DS    CL2                2 CHAR SYSTEM ID
TSTID3   DS    C                  THIRD CHAR OF TERMID
TSTID4   DS    C                  FOURTH CHAR OF TERMID
TSUSE    DS    C                  FLAG TO INDICATE ANY UNALLOC TERMIDS
EIRESP   DS    F                  EXEC INTERFACE RESPONSE FIELD
*--- END OF VARIABLE USER STORAGE ------------------------------------
*--- USER EQUATES ----------------------------------------------------
ALLINUSE EQU   X'FF'              NO MORE TERMIDS
FREEONE  EQU   X'00'              AT LEAST ONE FREE TERMID
*----DSECTS ----------------------------------------------------------
INPARMDS DSECT ,                   DEFINE INSTALL PARAMETER LIST
INPARM0  DS    F                   FUNCTION FIELD
         ORG   INPARM0               DEFINE FUNCTION FIELD
INRQTYPE DS    XL1                   - INSTALL REQUEST TYPE
INPARM02 DS    XL1                   - RESERVED
INPARM03 DS    XL1                   - RESERVED
INPARM04 DS    XL1                   - RESERVED
         ORG   ,
INPARM1  DS    A                   POINTER TO NETNAME
INPARM2  DS    A                   POINTER TO MODEL NAME LIST
INPARM3  DS    A                   POINTER TO RETURN FIELD
INPARM4  DS    A                   POINTER TO CINIT_RU
DLPARMDS DSECT ,                   DEFINE DELETE PARAMETER LIST
DLPARM0  DS    F                   FUNCTION FIELD
         ORG   DLPARM0               DEFINE FUNCTION FIELD
DLRQTYPE DS    XL1                   - DELETE REQUEST TYPE
DLPARM02 DS    XL1                   - RESERVED
DLPARM03 DS    XL1                   - RESERVED
DLPARM04 DS    XL1                   - RESERVED
         ORG   ,
DLTERMID DS    CL4                 TERMID BEING PROCESSED
MODLSTDS DSECT ,                   DEFINE MODEL NAME ENTRY
MODLNUM  DS    XL2                 NUMBER OF ENTRIES IN LIST
MODLNAME DS    CL8                 FIRST ENTRY IN LIST
OUTPRMDS DSECT ,                   DEFINE OUTPUT PARAMETERS
MODNMSEL DS    CL(L'MODLNAME)      MODEL NAME SELECTED
TRMIDSEL DS    CL4                 TERMINAL ID SELECTED
PRTTOSEL DS    CL4                 PRINTTO SELECTED
ALTPTSEL DS    CL4                 ALTPRT SELECTED
INSTATUS DS    CL1                 STATUS INFORMATION
NETNAMDS DSECT ,                   DEFINE NETNAME FIELD
NETNAMLN DS    XL2                 LENGTH OF NETNAME
NETNAME  DS    0X                  START OF NETNAME
DFHZATDX CSECT ,
         OC    EIBCALEN,EIBCALEN   ANY COMMAREA?
         BZ    BADEXIT             ...NO, GET OUT
         L     R2,DFHEICAP         ADDRESS INPUT PARAMETER LIST
         USING INPARMDS,R2         BASE DSECT
         CLI   INRQTYPE,C'0'       INSTALL REQUEST?
         BNE   DELPROC1            ...NO, CHECK DELETE
* *               I N S T A L L   P R O C E S S I N G                *
         L      R4,INPARM2         ADDRESS MODEL NAME LIST
         USING MODLSTDS,R4         BASE DSECT
         OC    MODLNUM,MODLNUM     ANY MODEL NAMES?
         BZ    BADEXIT             ...NO, GET OUT
         L     R5,INPARM3          ADDRESS OUTPUT PARAMETER LIST
         USING OUTPRMDS,R5         BASE DSECT
 *--- SELECT MODEL ----------------------------------------------------
         MVC   MODNMSEL,MODLNAME   CHOOSE FIRST MODEL NAME
*--- DERIVE TERMID ---------------------------------------------------
*FORMAT OF TERMID IS XYAA WHERE XY ARE FIRST 2 CHARS OF APPLID AND AA
*IS A SEQUENCE 'NUMBER' IN RANGE AA-99 USING A-Z,0-9.  THE LAST USED
*TERMID IS SAVED IN A MAIN TS QUEUE AND THIS IS USED TO CREATE A NEW
*TERMID BY ADDING 1 CHAR TO IT. THE NEW TERMID IS CHECKED JUST IN CASE
*IT ALREADY EXIST (E.G. AFTER AN EMERGENCY RESTART) IF IT DOES THEN
*IT LOOPS BACK AND ADDS ANOTHER CHAR AND TRIES AGAIN. WHEN IT REACHES
*AA AGAIN IT SETS THE 'ALL IN USE' FLAG ON BUT GOES THROUGH THE CHECK
*AGAIN BECAUSE SOME TERMIDS MAY HAVE BEEN DELETED, BUT WHEN IT REACHES
*AA AGAIN AND THE 'ALL IN USE' FLAG IS STILL ON IT TAKES THE ERROR EXIT
*--- READ LAST USED TID FROM TSQ
         EXEC CICS READQ TS QUEUE(NAMETS) INTO(TSREC) ITEM(ITEMNO)     X
               RESP(EIRESP)
         CLC   EIRESP,DFHRESP(QIDERR) DOES QUEUE EXIST ?
         BE    CREATE              NO, GO AND CREATE FIRST ENTRY
         CLC   EIRESP,DFHRESP(ERROR) ANY OTHER ERROR ?
         BE    BADEXIT             YES, GOTO ERROR EXIT
         CLI   TSUSE,ALLINUSE     IS 'ALL IN USE' FLAG ON ?
         BE    BADEXIT             YES, GOTO ERROR EXIT
GENNEXT  TR    TSTID4,TRTAB       ADD 1 CHAR TO 4TH CHAR OF TERMID
         CLI   TSTID4,C'A'        IS IT NOW BACK TO A ?
         BNE   TESTTID             NO, GO CHECK THAT NEW TID UNIQUE
         TR    TSTID3,TRTAB       ADD 1 CHAR TO 3RD CHAR OF TERMID
         CLI   TSTID3,C'A'        IS IT NOW BACK TO A ?
         BNE   TESTTID              NO, GO CHECK THAT NEW TID UNIQUE
         CLI   TSUSE,ALLINUSE     IS 'ALL IN USE' FLAG ON ?
         BE    ALLUSED             YES, WRITE Q WITH FLAG SET
         MVI   TSUSE,ALLINUSE     SET 'ALL IN USE' FLAG ON
         B     TESTTID             GO CHECK ITS UNIQUE
ALLUSED  EXEC CICS WRITEQ TS QUEUE(NAMETS) FROM(TSREC) ITEM(ITEMNO)    X
               LENGTH(LENTS) RESP(EIRESP) MAIN REWRITE
         B     BADEXIT            GOTO ERROR EXIT
*--- GET THIS SYSTEMS APPLID -----------------------------------------
CREATE   EXEC CICS ASSIGN APPLID(APPLID)
         MVC   TSSYSID,SYSID      SETUP FIXED PART OF TERMID
         MVI   TSTID3,C'A'        AND INITIALISE
         MVI   TSTID4,C'A'         VARIABLE PART
         MVI   TSUSE,FREEONE      ENSURE 'ALL IN USE' FLAG IS OFF
*--- WRITE INITIAL RECORD --------------------------------------------
         EXEC CICS WRITEQ TS QUEUE(NAMETS) FROM(TSREC) ITEM(ITEMNO)    X
               LENGTH(LENTS) RESP(EIRESP) MAIN
         CLC   EIRESP,DFHRESP(ERROR)   IF ERROR RESPONSE
         BE    BADEXIT            GO TO ERROR EXIT
TESTTID  EXEC CICS INQUIRE TERMINAL(TSTID) RESP(EIRESP)
         CLC   EIRESP DFHRESP(TERMIDERR) TERMID EXIST ?
         BNE   GENNEXT            IT DOES, GO TRY AGAIN
         CLC   EIRESP,DFHRESP(ERROR) ANY OTHER ERROR ?
         BE    BADEXIT             YES, GO TO ERROR EXIT
*--- GOT GOOD NEW TERMID ---------------------------------------------
         MVI   TSUSE,FREEONE      ENSURE 'ALL IN USE' FLAG IS OFF
         MVC   TRMIDSEL,TSTID     MOVE IN NEW TERMID
WRITEQ   EXEC CICS WRITEQ TS QUEUE(NAMETS) FROM(TSREC) ITEM(ITEMNO)    X
               LENGTH(LENTS) RESP(EIRESP) MAIN REWRITE
         CLC   EIRESP,DFHRESP(ERROR)  IF ERROR RESPONSE
         BE    BADEXIT            GO TO ERROR EXIT
*--- SELECTIONS COMPLETE, RETURN -------------------------------------
GOODEXIT MV1   INSTATUS,X'00'      INDICATE ALL OK
BADEXIT  B     RETURN              EXIT PROGRAM
         DROP  R2
         DROP  R4
         DROP  R5
* *                D E L E T E   P R O C E S S I N G                 *
DELPROC1 DS    0H
         USING DLPARMDS,R2         BASE DSECT
          CLI   DLRQTYPE,C'1'       DELETE REQUEST?
         BNE   RETURN              ...NO, ERROR, EXIT
*A TERMINAL HAS BEEN DELETED, READ TS Q AND TURN OFF 'ALL IN USE' FLAG
*--- READ LAST USED TID FROM TSQ
         EXEC CICS READQ TS QUEUE(NAMETS) INTO(TSREC) ITEM(ITEMNO)     X
               RESP(EIRESP)
         CLC   EIRESP,DFHRESP(ERROR) ANY ERROR ?
         BE    RETURN              YES, GOTO ERROR EXIT
         MVI   TSUSE,FREEONE      ENSURE 'ALL IN USE' FLAG IS OFF
         EXEC CICS WRITEQ TS QUEUE(NAMETS) FROM(TSREC) ITEM(ITEMNO)    X
               LENGTH(LENTS) RESP(EIRESP) MAIN REWRITE
RETURN   EXEC CICS RETURN ,
LITPOOL  LTORG
NAMETS   DC    C'##AUTO##'       NAME OF TEMP STORE Q
LENTS    DC    AL2(L'TSREC)      TEMP STORE LENGTH
ITEMNO   DC    H'1'              TEMP STORE QUEUE ITEM NO - ONLY 1
TRTAB    DC    256C' '           TRANSLATE TABLE
         ORG   TRTAB+C'A'        TO ADD 1 TO CURRENT
         DC    C'BCDEFGHIJ'      CHARACTER TO GIVE
         ORG   TRTAB+C'J'        NEXT CHARACTER
         DC    C'KLMNOPQRS'      IN RANGE A-Z,0-9
         ORG   TRTAB+C'S'
         DC    C'TUVWXYZ0'
         ORG   TRTAB+C'0'
         DC    C'123456789A'
         END   DFHZATDX


Garry Barker
Senior Systems Programmer
Woolwich Equitable Building Society (UK)     ) WEBS 1988



































