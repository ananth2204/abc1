 Remote screen viewing


THE PROBLEM

Help Desk, applications, and technical support personnel are frequently asked by
end users to debug problems for which they have only word of mouth information.
Usually the problem originates in such a manner that a CICS screen indicates an
abend or unrecognised situation.  The data present on the screen at the point a
problem occurs is obviously very critical in successfully debugging the
situation.  Frequently, in the course of a telephone conversation, this critical
data is either misinterpreted or totally misrepresented by either party
involved.  If the person helping the end user with their problem could view the
screen in duplicate at the same time, it would go a long way in helping to solve
the problem.


THE SOLUTION

I have written a series of three programs that can be executed by Help Desk-type
personnel, which allow immediate viewing of an end-user screen.  When a call is
received that involves a screen-associated question or problem, the Help Desk
simply executes a transaction that presents them with the screen as seen by the
end user.  If the problem cannot be immediately resolved, the screen can be
printed using a CICS hard copy print facility.  It can then be used as
supporting documentation for further analysis, usually by the applications or
technical support group.


PROGRAM/TASK DESCRIPTION

As mentioned, three programs were written to achieve the desired results.
Basically the programs are broken down as follows.  The first program is called
by executing transaction GRAB at the requesting terminal.  When GRAB is
executed, it is necessary to supply the terminal-id of the terminal which is to
viewed, eg GRAB TS03.  Program GETSCRN1 is then executed and after doing some
housekeeping, kicks off transaction GSC2 at the desired terminal.  GSC2, which
executes program GETSCRN2, reads the screen buffer and writes it out to
temporary storage.  A key element of GETSCRN2 is that it will not disturb what
is in progress at the terminal.  It does this by saving the next transaction-id
and restarting it, in addition to passing any COMMAREA.  Task GSC3 then gets
kicked off back at the requesting terminal, with the screen being read from
temporary storage and presented in duplicate.  This has been successfully
implemented in an environment consisting of CICS 1.6.1 under MVS/370, with all
3270-type terminals in the network.  I should also mention that this technique
is best suited to pseudo-conversational environments, since only the last screen
of a conversational task could be retrieved.  That is because task GSC2 cannot
kick off until an in-progress task completes.


GETSCRN1

*   GETSCRN1 IS RESPONSIBLE FOR INITIATING THE PROCESS AT
*   THE 'ASKING FOR SCREEN' TERMINAL.
TCTTEAR  EQU   4                   TCTTE ADDRESS
CSACBAR  EQU   13                  CSA ADDRESS
         COPY DFHCSADS             CSA LAYOUT
         USING DFHTCADY,12         SET UP TCA ADDRESSABILITY
         DFHTCA   CICSYST=YES      TCA LAYOUT
         DFHTCTZE CICSYST=YES      TCT TERMINAL ENTRY LAYOUT
GETSCRN1 DFHEIENT DATAREG=(7)
         MVC   SENDTERM,EIBTRMID   SAVE TERMINAL THATS ASKING FOR THIS
         MVC   LENGTH,=AL2(INLEN)  GET LENGTH OF THE INPUT
*     GET INPUT FROM ORIGINATING TERMINAL
         EXEC  CICS HANDLE CONDITION LENGERR(IGNOREIT)
         EXEC  CICS RECEIVE SET(10) LENGTH(LENGTH)
 IGNOREIT LH    5,LENGTH            GET THE INPUT LENGTH
         CLI   0(10),X'11'         IS THIS AN SBA?
         BNE   NOTSBA              IF NOT, DONT WORRY ABOUT IT
         LA    10,3(10)            IT IS, SO MAKE THE
         SH    5,=H'3'                 NECESSARY ADJUSTMENT
NOTSBA   CH    5,=AL2(9)           IS INPUT LONGER THAN 9 BYTES
         BNH   GOODLEN             NO, THATS GOOD
         LH    5,=AL2(9)           LONGER THAN 9, SO SET TO 9
GOODLEN  STH   5,LENGTH            STORE LENGTH
         MVC   INBUFF(9),0(10)     MOVE THE INPUT BUFFER
         EXEC  CICS ADDRESS CSA(CSACBAR)
         MVC   TCATPTA,INTERMID    SETUP THE TERMID FOR LOCATE
         DFHTC CTYPE=LOCATE,INVID=NOTFOUND,TERM=ID
         L     TCTTEAR,TCATPTA     GET TCTTE ADDRESS
         XC    TERMFLAG,TERMFLAG   CLEAR TERMFLAG
         CLI   TCTTETT,TCTTETL7    IS THIS A LOCAL 3277?
         BE    VERSESS             YES
         CLI   TCTTETT,TCTTET37    IS THIS A REMOTE 3277?
         BE    VERSESS             YES
         OI    TERMFLAG,FLAG2      NO, INDICATE SO
         B     TERMCHEK            NO NEED TO GO FURTHER
NOTFOUND MVC   MSGDATA(23),NOTCTMSG MOVE 'NO TCT' MESSAGE
         B     RESEND
VERSESS  CLI   TCTEINSD,TCTENIS    IS THE TERMINAL IN SESSION?
         BE    TERMCHEK            YES
         OI    TERMFLAG,FLAG1      NO, INDICATE SO
TERMCHEK TM    TERMFLAG,ERRORS WAS THERE A PROBLEM WITH THE TERMINAL?
         BNZ   TERMBAD             BRANCH IF THERE WAS
*     START A TASK AT THE TERMINAL WHOSE SCREEN WE ARE RETRIEVING
         MVC   LENGTH,=AL2(4)      SENDING FOUR BYTES
         EXEC  CICS START TRANSID('GSC2') TERMID(INTERMID)             *
               FROM(SENDTERM) LENGTH(LENGTH)
RETURN   EXEC  CICS RETURN
*     ERROR OCCURRED, RESEND ORIGINAL SCREEN WITH MESSAGE
TERMBAD  TM    TERMFLAG,FLAG1       IF FLAG1 ON?
         BZ    TERMBAD2             NO, FLAG2 MUST BE
         MVC   MSGDATA(27),NOTONMSG MOVE 'NOT ON' MESSAGE
         B     RESEND
TERMBAD2 MVC   MSGDATA(36),BADTPMSG MOVE 'BAD TYPE' MESSAGE
RESEND   MVC   MSGTERM(4),INTERMID  MOVE IN THE TERMINAL ID
         MVC   IOAREA,SBA           SET UP SBA
         MVC   MSGSBA,HILITE        SET UP HI INTENSITY
         MVC   MSGATTR,ATTRMSG      MOVE IN RESET ATTRIBUTE
         MVC   LENGTH,=AL2(TIOALEN) SET LENGTH OF SEND DATA
         EXEC  CICS SEND FROM(IOAREA) LENGTH(LENGTH) ERASE WAIT
         XC    MSGDATA,MSGDATA      CLEAR MSGDATA
         B     RETURN
SBA      DC    X'114040'           SBA FOR START OF BUFFER
HILITE   DC    X'11C7601DE8'       HI INTENSITY
ATTRMSG  DC    X'1DC5'             RESET ATTRIBUTE
NOTONMSG DC    C'XXXX NOT LOGGED ON'
BADTPMSG DC    C'XXXX IS AN INVALID TERMINAL TYPE'
NOTCTMSG DC    C'XXXX NOT IN TCT'
STARTERM DS    F                   TERMINAL FOR START
SENDTERM DS    CL4                 SENDING TERMID
LENGTH   DS    H
TERMFLAG DS    XL1                 FLAG FOR TERMINAL CHECKS
FLAG1    EQU   X'01'               FLAG FOR NOT LOGGED ON
FLAG2    EQU   X'02'               FLAG FOR NOT A 3270 TERMINAL
ERRORS   EQU   X'0F'               ERROR MASK
IOAREA   DS    CL3                 SBA FOR RESEND
INBUFF   EQU   *
INTRANID DS    CL4                 TRANSACTION ID
         DS    CL1                 ALLOW FOR A SPACE
INTERMID DS    CL4                 TERMINAL WE ARE GETTING SCREEN OF
INLEN    EQU   *-INBUFF
 MSGAREA  DS    0CL86
MSGSBA   DS    CL5
MSGTERM  EQU   *                   OFFSET TO TERMINAL IN MESSAGE
MSGDATA  DS    CL79                ERROR MESSAGE
MSGATTR  DS    CL2                 RESET ATTRIBUTE FOR NORMAL
TIOALEN  EQU   *-IOAREA
         LTORG
         END


GETSCRN2

*   PROGRAM GETSCRN2 WILL BE STARTED BY GETSCRN1 USING
*   TRANSACTION GSC2 AT THE 'TO BE GRABBED' TERMINAL.
R3       EQU   3               HOLDSCRN ADDRESS
TCTTEAR  EQU   4               TCTTE ADDRESS
R11      EQU   11              COMMAREA BASE
R12      EQU   12              TCA ADDRESS
CSACBAR  EQU   13              CSA ADDRESS
         COPY  DFHCSADS        CSA LAYOUT
         USING DFHTCADY,R12    SET UP TCA ADDRESS
         DFHTCA   CICSYST=YES  TCA LAYOUT
         DFHTCTZE CICSYST=YES  TCTTE LAYOUT
*       AREA TO KEEP THE SCREEN IMAGE
         USING HOLDSCRN,R3
HOLDSCRN DSECT
         DS    CL4090
*       DUMMY COMM AREA IN CASE ONE IS BEING PASSED
COMMSTG  DSECT
COMMAREA EQU   *
GETSCRN2 DFHEIENT CODEREG=(5),DATAREG=(7)
         EXEC  CICS ADDRESS CSA(CSACBAR)
         L     TCACBAR,CSACDTA      GET TCA ADDRESS
         L     TCTTEAR,TCAFCAAA     GET TCTTE ADDRESS
         MVC   NEXTTRAN,TCTTETC     STORE NEXT TRANID
         MVC   QNAME(4),=CL4'GRAB'  SET PREFIX IN QUEUE NAME
         MVC   QNAME+4(4),EIBTRMID  SET TERMID IN QUEUE NAME
         MVC   QITEM,=H'1'          SET ITEM TO 1
*     READ TERMINAL BUFFER TO SEND BACK TO REQUESTING TERMINAL
READBUF  EXEC  CICS GETMAIN SET(R3) LENGTH(4100) INITIMG(HEX00)
         MVC   LENGTH,=AL2(4090)    CAN'T BE MORE THAN 4090 CHARACTERS
         EXEC  CICS RECEIVE INTO(HOLDSCRN) ASIS BUFFER LENGTH(LENGTH)
*     PUT THE BUFFER INTO TEMP STORAGE FOR LATER RETRIEVAL
         EXEC  CICS HANDLE CONDITION ITEMERR(RETRIEVE)
         EXEC  CICS WRITEQ TS QUEUE(QNAME) FROM(HOLDSCRN) ITEM(QITEM)  *
               LENGTH(LENGTH)
*     RETRIEVE TERMID OF PERSON ASKING FOR THIS SCREEN
RETRIEVE MVC   LENGTH,=AL2(4)       WE'RE GETTING FOUR BYTES
         EXEC  CICS RETRIEVE INTO(RETAREA) LENGTH(LENGTH)
*     START A TASK AT THE ASKING TERMINAL, WHICH WILL PRESENT THE INFO
         MVC   LENGTH,=AL2(SENDLEN)
         EXEC  CICS START TRANSID('GSC3') TERMID(RETAREA)              *
               FROM(SENDAREA) LENGTH(LENGTH)
*     TASK COMPLETE, GET OUT BUT DON'T BOTHER WHAT WAS IN PROGRESS
RETURN   MVC   CALEN,EIBCALEN          SAVE COMMAREA LENGTH
         L     R11,DFHEICAP            LOAD COMMAREA POINTER
         USING COMMSTG,R11             SET ADDRESSABILITY
         EXEC  CICS RETURN TRANSID(NEXTTRAN) COMMAREA(COMMAREA)        *
               LENGTH(CALEN)
         LTORG
DFHEISTG DSECT
NEXTTRAN DS    F
LENGTH   DS    H
CALEN    DS    H
HEX00    DC    X'00'
SENDAREA DS    0F
 QNAME    DS    CL8
QITEM    DS    H
SENDLEN  EQU   *-SENDAREA
RETAREA  DS    CL4                     SENDING TERMID
         END


GETSCRN3

*   PROGRAM GETSCRN3 WILL BE STARTED BY GETSCRN2 USING
*   TRANSACTION GSC3 AT THE 'ASKING FOR SCREEN' TERMINAL.
R4       EQU   4                       STORAGE ADDRESS
R8       EQU   8                       WORK REG
STORAGE  DSECT
         USING STORAGE,R4
OUTBUF   EQU   *
SBA      DS    CL3                     SBA
HOLDSCRN DS    CL4090                  HOLD AREA FOR SCREEN
GETSCRN3 DFHEIENT
         XC    RETAREA,RETAREA         CLEAR RETRIEVE AREA
         MVC   LENGTH,=AL2(RETLEN)     RETRIEVE LENGTH
*        RETRIEVE INFO RELATIVE TO WHAT QUEUE TO READ
         EXEC  CICS RETRIEVE INTO(RETAREA) LENGTH(LENGTH)
         EXEC  CICS GETMAIN SET(R4) LENGTH(4100) INITIMG(HEX00)
         MVC   LENGTH,=AL2(4100)       MAX LENGTH
*        GET THE SCREEN WE'RE ASKING FOR
         EXEC CICS READQ TS QUEUE(QNAME) INTO(HOLDSCRN) LENGTH(LENGTH) *
               ITEM(QITEM)
         MVC   SBA,SBASEQ              MOVE SBA IN OUT BUFFER
         LH    R8,LENGTH               GET THE QUEUE LENGTH
         AH    R8,=H'3'                ADD 3 FOR SBA
         STH   R8,LENGTH               STORE THE ADJUSTED LENGTH
*        SHOW THE SCREEN TO THE TERMINAL WHO ASKED FOR IT
         EXEC  CICS SEND FROM(OUTBUF) LENGTH(LENGTH) CTLCHAR(HEX42)    *
               ERASE
         EXEC  CICS DELETEQ TS QUEUE(QNAME)
         EXEC  CICS RETURN
SBASEQ   DC    X'114040'               SBA FOR OUTPUT BUFFER
HEX00    DC    X'00'                   USED TO INIT GETMAIN AREA
HEX42    DC    X'42'                   RESET AND FREE KEYBOARD
DFHEISTG DSECT
LENGTH   DS    H
RETAREA  DS    0F
QNAME    DS    CL8
QITEM    DS    H
RETLEN   EQU   *-RETAREA
         END


Ernie Ishman
Systems Programmer
Geisinger System Services (USA)    ) Geisinger System Services 1987














