CSA storage relief

Our shop has been struggling with MVS CSA storage for quite
some time.  It seems that we have so many products that all
want a piece of this limited resource and we are constantly
looking for ways to reduce the amount of CSA storage below
the 16-megabyte line.

One of our future requirements will be to install DBCTL under
IMS 3.1 and we have been warned that this animal will
consume anywhere from 500K to 800K of CSA storage below
the line.  This concerns us and points out a serious lack of
attention being given by IBM to the enormous amount of CSA
available above the 16-megabyte line.  If they aren't writing
code to take advantage of all the new and wonderful ESA kinds
of features, what are we paying for?

Given this requirement to find a large piece of unused CSA
below the line caused us to examine the contents of the CSA
with a fine-toothed comb.  One large allocation kept showing
up in every CICS region we examined.  This was subpool 228
key 7.  DL/I was grabbing this huge piece at initialization time
when CICS was coming up.  In one of our large CICS regions
with over 100 DL/I threads, 224K of CSA below the line had
been tied up.

We decided to pursue this with IBM to the bitter end and set up
a conference call with some of our guys and some of their guys
from the Dallas System Center to discuss the matter.  Once
they realized that we had done our homework and were asking
embarrassing questions, they scratched their heads and came up
with a ZAP to an IMS module for us to try.

It turns out that one of the IMS modules (DFSAOSF0) had
some crusty old code in it that automatically allocated OSAM
buffers based on the number of DL/I threads.  No one in our
shop was old enough to even know what OSAM was, and we
certainly did not use it.  What the one-line ZAP did was to
change a conditional branch instruction to a hard branch and
simply branch around the code that allocated the OSAM
buffers.  We had looked at these buffers and they were always
full of nulls and did not appear to be used.

We applied the ZAP on a test system and were mildly pleased
that we had regained some of our CSA.  Realizing that our test
regions did not have anywhere near the resource requirements
of our production regions, we were anxious to put this ZAP on
in production and re-IPL to see what we could get back.

After an IPL one Sunday morning, we brought up all our
systems and started looking at CSA allocations.  Unbelievably,
the one-line ZAP had given us back well over 600K of CSA
and our utilization went from over 80 percent to less than 50
percent of below-the-line CSA storage.  This gave us the
necessary space to think about bringing up the DBCTL region
and proceeding with our plans to implement IMS 3.1.

There could be potentially hundreds of users that are faced with
this same dilemma and this information might help them to buy
back a large parcel of CSA for a very small price.  We made it
known to IBM that we were not at all impressed with the way
we had to spend so many hours tracking this down when the
solution was so simple all the time, but only known to the folks
in IMS at IBM.

I understand that IBM has now decided to treat this ZAP as a
sanctioned APAR and make it available to all users, not just
the ones that spend hours and hours tracking this back to
OSAM buffers and scream loud enough to warrant receipt of
this magic ZAP.  If anyone out there running CICS and DL/I is
looking for some free CSA, this is the ZAP for you.

The following PTFs address the problem:

o      IMS 2 - UL75276
o      IMS 3.1 - UL74533.


Robert Buckley
CICS Team Leader
Wal-Mart Stores Inc (USA)


