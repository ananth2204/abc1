 CICS run-time message handling
One thing that is particularly annoying about long-running jobs like CICS is
that the SYSOUT datasets to which they write error and diagnostic messages do
not become available for browsing until after they are closed, which is usually
when the job ends.  Unless you have access to some kind of spool file display
facility such as SDSF, crucial messages from a system such as CICS can go
unnoticed until it is too late to do anything about them.  In addition, the CICS
session log is not particularly easy to look at, with rubbish characters at the
beginning and end of each message caused by record lengths being included and
fixed length records being used for variable length data.
The majority of CICS run-time messages are directed to one of several Transient
Data (TD) queues defined in the DCT, which correspond to one or more TYPE=SDSCI
entries to tie them in with the SYSOUT datasets in the JCL.  The actual
destination of each message is given for it in the Messages and Codes manual.
By changing the entry for the TD queues to TYPE=INDIRECT and redirecting them to
a new TD queue with a trigger level of 1, a transaction can be fired off each
time a message is generated.  It can then be processed in any way that you wish.
The two short programs given here intercept messages and write them to a VSAM
KSDS and a SYSOUT file.  The first program is invoked by the transaction defined
on the trigger-level TD queue and reads records until the queue is empty.  This
is important because the trigger mechanism is only activated when a write to the
queue is detected.  If the transaction reads only the first record, the
remaining records would not activate the trigger and would stay on the queue
until the next write to it, thus creating the potential for all kinds of
problem.  The benefit is the reduction in task dispatching overhead if more than
one record is written to the queue, which is presumably the reason why IBM
designed it that way.
The second program is responsible for maintaining the SYSOUT dataset listing:
page throws, header lines, page numbering, date and time stamps etc.  If the
first program decides that the message is to be included in the hardcopy
listing, it links to the second with the message passed in the COMMAREA.  This
message has  a standard 133-column print record layout with the first byte
reserved for ANSI control characters, although the program as shown only honours
the page throw character, CT1U.  You could remove the LINK in CICSLOG and
replace it with a WRITEQ TD to MAST to output the message to the SYSOUT log if
you are not bothered about formatting the listing;  it will still be a great
improvement on the way CICS does it.
You will need to write a small screen-driven program on either CICS or,
preferably, the host operating system (TSO on MVS or CMS on VM) to browse the
VSAM KSDS file.  ItUs probably a better idea to write it on some system external
to CICS, just in case a problem with CICS prevents you looking at the diagnostic
messages.  It is worth spending time and effort in the design of the browsing
program so you end up with a useful tool.  Unless you incorporate functions like
displaying or excluding all messages containing a given string, or all messages
generated on or after a given date, there is no point in writing it, you might
just as well use REPRO to print the contents of the file when you need it.
The programs and table changes shown are implemented on CICS 1.6.1 under MVS/XA,
but I can foresee no difficulty in installing them on different releases or
operating systems.  The only potential problem might be the paragraph INIT-
CONTROL in program MASTWRT where it goes after the job name.  If changes are
found to be necessary, the code is simple enough to change for anyone with only
a small amount of CICS knowledge.  Users of 1.7 may wish to change the date
calculation routine in MASTWRT to make use of the new CICS commands for time and
date formatting, and also change the CEMT call in CICSLOG to an EXEC CICS SET.
Once you have got CICSLOG working, you might think of other functions for it to
perform.  For instance, you could include a selection mechanism based on whether
or not the message contains all or part of a given string.  The program could
then decide whether to include the message in the VSAM file, the SYSOUT listing,
both, or neither of them.  Another use might be for a dedicated CICS console -
either writing selected or all messages to a CICS terminal in the Operations
area or using the DFHWTO macro to write them to the main operator console.  VM
users could issue a DIAG08 or SVC 202 to send the message (via CP SMSG or CP
MSGNOH) to either a disconnected virtual machine running WAKEUP or the
Programmable Operator Facility.
TABLE CHANGES
The following entries must be made in the DCT:
 MASTOUT  DFHDCT TYPE=SDSCI,            CICSLOG SYSOUT DATASET          X
               DSCNAME=MASTOUT,                                        X
               TYPEFLE=OUTPUT,                                         X
               BLKSIZE=2660,                                           X
               RECSIZE=133,                                            X
               RECFORM=FIXBLKA
MAST     DFHDCT TYPE=EXTRA,            CICSLOG MASTER DESTINATION -    X
               DESTID=MAST,               WRITTEN TO BY MASTWRT        X
               DSCNAME=MASTOUT,                                        X
               OPEN=INITIAL
LOGF     DFHDCT TYPE=INTRA,            CICSLOG TRIGGER DEST            X
               DESTID=LOGF,                                            X
               DESTFAC=FILE,                                           X
               TRANSID=LOGF,           THIS IS THE TRANSACTION THAT    X
               TRIGLEV=1                  INTERCEPTS THE MESSAGES
xxxx     DFHDCT TYPE=INDIRECT,         ONE OF THESE FOR EACH CICS      X
               DESTID=xxxx,               MESSAGE QUEUE THAT YOU WANT  X
               INDDEST=LOGF               TO INTERCEPT.
The destinations that you may want to intercept are:
%    CSCS - sign-on/off/reject messages
%    CSDL - audit trail messages from CEDA transaction
%    CSML - sign-off program output
%    CSMT - general terminal messages and abends
%    CSTL - terminal I/O error messages.
Do not try to redirect CSSL, CSSM, or CSSN as these are used by the automatic
statistics programs and are only written during shut-down, by which time no
transaction will be allowed to start; as a result the output will be lost.
Place the following entry in the FCT:
LOGFILE  DFHFCT TYPE=DATASET,                                          X
               DATASET=LOGFILE,                                        X
               ACCMETH=(VSAM,KSDS),                                    X
               SERVREQ=(NEWREC),                                       X
               OPEN=INITIAL,                                           X
               BUFNI=1,                                                X
               BUFND=2,                                                X
               STRNOG=0,                                               X
               STRNO=1
The key is the first 10 bytes, and the record size should be defined as
(71,142).  Use 4096 for the cluster Control Interval size and 512 for the index.
When you initially create the VSAM file, create space for about 5000 records and
remember to initialise it with a dummy record with a key of nines or high-
values, otherwise you will get a Control Interval split each time a new record
is written to it, which will degrade performance.  When the file fills up, you
will have to clear it down and re-initialise it.  The record key layout can be
derived from the CICSLOG source.
You will need to include a MASTOUT DD SYSOUT=* statement for the SDSCI entry,
and a DD statement for the VSAM KSDS from the FCT in your start-up JCL.
CICSLOG PROGRAM SOURCE
*ASM XOPTS(NOPROLOG NOEPILOG)
*** THIS PROGRAM READS CICS RUNTIME MESSAGES DIRECTED TO TD QUEUE   ***
*   'LOGF' AND WRITES THEM TO A VSAM KSDS WHICH CAN BE BROWSED        *
*   EXTERNALLY TO CICS. IT ALSO COPIES THE MESSAGE TO A FIXED-LENGTH  *
*   RECORD PADDED WITH BLANKS FOR OUTPUT TO A SYSOUT DATASET. THIS    *
*   CAN EITHER BE DONE VIA A WRITEQ TD COMMAND TO TD QUEUE 'MAST' OR  *
*   VIA A LINK TO PROGRAM 'MASTWRT' FOR FULL PRINTER CONTROL WITH     *
*   HEADINGS. THIS VERSION HAS BEEN DEVELOPED AND TESTED USING CICS   *
*** VERSION 1.6.1 UNDER MVS/XA.                                     ***
         DFHEISTG
RECLEN   DS    H
VSAMLEN  DS    H
*** VSAM RECORD DEFINITION ***
         DS    0F
VSAMREC  DS    0CL142
VSAMKEY  DS    0CL10
VSAMDATE DS    PL4
VSAMTIME DS    PL4
 VSAMSUFX DS    H
VSAMTEXT DS    CL132
*** VSAM RECORD DEFINITION - COBOL ***
*      01  VSAMREC.
*          06 VSAMKEY.
*             11 VSAMDATE     PIC S9(7)  COMP-3.
*             11 VSAMTIME     PIC S9(7)  COMP-3.
*             11 VSAMSUFX     PIC 9(4)   COMP.
*          06 VSAMTEXT        PIC X(132).
*** VSAM RECORD DEFINITION - PL/I ***
* DCL  01 VSAMREC,
*         06 VSAMKEY,
*            11 VSAMDATE     FIXED DEC(7,0),
*            11 VSAMTIME     FIXED DEC(7,0),
*            11 VSAMSUFX     FIXED BIN(15),
*         06 VSAMTEXT        CHAR(132);
*** TRANSIENT DATA RECORD BUFFER ***
LOGFTEXT DS    CL132
*** SYSOUT RECORD DEFINITION ***
MASTBUFF DS    0CL133
MASTCCHR DS    C
MASTTEXT DS    CL132
*** CEMT OUTPUT AREA ***
CEMTOUT  DS    CL80
*** CEMT PARAMETER LIST ***
         DS    0D
CEMTPARM EQU   *
PARMCMD  DS    F
PARMCLN  DS    F
PARMIND  DS    F
PARMOUT  DS    F
PARMOLN  DS    F
         DFHEIEND
*** PROGRAM ENTRY POINT ***
CICSLOG  DFHEIENT CODEREG=9,DATAREG=10,EIBREG=11
         EXEC  CICS HANDLE CONDITION DUPREC(DUPREC) NOSPACE(NOSPACE)   X
               NOTOPEN(NOTOPEN) QZERO(RETURN) ERROR(RETURN)
         EXEC  CICS IGNORE CONDITION LENGERR
*** READ ITEMS FROM QUEUE UNTIL NONE LEFT ***
RDITEM   MVI   LOGFTEXT,C' '           CLEAR I/O BUFFER
         MVC   LOGFTEXT+1(131),LOGFTEXT
         EXEC  CICS READQ TD QUEUE('LOGF') SET(R7) LENGTH(RECLEN)
* MOVE THE VARIABLE-LENGTH MESSAGE TO THE FIXED-LENGTH BUFFER,
* PADDED WITH SPACES ON THE RIGHT.
         SR    R6,R6                   CLEAR A REGISTER
         LH    R6,RECLEN               GET THE RECORD LENGTH
         BCTR  R6,R0                   ADJUST IT FOR MOVE
         EX    R6,LOGFMVC              MOVE IT
* ANY CALL TO A MESSAGE FILTER SUBROUTINE SHOULD BE PERFORMED HERE.
* IF THE RECORD IS NOT TO BE WRITTEN TO THE VSAM FILE OR NOT TO BE
* PRINTED IT SHOULD RETURN THIS INFORMATION BACK TO THIS PROGRAM,
* WHICH CAN THEN DECIDE WHETHER TO BYPASS ANY OF THE FOLLOWING TWO
* STEPS.
*** COPY MESSAGE TO VSAM FILE ***
FILEMSG  MVC   VSAMTEXT,LOGFTEXT       MOVE ENTIRE RECORD
         SR    R6,R6                   CLEAR A REGISTER
         LH    R6,RECLEN               GET THE RECORD LENGTH
         LA    R6,10(,R6)              INCLUDE KEY IN LENGTH
         STH   R6,VSAMLEN              SAVE THE LENGTH
         EXEC  CICS ASKTIME
         CLC   VSAMTIME,EIBTIME        TIME CHANGED ?
         BE    DUPREC                  NO, GOING TO RAISE 'DUPREC'.
*** IF THE TIME IS THE SAME AND WE CLEAR THE SUFFIX, WE WILL HAVE   ***
*   TO KEEP RE-TRYING THE FILE WRITE WITH AN INCREMENTED SUFFIX UNTIL *
*   THE DUPREC CONDITION GOES AWAY. IF WE TEST THE TIME FIRST AND     *
*   DON'T RESET THE SUFFIX WHEN THE TIME IS THE SAME, WE CAN SAVE     *
 *   REPEATED ATTEMPTS BY GOING STRAIGHT TO THE DUPREC HANDLER,        *
*** BECAUSE WE KNOW  WE'RE GOING TO RAISE THIS CONDITION.           ***
         MVC   VSAMDATE(4),EIBDATE     PUT THE DATE IN
         MVC   VSAMTIME(4),EIBTIME     PUT THE TIME IN
         MVC   VSAMSUFX(2),NULLS       CLEAR THE SUFFIX FIELD
FILEWRT  EXEC  CICS WRITE DATASET('LOGFILE') LENGTH(VSAMLEN)           X
               FROM(VSAMREC) RIDFLD(VSAMKEY)
*** COPY MESSAGE TO SYSOUT DATASET ***
PRNTMSG  MVI   MASTOCHR,C' '           CLEAR OUT THE PRINT CONTROL CHR
         MVC   MASTTEXT,LOGFTEXT       PUT THE MSG IN THE COMMAREA
         EXEC  CICS LINK PROGRAM('MASTWRT') COMMAREA(MASTBUFF)
* IF YOU AREN'T BOTHERED ABOUT FORMATTING THE LISTING, REPLACE THE
* ABOVE COMMAND WITH THE FOLLOWING:
*        EXEC  CICS WRITEQ TD QUEUE('MAST') FROM(LOGFTEXT) LENGTH(133)
         B     RDITEM                  SEE IF THERES ANOTHER MESSAGE
RETURN   EXEC  CICS RETURN
***      ERROR HANDLERS        ***
*** NO SPACE LEFT IN VSAM FILE ***
* DISABLE FURTHER ATTEMPTS TO WRITE TO THE FILE, THEN GO PRINT RECORD
NOSPACE  MVC   MASTTEXT,FULLMSG
         EXEC  CICS LINK PROGRAM('MASTWRT') COMMAREA(MASTBUFF)
* CLOSE THE FILE AND FALL THROUGH TO 'NOTOPEN'
         LA    R1,CEMTCMD
         ST    R1,PARMCMD
         LA    R1,CEMTCLN
         ST    R1,PARMCLN
         LA    R1,CEMTIND
         ST    R1,PARMIND
         LA    R1,CEMTOUT
         ST    R1,PARMOUT
         LA    R1,CEMTOLN
         ST    R1,PARMOLN
         EXEC  CICS LINK PROGRAM('DFHEMTA') COMMAREA(CEMTPARM)
*** FILE IS NOT OPEN - JUST PRINT THE MESSAGE ***
NOTOPEN  B     PRNTMSG
*** DUPLICATE KEY - MODIFY IT ***
DUPREC   SR    R2,R2                   CLEAR A WORK REG
         LH    R2,VSAMSUFX             GET SUFFIX FIELD
         CH    R2,=H'-1'               LAST ONE ?
         BE    PRNTMSG                 YES, GIVE UP
         LA    R2,1(,R2)               BUMP IT UP
         STH   R2,VSAMSUFX             USE IT
         B     FILEWRT                 RETRY THE WRITE
         DS    0D
LOGFMVC  MVC   LOGFTEXT(0),0(R7)       MOVE MESSAGE TO BUFFER
VSAMMVC  MVC   VSAMTEXT(0),LOGFTEXT    MOVE MESSAGE TO VSAM RECORD
NULLS    DC    8X'00'
SPACES   DC    8C' '
FULLMSG  DC    CL132'*** CICSLOG FILE IS FULL'
*** CEMT DATA ***
CEMTCMD  DC    CL80'SET DA(LOGFILE) CLOSE'
CEMTCLN  DC    H'80'
CEMTIND  DC    X'00'
CEMTOLN  DC    H'80'
         END
MASTWRT PROGRAM SOURCE
       IDENTIFICATION DIVISION.
           PROGRAM-ID.       MASTWRT
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MSG-DATE           PIC 9(7).
       01  MSG-DATE-REDEF     REDEFINES MSG-DATE.
           02 FILLER          PIC 9(2).
           02 MSG-DATE-YY     PIC 9(2).
           02 MSG-DATE-DDD    PIC 9(3).
        01  MSG-TIME           PIC 9(7).
       01  MSG-TIME-REDEF     REDEFINES MSG-TIME.
           02 FILLER          PIC 9(1).
           02 MSG-TIME-HH     PIC 9(2).
           02 MSG-TIME-MM     PIC 9(2).
           02 MSG-TIME-SS     PIC 9(2).
       01  PRINT-RECORD.
           02 PRINT-CCHR      PIC X.
           02 PRINT-DATA      PIC X(132).
       01  CONTROL-DATA.
           02 CONTROL-PAGENUM PIC 9(4) COMP.
           02 CONTROL-LINECNT PIC 9(4) COMP.
           02 CONTROL-JOBNAME PIC X(8).
       01  PAGE-HEADER.
           02 PAGE-CCHR       PIC X(1)   VALUE '1'.
           02 PAGE-DATE.
              03 PAGE-DATE-DD PIC 9(2).
              03 FILLER       PIC X(1)   VALUE '/'.
              03 PAGE-DATE-MM PIC 9(2).
              03 FILLER       PIC X(1)   VALUE '/'.
              03 PAGE-DATE-YY PIC 9(2).
           02 FILLER          PIC X(2)   VALUE SPACES.
           02 PAGE-TIME.
              03 PAGE-TIME-HH PIC 9(2).
              03 FILLER       PIC X(1)   VALUE ':'.
              03 PAGE-TIME-MM PIC 9(2).
              03 FILLER       PIC X(1)   VALUE ':'.
              03 PAGE-TIME-SS PIC 9(2).
           02 FILLER          PIC X(33)  VALUE SPACES.
           02 PAGE-JOBNAME    PIC X(8)   VALUE '????????'.
           02 FILLER          PIC X(20)  VALUE ' SYSTEM ACTIVITY LOG'.
           02 FILLER          PIC X(44)  VALUE SPACES.
           02 FILLER          PIC X(5)   VALUE 'PAGE '.
           02 PAGE-PAGENUM    PIC Z(3)9.
       01  MONTH-DATA.
           02 MONTH-LENGTHS   PIC X(24)  VALUE
           '312831303130313130313031'.
           02 MONTH-TABLE     REDEFINES MONTH-LENGTHS
                              PIC 9(2) OCCURS 12.
       01  MASTCTRL-RECL      PIC 9(4) COMP VALUE 12.
       01  MASTCTRL-ITEM      PIC 9(4) COMP VALUE 1.
       01  CCHR               PIC X(1) VALUE SPACE.
       01  LYCALC             PIC 9(2) VALUE ZERO.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           02 COM-MESSAGE.
              03 COM-CCHR     PIC X(1).
              03 COM-DATA     PIC X(132).
       01  BLL-CELLS.
           02 FILLER          PIC S9(8)  COMP.
           02 CSA-PTR         PIC S9(8)  COMP.
           02 TFX-PTR         PIC S9(8)  COMP.
       01  CSA-DSECT.
           02 FILLER          PIC X(296).
           02 CSA-TFX-PTR     PIC S9(8)  COMP.
       01  TFX-DSECT.
           02 FILLER          PIC X(196).
           02 TFX-JOBNAME     PIC X(8).
       PROCEDURE DIVISION.
      * IGNORE TS QUEUE LENGTH ERRORS
           EXEC CICS IGNORE CONDITION
              LENGERR
           END-EXEC.
      * THE CONTROL DATA CONTAINS INFORMATION THAT MUST BE
      * AVAILABLE BETWEEN EXECUTIONS, SUCH AS THE LATEST LINE
      * NUMBER AND PAGE NUMBER OF THE OUTPUT LISTING. THE CICS
       * JOBNAME IS INCLUDED HERE ALSO, ALTHOUGH IT COULD BE FETCHED
      * ON EVERY EXECUTION.
      * WHENEVER A QIDERR CONDITION OCCURS, THE CONTROL DATA
      * QUEUE MUST BE RE-CREATED. NORMALLY THIS WILL ONLY HAPPEN
      * THE FIRST TIME THAT THE PROGRAM IS CALLED (SOON AFTER CICS
      * START-UP).
           EXEC CICS HANDLE CONDITION
              QIDERR(INIT-CONTROL)
              ERROR(INIT-CONTROL)
           END-EXEC.
           EXEC CICS READQ TS
              QUEUE('MASTCTRL')
              INTO(CONTROL-DATA)
              LENGTH(MASTCTRL-RECL)
              ITEM(1)
           END-EXEC.
           GO TO WRITE-MESSAGE.
       INIT-CONTROL.
      * INITIALISE CONTROL DATA
           MOVE ZERO TO CONTROL-PAGENUM, CONTROL-LINECNT.
           EXEC CICS ADDRESS
              CSA(CSA-PTR)
           END-EXEC.
           SERVICE RELOAD CSA-DSECT.
           MOVE CSA-TFX-PTR TO TFX-PTR.
           SERVICE RELOAD TFX-DSECT.
           MOVE TFX-JOBNAME TO CONTROL-JOBNAME.
      * CREATE CONTROL DATA
           EXEC CICS WRITEQ TS
              QUEUE('MASTCTRL')
              FROM(CONTROL-DATA)
              LENGTH(12)
              ITEM(MASTCTRL-ITEM)
              MAIN
           END-EXEC.
       WRITE-MESSAGE.
      * CALLER REQUESTED PAGE THROW ?
           IF COM-CCHR = '1' THEN
              PERFORM PAGE-THROW THRU PAGE-THROW-EXIT.
      * AUTOMATIC PAGE THROW ?
           IF CONTROL-LINECNT = 0 THEN
              PERFORM PAGE-THROW THRU PAGE-THROW-EXIT.
           MOVE CCHR TO COM-CCHR.
           EXEC CICS WRITEQ TD
              QUEUE('MAST')
              FROM(COM-MESSAGE)
              LENGTH(133)
           END-EXEC.
           ADD 1 TO CONTROL-LINECNT.
           IF CONTROL-LINECNT NOT < 66 THEN
              MOVE ZERO TO CONTROL-LINECNT.
      * UPDATE CONTROL DATA RECORD
           EXEC CICS WRITEQ TS
              QUEUE('MASTCTRL')
              FROM(CONTROL-DATA)
              LENGTH(12)
              ITEM(MASTCTRL-ITEM)
              REWRITE
              MAIN
           END-EXEC.
       RETURN-TO-CICS.
           EXEC CICS RETURN
           END-EXEC.
           STOP RUN.
       PAGE-THROW SECTION.
           ADD 1 TO CONTROL-PAGENUM.
            MOVE CONTROL-PAGENUM TO PAGE-PAGENUM.
           MOVE 3 TO CONTROL-LINECNT.
           MOVE '-' TO CCHR.
           MOVE CONTROL-JOBNAME TO PAGE-JOBNAME.
           MOVE EIBDATE TO MSG-DATE.
           MOVE 1 TO PAGE-DATE-MM.
           MOVE 0 TO PAGE-DATE-DD.
           DIVIDE MSG-DATE-YY BY 4 GIVING LYCALC.
           MULTIPLY LYCALC BY 4 GIVING LYCALC.
           IF LYCALC = MSG-DATE-YY THEN
              ADD 1 TO MONTH-TABLE (2).
       CONVERT-DATE.
           IF MSG-DATE-DDD > MONTH-TABLE (PAGE-DATE-MM) THEN
              SUBTRACT MONTH-TABLE (PAGE-DATE-MM) FROM MSG-DATE-DDD
              ADD 1 TO PAGE-DATE-MM
              GO TO CONVERT-DATE.
       FOUND-MONTH.
           MOVE MSG-DATE-YY  TO PAGE-DATE-YY.
           MOVE MSG-DATE-DDD TO PAGE-DATE-DD.
           MOVE EIBTIME TO MSG-TIME.
           MOVE MSG-TIME-HH TO PAGE-TIME-HH.
           MOVE MSG-TIME-MM TO PAGE-TIME-MM.
           MOVE MSG-TIME-SS TO PAGE-TIME-SS.
           EXEC CICS WRITEQ TD
              QUEUE('MAST')
              FROM(PAGE-HEADER)
              LENGTH(133)
           END-EXEC.
       PAGE-THROW-EXIT.
           EXIT.


B Perryman
Systems Programmer
Confederation Life Insurance Co (UK)    ) Xephon 1988































