A cross-reference listing of the CSD file

When using CEDA for on-line resource definition, it is often
difficult to determine whether a specific element such as a
program, mapset, transaction, terminal, etc, has already been
defined; in which group(s) it has been defined; and to which
list(s) the group(s) have been added.  A listing produced by
DFHCSDUP (LIST ALL), will show all the lists, all the
groups, and all the elements within each group.  It will not
explicitly show a list of all the groups that contain the INW4
transaction, nor which lists contain those groups.  You must
scan the listing searching for each occurrence of the
transaction, make a note of the group names containing it, then
re-scan the listing searching for each occurrence of the group
names and making a note of the list names that contain these
groups.  This is an exercise in frustration as well as being
prone to error - in our shop, the CSD LIST ALL listing is 44
pages long!

To automate this search process, the following program was
developed.  It produces three listings: the first lists every
occurrence of every element alphanumerically by element name
and where it resides, the second lists every occurrence of every
element alphanumerically within element type and where it
resides, and the third lists every element alphanumerically
within residence type (ie all elements that reside in groups are
listed before those that reside in lists).  This program is
currently running under VSE/SP 4.1.1 and CICS 1.7.  It should
work on any version from CICS 1.6 onwards.  The format of
the DFHCSDUP LIST ALL report may change from release to
release, but it should be relatively easy to convert this program
to a different release by changing the record definitions of the
IN-FILE.

 IDENTIFICATION DIVISION.
 PROGRAM-ID.    CSDLISTR.
 ENVIRONMENT DIVISION.
 CONFIGURATION SECTION.
 SOURCE-COMPUTER.  IBM-4341.
 OBJECT-COMPUTER.  IBM-4341.
 INPUT-OUTPUT SECTION.
 FILE-CONTROL.
     SELECT IN-FILE ASSIGN TO SYS020-UT-3420.
     SELECT SORT-FILE ASSIGN TO SYS001-UT-FBA1-S-SORTWK1.
     SELECT PRINT-FILE ASSIGN TO SYS012-UR-3203-S.
     SELECT CSD-WORK
            ASSIGN SYS021-UT-FBA1-S-WRKFIL
            ORGANIZATION IS SEQUENTIAL
            ACCESS IS SEQUENTIAL.
 DATA DIVISION.
 FILE SECTION.
 FD  IN-FILE
         LABEL RECORDS STANDARD
         RECORDING MODE F.
 01  IN-REC.
     05  FILLER          PIC X.
     05  IN-REC-BAL.
         10 IDENT            PIC X(11).
         10 FILLER           PIC X(109).
 01  LST-REC.
     05  FILLER          PIC X.
     05 FILLER           PIC X(15).
     05 LST-NAME         PIC X(8).
     05 FILLER           PIC X(97).
 01  GRP-REC.
     05  FILLER          PIC X.
     05 FILLER           PIC X(12).
     05 GRP-NAME         PIC X(8).
     05 FILLER           PIC X(100).
 01  GRP-DTL.
     05  FILLER          PIC X.
     05  ELEMENT-TYPE    PIC X(20).
     05  ELEMENTS        OCCURS 9 INDEXED BY IN-FILE-IX.
         10  ELEMENT-NAME    PIC X(8).
         10  FILLER      PIC XX.
     05  FILLER          PIC X(10).
 FD  CSD-WORK
         LABEL RECORDS STANDARD
         RECORDING MODE F
         RECORD CONTAINS 31 CHARACTERS.
 01  WORK-REC.
     05  FILLER           PIC X(31).
 SD  SORT-FILE
         LABEL RECORDS STANDARD
         RECORDING MODE F
         RECORD CONTAINS 31 CHARACTERS.
 01  SORT-REC.
     05  ELEMENT          PIC X(8).
     05  SORT-OWNER       PIC X(8).
     05  SORT-OWNER-TYPE  PIC X(5).
     05  SORT-TYPE        PIC X(10).
 FD  PRINT-FILE
         LABEL RECORDS OMITTED
         RECORDING MODE F.
 01  PRINT-REC.
     05  FILLER      PIC X.
     05 FIELD1       PIC X(37).
     05 FILLER       PIC X(6).
     05 FIELD2       PIC X(37).
     05 FILLER       PIC X(6).
     05 FIELD3       PIC X(37).
 WORKING-STORAGE SECTION.
 01  MATRIX.
     05 PAGE-LAYOUT      OCCURS 50 INDEXED BY LINE-IX.
         10 FILLER           PIC X.
         10 DATA-FIELD       OCCURS 3 INDEXED BY COL-IX.
             15 MEMBER       PIC X(8).
             15 FILLER       PIC XX.
             15 MTYPE        PIC X(10).
             15 FILLER       PIC XX.
             15 INTYPE       PIC X(5).
             15 FILLER       PIC X.
             15 INNAME       PIC X(8).
             15 FILLER       PIC X(7).
 01  FIELD-HDR       PIC X(37) VALUE
     'ELEMENT   TYPE         IN            '.
 01  PAGE-HDR.
     05  FILLER      PIC X(12) VALUE ' BY ELEMENT '.
     05 HDG-COMMENT  PIC X(20) VALUE SPACES.
     05 FILLER       PIC X(22) VALUE SPACES.
     05 FILLER       PIC X(15) VALUE 'RDO DIRECTORY'.
     05 FILLER       PIC X(11) VALUE SPACES.
     05 THIS-DATE    PIC X(8).
     05 FILLER       PIC XX.
     05 THIS-TIME    PIC 99B99B99.
     05 COLONS REDEFINES THIS-TIME PIC X OCCURS 8.
     05 FILLER       PIC X(16) VALUE SPACES.
     05 FILLER       PIC X(5) VALUE 'PAGE '.
     05 PG-COUNT     PIC Z(3)9.
 01  PG-COUNTER      PIC 9(4) COMP VALUE 1.
 01  DIR-FLAG        PIC X   VALUE 'Y'.
     88 DIR-REQ      VALUE 'Y'.
 01  EOF-FLAG        PIC X   VALUE 'N'.
     88 EOF      VALUE 'Y'.
 01  CURRENT-OWNER       PIC X(8).
 01  OWNER-TYPE      PIC X(5).
 01  CURRENT-TYPE        PIC X(10).
 01  ELEMENT-TABLE-ENTRY.
     03  ELEMENT-TABLE-DATA.
         05  FILLER      PIC X(20) VALUE 'MAPSETS:'.
         05  FILLER      PIC X(10) VALUE 'MAPSET'.
         05  FILLER      PIC X(20) VALUE 'PROFILES:'.
         05  FILLER      PIC X(10) VALUE 'PROFILE'.
         05  FILLER      PIC X(20) VALUE 'PROGRAMS:'.
         05  FILLER      PIC X(10) VALUE 'PROGRAM'.
         05  FILLER      PIC X(20) VALUE 'TERMINALS:'.
         05  FILLER      PIC X(10) VALUE 'TERMINAL'.
         05  FILLER      PIC X(20) VALUE 'TRANSACTIONS:'.
         05  FILLER      PIC X(10) VALUE 'TRANSACTIN'.
         05  FILLER      PIC X(20) VALUE 'TYPETERMS:'.
         05  FILLER      PIC X(10) VALUE 'TYPETERM'.
     03  ELEMENT-TABLE REDEFINES ELEMENT-TABLE-DATA
             OCCURS 6 TIMES
             ASCENDING KEY IS TABLE-ARG
             INDEXED BY TBL-IX.
         05  TABLE-ARG       PIC X(20).
         05  TABLE-ITEM      PIC X(10).
 PROCEDURE DIVISION.
 SORT-INPUT SECTION.
 010-START.
     OPEN INPUT IN-FILE OUTPUT CSD-WORK.
     PERFORM 015-GET-DATA UNTIL EOF.
     CLOSE IN-FILE CSD-WORK.
     GO TO 099-EXIT.
 015-GET-DATA.
     IF DIR-REQ
         PERFORM 080-READ UNTIL EOF
             OR IDENT = 'LIST NAME: '.
     IF IDENT = 'LIST NAME: '
         MOVE 'N' TO DIR-FLAG
         PERFORM 050-PROCESS-LST.
     IF IDENT = '    GROUP  '
         PERFORM 060-PROCESS-LST-DTL.
     IF IDENT = 'GROUP NAME:'
         PERFORM 070-PROCESS-GRP.
     IF NOT EOF
         PERFORM 030-PROCESS-DATA.
 030-PROCESS-DATA.
     SEARCH ALL ELEMENT-TABLE
         WHEN ELEMENT-TYPE = TABLE-ARG (TBL-IX)
         MOVE TABLE-ITEM (TBL-IX) TO CURRENT-TYPE
         PERFORM 035-PRIME-SORT-REC
             VARYING IN-FILE-IX FROM 1 BY 1
               UNTIL IN-FILE-IX = 9 OR
                 ELEMENT-NAME (IN-FILE-IX) = SPACES.
     PERFORM 080-READ.
 035-PRIME-SORT-REC.
     IF ELEMENT-NAME (IN-FILE-IX) NOT = SPACES
         MOVE ELEMENT-NAME (IN-FILE-IX) TO ELEMENT
         PERFORM 045-BUILD-SORT-REC.
 045-BUILD-SORT-REC.
     MOVE CURRENT-OWNER TO SORT-OWNER.
     MOVE OWNER-TYPE TO SORT-OWNER-TYPE.
     MOVE CURRENT-TYPE TO SORT-TYPE.
     WRITE WORK-REC FROM SORT-REC.
 050-PROCESS-LST.
     MOVE 'LIST' TO OWNER-TYPE.
     MOVE 'GROUP' TO CURRENT-TYPE.
     MOVE LST-NAME TO CURRENT-OWNER.
     PERFORM 080-READ.
     MOVE 'N' TO DIR-FLAG.
 060-PROCESS-LST-DTL.
     MOVE LST-NAME TO ELEMENT.
     PERFORM 045-BUILD-SORT-REC.
     PERFORM 080-READ.
 070-PROCESS-GRP.
     MOVE 'GROUP' TO OWNER-TYPE.
     MOVE GRP-NAME TO CURRENT-OWNER.
     PERFORM 080-READ.
 080-READ.
     READ IN-FILE AT END MOVE 'Y' TO EOF-FLAG.
     IF IN-REC-BAL = ALL SPACES
         GO TO 080-READ.
     IF IDENT = '1S55I  LAST'
         MOVE 'Y' TO EOF-FLAG.
 099-EXIT. EXIT.
 SORTING SECTION.
 001-START.
     SORT SORT-FILE ON ASCENDING KEY ELEMENT
         USING CSD-WORK
         OUTPUT PROCEDURE IS PRINT-PROC.
     MOVE 'WITHIN TYPE' TO HDG-COMMENT.
     SORT SORT-FILE ON ASCENDING KEY SORT-TYPE ELEMENT
         USING CSD-WORK
         OUTPUT PROCEDURE IS PRINT-PROC.
     MOVE 'WITHIN OWNER TYPE' TO HDG-COMMENT.
     SORT SORT-FILE ON ASCENDING KEY SORT-OWNER-TYPE ELEMENT
         USING CSD-WORK
         OUTPUT PROCEDURE IS PRINT-PROC.
     STOP RUN.
 PRINT-PROC SECTION.
 100-START.
     OPEN OUTPUT PRINT-FILE.
     MOVE 'N' TO EOF-FLAG.
     MOVE CURRENT-DATE TO THIS-DATE.
     MOVE TIME-OF-DAY TO THIS-TIME.
     MOVE ':' TO COLONS (3) COLONS (6).
     MOVE 1 TO PG-COUNTER.
     PERFORM 105-PRINT-REPORT UNTIL EOF.
     CLOSE PRINT-FILE.
     GO TO 199-EXIT.
 105-PRINT-REPORT.
     PERFORM 110-BUILD-PAGE VARYING COL-IX FROM 1 BY 1
         UNTIL COL-IX = 4 OR EOF.
     PERFORM 150-PRINT-PAGE.
 110-BUILD-PAGE.
     PERFORM 120-BUILD-LINE VARYING LINE-IX FROM 1 BY 1
         UNTIL LINE-IX = 51 OR EOF.
 120-BUILD-LINE.
     PERFORM 180-RETURN.
     IF NOT EOF
         PERFORM 130-MOVE-TO-PAGE.
 130-MOVE-TO-PAGE.
     MOVE ELEMENT TO MEMBER (COL-IX LINE-IX).
     MOVE SORT-TYPE TO MTYPE (COL-IX LINE-IX).
     MOVE SORT-OWNER-TYPE TO INTYPE (COL-IX LINE-IX).
     MOVE SORT-OWNER TO INNAME (COL-IX LINE-IX).
*    IF SORT-MN = OLD-MN AND SORT-MT = OLD-MT
*        MOVE '*' TO DUPE (COL-IX LINE-IX).
*    MOVE SORT-KEY TO OLD-KEY.
 150-PRINT-PAGE.
     MOVE PG-COUNTER TO PG-COUNT.
     ADD 1 TO PG-COUNTER.
     WRITE PRINT-REC FROM PAGE-HDR AFTER ADVANCING PAGE.
     MOVE SPACES TO PRINT-REC.
     MOVE FIELD-HDR TO FIELD1 FIELD2 FIELD3.
     WRITE PRINT-REC AFTER ADVANCING 2.
     MOVE SPACES TO PRINT-REC.
     WRITE PRINT-REC AFTER 1.
     PERFORM 160-PRINT-LINE VARYING LINE-IX FROM 1 BY 1
         UNTIL LINE-IX = 51.
     MOVE SPACES TO MATRIX.
 160-PRINT-LINE.
     WRITE PRINT-REC FROM PAGE-LAYOUT (LINE-IX) AFTER 1.
 180-RETURN.
     RETURN SORT-FILE AT END MOVE 'Y' TO EOF-FLAG.
 199-EXIT. EXIT.

The JCL to run this program follows.  It consists of two job
steps: the first is a DFHCSDUP LIST ALL writing the report to
a temporary disk file, the second step reads the disk file into
this program and produces the reports.

* $$ JOB JNM=CSDLIST,CLASS=x,DISP=D,PRI=3,LDEST=*
* $$ LST CLASS=A,DISP=D
// JOB CSDLIST
// ASSGN SYS024,SYSLST
// DLBL IJSYSLS,'CSD.TEMP.SYSLST',0,SD
// EXTENT SYSLST,volser,1,0,nnnnn,nnnnn
   ASSGN SYSLST,DISK,VOL=volser,SHR
// DLBL DFHCSD,'CICS170.DFHCSD',,VSAM,CAT=VSESPUC
// EXEC DFHCSDUP,SIZE=300K
LIST ALL
/*
   CLOSE SYSLST,SYS024
// ASSGN SYS012,09E
* $$ LST LST=SYS012,CLASS=A
// DLBL SYS020,'CSD.TEMP.SYSLST',0,SD
// EXTENT SYS020,volser,1,0,nnnnn,nnnnn
// ASSGN SYS020,DISK,VOL=volser,SHR
// DLBL WRKFIL,'CSD.WORK.FILE',0,SD
// EXTENT SYS021,volser,1,0,nnnnn,nnnnn
// ASSGN SYS021,DISK,VOL=volser,SHR
// LIBDEF *,SEARCH=lib.sublib
// EXEC CSDLISTR
/&
* $$ EOJ


Frank A Braman
Systems Programmer
St Johnsbury Trucking Co (USA)             c St Johnsbury Trucking Co 1991

