 CMS EXECs for monitoring CICS
This article, together with several others which will be published over the
coming months, show a number of EXECs which make up a monitor capable of
performing detailed analysis of CICS 1.6 systems running in VSE guests under VM.
The underlying ideas were described in the article CICS storage monitoring with
CMS EXECs, which appeared in issue 8 of CICS Update.
Most of the EXECs contain calls to the fullword fetch subroutine FWORD and the
hexadecimal addition function HEXADD.  These could be implemented as external
functions (ie free-standing EXECs) but better performance is achieved when they
are included as internal routines.  Their code is only reproduced here in the
first EXEC.  Many of the EXECs also make reference to a full-screen storage
display EXEC VSTOR.  The code for this (and FWORD) was given in the original
article.  Most EXECs require CP classes A and C.
CICS STATUS SUMMARY
This locates the CSA of an active VSE CICS partition, then runs through CICS and
DL/I control blocks obtaining addresses of areas of interest and extracting
statistics and indicators.  Results are displayed on a single colour-coded
screen using XEDIT.  The screen is divided into six areas and is illustrated in
Figure 1:
%    Addresses (green).  By over-typing part of an address and pressing PF2 the
storage display EXEC is invoked for that address.
%    CICS statistics summary (yellow).
%    Current task information (blue).
%    Tasks statistics (red).
%    DSA (turquoise).  Shows usage of the subpools and provides a FAQE scan
facility (PF10) to determine the amount of free space within allocated pages of
the Control, TP, Shared, and RPL subpools.
%    PF-key settings (white).
CICS EXEC
/* CICS EXEC ****************************************************** */
/*          LOCATE CSA ADDRESS OF A VSE CICS SYSTEM                 */
/*          PARAMETERS REQUIRED:    VM-ID OF VSE MACHINE            */
/*    TESTED FOR VSE 3.5 & VSE/SP2                                  */
/* **************************************************************** */
      ARG VMID .
      IF VMID = '' THEN SIGNAL ERR1
      PARSE VALUE DIAG(8,'Q USER' VMID) WITH . X .
      IF X = 'NOT' THEN SIGNAL ERR2
/* LOCATE CURRENT COMREG & PIB2 TABLE                               */
      VADD = '14'                      /* CURRENT COMREG */
      CALL FWORD
      CURCOM = SUBSTR(FWORD,5,4)
      VADD = HEXADD(CURCOM,7C)          /* PIB2 TABLE */
      CALL FWORD
      PIB2 = SUBSTR(FWORD,1,4)
/* LOCATE SYSCOM & NUMBER OF PARTITIONS                             */
      VADD = '80'                      /* SYSCOM */
      CALL FWORD
      SYSCOM = SUBSTR(FWORD,3,6)
      VADD = HEXADD(SYSCOM,2C)          /* NO. OF PARTITIONS */
      CALL FWORD
      NPN = X2D(SUBSTR(FWORD,1,4))
/* SCAN PIB2 TABLE / PARTITION COMREG'S TO FIND CICS PARTITION      */
      DO I = 1 TO NPN
          VADD = D2X(X2D(PIB2)+I*16)    /* PTN COMREG */
          CALL FWORD
          CREG.I = RIGHT(SUBSTR(FWORD,1,4),6,0)
          VADD = HEXADD(CREG.I,B4)           /* CICS POINTER */
          CALL FWORD
          CICS = SUBSTR(FWORD,3,6)
          IF CICS Â¬= 0 THEN LEAVE
          END
      IF CICS = 0 THEN SIGNAL ERR3
/* LOCATE CSA & INVOKE CICS MAPPING XEDIT MACRO                     */
      VADD = HEXADD(CICS,8)              /* CSA  POINTER */
      CALL FWORD
       CSA = SUBSTR(FWORD,3,6)
      'X A D A ( PROFILE CICS )' VMID CSA
      EXIT 0
/* ERROR EXITS                                                      */
ERR1: SAY 'VMID MISSING'
      EXIT 1
ERR2: SAY VMID 'NOT LOGGED ON'
      EXIT 2
ERR3: SAY VMID 'HAS NO CICS ACTIVE'
      EXIT 3
/* HEX ADDITION FUNCTION                                            */
HEXADD:
    ARG BASE,DISP1
    RETURN D2X(X2D(BASE)+X2D(DISP1))
/* FULLWORD FETCH ROUTINE                                           */
FWORD:  PROCEDURE EXPOSE VMID VADD FWORD
SHIFT = 2*(X2D(VADD)//4) + 1            /* DISPLACEMENT */
VADD = RIGHT(VADD,6,'0')                /* PAD VADD WITH O */
OFFS = SUBSTR(VADD,4,3)                 /* OFFSET WITHIN PAGE */
VPG1 = SUBSTR(VADD,1,3)                 /* 1ST VIRTUAL PAGE NO. */
VPG2 = VPG1                             /* ONE PAGE ONLY */
PARSE VALUE DIAG(8,'LOCK' VMID VPG1 VPG1 'MAP') ,
      WITH . . . RP .                   /* LOCK THE PAGE */
RPG1 = SUBSTR(RP,1,3)                   /* 1ST PAGE REAL ADDRESS */
RADD = RPG1||OFFS                       /* REAL STORAGE ADDRESS */
PARSE VALUE DIAG(8,'DCP' RADD||'.8') WITH . FW1 FW2 .  /* DCP */
IF X2D(OFFS) >= '4092' THEN DO          /* IF PAGE OVERSPILL */
    VPG2 = D2X(X2D(VPG1) +1)            /* NEXT VIRTUAL PAGE NO */
    PARSE VALUE DIAG(8,'LOCK' VMID VPG2 VPG2 'MAP') ,
        WITH . . . RP .                 /* LOCK THE PAGE */
    RADD = SUBSTR(RP,1,6)               /* NEXT PAGE REAL ADDR */
    PARSE VALUE DIAG(8,'DCP' RADD||'.8') WITH . FW2 .   /* DCP */
    END
X = DIAG(8,'UNLOCK' VMID VPG1 VPG2 )  /* UNLOCK PAGE(S) */
FWORD = FW1||FW2                      /* 8 BYTES (ALIGNED) */
FWORD = SUBSTR(FWORD,SHIFT,8)         /* 4 BYTES REQUESTED */
RETURN
Next month we shall be looking at how to extract and display CICS statistical
information using XEDIT.

Mike Jones
Senior Systems Programmer
Wavin Building Products (UK)  ) Xephon 1988























