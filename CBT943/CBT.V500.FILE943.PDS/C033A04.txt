 CICS bubble sort revisited
The article CICS bubble sort in the September 1987 issue of CICS Update was of
great interest.  In most data processing environments sorting techniques for on-
line programs are usually accomplished by key (or alternate key) structures in
files and/or databases.  However, when you need a sort, you need a sort!
The following bubble sort technique is submitted as an enhancement for the
bubble sorts most of us use.  It has been found to be more efficient than any
bubble sort I have seen for a majority of random data distributions, the only
exception being that of a totally inverted list, in which case a bi-direction
bubble sort wins hands down.
The basis of the method is that once it has been found that a swap of entries is
necessary, exchanges are made until the out of sequence element has been
TbubbledU to the correct position.  Using this method, only one complete pass of
the array (or table) is necessary.
The first sample is in COBOL and is written for an ascending sequence sort.  The
second sample is written using IBM Cross System Product (CSP).  Descending sorts
can be accomplished by reversing the comparison operator in TswapU compare.
Complex sorting requirements needing both ascending and descending portions of
the key may also be implemented using Tnested ifsU.
The table size to be sorted depends on the requirements of the application.
However, for on-line program performance, the table size should be kept as small
as possible.  This sort has also been implemented in batch programs where a
table sort was a better choice than the use of the COBOL SORT verb.
COBOL EXAMPLE
WORKING-STORAGE SECTION
   .
   .
01  SORT-TABLE-AREA.
    05  ST-NUM-ENTRIES    PIC S9(04)  COMP   VALUE ZERO.
    05  ST-MAX            PIC S9(04)  COMP   VALUE +100.
    05  ST-ENTRY-SWAP     PIC  X(length of ST-ENTRY).
    05  ST-ENTRY                      OCCURS 100
                                      INDEXED ST-NDX1,
                                              ST-NDX2,
                                              ST-NDX3.
      10  ST-KEY          PIC ????.
      10  ST-OTHER-DATA   PIC ????.
   .
   .
PROCEDURE DIVISION.
   .
   .
*
* BEGINNING OF SORT ROUTINE
*
* FIRST CHECK TO SEE IF THERE IS ANYTHING TO SORT
*
* ST-NUM-ENTRIES CONTAINS THE ACTUAL NUMBER OF ENTRIES
* IN THE TABLE TO BE SORTED.
*
     IF ST-NUM-ENTRIES GREATER 1
         PERFORM X0001-SORT-CONTROL.
   .
   .
*
* BUBBLE SORT CONTROL ROUTINE
*
 X0001-SORT-CONTROL.
*
* LOOK AT THE 2ND THRU N-TH ENTRIES
* ST-NDX1 POINTS TO THE CURRENT ENTRY
*
     PERFORM X0010-SORT-CONTROL2
        VARYING ST-NDX1 FROM 2 BY 1
          UNTIL ST-NDX1 GREATER THAN ST-NUM-ENTRIES.

 *
* BUBBLE SORT INNER LOOP CONTROL
*
 X0010-SORT-CONTROL2.
*
* ST-NDX2 WILL POINT TO THE ENTRY FOR COMPARING
* AND PLACING AN OUT OF SEQUENCE ELEMENT IN THE
* CORRECT POSITION
*
     SET ST-NDX2 TO ST-NDX1.
     PERFORM X0020-SORT
       UNTIL ST-NDX2 NOT GREATER ZERO.
* BUBBLE SORT ROUTINE
*
 X0020-SORT.
*
* ST-NDX3 WILL POINT TO THE PREVIOUS ENTRY
* (THAT IS WHY WE START ST-NDX1 WITH OCCURRENCE 2)
*
     SET ST-NDX3 TO ST-NDX2.
     SET ST-NDX3 DOWN BY 1.
*
* CHECK TO SEE IS A SWAP OF ENTRIES IS NECESSARY.
* IF NOT, THEN ZERO ST-NDX2 TO TERMINATE THE INNER LOOP
*   AS THE ELEMENT IS IN THE CORRECT POSITION AS COMPARED
*   TO THE PREVIOUS ELEMENTS.
* OTHERWISE, SWAP THE ENTRIES AND SET THE INDEX DOWN SO THAT
*   THE NEXT PREVIOUS ENTRY WILL BE COMPARED.
*
* NOTE:  THE "NOT LESS" IS USED TO TEST FOR GREATER THAN
*                                        OR EQUAL TO
*        SINCE THE "EQUAL" CONDITION DOES NOT REQUIRE A SWAP.
*
     IF ST-KEY(ST-NDX2) NOT LESS ST-KEY(ST-NDX3)
       SET ST-NDX2 TO ZERO
     ELSE
       MOVE ST-ENTRY(ST-NDX2) TO ST-ENTRY-SWAP
       MOVE ST-ENTRY(ST-NDX3) TO ST-ENTRY(ST-NDX2)
       MOVE ST-ENTRY-SWAP     TO ST-ENTRY(ST-NDX3)
       SET ST-NDX2 DOWN BY 1.
CSP EXAMPLE
             GROUP NAME:              XSORT
**********************************************************************
*            PERFORM TABLE SORT                                      *
**********************************************************************
             ; TABLE SORT
             ; VARIABLES - TENTRY   TABLE ENTRY (GROUP LEVEL)
             ;             TKEY     TABLE KEY TO BE SORTED (ASCENDING)
             ;             TSAVE    WORK ENTRY FOR SWAPPING TBL ENTRIES
             ;             TSUB1    WORK SUBSCRIPT
             ;             TSUB2    WORK SUBSCRIPT
             ;             TSUB3    WORK SUBSCRIPT
             ;             TMAX     MAX TABLE SIZE (OR ENTRIES USED)
             ;
             MOVE 1 TO TSUB1          ; INIT TSUB1
             IF TMAX LT 2             ; ENSURE AT LEAST 2 ENTRIES
               MOVE 99 TO TSUB1       ; SET TO GET OUT
             END ;
             WHILE TSUB1 LT TMAX      ; DO UNTIL TABLE TMAX EXCEEDED
               TSUB1 = TSUB1 + 1      ; SET TSUB1 TO NEXT ENTRY
               MOVE TSUB1 TO TSUB2    ; SET SUBSCRIPT FOR NEXT LOOP
               WHILE TSUB2 GE 2       ; DO UNTIL BOTTOM OF TABLE REACHED
                 TSUB3 = TSUB2 - 1    ; TSUB3 IS PREV ENTRY
                 IF TKEY(TSUB2) GE TKEY(TSUB3); ENTRIES NEED SWITCHING?
                   MOVE 0 TO TSUB2    ; SET TO ZERO TO GET OUT
                 ELSE ;
                    MOVE TENTRY(TSUB2) TO TSAVE; SWITCH ENTRIES
                   MOVE TENTRY(TSUB3) TO TENTRY(TSUB2); SWITCH ENTRIES
                   MOVE TSAVE TO TENTRY(TSUB3); SWITCH ENTRIES
                   TSUB2 = TSUB2 - 1         ; SET DOWN FOR NEXT COMPARE
                 END ;
               END ;
             END ;


Steve Noble
Senior Programmer/Analyst (USA)    ) Steve Noble 1988























































