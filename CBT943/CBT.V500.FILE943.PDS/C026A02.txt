 A VM-based message collecting system
At our installation we used to have a 3287 defined in the CICS DCT as the
destination for messages that would normally be directed to CSMT.  We found this
to be of invaluable assistance when diagnosing a problem with a userUs terminal.
When we had three CICS systems running on two VSE machines we configured the
single 3287 to be a cross-domain resource that would be acquired by any CICS
system that needed to log some sort of message.  The problem with this system
was that when we were informed of a CICS system problem, we would have to start
combing through many pages of logged messages to find the relevant information.
We decided there was a better way we could collect and review the various log
messages.  We designed a system whereby each CICS system would pass its messages
to a virtual machine running under CMS.  The CMS virtual machine would receive
these messages and store each CICS systemUs messages in a separate CMS log file.
Now, when we are alerted to a CICS-related problem we can immediately access the
on-line file and begin the problem determination process.  We also run several
daily reports using the log files.  We wrote EXECs to sift through the log files
and pick out certain records - security violations and abends of a certain type
are the main selections.
By implementing this on-line system, we were able to put the 3287 printer to
better use and have saved ourselves (and continue to save ourselves) many hours
when debugging a CICS system problem.  CICSLOGR is currently running under CICS
1.6,  VSE/SP 1.3, and VM/SP Release 3.  However, there should be no problems
using this system with any CICS-VM configuration.
THE CICS PART
The program DFHLOGR handles the function of assembling the proper message to be
sent.  DFHLOGR then calls $$BDIAG8, which simply does a CP DIAG 8 (issue CP
command) on the line put together by the DFHLOGR routine.  $$BDIAG8 can be used
to issue any CP command for use in another application.
We have the DFHLOGR program defined as a transaction with a transaction-id of
LOGR.  We have LOGR defined in our  DCT as shown below and messages from CSMT,
CSTL, CSML, CSCS, and CSDL are re-directed to it.
LOGR    DFHDCT TYPE=INTRA,                                            X
               DESTFAC=FILE,                                          X
               DESTID=LOGR,                                           X
               TRIGLEV=1,                                             X
               TRANSID=LOGR
CSMT    DFHDCT TYPE=INDIRECT,                                         X
               DESTID=CSMT,        ACP AND TACP ABEND MSGS            X
               INDDEST=LOGR        TO CICSLOGR
CSTL    DFHDCT TYPE=INDIRECT,                                         X
               DESTID=CSTL,        TERM I/O ERROR MSGS                X
               INDDEST=LOGR        TO CICSLOGR
CSML    DFHDCT TYPE=INDIRECT,                                         X
               DESTID=CSML,        SIGN ON/OFF MSGS                   X
               INDDEST=LOGR        TO CICSLOGR
CSCS    DFHDCT TYPE=INDIRECT,                                         X
               DESTID=CSCS,        SECURITY VIOLATIONS                X
               INDDEST=LOGR        TO CICSLOGR
CSDL    DFHDCT TYPE=INDIRECT,                                         X
               DESTID=CSDL,        CEDA AUDIT TRAIL                   X
               INDDEST=LOGR        TO CICSLOGR
THE VM PART
The receiver of the CICS-sent SMSGs is a virtual machine.  This virtual
machineUs only function is to log information being sent via SMSGs.  The name of
this virtual machine at our site is CICSLOGR.
In order for CICSLOGR to be able to function, it must have access to the WAKEUP
module.  The CICSLOGR virtual machine needs only G class access.  The size of
CICSLOGRUs A mini-disk depends on the number of messages received per day and
the number of days the system is to keep.  CICSLOGR can be auto-logged with the
EXEC that is listed below as the PROFILE EXEC.
CICSLOGR calls WAKEUP and waits for one of three things:  one second before
midnight, a console interrupt, or an SMSG.  If awakened one second before
midnight, the EXEC will sleep for two seconds then delete old history files.
The number of days of history files kept is determined by the HISTORY_KEPT
variable that gets defined at the beginning of the EXEC.

 If a console interrupt causes the virtual machine to wake up, the EXEC will
terminate.  If the virtual machine receives an SMSG, the EXEC will wake up and
go through the proper sequence, which results in a record being written to a log
file.
There are detailed comments in the CMS REXX EXEC for those CICS programmers who
may not be very familiar with VM or REXX.
VM CICSLOGR EXEC
/* */
TRACE OFF
'CP SET EMSG OFF'
/* THE NUMBER OF DAYS OF HISTORY THAT 'CICSLOGR' KEEPS IS */
/* DETERMINED BY THE NEXT LINE */
HISTORY_KEPT = 2
/* OLD LOG FILE TYPE */
DATE_OLD = DATE(J)
STARTING_LINE:
/* ISSUE WAKEUP CALL TO WAKE US AT MIDNIGHT OR WHEN WE RECEIVE AN SMSG*/
'WAKEUP AT 23:59:59 (SMSG NOEXT'
/* IF WE'RE BEING AWAKENED AT MIDNIGHT, GET RID OF OLD LOG FILES. */
IF RC = 2 THEN
 DO
  /* MAKE SURE WE'RE PAST MIDNIGHT WHEN WE DO THIS */
   'WAKEUP +00:02'
 /* CALL THE ROUTINE TO CLEAN OFF OLD HISTORY FILES WE NO LONGER NEED */
   CALL CLEAN_HISTORY
 /* GO BACK AND START WAITING AGAIN  */
   SIGNAL STARTING_LINE
 END
/* WE'RE BEING AWAKENED BY A CONSOLE INTERRUPT. TERMINATE PROGRAM. */
IF RC = 6 THEN
 DO
/*  RESET EXTERNAL INTERRUPTS */
   WAKEUP '(' RESEXT
/* TELL USER WHAT'S HAPPENING */
   SAY 'PROCESSING TERMINATED'
   'CP SET SMSG OFF'
   'CP SET EMSG ON'
   EXIT
 END
IF RC = 1 THEN
 DO
/* WE ARE BEING AWAKENED BY A SMSG */
/* ******************************* */
/* FIRST, PARSE THE LINE THAT WAS SENT TO US */
   PARSE PULL WITH  6 MACHINE_ID 16 CICS_ID 24 CICS_MSG
/* WE COULD ENTER RECEIVING QUALIFIERS HERE.  EX:   */
/*      IF MACHINE_ID ¬= MACHINE_TO_WATCH THEN ITERATE */
/* OR WE COULD QUALIFY A PARTICULAR CICS BY NAME.  EX:  */
/*      IF CICS_ID ¬= CICS_TO_WATCH THEN ITERATE */
/*  PASSED THE QUALIFERS SO WE CAN NOW WRITE THE INFORMATION TO THE  */
/*  PROPER FILE FOR THIS CICS   */
/* THE "LOG" PART OF THE FILE TYPE IN THE NEXT LINE CAN BE CHANGED TO */
/* BE A THREE-LETTER CODE TO INDICATE WHICH VIRTUAL MACHINE THE SMSG  */
/* CAME FROM.   EX:      */
/*      IF MACHINE_ID = 'ALPHAVSE' THEN FILE_TYPE = 'AAA'||DATE(J) */
/*      IF MACHINE_ID = 'BETAVSE'  THEN FILE_TYPE = 'BBB'||DATE(J) */
   FILE_TYPE = 'LOG'||DATE(J)
/* NOW ACTUALLY WRITE THE LINE TO THE PROPER LOG FILE */
   'EXECIO 1 DISKW 'CICS_ID FILE_TYPE ' A (FINI STRING 'CICS_MSG
/* IF WE'VE, BY CHANCE, CROSSED MIDNIGHT DURING ALL THIS, WE WANT TO  */
/* MAKE SURE WE GET RID OF THE OLD HISTORY FILES */
   CALL CLEAN_HISTORY
 END
/* GO BACK AND START WAITING ALL OVER AGAIN   */
SIGNAL STARTING_LINE
/* SHOULD NEVER ACTUALLY EXECUTE THIS EXIT, BUT JUST IN CASE... */
 EXIT
/* ***************************************************************** */
/*  THIS SUB-ROUTINE COMPARES THE CURRENT DATE TO THE 'OLD' DATE.    */
/*  IF THERE IS A DIFFERENCE, IT WILL ERASE THE HISTORY LOG FILES OF */
/*  TYPE: '* LOG'||(JULIAN DATE OF (TODAY - DAYS_OF_HISTORY_KEPT) )  */
/*  *** NOTE: WHEN STARTING A NEW YEAR, NO OLD HISTORY FILES WILL BE */
/*            ERASED UNTIL WE ARE DAYS_OF_HISTORY_KEPT INTO THE      */
/*            NEW YEAR                                               */
CLEAN_HISTORY:
IF DATE(J) ¬= DATE_OLD  THEN
 DO
/*   CALCULATE OLD HISTORY DATE */
   TRASH_DATE = DATE(J) - HISTORY_KEPT
/*   ERASE THE FILE(S) */
/*    IF A PREFIX OTHER THAN (OR IN ADDITION TO) LOG WAS USED, THOSE */
/*    FILES MUST BE ERASED ALSO.  EG:   'ERASE * AAA'TRASH_DATE      */
   'ERASE * LOG'TRASH_DATE
 END
RETURN
CICS DFHLOGR
DFHLOGR  CSECT
         COPY  DFHCSADS
         COPY  DFHTCADS
* THE FOLLOWING FIELDS FOR CP DIAGNOSE 8 TRANSIENT $$BDIAG8
PARMLIST DS    0F
RETCODE  DS    F                  RETURN CODE FROM CP COMMAND
CMDADDR  DS    F                  ADDRESS OF CP COMMAND
CMDLEN   DS    F                  LENGTH OF CP COMMAND
CPCMD    DS    CL5                THIS IS ALWAYS SET TO 'SMSG'
LOGGER   DS    CL9                THIS IS SET TO THE VIRTUAL MACHINE   X
                                   NAME OF THE LOGGING FACILITY
APPLID   DS    CL8                VTAM APPLICATION ID OF THIS CICS -   X
                                   THIS IS USED AS THE FILE NAME FOR   X
                                   LOG FILE ON CMS
MSG      DS    CL72               MESSAGE TO SEND
* BRING IN NECESSARY CONTROL BLOCKS
         COPY  DFHTCTTE
         COPY  DFHTDIA
         COPY  DFHTDOA
* SET UP BASE REGISTERS
TCTTEAR  EQU   11
BASEREG  EQU   10
TDOABAR  EQU   9
TDIABAR  EQU   8
SITBASE  EQU   7
DFHLOGR  CSECT
         BALR  BASEREG,0                LOAD BASE REGISTER
         USING *,BASEREG                ...AND TELL ASSEMBLER
         L     TCTTEAR,TCAFCAAA         LOAD THE TCTTE BASE
         MVC   TCATDDI,TCTTETI          GET THE TRANSIENT DATA DESTINA-X
                                         TION ID FROM THE TCTTE
GETTD    DFHTD TYPE=GET,NORESP=TDOK    READ A RECORD FROM THE TD QUEUE
         B     END                     IF QZERO THEN EXIT
* HERE WE BUILD THE CP COMMAND
TDOK     L     TDIABAR,TCATDAA          ESTABLISH ADDRESSABILITY
         L     R7,CSASITBA              LOAD SIT BASE
         MVC   CPCMD,=CL5'SMSG'         CP COMMAND
         MVC   LOGGER,=CL9'CICSLOGR'    LOGGER VIRTUAL MACH NAME
         MVC   APPLID,104(7)            CICS APPLICATION ID
         SR    R5,R5                    CLEAR REG 5
         LH    R5,TDIAIRL               DATA LENGTH + 4
         SH    R5,=H'4'                 REG 5 CONTAINS LENGTH OF MSG
         LA    R4,TDIADBA               FROM ADDRESS FOR MOVE
ANOTHER  LA    R2,MSG                   TO   ADDRESS FOR MOVE
         LA    R3,072(,R0)              MAX LENGTH FOR MOVE
         CR    R5,R3                    LONGER THAN 72 BYTES ?
          BH    CONT1                    ... NO - CONTINUE
         LR    R3,R5                    LENGTH FOR MOVE
CONT1    LR    R1,R3                    SAVE LENGTH OF MOVE
         MVCL  R2,R4                    MOVE MESSAGE
         LA    R1,22(,R1)               ADD PREFIX LENGTH...
         ST    R1,CMDLEN                ...AND STORE FOR $$BDIAG8
         LA    R1,CPCMD                  LOAD CP COMMAND ADDRESS...
         ST    R1,CMDADDR               ...AND STORE FOR $$BDIAG8
         LA    0,PARMLIST               LOAD PARAMETER LIST ADDRESS
         LA    1,=CL8'$$BDIAG8'         LOAD TRANSIENT NAME ADDRESS...
         SVC 2                          ...AND ISSUE SVC
         L     R6,RETCODE               LOAD RETURN CODE
         LTR   R6,R6                    ANY ERRORS ?
         BNZ   DIAGERR                  ...YES - GO TO ERROR ROUTINE
         C     R5,=F'0'                 ANY MORE TO SEND ?
         BNH   GETTD                    NO - GO GET ANOTHER REC
         BCTR  R4,R0                    DECREMENT FROM ADDRESS
* WE ONLY SEND 72 BYTES OF THE MESSAGE AT A TIME. IF IT IS LONGER,
* IT IS BROKEN INTO 72 BYTE CHUNKS AND A '+' IS PLACED IN THE BEGINNING
* OF SECOND AND SUBSEQUENT PIECES, THUS DENOTING A CONTINUATION.
         MVI   0(R4),C'+'               ADD A PLUS SIGN
         LA    R5,1(,R5)                ADD 1 MORE BYTE TO MOVE
         B     ANOTHER                  YES - GO SEND IT
END      DFHPC TYPE=RETURN
* THE FOLLOWING CODE IS EXECUTED WHEN AN ERROR ON THE CP COMMAND IS
* DETECTED. IF DESIRED, PLACE SPECIAL ERROR PROCESSING CODE HERE.
DIAGERR  DFHPC TYPE=RETURN
         LTORG
         END
CICS $$BDIAG8
         TITLE '$$BDIAG8 - ISSUE CP DIAGNOSE 8 COMMAND'
         PUNCH ' PHASE $$BDIAG8,+0'
         DC    CL8'$$BDIAG8'          DEFINE TRANSIENT NAME
         BALR  R15,R0                 LOAD BASE
         USING *,R15                  ...AND TELL ASSEMBLER
         LR    R1,R0                  GET ADDRESS OF PARMS
         ST    R1,FWORD               ...AND SAVE IT
         USING PARMS,R1               TELL ASSEMBLER PARMS BAS REG
         XR    R0,R0                  PREVENT ANY INTERRUPTS
         SVC   22                     ...UNTIL WE ARE DONE
         MVC   PGMPSW,104(0)          SAVE PROGRAM NEW PSW
         MVC   NEWPSW,PNPSW           ..AND COPY IF FOR ZAP
         LA    R2,ISSUE8              POINT TO OUR ADDRESS
         STCM  R2,7,NEWPSW+5          ... AND STICK IT IN PSW
         MVC   104(8),NEWPSW          ... AND IN LOW CORE
         DC    X'0'                   CAUSE A PROGRAM CHECK
ISSUE8   MVC   104(8),PNPSW           ..AND STICK BACK ORIGINAL PSW
         L     R2,CMD                 LOAD ADDRESS OF CP COMMAND
         L     R3,LEN                 ...AND ITS LENGTH
         DC    X'83',X'23',XL2'0008'  ISSUE DIAG 8
         ST    R3,RC                  SAVE RETURN CODE FOR CALLER
GOBACK   LA    R0,255                 GIVE BACK
         SVC   22                     ...THE SYSTEM
         L     R1,FWORD               RESTORE REG 1
         SVC   11                     GO BACK TO CALLER
FWORD    DC    F'0'                   FULLWORD WORK
PGMPSW   DS    D
NEWPSW   DS    D
PARMS    DSECT
RC       DS    F                      RETURN CODE FROM CP COMMAND
CMD      DS    F                      CP COMMAND ADDRESS
LEN      DS    F                      LENGTH OF CP COMMAND
         END


Bernard McIlroy and Mike Kilroy
 Systems Programmers
Progress Lighting (USA)
































































