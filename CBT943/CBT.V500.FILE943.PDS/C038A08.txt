 COMMAREAs in an XA environment (continued)
This month we conclude this article by publishing the USERMOD to DFHXTP and an
expansion of the SETAM macro.
THE USERMOD TO DFHXTP
The following is the USERMOD to DFHXTP which will save COMMAREAs above the 16-
megabyte line if the size warrants.  It is currently set up to move anything
greater than 256 bytes above the line.  If you do not wish to use 256 as your
threshold, there are three lines which need changing.  They are lines 46060070,
68080030, and 68440030.  The control area for a COMMAREA is XT18U bytes long.
This is added to the threshold value in lines 68080030 and 68440030.  This is
also used in some of the calculations as field EICACTLL.
++USERMOD(MOD0018).
++VER(C150) FMID(HCI1703).
++MACUPD(DFHXTP) DISTLIB(SOURCE).
./ CHANGE NAME=DFHXTP
*        COPY  GHIEICDS  (copy member follows. so no seq. #s)
***********************************************************************
***         G H I   C O M M A R E A   S T O R A G E   A N C H O R   ***
***********************************************************************
***********************************************************************
*                                                                     *
*    MODULE NAME = GHIEICDS                                           *
*    STATUS      = 1.7.0                                              *
*    FUNCTION    = XTENDED STORAGE ANCHOR FOR SAVED COMMAREA          *
*                                                                     *
*    CHANGE ACTIVITY :                                                *
***********************************************************************
GHIEICDS DSECT
GHIEICSA DS    F                   STORAGE ACCOUNTING AREA
GHIFLAG  DS    CL4            FLAG TO NOTIFY CLEANUP TO FREE XTNDED STG
GHIEICAP DS    AL4                 POINTER TO EXTENDED STORAGE COMMAREA
GHIEICLL DS    H                   LENGTH OF COMMAREA DATA + CTL DATA
GHIEICRL DS    H                   REAL LENGTH OF XTENDED STG
GHIEICLN EQU   *-GHIEICDS          LENGTH OF ENTRY
***********************************************************************
*  end of copy member GHIEICDS
***********************************************************************
GHIST14  DS    F                   SAVE AREA FOR R14. 1ST CSECT
GHIST3   DS    F                   SAVE AREA FOR R3,  1ST CSECT
GHI2ST14 DS    F                   SAVE AREA FOR R14. 2ND CSECT
GHI2ST3  DS    F                   SAVE AREA FOR R3,  2ND CSECT
*  R5 MAY REALLY POINT TO AN ANCHOR BLOCK FOR COMMAREA ABOVE 16M
         USING GHIEICDS,R5         POINT TO GHI STORAGE ANCHOR
         BZ    LXFORM17            ....  NO COMMAREA
         CLI   XTPROCR,XTPMOVE     CODE NTRD TWICE - MOVE MODE?
         BE    RESUMXTP            YES - GHI CODE ALREADY DONE
         LH    R15,GHIEICLL        PUT COMMAREA LENGTH IN R15
         CH    R15=H'256'          COMMAREA LARGER THAN THRESHOLD
         BL    RESUMXTP            NO - DON'T ADD OVERHEAD
         L     R15.=V(GHICODE)     ADDRESS THE OTHER CSECT
         BALR  R14,R15             AND GO TO IT
         B     RESUMXTP            GO RESUME MAINLINE CODE
         LTORG
GHICODE  CSECT
         ST    R14,GHIST14            SAVE R14
         ST    R3,GHIST3              SAVE R3
         BALR  R3,0
         USING *,R3
         SR    R2,R2               CLEAR R2
         ICM   R2,B'0011',GHIEICLL   LENGTH OF REAL COMMAREA DATA
         STH   R2,TCASCNB          STORE FOR GETMAIN
         DFHSC TYPE=GETMAIN,                                           X
               CLASS=SHARED,                                           X
               DUMMY=DUMMY
         N     R3,=X'00FFFFFF'        TURN FLAGS OFF FOR BASE REG
         SETAM AM=31,REGS=(R2,R5)
         SR    R2,R2                   CLEAR R2
         LR    R2,TCACBAR             GET TCA PTR
         N     R2,=X'00FFFFFF'        TURN FLAGS OFF
         ICM   R2,B'0111',TCASCSA+1-DFHTCADS(R2)   PT AT STORAGE
         LA    R2,4(R2)                GET PAST SAA
         LR    R5,TCTTEAR             GET TCTTE PTR
         N     R5,=X'00FFFFFF         TURN FLAGS OFF
         ICM   R5,B'0111',TCTTEEIA+1-DFHTCTTE(R5)  PTR TO ANCHOR
         LH    R0,GHIEICLL             GET COMMAREA LENGTH
         SH    R0,=AL2(EICACTLL)       SUBTRACT CTL AREA LN
         L     R14,GHIEICAP            GET FROM ADDRESS FOR MVCL
         STH   R0,EICLL-DFHEICDS(R14)   PUT IN COMMAREA LENGTH
         LA    R14,4(R14)              SKIP SAA COPY
         LH    R15,GHIEICLL            GET COMMAREA LN FOR MVCL
         SH    R15,=H'4'               LOWER LENGTH BY 4
         LR    R5,R3                   SAVE R3 IN R5
         LR    R3,R15                  SET OTHER LNG FLD FOR MVCL
         MVCL  R2,R14                  COPY STG:XTENDED TO SHARED
         LR    R3,R5                   RESTORE R3
         LR    R5,TCTTEAR             GET TCTTE PTR
         N     R5,=X'00FFFFFF'        TURN FLAGS OFF
         ICM   R5,B'0111',TCTTEEIA+1-DFHTCTTE(R5)   PTR TO ANCHOR
         LH    R2,GHIEICRL             GET LENGTH OF STG FOR FREE
         L     R5,GHIEICAP             RE-ADDRESS XTENDED STG
         FREEMAIN RC,A=(R5),LV=(R2)    AND FREE IT
         SETAM AM=24,REGS=(R2,R5)
         L     R5,TCASCSA              PT AT NEW COMMAREA AGAIN
         MVC   TCASCSA+1(3),TCTTEEIA+1  ADDR PTR FOR LAST TIME
         DFHSC TYPE=FREEMAIN
         STCM  R5,B'0111',TCTTEIA+1   POINT TCTTE AT NEW COMMAREA
         USING DFHEICDS,R5        POINT TO REAL COMMAREA CTL
         LA    RE,EICARGIP       THIS CODE IS MOVE FROM XFMR 4
         ST    RE,EICARG1
         LA    RE,EICARG2P
         ST    RE,EICARG2
         LA    RE,EICDBA
         ST    RE,EICARG2P
         XC    EICARGIP,EICARGIP
         LA    R1,XTPCDCMA            SET ARG CODE
         L     R14,GHIST14            RESTORE R14
         L     R3,GHIST3              RESTORE R3
         BR    R14                  AND GO BACK TO MAINLINE CODE
         LTORG
         DROP R3
DFHXTP   CSECT
RESUMXTP DS    0H
         USING DFHXTP+44,R3           RESET BASE REG
*        BZ    LXFORM17           ** DELETED BY GHI MOD0018 **
*        BNH   COMMAOK            ** DELETED BY GHI MOD0018 **
         CLI   XTSFORMN,XTSTRAN2  TRANSFORMER 2?
         BE    IBMCODE1           YES - SKIP GHI STUFF
         CH    R2,=H'280'    COMMAREA LARGER THAN 256 ? (+CTL)
         BNL   GHICODE1           YES - DO GHI STUFF
IBMCODE1 EQU   *
         B     GETSHRD                GO GET SHARED STG
GHICODE1 DS    0H
         LA    R5,GHIEICLN            GET LNG OF XTENDED ANCHOR
         STH   R5,TCASCNB             AND PUT IN TCA FOR GETMAIN
         CLI   XTSFORMN,XTSTRAN2   TRANSFORMER 2?
         BE    XTPCODE             YES - SKIP GHI STUFF
         CH    R2,=H'280'     COMMAREA LARGER THAN 256 ? (+CTL)
         BL    XTPCODE             NO - DO IBM STUFF
         L     R15,=V(GHICSCT2)    ADDRESS THE OTHER CSECT
         BALR  R14,R15             AND GO TO IT
         B     NEXTARG             GO RESUME MAINLINE CODE
         LTORG
GHICSCT2 CSECT
         ST    R14,GHI2ST14
         ST    R3,GHI2ST3
         BALR  R3,0
         USING *,R3
         USING GHIEICDS,R5             TELL ASSEMBLER
         STH   R2,GHIEICLL            SAVE COMMAREA LN + CTL LNG
         MVC   GHIFLAG,=CL4'GHI '     SET FLAG FOR CLEANUP
         N     R3,=X'00FFFFFF'        TURN FLAGS OFF FOR BASE REG
         SETAM AM=31,REGS=(R2,R5)
         LR    R5,TCTTEAR             GET TCTTE PTR
         N     R5,=X'00FFFFFF'         TURN FLAGS OFF
         ICM   R5,B'0111',TCTTEEIA+1-DFHTCTTE(R5)   PTR TO ANCHOR
         SR    R2,R2                  MAKE SURE R2 IS CLEAR
         LH    R2,GHIEICLL             AND GET TOTAL LENGTH
         GETMAIN RU,LV=(R2),LOC=(ANY,ANY)
         ST    R1,GHIEICAP            SAVE ADDRESS OF XTENDED STG
         STH   R0,GHIEICRL            SAVE REAL STG LN FOR FREEMN
         LR    R2,R1                  NOW GET POINTER TO THE STG
         LA    R14,EICACTLL(R2)       AND GET PAST CTL INFO
         SR    R15,R15                MAKE SURE R15 IS CLEAR
         LH    R15,GHIEICLL            AND GET TOTAL LENGTH
         SH    R15,=AL2(EICACTLL)     BUT SUBTRACT CTL INFO LN
         LR    R1,R15                 PUT LENGTH INTO R1
         LA    R0,ARGVAL2             NEW DATA
         N     R0,=X'00FFFFFF'        MAKE SURE FLAGS ARE OFF
         MVCL  R14,R0                MOVE COMMAREA DATA ABOVE 16M
         SETAM AM=24,REGS=(R2,R5)
         ICM   R5,B'0111',TCTTEEIA+1   GET PTR TO COMMAREA ANCHOR
         LH    R2,GHIEICLL             GET LN OF COMMAREA + CTL
         SH    R2,=AL2(EICACTLL)      SUBTRACT LNG OF CTL AREA
         L     R14,GHI2ST14            RESTORE R14
         L     R3,GHI2ST3              RESTORE R3
         BR    R14                 AND GO BACK TO MAINLINE CODE
         LTORG
         DROP  R3
DFHXTP   CSECT
XTPCODE  DS    0H
         USING DFHXTP+44,R3            RESET BASE REG
         USING DFHEICDS,R5         POINT TO IBM COMMAREA
THE SETAM MACRO
***********************************************************************
* The following is the SETAM macro used in the above program and     **
* usermod for switching back and forth from 24-bit to 31-bit         **
* addressing mode.                                                   **
***********************************************************************
         MACRO
&LABEL   SETAM &TYPE=SWITCH,&AM=24,&REGS=,&CHECK=
         LCLA  &X                  SYSTEM INDEX
         AIF   ('&LABEL' EQ '').CHKDOC      GENERATE A LABEL ?
&LABEL   DS    0H
.CHKDOC  ANOP
         AIF   ('&TYPE' NE 'DOC').CHKTYPE   1) TYPE=DOC ?
**********************************************************************
*                       S E T A M    M A C R O                       *
**********************************************************************
*  FUNCTION:   TO ASSIST PROGRAMS WHEN CHANGING FROM 24-BIT TO       *
*  *********   31-BIT A-MODE AND VICE VERSA.                         *
*  SYMBOLIC PARAMETERS:                                              *
*    REQUIRED:                                                       *
*      &TYPE......THE FOLLOWING ARE VALID TYPE= VALUES:              *
*                  1) 'DOC'     - GENERATES THE DOCUMENTATION ON HOW *
*                                 THIS MACRO CAN BE USED.            *
*                                 ABBRV: NONE                        *
*                  2) 'SWITCH'  - TO SWITCH FROM 24-BIT A-MODE TO    *
*                                 31-BIT A-MODE AND VICE VERSA.      *
 *                                 ABBRV: 'SWI'                       *
*                  DEFAULT=SWITCH   LIMITS: NONE.                    *
*      &REGS......TWO REGISTERS THAT WILL BE USED FOR THE NEW 370/XA *
*                 INSTRUCTIONS.  AN EQUATED LABEL CAN BE USED TO     *
*                 REPRESENT THE REGISTERS.  THEREFORE, NO EDITS CAN  *
*                 BE PERFORMED FOR VALID REGISTERS.                  *
*                 NOTE: REGISTER(S) USED WILL BE DESTROYED.          *
*                 A WORK REG OF THE LINKAGE REG MIGHT BE APPROPRIATE.*
*                 DEFAULT=<NULL>    LIMITS: NOT REQUIRED WHEN TYPE=  *
*                                           DOC.  REGISTER 0 SHOULD  *
*                                           NOT BE USED FOR 2ND REG. *
*      &CHECK.....TO BE USED ONLY IN THE FOLLOWING SITUATION:        *
*                 PROGRAM MAY GET CONTROL IN EITHER 24 OR 31 BIT     *
*                 MODE.  SOME FUNCTION *MUST* BE DONE IN ONE MODE OR *
*                 THE OTHER (E.G. A CICS MACRO). PROGRAM WANTS TO    *
*                 ENSURE IT IS IN THE CORRECT MODE, THEN RETURN TO   *
*                 WHATEVER MODE IT WAS IN PREVIOUSLY.  THIS PARM IS  *
*                 ONLY FOR THE SWITCH BACK TO ORIGINAL MODE, AND     *
*                 REQUIRES THAT AT LEAST THE FIRST REG (&REG) USED   *
*                 TO DO THE INITIAL SET IS ALSO THE FIRST REG USED   *
*                 ON RESET, THAT IT IS UNCHANGED BETWEEN THE TWO     *
*                 MACROS, AND THAT IT IS NOT R0.                     *
*                 DEFAULT=<NULL>    LIMITS: Y OR YES                 *
*    IE.  PGM IS LINKED IN 31-BIT MODE, BUT DOESN'T KNOW WHAT MODE   *
*         HE GOT CONTROL IN (MAY HAVE BEEN BALR'D TO INSTEAD OF LINK *
*         OR XCTL). MUST ISSUE 24-BIT MACRO, THEN RETURN TO CALLER'S *
*         MODE FOR RETURN.  HE WOULD DO THE FOLLOWING:               *
*         SETAM   AM=24,REGS=(R1,R2)                                 *
*         DFHXX   TYPE=MACRO-LEVEL-CICS                              *
*         SETAM   AM=31,REGS=(R1,R2),CHECK=Y                         *
*         IF THE CALLER HAD BEEN IN 24-BIT MODE, THE SWITCH TO AMODE *
*         31 WOULD NOT BE EXECUTED.                                  *
*    OPTIONAL:                                                       *
*      &LABEL.....A SYMBOLIC ADDRESS LABEL WILL BE GENERATED ON A    *
*                 HALFWORD BOUNDARY.                                 *
*                 DEFAULT=<NULL>    LIMITS: A VALID USER LABEL.      *
*      &AM........THIS PARM INDICATES IF 24 BIT OR 31 BIT A-MODE     *
*                 IS DESIRED. '24' OR '31' SHOULD BE ENTERED.        *
*                 DEFAULT=24       LIMITS: 24 OR 31.                 *
*  NOTES:   USER SHOULD BE FAMILIAR WITH THE NEW 370/XA INSTRUCTIONS *
*  ******   TO UNDERSTAND AND USE THIS MACRO PROPERLY.               *
**********************************************************************
         MEXIT
.CHKTYPE ANOP
&X       SETA  &SYSNDX                     INIT TO SYSTEM INDEX.
         AIF   ('&TYPE' EQ 'SWITCH').SWITCH
         AIF   ('&TYPE' EQ 'SWI').SWITCH
         AIF   ('&TYPE' EQ '').NULLTYP
         MNOTE 8,'==> TYPE=&TYPE IS INVALID <=='
         MEXIT
.NULLTYP ANOP
         MNOTE 8,'==> TYPE= PARAMETER MISSING <=='
         MEXIT
/*
.SWITCH  ANOP                               TYPE=SWITCH PROCESSING
         AIF   ('&REGS(1)' EQ '').BADREGS
         AIF   ('&REGS(2)' EQ '').BADREGS
         AIF   (N'&REGS EQ 2).CHKAM
.BADREGS ANOP
         MNOTE 8,'==> REGS= PARAMETER REQUIRES 2 REGISTERS <=='
         MEXIT
.*---------------------------------------------------------------------
.CHKAM   ANOP                               CHECK DESIRED A-MODE
         AIF   ('&AM' EQ '31').AM31BIT
         AIF   ('&AM' EQ '24').AM24BIT
         MNOTE 8,'==> AM= PARAMETER MUST BE ''24'' OR ''31'' <=='
          MEXIT
/*---------------------------------------------------------------------
.AM31BIT ANOP
         AIF   ('&CHECK' EQ '').SET31
         AIF   ('&CHECK'(1,1) NE 'Y'.SET31
         N     &REGS(1),=XL4'80000000' WAS IT IN 31-BIT PREVIOUSLY ?
         BZ    SKP&X                   NO - DON'T PUT IT INTO 31
.SET31   ANOP
         L     &REGS(2),INIT&X         SET REG TO BRANCH ADDRESS
         BSM   &REGS(1),&REGS(2)       SET A-MODE TO 31-BIT
*                                      IF BSM OPR. 2 IS REG 0. A-MODE
INIT&X   DC    A(X'80000000'+LOC&X.31)   WILL NOT CHANGE AND NO BRANCH
LOC&X.31 EQU   *                         WILL BE TAKEN
         AGO   .EXIT
.*---------------------------------------------------------------------
.AM24BIT ANOP
         AIF   ('&CHECK' EQ '').SET24
         AIF   ('&CHECK'(1,1) NE 'Y').SET24
         N     &REGS(1),=XL4'80000000' WAS IT IN 24-BIT PREVIOUSLY ?
         BNZ   SKP&X                   NO - DON'T PUT IT INTO 24
.SET24   ANOP
         LA    &REGS(2),LOC&X.24   SET HIGH ORDER BIT TO 0(24-BIT).
         BSM   &REGS(1),&REGS(2)   SET NEW A-MODE BIT. IF BSM OPERAND 2
LOC&X.24 EQU   *                   IS REG 0. A-MODE WILL NOT CHANGE.
         AGO   .EXIT
/**********************************************************************
.EXIT   ANOP
SKP&X   DS 0H
        MEND


Peter Longden
Group Leader On-line Systems
Blue Cross Blue Shield of National Capitol Area (USA)  ) Xephon 1989
































