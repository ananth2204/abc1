 A CICS-VSE/POWER interface
We recently needed to be able to release jobs held in the VSE/POWER reader queue
by NATURAL programs running under the control of CICS.  It was decided to write
an interface program that would link with the NATURAL program and execute the
required VSE/POWER commands.  The interface program is written in macro-level
Assembler, using the new VSE/POWER Spool Access Support as opposed to the older
Spool Macro Support.
Once the interface was in production it was soon apparent that the facility
should be available to all CICS programs, and so the interface was amended to
allow communication with CICS command-level programs as well as NATURAL
programs.
The software used was as follows:
%    VM/SP Release 3
%    DOS/VSE Release 2.1
%    VSE/POWER Release 2.2
%    CICS/VS Release 1.6
%    NATURAL Release 1.2.7
%    CICS macro-level Assembler.
METHODOLOGY
For NATURAL programs
%    Set up the name of the VSE/POWER job in parameter 1.
%    Define a 2-byte return code in parameter 2.
%    CALL the interface program SPOOLINT using these two parameters.
%    Check the return code and continue accordingly.
For command-level programs:
%    Set up the name of the VSE/POWER job in the COMMAREA.
%    Define a 2-byte return code in the COMMAREA.
%    Set up an indicator flag containing TCFLAGU in the COMMAREA.
%    LINK to the interface program SPOOLINT using the COMMAREA.
%    Check the return code and continue accordingly.
LIMITATIONS
1    Only one copy of the job to be released may be present in the reader queue.
If multiple copies are present only the first job found will be actioned.
2    In its present form the interface program only releases jobs held in the
VSE/POWER reader queue.  However, it would be a very simple matter to alter the
program to allow it to execute a wider range of VSE/POWER commands.
ADVANTAGES OF THE SPOOL ACCESS SUPPORT
According to IBM the advantages of using the Spool Access Support instead of the
previously available Spool Macro Support are as follows:
%    It allows multiple concurrent access to VSE/POWER.
%    It enables VSE/POWER to return a variety of control data if a display of
status information is requested.
%    It allows a program to submit data for spooling into an output queue.
%    It supports checkpointing and restarting during both retrieval of spool
records and submission of records for spooling.
CALLING THE INTERFACE PROGRAM
Sample NATURAL program
assign   #JOB-NAME(a8)   =  'TESTJOB '
assign   #RC(a2)         =  '  '
call     'SPOOLINT'   #JOB-NAME  #RC
if  #RC  ne  '  '
    write notitle 'RELEASE FAILED. RETURN CODE IS  '  #RC
end
Sample COBOL program
 WORKING-STORAGE SECTION.
 77  WS-ID                 PIC X(13) VALUE 'START OF W.S. '.
 77  JOB-NAME              PIC X(8).
 77  RC                    PIC X(2)  VALUE SPACES.
 77  COM-LEVEL-FLAG        PIC X(5)  VALUE 'CFLAG'.
 77  ERR-MESS              PIC X(15) VALUE 'RETURN CODE IS '.
 77  ERR-CODE              PIC X(2)  VALUE '  '.
*
 PROCEDURE DIVISION.
     PERFORM  MAIN-LINE.
     PERFORM  RETURN-CONTROL.
     GOBACK.
 *
 MAIN-LINE SECTION.
     MOVE  'TESTJOB'    TO  JOB-NAME.
     EXEC  CICS HANDLE CONDITION PGMIDERR(END-MAIN-LINE)
                                 END-EXEC.
     EXEC  CICS LINK PROGRAM('SPOOLINT') COMMAREA(JOB-NAME)
                                         LENGTH(15)
                                         END-EXEC.
     IF RC  = '  ' THEN MOVE 'SUCCESSFUL    '  TO ERR-MESS
                   ELSE MOVE RC TO ERR-CODE
                        MOVE 'RETURN CODE IS ' TO ERR-MESS.
     EXEC  CICS SEND TEXT FROM(ERR-MESS) LENGTH(17)
                                         FREEKB
                                         ERASE
                                         END-EXEC.
 END-MAIN-LINE.
     EXIT.
 RETURN-CONTROL.
     EXEC CICS RETURN
               END-EXEC.
SPOOLINT SOURCE CODE
***DESCRIPTION: THIS PROGRAM IS CALLED BY A NATURAL PROGRAM WITH 2 ***
*  PARAMETERS BEING PASSED ACROSS. ITS PURPOSE IS TO RELEASE A JOB   *
*  HELD IN THE POWER READER QUEUE ACCORDING TO THE 1ST PARAMETER     *
*  (JOBNAME).  ONCE THE POWER COMMAND HAS BEEN EXECUTED CONTROL IS   *
*  RETURNED TO THE 'NATURAL' PROGRAM AFTER THE RELEVANT RETURN CODE  *
*  (2ND LINKAGE FIELD) HAS BEEN SET.  THIS PROGRAM CAN ALSO BE CALLED*
*  FROM A COMMAND  LEVEL PROGRAM. A COMMAREA OF 15 BYTES MUST BE     *
*  DEFINED WITH THE FOLLOWING LAYOUT:                                *
*                     BYTES 1 - 8  JOB NAME                          *
*                     BYTES 9 - 10 RETURN CODE                       *
*                     BYTES 11- 15 COMMAND LEVEL FLAG = 'CFLAG       *
*  RETURN CODES.....  '  ' = FUNCTION SUCCESSFUL                     *
*                     '99' = JOB NOT RELEASED OR ALREADY RELEASED    *
*                     '88' = JOB NOT FOUND IN QUEUE                  *
*                     '70' = INTERNAL ERROR - IDENTIFY MACRO         *
*                     '71' = INTERNAL ERROR - CONNECT MACRO          *
*                     '72' = INTERNAL ERROR - WAIT ON CONNECT        *
*                     '73' = INTERNAL ERROR - SEND MACRO (DISPLAY)   *
*                     '74' = INTERNAL ERROR - SEND MACRO (RELEASE)   *
*                     '75' = INTERNAL ERROR - WAIT ON SEND           *
*                     '76' = INTERNAL ERROR - DISCONNECT MACRO       *
***                   '77' = INTERNAL ERROR - TERMINATE MACRO      ***
SAACBAR  EQU   3                        STORAGE ACCOUNTING AREA.
         COPY DFHCSADS
         COPY DFHTCADS
FILL1    DS   CL64                     RESERVED BY NATURAL
         COPY DFHSAADS                STORAGE ACCOUNTING AREA
         DS    0F                     FORCE FULLWORD ALIGNMENT
ECBLIST  DS    AL4                    ADDR OF ECB 1 = IJBX ECB
         DS    AL4                    ADDR OF ECB 2 = TIMER ECB
ENDL     DS    F                      END OF ECB LIST (X'FFFFFFFF')
ERRNAME1 DS    CL8                    LEVEL 1 OF ROUTINE IN ERROR
ERRNAME2 DS    CL8                    LEVEL 2 OF ROUTINE IN ERROR
FUSER    DS    CL8                    FROM USER ID
RETCODE  DS    CL2                    RETURN CODE
NATJNAME DS    CL8                    JOB NAME FROM NATURAL PROGRAM.
TIMERCNT DS    PL2                    NO. OF TIME INTERVALS
NATRCADR DS    F                      ADDR OF NATURAL RETURN CODE
*** PROGRAM START ***
         CSECT                         CONTROL SECTION.
         USING *,R2                    R.2 IS BASE REGISTER.
         LR    R2,R14                  CICS SETS START ADR IN R.14.
         DFHSC TYPE=GETMAIN,           GET 72  BYTES OF                X
               CLASS=USER,            ..USER STORAGE                   X
               INITIMG=40,            ..AND INITIALIZE                 X
                NUMBYTE=72             ..TO BLANKS.
          L     SAACBAR,TCASCSA        ADDR STORAGE AREA
*                                      INITIALIZE END OF ECB-
          MVC   ENDL,FFS               ..LIST TO HIGH VALUES.
*** IF A NATURAL PROGRAM HAS CALLED THIS PROGRAM THEN               ***
*  -   REG 1 POINTS TO A PARAMETER LIST CONTAINING                    *
*            1) THE ADDRESS OF THE JOBNAME                            *
*            2) THE ADDRESS OF THE RETURN CODE                        *
*  HOWEVER IF A COMMAND LEVEL PROGRAM HAS CALLED THIS PROGRAM THEN    *
*  -   REG 1 POINTS TO A PARAMETER LIST CONTAINING                    *
*            1) THE ADDRESS OF THE EIB                                *
*            2) THE ADDRESS OF THE COMMAREA WHICH CONTAINS            *
*                                  1) JOBNAME            'XXXXXXXXX'  *
*                                  2) RETURN CODE        '  '         *
***                                3) COMMAND LEVEL FLAG 'CFLAG'    ***
*  THE FOLLOWING BLOCK OF CODE ALLOWS COMMUNICATION WITH COMMAND
*  LEVEL PROGRAMS AS WELL AS NATURAL PROGRAMS.
         L     R10,4(,R1)               LOAD ADDR OF COMM ADDRESS
         L     R10,0(,R10)              LOAD COMM AREA ADDRESS
         CLC   10(5,R10),=C'CFLAG'      CALL'ED BY COMMAND LEVEL PRG?
         BNE   CONTINUE                 ..NO THEN CALLER IS NATURAL.
         MVC   NATJNAME(8),0(R10)       ..YES THEN SAVE JOB NAME.
         A     R10,=F'8'                BUMP REG TO RET.CODE
         ST    R10,NATRCADR             SAVE ADDR OF RET.CODE
         B     MISSNAT                  MISS OUT NATURAL CODE
*** SAVE LINKAGE PARAMETERS IN ABOVE STORAGE BLOCK ***
CONTINUE  L    R5,0(R1)                 LOAD ADDR OF JOB NAME IN R5
          MVC  NATJNAME(8),0(R5)        SAVE JOB NAME
          MVC  NATRCADR(4),4(R1)        SAVE ADDR OF NATURAL RET.CODE
*** SPOOL ACCESS ADDRESSABILITY ***
MISSNAT   LA    R4,SP1XPCCB             DSECT FOR X-PART CONTROL BLK
          USING IJBXPCCB,R4             REG 4 POINTS TO XPCCB
          LA    R7,SP1SPL               DSECT FOR SPL
          USING SP1SPLDS,R7             REG 7 POINTS TO SPL
          LA    R8,IJBXSUSR             GET ADDR OF DATA TO BE SENT
          USING PXUUSER,R8              DSECT
          LA    R9,IJBXRUSR             GET ADDR OF DATA RECEIVED
          USING PXPUSER,R9              DSECT
*** THIS PART OF THE CODE MUST BE SINGLE THREADED BECAUSE THE ***
*   POWER SEND AND REPLY BUFFERS CANNOT BE RE-USED.             *
*** THEREFORE ENQUEUE UPON A RESOUCE.                         ***
         DFHKC TYPE=ENQ,QARGADR=ENQFLD,QARGLNG=8
ID       XPCC  FUNC=IDENT,XPCCB=(R4)    IDENTIFY MACRO
         CLM   R15,MASK1,DC08           TEST FOR SUCCESSFUL IDENTIFY
         BNO   CONN                     ..YES THEN CONNECT.
         MVC   ERRNAME1(4),=C'IDNT'     ....NO, SET-UP ERROR ID.
         MVC   RETCODE,=C'70'           ....SET-UP RETURN CODE.
         B     RETURN                   ....RETURN TO NATURAL
CONN     XPCC  FUNC=CONNECT,XPCCB=(R4)  CONNECT MACRO
         LTR   R15,R15                  IS CONNECTION AVAILABLE ?
         BZ    CONNOK                   ..YES THEN BYPASS WAIT,
         CLM   R15,MASK1,DC08           IF RC = 04 THEN
         BL    WAITCONN                 ..WAIT FOR CONNECTION.
         MVC   ERRNAME1(4),=C'CONN'     ....SET-UP ERROR ID.
         MVC   RETCODE,=C'71'           ....SET-UP RETURN CODE
         B     TERM                     ....CLOSE XPCC INTERFACE.
*** WAIT FOR 'CONNECT' ECB COMPLETION ***
WAITCONN ZAP   TIMERCNT,=P'0'           INITIALIZE TIMER COUNT
         LA    R5,IJBXCECB              ADDR CONNECT ECB
         ST    R5,ECBLIST               STORE CONN ECB IN LIST
WAIT1    DFHIC TYPE=POST,               INTERVAL CONTROL POST          X
               INTRVAL=000005,          5 SEC INTERVAL                 X
               ERROR=WAITERR1
         MVC   ECBLIST+4(4),TCAICTEC    CICS GIVES ECB ADR IN TCAICTEC
*** WAIT ON ECB LIST:  ECB 1 = IJBX ECB  ***
***                    ECB 2 = TIMER ECB ***
          DFHKC TYPE=WAIT,               TASK CONTROL WAIT              X
               DCI=LIST,                ..TYPE = LIST.                 X
               ECADDR=ECBLIST
         CLI   2(R5),X'80'              HAS IJBXCECB BEEN POSTED ?
         BE    CONNOK                   ..YES THEN CONTINUE.
         AP    TIMERCNT,=P'1'           ..NO THEN WAIT 2 MORE TIMES
         CP    TIMERCNT,=P'3'           ..IF 3 INTERVALS HAVE EXPIRED
         BL    WAIT1                    ....THEN SET-UP ERROR INFO
WAITERR1 EQU   *                        ....AND STOP.
         MVC   ERRNAME1,=C'WAITCONN'    SET-UP ERROR NAME
         MVC   RETCODE,=C'72'           SET-UP RETURN CODE
         B     TERM                     GO TO TERMINATE ROUTINE.
*** SET-UP CONTROL REQUEST + SEND IT TO POWER ***
CONNOK   MVC   SPLCFLD(12),=C'D RDR,'   DISPLAY JOB
         MVC   SPLCFLD+6(8),NATJNAME    MOVE JOB NAME (FROM NATURAL)
         LA    R6,SPLGSLEN              STANDARD SPL LENGTH
         AH    R6,=H'72'                ADD MAX LEN OF COMMAND AREA
         ST    R6,IJBXBLN               STORE BUF LENGTH INTO XPCCB
         MVI   PXUBTYP,PXUBTSPL         INDICATE BUFFER TYPE = SPL
         MVI   PXUACT1,0                CLEAR ACTION BYTE
         STCM  R7,MASK7,IJBXADR         INSERT SPL ADDR AS BUFFER ADDR.
         MVC   RETCODE,=C'73'           SET RET.CODE IN CASE OF ERROR
         MVC   ERRNAME1(8),=C'SENDDISP' SET ERROR NAME IN CASE OF ERROR
SENDDISP BAL   R11,SENDREQ              SEND 'D RDR' COMMAND TO POWER
         MVC   RETCODE,=C'  '           SEND OK THUS RESET RET.CODE
*** CHECK REPLY BUFFER TO FIND THE USERID ***
         LH    R6,=H'200'               REPLY BUF SIZE = 200
         LA    R5,REPBUF                ADDR REPLY BUFFER
FROMLOOP CLC   0(8,R5),NATJNAME         CHECK IF JOB IS FOUND,
         BE    GOTJOB                   ..YES THEN FIND USERID.
         LA    R5,1(R5)                 INCREMENT REGISTER.
         BCT   R6,FROMLOOP              LOOP.
         MVC   RETCODE,=C'88'           JOB NOT FOUND IN QUEUE.
         B     DISCONN                  DISCONNECT + TERMINATE.
GOTJOB   CLC   0(6,R5),=C'FROM=('       CHECK FOR USERID,
         BE    GOTUSER                  ..YES THEN REMOVE BRACKETS.
         LA    R5,1(R5)                 INCREMENT REGISTER
         BCT   R6,GOTJOB                LOOP
         B     RELJOB                   NO USERID FOUND
GOTUSER  LA    R10,FUSER                ADDR FUSER FIELD
         L     R6,=F'8'                 MAX LEN OF USER ID
         LA    R5,6(R5)                 BUMP REG5 TO START OF USERID
USERLOOP CLI   0(R5),C')'               TEST FOR CLOSE BRACKET
         BE    RELJOB                   ..YES THEN USERID IS LOADED.
         MVC   0(1,R10),0(R5)           MOVE USER ID (BYTE PER BYTE)
         LA    R10,1(R10)               INCREMENT REG.
         LA    R5,1(R5)                 INCREMENT REG.
         BCT   R6,USERLOOP              LOOP.
*** RELEASE JOB FROM POWER RDR QUEUE ***
RELJOB   MVC   REPBUF(200),REPBUF-1     RESET REPLY BUFFER TO HEX NULLS
         MVC   SPLCFLD(6),=C'R RDR,'    BUILD POWER COMMAND
         MVC   SPLCFLD+6(8),NATJNAME    ..LOAD 'JOB NAME'
         MVC   SPLGUS(8),FUSER          ..LOAD 'FROM USERID'
         LA    R6,SPLGSLEN              STANDARD SPL LENGTH
         AH    R6,=H'72'                ADD MAX LEN OF COMMAND AREA
         ST    R6,IJBXBLN               STORE BUF LENGTH INTO XPCCB
         MVI   PXUBTYP,PXUBTSPL         INDICATE BUFFER TYPE = SPL
         MVI   PXUACT1,0                CLEAR ACTION BYTE
         STCM  R7,MASK7,IJBXADR         INSERT SPL ADDR AS BUFFER ADDR.
         MVC   RETCODE,=C'74'           SET RET.CODE IN CASE OF ERROR
         MVC   ERRNAME1(7),=C'SENDREL'  SET ERROR NAME IN CASE OF ERROR
SENDREL  BAL   R11,SENDREQ              SEND 'R RDR'COMMAND TO POWER.
         MVC   RETCODE,=C'  '           SEND OK THUS RESET RET.CODE.
*** CHECK REPLY BUFFER ***
         CLC   REPBUF(8),NULLS          IS REPLY BUFFER = NULLS ?
         BNE   BADRET                   ..NO = RELEASE HAS NOT WORKED;
          MVC   RETCODE,=C'  '           ..YES SET RET.CODE TO BLANKS,.
         B     DISCONN                  ..AND DISCONNECT.
BADRET   MVC   RETCODE,=C'99'           SET RETURN CODE TO 99
DISCONN  XPCC  FUNC=DISCONN,XPCCB=(R4)  DISCONNECT FROM POWER
         LTR   R15,R15                  ..TEST RESULT.
         BZ    TERM
         MVC   ERRNAME2(4),=C'DISC'     SET-UP ERROR INFO.
         MVC   RETCODE,=C'76'
         B     TERM                     GO TO TERMINATE ROUTINE.
TERM     XPCC  FUNC=TERMIN,XPCCB=(R4)   TERMINATE POWER SESSION.
         LTR   R15,R15                  ..TEST RESULT.
         BZ    RETURN
         MVC   ERRNAME2(4),=C'TERM'
         MVC   RETCODE,=C'77'
         B     RETURN                   GO TO RETURN ROUTINE.
*** - DEQUEUE RESOURCE,                             ***
*   - SET-UP RETURN CODE, AND                         *
*** - TRANSFER CONTROL BACK TO THE CALLING PROGRAM. ***
RETURN   DFHKC TYPE=DEQ,QARGADR=ENQFLD,QARGLNG=8
         L    R5,NATRCADR               LOAD ADR OF NATURAL RC IN R5
         MVC  0(2,R5),RETCODE           MOVE RETCODE INTO NATURAL RC.
         DFHPC TYPE=RETURN              RETURN TO NATURAL PROGRAM
*** END OF MAIN-LINE PROCESSING ***
SENDREQ  XPCC  FUNC=SENDR,XPCCB=(R4)    SEND REQUEST MACRO
         LTR   R15,R15                  IF RETURN CODE = 0 THEN
         BZ    WAITSEND                 ..WAIT FOR ECB POSTED BY POWER.
         B     DISCONN
WAITSEND EQU   *                        WAIT FOR ECB POSTED BY POWER.
         ZAP   TIMERCNT,=P'0'           INITIALIZE TIMER COUNT
         LA    R5,IJBXSECB              ADDR SEND ECB
         ST    R5,ECBLIST               STORE SEND ECB IN LIST
WAIT2    EQU   *                        INTERRUPT AFTER 5 SECONDS
         DFHIC TYPE=POST,               INTERVAL CONTROL POST          X
               INTRVAL=000005,          WAIT 5 SECS                    X
               ERROR=WAITERR2
         MVC   ECBLIST+4(4),TCAICTEC    CICS GIVES ECB ADR IN TCAICTEC
         DFHKC TYPE=WAIT,               TASK CONTROL WAIT              X
               DCI=LIST,                .. WAIT ON LIST.               X
               ECADDR=ECBLIST
         CLC   2(1,R5),=X'80'           HAS IJBXSECB BEEN POSTED ?
         BER   R11                      ..YES THEN CONTINUE.
         AP    TIMERCNT,=P'1'           ..NO THEN WAIT 2 MORE TIMES
         CP    TIMERCNT,=P'3'           ..IF 3 INTERVALS HAVE EXPIRED
         BL    WAIT2                    ..THEN SETUP ERROR INFO
WAITERR2 EQU   *                        ....AND STOP.
         MVC   ERRNAME1,=C'WAITSEND'    SET-UP ERROR NAME
         MVC   RETCODE,=C'75'           SET-UP RETURN CODE
         B     DISCONN
MASK1    EQU   1                       COMPARE LOGICAL MASK.
MASK7    EQU   7                       COMPARE LOGICAL MASK.
REASOK   EQU   X'00'                   ZERO REASON CODE
DC08     DC    X'08'
NULLS    DC    XL8'00'                 LOW VALUES.
BLANKS   DC    CL8' '                  SPACES.
FFS      DC    X'FFFFFFFF'             HIGH VALUES.
OUTBUF   DS    CL60                    OUTPUT(SEND) BUF. FOR X-PART CCB
         DC    X'00'                   CLEAR BUFFER BYTE
REPBUF   DS    CL200                   REPLY BUFFER      FOR X-PART CCB
ENQFLD   DC    AL4(ENQRSCE)            ADDRESS OF ENQ RESOUCE NAME
ENQRSCE  DC    CL8'CICSSPLI'           RESOURCE NAME
         LTORG
SP1SPL   PWRSPL TYPE=GEN,                GENERATE SPL                  X
               PRFX=SP1,                 PREFIX=SPL                    X
               REQ=CTL,                  CONTROL REQUEST               X
               USERID=SYSP,              DEFAULT USERID                X
               FUNC=COMMAND              FUNC = POWER COMMAND
 SP1XPCCB XPCCB APPL=CICSSPLI,            GENERATE X-PART CCB.          X
               TOAPPL=SYSPWR,            COMMUNICATE WITH POWER.       X
               BUFFER=(OUTBUF,60),                                     X
               REPAREA=(REPBUF,200)
SP1SPLDS PWRSPL TYPE=MAP
         MAPXPCCB
         LTORG
         END


M A Bell
Systems Consultant (The Netherlands)    ) Xephon l988






















































