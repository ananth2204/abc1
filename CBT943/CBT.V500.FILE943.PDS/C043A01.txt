A method for purging unwanted tasks

Every now and then a situation will arise on a CICS system in
which a task will be 'stuck' on a CICS task chain waiting for
something but never completing.  If this 'stuck' task holds any
enqueue(s), other tasks can be waiting in line on the task chain for
these to be released.  I have found the CSMT-type methods for
purging these tasks to be generally ineffective.  The following
method has been able to get rid of some unwanted tasks on the
active task chain when conventional means have failed.  It may
work on tasks on the suspended chain as well, but I have not had
that problem recently.

In order to take advantage of the method outlined below, you will
need to have a means of obtaining and altering information within
CICS system control blocks.  There are software packages that do
this, but you could write your own on-line program if you don't
have this kind of software.  The steps to purge an unwanted task
are as follows:

1   Obtain the address of the TCTTE for the terminal associated
with the problem task (see sample program below).

2   Obtain the address of the user portion of the TCA from
displacement X'10' into the TCTTE above.

3   Alter the 2 bytes of the TCA (user portion) at displacement
X'18' to the value of X'2180'.

4   Obtain the DCA address from displacement X'18' into the
system TCA.  (The system TCA address is at X'00' in the user
portion of the TCA.)

5   Alter the 2 bytes of the DCA at displacement X'18' to the
value of X'2180'.

If this method has been successful, the task will soon be gone
from the TCA chain.  The following sample program will obtain
the TCTTE address given the terminal-id:

GETCTTE  CSECT
TCTFIND  DS    0H
         SAVE  (14,12)                 SAVE THE REGISTERS
         BALR  R7,0                    ADDRESSABILITY
         USING *,R7
         USING DFHCSABA,R13
         DFHTM TYPE=LOCATE,                                            *
               NAME=TERMNAME,                                          *
               TABLE=TCTE,                                             *
               SET=TERMADDR,                                           *
               ERROR=BADTERM,                                          *
               NORMAL=GOODTERM
GOODTERM DS    0H
BADTERM  DS    0H
TERMNAME DC    C'LAAA'
TERMADDR DS    F
         DFHTM MF = (A,PARMLIST)
         DFHCSAD TYPE=CSECT
         LTORG
         END
This program code will, of course, need to be modified to obtain
the desired terminal-id from input by the operator.

Gary Haar
Systems Programmer
Blue Cross/Blue Shield of Arkansas (USA) ) Xephon 1989


