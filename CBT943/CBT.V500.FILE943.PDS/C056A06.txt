A poor man's CICS monitor (continued)

This month we take a look at the third and final program that
helps make up our poor man's CICS monitor.

The third program is a long running task search.  It records
information to identify a task and its associated time in a table.
On the next invocation of the program the table is checked for
matching entries.  If one is found it is checked against
exception tables to be sure it isn't a known long running task
and, if not, it is identified in a message to the console and/or
the printer.  This module provided a means by which we were
able to notify users that they had a problem before they even
knew it.  It was very good at finding tasks that were involved
with exclusive control conflicts.  Note that it bypasses tasks
waiting for terminal I/O.

         TITLE 'LONG RUNNING TASK SEARCH PROGRAM BY ROBERT BILYEU'
LONGRUN  CSECT
         USING *,R11
         LR    R11,R14     LOAD SO CALLED VOLATILE REGISTER INTO BASE
         USING DFHCSADS,R13
         USING DFHTCADS,R12
         USING DFHDCADS,R10
         USING DFHTCADY,R2
         USING DFHTDOA,R1
         XR    R1,R1
         XR    R2,R2
         XR    R3,R3
         XR    R4,R4        CLEAR ALL NEEDED REGISTERS FOR SAFETY SAKE
         XR    R5,R5
         XR    R6,R6
         XR    R7,R7
         XR    R8,R8
         XR    R9,R9
         XR    R10,R10
         CLC   FOUNDSW,=C'DEADLOCKED NOW'  GO AROUND IF RLBANAL7 IS
         BE    BYPASS5                     ALREADY REPORTING TROUBLE
         MVC   LONGSW1,=C'NO '    CLEAR THE SWITCH TO NO TO CONTROL
*                                 CONSOLE MESSAGE REPLYS LATER
         CLC   LONGSW2,=C'ONCE'   TEST FOR INITIAL LOAD OF TAB POINTERS
         BE    BYPASS1            LONGSW2 WILL BE LOW-VALUES AT START
         LA    R1,ENDLONG         LOAD AND STORE THE NEEDED TABLE
         ST    R1,STOREEND        POINTERS ONCE ONLY WHEN XANL STARTS
         LA    R1,LONGLIST
         ST    R1,STORENXT
         ST    R1,STOREBEG
         MVC   LONGSW2,=C'ONCE'
BYPASS1  LA    R10,CSASUSOF
         MVC   FLAG,=C'S'         INDICATE TASK WAS FROM SUSPEND CHAIN
DCALOOP  L     R10,DCAKCFA        WHEN PUTTING INFO INTO TABLE
         CLI   0(R10),X'81'       TEST FOR STORAGE CLASS STILL DCA
         BE    LOOKITUP           WHEN ITS NOT THEN LOAD THE ACTIVE
         LA    R1,CSAACTOF        CHAIN OFFSET TO CONTINUE
         CR    R10,R1             WHEN ACTIVE CHAIN IS EXHAUSTED THE
         BE    RETURN             DCAKCFA FORWARD POINTER IS EQUAL TO
         LR    R10,R1             CSAACTOF
         MVC   FLAG,=C'A'         INDICATE TASK WAS FROM ACTIVE CHAIN
         B     DCALOOP            WHEN PUTTING INFO INTO TABLE
LOOKITUP L     R2,DCATCAA         GET THE OWNERS TCA ADDRESS
         L     R2,0(,R2)          BACK IT UP TO OWNER SYSTM TCA ADDRSS
*  WILL CHECK HERE FOR SYSTM TASKS AND KNOWN EXCEPTION TASKS AND AVOID
         CLI   TCATCDC-DFHUSTCA+TCASYAEA-DFHSYTCA(R2),X'13'
         BE    DCALOOP                    GO AROUND HIM
         CLI   TCAKCTTA-DFHSYTCA(R2),C'K' GO AROUND KCP
         BE    DCALOOP
         CLI   TCAKCTTA-DFHSYTCA(R2),C'T' GO AROUND TCP
         BE    DCALOOP
         CLI   TCAKCTTA-DFHSYTCA(R2),C'J' GO AROUND JOURNALS ELSE
         BE    DCALOOP                    YOU HAVE A VALID TASK TCA
*  THE FOLLOWING 7 INSTRUCTIONS ARE FOR DOS ONLY
*  THE FOLLOWING WILL ELIMINATE I/O WAIT ECBS THAT ARE IN GETVIS
*  THIS IS TO REDUCE FALSE ALARMS BY LONG RUNNING TASKS THAT READ
*  MANY MANY RECORDS--IT IS NOT FOOL PROOF FOR LONG RUNNERS
         LA    R1,+20                     POINT R1 TO ADD OF COMREG
         L     R1,0(,R1)                  LOAD THE ADDRESS OF COMREG
         LA    R1,32(R1)                  BUMP UP TO HEX 20 INTO COMRG
         L     R1,0(,R1)                  LOAD BEGINNING OF GETVIS ADD
         L     R4,TCATCEA-DFHUSTCA+TCASYAEA-DFHSYTCA(,R2)
         CR    R4,R1                      COMPARE TO SEE IF IN GETVIS
         BNH   TESTEXCP                   IF NOT IN GETVIS GO TO TEST
         CLI   TCATCDC-DFHUSTCA+TCASYAEA-DFHSYTCA(R2),X'80'
         BE    DCALOOP                    ELSE CHECK FOR I/O WAIT CDE
*                                         IF NOT EQUAL THEN FALL THRU
*        DFHDC TYPE=TRANSACTION,DMPCODE=RLB8
*  LOOK UP THE TRANSACTION ID IN A TABLE OF EXCEPTIONS THAT HOLDS
*  TRANSACTIONS NOT TO BE CONSIDERED FOR THIS MONITORING
TESTEXCP L     R1,TCATCPC-DFHSYTCA(,R2)   LOAD TRANSID ADDRESS
         LA    R4,TABLEXCP                POINT TO FRONT OF EXCEPTIONS
EXCPLOOP CLC   0(4,R4),=4X'FF'            LOOK FOR END OF TABLE
         BE    TABLOOK                    BRANCH IF NOT EXCEPTION TASK
         CLC   0(4,R4),0(R1)              COMPARE TRANID TO TABLE TRAN
         BE    DCALOOP
         LA    R4,4(,R4)                  BUMP TABLE TO NEXT ENTRY
         B     EXCPLOOP
* AT THIS POINT WE HAVE A VALID NON SYSTEM TASK AND WILL LOOK FOR A
* MATCH IN THE TABLE WHICH REMAINS FROM PREVIOUS EXECUTIONS. IF IT IS
* NOT FOUND ADD IT INTO THE NEXT ENTRY. IF IT IS FOUND REPORT THE INFO
* TO THE CONSOLE AND UPDATE THE TABLE INFORMATION AT  (FOUNDIT).
TABLOOK  LA    R8,+12                   LOAD TABLE ENTRY LENGTH, END
         LA    R9,ENDLONG-12            ADDRESS, AND BEGINNING ADDRESS
         LA    R7,LONGLIST              FOR BXLE LOOP REGISTERS
LOOKLOOP CLC   0(3,R7),TCAKCTTA-DFHSYTCA(R2)  COMPARE TO CURRENT ENTRY
         BE    FOUNDIT                  ENTRY WAS FOUND IN THE TABLE
         BXLE  R7,R8,LOOKLOOP           ELSE LOOP UNTIL TABLE END, THEN
STOREENT CLC   STORENXT,STOREEND        FALL THROUGH TO PUT THE INFO IN
         BNE   BYPASS2                  THE NEXT AVAILABLE TABLE ENTRY
         MVC   STORENXT,STOREBEG        WE MUST TEST FOR TABLE END TO
BYPASS2  XR    R3,R3                    START OVER AT THE TOP WHEN NEC-
         L     R3,STORENXT              ESSARY
         MVC   0(3,R3),TCAKCTTA-DFHSYTCA(R2)  STORE TASK NUMBER
         MVC   3(1,R3),TCATCDC-DFHUSTCA+TCASYAEA-DFHSYTCA(R2)
         MVC   4(3,R3),TCATCEA-DFHUSTCA+TCASYAEA-DFHSYTCA+1(R2)
         MVC   7(4,R3),CSATODP                STORE TIME
         MVC   11(1,R3),FLAG                  STORE ACTIVE OR SUSPEND
         LA    R3,12(R3)                BUMP THE POINTER TO NEXT ENTRY
         ST    R3,STORENXT              STORE IT FOR FUTURE COMPARE
         B     DCALOOP                  TEST NEXT TRANSACTION ON CHAIN
* FURTHER ANALYSIS CODE MAY BE ADDED AT APPROPRIATE POINTS IN THE FOL-
* LOWING CODE, SUCH AS ECB TESTING FOR SAME AND WHAT TYPE OF ECB IT IS.
* ALSO VARIOUS WAITS SUCH AS 1C 18 ETC FOR TEMP STORAGE AND STORAGE.
* THIS WILL BE THE POINT FOR FURTHER ANALYSIS CODE TO BE ADDED
FOUNDIT  CLC   4(3,R7),TCATCEA-DFHUSTCA+TCASYAEA-DFHSYTCA+1(R2)
         BNE   NOREPLY            UPDATE ENTRY BUT NO CONSOLE MESSAGE
         BAL   R8,TESTMORE        TEST FOR SPECIAL LONG RUNNERS (DHIS)
         MVC   LONGSW1,=C'YES'    SET SWITCH TO IDENTIFY A PROBLEM HAS
         UNPK  WORK1(5),TCAKCTTA-DFHSYTCA(3,R2) BEEN LOCATED TO ASSIST
         OI    WORK1+4,X'F0'      WITH CONSOLE REPLY CONTROL. FILL THE
         TR    WORK1(5),TRANSTAB  MESSAGES WITH TASK NUMBER AND TIMES
         MVC   DSPLYNO1(5),WORK1  AND DATES. TIME2 IS THE ORIGINAL
         L     R1,TCATCPC-DFHSYTCA(,R2)  LOAD POINTER TO TASK ID
         MVC   DSPLYNM1(4),0(R1) MOVE THE TASK NAME INTO THE MESSAGE
         MVC   DSPLYTM1(4),=C'????' MOVE TERM NAME INTO THE MESSAGE
         CLC   TCAFCAAA-DFHUSTCA+TCASYAEA-DFHTCADY(1,R2),=X'01'
         BNE   NOTRMNME
         L     R1,TCAFCAAA-DFHUSTCA+TCASYAEA-DFHTCADY(0,R2)
         LA    R1,0(,R1)           CLEAR HIGH BYTE
         MVC   DSPLYTM1(4),0(R1) MOVE THE TERM NAME INTO THE MESSAGE
NOTRMNME MVC   TIMEFLD(L'DTTMEDIT),DTTMEDIT  TIME THE TASK WAS PLACED
         ED    TIME1,CSATODP     INTO THE TABLE AND THAT TABLE ENTRY
         ED    DATE,CSAJYDP      IS CURRENTLY POINTED TO BY R7.
         MVC   TIME2,TIMEDIT
         ED    TIME2,7(R7)
         UNPK  WORK1(3),TCATCDC-DFHUSTCA+TCASYAEA-DFHTCADY(2,R2)
         TR    WORK1(2),TRANSTAB
         MVC   DSPLYWTC(2),WORK1  LOAD WAIT CODE INTO MESSAGE
         UNPK  WORK1(9),TCATCRS-DFHUSTCA+TCASYAEA-DFHTCADY(5,R2)
         TR    WORK1(9),TRANSTAB  LOAD ADDRESS OF CODE ISSUING WAIT
         MVC   DSPLYWTA(6),WORK1+2
         DFHSC TYPE=GETMAIN,NUMBYTE=180,CLASS=TRANSDATA,               X
               COND=(NO,NOSTOR)
         L     R1,TCASCSA
         MVC   TDMSG1,MSG1       BUILD THE TRANSIENT DATA MESSAGE
         MVC   TDMSG2,MSG2       BY PICKING UP PIECES OF THE CONSOLE
         MVC   TDMSG3,MSG3       MESSAGES AND ADDING CARRIAGE CONTROL
         MVC   CONTROL1,=X'0D15'
         MVC   CONTROL2,=X'0D15'
         MVC   CONTROL3,=X'0D15'
         MVC   CONTROL4,=X'19'
         MVC   TDOAVRL,TDLENGTH
         DFHTD TYPE=PUT,DESTID=OPRP,TDADDR=TDOAVRL
         ST    R1,TCASCSA
         DFHSC TYPE=FREEMAIN     RELEASE TRANSIENT DATA STORAGE
NOSTOR   EQU   *                 THE IDEA ON CONSOLE REPLYS IS TO MAKE
         LA    (R1),LONGMSG1     THE OPERATOR REPLY ONLY ON THE FIRST
         DFHWTO (R1)             REPORT OF TROUBLE, SO LONGSW1 TELLS
         LA    (R1),LONGMSG2     WHEN A COMPLETE PROGRAM EXECUTION HAS
         DFHWTO (R1)             OCCURRED WITH NO TROUBLE FOUND.
         LA    (R1),LONGMSG3     LONGSW3 IS THEN FLIPPED TO AGAIN ASK
         DFHWTO (R1)             FOR A REPLY AT THE NEXT PROBLEM.
         CLC   LONGSW3,=C'CONSOLE REPLY   ' SET SWITCH TO BYPASS THE
         BNE   NOREPLY
* WE MUST TURN OFF RUNAWAY TASK CONTROL FOR OPERATOR REPLY IN CASE HE
* IS NOT LOOKING AT THE CONSOLE. OF COURSE IT MUST BE TURNED BACK ON
* AFTERWARDS
*        MVC   SAVERUN,CSAICRIC             SAVE CICS RUNAWAY INTERVAL
*        MVC   CSAICRIC,=X'00000000'        SET INTERVAL TO ZEROES
*        DFHIC TYPE=WAIT,INTRVAL=01         CAUSE REDISPATCH NORUNAWAY
*        DFHWTO 'XANL2 READ ABOVE AND RESPOND BY HITTING ENTER',R
         MVC   LONGSW3,=C'NO CONSOLE REPLY'
*        MVC   CSAICRIC,SAVERUN             PUT RUNAWAY BACK AS IT WAS
* NOW ZAP THE TASK NUMBER IN THE MATCHING TABLE ENTRY AND THEN BRANCH
* TO STORE THE NEW INFORMATION IN THE NEXT AVAILABLE ENTRY. THIS IS
* DONE TO ELIMINATE THE TABLE FROM WRAPPING ON TOP OF THE MATCHING
* ENTRY. THE TABLE MUST BE LARGE ENOUGH APPROX 2 TIMES YOUR DCA CHAIN
* ENTRIES PLUS A SAFETY MARGIN. IT WOULD BE NICE TO HAVE IT EQUAL TO
* MAX TASK TIMES 2.
NOREPLY  MVC   0(3,R7),=X'FFFFFF'       ZAP THE TASK NO SO IT NEVER
UPDATENT CLC   STORENXT,STOREEND        MATCHES AGAIN AND PUT UPDATED
         BNE   BYPASS4                  INFO INTO THE NEXT TABLE ENTRY
         MVC   STORENXT,STOREBEG
BYPASS4  XR    R3,R3
         L     R3,STORENXT
         MVC   0(3,R3),TCAKCTTA-DFHSYTCA(R2)   STORE TASK NUMBER
         MVC   3(1,R3),TCATCDC-DFHUSTCA+TCASYAEA-DFHSYTCA(R2)
         MVC   4(3,R3),TCATCEA-DFHUSTCA+TCASYAEA-DFHSYTCA+1(R2)
         MVC   7(4,R3),7(R7)                   STORE TIME FROM OLD ENT
         MVC   11(1,R3),FLAG                   STORE ACTIVE OR SUSPEND
         LA    R3,12(R3)                BUMP THE POINTER TO NEXT ENTRY
         ST    R3,STORENXT              STORE IT FOR FUTURE COMPARE
         B     DCALOOP                  TEST NEXT TRANSACTION ON CHAIN
* SET THE SWITCHES FOR CONSOLE REPLY MESSAGE CONTROL. YOU ONLY WANT
* TO HAVE TO REPLY ONCE PER PROBLEM NO MATTER HOW MANY EXECUTIONS
* OF THIS MODULE OCCUR. BUT ONCE YOU COME THROUGH FINDING NO LONG
* RUNNING TASKS, MEANING PROBLEMS ARE CLEARED, THEN SET TO GET THE
* CONSOLE REPLY AGAIN WHEN A NEW PROBLEM IS ENCOUNTERED.
RETURN   CLC   LONGSW1,=C'YES'          THIS SWITCH WAS SET TO NO AT
         BE    BYPASS5                  THE TOP OF THIS PROGRAM
         MVC   LONGSW3,=C'CONSOLE REPLY   '
BYPASS5  EQU   *
*        DFHDC TYPE=TRANSACTION,DMPCODE=LONG
         DFHPC TYPE=RETURN
*   THIS  SECTION ADDS A MORE COMPLICATED TEST FOR TRANSACTIONS FOUND
*   IN THE TABLE  WITH ECBS THAT APPEAR TO BE UNCHANGED. CERTAIN DHIS
*   TRANSACTIONS ARE KNOWN LONG RUNNERS AND MAY BE CAUGHT ON A SHORT
*   RUN INTERVAL OF THIS PROGRAM. WE WILL COMPARE THEIR TIMES AND NOT
*   REPORT THEM UNLESS THEY GO PAST A MUCH LONGER TIME INTERVAL.
*   WE OBTAIN HOURS AND TURN TO MINUTES BY MULTIPLYING BY 60.
*   THEN ADD MINUTES AND SUBTRACT ORIGINAL FROM CURRENT AND COMPARE.
          DS    0F
TESTMORE  XR    R4,R4                 ASSURE CLEAR HIGH BYTES
          XR    R1,R1
          L     R1,TCATCPC-DFHSYTCA(,R2)  LOAD POINTER TO TASK ID
          LA    R4,TABLONG
LONGLOOP  CLC   0(4,R4),=4X'FF'       CHECK FOR TABLE END
          BE    ENDLOOK
          CLC   0(4,R4),0(R1)         CHECK FOR EQUAL TRAN ID AND
          BE    TESTIME               CONTINUE IF EQUAL ELSE:
          LA    R4,4(,R4)             BUMP THE ENTRY BY 4 TO THE NEXT
          B     LONGLOOP              AND LOOK AGAIN
TESTIME   ZAP   TWRK1,CSATODP         TWRK1 = CURRENT TIME IN MINUTES
          SP    TWRK1,CSATODP+1(3)    SUBTRACT ALL MINUTES AND SECONDS
          MVO   TWRK1(4),TWRK1(1)     CRUNCH THE NUMBER WITH SIGN
          ZAP   TWRK2,7(4,R7)         TWRK2 = ORIGINAL TIME IN MINUTES
          SP    TWRK2,8(3,R7)         SUBTRACT ALL MINUTES AND SECONDS
          MVO   TWRK2(4),TWRK2(1)     CRUNCH THE NUMBER WITH SIGN
          CP    TWRK1,TWRK2           COMPARE CURRENT TO ORIGINAL
          BNL   BYPASS6               GO AROUND 24 BUMP IF CURRENT HIGH
          AP    TWRK1,=X'024C'        ADD 24 HOURS IF CURRENT IS LOWER
BYPASS6   MP    TWRK1,=X'060C'        TURN CURRENT HOURS TO MINUTES
          ZAP   TWRK3(3),CSATODP+1(3) USE TWRK3 AS WORK FOR MINUTES
          SP    TWRK3(3),CSATODP+2(2) SUBTRACT ALL SECONDS AND TENTHS
          MVO   TWRK3(3),TWRK3(1)     CRUNCH THE NUMBER WITH SIGN
          AP    TWRK1,TWRK3(3)        ADD MINUTES TO TWRK1 MINUTES
          MP    TWRK2,=X'060C'        TURN ORIGINAL HOURS TO MINUTES
          ZAP   TWRK3(3),8(3,R7)      USE TWRK3 AS WORK FOR MINUTES
          SP    TWRK3(3),9(2,R7)      SUBTRACT ALL SECONDS AND TENTHS
          MVO   TWRK3(3),TWRK3(1)     CRUNCH THE NUMBER WITH SIGN
          AP    TWRK2,TWRK3(3)        ADD MINUTES TO TWRK2 MINUTES
          SP    TWRK1,TWRK2           SUBTRACT ORIGINAL FROM CURRENT
          CP    TWRK1,4(2,R4)         COMPARE FOR SPECIAL TABLE LIMIT
          BL    DCALOOP               IF LESS GO AROUND ELSE
ENDLOOK   B     0(,R8)                SEND NORMAL MESSAGES TO CONSOLE
          LTORG
TABLEXCP DC     C'XANL'
         DC     C'ATMS'             TRANSACTIONS THAT ARE EXCEPTIONS
         DC     C'STOL'             AND SHOULD BE OVERLOOKED GO INTO
         DC     C'ACEN'             THIS TABLE AHEAD OF THE FFFFFF'S
         DC     C'DOCT'
         DC     C'OSAL'             OSAL
         DC     C'RXS1'
         DC     C'CEDF'
         DC     C'CREC'
         DC     C'IPCP'
         DC     C'CDEL'
         DC     C'XXXX'
         DC     X'FFFFFFFF'
TABLONG  DC     C'XHIS',X'015C'
         DC     C'    ',X'000C'
         DC     C'    ',X'000C'
         DC     C'    ',X'000C'
         DC     X'FFFFFFFF'
TDLENGTH DC     XL2'00AA'
DTTMEDIT DS    0CL24                DATE AND TIME EDIT FIELD
         DC     CL1'  '
TIMEDIT  DC     X'2120',C':',X'2020',C':',X'2020',C'.',X'20'
         DC     CL3' ON'
         DC     C' ',X'20202020',C'/',X'202020'
EDIT00   DC     X'4B20202020202120'
TRANSTAB EQU    *-C'0'
         DC     CL16'0123456789ABCDEF'
*     CONSOLE MESSAGES FOLLOW
         DS     0F
LONGMSG1 DC     Y(64)
         DC     B'10000000'
         DC     B'00000000'
MSG1     DS     0CL56
         DC     C'XANL2'
TIMEFLD  DS     CL1
TIME1    DS     CL11                HH:MM:SS.TH
         DS     CL3
DATE     DS     CL9                 BBBYY/DDD
         DC     C' A POTENTIAL PROBLEM EXISTS  '
         DS     0F
LONGMSG2 DC     Y(64)
         DC     B'10000000'
         DC     B'00000000'
MSG2     DS     0CL57
         DC     C'XANL2'
         DC     C' TASK '
DSPLYNM1 DS     CL4
         DC     C' NUMBER '
DSPLYNO1 DS     CL5
         DC     C' AT '
DSPLYTM1 DS     CL4
         DC     C' HAS RUN SINCE '
TIME2    DS     CL11
         DC     C'           '
         DS     0F
LONGMSG3 DC     Y(64)
         DC     B'10000000'
         DC     B'00000000'
MSG3     DS     0CL45
         DC     C'XANL2'
         DC     C' WAITCODE= '
DSPLYWTC DS     CL2
         DC     C' WAIT ISSUED FROM '
DSPLYWTA DS     CL6
         DC     C'                                        '
         COPY   DFHCSADS
         CWA
         DFHTCA CICSYST=YES
         TWA
         ORG    TWA
* TWA AREA IS USED BY MULTIPLE PROGRAMS--BE CAREFUL NOT TO MOVE THINGS
         DS     CL16       LEAVE SPACE FOR RLBANAL5 DATA
FOUNDSW  DS     CL14       SWITCH TO CONTROL CONSOLE REPLY MESSAGE
FLAG     DS     CL1        REPRESENTS ACTIVE OR SUSPEND CHAIN A OR S
LONGSW1  DS     CL3        VALUE YES OR NO TO CONTROL CONSOLE REPLYS
LONGSW2  DS     CL4        VALUE 00000000 OR ONCE TO LOAD POINTERS
LONGSW3  DS     CL16       VALUE CONSOLE REPLY OR NO CONSOLE REPLY
WORK1    DS     CL12       WORK FIELD FOR VARIOUS USES
TWRK1    DS     CL4        TWRK1 = CURRENT TIME TURNED TO MINUTES
TWRK2    DS     CL4        TWRK2 = ORIGINAL TIME TURNED TO MINUTES
TWRK3    DS     CL4        TWRK3 = WORK FOR TIME CALCULATIONS
SAVE13   DS     F          USED FOR CERPAKU CALL FOR SCALAR DATE
SAVEREGS DS     18F        USED FOR CERPAKU CALL FOR SCALAR DATE
SAVERUN  DS     F          SAVE RUNAWAY TIME INTERVAL
SAVEQEA  DS     F          SAVE CURRENT QEA BASE ADDRESS FOR COMPARES
STOREBEG DS     F          SAVE BEG ADDRESS ON THE LONG RUN TABLE
STOREEND DS     F          SAVE END ADDRESS ON THE LONG RUN TABLE
STORENXT DS     F          SAVE THE NEXT ENTRY ADDRESS OF LONG RUN TAB
TESTFLD  DS     CL8        USED TO TRANSPOSE TABLE ENTRIES AND COMPARE
PAIRLIST DS     200CL8     PAIRLIST TABLE FOR FINDING DEADLOCKED TASKS
ENDLIST  DS     0CL1
LONGLIST DS     100CL12    LONGLIST TABLE FOR FINDING LONG RUN TASKS
ENDLONG  DS     0CL1
DCACBAR  EQU    0
         COPY   DFHDCADS
TDOABAR  EQU    1
         COPY   DFHTDOA
CONTROL1 DS     CL2
TDMSG1   DS     CL56
CONTROL2 DS     CL2
TDMSG2   DS     CL57
CONTROL3 DS     CL2
TDMSG3   DS     CL45
CONTROL4 DS     CL1
         END


Robert Bilyeu
Consultant (USA)                                        ) Xephon 1990


