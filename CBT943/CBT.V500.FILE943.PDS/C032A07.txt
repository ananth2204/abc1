 CMS EXECs for monitoring CICS (continued)
This month we look at how to extract and display CICS statistical information
using the CICS XEDIT.
CICS XEDIT
/* CICS XEDIT ***************************************************** */
/*              MAP VSE CICS 1.6 CONTROL BLOCKS                     */
/*          PARAMETERS REQUIRED:    VM-ID OF VSE MACHINE            */
/*                                  CICS CSA ADDRESS                */
/* **************************************************************** */
     ARG . . . . . . . VMID CSA .
/* INITIAL SETTINGS FOR XEDIT                                       */
      'SET PF04 BEFORE QUIT'
      'SET PF16 BEFORE QUIT'
      'SET MSGLINE ON 24 OVERLAY'
      'SET LINEND OFF'
      'SET TOFEOF OFF'
      'SET PREF OFF'
      'CMD OFF'
      CURSOR.1 = 2
      CURSOR.2 = 13
      'CTL % E'
      'CTL . N WHI     H'     /* TITLE & PF-KEYS    */
      'CTL ? N GRE     H'     /* VSE VIRT ADDRESSES */
      'CTL - P GRE REV N'     /* VSE SYS NAME       */
      'CTL ; P YEL REV N'     /* CICS               */
      'CTL # P PIN REV N'     /* DL/1               */
      'CTL ! P TUR REV N'     /* DSA                */
      'CTL < P RED REV N'     /* TASKS              */
      'CTL > P BLU REV N'     /* CURRENT TASK       */
/* REFRESH DISPLAY                                                  */
REFRESH:
      CALL NOFAQE
      SIGNAL CSA
/* REFRESH DISPLAY WITH ADDITIONAL DSA FREE SPACE SCAN              */
REFAQE:
      FRSP = 'FREE SPACE'
      FMAX = '0'
/* FROM CSA                                                         */
CSA:
      VADD = HEXADD(CSA,C8)                     /* CSA OPFL */
      CALL FWORD
      CSAO = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,98)                     /* PAM */
      CALL FWORD
      PAM = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,80)                     /* KCP TCA */
      CALL FWORD
      KCP = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,B8)                     /* TCP TCA */
      CALL FWORD
      TCP = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,8C)                     /* SIT */
      CALL FWORD
      SIT = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,11C)                    /* TRACE TABLE */
      CALL FWORD
      TRC = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,128)                    /* TCT */
      CALL FWORD
      TCT = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,12C)                    /* FCT */
      CALL FWORD
      FCT = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,130)                    /* DCT */
      CALL FWORD
      DCT = SUBSTR(FWORD,3,6)
       VADD = HEXADD(CSA,134)                    /* TS BIT-MAP */
      CALL FWORD
      TSB = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,138)                    /* TS UNIT-TAB */
      CALL FWORD
      TSU = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,4C)                     /* CURRENT TCA */
      CALL FWORD
      TCA = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSA,48)
      CALL FWORD
      SOSI = X2C(SUBSTR(FWORD,1,2))
      IF BITAND(SOSI,'01'X) = '01'X THEN SOSI = 'YES'   /* SOS */
                                    ELSE SOSI = ' NO'
      MAXI = X2C(SUBSTR(FWORD,3,2))
      IF BITAND(MAXI,'02'X) = '02'X THEN MAXI = 'YES'   /* MAXT */
                                    ELSE MAXI = ' NO'
      MAXT = FORMAT(SUBSTR(FWORD,6,2),2,0)      /* MAXT SETTING */
      VADD = HEXADD(CSA,6C)                     /* START-UP TIME */
      CALL FWORD
      STIM = X2D(FWORD)
      VADD = HEXADD(CSA,C0)
      CALL FWORD
      AMXT = FORMAT(X2D(SUBSTR(FWORD,3,2)),2,0) /* AMAXT SETTING */
      AMTA = FORMAT(X2D(SUBSTR(FWORD,7,2)),2,0) /* AMAXT ACCUM */
      VADD = HEXADD(CSA,1C0)
      CALL FWORD
      NMXT = FORMAT(SUBSTR(FWORD,5,3),3,0)      /* TIMES AT MAXT */
      VADD = HEXADD(CSA,1C8)
      CALL FWORD
      MXTA = FORMAT(SUBSTR(FWORD,6,2),2,0)      /* MAXT ACCUM */
      VADD = HEXADD(CSA,1CC)
      CALL FWORD
      TSKN = FORMAT(SUBSTR(FWORD,1,5),5,0)      /* TASKS COUNT */
      VADD = HEXADD(CSA,1CF)
      CALL FWORD
      GETM = FORMAT(SUBSTR(FWORD,1,7),7,0)      /* GETMAINS */
      VADD = HEXADD(CSA,1D3)
      CALL FWORD
      FREM = FORMAT(SUBSTR(FWORD,1,7),7,0)      /* FREEMAINS */
      VADD = HEXADD(CSA,1D7)
      CALL FWORD
      CURL = FORMAT(SUBSTR(FWORD,1,3),3,0)      /* CUSHION RELEASES */
      STQD = FORMAT(SUBSTR(FWORD,5,3),3,0)      /* STOR REQ QUEUED */
      VADD = HEXADD(CSA,1DF)
      CALL FWORD
      PROI = FORMAT(SUBSTR(FWORD,1,3),3,0)      /* PGM INTERRUPTS */
      DMPS = FORMAT(SUBSTR(FWORD,5,3),3,0)      /* STORAGE DUMPS */
      VADD = HEXADD(CSA,144)                    /* DUMP DATASET */
      CALL FWORD
      VADD = SUBSTR(FWORD,3,6)
      VADD = HEXADD(VADD,49)
      CALL FWORD
      DDS = SUBSTR(X2C(FWORD),4,1)
/* FROM CSA OPTIONAL FEATURES LIST                                  */
      VADD = HEXADD(CSAO,34)           /* JCT */
      CALL FWORD
      JCT = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSAO,1B4)          /* PROG CH/ABEND TRACE */
      CALL FWORD
      PCA = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSAO,8)            /* DL/1 ICB */
      CALL FWORD
      ICB = SUBSTR(FWORD,3,6)
      VADD = HEXADD(CSAO,74)           /* START-UP DATE */
      CALL FWORD
       SDAT = SUBSTR(FWORD,3,5)
/* FROM CURRENT TASK'S TCA                                          */
      VADD = D2X(X2D(TCA) - '300')     /* TASK ID  (PCT ENTRY) */
      CALL FWORD
      VADD = SUBSTR(FWORD,3,6)
      CALL FWORD
      TASK = X2C(FWORD)
      VADD = D2X(X2D(TCA) - '304')     /* TASK NUMBER */
      CALL FWORD
      IF TASK = 'CSTP' | TASK = 'CSJC' ,
         THEN TNO = RIGHT(X2C(SUBSTR(FWORD,3,6)),5,' ')
         ELSE TNO = FORMAT(SUBSTR(FWORD,3,5),5,0)
                                       /* PROGRAM  (PPT ENTRY) */
      IF TASK = 'CSTP' | TASK = 'CSKC' THEN PROG = '        '
                                ELSE DO
               VADD = D2X(X2D(TCA) - '268')
               CALL FWORD
               VADD = SUBSTR(FWORD,3,6)
               CALL FWORD
               PROG = X2C(FWORD)
               VADD = HEXADD(VADD,4)
               CALL FWORD
               PROG = PROG||X2C(FWORD)
               PARSE VALUE PROG WITH PROG .
               PROG = RIGHT(PROG,8,' ')
                       END
                                       /* TERMINAL (TCT ENTRY) */
      IF TASK = 'CSKC' THEN TERM = '    '
                       ELSE DO
          VADD = HEXADD(TCA,8)
          CALL FWORD
          VADD = SUBSTR(FWORD,3,6)     /* TCT ENTRY */
          IF VADD = '000000' THEN TERM = '    '
                             ELSE DO
                                  CALL FWORD
                                  TERM = X2C(FWORD)
                                  END
                             END
/* FOLLOW DL/1 POINTERS                                             */
      VADD = HEXADD(ICB,2C)            /* NUCLEUS - FROM ICB */
      CALL FWORD
      NUC = SUBSTR(FWORD,3,6)
      VADD = NUC                       /* SCD - FROM NUCLEUS */
      CALL FWORD
      SCD = SUBSTR(FWORD,3,6)
      VADD = HEXADD(SCD,78)            /* BUFFER POOL - FROM SCD */
      CALL FWORD
      BUF = SUBSTR(FWORD,3,6)
      VADD = HEXADD(SCD,7C)            /* PSB DIRY - FROM SCD */
      CALL FWORD
      PSB = SUBSTR(FWORD,3,6)
      VADD = HEXADD(SCD,84)            /* DMB DIRY - FROM SCD */
      CALL FWORD
      DMB = SUBSTR(FWORD,3,6)
/* FROM PAM                                                         */
      PMAP = HEXADD(PAM,220)           /* PAM MAP1 */
      VADD = HEXADD(PAM,70)            /* PAGE SIZE */
      CALL FWORD
      PGSZ = FORMAT(X2D(FWORD)/1024,1,0)
      VADD = HEXADD(PAM,74)            /* NUMBER OF PAGES */
      CALL FWORD
      PGNUM = FORMAT(X2D(FWORD),4,0)
      DSASZ = PGNUM*PGSZ               /* DSA SIZE */
      VADD = HEXADD(PAM,78)            /* DSA START */
      CALL FWORD
      DSA  = SUBSTR(FWORD,3,6)
       VADD = HEXADD(PAM,84)            /* CUSHION */
      CALL FWORD
      CUS  = FORMAT(X2D(FWORD),4,0)
      CUSP = FORMAT(CUS*100/PGNUM,2,0)
      VADD = HEXADD(PAM,88)            /* AVAILABLE */
      CALL FWORD
      AVA  = FORMAT(X2D(FWORD),4,0)
      IF AVA < 0 THEN AVAP = '  '
                 ELSE AVAP = FORMAT(AVA*100/PGNUM,2,0)
      VADD = PAM                       /* CONTROL SUBPOOL */
      CALL FWORD
      CTL  = FORMAT(X2D(FWORD),4,0)
      CTLP = FORMAT(CTL*100/PGNUM,2,0)
      IF FRSP ¬= ''  THEN DO
         VADD = HEXADD(PAM,4)
         CALL FWORD
         FAQF = SUBSTR(FWORD,3,6)
         VADD = HEXADD(PAM,8)
         CALL FWORD
         FAQL = SUBSTR(FWORD,3,6)
         CALL FAQE
         CTLFS = FSIZ
         CTLFN = FN
         CTLFP= FORMAT(CTLFS*100/(CTL*PGSZ*1024),2,0)'%'
         END
      VADD = HEXADD(PAM,10)            /* T.P. SUBPOOL */
      CALL FWORD
      TEL  = FORMAT(X2D(FWORD),4,0)
      TELP = FORMAT(TEL*100/PGNUM,2,0)
      IF FRSP ¬= ''  THEN DO
         VADD = HEXADD(PAM,14)
         CALL FWORD
         FAQF = SUBSTR(FWORD,3,6)
         VADD = HEXADD(PAM,18)
         CALL FWORD
         FAQL = SUBSTR(FWORD,3,6)
         CALL FAQE
         TELFS = FSIZ
         TELFN = FN
         TELFP= FORMAT(TELFS*100/(TEL*PGSZ*1024),2,0)'%'
         END
      VADD = HEXADD(PAM,20)            /* MIXED SUBPOOL */
      CALL FWORD
      MIX  = FORMAT(X2D(FWORD),4,0)
      MIXP = FORMAT(MIX*100/PGNUM,2,0)
      VADD = HEXADD(PAM,30)            /* ISOLATED SUBPOOL */
      CALL FWORD
      ISO  = FORMAT(X2D(FWORD),4,0)
      ISOP = FORMAT(ISO*100/PGNUM,2,0)
      VADD = HEXADD(PAM,40)            /* SHARED SUBPOOL */
      CALL FWORD
      SHR  = FORMAT(X2D(FWORD),4,0)
      SHRP = FORMAT(SHR*100/PGNUM,2,0)
      IF FRSP ¬= ''  THEN DO
         VADD = HEXADD(PAM,44)
         CALL FWORD
         FAQF = SUBSTR(FWORD,3,6)
         VADD = HEXADD(PAM,48)
         CALL FWORD
         FAQL = SUBSTR(FWORD,3,6)
         CALL FAQE
         SHRFS = FSIZ
         SHRFN = FN
         SHRFP = FORMAT(SHRFS*100/(SHR*PGSZ*1024),2,0)'%'
         END
      VADD = HEXADD(PAM,50)            /* RPL SUBPOOL */
       CALL FWORD
      RPL  = FORMAT(X2D(FWORD),4,0)
      RPLP = FORMAT(RPL*100/PGNUM,2,0)
      IF FRSP ¬= ''  THEN DO
         VADD = HEXADD(PAM,54)
         CALL FWORD
         FAQF = SUBSTR(FWORD,3,6)
         VADD = HEXADD(PAM,58)
         CALL FWORD
         FAQL = SUBSTR(FWORD,3,6)
         CALL FAQE
         RPLFS = FSIZ
         RPLFN = FN
         RPLFP= FORMAT(RPLFS*100/(RPL*PGSZ*1024),2,0)'%'
         END
      VADD = HEXADD(PAM,60)            /* PROGRAM SUBPOOL */
      CALL FWORD
      PGM  = FORMAT(X2D(FWORD),4,0)
      PGMP = FORMAT(PGM*100/PGNUM,2,0)
      VADD = HEXADD(PAM,EC)            /* STORAGE RECOVERIES */
      CALL FWORD
      SRCY = FORMAT(X2D(FWORD),3,0)
/* CALCULATE RUN DURATION    (DOES NOT CATER FOR YEAR-END)          */
      NOWYR  = SUBSTR(DATE(J),1,2)
      NOWDAY = SUBSTR(DATE(J),3,3)
      NOWSEC = NOWDAY*86400 + TIME(S)
      STYR  =  SUBSTR(SDAT,1,2)
      STDAY =  SUBSTR(SDAT,3,3)
      STSEC =  STDAY*86400 + STIM
      RUNT  =  NOWSEC - STSEC
      HH    =  FORMAT(RUNT % 3600,3,0)
      RUNT  =  RUNT // 3600
      MM    =  RIGHT(RUNT % 60,2,0)
      SS    =  RIGHT(RUNT//60,2,0)
      RUNT  =  HH':'MM':'SS
/* DISPLAY                                                          */
RESER 1  N '          %-' VMID' %.',
                    '            CICS MONITOR',
                    '                  'TIME()'  'SUBSTR(DATE(),1,6)
RESER 2  N '%;',
           'TCT      %?'TCT'%;',
           'DURATION'RUNT' %!',
           'SUBPOOL  PAGES PCNT   'FRSP
RESER 3  N '%;',
           'CSA      %?'CSA'%;',
           'DSA SIZE    'DSASZ'K %!',
           'CONTROL   'CTL'  'CTLP'%',
           CTLFN CTLFS CTLFP
RESER 4  N '%;',
           'CSA OPFL %?'CSAO'%;',
           'PAGE SIZE      'PGSZ'K %!',
           'T.P.      'TEL'  'TELP'%',
           TELFN TELFS TELFP
RESER 5  N '%;',
           'TCP TCA  %?'TCP'%;',
           'SOS           'SOSI' %!',
           'MIXED     'MIX'  'MIXP'%',
           '
RESER 6  N '%;',
           'KCP TCA  %?'KCP'%;',
           'CUSHION RELS  'CURL' %!',
           'ISOLATED  'ISO'  'ISOP'%',
           '
RESER 7  N '%;',
           'FCT      %?'FCT'%;',
           'GETMAINS  'GETM' %!',
            'SHARED    'SHR'  'SHRP'%',
           SHRFN SHRFS SHRFP
RESER 8  N '%;',
           'DCT      %?'DCT'%;',
           'FREEMAINS 'FREM' %!',
           'RPL       'RPL'  'RPLP'%',
           RPLFN RPLFS RPLFP
RESER 9  N '%;',
           'TS MAP   %?'TSB'%;',
           'QUEUED REQSTS 'STQD' %!',
           'PROGRAM   'PGM'  'PGMP'%'
RESER 10 N '%;',
           'PAM      %?'PAM'%;',
           'STOR.RECVRYS  'SRCY' %!',
           'AVAILABLE 'AVA'  'AVAP'%'
RESER 11 N '%;',
           'PAM MAP1 %?'PMAP'%;',
           'PGM INTERRPTS 'PROI' %!',
           'CUSHION   'CUS'  'CUSP'%'
RESER 12 N '%;',
           'DSA      %?'DSA'%;',
           'DUMPS         'DMPS' %!',
           'TOTAL     'PGNUM' 100%'
RESER 13 N '%;',
           'TS UTAB  %?'TSU'%;',
           'DUMP DATASET    'DDS' %.'
RESER 14 N '%#',
           'BFPL     %?'BUF'%>',
           'TASK         'TASK' %.',
           'PF1:REFRESH         PF10:DSA FREESPACE'
RESER 15 N '%#',
           'DMB DIRY %?'DMB'%>',
           'TASK-NO     'TNO' %.',
           'PF2:DUMP STORAGE    PF11:VSAM LSR POOL'
RESER 16 N '%;',
           'PCABTT   %?'PCA'%>',
           'TERMINAL     'TERM' %.',
           'PF3:QUIT            PF12:DL/1 BUFFPOOL'
RESER 17 N '%;',
           'TRACE    %?'TRC'%>',
           'PROGRAM  'PROG' %.',
           'PF4:DSA MAP         PF13:DL/1 DMB DIRY'
RESER 18 N '%#',
           'NUCLEUS  %?'NUC'%>',
           'TCA       %?'TCA' %.',
           'PF5:TASKS           PF14:DL/1 PSB DIRY'
RESER 19 N '%#',
           'SCD      %?'SCD'%<',
           'TASKS       'TSKN' %.',
           'PF6:SIT SUFFIXES    PF15:             '
RESER 20 N '%#',
           'DL/1 ICB %?'ICB'%<',
           'AMAXT     'AMXT' ('AMTA') %.',
           'PF7:FILES           PF16:             '
RESER 21 N '%#',
           'PSB DIRY %?'PSB'%<',
           'MAXT      'MAXT' ('MXTA') %.',
           'PF8:DESTINATIONS    PF17:             '
RESER 22 N '%;',
           'JCT      %?'JCT'%<',
           'MAXT IND.     'MAXI' %.',
           'PF9:PC/AB TABLE     PF18:             '
RESER 23 N '%;',
           'SIT      %?'SIT'%<',
           'TIMES AT MAXT 'NMXT' %.'
RESER 24 N
 /* PROCESS RESPONSE                                                 */
DO FOREVER
      CUR S CURSOR.1 CURSOR.2
      READ NOCHANGE TAG
      'EXTRACT ?CURSOR?'
      PULL K1 K2 .
      KEYID = K1||K2
      SELECT
          WHEN KEYID = 'PFK1'  THEN SIGNAL REFRESH
          WHEN KEYID = 'PFK2'  THEN CALL DSTOR
          WHEN KEYID = 'PFK3'  THEN LEAVE
          WHEN KEYID = 'PFK4'  THEN 'CMS DSA'  VMID PMAP PGNUM DSA
          WHEN KEYID = 'PFK5'  THEN 'CMS TSKS' VMID CSA
          WHEN KEYID = 'PFK6'  THEN 'CMS SIT'  VMID SIT
          WHEN KEYID = 'PFK7'  THEN 'CMS FCT'  VMID FCT DMB
          WHEN KEYID = 'PFK8'  THEN 'CMS DCT'  VMID DCT
          WHEN KEYID = 'PFK9'  THEN 'CMS PCAT' VMID PCA
          WHEN KEYID = 'PFK10' THEN SIGNAL REFAQE
          WHEN KEYID = 'PFK11' THEN 'CMS LSR'  VMID FCT
          WHEN KEYID = 'PFK12' THEN 'CMS BFPL' VMID BUF
          WHEN KEYID = 'PFK13' THEN 'CMS DDIR' VMID DMB
          WHEN KEYID = 'PFK14' THEN 'CMS PDIR' VMID PSB
          OTHERWISE NOP
          END
    END
QUIT
EXIT
/* STORAGE DISPLAY SUBROUTINE                                       */
DSTOR:
      IF QUEUED() = 0 THEN RETURN
      PULL . . . ADDRESS
      'CMS EXEC VSTOR' VMID ADDRESS
      RETURN
/* FAQE SCAN SUBROUTINE                                             */
FAQE:
      FSIZ = '0'
      VADD = FAQF
      DO FN = 1 TO 400
          CALL FWORD
          FREE = X2D(SUBSTR(FWORD,5,4))
          IF FREE > FMAX THEN FMAX = FREE
          FSIZ = FSIZ + FREE
          IF VADD = FAQL THEN LEAVE
          VADD = HEXADD(VADD,4)
          CALL FWORD
          VADD = SUBSTR(FWORD,3,6)
          END FN
      FSIZ = FORMAT(FSIZ,6,0)
      FN   = FORMAT(FN,4,0)
      RETURN
/* FAQE CLEAR SUBROUTINE                                            */
NOFAQE:
      FRSP = '' ; FMAX = ''
      CTLFN = '' ; CTLFS = '' ; CTLFP = ''
      TELFN = '' ; TELFS = '' ; TELFP = ''
      SHRFN = '' ; SHRFS = '' ; SHRFP = ''
      RPLFN = '' ; RPLFS = '' ; RPLFP = ''
      RETURN
The routines associated with the above XEDIT which are invoked by PF keys will
be covered in a series of articles in future issues of CICS Update.  Next month
we shall be looking at the Dynamic Storage Area display which is invoked by PF4.

Mike Jones
Senior Systems Programmer
Wavin Building Products (UK)  ) Xephon 1988

