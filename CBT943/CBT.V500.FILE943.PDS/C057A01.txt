CSD batch updates revisited

Ever wondered how to run mass updates on the CSD file?  As
an example, in the process of installing CICS application
packages, we sometimes need to add several pages of PCT and
PPT definitions.  The only way to do this is either to enter the
definitions on-line through CEDA, or generate PCT and PPT
tables and run the migrate function of DFHCSDUP on these
tables.  Most packages normally supply the required PCT/PPT
macro definitions, hence, it would seem that the latter method
is easier.  However, the migrate function can only copy to an
empty group, therefore, we end up with two groups.

Another example occurs after applying certain PTFs.  IBM
supplies the CSD upgrade module (DFHCURDM) but only
updates IBM groups prefixed by DFH.  This is understandable
as IBM has no way of knowing how an installation has
prefixed their copies of IBM groups.  Again, we can enter the
modifications on-line through CEDA or build our own copy of
DFHCURDM to update our copies of the IBM groups.

Up to CICS 2.1.1, base CICS provides a CARDIN facility
where we can store on-line transactions in a PDS member or a
sequential dataset.  At initialization or start-up time, CICS
reads and processes the transactions in the CARDIN dataset.
With the following non-conversational program interface to the
CEDA command processor, I was able to utilize this method to
run my CSD updates batched.

I first generated a PCT and PPT with nothing in them except
the new interface transaction and program.  I then set up a
dummy CICS similar to IVPBATCH or DFHIVMBT from
JCLLIB (part of the CICS installation verification procedure).
The CARDIN dataset contains the CSD updates and a CSMT
SHU,Y as the last transaction to end the dummy CICS run.
The CSMT cannot be replaced by CEMT and is required as the
dummy CICS has no TCT or terminal to shut it down.  The
concept really is similar to batch TSO, and is like a full-
function CEDA except that you run it in batch.  The only
requirement is that the new non-conversational interface
program and transaction has to be defined to CICS through
RDO INSTALL or PCT/PPT.

The two examples cited above (ie installing packages and CSD
upgrade) can then be easily accomplished through the CARDIN
facility and this new non-conversational interface to CEDA.
Packages can be installed through CEDA DEFINE statements
and copied IBM groups can be upgraded through CEDA
ALTER statements.

An additional benefit is that this allows CEDA updates to be
entered from MVS consoles.  The full complement of CEDA
commands is available, eg INSTALL, DELETE, REMOVE,
COPY, RENAME, MOVE etc are available.  Systems
programmers can now reconstruct their CSD either through
batch or through consoles.  The only drawback is that you have
to enter the full CEDA statement on just one 80-byte line as
there is no prompting for options and parameters.

The interface program is straightforward, written in command-
level Assembler.  I have not tested it with VSE but I believe it
should work under VSE as well.  The interface basically works
as a front-end program by linking to the CEDA command
processor DFHEDAP.  Five parameters are passed by the
interface to CEDA in the COMMAREA as follows:

%      Address of the CEDA command (up to 80 bytes in length).

%      Address of the length of the CEDA command.

%      Address of an output flag whether to display CEDA
      response or not.

%      Address of CEDA response.

%      Length of the CEDA response.

PTPCEDA PROGRAM SOURCE

*ASM CICS(NOEPILOG)
PEDA     TITLE 'NON-CONVERSATIONAL INTERFACE TO CEDA COMMAND PROCESSOR'
***********************************************************************
**   TRANSACTION ID      : PEDA                                      **
**   PROGRAM ID          : PTPCEDA                                   **
**   PROGRAM LANGUAGE    : ASSEMBLER                                 **
**   PROGRAM DESCRIPTION : NON-CONVERSATIONAL INTERFACE TO CEDA.     **
**                         FOLLOWS SAME SYNTAX AS CEDA TRANSACTION.  **
**                         CAN BE USED FOR PROCESSING CEDA UPDATES   **
**                         THROUGH CICS CARDIN FACILITY.             **
**                         CAN BE ENTERED THROUGH MVS CONSOLE.       **
***********************************************************************
         COPY DFHCSADS
         COPY DFHTCADS
         COPY DFHTCTTE
         COPY DFHTIOA
**               D Y N A M I C   S T O R A G E                       **
DFHEISTG DSECT
HWORK    DS    H                   HALFWORD WORK AREA.
         DS    0D
CEDAPARM DS    0A                  PARMLIST TO BE SENT TO CEDA:
ACOMMAND DS    A                      ADDRESS OF CEDA COMMAND SOURCE.
ACMDLEN  DS    A                      ADDRESS OF CEDA CMD LENGTH.
AOUTIND  DS    A                      ADDRESS OF OUTPUT FLAG.
AOUTAREA DS    A                      ADDRESS OF RETURNED DATA.
AOUTLEN  DS    A                      ADDRESS OF RETURNED DATA LENGTH.
INBUFF   DS    0CL84               TERMINAL INPUT AREA
UPFRONT  DS    CL4                 'PEDA' - DON'T NEED.
COMMAND  DS    CL80                CEDA COMMAND SOURCE
RESP     DS    0C
RESPSBA  DS    XL(L'SBATBL)
RESPTEXT DS    CL80
OUTAREA  DS    XL1932              AREA RETURNED BY CEDA, ALLOW ENOUGH
*                                  FOR A FULL SCREEN 1920 + 12.
SAVE1    DS    F                   REG 14 SAVE AREA
SAVEADDR DS    A                   SAVE AREA POINTER
SAVEAREA DS    5XL(12*4)           REGISTER SAVE AREAS.
TCTTEAR  EQU   R10                 TCTTE BASE REGISTER
TIOABAR  EQU   R9                  TIOA BASE REGISTER
PTPCEDA  CSECT
         B     PP000
         DC    C'***PTPCEDA V1.0.0 &SYSDATE,&SYSTIME***'
PP000    DS    0H                      HALFWORD ALIGNMENT
         LA    R7,SAVEAREA             INITIALIZE SAVE AREAS POINTER.
         ST    R7,SAVEADDR
         LA    R7,COMMAND              BUILD PARM LIST TO CEDA.
         ST    R7,ACOMMAND
         LA    R7,=AL2(L'COMMAND)
         ST    R7,ACMDLEN
         LA    R7,OUTIND
         ST    R7,AOUTIND
         LA    R7,OUTAREA
         ST    R7,AOUTAREA
         LA    R7,=AL2(L'OUTAREA)
         ST    R7,AOUTLEN
**                  M A I N   L I N E   L O G I C                    **
         DS    0H
         MVI   COMMAND,C' '           BLANK OUT COMMAND AREA.
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
*                                     GET PEDA COMMAND FROM TIOA.
         EXEC CICS ADDRESS CSA(R2)
*                                     ESTABLISH ADDRESSABILITY FOR:
         USING DFHCSADS,R2                CSA
         L     TCACBAR,CSACDTA            TCA
         L     TCTTEAR,TCAFCAAA           TCTTE
         L     TIOABAR,TCTTEDA            TIOA
         LH    R1,TIOATDL             TERMINAL DATA LENGTH
         LTR   R1,R1                  TEST IF ZERO
         BZ    PP030                  YES - RETURN
         CLI   TIOADBA,X'11'          TEST FOR SBA
         BNE   PP010                  NOT EQUAL
         SH    R1,=H'4'               SUBTRACT SBA LENGTH
         LA    R2,TIOADBA+3           IGNORE SBA HEADER
         B     PP020
PP010    EQU   *
         BCTR  R1,0                   TIOA LENGTH MINUS 1
         LA    R2,TIOADBA
PP020    EQU   *
         EX    R1,MVTIOA              MOVE TIOA (LEN=R1)
*                                     PASS COMMAND TO CEDA.
         EXEC CICS LINK PROGRAM('DFHEDAP') COMMAREA(CEDAPARM)
*  THE FOLLOWING CODE SENDS RESPONSE FROM CEDA BACK TO THE TERMINAL.  *
         MVC   HWORK,=AL2(L'COMMAND)  SET LENGTH.
         EXEC CICS SEND FROM(INBUFF) LENGTH(HWORK) ERASE
         LA    R12,SBATBL+L'SBATBL    SET BUFFER ADDRESS
         LA    R9,SBANUM-1
         LA    R7,OUTAREA             POINT TO CEDA'S RESPONSE.
         LH    R6,0(,R7)              LOAD LENGTH OF TRANSLATOR MSG.
         AH    R7,=H'6'               BUMP TO START OF TEXT, IF ANY.
         SH    R6,=H'6'               SUBTRACT LENGTH OF PREFIX
         BAL   R14,SENDMSG
         AR    R7,R6                  BUMP TO EXECUTION MESSAGE.
         LH    R6,0(,R7)              LOAD LENGTH OF EXECUTION MSG.
         AH    R7,=H'6'               BUMP TO START OF TEXT, IF ANY.
         SH    R6,=H'6'               SUBTRACT LENGTH OF PREFIX
         BAL   R14,SENDMSG
PP030    EQU   *
         EXEC CICS RETURN
MVTIOA   MVC   INBUFF(0),0(R2)
*           PROCESS CEDA RESPONSE AND SEND BACK TO TERMINAL.          *
SENDMSG  DS    0H
         ST    R14,SAVE1              SAVE RETURN REGISTER
         LTR   R6,R6                  TEST FOR MESSAGES
         BNP   PP190                  NONE - RETURN
         LR    R5,R7                  ADDR OF CEDA RESPONSE
         LR    R4,R6                  LENGTH OF CEDA RESPONSE
PP100    EQU   *
         LTR   R4,R4                  TEST FOR MESSAGES
         BZ    PP180                  NO MORE - SEND ENDED MESSAGE
         CLI   0(R5),X'15'            NEW LINE CHARACTER
         BNE   PP110                  NO - CONTINUE
         LA    R5,1(,R5)              BUMP TO NEXT CHARACTER
         BCTR  R4,0                   LENGTH MINUS 1
         B     PP100                  GOBACK TO TEST FOR MESSAGES
PP110    EQU   *
         SR    R2,R2                  INITIALIZE WORK REG
         LR    R8,R5                  ADDR OF CEDA LESS NEW LINE CHAR
PP120    EQU   *
         CLI   0(R5),X'15'            BUILD MESSAGES FROM CEDA
         BE    PP130                        RESPONSE SEPARATED
         LTR   R4,R4                        BY NEW LINE CHARACTER
         BZ    PP130                        ..
         LA    R2,1(R2)                     ..
         LA    R5,1(R5)                     ..
         BCTR  R4,0                         ..
         B     PP120                        ..
PP130    EQU   *
         STH   R2,HWORK               LENGTH OF MESSAGE LINE
         CLI   TCTTETT,TCTTET37       TEST IF REMOTE 3277
         BE    PP140                  YES - BYPASS SEND MESSAGE
         EXEC CICS SEND FROM(0(,R8)) LENGTH(HWORK)
         B     PP100                  GOBACK FOR NEXT MESSAGE
PP140    EQU   *
         MVC   RESPSBA,0(R12)         SET BUFFER ADDRESS
         LH    R1,HWORK               LENGTH OF SENT MESSAGE
         BCTR  R1,0                          MINUS 1
         EX    R1,MVRESP              MOVE MESSAGE
         LH    R1,HWORK               LENGTH OF SENT MESSAGE AGAIN
         AH    R1,YSBATBL                    PLUS LENGTH OF SBA
         STH   R1,HWORK               SAVE AS NEW LENGTH
         EXEC CICS SEND FROM(RESP) LENGTH(HWORK)
         BCTR  R9,0
         LTR   R9,R9
         BNZ   PP150
         LA    R12,SBATBL
         LA    R9,SBANUM
         EXEC CICS SEND FROM(PENDMSG) LENGTH(YPENDLEN)
         EXEC CICS RECEIVE SET(R1) LENGTH(HWORK)
         EXEC CICS SEND CONTROL ERASE
         B     PP100
PP150    EQU   *
         LA    R12,L'SBATBL(R12)
         B     PP100
PP180    EQU   *
         CLI   TCTTETT,TCTTET37
         BNE   PP190
         MVC   RESPSBA,0(R12)
         MVC   RESPTEXT(L'LASTMSG),LASTMSG
         MVC   RESPTEXT+L'LASTMSG(L'SBATBL),L'SBATBL(R12)
         EXEC CICS SEND FROM(RESP) LENGTH(YLASTLEN)
PP190    EQU   *
         L     R14,SAVE1
         BR    R14
MVRESP   MVC   RESPTEXT(1),0(R8)
**            D A T A   C O N S T A N T S                            **
PTPCEDA  CSECT
LENCMD   DC    AL2(L'COMMAND)
YPENDLEN DC    Y(PENDLEN)
YSBATBL  DC    Y(L'SBATBL)
YLASTLEN DC    Y(L'LASTMSG+L'SBATBL*2)
OUTIND   DC    XL1'00'                  RETURN OUTPUT TO THIS PROGRAM
SBATBL   EQU   *,4
         DC    X'11404013',X'11C15013',X'11C26013',X'11C3F013'
         DC    X'11C54013',X'11C65013',X'11C76013',X'11C8F013'
         DC    X'114A4013',X'114B5013',X'114C6013',X'114DF013'
         DC    X'114F4013',X'11505013',X'11D16013',X'11D2F013'
         DC    X'11D44013',X'11D55013',X'11D66013',X'11D7F013'
         DC    X'11D94013',X'115A5013',X'115B6013'
SBALEN   EQU   *-SBATBL
SBANUM   EQU   SBALEN/L'SBATBL
PENDMSG  DS    0C
         DC    X'115CF0'
         DC    C'MESSAGE PENDING HIT ENTER'
         DC    X'13'
PENDLEN  EQU   *-PENDMSG
LASTMSG  DC    C'**PEDA ENDED**'
NL       EQU   X'15'                    NEW LINE
         LTORG
         END

PCT ENTRY

PCTPP    TITLE 'TEST PCT GENERATED FOR CARDIN OF DEDA'
         DFHPCT TYPE=INITIAL,SUFFIX=PP
         DFHPCT TYPE=ENTRY,            UPPER CASE APPLICATION         C
               TRANSID=PEDA,                                          C
               PROGRAM=PTPCEDA,                                       C
               TRNPRTY=255,                                           C
               DTB=YES
         DFHPCT TYPE=FINAL
         END   DFHPCTBA

PPT ENTRY

PPTPP    TITLE 'TEST PPT GENERATED FOR TESTING CARDIN OF DEDA'
         DFHPPT TYPE=INITIAL,SUFFIX=PP
         DFHPPT TYPE=ENTRY,PROGRAM=PTPCEDA
         DFHPPT TYPE=FINAL
         END   DFHPPTBA

SAMPLE JCL FOR BATCH CICS RUN

//jobname  JOB (acct-info),programmer-name,
//             CLASS=A,MSGCLASS=X,NOTIFY=tso-userid
//*********************************************************************
//*     THIS JOB CAN BE RUN TO UPDATE THE CSD FILE THROUGH A DUMMY
//*     CICS RUN WITH THE CEDA UPDATE STATEMENTS AS PART OF CARDIN.
//*     FOLLOWING ARE THE STEPS IN THIS JOB:
//*     1.  DEFINE VSAM DFHINTRA AND DFHRSD WORK FILES. CHANGE WORK
//*         VOLUME IN DEFINE STEP TO YOUR WORK VOLUME ID.
//*     2.  INITIALIZE DFHRSD WORK FILE
//*     3.  UNBLOCK CICS DUMMY RUN UPDATES
//*     4.  BATCH CICS RUN (IN-STREAM PROCEDURE) TO UPDATE CSD
//*         THROUGH CARDIN FACILITY
//*     5.  DELETE VSAM DFHINTRA AND DFHRSD WORK FILES
//*     TO RUN THIS JOB, SIMPLY CHANGE THE TRG AND CSD PARAMETERS
//*     ON THE CICS INSTREAM PROCEDURE AS:
//*     TRG = THE HIGH LEVEL QUALIFIER OF THE TARGET LIBRARIES
//*     CSD = FULL DSN OF THE CSD FILE THAT HAS TO BE UPGRADED
//*********************************************************************
//CICS    PROC TRG='target-library-prefix',
//             CSD='full-DSN-of-CSD-file'
//*--------------------------------------------------------------------
//C       EXEC PGM=DFHSIP,REGION=2048K,
//             PARM=('SIT=6$,PCT=PP,PPT=PP,GRPLIST=DFHLIST',
//             'TS=(,0),DBP=1$,FCT=2$,DUMPDS=A,')
//*--------------------------------------------------------------------
//*     START-UP OVERRIDE PARAMETERS:
//*     SIT=6$            BASE CICS
//*     PCT=PP            REQUIRED IF PCT/PPT REQUIREMENT FOR PEDA/
//*     PPT=PP                     PTPCEDA NOT RDO INSTALLED.
//*     GRPLIST=DFHLIST   SUPPLIED IBM GROUPS
//*     TS=(,0)           BASE CICS
//*     DBP=1$            BASE CICS
//*     FCT=6$            BASE CICS - INCLUDE FCT ENTRY FOR DFHCSD
//*     DUMPDS=A          BASE CICS
//*--------------------------------------------------------------------
//STEPLIB  DD  DSN=&TRG..LOADLIB1,DISP=SHR
//DFHRPL   DD  DSN=&TRG..LOADLIB2,DISP=SHR
//         DD  DSN=&TRG..LOADLIB,DISP=SHR
//         DD  DSN=loadlib-containing-PTPCEDA,DISP=SHR
//DFHINTRA DD  DSN=CICS.WORK.DFHINTRA,DISP=SHR
//DFHRSD   DD  DSN=CICS.WORK.DFHRSD,DISP=SHR
//DFHCSD   DD  DSN=&CSD,DISP=SHR
//DFHDMPA  DD  DSN=&&DFHDUMPA,UNIT=SYSDA,DISP=(,DELETE,DELETE),
//             SPACE=(CYL,5)
//DFHAUXT  DD  DSN=&&TRACEDS,UNIT=SYSDA,DISP=(,DELETE,DELETE),
//             SPACE=(CYL,5)
//DFHSTM   DD  DSN=&&STATA,UNIT=SYSDA,DISP=(,DELETE,DELETE),
//             SPACE=(CYL,5),DCB=(RECFM=VB,BLKSIZE=1024)
//DFHSTN   DD  DSN=&&STATB,UNIT=SYSDA,DISP=(,DELETE,DELETE),
//             SPACE=(CYL,5),DCB=(RECFM=VB,BLKSIZE=1024)
//PRINTER  DD  SYSOUT=*,DCB=BLKSIZE=125
//LOGUSR   DD  SYSOUT=*
//MSGUSR   DD  SYSOUT=*
//PLIMSG   DD  SYSOUT=*
//DFHSNAP  DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//        PEND
//*********************************************************************
//DEF     EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  DELETE   CICS.WORK.DFHINTRA    CLUSTER
  DELETE   CICS.WORK.DFHRSD      CLUSTER
  SET      LASTCC = 0
  SET      MAXCC  = 0
  DEFINE   CLUSTER(NAME(CICS.WORK.DFHINTRA)                  -
                   RECSZ(4089,4089)                          -
                   REC(100)                                  -
                   NIXD                                      -
                   CISZ(4096)                                -
                   VOLUMES(CICS01)        /* work volume */  -
                   SHR(2 3))                                 -
           DATA   (NAME(CICS.WORK.DFHINTRA.DATA))
  DEFINE   CLUSTER(NAME(CICS.WORK.DFHRSD)                    -
                   KEYS(22 0)                                -
                   INDEXED                                   -
                   RECSZ(400 1000)                           -
                   REC(100 100)                              -
                   CISZ(2048)                                -
                   VOLUMES(CICS01)        /* work volume */  -
                   SHR(2))                                   -
           DATA   (NAME(CICS.WORK.DFHRSD.DATA))              -
           INDEX  (NAME(CICS.WORK.DFHRSD.INDEX))
//*********************************************************************
//RSD     EXEC PGM=IDCAMS,COND=(0,NE)
//SYSPRINT DD  SYSOUT=*
//RSD      DD  DSN=CICS.WORK.DFHRSD,DISP=SHR
//SYSIN    DD  *
  REPRO INFILE(RSDREC) OUTFILE(RSD)
//RSDREC   DD  *
ACTL 0001
//**********************************************************************
//GEN     EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//SYSUT2   DD  DSN=&&CARDIN,DISP=(,PASS,DELETE),
//             UNIT=SYSDA,SPACE=(80,(50,50)),
//             DCB=(RECFM=F,BLKSIZE=80,LRECL=80)
//SYSUT1   DD  *
PEDA DEFINE TRAN (PEDA)    GROUP(PEDA) PROGRAM(PTPCEDA)            \
PEDA VIEW   TRAN (PEDA)    GROUP(PEDA)                             \
PEDA DEFINE PROG (PTPPEDA) GROUP(PEDA) LANGUAGE(ASSEMBLER)         \
PEDA VIEW   PROG (PTPPEDA) GROUP(PEDA)                             \
PEDA ADD    GROUP(PEDA)    LIST(your-list)                         \
PEDA EXPAND GROUP(PEDA)                                            \
..                                                                 \
..   any other CSD update statements, eg ALTER, RENAME,            \
..   COPY, MOVE, DELETE, REMOVE, etc.                              \
..                                                                 \
..   The CSMT statement below is required to automatically         \
..   shutdown this dummy CICS run at end of CSD update.            \
..                                                                 \
CSMT SHU,Y                                                         \
//*********************************************************************
//CSD     EXEC CICS,COND=(0,NE)
//C.CARDIN DD  DSN=&&CARDIN,DISP=(OLD,DELETE,DELETE)
//*********************************************************************
//DEL     EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
  DELETE   CICS.WORK.DFHINTRA              CLUSTER
  DELETE   CICS.WORK.DFHRSD                CLUSTER
/*



Pedronilo T Perez
Technical Consultant
RCG/Vectron Systems Inc (USA)


