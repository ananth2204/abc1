Model Terminal Support without CICS/ESA 3.2

CICS/ESA 3.2 introduced the ability to use a new VTAM 3.3
facility called Model Terminal Support (MTS). This permits a
VTAM application (like CICS) to obtain certain information
specified in the VTAM LU definitions when the LOGON exit
is driven. In  CICS/ESA 3.2, MTS can be used to select the
terminal model name and pass the printer names to the auto-
install program. For many users of auto-install this will greatly
simplify the logic required in the auto-install exit. With
CICS/ESA 3.2 the exit now only needs to determine the
TERMID to be assigned - the rest of the information resides in
the VTAM LU definitions.

Although we are currently a CICS/MVS and CICS/ESA 3.1.1
shop, we have been taking advantage of MTS for quite some
time now, accomplishing this by extracting the MTS and
associated printer information directly from the CINIT_RU that
is passed to the auto-install exit. Many CICS installations are
likely to be using the above releases for quite some time, as
any remaining macro applications, BTAM support, etc will
require a pre-3.2 release of CICS for support. However, this
does not mean that you cannot take advantage of MTS today.
Your existing auto-install exit program can be easily modified
to take advantage of both the MTS and associated LU support
that was introduced with VTAM 3.3. The macro shown below
will parse the CINIT_RU and extract the LU definition control
vector information, which you can then use to select the auto-
install model and assign the printer and alternate printer
destinations.

To add this support to your existing auto-install exit program,
include the following in the working storage section:

DFHEISTG DSECT
         .
         .
MTSRSA   DS    4F                  RSA FOR ADCMTS CALL
MTSPLST  DS    CL24                PLIST AREA FOR ADCMTS CALL

The first area is a register save area for use by the macro.
Registers 14, 15, 0, and 1 are used. The second area is for the
parameter list that will contain the model name and associated
LU names that were passed to CICS by VTAM in the
CINIT_RU.

At a point prior to where you select the model from the model
list, and the print destinations, insert the following:

***      INVOKE MTS MACRO TO EXTRACT LU DEFINITION
***      CONTROL VECTOR INFORMATION FROM CINIT_RU.
         ADCMTS RSA=MTSRSA,
                OUTLIST=MTSPLST,
                CINIT=INPARM4

From the above you can see that RSA=MTSRSA addresses the
register save area defined in working storage, and
OUTLIST=MTSPLST addresses the parameter list also defined
in working storage. CINIT=INPARM4 should address the field
in the parameter list passed to the exit at install time that points
to the CINIT_RU. INPARM4 is the name of this field in the
DSECT supplied in the default exit DFHZATDX provided by
IBM. If you used something other than INPARM4 for this field
in your exit program, change the name specified in the CINIT
parameter.

Following execution of the macro, the parameter list
MTSPLST will have the following format:

o      X'00' - model name

o      X'08' - associated LUNAME 1

o      X'10' - associated LUNAME 2.

You should now search the model list passed to the exit
program for the model name extracted by the ADCMTS macro
and, if found, return this name to CICS as the selected model.
If the LU definition for the device being installed does not
point to a model name table entry this area will contain spaces
(X'40's).

To assign printer destinations is a little extra work. The
ASLENT entry pointed to by the LU definition contains the
NETNAME, not the terminal-id, of the associated printer(s),
and in fact what is passed in the CINIT_RU is the 'fully-
qualified' network name of the printer(s). The code supplied in
the ADCMTS macro will strip off the NETID and pass just the
NETNAME of the associated printer(s), but you will have to
supply the code in your auto-install program to derive the
printer TERMIDs from the supplied NETNAMEs. If you
cannot derive the TERMID directly from the NETNAME a
way to obtain the TERMID using the NETNAME would be to
use the following:

         EXEC  CICS INQUIRE
               NETNAME(MTSPLST+8)
               TERMINAL(PRTTOSEL)
               NOHANDLE
         CLC   EIBRESP,DFHRESP(TERMIDERR)
         BE    NOPRTTO

This will locate the terminal definition in the TCT for the
NETNAME contained in MTSPLST plus 8 bytes (the first
printer name in the ASLENT entry) and return the
corresponding terminal-id in PRTTOSEL, which is the name of
the PRINTTO field in the output parameter list from the
DSECT found in the IBM-supplied version of DFHZATDX. If
you used a different name for this field that is the name you
should specify for TERMINAL. Also, you should check for
TERMIDERR (as shown above) to deal with the possibility
that the ASLENT definition for the LU specified a printer that
is not defined to CICS.

If you specified an alternate printer name in the ASLENT entry
as well, you can obtain the TERMID for it in a similar manner,
like this:

         EXEC  CICS INQUIRE
               NETNAME(MTSPLST+16)
               TERMINAL(ALTPTSEL)
               NOHANDLE
         CLC   EIBRESP,DFHRESP(TERMIDERR)
         BE    NOALTPTO

As with PRTTOSEL, ALTPTSEL is the name of the alternate
PRINTTO field in the output parameter list from the IBM-
supplied version of DFHZATDX. And again, you should check
for TERMIDERR, since it is possible that only one printer was
associated with this LU definition, or the printer named in the
ASLENT definition is not defined to CICS.

If you choose to implement this, you may want to research
what is required on the VTAM side, and, if you have CICS 3.2
in house, how that release will implement this support. The
CICS documentation regarding the VTAM requirements is not
very detailed, so you will want to reference the VTAM
documentation in order to have a better understanding of how
this process works. The following references will provide some
guidance:

o      SC33-60665 CICS/ESA V3.2.1 Customization Guide.
      Chapter 3.5: The User-Replaceable Program For
      Automatic Installation of Terminals.

o      SC31-6412 VTAM V3.3 Resource Definition Reference.
      Chapter 6: User-defined Tables and Filters.

Even if you are using (or installing) CICS 3.2 already, you
may want to keep this sample program as a reference for
parsing the CINIT_RU. This can come in handy regardless of
the release of CICS you are using, for example when
diagnosing log-on problems. The following manual explains (in
excruciating detail) the structure of many of the SNA-
architected areas used by the products that implement SNA
(such as VTAM):

o      LY43-0081 SNA Network Product Formats. Chapters 5
      and 8. Chapter 5: Request/Response Units (CINIT).
      Chapter 8: Common Fields (Control Vectors).

Since we will likely continue to be a CICS/MVS shop for quite
some time, the ability to use MTS in all our CICS regions is
invaluable. It has permitted us to reduce the size of our auto-
install user program by half (because we can now eliminate the
model selection code), and now permits us to use
PRINTTO/ALTPRTO support for auto-installed terminals
without the need to maintain a terminal/printer file or table. I
suspect that many CICS installations using auto-install will be
able to take advantage of this.


THE ADMCTS MACRO

         MACRO
&LABEL   ADCMTS  &RSA=,&OUTLIST=,&CINIT=
.**********************************************************************
.* MACRO NAME = ADCMTS                                                *
.* DESCRIPTIVE NAME = ADC MACRO FOR VTAM 3.3 MODEL TERMINAL SUPPORT.  *
.* STATUS = CICS 2.1.1                                                *
.*          VTAM 3.3                                                  *
.* FUNCTION = ADCMTS CAN BE USED BY THE AUTOINSTALL EXIT TO EXTRACT   *
.*            FROM THE CINIT_RU THE TERMINAL MODEL NAME AND           *
.*            ASSOCIATED LU NAMES (IF PRESENT). THE MODEL NAME CAN    *
.*            THEN BE USED TO SEARCH THE MODEL LIST PASSED BY CICS    *
.*            IN ORDER TO SELECT THE MODEL FOR THIS TERMINAL. THE     *
.*            ASSOCIATED LU NAME(S) CAN BE USED AS PRINTTO AND        *
.*            ALTPRT DESTINATIONS. IN THIS WAY ALL TERMINAL-RELATED   *
.*            DEFINITIONS ARE DONE AT THE VTAM LEVEL; ALL THE EXIT    *
.*            NEEDS TO DO AT INSTALL TIME IS ASSIGN THE TERMID BASED  *
.*            ON THE NETNAME. THIS IS HOW CICS ITSELF WILL WORK       *
.*            BEGINNING WITH CICS/ESA 3.2.                            *
.*              RSA=     THE NAME OF A 4-WORD AREA IN WORKING (EIS)   *
.*                       STORAGE THAT IS TO BE USED AS A REGISTER     *
.*                       SAVE AREA.                                   *
.*              OUTLIST= THE NAME OF A 24 BYTE AREA IN WORKING (EIS)  *
.*                       STORAGE THAT IS TO CONTAIN THE MODEL NAME    *
.*                       AND ASSOCIATED LU NAME(S). THE MODEL NAME    *
.*                       WILL BE PLACED IN BYTES 1 - 8; THE ASSOCIATED*
.*                       LU NAME(S) WILL BE PLACED IN BYTES 9 - 16    *
.*                       (AND 17 - 24) RESPECTIVELY. IF THESE VALUES  *
.*                       CANNOT BE FOUND THESE FIELDS WILL BE SET     *
.*                       TO BLANKS.                                   *
.*              CINIT=   THE NAME OF THE FIELD PASSED TO THE          *
.*                       AUTOINSTALL EXIT THAT CONTAINS THE LENGTH    *
.*                       AND ADDRESS OF THE CINIT_RU.                 *
.* NOTES =  1) THIS MACRO USES REGISTERS 14, 15, 0 AND 1.             *
.**********************************************************************
.* * *   VALIDATE PRESENCE OF KEYWORDS.
         AIF   ('&RSA' NE '').RSAOK
         MNOTE 8,'''RSA= KEYWORD IS REQUIRED'
         MEXIT
.RSAOK   ANOP
         AIF   ('&CINIT' NE '').CINLOK
         MNOTE 8,'''CINIT= KEYWORD IS REQUIRED'
         MEXIT
.CINLOK  ANOP
         AIF   ('&OUTLIST' NE '').OUTLOK
         MNOTE 8,'''OUTLIST= KEYWORD IS REQUIRED'
         MEXIT
.OUTLOK  ANOP
         GBLC  &RSAA
         GBLC  &CINITA
         GBLC  &OUTLA
&RSAA    SETC  '&RSA'
&CINITA  SETC  '&CINIT'
&OUTLA   SETC  '&OUTLIST'
*        E X T R A C T    M T S    D A T A    F R O M    C I N I T
*        SAVE CALLER'S REGISTERS, ADDRESS AND INITIALIZE
*        WORKING STORAGE.
         STM   14,1,&RSAA          SAVE WORK REGISTERS
         L     14,&CINITA          ADDRESS CINIT_RU
         MVI   &OUTLA,X'40'        SET BLANK IN OUTLIST FIELD
         MVC   &OUTLA+1(L'&OUTLA-1),&OUTLA
*                                  PROPAGATE BLANK ACROSS REST OF FIELD
*        POINT PAST FM DATA AND BIND IMAGE. WE ARE ONLY
*        INTERESTED IN THE CONTROL VECTORS.
*        REGISTERS USED: REG0  - END-OF-DATA POINTER
*                        REG1  - WORK
*                        REG14 - CURRENT POSITION POINTER
*                        REG15 - WORK
         LA    0,2(,14)            ADDRESS START OF CINIT_RU
         AH    0,0(,14)            POINT TO FIRST BYTE PAST CINIT_RU
         LA    14,2(,14)           ADDRESS START OF BIND IMAGE
         AH    14,10(,14)          POINT PAST BIND
         LA    14,12(,14)              AND FM DATA
*        WE SHOULD BE POINTING AT THE SLU TYPE,
*        WHICH FOR AUTOINSTALL IS ALWAYS AN LU (X'F3').
*        AT THIS POINT: REG0  - FIRST BYTE PAST CINIT_RU
*                       REG1  -
*                       REG14 - FIRST BYTE PAST BIND IMAGE IN CINIT_RU
*                       REG15 -
         CLI   0(14),X'F3'         ARE WE POSITIONED CORRECTLY?
         BNE   Z9&SYSNDX           ..NO  - QUIT
         XR    15,15               CLEAR
         IC    15,1(,14)           PICK UP SLU NAME LENGTH
         LA    14,2(15,14)         POINT PAST SLU
         LA    14,2(,14)           POINT PAST "RETIRED" BYTES
         IC    15,0(,14)           PICK UP USER DATA LENGTH
         LA    14,1(15,14)         POINT PAST USER DATA
         LH    15,0(,14)           LOAD FORMAT/CHARACTERISTICS LENGTH
         LA    14,2(15,14)         POINT PAST SESSION CHARACTERISTICS
         IC    15,0(,14)           PICK UP LENGTH OF CRYPT. KEY
         LA    14,1(15,14)         POINT PAST CRYPT. KEY
*        WE SHOULD BE POINTING AT THE FIRST CONTROL VECTOR.
*        WE ARE LOOKING FOR THE LU DEFINITION CONTROL VECTOR
*        (X'2F'), SO WE WILL SEARCH THE CINIT_RU EITHER UNTIL
*        WE FIND IT OR REACH THE END.
*        AT THIS POINT: REG0  - FIRST BYTE PAST CINIT_RU
*                       REG1  -
*                       REG14 - FIRST CONTROL VECTOR
*                       REG15 - WORK
Z1&SYSNDX DS    0H
         CLR   14,0                DONE?
         BNL   Z9&SYSNDX           ..YES - QUIT
         CLI   0(14),X'2F'         LU DEFINITION CONTROL VECTOR?
         BE    Z2&SYSNDX           ..YES - GO PROCESS IT
         IC    15,1(,14)           PICK UP CONTROL VECTOR LENGTH
         LA    14,2(15,14)         POINT PAST CONTROL VECTOR
         B     Z1&SYSNDX           LOOP
*        WE SHOULD BE POINTING AT THE LU DEFINITION CONTROL VECTOR.
*        THERE ARE FOUR POSSIBLE SUBFIELDS:
*            X'80' - ADDITIONAL MODE CHARACTERISTICS.
*            X'81' - MODEL TERMINAL NAME.
*            X'82' - ASSOCIATED LU NAME(S).
*        AT THIS POINT: REG0  - FIRST BYTE PAST CINIT_RU
*                       REG1  -
*                       REG14 - START OF LU DEFINITION CONTROL VECTOR.
*                       REG15 - WORK
Z2&SYSNDX DS   0H
         IC    15,1(,14)           PICK UP CONTROL VECTOR LENGTH
         LA    0,2(15,14)          RESET END-OF-DATA POINTER
         IC    15,2(,14)           PICK UP LENGTH OF FIRST SUBFIELD
         LA    14,2(15,14)         POINT PAST FIRST SUBFIELD
         CLR   14,0                MORE THAN ONE SUBFIELD PRESENT?
         BNL   Z9&SYSNDX           ..NO  - QUIT
*        IF THERE IS A MODEL NAME SUBFIELD PRESENT, COPY IT
*        TO THE DESIGNATED MODEL NAME FIELD.
*        AT THIS POINT: REG0  - FIRST BYTE PAST LU DEF. CONTROL VECTOR
*                       REG1  -
*                       REG14 - FIRST BYTE PAST FIRST SUBFIELD.
*                       REG15 - WORK
         CLI   1(14),X'81'         MODEL TERMINAL NAME PRESENT?
         BNE   Z3&SYSNDX           ..NO  - CONTINUE
         IC    15,0(,14)           PICK UP LENGTH OF MTS FIELD
         SH    15,=H'3'            SUBTRACT L+T+1
         EX    15,Z8&SYSNDX+0      COPY MODEL NAME TO COMMAREA
         IC    15,0(,14)           PICK UP LENGTH OF MTS FIELD
         LA    14,0(15,14)         POINT PAST MTS SUBFIELD
         CLR   14,0                ANOTHER SUBFIELD PRESENT?
         BNL   Z9&SYSNDX           ..NO  - QUIT
*        EXTRACT THE ASSOCIATED LU NAME, IF PRESENT. THIS IS A
*        FULLY-QUALIFIED NETWORK NAME; WE WILL SIMPLY TAKE THE
*        LOWEST-LEVEL QUALIFIER IN THE NAME, AND USE IT AS THE
*        PRINTTO DESTINATION.
*        AT THIS POINT: REG0  - FIRST BYTE PAST LU DEF. CONTROL VECTOR
*                       REG1  -
*                       REG14 - FIRST BYTE PAST FIRST SUBFIELD.
*                       REG15 - WORK
Z3&SYSNDX DS   0H
         CLI   1(14),X'82'         ASSOCIATED LU DEFINED?
         BNE   Z9&SYSNDX           ..NO  - QUIT
         IC    15,4(,14)           PICK UP LENGTH OF LUNAME
         LA    1,4(15,14)          POINT PAST LUNAME
Z4&SYSNDX DS   0H
         CLI   0(1),C'.'           QUALIFIER END?
         BE    Z5&SYSNDX           ..YES
         BCTR  1,0                 SUBTRACT 1
         BCT   15,Z4&SYSNDX        ..NO  - LOOP
Z5&SYSNDX DS   0H
         EX    15,Z8&SYSNDX+6      MOVE LUNAME TO PRINTTO AREA
         IC    15,0(,14)           PICK UP LENGTH OF ALU1 FIELD
         LA    14,0(15,14)         POINT PAST ALU1 SUBFIELD
         CLR   14,0                ANOTHER SUBFIELD PRESENT?
         BNL   Z9&SYSNDX           ..NO  - QUIT
*        IF A SECOND ASSOCIATED LU NAME IS PRESENT, EXTRACT ITS
*        LOWEST-LEVEL QUALIFIER AND USE IT AS THE ALTERNATE PRINTTO
*        DESTINATION.
*        AT THIS POINT: REG0  - FIRST BYTE PAST LU DEF. CONTROL VECTOR
*                       REG1  - WORK
*                       REG14 - FIRST BYTE PAST SECOND SUBFIELD.
*                       REG15 - WORK
         CLI   1(14),X'82'         SECOND ASSOCIATED LU DEFINED?
         BNE   Z9&SYSNDX           ..NO  - QUIT
         IC    15,4(,14)           PICK UP LENGTH OF LUNAME
         LA    1,4(15,14)          POINT PAST LUNAME
Z6&SYSNDX DS   0H
         CLI   0(1),C'.'           QUALIFIER END?
         BE    Z7&SYSNDX           ..YES
         BCTR  1,0                 SUBTRACT 1
         BCT   15,Z6&SYSNDX        ..NO  - LOOP
Z7&SYSNDX DS   0H
         EX    15,Z8&SYSNDX+12     MOVE LUNAME TO ALTPRTTO AREA
         B     Z9&SYSNDX           QUIT
*        EX'D MOVE INSTRUCTIONS FOR VARIABLE-LENGTH FIELDS.
Z8&SYSNDX DS   0H
         MVC   &OUTLA+0(*-*),2(14) EX'D MOVE TO COPY MODEL NAME
         MVC   &OUTLA+8(*-*),1(1)  EX'D MOVE TO COPY ASSOCIATED LU 1
         MVC   &OUTLA+16(*-*),1(1) EX'D MOVE TO COPY ASSOCIATED LU 2
*        ALL DONE. AT THIS POINT THE FIELD ADDRESSED BY THE 'OUTLIST'
*        LABEL NOW CONTAINS:
*        +00  - 8 CHARACTER TERMINAL MODEL NAME
*        +08  - 8 CHARACTER NETNAME OF ASSOCIATED LU 1 (PRINTTO)
*        +16  - 8 CHARACTER NETNAME OF ASSOCIATED LU 2 (ALTPRT)
Z9&SYSNDX DS   0H
         LM    14,1,&RSAA          RESTORE REGISTERS
         MEND


Christopher Frank
Lead Systems Programmer
Fortis Data Center (USA)

