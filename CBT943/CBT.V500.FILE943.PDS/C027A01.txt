 LSR considerations
We run VSE/SP 2.1.4 and CICS 1.6.0 on an IBM 4341 Model 2.  Performance
considerations, in particular the overhead of swapping from one address space to
another, have made Virtual Address Extension (VAE) prohibitive.  We decided to
turn to Local Shared Resources (LSR) as a solution to our growing core shortage
problems in CICS.
OVERVIEW
LSR is a tool that allows any number of VSAM files to be processed by CICS via a
buffer pool in which a number of strings and buffers of differing sizes have
been defined, so that it is no longer necessary to define (or allocate) strings,
data buffers, and index buffers (for KSDS files) for each file used.  If used
wisely, it can afford its user a very great saving of core because the buffer
pool can occupy a fraction of the total of buffers and strings which the files
would normally use.
CONSIDERATIONS
What considerations must you take into account and what are the preparations
required before LSR can be made operational?
1    Before installing LSR, read about the restrictions imposed by IBM.  These
are described in the Resource Definition Guide, in the section on the DFHFCT
operand SERVREQ=SHARE.
2    Use your CICS statistics to make a list of the VSAM files that are used
less often than others.
3    Next to each file write the number of strings, data buffers, and index
buffers allocated to it (youUll find this information in your FCT listing).
4    Now find out the Control Interval sizes of each of these buffers (you can
use IDCAMS LISTCAT for this purpose) and group the buffers according to size.
5    Calculate approximately 15-20% of the number of buffers in each group.
These will be used to define the buffer pool.
6    For each file whose buffers are to be shared, add to the SERVREQ operand of
the DFHFCT TYPE=DATASET macro, the sub-operand SHARE.  Do not remove the STRNO,
BUFNO, and BUFNI keywords;  although the definition of SERVREQ=SHARE means that
buffers are no longer physically reserved for each file, these operands are
still necessary to ensure that no file exceeds its defined limits.
7    Add a DFHFCT TYPE=SHRCTL macro to your FCT to define your buffer pool.
8    Compile and link your FCT, start CICS up, and LSR is in operation!
AN FCT CODING EXAMPLE
Note that this is only a part of our actual FCT.
TEST001  DFHFCT TYPE=DATASET,                                          *
               DATASET=TEST001,                                        *
               ACCMETH=(VSAM,ESDS),                                    *
               SERVREQ=(UPDATE,NEWREC,BROWSE,DELETE,SHARE),            *
               OPEN=INITIAL,                                           *
               RECFORM=(FIXED,BLOCKED),                                *
               STRNO=1,                                                *
               BUFND=2,                                                *
               BUFNI=1
TEST002  DFHFCT TYPE=DATASET,                                          *
               DATASET=TEST002,                                        *
               ACCMETH=(VSAM,KSDS),                                    *
               SERVREQ=(BROWSE,NEWREC,UPDATE,DELETE,SHARE),            *
               OPEN=INITIAL,                                           *
               RECFORM=(VARIABLE,BLOCKED),                             *
               STRNO=1,                                                *
               BUFND=2,                                                *
               BUFNI=1
TEST003  DFHFCT TYPE=DATASET,                                          *
               DATASET=TEST003,                                        *
               ACCMETH=(VSAM,KSDS),                                    *
               SERVREQ=(NEWREC,BROWSE,UPDATE,DELETE,SHARE),            *
               OPEN=INITIAL,                                           *
               RECFORM=(FIXED,BLOCKED),                                *
               STRNO=1,                                                *
               BUFND=2,                                                *
               BUFNI=1
CODING THE TYPE=SHRCTL MACRO

 The TYPE=SHRCTL macro is used to define the buffer pool; it must follow all
TYPE=DATASET entries which use the buffer pool, for example:
         DFHFCT TYPE=SHRCTL,                                           *
               BUFFERS=(512(8),1024(16),2048(12),4096(14),8192(4),     *
               12288(3)),                                              *
               STRNO=35
SUBSEQUENT ACTIVITY
In the coming weeks check regularly, using a performance tool such as
OMEGAMON/CICS, whether any string or buffer-waits have occurred.  If you have no
performance tool, the CICS statistics will inform you of any waits.  Figure 1
shows an example of these statistics.
A couple of weeks should be enough to give a reasonable impression of the value
of LSR and you will then probably decide to add more files to the pool.
Of our 120 files we now have 80 using the shared buffer pool, which has meant
that a very useful 800K (!) has become available for GETVIS requests - enough to
keep us going for a good few months of expansion.
Further information about the LSR can be found in the Performance Guide (SC33-
0134), or Resource Definition Guide (GC33-0149).

Walther van der Pol
Systems Programmer
ReaderUs Digest NV (The Netherlands)    ) Xephon 1988












































