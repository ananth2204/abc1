A solution to potential CICS shutdown problems


CONFIGURATION

CICS 1.7 - MVS/ESA - JES2


PROBLEMS

During a bad CICS shutdown the operator may not be near his
MVS console (for any reason).  If he comes back and doesn't
see the abnormal termination messages and starts the batch
work, the batch work cancels because some databases are
corrupted.  After a bad shutdown, CICS must be restarted.
During the restart (with START=AUTO) the recovery utility
performs the backout of VSAM and DL/I for data integrity.


EXAMPLE

In the morning I change the FCT.  I also change the override
parameter (..., FCT=(S1,COLD)) for tomorrow.  That evening
CICS has a problem and the restart does not perform any
backout for the VSAM file in the FCT because of the COLD
parameter.  As a result, the VSAM files are corrupted.


SOLUTION

At the end of the CICS shutdown procedure a program issues a
message if the shutdown is no good.  This program finishes
with a special return code to stop subsequent steps from
executing.


REMARKS

o      This sample program is written in PL/I.  I do not think
      there would be any problem translating it into another language.

o      There is no limit to adding new steps to the procedure
      based on the condition code and the RSD indicator.

o      If the control record 'CTL' does not exist, CICS performs
      a cold start (DFH1518).  If 'CTL' exists CICS checks a byte
      on this record (see values below).

o      If you want to see the control record, submit an IDCAMS
      job with print option on your DFHRSD.  You want the 'CTL' record.
EXPLOITING THE CONDITION CODE

o      If the condition is good, I move a new override parameter
      to the active parameter.

o      Whatever the condition is, I send a TSO message to the
      appropriate person.

o      If the condition is not good, I start CICS again.


DFHRSD CUSTOMIZATION JCL

//MOVENAME EXEC PGM=IDCAMS
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
 REPRO INFILE(SYS01) OUTFILE(DFHRSD)
/*
//**-------------------------------------------------------------------*
//**                            <= COL. 1 TO 22 : MY KEY DFHRSD        *
//**.5...10....5...20....5...30 <= COL. 23      : CICS NAME            *
//**                     IF YOU CHANGE KEY DON'T FORGET CHANGE PROGRAM *
//**-------------------------------------------------------------------*
//SYS01     DD  *
ACTL 0001              CICSSYST
/*
//DFHRSD    DD  DISP=SHR,
//              DSN=SYS2.CICSS.DFHRSD
//

DFHRSD FLAG

WARM KEYPOINT (CHAR(1)) = B'00100000' - X'20'
MIXED WITH :
             1) SYSTEM LOG ON TAPE : B'10000000' - X'80'
                          * OR *
             2) SYSTEM LOG ON DISK : B'01000000' - X'40'

POSSIBILITIES : X'20' - X'60' - X'A0'  = GOOD SHUTDOWN
                           OTHERWISE   = BAD SHUTDOWN


SYSPEND SOURCE CODE

* PROCESS XOPTS(DLI,CICS,MARGINS(2,72,1)),OPTIMIZE(TIME),MAP,SOURCE,
    OFFSET,MACRO,MARGINS(2,72,1),INCLUDE,NOCOUNT,NOINSOURCE,COMPILE;
  SYSPEND : PROC OPTIONS(MAIN) REORDER;
   %INCLUDE BUILTIN , /* <= COPY BOOK WITH MANY DCL .... BUILTIN */
            BOX ;     /* <= COMMENT IN A BOX  SEE BELOW */
   BOX(PROG. SYSPEND : - READ DFHRSD AND TAKE CICS NAME);
   BOX(PROG. SYSPEND : - READ DFHRSD AND TAKE RSD INDICATOR);
   BOX(PROG. SYSPEND : - GIVE CONDITION CODE);
   BOX( F I L E S);
       DCL DFHRSD FILE RECORD INPUT SEQL KEYED ENV(VSAM );
   BOX( D E C L A R E S);
      DCL CLEF CHAR(22) INIT('ACTL 0001');  /* KEY OF MY RECORD */
      DCL CLE  CHAR(22) INIT(' ');          /* KEY OF RECORD (FLAG) */
      DCL (DATES,TIMES) CHAR(8);
      DCL COND_CODE     FIXED BIN(31,0) INIT(0);
      DCL TIM PIC'(9)9';
      DCL C1 CHAR(1) INIT(' ');  /* <= X'0F' */
      DCL X2 CHAR(1) INIT(' ');  /* <= X'20' */
      DCL X6 CHAR(1) INIT('-');  /* <= X'60' */
      DCL XA CHAR(1) INIT('5');  /* <= X'A0' */
      DCL ANSWER CHAR(03);
      DCL MES00 CHAR(72) INIT(' ');
      DCL RECORD CHAR(1000) INIT(' ');
 BOX( MESSAGE TO CONSOLE);
      DCL 1 MES01 ,
          3 DFH   CHAR(08) INIT('DFHWARM') ,
          3 F01   CHAR(18) INIT('>>> GOOD SHUTDOWN '),
          3 CICS  CHAR(09) ,
          3 F02   CHAR(14) INIT('* ENTER PLEASE');
      DCL 1 MES02 ,
          3 DFH   CHAR(08) INIT('DFHEMER') ,
          3 F01   CHAR(17) INIT('>>> BAD SHUTDOWN '),
          3 CICS  CHAR(09) ,
          3 F02   CHAR(14) INIT('* ENTER PLEASE');
 BOX( I N I T I A L I Z A T I O N);
        /* INIT KEY FOR RESEARCH RSD INDICATOR */
      CLE   = C1 !! 'CTL' !! LOW(2) !! 'CTL' !! (13)' ';
      ON KEY(DFHRSD) BEGIN;
                     /* YOU CAN ALSO GIVE A CONDITION CODE HERE */
                      DISPLAY(' RECORD - CTL - NOT FOUND');
                      STOP;
                      END;
 BOX(E X E C U T I O N);
      OPEN FILE(DFHRSD);
      READ FILE(DFHRSD) INTO(RECORD) KEY(CLEF);
      MES01.CICS = SUBSTR(RECORD,23,8); /* SAVE MY CICS NAME */
      MES02.CICS = MES01.CICS ;
 BOX(MOVE MY CICS NAME ON  DCL);
      SUBSTR(MES01.DFH,04,4) ,
      SUBSTR(MES02.DFH,04,4) = SUBSTR(MES01.CICS,5,4) ;
      DATES = TRANSLATE('12/34/56',DATE,'563412');
      TIM = TIME ;
      TIMES = TRANSLATE('12:34:56',TIM,'123456789');
      MES00 =  '>>>>>  CONTROL ' !!
              MES01.CICS !! ' <<<<< * ' !! DATES !! ' AT ' !! TIMES;
 BOX(READ CTL RECORD WHICH CONTAINS FLAG BYTE);
      READ FILE(DFHRSD) INTO(RECORD) KEY(CLE);
 BOX(DISPLAY * CONTROL CICS.... );
      DISPLAY(MES00);
 BOX(TEST FLAG BYTE * COLD-WARM-EMERGENCY RESTART);
      SELECT(SUBSTR(RECORD,33,1));  /* TEST BYTE 33 OF RECORD */
      WHEN(X2,X6,XA)                /* <= THESE VALUES ARE CORRECT */
       DO ;
         DISPLAY(STRING(MES01)) REPLY(ANSWER);
         COND_CODE = 900  ; /* CONDITION CODE 900 = ALL IS CORRECT
                               TEST CONDITION IN NEXT STEP           */
       END;     /* END WHEN X2,X6,XA */
      OTHER
       DO ;
         DISPLAY(STRING(MES02)) REPLY(ANSWER);
         DISPLAY(MES01.CICS !! '>>> STARTUP IS IN PROGRESS <<<');
         COND_CODE = 990  ; /* CONDITION CODE 990 = BAD SHUTDOWN */
       END;      /* END OTHER  */
      END;       /* END SELECT */
      CLOSE FILE(DFHRSD) ;
      CALL PLIRETC(COND_CODE);
  END SYSPEND ;


PL/I BOX ROUTINE

%DCL BOX ENTRY;
%BOX :   /* COMMENTS IN A PL/1 PROGRAM
            -------------------------- */
         PROC(VAL)STATEMENT RETURNS(CHAR);
         DCL(SUBSTR,LENGTH)BUILTIN;
         DCL(VAL,ARG)CHAR;
         DCL(I,L)FIXED;
         ARG=
        '/*
         +------------------------------------------------------+
         I                                                      I
         I  ';
         L=LENGTH(VAL)/50;
         VAL=VAL!!'                                                  ';
         DO I=1 TO L*50+1 BY 50;
         ARG=ARG!!SUBSTR(VAL,I,50)!!'  I               I  ';
         END;
         ARG=ARG!!
           '                                                    I
         +------------------------------------------------------+ */';
         RETURN(ARG);
    %END;


JCL FOR CICS

//*
//*  ************************************
//*  *** CONTROL GOOD OR BAD SHUTDOWN ***
//*  ***    RC=   900 -- 990          ***
//*  ************************************
//*
//ENDSHDN  EXEC PGM=SYSPEND,COND=EVEN
//STEPLIB  DD DISP=SHR,DSN=PLI.PLILINK
//         DD DISP=SHR,DSN=SYS2.CICSG.LOADLIB
//INTRDR   DD SYSOUT=(S,INTRDR),DCB=(LRECL=80,RECFM=FB,BLKSIZE=80)
//DFHRSD   DD DISP=SHR,DSN=SYS2.CICSS.DFHRSD
//SYSOUT   DD SYSOUT=M
//*
//*
//*  ******************************************
//*  *** TRANSFER  NEW OVERRIDE PARAMETERS  ***
//*  *** + COMPRESS LIBRARIES   (GOOD)      ***
//*  ******************************************
//*
//ENDCOPY  EXEC PGM=IEBCOPY,COND=((900,NE,ENDSHDN))
//OVER     DD DISP=SHR,DSN=SYS2.CICSS.PARMLIB
//WORK     DD DISP=SHR,DSN=SYS2.CICSG.INFO
//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,3)
//SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,3)
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DISP=SHR,DSN=SYS2.CICSS.PARMLIB(COPYPARM)
//*
//*
//*  ***************************************************
//*  *** SEND TSO MESSAGE TO RESPONSIBLE (GOOD)      ***
//*  ***************************************************
//*
//SENDOK   EXEC PGM=COMMANDS,PARM=(SYSIN),COND=((900,NE,ENDSHDN))
//SYSIN    DD DISP=SHR,DSN=SYS2.CICSS.PARMLIB(SEND)
//*
//*
//*  ***************************************************
//*  *** START CICS SYSTEM FOR BACKOUT (START=AUTO)  ***
//*  *** SEND TSO MESSAGE TO RESPONSIBLE (BAD)       ***
//*  ***************************************************
//*
//SENDNOK  EXEC PGM=COMMANDS,PARM=(SYSIN),COND=((990,NE,ENDSHDN))
//SYSIN    DD DISP=SHR,DSN=SYS2.CICSS.PARMLIB(START)
//*
//*  ******************************************************


COPYPARM MEMBER IN STEP ENDCOPY

NO.1      COPY INDD=OVER,OUTDD=WORK
          SELECT MEMBER=((CICSSX,,R),(CICSSXN,,R))
NO.2      COPY INDD=WORK,OUTDD=OVER
          SELECT MEMBER=((CICSSXN,CICSSX,R))
NO.3      COPY INDD=WORK,OUTDD=OVER
          SELECT MEMBER=((CICSSX,CICSSXN,R))
NO.4      COPY INDD=OVER,OUTDD=OVER
NO.5      COPY INDD=WORK,OUTDD=WORK

EXPLANATION :  - MEMBER CICSSX  = ACTIVE OVERRIDE PARAMETERS
-----------                       FOR STARTUP CICS
               - MEMBER CICSSXN = NEW OVERRIDE PARAMETERS FOR
                                  NEW STARTUP.
   COPY NO.1 : SAVE THE 2 MEMBERS ON ANOTHER DATASET
        NO.2 : MEMBER CICSSX IS UPDATED
        NO.3 : MEMBER CICSSXN IS NOW THE OLD CICSSX
        NO.4-5 : COMPRESS LIBRARY


SEND MEMBER IN STEP SENDOK

SEND '>>>>> CICSSYST CORRECTLY CLOSED <<<<<',USER=(S600EH),LOGON


START MEMBER IN STEP SENDNOK

START CICSSYST
SEND '>>>>> CICSSYST <<<<< **** BAD SHUTDOWN ****',USER=(S600EH),LOGON
SEND '>>>>> CICSSYST <<<<< ** START IS ACTIVE  **',USER=(S600EH),LOGON


COMMANDS SOURCE CODE

*********************************************************************
*  THIS PROGRAM ISSUES MVS/JES2 COMMANDS.                           *
*  IT OBTAINS ITS INPUT AS FOLLOWS ...                              *
*    1. ONE (1) COMMAND CAN BE SUPPLIED VIA THE PARM INFO WHEN      *
*       CALLING/EXECUTING THIS PROGRAM.                             *
*    2. ADDITIONAL COMMANDS CAN BE SUPPLIED VIA A DD STATEMENT      *
*       WHICH NAME MUST BE MENTIONED AS THE FIRST FIELD OFF THE     *
*       PARM INFO.                                                  *
*   AN EXAMPLE :                                                    *
*       //STEP1 EXEC PGM=COMMANDS,PARM=(SYSIN,S RMF,MEMBER=00)      *
*   OR                                                              *
*                 CALL  COMMANDS,(PARM)                             *
*       PARM      DS    0F                                          *
*       LENGTH    DC    AL2(PARML)     LENGTH OF PARM DATA          *
*       DDNAME    DC    C'SYSIN'       INPUT DDNAME                 *
*                 DC    C','           COMMA                        *
*       COMMAND   DC    C'S RMF,MEMBER=00' MVS COMMAND              *
*       PARML     EQU   *-DDNAME       LENGTH OF PARM DATA          *
*  THE PROGRAM USES SVC 34 TO PASS THE COMMAND TO MVS/JES2.         *
*  THE PROGRAM ISSUES MODESET MACROS TO PUT ITSELF IN               *
*  SUPERVISOR STATE. IT SHOULD BE LINKEDITED WITH AC(1) AND         *
*  PLACED IN AN APF AUTHORIZED LOAD LIBRARY.                        *
*  JCL TO EXECUTE PROGRAM LOOKS AS FOLLOWS ...                      *
*  //TS01CMD  JOB MSGCLASS=X                                        *
*  //S1 EXEC PGM=COMMANDS,PARM=(SYSIN)                              *
*  //SYSIN    DD *                                                  *
*  SEND 'TEST1',USER=(TS01)                                         *
*  S RMF                                                            *
*  #DU,PRT1                                                         *
*  //                                                               *
*********************************************************************
RW1      EQU   2
RW2      EQU   3
RW3      EQU   4
RW4      EQU   5
COMMANDS CSECT
         STM   R14,R12,12(R13)
         LR    R10,R15
         USING COMMANDS,R10
         ST    R13,SAVEAREA+4
         LA    RW1,SAVEAREA
         ST    RW1,8(R13)
         LR    R13,RW1
         LR    R7,R1                  R7 = A(A(PARM FIELD))
         L     R7,0(R7)               R7 = A(PARM FIELD)
         XR    R6,R6                  CLEAR R6
         LH    R6,0(R7)               LOAD EVENTUAL LENGTH FIELD IN R6
         LTR   R6,R6                  IS THERE PARM INFO ???
         BZ    LAB100                 NO, SKIP PARM INFO SECTION
         C     R6,=A(91)              91 BYTES IS MAX. PARM INFO
         BNH   LAB000                 SO, MORE THAN 100 BYTES
         WT0   'LENGTH FIELD GREATER THAN 91 - ERROR - JOB TERMINATED'
         LA    R15,8                  ERROR CONDITION CODE
         B     EINDE2                 STOP RUN
LAB000   DS    0H
         LR    R8,R7                  FETCH BEGIN PARM DATA
         LA    R8,2(R8)               BUMP PAST LENGTH
LAB002   DS    0H
         LA    R9,DDNAME              BEGIN DDNAME FIELD
         LA    RW1,8                  MAX. LENGTH DDNAME
LAB005   DS    0H
         CLI   0(R8),C','             END OF DDNAME PARM ??
         BE    LAB010                 YEAH
         MVC   0(1,R9),0(R8)          MOVE 1 BYTE IN DDNAME FIELD
         LA    R8,1(R8)               BUMP TO NEXT PARM DDNAME BYTE
         LA    R9,1(R9)               BUMP TO NEXT FIELD DDNAME BYTE
         BCT   R6,LAB007              AND CONTINUE SCAN IF BYTES LEFT
         B     LAB050                 ONLY DDNAME SUPPLIED
LAB007   DS    0H
         BCT   RW1,LAB005
LAB010   DS    0H                     HERE THE DDNAME IS COPIED
         LTR   R6,R6                  IS COMMAND SUPPLIED ???
         BZ    LAB050                 NO, ONLY DDNAME
         BCTR  R6,R0                  LENGTH OF PARM INFO MINUS 1 (,)
         LA    R9,CMDTEXT             R9 = COMMAND TEXT
LAB020   DS    0H
         MVC   0(1,R9),1(R8)          MOVE 1 BYTE IN COMMAND FIELD
         LA    R8,1(R8)               BUMP TO NEXT PARM COMMAND BYTE
         LA    R9,1(R9)               BUMP TO NEXT FIELD COMMAND BYTE
         BCT   R6,LAB020              AND CONTINUE SCAN IF BYTES LEFT
LAB050   DS    0H
         MODESET MF=(E,SUPRMOD)       GET IN SUPR STATE FOR SVC 34  #
         XR    R0,R0                  CLEAR REG 0
         LA    R1,CMDBUFF             GET ADDRESS OF PARM COMMAND
         SVC   34                     ISSUE COMMAND VIA SVC 34
         MODESET MF=(E,PROBMOD)       GET BACK IN PROB STATE
LAB060   DS    0H
         CLC   DDNAME,=CL8' '         DDNAME SUPPLIED IN PARM FIELD
         BE    LAB100                 NO, SO USE DEFAULT (SYSIN)
         LA    R8,SYSIN               R8 = A(SYSIN DCB)
         USING IHADCB,R8
         MVC   DCBDDNAM,DDNAME        MOVE DDNAME SUPPLIED IN DCB
LAB100   DS    0H
         OPEN  (SYSIN,(INPUT))
LAB110   DS    0H
         GET   SYSIN,INAREA           READ SYSIN CARD
         MVC   CMDTEXT,INAREA         MOVE 1 COMMAND IN COMMAND BUFFER
         MODESET MF=(E,SUPRMOD)       GET IN SUPR STATE FOR SVC 34  #
         XR    R0,R0                  CLEAR REG 0
         LA    R1,CMDBUFF             GET ADDRESS OF COMMAND BUFFER
         SVC   34                     ISSUE COMMAND VIA SVC 34
         MODESET MF=(E,PROBMOD)       GET BACK IN PROB STATE
         B     LAB110                 AND READ NEXT CARD
EINDE    DS    0H
         CLOSE SYSIN
         XR    R15,R15
EINDE2   DS    0H
         L     R13,SAVEAREA+4
         RETURN (14,12),RC=(15)
SAVEAREA DC    18F'0'
INAREA   DC    CL80' '
* MODESETS ISSUED
SUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L GET IN SUPR STATE FOR SVC 34
PROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L GET BACK IN PROB STATE
         DC    C'CMDBUFF'
CMDBUFF  DS    0D
CMDFLAG1 DC    X'00'                    FLAG 1
CMDLNGTH DC    AL1(CMDBUFFL)            LENGTH
CMDFLAG2 DC    X'0000'                  FLAG 2
CMDTEXT  DC    CL80' '                  COMMAND TEXT
CMDBUFFL EQU   *-CMDBUFF
         DC    C'DDNAME'
DDNAME   DC    CL8' '
*     FILE DEFINITIONS
SYSIN    DCB   DDNAME=SYSIN,            DCB-PATTERN                    C
               DSORG=PS,                                               C
               EODAD=EINDE,                                            C
               MACRF=GM
         LTORG
         DCBD  DSORG=QS
         END


Eric Hamtiaux
Data Communications
AMEV Data Center (Belgium)

