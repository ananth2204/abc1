Batch to CICS LU6.2 utility

The following program listings are the result of a requirement
to be able to open and/or close CICS files from a batch job
stream and be able to set a return code indicating whether or
not the request was successful, rather than just having a control
file and ICE-driven transaction in CICS. By using LU6.2,
files, programs, and transactions in remote systems can be
easily controlled.

Our current environment is MVS/XA 2.2, VTAM 3.2, and
CICS 1.7 all at PUT8901.


REQUIRED ENTRIES IN CICS AND VTAM

PCT

     DFHPCT  TYPE=ENTRY,TRANSID=UT62,PROGRAM=UT6200

PPT

     DFHPPT  TYPE=ENTRY,PROGRAM=UT6200

TCT

BAT1  DFHTCT TYPE=SYSTEM,                                              X
            ACCMETH=VTAM,                                              X
            FEATURE=PARALLEL,                                          X
            SYSIDNT=BAT1,                                              X
            TRMTYPE=LUTYPE62,                                          X
            DATASTR=USER,                                              X
            NETNAME=BATCH01,                                           X
            TRANSID=UT62
      DFHTCT TYPE=MODESET,SYSIDNT=BAT1,MODENAM=MTLU62,                 X
            BUFFER=256,RUSIZE=256,MAXSESS=(1,0)

Repeat the above definition for the other three ACBNAMEs.

VTAM APPL definitions

BATCH01 APPL   AUTH=(ACQ,SPO,PASS),EAS=25,SONSCIP=YES,PARSESS=YES,     X
               APPC=YES,MODETAB=MODETJA,DLOGMOD=MTLU62,                X
               DMINWNL=0,DMINWNR=1,DSESLIM=1,AUTOSES=1

Repeat the above definition for the other three ACBNAMEs.

VTAM MODETAB entries

SNASVCMG MODEENT LOGMODE=SNASVCMG,                                     X
               FMPROF=X'13',                                           X
               TSPROF=X'07',                                           X
               PRIPROT=X'B0',                                          X
               SECPROT=X'B0',                                          X
               COMPROT=X'D0B1',                                        X
               RUSIZES=X'8585',                                        X
               PSERVIC=X'060200000000000000000300'
MTLU62   MODEENT LOGMODE=MTLU62,                                       X
               TYPE=0,                                                 X
               FMPROF=X'13',                                           X
               TSPROF=X'07',                                           X
               PRIPROT=X'B0',                                          X
               SECPROT=X'B0',                                          X
               COMPROT=X'D0B1',                                        X
               RUSIZES=X'8585',                                        X
               PSERVIC=X'060200000000000000000300'
         MODEEND
         END


UT6200 SOURCE CODE

The source has been cut down to show LU6.2 function only.

*ASM XOPTS(NOPROLOG NOEPILOG FE GDS)
* THIS PROGRAM HANDLES THE CICS END OF THE BATCH TO CICS LU 6.2       *
* UTILITY.                                                            *
         DFHEISTG
CONVFUNC DS    CL16                    CONVERSATION FUNCTION
CONVDATA DS    CL24                    CONVERSATION STATE
CONVRETC DS    CL6                     CONVERSATION RETURN CODE
ABCODE   DS    CL4                     ABEND CODE
RECVDATA DS    0CL82
A$DATA   DS    CL80                    80 BYTES OF DATA
RECVDATL DS    F
SENDDATA DS    0CL84
A$SNDLN  DS    CL2                     LENGTH TO SEND
A$SNDMSG DS    CL80                    MESSAGE TO BE SENT TO BATCH PGM
SHEX00   DS    CL5
SPHEX00  DS    CL9
         DFHEIEND
UT6200   DFHEIENT CODEREG=(R8,R9),DATAREG=R10,EIBREG=R11
RECVNEXT DS    0H
         MVI   A$SNDMSG,X'40'          CLEAR THE
         MVC   A$SNDMSG+1(79),A$SNDMSG - MESSAGE AREA
* RECEIVE THE DATA FROM THE BATCH PROGRAM AND ISSUE CONFIRMATION      *
         MVC   CONVFUNC,=C'RECEIVE DATA    '
         EXEC  CICS GDS RECEIVE INTO(RECVDATA) FLENGTH(RECVDATL)       X
               MAXFLENGTH(82) LLID                                     X
               CONVID(EIBTRMID) CONVDATA(CONVDATA) RETCODE(CONVRETC)
         CLC   CONVRETC(2),=X'0300'    NOT AN LU6.2 SESSION?
         BE    ABNDNL62                - YES
         CLI   CONVRETC,X'00'          RETURN CODE ZERO?
         BNE   ABNDCONV                - NO
         CLI   CONVDATA+2,X'FF'        RECEIVED A FREE REQUEST?
         BE    ENDITALL                - YES
         MVC   CONVFUNC,=C'CONFIRM RECEIVE '
         EXEC  CICS GDS ISSUE CONFIRMATION                             X
               CONVID(EIBTRMID) CONVDATA(CONVDATA) RETCODE(CONVRETC)
         CLI   CONVRETC,X'00'          RETURN CODE ZERO ?
         BNE   ABNDCONV                - NO
* ******************************************************************* *
* VALIDATE WHETHER OR NOT THE USER IS PERMITTED TO USE UT62           *
* ******************************************************************* *
*
*               ADD SECURITY CHECKING CODE HERE.
*
* ******************************************************************* *
* FUNCTION PROCESSING CODE                                            *
* ******************************************************************* *
*
*              ADD CODE TO OPEN AND CLOSE FILES ETC. HERE.
*              REFERENCE CHAPTER 5.7 IN THE CICS 1.7 CUSTOMIZATION
*              GUIDE
*
* ******************************************************************* *
* SEND THE RETURN CODE AND MESSAGE                                    *
* ******************************************************************* *
RESPOND  DS    0H
         MVC   A$SNDLN,=H'82'
         MVC   CONVFUNC,=C'SEND MSG        '
         MVC   A$SNDMSG,A$DATA         SEND BACK THE DATA WE WERE SENT
         EXEC  CICS GDS SEND FROM(SENDDATA) FLENGTH(82)                X
               INVITE CONFIRM                                          X
               CONVID(EIBTRMID) CONVDATA(CONVDATA) RECODE(CONVRETC)
         CLI   CONVRETC,X'00'          RETURN CODE ZERO ?
         BNE   ABNDCONV                - NO
         B     RECVNEXT
* RETURN TO CICS                                                      *
ENDITALL DS    0H
         MVC   CONVFUNC,=C'CONFIRM FREE    '
         EXEC  CICS GDS ISSUE CONFIRMATION                             X
               CONVID(EIBTRMID) CONVDATA(CONVDATA) RETCODE(CONVRETC)
         CLI   CONVRETC,X'00'          RETURN CODE ZERO ?
         BNE   ABNDCONV                - NO
         MVC   CONVFUNC,=C'ISSUE FREE      '
         EXEC  CICS GDS FREE                                           X
               CONVID(EIBTRMID) CONVDATA(CONVDATA) RETCODE(CONVRETC)
         CLI   CONVRETC,X'00'          RETURN CODE ZERO ?
         BNE   ABNDCONV                - NO
         EXEC  CICS RETURN
* SET THE ABEND CODE AND THEN ABEND THE TRANSACTION                   *
ABNDCONV DS    0H
         MVC   ABCODE,=C'CONV'         CONVERSATION ERROR
         B     ABENDIT
ABNDNL62 DS    0H
         MVC   ABCODE,=C'NL62'         NOT AN LU6.2 SESSION
         B     ABENDIT
ABENDIT  DS    0H
         EXEC CICS ABEND ABCODE(ABCODE) CANCEL
         LTORG
         END


SYSB6200 SOURCE CODE

The batch program SYSB6200 needs to be compiled into an
APF-authorized library because of its use of VTAM services.
Again, the program has been cut to show only the LU6.2
function.

***   REGISTER USAGE:
* REGISTER   2      LEVEL 1 BAL
* REGISTER   3      LEVEL 2 BAL
* REGISTER  10      BASE REGISTER
* REGISTER  11      BASE REGISTER
* REGISTER  12      POINTS TO COMMON DATA AREA
SYSB6200 CSECT
         SAVE  (14,12)
         BALR   R10,0
         USING  *,R10,R11
         LA     R11,2048(R10)
         LA     R11,2048(R11)
         B      START
* OPEN THE VTAM ACB AND PRINT FILES                                   *
         DC    CL8'SYSB6200'           CONSTANT TO ID START PROPER
START    DS    0H
         LA    R9,SAVE6200             ADDRESS OF SAVE AREA
         ST    R13,4(R9)               INVOKERS SAVE AREA ADDR IN MY SA
         ST    R9,8(R13)               MY SAVE AREA IN INVOKERS SA
         LR    R13,R9                  POINT AT MY SAVE AREA
         L     R12,=A(COMNDATA)        GET ADDRESS OF COMMMON DATA AREA
         USING COMNDATA,R12            ESTABLISH ADDRESSABILITY
         OPEN  (PARMS,(INPUT))         OPEN THE PARAMETER FILE
         OPEN  (PRINT,(OUTPUT))        OPEN THE PRINT FILE
         MVI   LISTOUT,X'40'           CLEAR THE
         MVC   LISTOUT+1(132),LISTOUT  - PRINT LINE
         MVI   LISTCONT,C'1'           NEW PAGE
         MVC   LISTBODY(26),=C'REQUEST PROCESSING RESULTS'
         BAL   R3,PRINTIT              PRINT THE LINE
         MVI   LISTCONT,C' '           NEW PAGE
         MVC   LISTBODY(26),=C'==========================='
         BAL   R3,PRINTIT              PRINT THE LINE
         OPEN  (PRINTRC,(OUTPUT))      OPEN THE RPL RETURN CODE FILE
         MVI   LISTCONT,C'1'           NEW PAGE
         MVC   LISTBODY(33),=C'SESSION COMMUNICATION INFORMATION'
         BAL   R2,PUTRC00              PRINT THE LINE
         MVI   LISTCONT,C' '           NEW PAGE
         MVC   LISTBODY(33),=C'================================='
         BAL   R2,PUTRC00              PRINT THE LINE
         OPEN  (SNAPDUMP,(OUTPUT))     OPEN THE RPL RETURN CODE FILE
* ADD CODE TO GET THE USERID TO PASS TO CICS FOR SECURITY CHECK
* IE GET THE USERID FROM THE ACEE
         XR    R7,R7                   CLEAR A LOOP COUNTER
         LA    R7,4(R7)                TRY FOUR DIFFERENT ACBS
         LA    R8,APPLNTAB             POINT TO THE APPL NAME TABLE
OPENLOOP DS    0H
         XR    R15,R15                 CLEAR REGISTER
         MVC   APPLNAM,0(R8)           TRY FIRST ACB
         OPEN  A$ACB                   ASSOCIATE PROGRAM WITH VTAM
         ST    R15,CONTR15             SAVE REG15
         XR    R5,R5                   NO RPL
         XR    R6,R6                   NO RPL EXTENSION
         MVC   VTREQ00,=C'ACBOPEN '    VTAM REQUEST TYPE
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BZ    OPENOK                  - NO
         LA    R8,8(R8)                NEXT ACB NAME IN THE TABLE
         BCT   R7,OPENLOOP
         MVC   SETRC,=H'120'           SET COMMS FAIL RETURN CODE
         LH    R5,LEN12003             MESSAGE LENGTH
         LA    R4,ERR12003             POINT TO ERROR MESSAGE
         BAL   R3,PRINTMS              PRINT THE MESSAGE
         B     CLOSEIT
OPENOK   DS    0H
         SETLOGON OPTCD=(START,SYN),   PERMIT SESSION ESTABLISHMENT    X
               RPL=A$RPL,ACB=A$ACB
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         XR    R6,R6                   NO RPL EXTENSION
         MVC   VTREQ00,=C'SETLOGON'
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   VTAMFAIL                - YES
         LTR   R0,R0                   CONDITIONAL COMPLETION ?
         BNZ   VTAMFAIL                - YES
         LA    R6,CARDIN               ADDRESS OF AREA TO READ INTO
         GET   PARMS,(R6)              GET THE PARAMETER CARD
         MVI   LISTOUT,X'40'           CLEAR THE
         MVC   LISTOUT+1(132),LISTOUT  - PRINT LINE
         MVC   LISTBODY(9),=C'REQUEST -'  IDENTIFY AS PARM CARD
         MVC   LISTBODY+10(80),CARDIN  MOVE THE PARM CARD
         BAL   R3,PRINTIT              PRINT THE LINE
         BAL   R2,PARSEPRM             CALL PARAMETER PARSING ROUTINE
         LA    R6,A$NIB                POINT TO THE NIB
         USING ISTDNIB,R6              ADDRESSABILITY
         MVC   NIBSYM,SESSWITH         NAME OF REQUESTED SYSTEM
         INQUIRE OPTCD=(APPSTAT,SYN),  FIND OUT IF                     X
               RPL=A$RPL,              - REQUESTED SYSTEM IS           X
               ACB=A$ACB,              - AVAILABLE                     X
               NIB=A$NIB
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         XR    R6,R6                   NO RPL EXTENSION
         MVC   VTREQ00,=C'INQUIRE '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   INQYFAIL                - YES
         LTR   R0,R0                   CONDITIONAL COMPLETION ?
         BNZ   INQYFAIL                - YES
         LA    R5,A$RPL                POINT AT THE RPL
         USING IFGRPL,R5               ADDRESSABILITY
         CLI   RPLFDB3,X'04'           SYSTEM AVAILABLE ?
         BNE   DOCNOS                  - PROBABLY
         MVC   SETRC,=H'120'           SET COMMS FAIL RETURN CODE
         LH    R5,LEN12002             MESSAGE LENGTH
         LA    R4,ERR12002             POINT TO ERROR MESSAGE
         BAL   R3,PRINTMS
         B     CLOSEIT
DOCNOS   DS    0H
         LA    R7,A$RPLX
         USING ISTRPL6X,R7
         MVC   RPL6LU,SESSWITH
         DROP  R7
         APPCCMD CONTROL=OPRCNTL,QUALIFY=CNOS,RPL=A$RPL,AAREA=A$RPLX,  X
               ACB=A$ACB,OPTCD=SYN,LOGMODE=MTLU62
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         LA    R6,A$RPLX               RPL EXTENSION
         MVC   VTREQ00,=C'CNOS     '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   VTAMFAIL                - YES
         CH    R0,=H'11'               CONDITIONAL COMPLETION ?
         BE    TESTPRIS                - YES RCPRI=0 AND RCSEC<=2 OK
         LTR   R0,R0                   ANY OTHER NON ZERO RC ?
         BNZ   VTAMFAIL                - YES
         B     CNOSOK                  - NO R0=0 SO UNCONDITIONALLY OK
TESTPRIS DS    0H
         USING ISTRPL6X,R6             ADDRESSABILITY
         CLC   RPL6RCPR,=H'0'          RCPRI=0 ?
         BNE   VTAMFAIL                - NO
         CLC   RPL6RCSC,=H'2'          RCSEC<=2 ?
         BH    VTAMFAIL                - NO
CNOSOK   DS    0H
         XR    R4,R4                   CLEAR R4
         LA    R4,A$FMH5L              LENGTH OF FMH5
         APPCCMD CONTROL=ALLOC,QUALIFY=ALLOCD,RPL=A$RPL,AAREA=A$RPLX,  X
               ACB=A$ACB,OPTCD=SYN,CONMODE=CS,AREA=A$FMH5,RECLEN=(R4), X
               LOGMODE=MTLU62          USED TO BE SNASVCMG
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         LA    R6,A$RPLX               RPL EXTENSION
         MVC   VTREQ00,=C'ALLOCD  '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   VTAMFAIL                - YES
         LTR   R0,R0                   CONDITIONAL COMPLETION ?
         BNZ   VTAMFAIL                - YES
         MVC   A$CONVID,A$RPLX+RPL6CNVD-ISTRPL6X
SENDNEXT DS    0H
         LA    R6,CARDIN               ADDRESS OF AREA TO READ INTO
         GET   PARMS,(R6)              GET THE PARAMETER CARD
         MVI   LISTOUT,X'40'           CLEAR THE
         MVC   LISTOUT+1(132),LISTOUT  - PRINT LINE
         MVC   LISTBODY(9),=C'REQUEST -'  IDENTIFY AS PARM CARD
         MVC   LISTBODY+10(80),CARDIN  MOVE THE PARM CARD
         BAL   R3,PRINTIT              PRINT THE LINE
         BAL   R2,PARSEPRM             CALL PARAMETER PARSING ROUTINE
         MVC   A$DATA,CARDIN
         LH    R4,A$SENDLN             LENGTH OF DATA TO BE SENT
         APPCCMD CONTROL=PREPRCV,QUALIFY=DATACON,RPL=A$RPL,            X
               AAREA=A$RPLX,ACB=A$ACB,CONVID=A$CONVID,                 X
               OPTCD=(SYN,NBUFFLST),CONMODE=CS,AREA=A$SENDLN,          X
               RECLEN=(R4)
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         LA    R6,A$RPLX               RPL EXTENSION
         MVC   VTREQ00,=C'PREPRCV '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   VTAMFAIL                - YES
         LTR   R0,R0                   CONDITIONAL COMPLETION ?
         BNZ   VTAMFAIL                - YES
         APPCCMD CONTROL=RECEIVE,QUALIFY=SPEC,RPL=A$RPL,AAREA=A$RPLX,  X
               ACB=A$ACB,CONVID=A$CONVID,OPTCD=SYN,CONMODE=CS,FILL=LL, X
               AREA=A$RCVDAT,AREALEN=100
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         LA    R6,A$RPLX               RPL EXTENSION
         MVC   VTREQ00,=C'RECEIVE '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   VTAMFAIL                - YES
         LTR   R0,R0                   CONDITIONAL COMPLETION ?
         BNZ   VTAMFAIL                - YES
         APPCCMD CONTROL=SEND,QUALIFY=CONFRMD,RPL=A$RPL,AAREA=A$RPLX,  X
               ACB=A$ACB,CONVID=A$CONVID,OPTCD=SYN,CONMODE=CS
         ST    R15,CONTR15             SAVE REG15
         ST    R0,CONTR0               SAVE REG0
         LA    R5,A$RPL                POINT TO THE RPL
         LA    R6,A$RPLX               RPL EXTENSION
         MVC   VTREQ00,=C'CONFRMD '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
         L     R15,CONTR15             GET REG15 BACK
         L     R0,CONTR0               GET REG0 BACK
         LTR   R15,R15                 ANY ERRORS ?
         BNZ   VTAMFAIL                - YES
         LTR   R0,R0                   CONDITIONAL COMPLETION ?
         BNZ   VTAMFAIL                - YES
         MVI   LISTOUT,X'40'           CLEAR THE
         MVC   LISTOUT+1(132),LISTOUT  - PRINT LINE
         MVC   LISTBODY(9),=C'        -'  IDENTIFY AS RETURNED INFO
         MVC   LISTBODY+10(80),A$RCVMSG  MOVE IN MESSAGE FROM CICS
         BAL   R3,PRINTIT              PRINT THE LINE
         B     SENDNEXT
* DEALLOCATE THE SESSION. CLOSE THE ACB AND THE PARM AND PRINT FILES  *
ENDSESS  DS    0H
         LH    R4,A$SENDLN             LENGTH OF DATA TO BE SENT
         APPCCMD CONTROL=DEALLOC,QUALIFY=DATACON,RPL=A$RPL,            X
               AAREA=A$RPLX,ACB=A$ACB,CONVID=A$CONVID,                 X
               OPTCD=(SYN,NBUFFLST),CONMODE=CS,AREA=A$SENDLN,          X
               RECLEN=(R4)
         LA    R5,A$RPL                POINT TO THE RPL
         LA    R6,A$RPLX               RPL EXTENSION
         MVC   VTREQ00,=C'DEALLOC '
         BAL   R2,SENSE00              PRINT OUT THE SENSE INFO
CLOSEIT  DS    0H
         CLOSE A$ACB                   CLOSE THE VTAM ACB
         CLOSE (PARMS)                 CLOSE THE PARMS FILE
         CLOSE (PRINT)                 CLOSE THE PRINT FILE
         CLOSE (PRINTRC)               CLOSE THE RPL RETURN CODE FILE
         CLOSE (SNAPDUMP)              CLOSE THE SNAPDUMP PRINT AREA
FINIS    DS    0H
         L     R13,4(R13)
         L     R14,12(R13)
         LH    R15,SETRC               GET THE RETURN CODE THAT WAS SET
         RETURN (2,12),,RC(15)
* SCAN THE INPUT CARD SETTING FLAG BITS AND PARM POSITION ADDRESSES   *
PARSEPRM DS    0H
         MVI   CARDTYPE,X'00'          CLEAR CARD TYPE
         STM   R2,R9,PARSESAV          SAVE OUR REGISTERS
         LA    R7,CARDIN               POINT TO THE INPUT
         XR    R9,R9                   CLEAR REGISTER
         LA    R9,80(R9)               FURTHEST RIGHT A PARM CAN BE
PARLOOP  DS    0H
         CLC   0(7,R7),=C'SYSTEM='     SYSTEM= CARD ?
         BNE   TEST1                   - NO
         OI    CARDTYPE,TYPESYST       SET CARD TYPE
         ST    R7,ADDRSYST             SAVE THE ADDRESS
         B     NEXTBYT
*** - ADD CODE HERE TO PARSE OTHER PARAMETER CARDS - ***
TEST1    DS    0H                      ETC
NEXTBYT  DS    0H
         LA    R7,1(R7)                POINT TO THE NEXT BYTE
         BCT   R9,PARLOOP
* COMPLETED SCANNING THE INPUT CARD SO NOW DETERMINE AND SET THE      *
* PARAMETER VALUES ACCORDING TO THE FLAGS THAT HAVE BEEN SET.         *
* PROCESS THE SYSTEM= CARD                                            *
         TM    CARDTYPE,TYPESYST       IS IT A SYSTEM CARD ?
         BZ    PARSEEND                - NO
         MVC   SESSWITH,=C'        '   BLANK OUT SESSION NAME
         L     R7,ADDRSYST             POINT TO SYSTEM=
         LA    R7,7(R7)                POINT TO FIRST BYTE SYSTEM NAME
         XR    R9,R9                   CLEAR R9
         LA    R9,8(R9)                UP TO EIGHT BYTES
         LA    R6,SESSWITH             POINT TO SESSION NAME
SYSTNLOP DS    0H
         CLI   0(R7),X'40'             HIT A BLANK
         BE    ENDSYSTM                - YES
         CLI   0(R7),X'6B'             HIT A COMMA
         BE    ENDSYSTM                - YES
         MVC   0(1,R6),0(R7)           MOVE IT A BYTE AT A TIME
         LA    R6,1(R6)                NEXT BYTE SESSION WITH NAME
         LA    R7,1(R7)                NEXT BYTE INPUT
         BCT   R9,SYSTNLOP
ENDSYSTM DS    0H
***     - ADD CODE HERE TO DEAL WITH OTHER PARAMETER CARDS -     ***
PARSEEND DS    0H
         LM    R2,R9,PARSESAV          SAVE OUR REGISTERS
         BR    R2
* ROUTINE TO OUTPUT THE VARIOUS BITS OF FEEDBACK AND SENSE INFO.      *
* R2(RETURN ADDRESS) R5(RPL POINTER) R6(RPL EXTENSION POINTER)        *
SENSE00  DS    0H
         MVI   LISTOUT,X'40'           CLEAR THE
         MVC   LISTOUT+1(132),LISTOUT  - PRINT LINE
         LA    R3,LISTBODY             POINT TO THE LIST BODY
         USING SENSELIN,R3             USE THE DSECT
         MVC   SYSBID,=C'SYSB6200 -'   IDENTIFY FUNCTION
         MVC   SYSREQ0,VTREQ00         TYPE OF VTAM REQUEST
         MVI   SHEX00+4,X'FF'          SIGN FOR PROPAGATION
         MVC   TR15,=C'R15='
         ST    R15,SHEX00              STORE R15
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VR15,SPHEX00+6          SET THE RETURN CODE
         CLC   VTREQ00,=C'ACBOPEN '    OPEN ACB REQUEST ?
         BE    PUTRC00                 - YES SO R15 ONLY
         MVC   TR0,=C',R0='
         ST    R0,SHEX00               STORE R0
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VR0,SPHEX00+6           SET THE RETURN CODE
         CL    R5,=F'0'                GOT AN RPL ?
         BE    PUTRC00                 - NO
         USING IFGRPL,R5               ADDRESSABILITY
         XR    R4,R4                   CLEAR R4
         MVC   TRTN,=C',RTNCD='
         IC    R4,RPLRTNCD             GET THE RPL RETURN CODE
         ST    R4,SHEX00               STORE R4
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VRTN,SPHEX00+6          SET THE RETURN CODE
         MVC   TFDB2,=C',FDB2='
         IC    R4,RPLFDB2              GET THE FDBK2
         ST    R4,SHEX00               STORE R4
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VFDB2,SPHEX00+6         SET THE FEEDBACK CODE
         MVC   TFDB3,=C',FDB3='
         IC    R4,RPLFDB3              GET THE FDBK3
         ST    R4,SHEX00               STORE R4
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VFDB3,SPHEX00+6         SET THE FEEDBACK CODE
         CL    R6,=F'0'                GOT AN RPL EXTENSION ?
         BE    PUTRC00                 - NO
         USING ISTRPL6X,R6             ADDRESSABLILITY
         MVC   TRCPRI,=C',RCPRI='
         LH    R4,RPL6RCPR             GET THE FDB3
         ST    R4,SHEX00               STORE R4
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VRCPRI,SPHEX00+4        SET THE FEEDBACK CODE
         MVC   TRCSEC,=C',RCSEC='
         LH    R4,RPL6RCSC             GET THE FDB3
         ST    R4,SHEX00               STORE R4
         UNPK  SPHEX00(9),SHEX00       UNPACK IT
         TR    SPHEX00(8),TABLEX-240   TRANSLATE IT
         MVC   VRCSEC,SPHEX00+4        SET THE FEEDBACK CODE
PUTRC00  DS    0H
         PUT   PRINTRC,LISTOUT
         DROP  R5,R6
         BR    R2
* ERROR AND RETURN CODE SETTING                                       *
INQYFAIL DS    0H
         LA    R5,A$RPL                POINT TO THE RPL
         USING IFGRPL,R5               ADDRESSABILITY
         CLI   RPLRTNCD,X'14'          CHECK RPL RETURN CODE X'14'
         BNE   VTAMFAIL                - NO
         CLI   RPLFDB2,X'4C'           CHECK FDBK2 X'4C'
         BNE   VTAMFAIL                - NO
         MVC   SETRC,=H'120'           - YES X'14' AND X'4C'
         LH    R5,LEN12001             MESSAGE LENGTH
         LA    R4,ERR12001             POINT TO ERROR MESSAGE
         BAL   R3,PRINTMS
         B     CLOSEIT
         DROP  R5
VTAMFAIL DS    0H
         MVC   SETRC,=H'120'           SET RETURN CODE
         LH    R5,LEN12000             MESSAGE LENGTH
         LA    R4,ERR12000             POINT TO ERROR MESSAGE
         BAL   R3,PRINTMS
         B     DUMPIT
DUMPIT   DS    0H
         MVC   DUMPFROM,VTREQ00        IDENTIFY PROBLEM TYPE
         SNAP  DCB=SNAPDUMP,PDATA=ALL
         B     CLOSEIT
* PRINTING ORIENTED ROUTINES.                                         *
* REGISTER USAGE: R3(RETURN ADDRESS) R4(POINTER TO MSG) R5(MSG LENGTH)*
PRINTMS  DS    0H
         MVI   LISTOUT,X'40'           CLEAR THE
         MVC   LISTOUT+1(132),LISTOUT  - PRINT LINE
         EX    R5,MSGMOVE              VARIABLE LENGTH MOVE
PRINTIT  DS    0H
         PUT   PRINT,LISTOUT
         BR    R3
MSGMOVE  MVC   LISTBODY(0),0(R4)       MOVE THE MESSAGE
* SAVE AREA AND LITERALS                                              *
         LTORG
         DS    0F
SAVE6200 DC    18F'0'                  SAVE AREA
PARSESAV DC    8F'0'                   SAVE AREA
APPLNTAB DC    CL8'BATCH01'
         DC    CL8'BATCH02'
         DC    CL8'BATCH03'
         DC    CL8'BATCH04'
* COMMON DATA CSECT
COMNDATA CSECT
         DS    0D                      DOUBLE WORD ALIGN
         DC    CL8'DUMPFROM'
DUMPFROM DS    CL8                     IDENTITY OF PROBABLE CAUSE
CONTR15  DC    F'0'
CONTR0   DC    F'0'
SETRC    DC    H'0'
         DS    0F
ADDRSYST DS    F
CARDTYPE DS    CL1
TYPESYST EQU   X'01'
CARDIN   DS    CL80                    PARAMETER CARD INPUT AREA
SESSWITH DC    CL8' '
LISTOUT  DS    0CL133
LISTCONT DS    CL1
LISTBODY DS    CL132
SNAPDUMP DCB   DDNAME=SNAPDUMP,DSORG=PS,RECFM=VBA,LRECL=125,MACRF=(W), X
               BLKSIZE=1632
PRINT    DCB   DDNAME=PRINT62,DSORG=PS,RECFM=FA,LRECL=133,MACRF=PM
PRINTRC  DCB   DDNAME=PRINTRC,DSORG=PS,RECFM=FA,LRECL=133,MACRF=PM
PARMS    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,LRECL=80,EODAD=ENDSESS
TABLEX   DC    CL16'0123456789ABCDEF'
VTREQ00  DC    CL8' '
SHEX00   DS    CL5
SPHEX00  DS    CL9
         DS    0D
         DC    CL8'ACBACB  '
A$ACB    ACB   AM=VTAM,APPLID=APPL1,MACRF=LOGON
         DS    0D
         DC    CL8'RPLA    '
A$RPL    RPL   AM=VTAM,ACB=A$ACB
         DS    0D
         DC    CL8'RPLXA   '
A$RPLX   ISTRPL6
         DS    0D
         DC    CL8'NIBA    '
A$NIB    NIB   MODE=RECORD
APPL1    DC    X'08'                    APPLID
APPLNAM  DC    CL8'        '
         DC    CL8'FMH5FMH5'
A$FMH5   DC    AL1(A$FMH5L)
         DC    X'0502FF0003D00040'
         DC    AL1(L'A$TRN)
A$TRN    DC    CL4'UT62'
         DC    XL3'00'
A$FMH5L  EQU   *-A$FMH5
A$CONVID DC    F'0'
         DS    0H
A$SENDLN DC    H'82'                    LENGTH OF DATA TO SEND
A$DATA   DS    CL80                     MAX OF 256 BYTES
         DS    0H
A$RCVDAT DS    0CL82
A$RCVLN  DS    CL2
A$RCVMSG DS    CL80
* ERROR MESSAGES
         DS 0H                         HALFWORD ALIGN FOR LH OF LENGTH
ERR12000 DC CL44'ERR120-00 COMMUNICATIONS/TRANSACTION FAILURE'
LEN12000 DC AL2(*-ERR12000-1)
ERR12001 DC CL38'ERR120-01 UNKNOWN CICS SYSTEM ACB NAME'
LEN12001 DC AL2(*-ERR12001-1)
ERR12002 DC CL52'ERR120-02 CICS SYSTEM UNAVAILABLE FOR COMMUNICATIONS'
LEN12002 DC AL2(*-ERR12002-1)
ERR12003 DC CL70'ERR120-03 CANNOT FIND A FREE ACB(BATCH01-03) TO OPEN  X
               TRY AGAIN LATER'
LEN12003 DC AL2(*-ERR12003-1)
SYSB6200 CSECT
* EQUATES AND SYSTEM DSECTS                                           *
         DFHREGS
         IFGRPL AM=VTAM
         IFGACB AM=VTAM
         IFGEXLST AM=VTAM
         ISTSLCNS
         ISTFM5
         ISTDNIB
* OUR OWN DSECTS                                                      *
SENSELIN DSECT
SYSBID   DS    CL10
         DS    CL1
SYSREQ0  DS    CL8
         DS    CL1
TR15     DS    CL4
VR15     DS    CL2
TR0      DS    CL4
VR0      DS    CL2
TRTN     DS    CL7
VRTN     DS    CL2
TFDB2    DS    CL6
VFDB2    DS    CL2
TFDB3    DS    CL6
VFDB3    DS    CL2
TRCPRI   DS    CL7
VRCPRI   DS    CL4
TRCSEC   DS    CL7
VRCSEC   DS    CL4
         END   SYSB6200


Tim Armstrong
Systems Programmer (Australia)                          c Reserved 1992

