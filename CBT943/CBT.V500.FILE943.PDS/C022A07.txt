 CLISTs for unformatted system dumps

Do you spend time formatting region dumps or do you get the on-line system back
up as fast as possible and later on face the dreaded unformatted system dump?
This dilemma has been answered at Pacific Bell by the combined efforts of our
MVS and CICS technical support teams.  For us, the use of CLISTs executing
within IPCS has made dump reading much easier.

IPCS allows the user to manoeuvre quickly and accurately within an unformatted
dump and the CLISTs reduce certain repetitive and tedious tasks to a simple and
effortless procedure.

The CLISTs were designed to work with CICS 1.6.1 under MVS/XA, but little
modification is needed for a 1.7 conversion.  As written, they require the user
to input the address of the region's CSA.  This address is relatively stable in
our installations but, if this presents a problem, the CLIST can be changed to
establish the CSA address on its own.  Once the CSA address is established, the
CLIST is straightforward.

The first CLIST performs a series of evaluations and equates.  This serves to
match meaningful symbolic names with their actual addresses within the dump.
For example, after executing the CLIST you can type in L OPFLA in IPCS browse
and be taken to the optional features list address in the dump.  From there, you
can scan forwards or backwards, pick up another pointer or whatever else you'd
like to do.  The CLIST also executes a command %hex that performs a decimal to
hexadecimal conversion.  The following is a portion of the CLIST.

PROC 0 LIST PROMPT CONLIST SYMLIST
IF  LIST >
THEN CONTROL LIST
IF  PROMPT >
THEN CONTROL PROMPT
IF  CONLIST >
THEN CONTROL CONLIST
IF  SYMLIST >
THEN CONTROL SYMLIST
CONTROL NOMSG
GLOBAL  HEXVALUE  VALUE  RELCODE  BASECSA  OPFLA
ISPEXEC VGET BASECSA PROFILE
ISPEXEC CONTROL DISPLAY REFRESH
WRITENR IF DFHCSA IS BASECSA PRESS ENTER, OR TYPE NEW DFHCSA=>
READ INPUT
IF INPUT > THEN SET BASECSA = STR( INPUT)
ISPEXEC VPUT BASECSA PROFILE
SET  HEXVALUE =  BASECSA
EQU   DFHCSA  HEXVALUE..
EQU   Z1     DFHCSA REM('DFHCSA')

/* ----- OPTIONAL FEATURES LIST        */
EVAL DFHCSA C8 L(4) CLIST(STORAGE(OPFLA))
EQU Z2  OPFLA.. REM('OPTION FEATURES LIST')
EQU OPFLA Z2

/* ----- PROG CHECK/ABEND TRACE TABLE ------ */
EVAL OPFLA 1B4 L(4)
SET  PCATT =  LASTCC
%HEX  PCATT
SET  PCATT =  HEXVALUE
EQU PCATT  HEXVALUE..
EQU Z3 PCATT REM('PROGRAM CHECK ABEND TRACE TABLE')

/*       TRACE TABLE HEADER       */
EVAL DFHCSA 11C L(4)
SET  TRTABH =  LASTCC
%HEX  TRTABH
SET  TRTABH =  HEXVALUE
 EQU TRTABH  HEXVALUE..
The CLIST also stacks these values in IPCS browse, with descriptive remarks, so
that you can easily cross-reference the symbolic name with the address, build on
them as pointers, or refer back to them later on as needed.  Figure 1
illustrates this stacking.

Literally moments after the unformatted dump is produced, one can ask IPCS to
locate the currently dispatched task, the current trace entry, or whatever it is
you want to examine by selecting or supplying the symbolic name.

While the first CLIST has invariably been useful for me, this next one is even
more helpful, especially when investigating CICS waits.  The output has been
modelled on the Problem Determination Guide's Chapter 1.3:  An approach to wait
problems.  It places at your fingertips the entire active and suspend chains,
with their register 14 and ECB addresses, task-ids, and dispatch control
indicators.  Getting all this information yourself can be sheer drudgery, even
for a medium-sized CICS system.  The CLIST is shown below while Figure 2 lists a
sample output from this CLIST.

          PROC 0
          GLOBAL  HEXVALUE
/*    THIS IPCS CLIST WILL RETURN A LIST OF TASKS'
/*    DCA'S AND TCA'S AND ASSOCIATED INFORMATION
/*    TO AID IN PROBLEM DETERMINATION OF CICS DUMPS
BEGIN: WRITENR ENTER 6 DIGIT HEX CSA ADDRESS
          OR DEPRESS ENTER TO EXIT THIS CLIST ===>
          READ CSAADDR
          IF  CSAADDR =   THEN EXIT
          IF  LENGTH( CSAADDR)  = 6
             THEN DO
                 WRITENR NO  CSA ADDRESS NOT 6 HEX DIGITS,
                 HIT ENTER AND TRY AGAIN ===>
              END
           ELSE DO
              WRITENR ENTER CICS ASID IN DECIMAL ===>
           END
           READ  ASID1
           SETD ASID( ASID1) TERMINAL PRINT
           EQ CSAADDR  CSAADDR.. LE(4)
           EQ CSACK  CSAADDR.. C8  7C  LE(4)
           COMPARE ADDRESS(CSAADDR) WITH (ADDRESS(CSACK))
           IF  LASTCC  = 0 THEN DO
              WRITE      NOT A VALID CSA ADDRESS
              WRITENR    HIT ENTER AND TRY AGAIN ===>
              READ  B
              GOTO BEGIN:
           END
           ELSE DO
              WRITE CSA ADDRESS IS VALID
           END
ACTIVE:    EQ A CSAADDR BO  LE(4)   /* DCA ADDRESS */
           EQ B CSAADDR A4  LE(4)   /* END OF CHAIN ADDRESS */
           EQ M  CSAADDR.. BO LE(4)
           N 'SCANNING ACTIVE CHAIN' TERMINAL PRINT
              N 'DCA       DCA  TCA SYS   TCA      TCA
              TCA  TCA      TCA ECB' TERMINAL PRINT
              N 'ADDRESS   DCI  ADDRESS   REG14    TASK ID
              DCI  ABEND    ADDRESS' TERMINAL PRINT
           SET  J=1
           DO WHILE  J NE 0
              EVAL M LE(4) CLIST(STORAGE(ADCA))
              EVAL A 18 LE(2) CLIST(STORAGE(ADCADCI))
              EVAL A 14 LE(4) CLIST(STORAGE(ATCAUSR))
              EVAL  ATCAUSR.. LE(4) CLIST(STORAGE(ATCASYS))
              EVAL  ATCAUSR.. 20 LE(4) CLIST(STORAGE(ATCAR14))
              EVAL  ATCASYS.. 10 LE(4) CLIST(STORAGE(ATASKID))
               EVAL  ATCASYS.. CO LE(4) CLIST(STORAGE(ABENDID))
              EVAL  ATCAUSR.. 18 LE(2) CLIST(STORAGE(ATCADCI))
              EVAL  ATCAUSR.. 14 LE(4) CLIST(STORAGE(ATCAECB))
              N ' ADCA   ADCADCI  ATCASYS   ATCAR14  ATASKID
                 ATCADCI  ABENDID  ATCAECB' TERMINAL PRINT
              EQ M A C LE(4)
              COMPARE ADDRESS(A C ) WITH (ADDRESS(B)) LE(4)
              IF  LASTCC=0 THEN SET  J = 0
              EQ A A C  LE(4)
           END
SUSPEND:   EQ C CSAADDR A8  LE(4)   /* DCA ADDRESS */
           EQ D CSAADDR 9C  LE(4)   /* END OF CHAIN ADDRESS */
           EQ N  CSAADDR.. A8 LE(4)
           N 'SCANNING SUSPEND CHAIN' TERMINAL PRINT
              N 'DCA       DCA  TCA SYS   TCA      TCA
              TCA  TCA      TCA ECB' TERMINAL PRINT
              N 'ADDRESS   DCI  ADDRESS   REG14    TASK ID
              DCI  ABEND    ADDRESS' TERMINAL PRINT
           SET  K=1
           DO WHILE  K NE 0
              EVAL N LE(4) CLIST(STORAGE(SDCA))
              EVAL C 18 LE(2) CLIST(STORAGE(SDCADCI))
              EVAL C 14 LE(4) CLIST(STORAGE(STCAUSR))
              EVAL  STCAUSR.. LE(4) CLIST(STORAGE(STCASYS))
              EVAL  STCAUSR.. 20 LE(4) CLIST(STORAGE(STCAR14))
              EVAL  STCASYS.. 10 LE(4) CLIST(STORAGE(STASKID))
              EVAL  STCASYS.. CO LE(4) CLIST(STORAGE(SBENDID))
              EVAL  STCAUSR.. 18 LE(2) CLIST(STORAGE(STCADCI))
              EVAL  STCAUSR.. 14 LE(4) CLIST(STORAGE(STCAECB))
              N ' SDCA   SDCADCI  STCASYS   STCAR14  STASKID
                 STCADCI  SBENDID  STCAECB' TERMINAL PRINT
              EQ N C C LE(4)
              COMPARE ADDRESS(C C ) WITH (ADDRESS(D)) LE(4)
              IF  LASTCC=0 THEN SET  K = 0
              EQ C C C  LE(4)
           END

It has been my experience that this information is what IBM will ask you for, if
you need to go to them for support.  Once again, the CLIST can be easily
modified to add or subtract anything you wish.  Without IPCS and these CLISTs, I
would gladly spend the extra minutes formatting the region dumps, but with them
I believe it is unwise to do so.  By creative use of these CLISTs and others
like it, you may have chased your last chain!



James Eade
Staff Analyst
Pacific Bell (USA)  ) Pacific Bell 1987

















