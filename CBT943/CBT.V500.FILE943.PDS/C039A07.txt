 Apparent loss of DFHCOMMAREA contents
My colleagues and I recently encountered a bug which involved the apparent loss
of the contents of DFHCOMMAREA.  It came up when we were programming an
estimating system for a business forms manufacturer, written in OS/VS COBOL
under CICS 1.6.1.
Without getting into the minutiae of applications design, each program in the
estimating system used a DFHCOMMAREA containing system-wide common data followed
by varying amounts of program-dependent data.  In other words, a program could
receive different lengths of DFHCOMMAREA depending upon which other programs had
invoked it.  Each program in the system executed some start-up logic which moved
its DFHCOMMAREA from the linkage section to a working storage definition.
Sometimes, after attempting to execute this move, the working storage COMMAREA
definition would be found to contain low-values, even when the invoking program
had passed it a valid DFHCOMMAREA with a valid length.  We demonstrated this
under EDF.
For the purposes of discussion, we have three separate COMMAREA definitions
coming into play:
1    The COMMAREA definition referenced in the RETURN or XCTL statement of the
invoking program.
2    The COMMAREA definition appearing in the linkage statement of the invoked
program.
3    The COMMAREA definition appearing in the working storage section of the
invoked program.
We determined that the correct data would be passed from area 1 (the invoking
program) to area 2 (the linkage section of the invoked program), but could not
be moved to area 3 (working storage).
We were able to get some information from the IBM INFOMENU which indicated that
the problem can occur when area 2 was longer than area 1, causing improper code
to be generated when moving area 2 to area 3.  The improper code involves an
MVCL, which produces a destructive overlapping move.  In other words, suppose
your program has a 2500-byte linkage section DFHCOMMAREA definition, but it
receives a DFHCOMMAREA with an EIBCALEN of only 1000 bytes: you may have a
problem later when you move your 2500-byte linkage section DFHCOMMAREA to a
2500-byte working storage area; you may not be able to move this data
successfully.  The INFOMENU indicates that the problem occurs under both CICS
1.6 and 1.7, and that it occurs under both OS/VS COBOL 2.4 and VS COBOL II.
This whole situation is counter-intuitive.  First of all, you might expect data
loss or truncation if the receiving DFHCOMMAREA were shorter than the sending
DFHCOMMAREA, but not the other way around.  Second, you might expect that the
data loss would occur in the receiving programUs linkage section, but instead
the data loss doesnUt take place until you try to move the data to working
storage.
The IBM manuals mention this problem, but in an ambiguous manner.  Page 262 of
the CICS/VS 1.6 Application ProgrammerUs Reference manual states the following:
RThe data area need not be of the same length as the original communications
area; if access is required only to the first part of the data, the new data
area can be shorter.  It must not be longer than the length being passed,
because the results in this situation are unpredictable.S
This makes sense only when you understand that the data area here refers to the
linkage section DFHCOMMAREA definition in the invoked program, not the working
storage definition in the invoked program.  The length of the working storage
definition is not the cause of this problem, even though the problem occurs when
the data is moved to working storage.
To get around the problem we defined a single standard DFHCOMMAREA length to be
used throughout the estimating system.  If a program didnUt need to use the
trailer area at the end of the DFHCOMMAREA, it had to pass it along anyway.
This solved the problem for us.

Alida Jatich
Consultant
Cogito Corporation (USA) ) Cogito Corporation 1989





