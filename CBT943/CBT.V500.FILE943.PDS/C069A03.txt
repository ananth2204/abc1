Console, printer, and sequential reader sign-on

The following article refers to RACF and CICS, but the
problems it deals with are applicable to any other external
security interface.  The solutions described here developed
from requirements which came mainly from the application of
RACF in our CICS but could solve similar problems working
with other external interfaces.  These solutions can also be
applied in a system without any external security interface.


THE PROBLEM

When we installed the external security interface, RACF, in
our CICS system, we hoped to reach a stage where our system
would be protected by RACF only.  That is, we wanted to be
able to get rid of CICS internal security and, with it, our big
sign-on table.  When we reached the application phase we
learned that there were some problems and that it would not be
easy to get rid of the old security mechanism.

The problems which we faced were in the following areas:

o      Activating RACF protected transactions from a sequential reader.

o      Activating RACF protected transactions from a console.

o      Activating RACF protected transactions on printers.

The common denominator of these problems was the inability
to perform an end-user sign-on at these kinds of terminals.


THE OPTIONS

Our research into solving these problems included reading
CICS and RACF technical manuals as well as searching within
the IBM Info System, and requesting assistance from IBM
representatives.  The conclusion was that we had several
options, but as we will explain later, none of them was to our
total satisfaction nor did they answer all of our needs.


OUR OPTIONS

CSSN in sequential reader

Sign-on at a sequential reader can be accomplished by coding
transaction CSSN as the first transaction in the reader as follows:

      CSSN NAME=USERID,PS=PASSWORD

(CSSN must be unprotected by RACF and have SECKEY=01,
as is the case with all sign-on transactions.)

This will cause the user-id specified in the CSSN transaction to
sign on to the reader.  All subsequent transactions can then be
RACF-protected and will be activated (without a security
violation) provided that the specified user-id has the
corresponding authorizations.  Because the password is
exposed in the reader, we suggest that the user-id is defined as
permitted to sign-on only to the terminal-id of this sequential
reader.  This may be done by defining the group of the user-id
in resource class GTERMINL to RACF.  To avoid the need to
change the password in the reader from time to time, it is
advisable to define the password to RACF as 'non-expirable'.

This solution does not solve the problems we had when
working on consoles or printers with RACF.

Using a combination of external and internal security

We considered implementing the external security interface
only for transactions which are activated on end-user terminals
and to continue working with the existing CICS internal
security mechanism for transactions which are activated on
sequential readers, consoles, and printers.  This means that
every transaction which has to be executed on one of these
types of terminals cannot be protected by RACF (since it must
be defined within RDO or in the PCT with EXTSEC=NO).
The reader, console, or printer must have the same SECKEYs
as the transactions that will be executed on it.  In our
installation the reader would have to have had SECKEY=1-64
since we execute all type of transactions on it.

Since in our installation the same transaction can be executed
on the reader as well as from an end-user terminal, we had to
choose between:

1      Not protecting the transaction by RACF at all and then
      having to leave entries defining the user-ids which are
      authorized for this transaction in the sign-on table.

2      Duplicating the transaction, giving it a new name - having
      one transaction which is RACF protected for use by end
      users and the other protected by means of CICS internal
      security for use on readers, consoles, and printers.  The
      reader, console, or printer would have the corresponding
      SECKEY in the TCT.

Each one of the above solutions will bring into question the
whole idea of working with RACF, because we will be
working simultaneously with two security mechanisms with
their corresponding definitions.

In option 1, the same user-id will be defined in the SNT and to
RACF, which is undesirable in our view because we would like
to minimize the SNT to contain only one entry (ie the default
entry):

      DFHSNT    TYPE=(ENTRY,DEFAULT)

Option 2 is not desirable either, because of the increased size
of the PCT because of duplicate definitions.  Even accepting
this increase there is still a problem with IBM-supplied
transactions (such as CEMT, CSMT, etc) which can't be
duplicated because the programs check the transaction-id which
originated them.

When working on printers, we could use the first solution (ie
CSSN in a sequential reader) without any problems because
printing transactions are not generally used on end-user
terminals as attached transactions, but only by means of the
start command on printers (and therefore there is no need to
duplicate user-id or transaction-id definitions).  On the other
hand, for statistics and accounting purposes, we need to know
who in our system activates which transactions and uses which
resources.  That's why the lack of a sign-on facility on printers
presents a problem to us.


THE BASIS OF OUR SOLUTION

We have an IBM 3083 computer.  We currently run six CICS
systems under MVS/XA 2.0.0 and CICS 1.7.0.  They all have
the same SNT.  We were interested in reducing the SNT, to
contain only the default entry.  We had no intention of
duplicating transactions.  However, we wanted every
transaction in our system to have the possibility of executing on
a reader or console.

In our installation each user-id contains, as the first 4
characters, the identification of the customer, eg each one of
our customers may have several user-ids, one for every end
user.  We were interested in having our printers signed on to a
user identifying the customer printing on it for statistics and
accounting purposes.

We decided to find a solution which would address all our
problems.


OUR SOLUTION: SIGN-ON WITHOUT A PASSWORD

We decided to perform a sign on without a password for
readers, consoles, and printers using the IBM macro DFHSEC
as shown below:

      DFHSEC TYPE=(SIGNON,NOPASS),
            USERID=USERL,
            FMT=FORCE,
            TCTTE=(TCTTEAR)

For this purpose we wrote two programs (their listings are
shown below): SIGNON1 activated by SGN1 (for signing on to
a reader) and SIGNON2 activated by SGN2 (for signing on to
consoles or printers).


THE SEQUENTIAL READER

During the initialization of CICS, a sequential reader is
activated.  The first transaction in the reader is SGN1, which is
not protected by RACF and has SECKEY=01.  SGN1 signs on
without a password to the reader with a special user-id.  This
user-id is authorized by RACF to perform every existing
transaction.  It can sign on only to the reader.  This user-id's
password is defined as 'non expirable' to avoid the user-id
being revoked because the password hasn't changed, as we do
not use a password to sign on.  From now on, all needed
transactions may be activated on the reader.


CONSOLES

In our sequential reader, transaction SGN2 is performed for
each of our consoles performing a sign on without a password
with a user-id having the same definitions as described above
for the sequential reader.


PRINTERS

In our sequential reader, a transaction (SGN2) is activated for
each of our customers' printers.  It performs a sign on without
a password, with a special non-expirable user-id defined for
each of our customers.  For installations which do not use
sequential readers, a program similar to SIGNON2 can be
written to be executed in the PLTPI.


THE BENEFITS OF OUR SOLUTION

1      One solution for all problems

2      All transactions in the system will be protected by RACF

3      No need for the duplication of transaction definitions

4      Having a sign-on table including only the default entry

5      Having user-id information on transactions executed on printers.


PROTECTING ITS USE

To avoid the abuse of the macro DFHSEC for purposes other
than those listed above (or other good causes) by unauthorized
persons, we suggest you protect the macro library using RACF.
You can also create a compile and link procedure (for
programmers other than systems programmers) that will
include a preliminary translation step (before the CICS
translator), which will check for the use of the macro and will
not execute the next step if it is found.


TCT ENTRIES FOR SEQUENTIAL READER

      DFHTCT TYPE=SDSCI,
             DEVICE=2540,DSCNAME=READER,DDNAME=READER,MACRF=(R),
             BLKSIZE=80,RECFM=F
      DFHTCT TYPE=SDSCI,
             DEVICE=1403,DSCNAME=OMPRINT,DDNAME=OMPRINT
      DFHTCT TYPE=LINE,ACCMETH=SAM,TRMTYPE=CRLP,ISADSCN=READER,
             OSADSCN=OMPRINT,INAREAL=120,TCTUAL=255
      DFHTCT TYPE=TERMINAL,TRMSTAT=TRANSCEIVE,
             OPERPRI=200,TRMPRTY=200,
             TRMIDNT=SA01,TRMTYPE=CRLP,TCTUAL=255,TIOAL=120


EXAMPLE OF TRANSACTIONS IN SEQUENTIAL READER

SGN1-                          SIGN-ON READER
SGN2 TERM=CON0,ID=CICSUSRD-    SIGN-ON CONSOLE NO 0
SGN2 TERM=CON1,ID=CICSUSRD-    SIGN-ON CONSOLE NO 1
SGN2 TERM=PRT1,ID=USERID1-     SIGN-ON PRINTER OF USERID NO 1
SGN2 TERM=PRT2,ID=USERID2-     SIGN-ON PRINTER OF USERID NO 2


JCL CARD IN CICS JOB STREAM DEFINING READER

//READER     DD   DSN=CICS.READER,DISP=SHR


PROGRAM SOURCE CODE FOR SEQUENTIAL READER SIGN-ON

***  SIGNON1  PERFORMS SIGN-ON WITHOUT PASSWORD TO THE SEQUENTIAL ***
*             READER USING SIGN-ON WITHOUT PASSWORD, WITH A USERID  *
*             DEFINED IN RACF.                                      *
*             THE USERID'S PASSWORD IS UNEXPIRABLE.                 *
***           THE PROGRAM IS INITIATED BY SGN1 IN THE READER.     ***
         DFHREGS
         GBLB  &DFHEIMX
&DFHEIMX SETB  1
TCTTEAR  EQU   R9
         COPY  DFHCSADS
         DFHTCA   CICSYST=YES
         COPY  DFHTCTTE
DFHEISTG DSECT
USER     DS    0CL9             LENGTH OF USERID+USERID
USERL    DS    X                LENGTH OF USERID
USERID   DS    CL8              USER TO BE SIGNED 0N
         DFHSEC TYPE=LIFO
SIGNON1  DFHEIENT DATAREG=3,CODEREG=4,EIBREG=5
         MVI  USERL,X'08'            MOVE TERM USERID LENGTH
         MVC  USERID,=CL8'CICSUSRD'  MOVE TERM USERID
         L    TCTTEAR,TCAFCAAA       ADDRESSABILITY TO READER'S TCTTE
         DFHSEC TYPE=(SIGNON,NOPASS),
               USERID=USER,
               FMT=FORCE,
               TCTTE=(TCTTEAR)
         LTR  RF,RF                 SIGNON OK?
         BNZ  RETURN                RC NO EQ 0: SIGNON FAILED
         ST   R0,TCTTESNT             SAVE PSEUDO SNTTE ADDR IN TCTTE
RETURN   EQU  *
         EXEC CICS RETURN
         END


PROGRAM SOURCE CODE FOR CONSOLE AND PRINTER SIGN-ON

*** SIGNON2  PERFORMS SIGN-ON WITHOUT PASSWORD TO CONSOLE/PRINTER***
*            WITH TERMID AND USERID AS RECEIVED FROM INPUT.        *
*   INPUT: SGN2,TERM=XXXX,ID=YYYYYYYY                              *
***       (XXXX:TERMID  YYYYYYYY:USERID)                         ***
         GBLB  &DFHEIMX
&DFHEIMX SETB  1
         DFHREGS
SNNTBAR  EQU   R11
TCTTEAR  EQU   R10
TIOABAR  EQU   R9
*****          R7   WORK REGISTER  *****
         COPY  DFHCSADS
         DFHTCA  CICSYST=YES
         COPY  DFHTCTTE
         DFHSNT TYPE=DSECT
         USING  DFHSNNT,SNNTBAR
         COPY  DFHTIOA
SGN2     DS    CL4
         DS    CL6              ' TERM='
TERMIDT  DS    CL4              TERMINAL TO BE SIGNED ON (TIOA)
         DS    CL4              ',ID='
USERIDT  DS    CL8              USER TO BE SIGNED ON (TIOA)
DFHEISTG DSECT
USER     DS    0CL9             LENGTH OF USERID+USERID
USERL    DS    X                LENGTH OF USERID
USERID   DS    CL8              USER TO BE SIGNED ON
CHARDELM DS    X
TERMID   DS    CL4              TERMINAL TO BE SIGNED ON
MYTCTTE  DS    F                ADDRESS OF MY TCTTE
MESSAGE  DS    CL40
         DFHSEC TYPE=LIFO
SIGNON2  DFHEIENT DATAREG=4,EIBREG=5,CODEREG=6
         L     TCTTEAR,TCAFCAAA     GET CURRENT TCTTE ADDRESS..
         ST    TCTTEAR,MYTCTTE      ...AND SAVE IT
         L     TIOABAR,TCTTEDA      ADDRESSABILITY TO TIOA
         MVC   TERMID,TERMIDT
         MVC   USERID,USERIDT
         LR    R7,USERID
***                SIGN-ON WITHOUT PASSWORD                      ***
         MVC   TCATPTA(4),TERMID     LOCATE CONSOLE/PRINTER IN TCTTE
         DFHTC CTYPE=LOCATE,
               TERM=ID,
               INVID=TERMNFND
         L    TCTTEAR,TCATPTA        ADDRESSABILITY TO TERMINAL
         MVI  CHARDELM,X'40'         BLANK INDICATES END OF USERID
         TRT  0(9,R7),DELMTB         FIND END OF USERID
         SR   R1,R7                  FIND LENGTH OF USERID
         LR   R7,R1
         STC  R7,USERL               SAVE USERID LENGTH
         DFHSEC TYPE=(SIGNON,NOPASS),
               USERID=USER,
               FMT=FORCE,
               TCTTE=(TCTTEAR)
         LTR  RF,RF                 SIGNON OK?
         BNZ  SGNFAIL               RC NO EQ 0: SIGNON FAILED
         ST   R0,TCTTESNT           SAVE PSEUDO-SNTTE ADDRESS IN TCTTE
OK       EQU  *
         MVC   MESSAGE,=CL40' >>>>> TERM <<<<  SIGNON COMPLETED.'
         MVC   MESSAGE+12(4),TERMID
         B     SEND
TERMNFND EQU  *
         MVC   MESSAGE,=CL40' >>>>> TERM <<<<  NOT FOUND IN TCT!!!'
         MVC   MESSAGE+12(4),TERMID
         B     SEND
SGNFAIL  EQU  *
         MVC   MESSAGE,=CL40' >>>>> TERM <<<<  SIGNON FAILED !!!!!!!'
         MVC   MESSAGE+12(4),TERMID
*    SEND MESSAGE TO TERMINAL AND RETURN   *
SEND     EQU  *
         L     TCTTEAR,MYTCTTE        RESTORE ADDRESS OF CURRENT TCTTE
         EXEC CICS SEND FROM(MESSAGE) LENGTH(40)
         EXEC CICS RETURN
DELMTB   DC   256X'00'                DELIMITERS TABLE
         ORG  DELMTB+X'00'            BINARY ZEROES
         DC   X'FF'
         ORG  DELMTB+X'40'            BLANK
         DC   X'FF'
         ORG  DELMTB+X'E0'            BACK SLASH
         DC   X'FF'
         ORG
         LTORG
         END


Mohaban Meir and Dalia Fisch
Systems  Programmers (Israel)

