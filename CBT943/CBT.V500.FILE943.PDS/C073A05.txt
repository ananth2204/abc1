Scanning programs for restricted statements

Because of problems during our conversion from CICS 1.7 to
CICS 2.1 and errors caused by inexperienced programmers
using OS/VS COBOL statements and features restricted under
CICS 2.1 (see CICS/MVS Version 2.1 Application
Programmer's Reference Manual pages 25-26), we wrote the
following REXX program.  It scans COBOL source
statements, prior to their being processed by the CICS
translator, looking for problem code.  An example of the error
report produced is shown in Figure 1.  Any changes needed are
made by hand to ensure that programmers are made aware of
earlier mistakes.

The use of variable length working storage areas produced by
the OCCURS...DEPENDING ON clause is apparently still a
'grey' area.  IBM, at present, will offer no explanation as to
why results can be unpredictable, only that they are likely to
be.


CICSSCAN REXX program

/****************** REXX **********************************************/
/* This REXX program reads a CICS COBOL compile deck to check for:    */
/*   1. Restricted COBOL verbs as shown in Badword array below        */
/*   2. Use of "OCCURS...DEPENDING ON" and "SIGN IS SEPARATE" in      */
/*      Working-Storage.                                              */
/*   3. Use of DATASET option in CICS file accessing (To be replaced  */
/*      by FILE option - for eventual CICS/ESA Version 3 upgrade)     */
/*   4. Use of SET option in CICS file accessing that is not followed */
/*      by a "SERVICE RELOAD"                                         */
/* If any of the above 'error' conditions are found the source code   */
/* line and an associated message are printed out and this program    */
/* will, after scanning all source lines, end with return code 12.    */
/* Otherwise, the source code line is passed to a work-file to be     */
/* processed by the remainder of the translator/compile/link process  */
/* Arguments required:  member - name of program being scanned        */
/*                      quote  - the literal delimiter used in the    */
/*                               source code. either ' (APOST) or     */
/*                               " (QUOTE).                           */
/**********************************************************************/
arg member quote     /* eg PROGNAM " */
 /*trace ?r*/
/******************* setup badword array *****************************/
Badword.1 = " ABEND "
Badword.2 = " ACCEPT "
Badword.3 = " ALTER "
Badword.4 = " CANCEL "
Badword.5 = " CURRENT-DATE "
Badword.6 = " CLOSE "
Badword.7 = " DATE "
Badword.8 = " DAY "
Badword.9 = " DISPLAY "
Badword.10 = " EXHIBIT "
Badword.11 = " INSPECT "
Badword.12 = " OPEN "
Badword.13 = " READ "
Badword.14 = " REWRITE "
Badword.15 = " SORT "
Badword.16 = " STRING "
Badword.17 = " STOP "  /* as in STOP RUN */
Badword.18 = " TRACE "
Badword.19 = " TIME "
Badword.20 = " UNSTRING "
Badword.21 = " WRITE "
Badword.22 = "9999999"     /* array delimiter */
/***************** setup flags/switches/print lines *******************/
procdiv_found = "NO"
linkage_found = "NO"
workstor_found = "NO"
dataset_found = "NO"
within_cics = "NO"
badcard_found = "NO"
eofflag = 2
line_count = 0
blank_line = SUBSTR(' ',1,133,' ')
source_line = SUBSTR('Above error found in source line ',1,33,' ')
dataset_lit = SUBSTR('Replace DATASET with FILE',1,26,' ')
/******************* allocate newstack for i/o ***********************/
"NEWSTACK"
/******************* read cobol source file  *************************/
Getcard:
"EXECIO 1 DISKR CARDS"
 return_code = RC
 IF return_code = eofflag THEN
   SIGNAL Endcards
 ELSE NOP
 PULL record
 line_count = line_count + 1
/******************* check if comment card ***************************/
 IF POS('*',record) = 7 THEN
   SIGNAL Cardok
 ELSE NOP
/***** check if procedure division found, if so check code ***********/
 IF procdiv_found = 'YES' THEN
    SIGNAL Code_check
/*********** look for Procedure Division header ***********************/
 IF POS('PROCEDURE',record) = 8 THEN
   DO
     procdiv_found = 'YES'
     SIGNAL Cardok
   END
 ELSE NOP
/********* if in Linkage Section accept card as good ******************/
 IF linkage_found = 'YES' THEN
    SIGNAL Cardok
/************** look for Linkage Section header ***********************/
 IF POS('LINKAGE',record) = 8 THEN
   DO
     linkage_found = 'YES'
     SIGNAL Cardok
   END
 ELSE NOP
/****** if in Working Storage check - 1. Is this a literal line     ***/
/******                                  assume next two statements ***/
/******                                  are not in same line       ***/
/******                               2. occurs... DEPENDING ON     ***/
/******                               3. sign is SEPARATE           ***/
 IF workstor_found = 'YES' THEN
   DO
     IF POS(Quote,record,12) > 0 THEN
        SIGNAL Cardok
     ELSE
        DO
          badpos = POS(' DEPENDING ',record,12)
          IF badpos > 0 THEN
            DO
              inv_len = 10
              SIGNAL Badcard
            END
          ELSE
            DO
              badpos = POS(' SEPARATE',record,12)
              IF badpos > 0 THEN
                DO
                  inv_len = 9
                  SIGNAL Badcard
                END
              ELSE
                SIGNAL Cardok
            /*ENDIF*/
            END
        /*ENDIF*/
        END
   /*ENDIF*/
   END
 ELSE NOP
/********** look for Working-Storage Section header *******************/
 IF POS('WORKING-STORAGE',record) = 8 THEN
   DO
     workstor_found = 'YES'
     SIGNAL Cardok
   END
 ELSE
    SIGNAL Cardok
/************ We are now in Procedure Division - Check the code *******/
/********** Is this a paragraph or section name ***********************/
Code_check:
Col8_col11 = SUBSTR(record,8,4)
 IF Col8_col11 = '    ' THEN
    SIGNAL Cics_check
 ELSE
    SIGNAL Cardok
/********** Is this a genuine EXEC CICS command ***********************/
Cics_check:
 IF POS('CICS',record,12) > 0 THEN
   DO
     within_cicsexec = 'YES'
     IF POS('END-EXEC',record,12) > 0 THEN  /*accept card if END-EXEC */
        SIGNAL Cardok                       /*on same card as CICS    */
     ELSE
        DO
          badpos = POS('DATASET',record,12) /*is DATASET on same card */
          IF badpos > 0 THEN
             DO
               inv_len = 7
               dataset_found = 'YES'
               SIGNAL Badcard
             END
          ELSE
             DO
               SIGNAL Cardok
             END
        END
   END
 ELSE NOP
/********** Is this an END-EXEC statement *****************************/
 IF POS('END-EXEC',record,12) > 0 THEN
   DO
     within_cicsexec = 'NO'
     SIGNAL Cardok
   END
 ELSE NOP
/********* If within EXEC CICS, is option DATASET being used  *********/
/********** Also is a SET option being used. This is required *********/
/********** for subsequent checking for a SERVICE RELOAD      *********/
/********** following the use of a SET option                 *********/
 IF within_cicsexec = 'YES' THEN
    DO
      badpos = POS('DATASET',record,12)
      IF badpos > 0 THEN
         DO
           inv_len = 7
           dataset_found = 'YES'
           SIGNAL Badcard
         END
      ELSE
         DO
           IF POS('SET',record,12) > 0 THEN
              DO
                set_found = 'YES'
                set_line = line_count
                SIGNAL Cardok
              END
           ELSE SIGNAL Cardok
         END
    END
 ELSE NOP
/********** Check non EXEC CICS code as follows:  *********************/
/********** 1. Find if line contains literal string by looking for ****/
/**********    first and last ' or ". Assumes that literal does    ****/
/**********    not span more than one line of source code.         ****/
/********** 2. If line contains literal loop thru Badword array    ****/
/**********       checking for badword in Cobol line either before ****/
/**********       the start of the literal, or after the end of    ****/
/**********       the literal.                                     ****/
/**********    Else loop thru Badword array checking for badword   ****/
/**********         in Cobol line column 11 onwards. (Because      ****/
/**********         badwords are setup as " badword " not to trap  ****/
/**********         such words in a label eg ABC-READ-PARA.)       ****/
Check_rest:
Frstpos = 0
Lstpos = 0
Frstpos = POS(Quote,record,12)
IF Frstpos > 0 THEN
  DO
    Lstpos = LASTPOS(Quote,record)
    IF Lstpos > 0 THEN
      DO
        SIGNAL Literal
      END
    ELSE NOP
  END
ELSE NOP
/********** We are on a normal non 'EXEC CICS' COBOL source line ******/
/********** 1. Check if a SERVICE RELOAD is required to satisfy  ******/
/**********    a previous EXEC CICS command using the SET option ******/
/********** 2. Loop thru Badword array looking for occurrence of ******/
/**********    a badword in the source code.                     ******/
IF set_found = 'YES' THEN
   DO
     set_found = 'NO'
     IF POS(' RELOAD ',record,12) = 0 THEN
        DO
          SIGNAL Noreload
        END
     ELSE
        DO
          SIGNAL Cardok
        END
   END
ELSE NOP
Continue:
DO I = 1 BY 1 UNTIL Badword.I = '9999999'
   Badpos = POS(Badword.I,record,11)
   IF Badpos > 0 THEN
      DO
        inv_len = LENGTH(Badword.I)
        SIGNAL Badcard
      END
   ELSE NOP
END
SIGNAL Cardok
/********** We have found a literal embedded in normal non     ********/
/********** 'EXEC CICS' COBOL source code.                     ********/
/********** Process by looping thru the Badword array checking ********/
/********** for an occurrence of a badword before the opening  ********/
/********** of the literal or after the closing quote.         ********/
Literal:
DO I = 1 BY 1 UNTIL Badword.I = '9999999'
   Badpos = POS(Badword.I,record,11)
   IF Badpos > 0 THEN
      DO
        IF Badpos < Frstpos THEN
           DO
             inv_len = LENGTH(Badword.I)
             SIGNAL Badcard
           END
        ELSE
           DO
             IF Badpos > Lstpos THEN
                DO
                  inv_len  = LENGTH(Badword.I)
                  SIGNAL Badcard
                END
             ELSE NOP
           END
      END
   ELSE NOP
END
SIGNAL Cardok
/********** Cardok and Badcard processing follows *********************/
Cardok:
PUSH record
"EXECIO 1 DISKW COBOLSRC"
SIGNAL Getcard
/**/
Badcard:
IF badcard_found = 'NO' THEN
  DO
   badcard_found = 'YES'
   PUSH '          CICS COBOL scan error report for 'member
   "EXECIO 1 DISKW ERRPRINT"
   PUSH '          =========================================='
   "EXECIO 1 DISKW ERRPRINT"
   PUSH '                   '
   "EXECIO 1 DISKW ERRPRINT"
   PUSH '                   '
   "EXECIO 1 DISKW ERRPRINT"
   PUSH '                   '
   "EXECIO 1 DISKW ERRPRINT"
  END
PUSH record
"EXECIO 1 DISKW ERRPRINT"
nth = badpos - 1
new_line = INSERT('*',blank_line,nth,inv_len,'*')
PUSH new_line
"EXECIO 1 DISKW ERRPRINT"
error_line = INSERT(source_line,blank_line,1,33,' ')
error_line = INSERT(line_count,error_line,34,5,' ')
IF dataset_found = "YES" THEN
   DO
     dataset_found = 'NO'
     error_line = INSERT(dataset_lit,error_line,42)
   END
ELSE NOP
PUSH error_line
"EXECIO 1 DISKW ERRPRINT"
PUSH '                   '
"EXECIO 1 DISKW ERRPRINT"
SIGNAL Getcard
/********** No SERVICE RELOAD found following a SET option ************/
Noreload:
PUSH 'No SERVICE RELOAD found following SET option on line 'set_line
"EXECIO 1 DISKW ERRPRINT"
PUSH '                                                            '
"EXECIO 1 DISKW ERRPRINT"
SIGNAL Continue
/********** End of file processing ************************************/
Endcards:
IF badcard_found = 'YES' THEN
  DO
    PUSH '                   '
    "EXECIO 1 DISKW ERRPRINT"
    PUSH '******* Amend verbs/options indicated and re-compile ******'
    "EXECIO 1 DISKW ERRPRINT"
  END
ELSE NOP
"EXECIO 0 DISKR CARDS (FINIS"
"EXECIO 0 DISKW COBOLSRC (FINIS"
"EXECIO 0 DISKW ERRPRINT (FINIS"
"FREE FI(CARDS)"
"FREE FI(COBOLSRC)"
"FREE FI(ERRPRINT)"
/********** Terminate with correct return code ************************/
IF badcard_found = 'NO' THEN
 EXIT 0
ELSE
 EXIT 12


CICSSCAN JCL skeleton

//STEP1 EXEC PGM=IKJEFT01,DYNAMNBR=10
//CARDS    DD DSN=source.library(&MEMBER),DISP=SHR
//ERRPRINT DD DSN=&ZUSER..RS.PRINT,DISP=(NEW,CATLG,DELETE),
//         SPACE=(CYL,(1,1)),UNIT=unit,
//         DCB=(BLKSIZE=1330,LRECL=133,RECFM=FB)
//COBOLSRC DD DSN=&ZUSER..RS.COBOL,DISP=(NEW,CATLG,DELETE),
//         SPACE=(CYL,(1,1)),UNIT=unit,
//         DCB=(BLKSIZE=800,LRECL=80,RECFM=FB)
//SYSPRINT DD SYSOUT=*
//SYSTSPRT DD SYSOUT=*
//SYSPROC  DD DSN=Rexx.exec.library,DISP=SHR
//SYSTSIN  DD *
%CICSSCAN &MEMBER &QUOTE
/*


David Matthews
Chief Technical Programmer (UK)

