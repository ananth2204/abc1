Displaying CICS/BMS maps under CMS (continued)

This month, we conclude our article on how to display
CICS/BMS maps under CMS by publishing the code of the
remaining component, the MAPGEN EXEC.


MAPGEN EXEC

/* ----------------------------------------------------------------------*/
/* MAPGEN : Interprets a BMS source file                                 */
/* This procedure is invoked by MAPPRINT and MAPVIEW execs.              */
/* It produces an output file that will be read and processed by         */
/* these procedures. No input checking is done, it's done by the         */
/* caller procedures.                                                    */
/* ----------------------------------------------------------------------*/
     trace o
/* Get input parameters from caller procedure                            */
     arg FNAME FTYPE FMODE DELIM MAPNAME .
/* Setting some constants                                                */
     address command "CP SET EMSG OFF"
     address command "CP SET IMSG OFF"
     push  FNAME FTYPE FMODE
     pull  SRC_NAME
     FTYPE2 = '$' || MAPNAME
     FTYPE3 = '$FIELDS'
     push  FNAME FTYPE2 'A'
     pull  WORK_FILE
push  FNAME FTYPE3 'A'
     pull  VAR_FILE
     push  'DFHMSD DFHMDI DFHMDF LINE COLUMN ATTRB POS LENGTH INITIAL OCCURS'
     pull   MSD    MDI    MDF    LIN  COL    ATT   PST LNG    INT     OCC
     push  'SIZE'
     pull   SIZ
     address CMS "ERASE" WORK_FILE
     address CMS "ERASE" VAR_FILE
/* ----------------------------------------------------------------------*/
/*                        DFHMDI                                         */
/* ----------------------------------------------------------------------*/
/* Searching for the MAP in the MAPSET                                   */
     address CMS "EXECIO * DISKR" SRC_NAME "( LOC /"MAPNAME"/ Z 1 8"
     if rc ¬= 0 then call error001
     pull RL_LINE ABS_LINE
     parse pull SRC_LINE
     if pos(MDI,SRC_LINE) = 0 then call error002 /* Is it a DFHMDI ? */
     push '0 0 0 0'
     pull FLAG_LIN_MDI FLAG_COL_MDI FLAG_SIZ_MDF FLAG_MDF
mdi_process:                             /* Get the options from DFHMDI  */
/* ----------------------------------------------------------------------*/
/*  DFHMDI : SIZE    Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(SIZ,SRC_LINE)         /* SIZ Option    ...            */
     ITEM = SIZ
     if POS_LIN ¬= 0 then do ;                   /* SIZE   Found         */
          if FLAG_SIZ_MDI = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+4,1) ¬= "=" ;       /* = Sign Here? */
            then call error004                           /* No : error   */
    /* Get First Info (Line position) From SIZ parameter            */
          if substr(SRC_LINE,POS_LIN+5,1) ¬= "(" ;       /* ( Sign Here? */
            then call error013                           /* No : error   */
          POS_COM = pos(',',SRC_LINE,POS_LIN)            /* 1st Delimiter*/
          if POS_COM = 0 then call error014              /* Not a Comma  */
          LIN_SIZ = substr(SRC_LINE,POS_LIN+6,(POS_COM-(POS_LIN+6)))
          if datatype(LIN_SIZ) ¬= "NUM" ;                /* Should be NUM*/
            then call error005
    /* Get Second Info (Column position) From SIZ parameter              */
          POS_SCD = pos(")",SRC_LINE,POS_COM)            /* 2nd Delimiter*/
          if POS_SCD = 0 then call error015              /* Not found    */
          COL_SIZ = substr(SRC_LINE,POS_COM+1,(POS_SCD-(POS_COM+1)))
          if datatype(COL_SIZ) ¬= "NUM" ;                /* Should be NUM*/
           then call error005
          POS_LIN = pos(SIZ,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_SIZ_MDI = 1                               /* Flag Found   */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDI : LINE    Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(LIN,SRC_LINE)         /* LINE option ...              */
     ITEM = LIN
     if POS_LIN ¬= 0 then do ;                   /* LINE Found           */
          if FLAG_LIN_MDI = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+4,1) ¬= "=" ;      /* = Sign Here   */
           then call error004                           /* No Error      */
          POS_COM = pos(',',SRC_LINE,POS_LIN)           /* End delimiter */
          if POS_COM = 0 then ;                         /* Not a Comma   */
            POS_COM = pos(' ',SRC_LINE,POS_LIN)         /* Is it a blank?*/
          if POS_COM = 0 then ;                         /* No : RECFM = V*/
            POS_COM = length(SRC_LINE) + 1
          LIN_MDI = substr(SRC_LINE,POS_LIN+5,(POS_COM-(POS_LIN+5)))
          if datatype(LIN_MDI) ¬= "NUM" ;               /* Should be NUM */
            then call error005
          POS_LIN = pos(LIN,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_LIN_MDI = 1                               /* Flag Found   */
          ABS_LIN_MDI = LIN_MDI - 1           /* To compute MDF position */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDI : COLUMN  Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(COL,SRC_LINE)               /* COLUMN Option ...      */
     ITEM = COL
     if POS_LIN ¬= 0 then do ;                   /* COLUMN Found         */
          if FLAG_COL_MDI = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+6,1) ¬= "=" ;       /* = Sign Here? */
            then call error004                           /* No : error   */
          POS_COM = pos(',',SRC_LINE,POS_LIN)            /* End delimiter*/
          if POS_COM = 0 then ;                          /* Not a Comma  */
            POS_COM = pos(' ',SRC_LINE,POS_LIN)          /* It's a Blank */
          if POS_COM = 0 then ;                         /* No : RECFM = V*/
            POS_COM = length(SRC_LINE) + 1
          COL_MDI = substr(SRC_LINE,POS_LIN+7,(POS_COM-(POS_LIN+7)))
          if datatype(COL_MDI) ¬= "NUM" ;                /* Should be NUM*/
            then call error005
          POS_LIN = pos(COL,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_COL_MDI = 1                               /* Flag Found   */
          ABS_COL_MDI = COL_MDI - 1           /* To compute MDF position */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDI : End of Line Controls.                                       */
/* ----------------------------------------------------------------------*/
/* Loop if Continuation Character                                        */
     if substr(SRC_LINE,72,1) ¬= " " then do ;   /* Continuation Char. ? */
          SRC_LINE = substr(SRC_LINE,1,71)       /* Is a Comma Here ?    */
          SRC_LINE = space(SRC_LINE)
          POS_COM = substr(SRC_LINE,length(SRC_LINE),1)
          if POS_COM ¬= "," then call error027   /* No Comma : Error     */
          ABS_LINE = ABS_LINE + 1                /* Yes : Read New Line  */
          address CMS "EXECIO 1 DISKR" SRC_NAME ABS_LINE
          if rc ¬= 0 then call error001
          parse pull SRC_LINE
          signal mdi_process                     /* Process it again     */
    end
/* ----------------------------------------------------------------------*/
/*  DFHMDI : End of Macro Controls.                                      */
/* ----------------------------------------------------------------------*/
/* No Continuation Character                                             */
     SRC_LINE = space(SRC_LINE)                  /* Is a Comma Here ?    */
     POS_COM = substr(SRC_LINE,length(SRC_LINE),1)
     if POS_COM = "," then call error028         /* Yes : Error          */
     if FLAG_LIN_MDI=0 & FLAG_COL_MDI=0 then do; /* Are all the Info here*/
          if COL_SIZ = 80 & LIN_SIZ = 24 then do;
               ABS_LIN_MDI = 0
               ABS_COL_MDI = 0
          end
          else    call error007                  /* No : error           */
     end
/* ------------------------------------------------------------------*/
/*                        DFHMDF                                     */
/* ------------------------------------------------------------------*/
/*                Initialization for DFHMDF Process.                 */
init_mdf_process:
     push '0 0 0 0 0'
     pull FLAG_POS_MDF FLAG_ATT_MDF FLAG_LNG_MDF FLAG_INT_MDF FLAG_OCC_MDF
     push '0 0 0 0 0 0'
     pull ATT_UNPROT ATT_ASKIP ATT_BRT FLAG_MANY_ATT OCC_MDF CONTINUE
     push ' '
     pull INT_MDF
     push '0'
     pull COUNT_INT
/*                Get the options from DFHMDF macro                      */
mdf_process:
     ABS_LINE = ABS_LINE + 1                     /*    Read New Line     */
     address CMS "EXECIO 1 DISKR" SRC_NAME ABS_LINE
     if rc  = 2 then call end_map
     if rc ¬= 0 then call error001
     parse pull SRC_LINE
/* ----------------------------------------------------------------------*/
/*  DFHMDF : New Line Controls.                                          */
/* ----------------------------------------------------------------------*/
     if substr(SRC_LINE,1,1) = '*' then ;        /* Is it a Comment?     */
       signal mdf_process                        /* Yes : next line      */
     POST = pos(MDF,SRC_LINE)                    /* Is it a DFHMDF ?     */
     if POST ¬= 0 then do ;                      /* Controls             */
          if FLAG_MDF = 1 & CONTINUE = 1 then call error008  /* Not here */
          FIELD_VAR =  substr(SRC_LINE,1,7)      /* Type the field name  */
          if FIELD_VAR ¬= ' ' then do;
            FIELD_VAR = '  ' FIELD_VAR 'Line :' ABS_LINE
            address CMS "EXECIO 1 DISKW" VAR_FILE "(FINI STRING " FIELD_VAR
            if rc ¬= 0 then call error030
          end
     end
     POST = pos(MDI,SRC_LINE)                    /* Is it a DFHMDI ?     */
     if POST ¬= 0 then do ;                      /* Controls             */
       if FLAG_MDF = 1 & CONTINUE = 1 then call error009     /* Not Here */
       if FLAG_MDF = 1 & CONTINUE = 0 then call end_map      /* Finish...*/
       if FLAG_MDF = 0 & CONTINUE = 0 then call error010     /* Not Here */
     end
     POST = pos(MSD,SRC_LINE)                    /* Is it a DFHMSD ?     */
     if POST ¬= 0 then do ;                      /* Controls             */
       if FLAG_MDF = 1 & CONTINUE = 1 then call error011     /* Not Here */
       if FLAG_MDF = 1 & CONTINUE = 0 then call end_map      /* Finish...*/
       if FLAG_MDF = 0 & CONTINUE = 0 then call error012     /* Not Here */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDF : INITIAL Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(INT,SRC_LINE)          /* INITIAL Option...           */
     ITEM = INT
     if POS_LIN ¬= 0 then do ;                   /* INITIAL Found        */
         if FLAG_INT_MDF = 1 then call error003  /* Duplicate Keyword    */
         if substr(SRC_LINE,POS_LIN+7,1) ¬= "=" ;       /* = Sign Here   */
          then call error004                            /* No Error      */
         POS_COM = pos("'",SRC_LINE,POS_LIN)            /* Quote Delim.  */
         if POS_COM = 0 then call error021              /* Not a Quote   */
         POS_CM2 = lastpos("'",SRC_LINE)                /* Quote Delim.  */
         if POS_CM2 = POS_COM then do;                  /* It's the same */
            if substr(SRC_LINE,1,72) = " " then ;       /* Cont. Char.?  */
            call error021                               /* No : Error    */
            COUNT_INT = COUNT_INT + 1                   /* Add Counter   */
            INT_MDF.COUNT_INT = substr(SRC_LINE,POS_COM+1,(72-(POS_COM+1)))
            signal mdf_next
         end
         if POS_CM2 ¬= POS_COM then do;                 /* It's not same */
            POS_CM3 = substr(SRC_LINE,POS_CM2-1,1)      /* Double Quote? */
            if POS_CM3 = "'" then do ;
              if substr(SRC_LINE,1,72) = " " then ;     /* Cont. Char.?  */
               call error021                            /* No : Error    */
              COUNT_INT = COUNT_INT + 1                 /* Add Counter   */
            INT_MDF.COUNT_INT = substr(SRC_LINE,POS_COM+1,(72-(POS_COM+1)))
              signal mdf_next
            end
         end
         INT_MDF = substr(SRC_LINE,POS_COM+1,(POS_CM2-(POS_COM+1)))
     end
     if COUNT_INT >= 1 then do;           /* ... Continuation of INITIAL */
          POS_COM = pos("'",SRC_LINE)                   /* Quote Delim.  */
          if POS_COM = 0 then do;
             if substr(SRC_LINE,1,72) = " " then ;      /* Cont. Char.?  */
               call error021                            /* No : Error    */
             COUNT_INT = COUNT_INT + 1                  /* Add Counter   */
             INT_MDF_CONT = substr(SRC_LINE,16,(72-16))
             COUNT_INT2 = COUNT_INT - 1
             INT_MDF.COUNT_INT = INT_MDF.COUNT_INT2 ¨¨ INT_MDF_CONT
             signal mdf_next                            /* Loop again    */
          end
          if POS_COM ¬= 0 then do;                      /* Last Line     */
             if POS_COM < 16 then call error029         /* Wrong Place   */
             INT_MDF_CONT = substr(SRC_LINE,16,(POS_COM-16))
             INT_MDF = INT_MDF.COUNT_INT ¨¨ INT_MDF_CONT
             COUNT_INT = 0
          end
     end
     POS_CM3 = pos("''",INT_MDF)                        /* Double Quote? */
     if POS_CM3 ¬= 0 then do;
          INT_MDF2 = translate(INT_MDF,"@"," ")         /* Save blanks   */
          INT_MDF3 = translate(INT_MDF2," ","''")       /* '' to  blanks */
          INT_MDF4 = space(INT_MDF3)                    /* Only 1 blank  */
          INT_MDF3 = translate(INT_MDF4,"'"," ")        /* blank to '    */
          INT_MDF  = translate(INT_MDF3," ","@")        /* Restore blanks*/
          POS_LIN = pos(INT,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_INT_MDF = 1                               /* Flag Found   */
     end
mdf_next:
/* ----------------------------------------------------------------------*/
/*  DFHMDF : POS     Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(PST,SRC_LINE)         /* POS Option    ...            */
     ITEM = PST
     if POS_LIN ¬= 0 then do ;                   /* POS    Found         */
          if FLAG_POS_MDF = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+3,1) ¬= "=" ;       /* = Sign Here? */
           then call error004                            /* No : error   */
   /* Get First Info (Line position) From POS parameter                  */
          if substr(SRC_LINE,POS_LIN+4,1) ¬= "(" ;       /* ( Sign Here? */
           then call error013                            /* No : error   */
          POS_COM = pos(',',SRC_LINE,POS_LIN)            /* 1st Delimiter*/
          if POS_COM = 0 then call error014              /* Not a Comma  */
          LIN_MDF = substr(SRC_LINE,POS_LIN+5,(POS_COM-(POS_LIN+5)))
          if datatype(LIN_MDF) ¬= "NUM" ;                /* Should be NUM*/
           then call error005
   /* Get Second Info (Column position) From POS parameter               */
          POS_SCD = pos(")",SRC_LINE,POS_COM)            /* 2nd Delimiter*/
          if POS_SCD = 0 then call error015              /* Not found    */
          COL_MDF = substr(SRC_LINE,POS_COM+1,(POS_SCD-(POS_COM+1)))
          if datatype(COL_MDF) ¬= "NUM" ;                /* Should be NUM*/
           then call error005
          POS_LIN = pos(PST,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_PST_MDF = 1                               /* Flag Found   */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDF : LENGTH  Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(LNG,SRC_LINE)         /* LENGTH Option ...            */
     ITEM = LNG
     if POS_LIN ¬= 0 then do ;                   /* LENGTH Found         */
          if FLAG_LNG_MDF = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+6,1) ¬= "=" ;      /* = Sign Here   */
            then call error004                          /* No Error      */
          POS_COM = pos(',',SRC_LINE,POS_LIN)           /* End delimiter */
          if POS_COM = 0 then ;                         /* Not a Comma   */
            POS_COM = pos(' ',SRC_LINE,POS_LIN)         /* It's a Blank  */
          if POS_COM = 0 then ;                         /* No : RECFM = V*/
            POS_COM = length(SRC_LINE) + 1
          LNG_MDF = substr(SRC_LINE,POS_LIN+7,(POS_COM-(POS_LIN+7)))
          if datatype(LNG_MDF) ¬= "NUM" ;               /* Should be NUM */
            then call error005
          POS_LIN = pos(LNG,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_LNG_MDF = 1                               /* Flag Found   */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDF : OCCURS  Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(OCC,SRC_LINE)         /* OCCURS Option ...            */
     ITEM = OCC
     if POS_LIN ¬= 0 then do ;                   /* OCCURS Found         */
          if FLAG_OCC_MDF = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+6,1) ¬= "=" ;      /* = Sign Here   */
           then call error004                           /* No Error      */
          POS_COM = pos(',',SRC_LINE,POS_LIN)           /* End delimiter */
          if POS_COM = 0 then ;                         /* Not a Comma   */
           POS_COM = pos(' ',SRC_LINE,POS_LIN)          /* It's a Blank  */
          if POS_COM = 0 then ;                         /* No : RECFM = V*/
           POS_COM = length(SRC_LINE) + 1
          OCC_MDF = substr(SRC_LINE,POS_LIN+7,(POS_COM-(POS_LIN+7)))
          if datatype(OCC_MDF) ¬= "NUM" ;               /* Should be NUM */
           then call error005
          POS_LIN = pos(OCC,SRC_LINE,POS_COM)    /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
          FLAG_OCC_MDF = 1                               /* Flag Found   */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDF : ATTRB   Parameter.                                          */
/* ----------------------------------------------------------------------*/
     POS_LIN = pos(ATT,SRC_LINE)         /* ATTRB Option ...             */
     ITEM = ATT
     if POS_LIN ¬= 0 then do ;                   /* ATTRB Found          */
          if FLAG_ATT_MDF = 1 then call error003 /* Duplicate Keyword    */
          if substr(SRC_LINE,POS_LIN+5,1) ¬= "=" ;      /* = Sign Here   */
           then call error004                           /* No Error      */
          if substr(SRC_LINE,POS_LIN+6,1) ¬= "(" ;      /* Several Attr. */
           then MANY_ATT = 0                            /* Flag Yes      */
           else MANY_ATT = 1                            /* Flag no       */
          POS_ATT = pos('ASKIP',SRC_LINE,POS_LIN)       /* ASKIP Att. ?  */
          if POS_ATT ¬= 0 then do ;
            ATT_ASKIP = 1
            POS_ATT2 = pos('ASKIP',SRC_LINE,POS_ATT+1)  /* Specif. Twice?*/
            if POS_ATT2 ¬= 0 then call error016         /* Yes : Error   */
            FLAG_MANY_ATT = FLAG_MANY_ATT + 1           /* Add Counter   */
          end
          POS_ATT = pos('UNPROT',SRC_LINE,POS_LIN)      /* UNPROT Att.?  */
          if POS_ATT ¬= 0 then do ;
            ATT_UNPROT = 1
            POS_ATT2 = pos('UNPROT',SRC_LINE,POS_ATT+1) /* Specif. Twice?*/
            if POS_ATT2 ¬= 0 then call error017         /* Yes : Error   */
            FLAG_MANY_ATT = FLAG_MANY_ATT + 1           /* Add Counter   */
          end
          POS_ATT = pos('BRT',SRC_LINE,POS_LIN)         /* BRT    Att.?  */
          if POS_ATT ¬= 0 then do ;
            ATT_BRT = 1
            POS_ATT2 = pos('BRT',SRC_LINE,POS_ATT+1)    /* Specif. Twice?*/
            if POS_ATT2 ¬= 0 then call error018         /* Yes : Error   */
            FLAG_MANY_ATT = FLAG_MANY_ATT + 1           /* Add Counter   */
          end
          if FLAG_MANY_ATT > 1 & MANY_ATT = 0 then ;    /* Short Syntax..*/
           call error019                                /* ..Control     */
          if FLAG_MANY_ATT > 1 & MANY_ATT = 1 then do ;
             if pos(')',SRC_LINE,POS_LIN+6) = 0  ;      /* ) Delim. here?*/
             then call error015                         /* No end Parent.*/
          end
          if ATT_UNPROT = 1 & ATT_ASKIP = 1 then ;      /* Incompatible..*/
           call error020                                /*.. Attributes? */
          POS_LIN = pos(ATT,SRC_LINE,POS_LIN+1)  /* Twice on same line ? */
          if POS_LIN ¬= 0 then call error003             /* Yes : Error  */
         FLAG_ATT_MDF = 1                                /* Flag Found   */
     end
/* ----------------------------------------------------------------------*/
/*  DFHMDF : End of Line Controls.                                       */
/* ----------------------------------------------------------------------*/
/* Loop if Continuation Character                                        */
     if substr(SRC_LINE,72,1) ¬= " " then do;    /* Continuation Char. ? */
         SRC_LINE = substr(SRC_LINE,1,71)        /* Is a Comma Here ?    */
         SRC_LINE = space(SRC_LINE)
         POS_COM = substr(SRC_LINE,length(SRC_LINE),1)
         if POS_COM ¬= "," & COUNT_INT = 0 then; /* No Comma : Error     */
          call error027
         signal mdf_process                      /* Process it again     */
     end
/* No Continuation Character                                             */
     SRC_LINE = space(SRC_LINE)                  /* Is a Comma Here ?    */
     POS_COM = substr(SRC_LINE,length(SRC_LINE),1)
     if POS_COM = "," then call error028         /* Yes : Error          */
/* ----------------------------------------------------------------------*/
/*  DFHMDF : End of Macro Controls.                                      */
/* ----------------------------------------------------------------------*/
/* Control if all the Info. are there                                    */
     if FLAG_PST_MDF = 0 then call error022      /* POS Mandatory        */
     if FLAG_LNG_MDF = 0 then call error023      /* LNG Mandatory        */
     if FLAG_ATT_MDF = 0 then call error024      /* ATT Mandatory        */
     if FLAG_INT_MDF = 1 then ;                  /* Control Initial ...  */
        if LNG_MDF ¬= length(INT_MDF) then ;     /* Lenght OK ?          */
           call error025                         /* No : Error           */
/* ----------------------------------------------------------------------*/
/*  DFHMDF : Results Processing.                                         */
/* ----------------------------------------------------------------------*/
/* Build the Formatted Record                                            */
     ABS_LIN_MDF = ABS_LIN_MDI + LIN_MDF         /* Real Screen Position */
     ABS_LIN_MDF = right(ABS_LIN_MDF,2,' ')      /* Pad with blank       */
     ABS_COL_MDF = ABS_COL_MDI + COL_MDF         /* Real Screen Position */
     ABS_COL_MDF = right(ABS_COL_MDF,2,'0')      /* Pad with 0           */
     LNG_MDF     = right(LNG_MDF,2,'0')          /* Pad with 0           */
     OCC_MDF     = right(OCC_MDF,2,'0')          /* Pad with 0           */
     if FLAG_INT_MDF = 0 & ATT_UNPROT = 1 then do;
         INT_MDF = left(' ',LNG_MDF)
         INT_MDF = translate(INT_MDF,"."," ")    /* Pad with -           */
     end                                         /* ... fields           */
     LIN_FLD1 = '$FIELD  ' ABS_LIN_MDF ABS_COL_MDF LNG_MDF OCC_MDF ;
     LIN_FLD2 =  ATT_ASKIP ATT_UNPROT ATT_BRT INT_MDF ;
     LIN_FIELD = LIN_FLD1 LIN_FLD2               /* Here is the result !!*/
     queue LIN_FIELD
     address CMS "EXECIO 1 DISKW" WORK_FILE
     if rc ¬= 0 then call error026
     if FLAG_MDF = 0 then FLAG_MDF = 1
     signal init_mdf_process
/* ------------------------------------------------------------------*/
/*  Errors Processing.                                               */
/* ------------------------------------------------------------------*/
error001:
         say " Error Reading File" SRC_NAME
         say " or MAP Cannot be Found."
         RCD = 28
         call endproc
error002:
         say " DFHMDI Macro Not Found Map "MAPNAME
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error003:
         say " Keyword "ITEM "Specified twice"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error004:
         say " Equal Sign (=) is Missing"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error005:
         say  ITEM "Value should be Numeric"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error007:
         say " Mandatory Information is Missing"
         say " Macro DFHMDI"
         RCD = 28
         call endproc
error008:
         say " DFHMDF Macro found before the End"
         say " of the previous one."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error009:
         say " DFHMDI Macro found before the End"
         say " of the previous DFHMDF Macro."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error010:
         say " New DFHMDI macro found and no Fields"
         say " were specified in "MAPNAME" Map."
         RCD = 28
         call endproc
error011:
         say " DFHMSD Macro found before the End"
         say " of previous DFHMDF."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error012:
         say " DFHMSD Macro found and no Fields"
         say " were specified in "MAPNAME "Map."
         RCD = 28
         call endproc
error013:
         say " Left Parenthesis '(' is Missing"
         say " "ITEM "Keyword."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error014:
         say " Comma  ',' is Missing"
         say " "ITEM "Keyword."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error015:
         say " Right Parenthesis ')' is Missing"
         say " "ITEM "Keyword."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error016:
         say " ASKIP  Attribute specified twice"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error017:
         say " UNPROT Attribute specified twice"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error018:
         say "  BRT   Attribute specified twice"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error019:
         say " Attributes should be specified  "
         say " between Parentheses."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error020:
         say " UNPROT and ASKIP Attributes are "
         say " incompatible."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error021:
         say " INITIAL Value should be enclosed"
         say " between Quotes (')."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error022:
         say " Mandatory parameter POS is missing."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error023:
         say " Mandatory parameter LENGTH is missing."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error024:
         say " Mandatory parameter ATTR is missing."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error025:
         say " Specified LENGTH Parameter not equal"
         say " to the Length of the INITIAL Value."
         say " Length specified :" LNG_MDF "Found :" length(INT_MDF)
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error026:
         say " Error Writting file " WORK_FILE
         RCD = 28
         call endproc
error027:
         say " Continuation Character Found Column 72"
         say " Continuation Comma not found."
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error028:
         say " Continuation Comma found."
         say " Continuation Character Not Found Column 72"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error029:
         say " Continuation Line should begin Column 16"
         say " Line :" ABS_LINE
         RCD = 28
         call endproc
error030:
         say " Error in EXECIO "
         RCD = 28
         call endproc
end_map:
         RCD = 0
endproc:
     address CMS     "FINIS" SRC_NAME
     if RCD = 28 then do ;
         address CMS     "ERASE" WORK_FILE
         address CMS     "ERASE" VAR_FILE
     end
     if RCD = 0  then do ;
         address CMS     "FINIS" WORK_FILE
     end
     address command "CP SET EMSG ON"
     address command "CP SET IMSG ON"
     exit RCD


Bruno Anmella (France)

