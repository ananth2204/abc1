 Date-stamping the CSMT log
The CICS CSMT log contains no indication of the date that any of the messages
were written to it.  In CICS systems where there is a lot of log activity and
where they are up continuously for days on end, it is useful to have some method
for determining what date the log messages relate to.
The ELDDATE program will do just that.  The program writes one line to the CSMT
log giving the day of the week, the current date (Gregorian), and the current
time.  The format of the line is as follows:
     ELDDATE: term tran hh:mm:ss day-name dd/mm/yy  hh.mm.ss
where :
ELDDATE is the name of the program
term is the terminal-id the transaction was run on (if any)
tran is the transaction-id of the executing program
hh:mm:ss is the current time
day-name is the name of the current day
dd/mm/yy is the current date in Gregorian format
hh.mm.ss is the current time.
The program name, terminal-id, transaction-id, and first time fields are all in
the same format and location as the start of standard CICS messages written to
the log.
If the program is included in the PLTPI, after writing the message to CSMT it
will schedule the CDAT transaction to run again in one hourUs time.  We include
ELDDATE as the first and last program in the PLTPI so that we can determine the
duration of the PLTPI phase; this also means that the current day/date/time is
printed twice every hour.  Obviously the length of time for the re-scheduled
transaction can be determined to suit the installation.
If the CDAT transaction is run from a terminal, it will write the normal line to
the CSMT log and will also display the same line at the terminal from which it
was run.  When run from a terminal, the CDAT transaction is not re-scheduled in
an hourUs time, but this may be done if desired.
If ELDDATE is included in the PLTSD, it will print the standard line but not re-
schedule itself.  This again is used to determine the duration of both stages of
PLTSD.
ELDDATE
* THIS WILL PRINT OUT THE CURRENT DAY, DATE AND TIME ON THE CSMT LOG
*   AND INITIATE THIS TRANSACTION AGAIN IN ONE HOURS TIME.
CSACBAR  EQU   5                    * BASE ADDRESS REGISTER FOR CSA
         COPY  DFHCSADS
DFHEISTG DSECT
MSGOUT   DS    0CL70
         DS    CL9                 * 3270 DS
TDOUT    DS    0CL56
         DS    CL9                 * MESSAGE/PROGRAM ID
MSGTERM  DS    CL4                 * TERMINAL ID
         DS    CL6                 * TRANSACTION ID
MSGTIME  DS    CL9                 * TIME
MSGDAY   DS    CL9                 * DAY NAME
         DS    CL1                 * SPACE
MSGDATE  DS    0CL8                * DATE
MSGDD    DS    CL2                 * DD
         DS    CL1                 * /
MSGMM    DS    CL2                 * MM
         DS    CL1                 * /
MSGYY    DS    CL2                 * YY
MSGTIM   DS    CL10                * TIME
TDOUTE   EQU   *
         DS    CL5                 * 3270 DS
MSGOUTE  EQU   *
TIME     DS    CL7                 * TIME UNPACKED
DATE     DS    CL5                 * DATE UNPACKED
YEAR     DS    PL3                 * YY TO CHECK FOR LEAP YEAR
DDD      DS    PL2                 * WORK FIELD FOR DAY
DBLWRD   DS    D                   * WORK FIELD FOR CVD
TIMEP    DS    F                   * TIME PACKED
WORK     DS    CL11                * WORK FIELD
ELDDATE  CSECT
          B     START
         DC    CL8'ELDDATE '       * MODULE IDENTIFIER
         DC    CL14'DATE=&SYSDATE' * ASSEMBLY DATE
         DC    CL12'TIME=&SYSTIME' * ASSEMBLY TIME
START    DS    0H
*        SET SKELETON MESSAGE IN OUTPUT AREA
         EXEC  CICS ASKTIME
         MVC   MSGOUT(L'MESSAGE),MESSAGE * MOVE IN SKELETON MESSAGE
         UNPK  TIME(7),EIBTIME(4)  * UNPACK TIME
         OI    TIME+6,X'F0         * RESTORE SIGN
         MVC   MSGTERM(4),EIBTRMID * MOVE IN TERMINAL ID
         MVC   MSGTIME(2),TIME+1   * MOVE IN TIME HOURS
         MVC   MSGTIME+3(2),TIME+3 * MOVE IN TIME MINUTES
         MVC   MSGTIME+6(2),TIME+5 * MOVE IN TIME SECONDS
*        CONVERT DATE TO DD/MM/YY
         UNPK  DATE(5),EIBDATE+1(3)  UNPACK DATE
         LA    R8,4                * SET COUNT FOR FIRST CHARACTERS
         LA    R2,DATE             * LOAD ADDRESS OF UNPACKED DATE
DATELOOP CLI   0(R2),X'F9'         * IS IT HIGHER THAN 9 ?
         BH    DATEINV             * YES, IT IS INVALID
         CLI   0(R2),X'F0'         * IS IT LOWER THAN 0 ?
         BL    DATEINV             * YES, IT IS INVALID
         LA    R2,1(,R2)           * POINT R2 AT NEXT DIGIT
         BCT   R8,DATELOOP         * GO CHECK NEXT DIGIT
         CLI   0(R2),X'C0'         * CHECK LAST DIGIT FOR < +0
         BL    DATEINV             * YES, IT IS INVALID
         CLI   0(R2),X'C9'         * IS LAST DIGIT A +VE NUMBER ?
         BNH   DATEOK              * YES, IT IS OK
         CLI   0(R2),X'F0'         * IS LAST DIGIT < UNSIGNED 0 ?
         BL    DATEINV             * YES, IT IS INVALID
         CLI   0(R2),X'F9'         * IS LAST DIGIT > 9 ?
         BH    DATEINV             * YES, IT IS INVALID
DATEOK   CP    EIBDATE+1(3),ZERO   * IS DATE ALL ZEROES ?
         BE    DATEZERO            * YES, GO SET DATE OF 00/00/00
         MVC   MSGYY(2),DATE       * MOVE YY INTO MESSAGE
         PACK  YEAR(3),DATE(2)     * PACK YY TO CHECK FOR LEAP YEAR
         DP    YEAR,FOUR           * DIVIDE YY BY 4
         CP    YEAR+2(1),ZERO      * IS REMAINDER ZERO ?
         BE    LEAPYEAR            * YES, MUST BE A LEAP YEAR
         LA    R7,ORDTABL          * USE ORDINARY TABLE FOR NON LEAP YR
         B     DATECONT            * CONTINUE
LEAPYEAR LA    R7,LEAPTABL         * USE LEAP YEAR TABLE FOR LEAP YEAR
DATECONT LA    R8,12               * SET COUNT CONTROL FOR TABL COMPARE
         MVC   DDD(2),EIBDATE+2    * MOVE DDD TO WORK FIELD
TABLLOOP CP    DDD,0(2,R7)         * COMPARE DATE DDD WITH TABLE DDD
         BNH   DATEFND             * IF < OR = THEN THIS IS CORRECT MTH
         LA    R7,2(R7)            * POINT R7 TO NEXT TABLE ELEMENT
         BCT   R8,TABLLOOP         * IF NOT END OF TABLE, GO CHECK NEXT
DATEINV  MVC   MSGDATE(8),ASTERS   * MOVE IN ASTERISKS AS DATE
         B     DATEEND             * THAT'S ALL FOR THE DATE
DATEZERO MVC   MSGDATE(8),ZEROES   * MOVE IN ZEROES AS DATE
         B     DATEEND             * THAT'S ALL FOR THE DATE
DATEFND  LA    R9,13               * R9 WILL CONTAIN MONTH NUMBER
         SR    R9,R8               * - NOW
         CVD   R9,DBLWRD           * CONVERT MONTH NUMBER TO DECIMAL
         UNPK  MSGMM(2),DBLWRD+6(2)  UNPACK MONTH INTO MESSAGE
         LA    R8,2                * SUBTRACK 2 FROM R7 SO THAT
         SR    R7,R8               * POINTS AT DDD FOR END OF PREV MTH
         SP    DDD,0(2,R7)         * SUBTRACT TO GET DAY OF CURR MTH
         UNPK  MSGDD(2),DDD        * UNPACK DAY INTO MESSAGE
         OI    MSGDD+1,X'F0'       * ENSURE PRINTABILITY
         OI    MSGMM+1,X'F0'       * OF DAY AND MONTH
*        DETERMINE DAY NAME
DATEEND  PACK  DBLWRD,MSGYY        * PACK YEAR INTO DOUBLE WORD
         CVB   R5,DBLWRD           * CONVERT IT TO BINARY
         LR    R6,R5               * SAVE IT IN R6
          SR    R4,R4               * CLEAR R4 FOR DIVIDE
         D     R4,=F'4'            * NUMBER OF LEAP YEARS IN R5
         AR    R5,R6               * YEARS + LEAP YEARS IN R5
         PACK  DBLWRD,MSGMM        * PACK MONTH INTO DOUBLE WORD
         CVB   R2,DBLWRD           * CONVERT IT TO BINARY
         AR    R2,R2               * INDEX 2 BYTE FIELD
         AH    R5,MHTB(2)          * ADD START DAY OF MONTH
         LTR   R4,R4               * LEAP YEAR ?
         BNE   PACKDD              * NO
         CH    R2,=H'4'            * IS IT MONTH 1 OR 2 ?
         BH    PACKDD              * NO, NOT JAN OR FEB
         BCTR  R5,R0               * SUBTRACT ONE
PACKDD   PACK  DBLWRD,MSGDD        * PACK DAY INTO DOUBLE WORD
         CVB   R4,DBLWRD           * CONVERT IT TO BINARY
         AR    R5,R4               * ADD DAY OF MONTH
         SR    R4,R4               * CLEAR R4 FOR DIVIDE
         D     R4,=F'7'            * REMAINDER=DAY OF WEEK
         MH    R4,=H'9'            * DAYNAME 9 BYTES LONG
         LA    R4,DAYNAME(4)       * ADD INDEX TO ADDR OF DAY
         MVC   MSGDAY,0(R4)        * PUT DAY INTO MESSAGE
*        CALCULATE TIME
         MVC   TIMEP(4),EIBTIME    * MOVE TIME TO WORK AREA
         MVC   WORK,=X'21404020204B20204B2020'
         ED    WORK,TIMEP          * CONVERT TIME
         MVC   MSGTIM,WORK+1       * MOVE TIME INTO MESSAGE
         USING DFHCSADS,CSACBAR    * ADDRESS COMMON SYSTEMS AREA
         EXEC  CICS ADDRESS CSA(CSACBAR)
*        SEND MESSAGE OR REINITIATE IN ONE HOUR AND THEN RETURN
         EXEC  CICS WRITEQ TD QUEUE('CSMT') FROM(TDOUT) LENGTH(TDOUTLN)
         TM    CSASSI2,CSASTIM+CSAFNLTM   IS THIS CICS SHUTDOWN ?
         BNZ   RETURN              * YES, THAT'S ALL
         TM    CSASSI2,CSAPLTPI    * IS THIS CICS STARTUP ?
         BNO   RESTART             * YES, GO RESTART TRANSACTION
         CLC   EIBTRMID(4),=F'0'   * IS THIS TERMINAL INITIATED ?
         BE    RESTART             * NO, GO RESTART TRANSACTION
         EXEC  CICS SEND FROM(MSGOUT) LENGTH(MSGOUTLN) WAIT LAST
         B     RETURN
RESTART  EXEC  CICS START TRANSID('CDAT') INTERVAL(10000)
RETURN   EXEC  CICS RETURN
*        PROGRAM CONSTANTS
MSGOUTLN DC    AL2(MSGOUTE-MSGOUT) * OUTPUT MESSAGE LENGTH
TDOUTLN  DC    AL2(TDOUTE-TDOUT)   * OUTPUT MESSAGE LENGTH
         DC    X'000F'
ORDTABL  DC    X'031F059F090F120F151F181F212F243F273F304F334F365F'
         DC    X'000F'
LEAPTABL DC    X'031F060F091F121F152F182F213F244F274F305F335F366F'
ZERO     DC    PL1'0'              * PACKED ZERO
FOUR     DC    PL1'4'              * PACKED FOUR
ZEROES   DC    CL8'00/00/00'       * ZERO DATE
ASTERS   DC    CL8'**/**/**'       * INVALID DATE
MHTB     DC    H'0'
         DC    H'0'
         DC    H'3'
         DC    H'3'
         DC    H'6'
         DC    H'1'
         DC    H'4'
         DC    H'6'
         DC    H'2'
         DC    H'5'
         DC    H'0'
         DC    H'3'
DAYNAME  DC    CL9'   SUNDAY'
         DC    CL9'   MONDAY'
         DC    CL9'  TUESDAY'
         DC    CL9'WEDNESDAY'
          DC    CL9' THURSDAY'
         DC    CL9'   FRIDAY'
         DC    CL9' SATURDAY'
MESSAGE  DS    0CL70
         DC    XL4'1140C513'       * SBA,R1C6,IC
         DC    XL5'11C25F1DF0'     * SBA,R2C80,SF,PAS
         DC    CL9'ELDDATE: '      * MESSAGE/PROGRAM ID
         DC    CL4' '              * TERMINAL ID
         DC    CL6' CDAT '         * TRANSACTION ID
         DC    CL9'HH:MM:SS '      * TIME
         DC    CL9' '              * DAY NAME
         DC    CL1' '              * SPACE
         DC    CL2' '              * DD
         DC    CL1'/'              * /
         DC    CL2' '              * MM
         DC    CL1'/'              * /
         DC    CL2' '              * YY
         DC    CL10' '             * TIME
         DC    XL5'115D7F1DC1'     * SBA,R24C80,SF,UM
         END


Gary Lloyd
Senior Systems Programmer
Elders Pastoral (Australia)   ) Elders Pastoral 1989









































