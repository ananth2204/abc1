 Tuning VSAM to recover space

In order to increase the size of the Dynamic Storage Area, we reduced the amount
of storage required for VSAM files.  In the process, we encountered CICS lock-
ups due to string waits.  Along with some suggestions for tuning VSAM, we are
providing a program that helps identify transactions which are causing string
waits.


NON-SHARED RESOURCE (NSR) FILES

Because data buffers must be large enough to hold a Control Interval, a
considerable amount of storage can be saved by reducing the number of data
buffers.  We specified in the File Control Table (FCT) the minimum number of
data buffers, ie STRNO plus one, and experienced only a slight impact on
performance for most files.  We then gradually reduced the number of strings
allocated to each file checking the wait-on-string count in the CICS shut-down
statistics.  Our goal was to have the proportion of string waits to file access
to be around five per cent.  If the wait-on-string percentage is too high, CICS
will be single threading transactions and performance will be poor.


LOCAL-SHARED RESOURCE (LSR) FILES

NSR files allocate their own buffers and strings while LSR files draw their
buffers and strings from a common pool so that a buffer not being used by one
file is available for use by another file.  We changed most of our files to LSR
to take advantage of this more efficient use of storage.  We did not use LSR for
some of our high use files and for files accessed for GET UPDATE during a
browse.  The string number specified in the FCT macro for LSR files does not
allocate buffers but only determines the maximum number of concurrent uses for
each file.  The buffers parameter of the FCT TYPE=SHRCTL macro determines the
amount of storage used by the LSR pool.  We gradually reduced the number of
buffers in the LSR pool checking the wait-on-buffer count in the CICS shut-down
statistics.  Reducing the number of buffers has the disadvantage of reducing the
number of look-asides.


STRING WAITS

One side effect of reducing the number of strings per file was that CICS
sometimes went into a deadly embrace on strings.  One task would hold a string
and wait for a resource while another task held the resource and waited for a
string.  We also discovered that sometimes one task would hold all the strings
for a file and then wait on itself for another string.  Because it was difficult
to identify which tasks held the strings for a file, we wrote a program that
allows the user to enter a file-id and then displays the task number,
transaction-id, and number of strings held for the file.  The program is
currently running in a CICS/VS 1.6.1 environment.  If several transactions hold
strings for a file, the string number may need to be increased or programs may
need to be changed to release strings sooner by the timely use of ENDBR, PUT
UPDATE, DELETE, or RELEASE.  If one transaction holds all the strings, make sure
the program ends a browse before starting another browse and check that the
program releases strings after an I/O exception like NOTFND or DUPREC.  We
encountered several program problems that had been masked by our abundant
allocation of strings.


THE PROGRAM SOURCE CODE

*  TRANID:  STRU, PROGRAM:  STRUNG,  MAPSET:  STRUMS, MAP:  STRUM1 *
         COPY  DFHCSADS
         DFHTCA CICSYST=YES
         COPY  DFHDCADS
         COPY  DFHVSWA
         COPY  DFHAID
 TCADBAR  EQU   12
LINKREG  EQU   10
VSWABAR  EQU   7
DCACBAR  EQU   6
LINEREG  EQU   5
LINEDS   DSECT
         DS    CL3
TRAN     DS    CL4
         DS    CL3
TSKN     DS    CL5
         DS    CL3
STRNG    DS    CL4
NEXTLINE EQU   *
DFHEISTG DSECT
DECIMAL  DS    D
         COPY  STRUMS
STRUNG   DFHEIENT CODEREG=11,DATAREG=8,EIBREG=9
         USING DFHTCADY,TCADBAR
         USING LINEDS,LINEREG
         EXEC  CICS HANDLE CONDITION                                  X
               MAPFAIL(EXIT)
         CLI   EIBAID,DFHCLEAR         CHECK IF CLEAR WAS PRESSED
         BE    EXIT                    YES, EXIT
         SR    R3,R3                   CLEAR REGISTER
         CH    R3,EIBCALEN             CHECK COM LENGTH
         BE    FIRSTIME                IT'S ZERO FIRST TIME THRU
         EXEC  CICS RECEIVE                                           X
               MAP('STRUM1')                                          X
               MAPSET('STRUMS')
         CH    R3,FILEIDL              CHECK IF FILEID WAS ENTERED
         BE    ERROR1                  NO, WRITE MSG AND LEAVE
         EXEC  CICS ADDRESS                                           X
               CSA(13)
         LA    LINEREG,TRAN01L         GIVE LINE DSECT ADDRESSABILITY
FINDACT  DS    0H                      FIND ACTIVE TCA'S
         L     DCACBAR,CSAACTFA        POINT TO FIRST ACTIVE DCA
ACTLOOP  DS    0H                      TOP OF ACTIVE LOOP
         CLC   DCAKCFA,CSAACTFA        END OF ACTIVE CHAIN?
         BE    FINDSUS                 YES,  SEARCH SUSPEND CHAIN
         L     TCACBAR,DCATCAA         POINT TO USER TCA
         L     TCACBAR,0(,TCACBAR)     POINT TO SYSTEM TCA
         BAL   LINKREG,FINDRPL         CHECK FOR HELD STRINGS
         L     DCACBAR,DCAKCFA         POINT TO NEXT DCA
         B     ACTLOOP                 BRANCH TO TOP OF LOOP
FINDSUS  DS    0H                      FIND ACTIVE TCA'S
         L     DCACBAR,CSASUSFA        POINT TO FIRST SUSPENDED DCA
SUSLOOP  DS    0H                      TOP OF SUSPENDED LOOP
         CLC   DCAKCFA,CSASUSFA        END OF SUSPENDED CHAIN?
         BE    TCADONE                 YES,  ALL TCA'S FOUND
         L     TCACBAR,DCATCAA         POINT TO USER TCA
         L     TCACBAR,0(,TCACBAR)     POINT TO SYSTEM TCA
         BAL   LINKREG,FINDRPL         CHECK FOR HELD STRINGS
         L     DCACBAR,DCAKCFA         POINT TO NEXT DCA
         B     SUSLOOP                 BRANCH TO TOP OF LOOP
TCADONE  OC    TRAN01O,TRAN01O          ANYTHING IN TRANID1?
         BNZ   SENDMAP                  YES,  BRANCH AROUND
         MVC   ERRMSG0O(L'NOSTRING),NOSTRING   MOVE ERR MSG
SENDMAP  EXEC  CICS SEND                                              X
               MAP('STRUM1')                                          X
               MAPSET('STRUMS')                                       X
               ERASE
         EXEC  CICS RETURN                                            X
               TRANSID(EIBTRNID)                                      X
               COMMAREA(EIBTRNID)                                     X
               LENGTH(4)
EXIT     EXEC  CICS SEND CONTROL                                      X
                ERASE                                                  X
               FREEKB
         EXEC  CICS RETURN
FIRSTIME EXEC  CICS SEND                                              X
               MAP('STRUM1')                                          X
               MAPSET('STRUMS')                                       X
               ERASE                                                  X
               MAPONLY
         EXEC  CICS RETURN                                            X
               TRANSID(EIBTRNID)                                      X
               COMMAREA(EIBTRNID)                                     X
               LENGTH(4)
ERROR1   MVC   ERRMSG0O(L'MUSTENTR),MUSTENTR   NO FILE NAME ENTERED
         B     SENDMAP
FINDRPL  L     VSWABAR,TCASCCA         POINT TO FIRST USER STORAGE
         XR    R3,R3                   CLEAR COUNTER REG
TOP      CR    TCACBAR,VSWABAR         END OF STORAGE CHAIN?
         BZ    GOBACK                  YES,  GO FINISH UP
         CLI   0(VSWABAR),X'8F'        IS THIS FILE STORAGE?
         BE    CHCKVSWA                YES,  CHECK IF VSWA
NEXTONE  L     VSWABAR,4(,VSWABAR)     LOAD NEXT IN CHAIN
         B     TOP                     BACK TO TOP OF LOOP
CHCKVSWA CLI   VSWAID,X'00'            IS THIS A VSWA?
         BNE   NEXTONE                 NO,  GO ON IN CHAIN
         L     R2,VSWAFCT              LOAD FCT ENTRY TO REG
         CLC   FILEIDI,0(R2)           IS VSWA FOR OUR FILE?
         BNE   NEXTONE                 NO, GO ON IN CHAIN
         LA    R3,1(,R3)               INCREMENT THE STRING COUNT
         B     NEXTONE                 GO ON TO NEXT IN CHAIN
GOBACK   LTR   R3,R3                   ANY STRINGS ?
         BZ    LINKR                   NO, GO BACK NOW
         LA    R4,TRAN15L              ADDRESS LAST LINE OF MAP
         CR    LINEREG,R4              PAST END OF MAP?
         BH    LINKR                   YES,  GET OUT
         CVD   R3,DECIMAL              CONVERT COUNT TO DECIMAL
         UNPK  STRNG,DECIMAL           UNPACK COUNT
         OI    STRNG+3,X'F0'           FIX THE SIGN
         MVC   TRAN,TCAKCOID           FORMAT TRANID
         UNPK  TSKN,TCAKCTTA           FORMAT TASK NUMBER
         OI    TSKN+4,X'F0'            FIX THE SIGN
         LA    LINEREG,NEXTLINE        POINT TO NEXT LINE ON MAP
LINKR    BR    LINKREG                 OK, WERE DONE NOW
         LTORG
MUSTENTR DC C'PLEASE ENTER FILENAME'
NOSTRING DC C'NO STRINGS HELD FOR THIS FILE'
         END

THE MAP

STRUMS   DFHMSD TYPE=MAP,LANG=ASM,TIOAPFX=YES,MODE=INOUT,             X
               DATA=FIELD,CTRL=(FREEKB,FRSET),TERM=3270
STRUM1   DFHMDI SIZE=(24,80)
         DFHMDF POS=(01,29),LENGTH=20,ATTRB=(BRT,PROT),               X
               INITIAL='S T R U N G    O U T'
         DFHMDF POS=(01,71),LENGTH=06,ATTRB=(BRT,PROT),               X
               INITIAL='STRUMS'
         DFHMDF POS=(03,07),LENGTH=12,ATTRB=(NORM,PROT),              X
               INITIAL='FILE ID ===>'
FILEID   DFHMDF POS=(03,20),LENGTH=08,ATTRB=(UNPROT,FSET,IC)
         DFHMDF POS=(03,29),LENGTH=01,ATTRB=ASKIP
         DFHMDF POS=(05,20),LENGTH=37,ATTRB=(NORM,PROT),              X
               INITIAL='TRAN ID        TASK NUM       STRINGS'
         DFHMDF POS=(06,20),LENGTH=37,ATTRB=(NORM,PROT),              X
               INITIAL='-------        --------       -------'
TRAN01   DFHMDF POS=(08,21),LENGTH=04,ATTRB=ASKIP
         DFHMDF POS=(08,26),LENGTH=01,ATTRB=ASKIP
 TSKN01   DFHMDF POS=(08,36),LENGTH=05,ATTRB=ASKIP
         DFHMDF POS=(08,42),LENGTH=01,ATTRB=ASKIP
STRNG01  DFHMDF POS=(08,51),LENGTH=04,ATTRB=ASKIP
         DFHMDF POS=(08,56),LENGTH=01,ATTRB=ASKIP
TRAN02   DFHMDF POS=(09,21),LENGTH=04,ATTRB=ASKIP
         DFHMDF POS=(09,26),LENGTH=01,ATTRB=ASKIP
TSKN02   DFHMDF POS=(09,36),LENGTH=05,ATTRB=ASKIP
         DFHMDF POS=(09,42),LENGTH=01,ATTRB=ASKIP
STRNG02  DFHMDF POS=(09,51),LENGTH=04,ATTRB=ASKIP
         DFHMDF POS=(09,56),LENGTH=01,ATTRB=ASKIP
         .
         and similarly for TRAN03, TASKN03, and STRNG03 to
         TRAN14, TSKN14, and STRNG14
         .
TRAN15   DFHMDF POS=(22,21),LENGTH=04,ATTRB=ASKIP
         DFHMDF POS=(22,26),LENGTH=01,ATTRB=ASKIP
TSKN15   DFHMDF POS=(22,36),LENGTH=05,ATTRB=ASKIP
         DFHMDF POS=(22,42),LENGTH=01,ATTRB=ASKIP
STRNG15  DFHMDF POS=(22,51),LENGTH=04,ATTRB=ASKIP
         DFHMDF POS=(22,56),LENGTH=01,ATTRB=ASKIP
ERRMSG0  DFHMDF POS=(23,04),LENGTH=65,ATTRB=(BRT,PROT)
         DFHMDF POS=(24,04),LENGTH=28,ATTRB=(BRT,PROT),               X
               INITIAL='ENTER:PROCESS     CLEAR:EXIT'
         DFHMSD TYPE=FINAL
         END


Thomas le Noir, Applications Programmer, and
Constance Cummings, Systems Programmer
Ralphs Grocery Company (USA)  ) Ralphs Grocery Company 1987




































