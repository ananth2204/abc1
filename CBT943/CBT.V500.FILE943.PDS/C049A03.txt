The search for macro-level code

On April 29, 1977 IBM announced CICS 1.3.0.  This release
introduced a new Application Programming Interface (API)
called the command-level interface and, since that time, the
unstated direction was to write CICS programs in command
level  The older programs that used the macro-level API were
to be converted to command level through attrition.

IBM even limited most new features and functions to command
level, such as function shipping, an even stronger indication of
their direction.  In October 1988, IBM finally issued an official
statement of direction for CICS.  Among several very
important changes, it said that the macro-level API was dead.
Finally, the ammunition needed to wake up the application
development staff and start rewriting all that old macro level
code had arrived!

Even new shops that started with a strict rule of command-level
programs only may have problems.  Vendor products may or
may not be pure command level, and some macro-level
programs may have slipped by into production.  Obviously
there was a great need for something to identify what programs
in the shop are macro level and require conversion and this
detection must be done without access to the source code since
vendors rarely send source any more and some in-house source
code may have been misplaced.

IBM has come to our aid with a new program implemented
with PTF UL49834.  This PTF is for CICS 1.7.0 under
MVS/XA, PTFs exist for other releases/operating systems.
The new program is called DFHMSCAN and reads through a
LOADLIB identifying macro-level programs by looking for
branches to CICS management modules and identifying the
kind of service requested.

DFHMSCAN has two modes.  $SUMMARY lists all programs
and their language, the number of macro calls, the number of
command requests, the number of BALR 14,14 instructions,
and the number of BALR 14,15 instructions.  The last two
counts are for branches that may or may not be for macro-level
services.  The second mode in DFHMSCAN points to a
specific program and will list the macro-level functions used.

In using DFHMSCAN, several pitfalls were discovered; this is
the time that all of the old skeletons come out of the cupboard.
We found that there were a lot of programs still in our RPL
libraries that were no longer in use, the PPT entry having been
deleted when the program was no longer used but the load
module still remaining in the library.

The worst problem we found though was that we had programs
that were in production but the source was no longer around.
This really points out the need for a change control system that
transfers source only and then compiles the production load
module.

CICS 3.1 has been announced and will be available in the
second quarter of 1990.  It will not support COBOL or PL/I
use of the macro-level API.  Any company with programs that
have not been converted will be left behind on CICS 2.1 and
will not be able to take advantage of the new improvements
provided by the new release of CICS.  IBM will provide a link
from CICS 2.1 to CICS 3.1 systems for some time in the future
and continue to support CICS 2.1 but has not stated for how
long this will go on.

Unfortunately there are no really good automated utilities that
will convert macro level to command level and the very few
that are out there only work for COBOL programs.  This
appears to be a good opportunity for vendors to package the
conversion utilities that they will be writing for their own code.

During the next year, the big focus for most companies should
include conversion of their in-house applications to command
level and placing pressure on vendors to do likewise to provide
a smoother conversion to CICS 3.1.  Any company interested
in more information should contact their IBM SE and request
the CICS 3.1 Release Guide (GC33-0655) and the CICS 3.1
Migration Guide (GC33-0656).  The PTF that installs program
DFHMSCAN also has additional documentation on its use.


Cliff Carpenter
Systems Programmer (USA) ) Xephon 1989


