 CMS EXECs for monitoring CICS (continued)
This month we take a further look at our series of CMS EXECs for monitoring CICS
and examine ways of presenting CICS dataset information
Keying PF7 reads through the whole FCT extracting file name, organisation,
format, open/closed, enabled/disabled, processing options, strings, data and
index buffers, and an LSR indicator.  PF5 dumps a table entry, while PF4 invokes
AMB XEDIT, which extracts detailed VSAM information from the AMB(s) for the VSAM
or DL/I dataset that is currently open.  Other PF keys sort the display on
various fields.  The heading line contains counts of the numbers of DL/I
databases, VSAM files, remote files, and open datasets.
FCT EXEC
/* FCT EXEC  ****************************************************** */
/*                 CICS FCT                                         */
/*    PARAMETERS REQUIRED:   VMID                                   */
/*                           FCT ADDRESS                            */
/*                           DMB DIRECTORY ADDRESS                  */
/* **************************************************************** */
      ARG VMID FCT DMB .
      IF DMB = '' THEN EXIT
      OCT = 0                          /* OPEN   COUNT */
      DCT = 0                          /* DL/1   COUNT */
      RCT = 0                          /* REMOTE COUNT */
      BCT = 0                          /* VSAM   COUNT */
/* ---------------------------------------------------------------- */
/* FOR EACH FCT ENTRY                                               */
/* -----------------------------------------------------------------*/
      DO I = 1 TO 500
          VADD = FCT
          CALL FWORD
          FILE = FWORD
          VADD = HEXADD(FCT,4)
          CALL FWORD
          FILE = X2C(FILE||FWORD)           /* FILE NAME */
          VADD = HEXADD(FCT,8)
          CALL FWORD
          DSI1 = X2C(SUBSTR(FWORD,1,2))     /* INDICATOR 1 */
          DSI2 = X2C(SUBSTR(FWORD,3,2))     /* INDICATOR 2 */
          LEN  = X2D(SUBSTR(FWORD,5,4))     /* FCT ENTRY LENGTH */
          IF LEN = '0' THEN LEAVE           /* END OF FCT */
          VADD = HEXADD(FCT,22)
          CALL FWORD
          DSI3 = X2C(SUBSTR(FWORD,1,2))     /* INDICATOR 3 */
          DSI4 = X2C(SUBSTR(FWORD,3,2))     /* INDICATOR 4 */
          IF BITAND(DSI3,'10'X) = '10'X THEN DO
                                              FT = 'DL1 '
                                              RF = '  '
                                              END
          IF BITAND(DSI3,'08'X) = '08'X THEN DO
                                              FT = 'REMO'
                                              RF = ''
                                              END
          IF BITAND(DSI1,'01'X) = '01'X THEN OP = 'OPE'
                                        ELSE OP = 'CLO'
          IF BITAND(DSI3,'20'X) = '20'X THEN ED = 'DIS'
                                        ELSE ED = 'ENA'
          IF BITAND(DSI2,'08'X) = '08'X THEN FM = 'V'
                                        ELSE FM = 'F'
          IF BITAND(DSI2,'02'X) = '02'X THEN BL = 'B'
                                        ELSE BL = 'U'
          RF = FM||BL
          IF BITAND(DSI1,'80'X) = '80'X THEN RD = 'R'
                                        ELSE RD = ' '
          IF BITAND(DSI1,'20'X) = '20'X THEN UP = 'U'
                                        ELSE UP = ' '
          IF BITAND(DSI1,'10'X) = '10'X THEN AD = 'A'
                                        ELSE AD = ' '
           IF BITAND(DSI1,'02'X) = '02'X THEN BR = 'B'
                                        ELSE BR = ' '
          IF BITAND(DSI3,'40'X) = '40'X THEN DE = 'D'
                                        ELSE DE = ' '
          POPT = RD||UP||AD||BR||DE
          IF BITAND(DSI4,'01'X) = '01'X THEN LG = 'L'
                                        ELSE LG = ' '
/* ---------------------------------------------------------------- */
/* FOR VSAM ONLY                                                    */
/* ---------------------------------------------------------------- */
          LSR = '   '
          IF LEN > '72' THEN DO
              VADD = HEXADD(FCT,68)
              CALL FWORD
              VSI  = X2C(SUBSTR(FWORD,1,2))
              IF BITAND(VSI,'80'X) = '80'X THEN FT = 'KSDS'
              IF BITAND(VSI,'40'X) = '40'X THEN FT = 'ESDS'
              IF BITAND(VSI,'20'X) = '20'X THEN LSR = 'SHR'
              IF BITAND(VSI,'02'X) = '02'X THEN FT = 'RRDS'
              VADD = HEXADD(FCT,6C)         /* NO OF STRINGS */
              CALL FWORD
              STR  = FORMAT(SUBSTR(FWORD,2,2),2,0)
              VADD = HEXADD(FCT,86)        /* D & I BUFFERS */
              CALL FWORD
              DB   = FORMAT(X2D(SUBSTR(FWORD,1,4)),2,0)
              IF DB = '0' THEN DB = '  '
              IB   = FORMAT(X2D(SUBSTR(FWORD,5,4)),2,0)
              IF IB = '0' THEN IB = '  '
              END
              ELSE DO
              STR = '  '
              DB  = '  '
              IB  = '  '
              END
          IF OP = 'OPE'    THEN OCT = OCT + '1'
          SELECT
            WHEN FT = 'REMOTE' THEN RCT = RCT + '1'
            WHEN FT = 'DL1 '   THEN DCT = DCT + '1'
            OTHERWISE               VCT = VCT + '1'
            END
          QUEUE FILE ' ' FT RF '   ' OP ED ' ' POPT' 'LG' ',
                     STR DB IB LSR'   'FCT
          FCT  = D2X(X2D(FCT) + LEN)
          END I
/* ----------------------------------------------------------------- */
/* DISPLAY USING XEDIT                                               *
/* ----------------------------------------------------------------- */
      QUEUE
      'X' VMID 'FCT A (PROFILE FCT)' VCT DCT RCT OCT DMB
      EXIT
FCT XEDIT
/* FCT XEDIT */
      ARG . . . . . . . VCT DCT RCT OCT DMB .
      OCT = FORMAT(OCT,4,0)
      'INPUT'
      EXTRACT ?FN?SIZ?LSCREEN?
      PARSE VALUE FNAME.1 WITH FNAME.1 .
      'CTL' '%' 'E'
      'CTL' '&' 'P WHI     N'
      'SET PF03 QQUIT'
      'SET PF15 QQUIT'
      'SET PF04 AMB' DMB            /* VSAM INFO */
      'SET PF05 FCTE'               /* DSTOR FCTE */
      'SET LINEND OFF'
      'SET PF09 TOP#+1#SORT * A 1 7'       /* BY NAME    */
      'SET PF10 TOP#+1#SORT * A 12 18'     /* BY FORMAT  */
       'SET PF11 TOP#+1#SORT * A 24 30'     /* BY STATUS  */
      'SET PF12 TOP#+1#SORT * A 34 40'     /* BY OPTIONS */
      'SET LINEND ON #'
      'COLOR ID WHI NON'
      'COLOR ARROW WHI NON'
      'COLOR CURL TUR REV'
      'COLOR TOF  TUR REV'
      'COLOR FILE TUR REV'
      'COLOR PREF YEL REV'
      'TOFEOF OFF'
      'SHADOW OFF'
      'NUMBER ON'
      'CMD BOT'
      'SCALE OFF'
      'MSGLINE ON 2 OVERLAY'
      'VERIFY 1 57'
      'PREFIX ON L'
      'WRAP ON'
      'CURL ON 3'
      'CURS S 4 7'
      'RESER 1 GRE REV N' ' 'FNAME.1' %&' SIZE.1 'FILES   ',
            '('VCT' VSAM, 'DCT' DL1, 'RCT' REMOTE)       'OCT' OPEN'
      'RESER 2 YEL REV N' '      NAME       FORMAT      STATUS',
                          '   OPTIONS STR D I  LSR '
      'RESER' LSCREEN.1-1 'N' '%&PF4=VSAM  PF5=FCTE',
            '   SORT BY:  PF9=NAME   PF10=FMAT  PF11=STAT    PF12=OPTS'
      'TOP'
FCTE XEDIT
/* FCTE XEDIT */
      EXTRACT ?FN?CURSOR?LSCREEN?
      IF CURSOR.1 = LSCREEN.1 THEN EXTRACT ?CURL?
                              ELSE DO
                                   LINE = CURSOR.1-3
                                   '+'LINE
                                   EXTRACT ?CURL?
                                  '-'LINE
                                   END
     ADD = SUBSTR(CURLINE.3,58)
     'CMS EXEC VSTOR' FNAME.1. ADD
AMB XEDIT
/* AMB XEDIT ****************************************************** */
/*           DISPLAY VSAM AMB INFORMATION                           */
/*   MUST BE RUN FROM FCT XEDIT                                     */
/*   PARAMETER:  DMB DIRECTORY ADDRESS                              */
/*   EXTRACTS OTHER DATA FROM CURRENT LINE                          */
/* **************************************************************** */
      ARG DMBA .
      EXTRACT ?FN?CURSOR?LSCREEN?
      IF CURSOR.1 = LSCREEN.1. THEN EXTRACT ?CURL?
                               ELSE DO
                                    LINE = CURSOR.1-3
                                    '+'LINE
                                    EXTRACT ?CURL?
                                    '-'LINE
                                     END
     FMAT = SUBSTR(CURLINE.3,12,4)
     STAT = SUBSTR(CURLINE.3,24,3)
     IF FMAT ='REMO' | STAT='CLO' THEN EXIT
     VMID = FNAME.1
     IF FMAT ='DL1 ' THEN CALL DLI
                     ELSE CALL VSAM
/* ---------------------------------------------------------------- */
/* FROM AMB LIST        +4 = POINTER TO DATA AMB                    */
/* ---------------------------------------------------------------- */
      VADD = HEXADD(AMBL,4)
      CALL FWORD
       AMB.1 = SUBSTR(FWORD,3,6)
      VADD = HEXADD(VADD,4)
      CALL FWORD
      AMB.2 = SUBSTR(FWORD,3,6)
      IF AMB.2 = '000000' THEN N = '1'
                          ELSE N = '2'
/* ---------------------------------------------------------------- */
/* FROM DATA AMB (AND INDEX AMB IF PRESENT)                         */
/* ---------------------------------------------------------------- */
DO I = 1 TO N
      VADD = HEXADD(AMB.I,14)
      CALL FWORD
      CISIZ.I = LEFT(X2D(FWORD),10, )              /* CI SIZE */
      VADD = HEXADD(AMB.I,28)
      CALL FWORD
      MXREC.I = LEFT(X2D(FWORD),10, )              /* MAX REC SIZE */
      VADD = HEXADD(AMB.I,38)
      CALL FWORD
      IXLEV.I = LEFT(X2D(SUBSTR(FWORD,1,4)),10, )  /* INDEX LEVELS */
      EXTNT.I = LEFT(X2D(SUBSTR(FWORD,5,4)),10, )  /* EXTENTS */
      VADD = HEXADD(AMB.I,3C)
      CALL FWORD
      NRECS.I = LEFT(X2D(FWORD),10, )              /* NO OF RECORDS */
      VADD = HEXADD(AMB.I,9C)
      CALL FWORD
      EXCPS.I = LEFT(X2D(FWORD),10, )              /* LOCAL EXCPS */
      VADD = HEXADD(AMB.I,4)
      CALL FWORD
      KYPOS.I = LEFT(X2D(SUBSTR(FWORD,5,4)),10, )  /* KEY POSITION */
      VADD = HEXADD(AMB.I,8)
      CALL FWORD
      KYLEN.I = LEFT(X2D(SUBSTR(FWORD,1,4),10,  )  /* KEY LENGTH */
      CAFRP.I = LEFT(X2D(SUBSTR(FWORD,5,2))||'%',4, )    /* %FREE/CA */
      CIFRP.I = LEFT(X2D(SUBSTR(FWORD,7,2))||'%',4, )    /* %FREE/CI */
      VADD = HEXADD(AMB.I,C)
      CALL FWORD
      CIPCA.I = LEFT(X2D(SUBSTR(FWORD,1,4)),10, )  /* CI PER CA */
      CAFRE.I = LEFT('('X2D(SUBSTR(FWORD,5,4))')',6,)   /* FREE/CA */
      VADD = HEXADD(AMB.I,10)
      CALL FWORD
      CIFRE.I = LEFT('('X2D(FWORD)')',6, )              /* FREE/CI */
      VADD = HEXADD(AMB.I,54)
      CALL FWORD
      CISPL.I = LEFT(X2D(FWORD),4, )              /* CI SPLITS */
      VADD = HEXADD(AMB.I,58)
      CALL FWORD
      CASPL.I = LEFT(X2D(FWORD),4, )              /* CA SPLITS */
      VADD = HEXADD(AMB.I,60)
      CALL FWORD
      SHR = X2C(SUBSTR(FWORD,1,2))                /* SHARE OPTION */
      SELECT
        WHEN BITAND(SHR,'80'X) ¬= '00'X THEN SHROP.I = '1'
        WHEN BITAND(SHR,'40'X) ¬= '00'X THEN SHROP.I = '2'
        WHEN BITAND(SHR,'20'X) ¬= '00'X THEN SHROP.I = '3'
        WHEN BITAND(SHR,'10'X) ¬= '00'X THEN SHROP.I = '4'
        OTHERWISE NOP
        END
      SHROP.I = LEFT(SHROP.I,10, )
      VADD = HEXADD(AMB.I,61)
      CALL FWORD
      VADD = SUBSTR(FWORD,3,6)                    /* CATALOG ACB */
      VADD = HEXADD(VADD,1C)
      CALL FWORD
      UCAT = FWORD
      VADD = HEXADD(VADD,4)
      CALL FWORD
       UCAT = UCAT||SUBSTR(FWORD,1,6)
      UCAT.I = LEFT(X2C(UCAT),10, )                 /* CATALOG NAME */
      VADD = HEXADD(AMB.I,70)
      CALL FWORD
      VADD = SUBSTR(FWORD,3,6)                      /* VOLUME LIST */
      VADD = HEXADD(VADD,8)
      CALL FWORD
      VOLID = FWORD
      VADD = HEXADD(VADD,4)
      CALL FWORD
      VOLID = VOLID||SUBSTR(FWORD,1,6)
      VOLID.I = LEFT(X2C(VOLID),10, )               /* VOLUME NAME */
      VADD = HEXADD(AMB.I,80)
      CALL FWORD
      DELET.I = LEFT(X2D(FWORD),10, )               /* LOCAL DELETES */
      VADD = HEXADD(AMB.I,84)
      CALL FWORD
      INSRT.I = LEFT(X2D(FWORD),10, )               /* LOCAL INSERTS */
      VADD = HEXADD(AMB.I,88)
      CALL FWORD
      UPDAT.I = LEFT(X2D(FWORD),10, )               /* LOCAL UPDATES */
      VADD = HEXADD(AMB.I,8C)
      CALL FWORD
      RETRV.I = LEFT(X2D(FWORD),10, )              /* LOCAL RETRIEVES */
      VADD = HEXADD(AMB.I,94)
      CALL FWORD
      LCISPL.I = LEFT('('X2D(FWORD)')',6, )         /* LOC CI SPLITS */
      VADD = HEXADD(AMB.I,98)
      CALL FWORD
      LCASPL.I = LEFT('('X2D(FWORD)')',6, )         /* LOC CA SPLITS */
      VADD = HEXADD(AMB.I,50)
      CALL FWORD
      FREES.I = LEFT(X2D(FWORD),10, )               /* FREE BYTES */
      IF I = '2' THEN ITERATE
      END I
/* ---------------------------------------------------------------- */
/* DISPLAY                                                          */
/* ---------------------------------------------------------------- */
      IF N = 1 THEN DO
                    EXTNT.2 = ' ' ; NRECS.2 = ' ' ; MXREC.2 = ' '
                    CISIZ.2 = ' ' ; IXLEV.2 = ' ' ; EXCPS.2 = ' '
                    END
               ELSE IXLEV.1 = '          '
     HEADING = SUBSTR(CURLINE.3,1,55)||'.'
     X = DIAG(8,'SCREEN VMOUT TUR REV')
     SAY HEADING
     X = DIAG(8.'SCREEN VMOUT' COLOUR 'NON')
     SAY ' VOLUME ID           ' VOLID.1
     SAY ' VSAM CATALOG        ' UCAT.1
     SAY ' SHARE OPTION        ' SHROP.1
     SAY ' KEY LENGTH          ' KYLEN.1
     SAY ' KEY POSITION        ' KYPOS.1
     SAY ' EXTENTS             ' EXTNT.1  '      'EXTNT.2
     SAY ' INDEX LEVELS        ' IXLEV.1  '      'IXLEV.2
     SAY ' RECORDS             ' NRECS.1  '      'NRECS.2
     SAY ' CI SIZE             ' CISIZ.1  '      'CISIZ.2
     SAY ' MAX. RECORD SIZE    ' MXREC.1  '      'MXREC.2
     SAY ' TOTAL FREE BYTES    ' FREES.1
     SAY ' CI FREE SPACE       ' CIFRP.1||CIFRE.1
     SAY ' CI PER CA           ' CIPCA.1
     SAY ' CA FREE SPACE       ' CAFRP.1||CAFRE.1
     SAY ' CA SPLITS           ' CASPL.1||LCASPL.1
     SAY ' CI SPLITS           ' CISPL.1||LCISPL.1
     SAY ' DELETES             ' DELET.1
     SAY ' INSERTS             ' INSRT.1
     SAY ' UPDATES             ' UPDAT.1
      SAY ' RETRIEVES           ' RETRV.1
     SAY ' EXCPS               ' EXCPS.1  '      'EXCPS.2
     X = DIAG(8,'SCREEN VMOUT YEL NON')
     EXIT
/* ---------------------------------------------------------------- */
/* SUBROUTINE TO LOCATE AMBLIST FOR A DL/1 FILE                     */
/* ---------------------------------------------------------------- */
DLI:
      COLOUR  = 'PIN'
      NAME    = SUBSTR(CURLINE.3,1,7)
      DO FOREVER                              /* SCAN DMB DIRECTORY */
          VADD = DMBA
          CALL FWORD
          DNAM = X2C(FWORD)
          IF DNAM = SUBSTR(NAME,1,4) THEN DO
             VADD = HEXADD(VADD,4)
             CALL FWORD
             DNAM = DNAM||X2C(SUBSTR(FWORD,1,6))
             IF DNAM = NAME THEN LEAVE
             END
         DMBA = HEXADD(DMBA,18)
         END
     VADD = HEXADD(DMBA,8)                    /* LOCATE DMB PREFIX */
     CALL FWORD
     DMBP = SUBSTR(FWORD,3,6)
     VADD = HEXADD(DMBP,10)                   /* LOCATE ACB */
     CALL FWORD
     ACB  = SUBSTR(FWORD,3,6)
     VADD = HEXADD(ACB,4)                     /* LOCATE AMBLIST */
     CALL FWORD
     AMBL = SUBSTR(FWORD,3,6)
     RETURN
/* ---------------------------------------------------------------- */
/* SUBROUTINE TO LOCATE AMB LIST FOR A VSAM FILE                    */
/* ---------------------------------------------------------------- */
VSAM:
      COLOUR = 'YEL'
      VADD = SUBSTR(CURLINE.3,58,6)
      VADD = HEXADD(VADD,7C)           /* AMBLIST ADDRESS AT ACB +4 */
      CALL FWORD
      AMBL = SUBSTR(FWORD,3,6)
      RETURN


Mike Jones
Senior Systems Programmer
Wavin Building Products (UK)  ) Xephon 1988



















