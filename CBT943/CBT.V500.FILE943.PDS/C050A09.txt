Trapping storage violations

One of the most difficult problems to solve in CICS is a storage
violation.  Storage violations can be manifested in many
different ways, some of which can go undetected by CICS and
which may affect data integrity or system performance without
any obvious external symptoms.  Fortunately, CICS provides
some degree of integrity by checking Storage Accounting
Areas (SAAs) and Free Area Queue Element (FAQE) chains on
every storage control request.  This is helpful in identifying
certain types of storage violations, but determining the cause of
the problem can be extremely difficult.  For this reason, IBM
has provided a utility to help identify difficult storage
violations at the earliest possible point.

USING CSFE DEBUG

The CSFE transaction can be used to enable a storage violation
trap which will cause the internal trace program (DFHTRP) to
scan either the FAQE chains or task-related storage on every
trace entry.  The storage violation trap can also be enabled at
CICS initialisation by specifying
STGCHK=(FAQE,TASKSTG) in the SIT (see the Problem
Determination Guide for further details).  CSFE is documented
in CICS Supplied Transactions, but briefly, use:

    CSFE DEBUG,FAQE=ON

to enable the FAQE trap, and

    CSFE DEBUG,TASKSTG=ON

to enable the task storage trap.

Unfortunately, if your CICS system is pre-release 1.7.0, the
TASKSTG trap is not available.  Also, you should be aware
that the FAQE trap is extremely expensive in terms of CPU
usage, and it can cause significant paging.  The TASKSTG
trap is much more feasible for a production system, since it
only checks storage associated with the active task, and that
storage is generally already in real storage.

VALIDATING TERMINAL STORAGE

A troublesome storage violation problem was recently
encountered both at BMC Software Inc and at one of our
customer locations.  It was apparent that the Storage
Accounting Areas on certain Terminal I/O Areas (TIOAs) were
being translated to upper case.  The storage violation dump that
was produced by the problem happened much too late to
determine what component had violated the storage.

We attempted to use the TASKSTG trap, but had no success in
narrowing the possibilities.  Therefore, we decided to add the
following code to DFHTRPFQ (the storage violation trap
program) in order to trap a violation of terminal storage
immediately.  This code extends the function of the TASKSTG
trap to detect a violated TIOA associated with the terminal that
is running the task.

This modification will not add significant overhead to the CICS
TASKSTG trap.  Of course, this code change will only work
for CICS 1.7.0 and above, although it could be integrated into
DFHTRPFQ at a lower level of CICS with a little research.

./ CHANGE NAME=DFHTRPFQ
         TM    TCAFCAAA,TCAFCTRM   IF NOT TERMINAL FACILITY       @USR 53900100
         BZ    USRNOTCT            SKIP                           @USR 53900200
         XR    R3,R3               CLEAR POINTER                  @USR 53900300
         ICM   R3,B'0111',TCAFCAAA+1  POINT TO TCTTE              @USR 53900400
         DROP  TCTTEAR                                            @USR 53900500
         USING DFHTCTTE,R3                                        @USR 53900600
         XR    R4,R4               CLEAR POINTER                  @USR 53900700
         ICM   R4,B'0111',TCTTESC+1  FIRST TIOA                   @USR 53900800
         USING DFHSAADS,R4         ADDRESSABILITY FOR SAA         @USR 53900900
*                                                                 @USR 53901000
USRSCANT DS    0H                                                 @USR 53901100
         SR    R4,R3               COMPUTE DIFFERENCE             @USR 53901200
         C     R4,=F'4'            END OF CHAIN?                  @USR 53901300
         BE    USRNOTCT            ... YES                        @USR 53901400
         AR    R4,R3               RE-ADJUST BASE REG             @USR 53901500
         CLI   SAASCI,X'85'        TERMINAL STORAGE?              @USR 53901600
         BNE   TRUSTG9C            ... NO, WRONG STORAGE TYPE     @USR 53901700
         LH    R5,SAASAD           STORAGE AREA DISPLACEMENT      @USR 53901800
         LTR   R5,R5               CHECK FOR ZERO                 @USR 53901900
         BZ    TRUSTG9B            ..ERROR IF ZERO                @USR 53902000
         AR    R5,R4               ADDRESS 'DUPLICATE' SAA        @USR 53902100
         CLC   0(8,R5),SAACFDC     DO THE SAA'S MATCH ?           @USR 53902200
         BNE   TRUSTG9C            ..NO, ERROR                    @USR 53902300
*                                                                 @USR 53902400
         ICM   R4,B'0111',SAASACA+1  NEXT TIOA                    @USR 53902500
         B     USRSCANT            LOOP TILL DONE                 @USR 53902600
         DROP  R4                                                 @USR 53902700
*                                                                 @USR 53902800
USRNOTCT DS    0H                                                 @USR 53902900
         DROP  R3                                                 @USR 53903001
         USING DFHTCTTE,TCTTEAR                                   @USR 53903100
./ ENDUP

Using this trap, we were able to determine that the violation
had occurred inside the CICS Terminal Control Program while
processing an extended field mode READ BUFFER.  The
offending code is located in module DFHTCTRN, and is
currently being APARed with the IBM Support Center.  The
problem number is 8X041, so look for this if you are a user of
BTAM and are using 3270 extended data streams.

Van Wiles
Product Developer
BMC Software Inc (USA) ) BMC Software Inc 1990


