A CICS storage alteration facility

The purpose of this program is to perform a zap at a specified
address.  The lowest permissible address is the address of the
beginning of the CICS region: the uppermost address is the
address of the end of the CWA.  Four bytes starting at the
given address can be changed.  The facility is invoked by
entering DUMP xxxxxx, where xxxxxx is the address to be
changed.

As we create BMS maps with SDF, the appropriate BMS
macros are not included.  The following details, together with
the map itself, which is included, will enable you to create
those macros where needed.  The map contains five variable
fields:

o      ADR - 6 characters, attributes AUTOSKIP, BRIGHT.

o      CODEHEX - 8 characters, attributes AUTOSKIP, BRIGHT.

o      CODCHR - 4 characters, attributes AUTOSKIP, BRIGHT.

o      NEWCODE - 8 characters, attributes UNPROTECTED,
      MDT, BRIGHT, CURSOR.

o      MSG - 40 characters, AUTOSKIP, BRIGHT.

As can be seen, the only unprotected field is NEWCODE,
where the new value has to be entered.  This value is in
hexadecimal format.

The dump transaction (or its equivalent), together with the
DUMPP program, needs to be defined to CICS.  Figure 1
shows an example of the screen display produced by this
utility.


DUMPP SOURCE CODE

         COPY  DFHCSADS
CSAPTR   EQU   13
DFHEISTG DSECT
CODENEW  DS  CL4
TEMP     DS  CL1
LEN      DS  H
INPPARM  DS  0CL11
DUMP     DS  CL4
         DS  CL1
ADDR     DS  CL6
TARGET   DS  CL6
         DS  F
TOCOM    DS  0CL10
PACKED   DS  CL4
TOADR    DS  CL6
F11      DS  CL1
F12      DS  CL1
         COPY DUMPS
MSGERR   DS   0CL36
MSGADR   DS   CL6
MSGRST   DS   CL30
COM      DSECT
         USING *,9
COMPCK   DS    CL4
COMADR   DS    CL6
DUMPP    DFHEIENT CODEREG=7,DATAREG=10
         CLC  EIBCALEN,=H'0'   FIRST TIME IN THE TRAN ?
         BE   FIRST
         B    INWARD
FIRST    EXEC CICS HANDLE CONDITION LENGERR(LENERR)
         MVC  LEN,=H'11'
         EXEC CICS RECEIVE INTO(INPPARM) LENGTH(LEN)
         TRT  ADDR,TABLEH
         BZ   CONT
         MVC  MSGERR,=C'A NON HEX CHARACTER HAS BEEN ENTERED'
         EXEC CICS SEND FROM(MSGERR) LENGTH(36) ERASE
         EXEC CICS RETURN
CONT     XR   5,5               THIS PART TURNS THE ADDRESS
         LA   3,ADDR            FROM CHAR DIGITS TO HEX DIGITS.
         LA   4,TARGET          EG C'56ABC5 -> X'56ABC5'
         LA   5,6(5)            PUTS IT ON REG5
LOOP     TM   0(3),B'00010000'  AND MOVES THE CONTENTS OF THIS
         BZ   LOOPNOF           ADDRESS IN MEMORY TO CODECHRO.
         MVC  0(1,4),0(3)
         B    GOON
LOOPNOF  TRT 0(1,3),TABLE
         STCM 2,B'0001',0(4)
GOON     LA   3,1(3)
         LA   4,1(4)
         BCT  5,LOOP
         PACK PACKED,TARGET
         L    5,PACKED
         SRL  5,4
         ST   5,PACKED
         EXEC CICS ADDRESS CSA(CSAPTR)
         CLC  PACKED,CSAPLBA     LOWER LIMIT OF CICS PARTITION
         BNL  GOMORE
         MVC  MSGADR,ADDR
         MVC  MSGRST,=CL30' IS LOWER THAN CICS PARTITION '
         EXEC CICS SEND FROM(MSGERR) LENGTH(36) ERASE
         EXEC CICS RETURN
GOMORE   LR   3,CSAPTR      UPPER LIMIT OF PARTITION'S CHANGE
         AH   3,CSAWAL      IS THE END OF CWA
         XR   4,4
         LR   4,5
         AH   4,=H'4'       THE ADDRESS HAS TO BE 4 BYTES
         CR   4,3           LESS THAN THE UPPER LIMIT
         BL   CONT1
         MVC  MSGADR,ADDR
         MVC  MSGRST,=CL30' GREATER THAN CICS PARTITION  '
         EXEC CICS SEND FROM(MSGERR) LENGTH(36) ERASE
         EXEC CICS RETURN
CONT1    EQU  *
         MVC  CODCHRO,0(5)
         XR   5,5
         LA   3,CODCHRO           THIS PART MOVES TO CODEHEXO
         LA   4,CODHEXO           THE HEX REPRESENTATION OF
         LA   5,4(5)              CODCHRO.
LOOP1    EQU  *                   EG  C'12AB'-> C'F1F2C1C2'
         MVC  F11,0(3)
         MVC  F12,0(3)
         NI   F11,X'F0'
         NI   F12,X'0F'
         TRT  F11,TABLE1
         STCM 2,B'0001',0(4)
         TRT  F12,TABLE2
         LA   4,1(4)
         STCM 2,B'0001',0(4)
         LA   3,1(3)
         LA   4,1(4)
         BCT  5,LOOP1
         XR   2,2
         XR   6,6
         XR   3,3                 THIS PART CHANGES UNPRINTABLE
         LA   3,4(3)              CHARS IN CODCHRO TO POINTS - X'4B'
         LA   6,CODCHRO
LOPNT    TRT  0(1,6),TABLEPT
         STCM 2,B'0001',0(6)
         LA   6,1(6)
         XR   2,2
         BCT  3,LOPNT
         MVC  ADRO,ADDR
         MVC  TOADR,ADDR
         EXEC CICS SEND MAP('DUMPM') MAPSET('DUMPS') ERASE FREEKB
         EXEC CICS RETURN TRANSID('DUMP') COMMAREA(TOCOM) LENGTH(10)
INWARD   EQU  *
         L 9,DFHEICAP
         EXEC CICS HANDLE AID ENTER(ERR)                            X
                             CLEAR(GOOUT)                           X
                             PF5(CHKCODE)                           X
                             ANYKEY(ERR)
         EXEC CICS RECEIVE MAP('DUMPM') MAPSET('DUMPS')
CHKCODE  EQU *
         TRT  NEWCODEI,TABLEH
         BZ   UPDATE
         MVC  MSGO,=CL40'A NON HEX CHARACTER HAS BEEN ENTERED    '
         EXEC CICS SEND MAP('DUMPM') MAPSET('DUMPS') DATAONLY FREEKB
         EXEC CICS RETURN TRANSID('DUMP') COMMAREA(COM) LENGTH(10)
UPDATE   EQU  *
         L    5,COMPCK
         XR   2,2
         XR   6,6
         LA   3,NEWCODEI      THIS PART CHANGES THE HEX CODE WHICH
         LA   4,CODENEW       IS ENTERED IN NEWCODEI AND TURNS
         LA   6,4(6)          IT TO ITS HEX EQUIVALENT.
LOOP2    EQU  *               EG C'F1C234F3' -> X'F1C234F3'
         TRT  0(1,3),TABLEL
         STCM 2,B'0001',0(4)
         LA   3,1(3)
         XR   2,2
         TRT  0(1,3),TABLER
         STCM 2,B'0001',TEMP
         OC   0(1,4),TEMP
         XR   2,2
         LA   4,1(4)
         LA   3,1(3)
         BCT  6,LOOP2
         MVC  ADRO,COMADR
         MVC  CODHEXO,NEWCODEI
         MVC  0(4,5),CODENEW
         MVC  CODCHRO,=CL4'    '
         MVC  CODCHRO,CODENEW
         XR   2,2
         XR   6,6
         XR   3,3                 THIS PART CHANGES UNPRINTABLE
         LA   3,4(3)              CHARS IN CODCHRO TO POINTS - X'4B'
         LA   6,CODCHRO
LOOPPNT  TRT  0(1,6),TABLEPT
         STCM 2,B'0001',0(6)
         LA   6,1(6)
         XR   2,2
         BCT  3,LOOPPNT
         MVC  MSGO,=C'  THE UPDATE HAS BEEN PERFORMED         '
         EXEC CICS SEND MAP('DUMPM') MAPSET('DUMPS') ERASE FREEKB
         EXEC CICS RETURN TRANSID('DUMP') COMMAREA(COM) LENGTH(10)
ERR      EQU  *
         MVC  MSGO,=C'       INVALID PFKEY                    '
         EXEC CICS SEND MAP('DUMPM') MAPSET('DUMPS') DATAONLY FREEKB
         EXEC CICS RETURN TRANSID('DUMP') COMMAREA(COM) LENGTH(10)
LENERR   EQU  *
         MVC  MSGERR,=C'THE LENGTH OF THE ADDRESS IS INVALID'
         EXEC CICS SEND FROM(MSGERR) LENGTH(36) ERASE
         EXEC CICS RETURN
GOOUT    EQU  *
         MVC  MSGERR,=CL36'THANK YOU FOR YOUR COOPERATION      '
         EXEC CICS SEND FROM(MSGERR) LENGTH(36) ERASE
         EXEC CICS RETURN
TABLE    DC   256X'40'
         ORG  TABLE+X'C1'
         DC   X'FA'
         DC   X'FB'
         DC   X'FC'
         DC   X'FD'
         DC   X'FE'
         DC   X'FF'
         ORG
TABLEH   DC   256X'40'
         ORG  TABLEH+X'C1'
         DC   XL6'000000000000'
         ORG  TABLEH+X'F0'
         DC   XL10'00000000000000000000'
         ORG
TABLE1   DC   256X'40'
         ORG  TABLE1+X'00'
         DC   C'0'
         ORG  TABLE1+X'10'
         DC   C'1'
         ORG  TABLE1+X'20'
         DC   C'2'
         ORG  TABLE1+X'30'
         DC   C'3'
         ORG  TABLE1+X'40'
         DC   C'4'
         ORG  TABLE1+X'50'
         DC   C'5'
         ORG  TABLE1+X'60'
         DC   C'6'
         ORG  TABLE1+X'70'
         DC   C'7'
         ORG  TABLE1+X'80'
         DC   C'8'
         ORG  TABLE1+X'90'
         DC   C'9'
         ORG  TABLE1+X'A0'
         DC   C'A'
         ORG  TABLE1+X'B0'
         DC   C'B'
         ORG  TABLE1+X'C0'
         DC   C'C'
         ORG  TABLE1+X'D0'
         DC   C'D'
         ORG  TABLE1+X'E0'
         DC   C'E'
         ORG  TABLE1+X'F0'
         DC   C'F'
         ORG
TABLE2   DC   256X'40'
         ORG  TABLE2+X'00'
         DC   C'0'
         ORG  TABLE2+X'01'
         DC   C'1'
         ORG  TABLE2+X'02'
         DC   C'2'
         ORG  TABLE2+X'03'
         DC   C'3'
         ORG  TABLE2+X'04'
         DC   C'4'
         ORG  TABLE2+X'05'
         DC   C'5'
         ORG  TABLE2+X'06'
         DC   C'6'
         ORG  TABLE2+X'07'
         DC   C'7'
         ORG  TABLE2+X'08'
         DC   C'8'
         ORG  TABLE2+X'09'
         DC   C'9'
         ORG  TABLE2+X'0A'
         DC   C'A'
         ORG  TABLE2+X'0B'
         DC   C'B'
         ORG  TABLE2+X'0C'
         DC   C'C'
         ORG  TABLE2+X'0D'
         DC   C'D'
         ORG  TABLE2+X'0E'
         DC   C'E'
         ORG  TABLE2+X'0F'
         DC   C'F'
         ORG
TABLEL   DC   256X'40'
         ORG  TABLEL+X'C1'
         DC   X'A0'
         DC   X'B0'
         DC   X'C0'
         DC   X'D0'
         DC   X'E0'
         DC   X'F0'
         ORG  TABLEL+X'F0'
         DC   X'00'
         DC   X'10'
         DC   X'20'
         DC   X'30'
         DC   X'40'
         DC   X'50'
         DC   X'60'
         DC   X'70'
         DC   X'80'
         DC   X'90'
         ORG
TABLER   DC   256X'40'
         ORG  TABLER+X'C1'
         DC   X'0A'
         DC   X'0B'
         DC   X'0C'
         DC   X'0D'
         DC   X'0E'
         DC   X'0F'
         ORG  TABLER+X'F0'
         DC   X'00'
         DC   X'01'
         DC   X'02'
         DC   X'03'
         DC   X'04'
         DC   X'05'
         DC   X'06'
         DC   X'07'
         DC   X'08'
         DC   X'09'
         ORG
TABLEPT  DC   256X'4B'
         ORG  TABLEPT+X'40'
         DC   X'40'               FOR SPACE
         ORG  TABLEPT+X'4A'
         DC   X'4A'               FOR $
         ORG  TABLEPT+X'4C'
         DC   X'4C'               FOR <
         ORG  TABLEPT+X'4D'
         DC   X'4D'               FOR (
         ORG  TABLEPT+X'4E'
         DC   X'4E'               FOR +
         ORG  TABLEPT+X'4F'
         DC   X'4F'               FOR |
         ORG  TABLEPT+X'5A'
         DC   X'5A'               FOR !
         ORG  TABLEPT+X'5C'
         DC   X'5C'               FOR *
         ORG  TABLEPT+X'5D'
         DC   X'5D'               FOR )
         ORG  TABLEPT+X'5E'
         DC   X'5E'               FOR ;
         ORG  TABLEPT+X'5F'
         DC   X'5F'               FOR ¬
         ORG  TABLEPT+X'60'
         DC   X'60'               FOR -
         ORG  TABLEPT+X'61'
         DC   X'61'               FOR /
         ORG  TABLEPT+X'6B'
         DC   X'6B'               FOR ,
         ORG  TABLEPT+X'6C'
         DC   X'6C'               FOR %
         ORG  TABLEPT+X'6D'
         DC   X'6D'               FOR _
         ORG  TABLEPT+X'6E'
         DC   X'6E'               FOR >
         ORG  TABLEPT+X'6F'
         DC   X'6F'               FOR ?
         ORG  TABLEPT+X'7A'
         DC   X'7A'               FOR :
         ORG  TABLEPT+X'7B'
         DC   X'7B'               FOR #
         ORG  TABLEPT+X'7C'
         DC   X'7C'               FOR @
         ORG  TABLEPT+X'7D'
         DC   X'7D'               FOR '
         ORG  TABLEPT+X'7E'
         DC   X'7E'               FOR =
         ORG  TABLEPT+X'7F'
         DC   X'7F'               FOR "
         ORG  TABLEPT+X'C1'
         DC   C'ABCDEFGHI'        FOR ABCDEFHGI
         ORG  TABLEPT+X'D1'
         DC   C'JKLMNOPQR'        FOR JKLMNOPQR
         ORG  TABLEPT+X'E2'
         DC   C'STUVWXYZ'         FOR STUVWXYZ
         ORG  TABLEPT+X'F0'
         DC   C'0123456789'       FOR 0123456789
         ORG
         END  DUMPP


Safran Menachem
Systems Programmer
Mivtachim Computers (Israel)

