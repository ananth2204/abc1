Conversational or pseudo-conversational?

The choice between conversational and pseudo-conversational
mode programming in CICS is not a simple one to answer, since
an explanation involves not only examining how pseudo-
conversational programming works but requires an understanding
of the inner workings of CICS.  Like most matters of this kind,
the issue is not clear-cut.  Although IBM's party line is that almost
everything should be pseudo-conversational, it should be
remembered that IBM's main business is still that of selling
hardware.  An intelligent choice involves the consideration of a
number of factors regarding which function is being performed
and how this will be accomplished.

WHAT DOES PSEUDO-CONVERSATIONAL MEAN?

Most tasks which are performed by an interactive system require
several actions on the part of the terminal operator in order to
complete a logical unit of work.  For example, at our installation
the creation of a bibliographic record requires a request from the
operator, the entering of data on one or more screens, a review of
the data by the operator, and finally an indication by the operator
that the process is complete and the record may be stored.

If this function is programmed in conversational mode, a task will
be created by CICS at the beginning of this process and will
remain in existence until the end.  A pseudo-conversational
approach, on the other hand, terminates the task each time a
display is sent to the terminal operator and creates a new task
when a response is received.  However, the program must
preserve essential information about the first task when it
terminates and recover that information at the start of the second
task.  In this way the process appears to be conversational to the
operator.

One major problem is preserving the status of a record being
created or updated during the operator interaction.  Although
some simpler transaction processing systems may store the record
after each intermediate step in this operation, the extensive
validation required for some applications would preclude this
approach.  Thus the incomplete record must be kept somewhere
else until its processing is complete.

In a conversational system, this record is simply left in the main
storage work area in which it is being processed (but not in the
I/O area which was used to read it from the database, since this
would tie up extremely valuable resources).  In a pseudo-
conversational system, the record is placed in temporary storage,
either in  the computer's main storage or on auxiliary storage (ie
DASD), or it may be written to a work file defined by the
application.

In either case, it appears that the choice is between reserving a
sizeable area of main storage or of incurring the overhead of disk
I/O to write, and later read back, the data.  In a virtual storage
system, however, even data left in main storage may find its way
onto DASD by way of the operating system's paging mechanism.
This type of I/O is probably the most efficient in the whole
computer system.

The CICS task also needs a relatively small amount of additional
storage to preserve information about its current status.  In
conversational mode, this will usually be the TCA and the TWA.
A pseudo-conversational task must save the same information
using temporary storage or some equivalent facility.

In general the storage used by programs themselves does not enter
into the choice, since the programs are used by multiple tasks and
could possibly be defined as resident in main storage.  However,
because of the increased complexity of pseudo-conversational
programming, such programs will generally be larger than
conversational programs.

The situation is somewhat different with tasks which do not allow
record updates.  In this case it is only necessary to preserve status
information - the database information can be re-read whenever it
is needed.  This type of processing is quite well suited to a
pseudo-conversational approach.

OTHER CONSIDERATIONS

When a record is being updated from a terminal, some means
must be used to prevent simultaneous update from another
terminal.  The most straightforward way to do this is to use the
CICS enqueue/dequeue facilities, but an enqueue established for
this purpose is not preserved by CICS when a task is pseudo-
conversational.  A pseudo-conversational application must find
another way to accomplish the same function, while ensuring that
a reservation on a record is not preserved indefinitely if the
operator decides not to finish the update or if the system crashes
during the process.

Another consideration is that main storage might be held for a
long period if an operator leaves the terminal while an update is in
progress.  CICS provides a way to avoid this: in the PCT a time-
out interval can be specified, after which the task will be
terminated by CICS if there is no activity.  We have found that a
ten-minute interval provides more than adequate 'think' time,
while still not blocking the use of system resources unnecessarily.

A further consideration in evaluating the use of system resources
is the additional CICS overhead which results from creating and
ending a task for each operator interaction during pseudo-
conversational operation.

Perhaps the only real justification for forcing a complex database
update task into pseudo-conversational mode is if the available
main storage is limited by the System 370 architecture.  The
maximum address space on a non-XA system is limited to 16
megabytes.  We have a machine defined with eight megabytes of
main storage, with about three megabytes allocated to the CICS
partition.  This serves approximately 150 terminals with about 30
tasks active at any one time.  Most of our tasks updating
bibliographic records require about 10K of storage (less than 1%
require more than this).  By using the full 16 megabytes available
to us we could provide enough additional storage for another 800
simultaneous tasks - a 25-fold increase!  (Of course a significant
amount of additional storage would also be required in the TCT to
define all of the necessary extra terminals.)  It seems unlikely that
the storage requirements imposed by a conversational task such as
ours would represent a serious limitation to any installation.

Finally, it must be emphasised that all our programs, both
conversational and pseudo-conversational, are carefully designed
to minimise the resources held during terminal interactions.
VSAM strings are never held during these periods and enqueues
are used only when they are needed to preserve the integrity of the
database.  Our development organisation understands how to use
CICS effectively and these principles will continue to be taught
and enforced in the development of CICS applications.  We
cannot justify designing functions in ways which are not
appropriate or less efficient.

A few weeks after receiving the above article, the following letter
arrived from the same author.  It has been reproduced fully since
it directly addresses several points that have been made in
previous articles.

POST SCRIPT

A few weeks ago I sent some comments relating to the topic of
conversational programming in CICS; I feel that I must also
respond to the article from Christopher Frank in the April issue.

Not only do I disagree with some of the supposedly factual
statements made by Mr Frank, I am distressed by the supercilious
tone of his letter.  As I understand the original letter from Mr
Pearkins, he is simply suggesting that there may be occasions
when a conversational approach is better than pseudo-
conversational, and that it might be a good idea to do an analysis
of the advantages and disadvantages for a particular application
instead of blindly accepting the preaching of the vendor's
representatives.  I feel that I would be derelict in my duty as a
manager if I did not see that this is done for a number of aspects
of solving a problem, including the choice of a programming
language.

Even IBM has softened a little, and presents a reasonably well-
balanced discussion of this topic in the relatively new manual
Application Programming Primer (SC33-0139).  However, one of
the disadvantages of the conversational approach (occasional
unexplained waits) mentioned in Chapter 2-7 of this manual can
be avoided easily (and should be, to avoid locking up a precious
VSAM string).  This chapter certainly indicates that pseudo-
conversational programming tends to be more difficult, which is
consistent with my experience but contrary to the opinion stated
by Mr Frank.

In our application development, our approach has been to use
pseudo-conversational techniques for situations which do not
involve updating records, or in which the update can be done in
one interaction, and conversational techniques in more complex
update situations.  This has resulted in a fairly even mix of the
two types of transactions.

I cannot resist responding to a number of the specific statements
made by Mr Frank.  He states that virtual storage cannot be
purchased at any price; however, in most situations the same
effect can be obtained by better application design and choice of
programming language, thus reducing the storage required by each
task.  Mr Frank may not want to pay the price for more skilled
programmers, but nevertheless the choice is there.  Fewer than
five per cent of our conversational tasks (which perform updates
on complex variable-length records as long as 4000 bytes) use
more than 10K of storage.  I can get a lot of those in 16
megabytes.

I have not seen any approach that a pseudo-conversational
transaction can use to avoid extended locks on records while an
operator takes a coffee break, without also compromising the
integrity of the record.  The problem is inherent in on-line
processing, regardless of which approach is used.  In
conversational mode the CICS enqueue function can be used; the
pseudo-conversational programmer may use CICS temporary
storage to indicate that a record is in use.  In the first case the
RTIMOUT value eventually ends the lock; in the second case the
program can ignore the temporary storage lock after a
predetermined length of time.  If Mr Frank has better solutions, he
should be encouraged to describe them in CICS Update for the
benefit of the rest of us.

With reference to the increased number of DASD requests
required by pseudo-conversational techniques, I wonder where Mr
Frank thinks those COMMAREAs are being saved between
operator interactions.  If CICS temporary storage is not writing
them to DASD, then they are occupying a good part of the virtual
storage which he is trying to conserve.  I certainly don't want to
try to argue the issue of the efficiency of operating system paging
versus CICS temporary storage DASD I/O operations.  Although
it may be true that CICS can dispatch another task during the
physical I/O for temporary storage, the time spent in the
temporary storage routines and in VSAM before and after the I/O
is probably not negligible and is not available to another task.

With respect to Mr Frank's comments on locality of reference, has
he ever explored the ANTICPG parameter in the PCT?  It appears
to be useful for both programming approaches.

Mr Pearkins has clearly succeeded in his stated purpose of starting
a discussion.  Like most other decisions we must make, this one is
not a matter of black versus white, and I hope this discussion will
contribute toward more intelligent choices.


James S Aagaard
Director, Information Systems Development
Northwestern University Library (USA)	) Northwestern University 1989


The question of whether to adopt a conversational or a pseudo-
conversational approach to CICS application programming is
clearly one that several readers feel strongly about.  We are
indebted to Jon Pearkins for initially raising the subject and to all
those who have voiced their opinions.  We shall continue to
publish the views of our readers as long as they continue to throw
new light on the matter.  I, personally, would like to know why so
many CICS-supplied transactions are written in conversational
mode while IBM generally advocates the use of pseudo-
conversational techniques.

If you have a point of view to express on this matter or if you
would like to see any other CICS-related subject debated in the
pages of CICS Update, we would be delighted to hear from you.
Needless to say, our usual terms and conditions apply to any
material published.  Please write to the editor, Steve Piggott, at
any of the addresses shown on page 2 if you would like further
details.

