 CICS bubble sort

CICS does not allow the normal sort functions, since files cannot be opened and
closed by an application.  If the data has to be sorted, a batch job is normally
used to execute the sort.  This process of entering data on-line and then
sorting in a batch job can be avoided by the application program doing a bubble
sort of the data.

For instance, consider the application screen as shown in Figure 1 and assuming
the following to be true:

%    There are 20 lines of data to be sorted
%    Each line is considered as one field in the map
%    The complete line is the sort key (length 79 bytes).

The WORKING-STORAGE section data layout and PROCEDURE DIVISION code shown below
can be used to sort the data into descending sequence.

If just the start date is used as the sort key, be sure to change the compare in
paragraph 070-MOVE-SORT.  Reducing the sort key size will reduce the CPU time
needed to bubble sort the data.


START    END      LAST               FIRST          SOCIAL    DUP
DATE     DATE     NAME               NAME           SECURITY  FLAG
19860101 19861231 AAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA 081408335
19861231 19871231 XXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXX 777777777
19850515 18971231 CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC 222222222
19850515 18971231 CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC 222222222
..............................
..............................
19990323 19991231 XXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXX 333333333
etc etc etc...... for a total of 20 occurrences per screen.


Figure 1:  The unsorted screen output for the application



*** CICS BUBBLE SORT WORKING-STORAGE DATA AREAS ***
 WORKING-STORAGE SECTION.
 01  FILLER.
     05  HOLD-ARRAY-ELEMENT     PIC X(79).
 01  WORK-ARRAY-TABLE.
     05  WORK-ARRAY   OCCURS 20 TIMES INDEXED BY
                  WORK-ARRAY-IX
                  WORK-ARRAY-HIGH-IX
                  WORK-ARRAY-SECOND-IX.
         10  WORK-ARRAY-ELEMENT       PIC X(79).
         10  WORK-ARRAY-ELEMENT-X REDEFINES WORK-ARRAY-ELEMENT.
             15  WORK-START-KEY       PIC X(08).
             15  FILLER               PIC X(01).
             15  WORK-END             PIC X(08).
             15  FILLER               PIC X(01).
             15  WORK-LAST-NAME       PIC X(18).
             15  FILLER               PIC X(01).
             15  WORK-FIRST-NAME      PIC X(14).
             15  FILLER               PIC X(01).
             15  WORK-SOC-SEC         PIC X(09).
             15  FILLER               PIC X(01).
             15  WORK-DUP-FLAG        PIC X(01).
 01  MAP-AREA.
     05  MAP-FILLER             PIC X(12).
     05  MAP-HEADING-1.
         10  FILLER-LENGTH            PIC S9(4) COMP.
         10  FILLER-ATTR              PIC X(1).
          10  MAP-HEAD-1               PIC X(79).
     05  MAP-HEADING-2.
         10  FILLER-LENGTH            PIC S9(4) COMP.
         10  FILLER-ATTRI             PIC X(1).
         10  MAP-HEAD-2               PIC X(79).
     05  MAP-ARRAY          OCCURS 20 TIMES INDEXED BY
                            MAP-ARRAY-IX.
         10  MAP-LINE-LENGTH          PIC S9(4) COMP.
         10  MAP-LINE-ATTRIBUTE       PIC X(1).
         10  MAP-ARRAY-ELEMENT        PIC X(79).
*** CICS BUBBLE SORT PROCEDURE DIVISION CODE ***
******* After the RECEIVE MAP is successfully executed, the
******* data can be moved from the map data layout to the Bubble
******* Sort work area.  Be sure to clear out the MAP-AREA after
******* moving the data to the work area.
      SET WORK-ARRAY-IX TO +1.
      PERFORM 010-MOVE-MAP-TO-SORT
         THRU 010-MOVE-MAP-TO-SORT-EXIT
            VARYING MAP-ARRAY-IX FROM +1 BY +1
            UNTIL MAP-ARRAY-IX GREATER +20.
      SET WORK-ARRAY-HIGH-IX TO +20.
      SET WORK-ARRAY-IX TO +1.
      PERFORM 060-BUBBLE-SORT
         THRU 060-BUBBLE-SORT-EXIT.
******* After the sort is completed, the application program can
******* compare the records in sequence for duplicates and if a
******* duplicate exists, flag the duplicate.
      SET WORK-ARRAY-SECOND-IX TO +2.
      PERFORM 120-CHECK-DUPS
         THRU 120-CHECK-DUPS-EXIT
            VARYING WORK-ARRAY-IX FROM +1 BY +1
            UNITL WORK-ARRAY-SECOND-IX GREATER +20.
******* After the data has been sorted, the data lines can be moved
******* back into the map area.
      SET WORK-ARRAY-IX TO +1.
      PERFORM 100-MOVE-SORT-TO-MAP
         THRU 100-MOVE-SORT-TO-MAP-EXIT
            VARYING MAP-ARRAY-IX FROM +1 BY +1
            UNTIL MAP-ARRAY-IX GREATER +20.
******* When the map is sent to the terminal, the data will appear
******* in descending sequence.
***           END OF BUBBLE SORT CONTROL ROUTINE               ***
 010-MOVE-MAP-TO-SORT.
*** THIS MOVES THE MAP DATA TO THE SORT WORK DATA AREA ***
     MOVE MAP-ARRAY-ELEMENT (MAP-ARRAY-IX)
          TO WORK-ARRAY-ELEMENT (WORK-ARRAY-IX).
     SET WORK-ARRAY-IX UP BY +1.
 010-MOVE-MAP-TO-SORT-EXIT.
     EXIT.
 060-BUBBLE-SORT.
*** THIS CONTROLS THE BUBBLE SORT ROUTINE ***
      IF WORK-ARRAY-HIGH-IX GREATER +1
         NEXT SENTENCE
      ELSE
         GO TO 060-BUBBLE-SORT-EXIT.
 060-BUBBLE-SORT-1.
      PERFORM 070-MOVE-SORT
         THRU 070-MOVE-SORT-EXIT
         VARYING WORK-ARRAY-SECOND-IX FROM +1 BY +1
         UNTIL WORK-ARRAY-IX = WORK-ARRAY-HIGH-IX.
      SET WORK-ARRAY-HIGH-IX DOWN BY +1.
      IF WORK-ARRAY-HIGH-IX GREATER +1
         GO TO 060-BUBBLE-SORT.
 060-BUBBLE-SORT-EXIT.
      EXIT.
 070-MOVE-SORT.
 *** THIS DOES THE DATA SORTING  ***
     SET WORK-ARRAY-IX TO WORK-ARRAY-SECOND-IX.
     SET WORK-ARRAY-IX UP BY +1.
****** WITH WORK-START-KEY AS SORT KEY, USE THE FOLLOWING ****
**IF WORK-START-KEY (WORK-ARRAY-IX) GREATER               ****
**   WORK-START-KEY (WORK-ARRAY-SECOND-IX)                ****
     IF WORK-ARRAY-ELEMENT (WORK-ARRAY-IX)
             GREATER
        WORK-ARRAY-ELEMENT (WORK-ARRAY-SECOND-IX)
            MOVE WORK-ARRAY-ELEMENT (WORK-ARRAY-IX)
                  TO HOLD-ARRAY-ELEMENT
            MOVE WORK-ARRAY-ELEMENT (WORK-ARRAY-SECOND-IX)
                  TO WORK-ARRAY-ELEMENT (WORK-ARRAY-IX)
            MOVE HOLD-ARRAY-ELEMENT
                  TO WORK-ARRAY-ELEMENT (WORK-ARRAY-SECOND-IX).
 070-MOVE-SORT-EXIT.
      EXIT.
 100-MOVE-SORT-TO-MAP.
*** THIS MOVES THE SORTED DATA TO THE MAP ***
     MOVE  WORK-ARRAY-ELEMENT (WORK-ARRAY-IX)
           TO MAP-ARRAY-ELEMENT (MAP-ARRAY-IX).
     SET WORK-ARRAY-IX UP BY +1.
 100-MOVE-SORT-TO-MAP-EXIT.
     EXIT.
 120-CHECK-DUPS.
      IF WORK-START-KEY (WORK-ARRAY-IX) =
              WORK-START-KEY (WORK-ARRAY-SECOND-IX)
         MOVE 'Y' TO WORK-DUP-FLAG (WORK-ARRAY-SECOND-IX).
      SET WORK-ARRAY-SECOND-IX UP BY +1.
 120-CHECK-DUPS-EXIT.
       EXIT.

Figure 2 shows how the results would appear.

START    END      LAST               FIRST          SOCIAL    DUP
DATE     DATE     NAME               NAME           SECURITY  FLAG
19990323 19991231 XXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXX 333333333
19861231 19871231 XXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXX 777777777
19860101 19861231 AAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAA 081408335
.............................
.............................
19850515 18971231 CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC 222222222
19850515 18971231 CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC 222222222 Y
etc etc etc...... for a total of 20 occurrences per screen.


Figure 2:  The sorted screen output for the application


Larry Goldstein
Systems Consultant
ORI/Calculon (USA)  ) ORI/Calculon1987














