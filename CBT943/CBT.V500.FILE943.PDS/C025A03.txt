 Checking security bits

For those who need (or desire) to inspect any of the operator security keys
under VSE/SP 2.1 and CICS 1.6, IBM has given us the 'ASSIGN OPERKEYS' EXEC
command.  However, this command does not facilitate the inspection of individual
security bits for two reasons.  Firstly, most CICS command-level applications
are being written in COBOL, which does not lend itself easily to bit
manipulation, and secondly, for reasons known only to IBM, I found the bits
returned by the ASSIGN OPERKEYS command in inverted order; ie security bit 1 is
in the last position!

One purpose for checking operator security keys is that our installation needs
to allow some operators view-only access, some complete update access, and some
update access to selected fields only.  If, at the beginning of a program, the
'security' program is called, the program logic can then permit these different
options without having to make either multiple PCT entries or multiple versions
of the same basic programs.  Thus, any maintenance to the system is greatly
simplified.

The assignment of most of the security bits is installation defined; for
example, security bit 4 on for an operator might allow 'display only' access
within a program;  security bit 5 on might allow updating only the name and
address fields;  and security bit 6 being on might allow updating all fields and
record deletion.

The two solutions that I have implemented at this installation follow - the
first in BAL and the second in COBOL.  I have included in the latter only the
relevant code needed to change the 64 security bits into 64 zone-decimal digits,
so that they can then be interrogated easily.


BAL EXAMPLE

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*     THIS PROGRAM CAN BE CALLED PASSING A TWO-BYTE DISPLAY FIELD     *
*     CONTAINING THE SECURITY BIT NUMBER (1-64) WHICH IS TO BE        *
*     VERIFIED. UPON RETURN TO THE INVOKING PROGRAM, THE TWO-BYTE     *
*     FIELD CONTAINS '00' IF SECURITY WAS OK, OR '99' IF NOT.         *
*     '??' IS RETURNED IN THE EVENT OF A FATAL PROGRAM PROBLEM.       *
*                                                                     *
*     BECAUSE THE RESULT OF THE 'ASSIGN' COMMAND RETURNS THE          *
*     FIELDS IN INVERTED ORDER, THE NUMBER PASSED IS SUBTRACTED       *
*     FROM 65.                                                        *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
DFHEISTG DSECT
DATAREG  EQU   9
COMREG   DSECT
FIELD    DS    ZL2
SECURITY CSECT
         L     DATAREG,DFHEICAP        S E T   U P   D S E C T
         USING COMREG,DATAREG          A D D R E S S A B I L I T Y
         EXEC CICS ASSIGN OPERKEYS(KEYS)
         PACK  WORK2,FIELD             PACK INTO WORKAREA
         ZAP   WORK1,=P'65'            INIT TO 65
         SP    WORK1,WORK2             CONVERT TO INVERTED FORM
         DP    WORK1,=P'8'             DIVIDE TO FIND WHICH BYTE
         CP    REMAIN,=P'0'            IF NO REMAINDER, ...
         BE    *+4+6                   SKIP AROUND THE "AP"
         AP    QUOTIENT,=P'1'          ELSE INCREASE BY ONE
         ZAP   WORK,QUOTIENT           GET QUOTIENT INTO WORK AREA
         CVB   4,WORK                  CONVERT INTO BINARY
         BCTR  4,0                     SUBTRACT 1 FOR OFFSET VALUE
         LA    5,KEYS                  PUT BEGINNING ADDR IN R5
         AR    5,4                     ADD OFFSET TO BEGINNING REG
*    REG 5 NOW CONTAINS ACTUAL BYTE IN DOUBLEWORD TO BE CHECKED
         AP    REMAIN,=P'1'            INCREMENT REMAINDER BY 1
          LA    6,HEXTAB                PRIME 6 TO ADDR OF TABLE
         LA    7,STEPS                 PRIME R7 WITH BCT NUMBER
         AP    QUOTIENT,REMAIN
LOOP     CLC   0(1,6),REMAIN           IS IT A MATCH?
         BE    FOUND
         LA    6,L'HEXTAB(6)           ELSE BUMP UP
         BCT   7,LOOP                  CONTINUE LOOPING
         B     ERROR                   IF FALLS THRU,   E R R O R
FOUND    MVC   FIELD,=C'99'            SET FOR FAILURE
         XR    7,7                     CLEAR R7
         ICM   7,B'0001',1(6)          INSERT NEW MASK FOR TM
         EX    7,CHECK                 EXECUTE THE "TM"
         BZ    EXITPROG                IF NO MATCH, SKIP NEXT MVC
         MVC   FIELD,=C'00'            SET FOR PASSING CHECK
EXITPROG EXEC CICS RETURN
CHECK    TM    0(5),X'00'              EXECUTED INSTRUCTION
ERROR    DS    0H                      ERROR ROUTINE NOT IN TABLE
         MVC   FIELD,=C'??'            SET FOR FATAL ERROR CONDITION
         B     EXITPROG
WORK     DS    D
KEYS     DS    CL8
WORK1    DS    0PL4
QUOTIENT DS    PL3
REMAIN   DS    PL1
WORK2    DS    PL4
HEXTAB   DS    0XL2                   TRANSLATE TABLE FOR CORRECT MASK
         DC    X'1C802C403C204C105C086C047C028C01'
TABEND   EQU   *
TABLEN   EQU   TABEND-HEXTAB
STEPS    EQU   TABLEN/L'HEXTAB
         END

This program is called by both COBOL and PL/I programs in my installation.  Make
certain, however, to catalog it as an object module (before VSE/SP 2.1, that
means in the relocatable library).


COBOL EXAMPLE

The following working-storage entries are used:

     03 SECURITY-KEYS   PIC S9(15)     COMP.
     03 SUB-SCRIPT      PIC S9(4)      COMP.
     03 SECURITY-NUM-TABLE
                       PIC 9          OCCURS 64.

The following procedure division code is used:

          PERFORM DIVIDE-RTN THRU DR-EXIT
                  VARYING SUB-SCRIPT FROM +1 BY +1
                          UNTIL SUB-SCRIPT GREATER THAN +64.
     DIVIDE-RTN.
            DIVIDE SECURITY-KEYS BY 2 GIVING SECURITY-KEYS
                  REMAINDER SECURITY-NUM-TABLE (SUB-SCRIPT).
     DR-EXIT.
            EXIT.

By realising that division of a binary number by two results in shifting out the
low-order bit, and that the remainder will always be the same as the value of
the bit shifted, the table can be loaded in an inverted fashion.  Then, the
value of any particular security code can be interrogated easily.



David Wakser
MIS Director
 National League for Nursing (USA)  ) Xephon 1987

































































