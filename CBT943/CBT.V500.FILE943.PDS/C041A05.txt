More about conversational programming - 1

I read with interest your article A second look at conversational
programming ÝCICS Update, January 1989¨.  It has been many
years since I have even seen an application coded this way and I
would like to offer the following thoughts.


APPLICATION AND DESIGN CODING

An obvious benefit with conversational design is that itUs easier to
code terminal activity in that a SEND WAIT can be immediately
followed by a RECEIVE (CONVERSE could be used instead).  This of
course eliminates the relative complexity of having to return to
CICS and re-enter your program (at the right point) after the
operator responds.

In my opinion, the down side of this is debugging.  An inherent
benefit of pseudo-conversational code is that, even without coding
sync points, you will automatically take one at end of task so this
becomes your longest possible Logical Unit of Work (LUW). Hence,
sending a map to the screen and returning to CICS (with a
COMMAREA) frees up all enqueues whether explicitly requested
or implied as with a VSAM Control Interval.  In addition, the end
of the LUW will commit all updated resources to that point.  This
eliminates a subsequent abend from wiping out prior update
requests.  This also prevents a program from accumulating large
GETMAINs of storage over a long period of time without issuing a
FREEMAIN (or sync point to end the LUW).


PERFORMANCE

It's generally accepted that CICS's Dynamic Storage Area (DSA) is
still the most critical resource in CICS.

DSA is the area that enables CICS programs to be quasi re-entrant
by providing a separate work area for each transaction currently
processing.  This is done automatically for COBOL programs and
allows multiple transactions to use the same copy of the
executable code at the same time (each pointing to its own
working storage area).

DSA size is dependent on how much of the 16-megabyte region is
left after CICS is initialised.  At this point, MVS/XA has not helped
the situation much.  The 16-megabyte restriction for a CICS region
is one of CICS system design, not resources, hence no amount of
additional storage would help.

Note that MVS will take about half the 16 megabytes leaving
about 8 megabytes for the user area.  Additionally, CICS system
modules, some tables, OSCOR, VSAM control blocks, all BMS
mapsets, and permanently resident modules must first be carved
out of this user area.  DSA is usually left with about 0.5 to 2
megabytes for transaction processing.  In this space it must
manage all non-permanent resident modules along with all
working storage areas for transactions in progress.
When this area becomes full, additional overhead takes place like
program compression, I/O to reload programs compressed out of
DSA and, upon failure, 'short-on-storage' and 'system under stress'
messages.

In pseudo-conversational coding, working storage for the
transaction is released while a user is working on a screen except
for its communication area (ie COMMAREA), whereas under a
conversational program structure, the entire working storage area
is maintained in the DSA.  Most designers make it a rule to keep
COMMAREAs as small as possible although this can be easily
abused minimising this benefit in DSA utilisation.

Additionally, program compression may also have less programs it
can free up under this conversational technique since programs
stay active during terminal activity.

On increased paging activity, I believe that even with CICS
anticipatory paging set properly, this can become a tremendous
performance problem in that the entire CICS region comes to a
halt to process even one page fault. In addition, anticipatory
paging does not aid us in pages that store mapsets or 'linked-to'
modules.

My feeling is that conversational programming could only be
tolerated under one of the following situations:
1   Very small and inconsequential activity.
2   Programs written and designed extremely well (and in
    Assembler language).

I am sure that I have just brushed the surface here and will be
interested in other opinions on this matter.


George R Madden
Reliance Insurance (USA) ) Xephon 1989

