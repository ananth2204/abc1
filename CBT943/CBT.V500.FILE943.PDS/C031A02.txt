 A bit map manipulation routine
At Canada Systems Group we run CICS in a service bureau environment and use the
CICS 1.7 Terminal Auto-install feature.  The terminal-naming requirements for
some of our CICS regions are not that rigid and we decided that we could get
away with simply assigning a four-digit number as a terminal name.  This
approach presented a challenge, however, in that we should be able to support
large terminal networks while using the minimum possible amount of storage to
control the name-assigning process, and still guarantee unique names.
We noticed that if we had a tool available to manipulate individual bits in a
byte, we could represent eight unique names by using only one byte.  That is, in
order to support a network of 4096 terminals all we would need is a bit map that
is 512 bytes long.  In order to accomplish this we coded an Assembler routine
that performs two basic functions:
%    Provides the relative location number of the first TonU bit in the bit map.
%    Turns a requested bit in the map on or off.
At install time in our Auto-install program, when we are ready to assign a name,
we attempt to read the bit map from temporary storage.  If it is not found we
assume initial entry and use an in-core map with all bits set on to prime the
map on temporary storage.  We then use the above mentioned routine to get the
first available number we can use as a name and to turn the corresponding bit
off in the bit map.  This updated bit map is then written back to temporary
storage to guard against duplicate names in case of a subsequent emergency
restart.
In case the bit-map manipulation routine returns Tno bit is onU, we assign
TFULLU as terminal name.  This gives us support for n+1 terminals where n is the
size of the bit map (ie the number of bytes multiplied by eight).  If at this
time terminal n+2 attempts to automatically log-on, we again assign TFULLU as
the name, which in turn causes the following message to be logged to CSMT:
DFH5942 INSTALL FOR FULL FAILED; REASON-DFH5983 INSERTS FULL
The presence of the word FULL in the message indicates to the support personnel
that it is perhaps time to increase the size of the bit map.
Similarly, at delete time we again use this routine to turn on the bit
corresponding to the terminal name, and write the updated map back to temporary
storage, thus making the name available for new users wishing to log-on
automatically.
We found that this bit-map manipulation technique can be used in areas other
than the Auto-install program.  As a result we have made it a callable module.
BIT-MAP MANIPULATION PROGRAM
$BITMAP    CSECT
*** THIS ROUTINE IS USED TO MANIPULATE BIT MAPS AND PERFORMS   ***
*   TWO FUNCTIONS BASED ON A PARAMETER LIST AS DESCRIBED BELOW.  *
*   NOTE THAT THE PARAMETER LIST IS VARIABLE LENGTH AND MUST     *
*   HAVE X'80' IN HI-ORDER OF LAST PARAMETER.                    *
*   ROUTINE IS RE-ENTRANT                                        *
*   FUNCTION-1:  FIND THE FIRST 'ON' BIT IN STORAGE AND RETURN   *
*                ITS RELATIVE POSITION IN REG-15. IF NO BIT IS   *
*                'ON', RETURN A NEGATIVE NUMBER IN REG-15.       *
*   ENTRY REGISTERS:    R1  ==> PARAMETER LIST                   *
*                       R13 ==> 18-WORD SAVE AREA                *
*                       R14 ==> RETURN POINT                     *
*                       R15 ==> ENTRY POINT                      *
*   PARAMETER LIST:WORD-1 ==> AREA TO BE SEARCHED                *
*                  WORD-2 ==> HALFWORD LENGTH OF THE AREA        *
*   FUNCTION-2:   FIND THE SPECIFIED BIT IN STORAGE AND MAKE IT  *
*                 THE SAME (ON OR OFF) AS THE HIGH-ORDER BIT OF  *
*                 THE THIRD PARAMETER.                           *
*   ENTRY REGISTERS:    R1  ==> PARAMETER LIST                   *
*                       R13 ==> 18-WORD SAVE AREA                *
*                       R14 ==> RETURN POINT                     *
*                       R15 ==> ENTRY POINT                      *
*   PARAMETER LIST:WORD-1 ==> AREA TO BE SEARCHED                *
*                  WORD-2 ==> HALFWORD CONTAINING BIT#           *
*                  WORD-3 ==> B'1.......'  TURN-THE-BIT-ON       *
***                       ==> B'0.......'  TURN-THE-BIT-OFF    ***
BASE     EQU   R12
         SAVE  (14,12)
          L     BASE,R15
         USING $BITMAP,BASE
         L     R7,0(R1)            ==> BIT MAP
         L     R8,4(R1)            ==> BIT# OR LENGTH OF BITMAP
         LTR   R8,R8               MORE PARMS ?
         BNP   FUNC#1              NO: THEN IT MUST BE FUNC#1
         L     R9,8(R1)            ELSE ==> ON/OFF INDICATOR
         B     FUNC#2              .... AND GO DO IT
FUNC#1   DS    0H
* FIND A BIT THAT IS 'ON'
* R7 ==> STORAGE TO BE SEARCHED
* R8 =-> LENGTH  TO BE SEARCHED
         LR    R15,R7              ==> BITMAP
         SR    R2,R2               CLEAR TRT WORK REG
         LH    R8,0(R8)            LENGTH OF BITMAP
BITLOOP  LR    R14,R8              GET THE LENGTH
         CH    R14,=H'256'         MORE THAN WE CAN HANDLE ?
         BNH   DOTRT               NO: GO DO IT
         LA    R14,256             SET MAX LENGTH
DOTRT    SR    R8,R14              REDUCE BY THE AMOUNT TAKEN CARE OF
         BCTR  R14,0               ADJUST FOR EXECUTE
         EX    R14,TRT             DO THE TRANSLATE-AND-TEST
         BNZ   GOTABYTE            FOUND ONE; GO USE IT
         LTR   R8,R8               ANY MORE BYTES LEFT ?
         BZ    NOBITON             NO: EXIT WITH 'NO-BIT-ON'
         LA    R15,1(R14,R15)      BUMP PAST THE 'DONE' SEGMENT
         B     BITLOOP             AND LOOP TILL WHOLE MAP SCANNED
NOBITON  L     R15,=A(-1)          SET "NO BIT IS ON"
         B     EXIT                .... AND EXIT
TRT      TRT   0(*-*,R15),BITTBL   FIND A BYTE THAT HAS AN ON BIT
* R1 ===> THE BYTE THAT HAS A BIT ON
* R2 HAS THE BIT# WITHIN THE BYTE (1 THRU 8)
GOTABYTE SR    R1,R7               GET THE # OF BYTES SKIPPED
         SLA   R1,3                GET THE # OF BITS SKIPPED
         AR    R1,R2               ADD BIT# WITHIN CURRENT BYTE
         BCTR  R1,0                SET REL TO 0
         LR    R15,R1              AND PASS IT TO USER
         B     EXIT
* TURN A BIT ON/OFF
* R7 ===> BITMAP
* R8 ===> BIT#
* R9 ===> ON/OFF INDICATOR
FUNC#2   SR    R15,R15             CLEAR WORK REG
         LH    R14,0(R8)           GET BIT#
         SRDL  R14,3               GET FULL BYTES TO BE SKIPPED
         SRL   R15,29              ...  AND THE BIT TO BE SET OFF/ON
         AR    R14,R7              ==> THE BYTE CONTAINING THE BIT
         LA    R15,PATRN(R15)      ==> PATTERN TO SET THE BIT OFF/ON
         TM    0(R9),X'80'         "ON" REQUESTED ?
         BO    TURNON              YES: GO TURN IT ON
         XC    0(1,R14),0(R15)     ELSE TURN IT OFF
         B     SETRC
TURNON   OC    0(1,R14),0(R15)     TURN IT ON
SETRC    LA    R15,0
EXIT     RETURN (14,12),RC=(15)
PATRN    DC    X'8040201008040201'          ON/OFF PATTERN
         LTORG ,
BITTBL   DS    0F
         DC    (001)X'00'                +
         DC    (001)X'08'                |
         DC    (002)X'07'                |
         DC    (004)X'06'                |  SEARCH PATTERN
         DC    (008)X'05'                |
         DC    (016)X'04'                |
         DC    (032)X'03'                |
         DC    (064)X'02'                |
          DC    (128)X'01'                +
         END
BIT-MAP TEST PROGRAM
BITMAP   CSECT
HELP     LOCTR
HMSG     DC    CL80'                                             '
         DC    CL80'  This dialogue tests bit-map manipulation.  '
         DC    CL80'  The following commands are supported:      '
         DC    CL80'                                             '
         DC    CL80'    HELP: Displays help.                     '
         DC    CL80'                                             '
         DC    CL80'     GET: Displays the relative number of    '
         DC    CL80'          first ON bit and turns it OFF,     '
         DC    CL80'          thus making the number "IN USE".   '
         DC    CL80'                                             '
         DC    CL80'          Displays NONE if no ON bit is      '
         DC    CL80'          found.                             '
         DC    CL80'                                             '
         DC    CL80'     PUT: Prompts for a number to be made    '
         DC    CL80'          "NOT IN USE" and turns ON the      '
         DC    CL80'          corresponding relative bit, thus   '
         DC    CL80'          making the number "NOT IN USE".    '
         DC    CL80'                                             '
         DC    CL80'     MAP: Displays the bit map.(SIZE of the  '
         DC    CL80'          map determines how many lines are  '
         DC    CL80'          displayed).                        '
         DC    CL80'                                             '
         DC    CL80'    SIZE: Shows current map size and prompts '
         DC    CL80'          for input to alter the map size.   '
         DC    CL80'          (If new size is not a multiple of  '
         DC    CL80'          8, it will be rounded down).       '
         DC    CL80'                                             '
         DC    CL80'     END: Ends the dialogue.                 '
         DC    CL80'                                             '
         DC       C'  PLEASE ENTER ONE OF THE ABOVE COMMANDS'
HMSGL    EQU   *-HMSG
&MAXSLOT SETA  4096   <=== MAX SLOTS (DEFAULT FOR THIS ASSEMBLY)
BITMAP   LOCTR
LINKREG  EQU   R11
         SAVE (14,12)
         LR    R12,R15
         USING BITMAP,R12
         LA    R14,SAVE
         ST    R14,8(R13)
         ST    R13,4(R14)
         LR    R13,R14
DATA     LOCTR
SAVE     DS   18F
BITMAP   LOCTR
GOHELP   TPUT  HMSG,HMSGL
         B     TGET
START    TPUT  MSG1,MSG1L
TGET     TCLEARQ ,
         TGET  FUNC,3
         OC    FUNC,=X'404040'
         CLC   =C'GET',FUNC
         BE    GOGET
         CLC   =C'PUT',FUNC
         BE    GOPUT
         CLC   =C'MAP',FUNC
         BE    GOMAP
         CLC   =C'HEL',FUNC
         BE    GOHELP
         CLC   =C'SIZ',FUNC
         BE    GOSIZE
         CLC   =C'END',FUNC
          BE    GOEND
         TPUT  MSG1E,MSG1EL
         B     TGET
DATA     LOCTR
FUNC     DS    CL4
MSG1     DC    C'  Enter command: HELP|GET|PUT|MAP|SIZE|END'
MSG1L    EQU   *-MSG1
MSG1E    DC    C'  Invalid command; re-enter HELP|GET|PUT|MAP|SIZE|END'
MSG1EL   EQU   *-MSG1E
BITMAP   LOCTR
GOGET    CALL  $BITMAP,(MAP,MAPSIZE),VL
         LTR   R15,R15
         BNM   CNVRT
         MVC   RSLT,=C'NONE'
         B     TELL
CNVRT    STH   R15,SLOT#
         CVD   R15,DWORD
         UNPK  RSLT,DWORD+6(2)
         OI    RSLT+3,X'F0'
TELL     TPUT  MSG3,MSG3L
         CLC   RSLT,=C'NONE'
         BE    START
         MVI   ONOFF,X'00'
         CALL  $BITMAP,(MAP,SLOT#,ONOFF),VL
         B     START
MAP      LOCTR
         DC    (&MAXSLOT/8)X'FF'
DATA     LOCTR
MSG3     DC    C'  Acquired slot ==> '
RSLT     DS    CL4
MSG3L    EQU   *-MSG3
DWORD    DS    D
ONOFF    DS    F
SLOT#    DS    H
MAPSIZE  DC    AL2(&MAXSLOT/8)
BITMAP   LOCTR
GOPUT    TPUT  MSG2,MSG2L
TGETIT   TCLEARQ ,
         TGET  SLOT,4
         LTR   R1,R1
         BZ    START
         LA    R2,4
         SR    R2,R1
         BZ    NUMTST
         SLL   R2,3
         L     R14,=X'F0F0F0F0'
         L     R15,SLOT
         SRDL  R14,0(R2)
         ST    R15,SLOT
NUMTST   TRT   SLOT,NUMERIC
         BNZ   BADSLOT
         PACK  DWORD,SLOT
         CVB   R15,DWORD
         LH    R14,MAPSIZE
         SLL   R14,3
         CR    R15,R14
         BL    OKAY
BADSLOT  TPUT  MSG2E,MSG2EL
         BAL   LINKREG,SHOWSZ
         B     GOPUT
OKAY     STH   R15,SLOT#
         OI    ONOFF,X'80'
         CALL  $BITMAP,(MAP,SLOT#,ONOFF),VL
         B     START
DATA     LOCTR
MSG2     DC    C'  Enter slot# (relative to 0) to be freed '
 MSG2L    EQU   *-MSG2
MSG2E    DC    C'  Invalid slot#.'
MSG2EL   EQU   *-MSG2E
SLOT     DS    F
BITMAP   LOCTR
GOMAP    L     R6,=A(MAP)
         LH    R5,MAPSIZE
         CH    R5,=H'8'           AT LEAST 1 FULL LINE ?
         BL    PARTIAL            NO: GO DO PARTIAL LINE
         LR    R9,R5
         SRL   R9,3               # OF LINES TO BE DISPLAYED
MAPLOOP  LA    R7,MAPOUT
         LA    R5,8               EACH LINE SHOWS 8 BYTES
LINELOOP ICM   R3,B'1000',0(R6)
         LA    R4,8               EACH BYTE SHOWS 8 SLOTS
BYTELOOP SR    R2,R2
         SLDL  R2,1
         STC   R2,0(R7)
         OI    0(R7),X'F0'
         LA    R7,1(R7)
         BCT   R4,BYTELOOP        LOOP TO COMPLETE ONE FULL BYTE
         LA    R6,1(R6)
         LA    R7,1(R7)
         BCT   R5,LINELOOP        LOOP TO COMPLETE ONE FULL LINE
         TPUT  OUTMAP,OUTMAPL
         LTR   R9,R9              ARE WE DOING A PARTIAL LINE ?
         BZ    START                YES: WE ARE DONE
         BCT   R9,MAPLOOP            NO: LOOP TO COMPLETE ALL LINES
* SEE IF A PARTIAL LINE STILL NEEDS TO BE DONE
         LH    R9,MAPSIZE     |
         SRL   R9,3           |
         SLL   R9,3           |   PARTIAL LINE NEEDED ?
         LH    R5,MAPSIZE     |
         SR    R5,R9          |
         LTR   R5,R5
         BZ    START              NO: EXIT
PARTIAL  MVI   MAPOUT,C' '
         MVC   MAPOUT+1(L'MAPOUT-1),MAPOUT
         LA    R7,MAPOUT
         LA    R9,0
         B     LINELOOP
DATA     LOCTR
OUTMAP   DS    0C
         DC    CL2' '
MAPOUT   DS    CL72
OUTMAPL  EQU   *-OUTMAP
BITMAP   LOCTR
GOSIZE   BAL   LINKREG,SHOWSZ
         TPUT  SMSG,SMSGL
         TCLEARQ ,
         TGET  SIZE,4
         LTR   R1,R1
         BZ    START
         LA    R2,4
         SR    R2,R1
         BZ    NUMTEST
         SLL   R2,3
         L     R14,=X'F0F0F0F0'
         L     R15,SIZE
         SRDL  R14,0(R2)
         ST    R15,SIZE
NUMTEST  TRT   SIZE,NUMERIC
         BNZ   BADSIZE
         PACK  DWORD,SIZE
         CVB   R15,DWORD
         CH    R15,=H'08'
          BL    BADSIZE
         CH    R15,=AL2(&MAXSLOT)
         BNH   SIZEOK
BADSIZE  TPUT  SMSGE,SMSGEL
         B     GOSIZE
SIZEOK   SRL   R15,3
         STH   R15,MAPSIZE
         TPUT  SMSGO,SMSGOL
         B     START
SHOWSZ   LH    R15,MAPSIZE
         SLL   R15,3
         CVD   R15,DWORD
         UNPK  MAPSZ,DWORD+5(3)
         OI    MAPSZ+3,X'F0'
         TPUT  SMSGO,SMSGOL
         BR    LINKREG
DATA     LOCTR
SMSGO    DC    C'  Current map size is '
MAPSZ    DS    CL4
         DC    C' slots.'
SMSGOL   EQU   *-SMSGO
SMSG     DC    C'  Enter new map size (MAX &MAXSLOT.)'
SMSGL    EQU   *-SMSG
SMSGE    DC    C'  Size invalid; must be between 8 and &MAXSLOT.'
SMSGEL   EQU   *-SMSGE
SMSGO    DC    C'  Map size altered to '
SIZE     DS    CL4
         DC    C' slots.'
SMSGOL   EQU   *-SMSGO
NUMERIC  DC    256X'FF'
         ORG   NUMERIC+C'0'
         DC    10X'00'
         ORG   ,
BITMAP   LOCTR
GOEND    DS    0H
         L     R13,4(R13)
         RETURN (14,12),RC=0
         LTORG ,
         END


Qamar Jawaid
Senior Technical Consultant
Canada Systems Group (Canada) ) Canada Systems Group 1988






















