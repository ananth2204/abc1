 Invoking CICS commands from batch
INTRODUCTION
Invoking CICS transactions from a batch program can be very useful at times.
There are a number of products in the market that allow you to do so but they
all use a VSAM dataset as a means of communicating between the batch job and
CICS.  The CICSCMND program supplied here uses a slicker way to accomplish the
same task, and that is by issuing an MVS master console modify command.
There is another program (CHKAUTH) which is responsible for security checking.
Authorised users are specified in the DFHCMD table.  CHKAUTH dynamically loads
this table to do the authorisation checking.  Everything you may need is
supplied here together with some notes that you may find useful.
Notes
1    DFHCMD macro is developed to generate the DFHCMD table.
2    DFHCMD table is generated with the use of the DFHAUPLE procedure which is
supplied by CICS.  On TYPE=INITIAL you can specify up to four CICS regions to be
excluded from authorisation checking.  On TYPE=ENTRY you can specify the job
that is authorised to issue commands to the stated CICS.
3    It is suggested that CICSCMND, CHKAUTH, and DFHCMD are all link-edited into
a single load library.
4    CICSCMND must run from an APF-authorised library and must be link-edited
with AC=1.
5    Console 00 must be defined and active in all the CICS regions.
6    In the CICSCMND program, the SETUP and BACK macros take care of standard
linkage convention.  All the other macros are supplied by IBM.
DFHCMD MACRO
         MACRO                     MACRO HEADER
         DFHCMD &TYPE=,            MACRO TYPE                          *
               &EXCICS1=,          CICS TO BE EXCLUDED                 *
               &EXCICS2=,          CICS TO BE EXCLUDED                 *
               &EXCICS3=,          CICS TO BE EXCLUDED                 *
               &EXCICS4=,          CICS TO BE EXCLUDED                 *
               &JOB=,              AUTHORIZED JOB NAME                 *
               &CICS=              AUTHORIZED CICS
.**********************************************************************
.* MODULE NAME = DFHCMD                                               *
.* STATUS = 1.7.0                                                     *
.* FUNCTION =                                                         *
.*  GENERATES THE AUTHORISATION TABLE FOR CICS BATCH COMMAND          *
.*  GENERATOR.                                                        *
.*********************************************************************.
         GBLA  &I                  NUMBER OF INITIAL ENTRIES
         GBLA  &E                  NUMBER OF REGULAR ENTRIES
         LCLA  &LEN1
         LCLA  &LEN2
.**********************************************************************
         AIF   ('&TYPE' EQ 'INITIAL').INIT   - IS TYPE INITIAL
         AIF   ('&TYPE' EQ 'ENTRY').ENTRY    - IS TYPE ENTRY
         AIF   ('&TYPE' EQ 'FINAL').FINAL    - IS TYPE FINAL
         MNOTE 8,'VALID TYPES ARE INITIAL, ENTRY OR FINAL'
         AGO   .EXIT
.**********************************************************************
.INIT    ANOP
         AIF   (&I GT 0).INITER1    DUPLICATE INIT TYPE
         PUNCH './      ADD  NAME=LNKCTL'
         PUNCH '         INCLUDE SYSPUNCH(DFHCMD)'
         PUNCH '        NAME DFHCMD(R)'
         DFHSMPT CMD
         PUNCH './       ADD NAME=DFHCMD'
&I       SETA  &I+1
DFHCMD   CSECT
         DC    A(TIMES)
         DC    CL8'&SYSDATE'
         DC    CL5'&SYSTIME'
         AIF   (K'&EXCICS1 GT 0).CHK1C
         DC    CL9' '
         AGO   .CHK2
 .CHK1C   ANOP
         AIF   (K'&EXCICS1 LE 5).INERR1
         AIF   (K'&EXCICS1 GT 8).INERR1
&LEN1    SETA  K'&EXCICS1
&LEN2    SETA  9
&LEN2    SETA  &LEN2-K'&EXCICS1
         DC    CL&LEN1'&EXCICS1'
         DC    CL&LEN2' '
.CHK2    ANOP
         AIF   (K'&EXCICS1 GT 0).CHK2C
         DC    CL9' '
         AGO   .CHK3
.CHK2C   ANOP
         AIF   (K'&EXCICS2 LE 5).INERR1
         AIF   (K'&EXCICS2 GT 8).INERR1
&LEN1    SETA  K'&EXCICS2
&LEN2    SETA  9
&LEN2    SETA  &LEN2-K'EXCICS2
         DC    CL&LEN1'&EXCICS2'
         DC    CL&LEN2' '
.CHK3    ANOP
         AIF   (K'&EXCICS3 GT 0).CHK3C
         DC    CL9' '
         AGO   .CHK4
.CHK3C   ANOP
         AIF   (K'&EXCICS3 LE 5).INERR1
         AIF   (K'&EXCICS3 GT 8).INERR1
&LEN1    SETA  K'&EXCICS3
&LEN2    SETA  9
&LEN2    SETA  &LEN2-K'&EXCICS3
         DC    CL&LEN1'&EXCICS3'
         DC    CL&LEN2' '
.CHK4    ANOP
         AIF   (K'&EXCICS3 GT 0).CHK4C
         DC    CL9' '
         AGO   .EXIT
.CHK4C   ANOP
         AIF   (K'&EXCICS4 LE 5).INERR1
         AIF   (K'&EXCICS4 GT 8).INERR1
&LEN1    SETA  K'&EXCICS4
&LEN2    SETA  9
&LEN2    SETA  &LEN2-K'&EXCICS4
         DC    CL&LEN1'&EXCICS4'
         DC    CL&LEN2' '
&E       SETA  0
         AGO   .EXIT
.INITER1 ANOP
         MNOTE 8,'ONLY 1 TYPE=INITIAL IS ALLOWED'
         AGO   .EXIT
.INERR1  ANOP
         MNOTE 8,'EXCICS PARMS IF SPECIFIED MUST BE 6 TO 8 CHARS LONG'
         AGO   .EXIT
.ENTRY   ANOP
&E       SETA  &E+1
         AIF   (&I EQ 0).ENERR8
         AIF   (K'&JOB LT 5).ENERR1
         AIF   (K'&JOB GT 8).ENERR1
&LEN1    SETA  K'&JOB
&LEN2    SETA  9
&LEN2    SETA  &LEN2-K'&JOB
         DC    CL&LEN1'&JOB'
         DC    CL&LEN2' '
         AIF   (K'&CICS LT 5).ENERR2
         AIF   (K'&CICS GT 8).ENERR2
&LEN1    SETA  K'&CICS
&LEN2    SETA  9
 &LEN2    SETA  &LEN2-K'&CICS
         DC    CL&LEN1'&CICS'
         DC    CL&LEN2' '
         AGO   .EXIT
.ENERR1  MNOTE 8,'JOB MUST BE BETWEEN 5 TO 8 CHARACTERS LONG.'
         AGO   .EXIT
.ENERR2  MNOTE 8,'CICS MUST BE BETWEEN 5 TO 8 CHARACTERS LONG.'
         AGO   .EXIT
.ENERR8  MNOTE 8,'NO TYPE INITIAL HAS BEEN SPECIFIED'
         AGO   .EXIT
.FINAL   ANOP
         AIF   (&I LT 1).FINERR1
         AIF   (&E LT 1).FINERR2
TIMES    EQU   &E
         AGO   .EXIT
.FINERR1 MNOTE 8,'TYPE=INITIAL MACRO NOT SPECIFIED'
         AGO   .EXIT
.FINERR2 MNOTE 8,'AT LEAST ONE TYPE=ENTRY MUST BE SPECIFIED'
         AGO   .EXIT
.EXIT    ANOP
         MEND
CICSCMND SOURCE CODE
CICSCMND CSECT
         SETUP BREG=10              site-dependent initialisation macro
         B     PASTDATE
         DC    C'ASSEMBLE DATE = '
         DC    C'&SYSDATE'
PASTDATE DS    0H                        START OF PROGRAM
* THE FOLLOWING LOADS THE KEYWORD PARAMETERS PASSED TO THE PROGRAM.
* AND STORES THEM IN THEIR PROPER AREAS.
         LA    R6,5                 - SET LOOP VALUE FOR KEYWORD SCAN
         LA    R7,KEYTAB            - ADDRESS OF KEYWORD TABLE
CHKPARM  L     R4,0(R1)             - LOAD ADDRESS OF PARAMETERS
         LR    R3,R4
         AH    R3,0(R4)             - SET UPPER BOUNDARY FOR BXLE
         LA    R2,1                 - SET INCREMENT VALUE FOR BXLE
         LH    R9,0(R7)             - LENGTH OF THE KEYWORD HEADER
         BCTR  R9,R0                - DECREMENT LENGTH FOR COMPARE
COMPARE  EX    R9,COMPKEY           - LOOK FOR THE KEYWORD IN PARAMETER
         BE    MOVE                 - THE KEYWORD FOUND, GOTO MOVE PARM
         BXLE  R4,R2,COMPARE        - SET TO NEXT BYTE, GOTO COMPARE
         B     CONT1                - NO SUCH KEYWORD FOUND ERROR
MOVE     LA    R9,1(R9)             - ADJUST TO ACTUAL LENGTH
         AR    R4,R9                - PASS THE KEYWORD HEADER
         LH    R9,2(R7)             - LENGTH OF THE EXPECTED PARM
         L     R5,4(R7)             - ADDRESS OF THE RECEIVING FIELD
         BCTR  R9,R0                - DECREMENT LENGTH FOR MOVE
         EX    R9,MOVEKEY           - MOVE THE KEYWORD PARM
         LA    R7,16(R7)            - BUMP UP TO NEXT KEYWORD IN TABLE
         BCT   R6,CHKPARM           - LOOP TO CHECK THE NEXT PARM
         B     CONT1
COMPKEY  CLC   8(0,R7),0(R4)
MOVEKEY  MVC   0(0,R5),0(R4)
* THIS SECTION ISSUES THE EXTRACT MACRO TO EXTRACT THE JOB NAME.
CONT1    EXTRACT TIOTADDR,'S',FIELDS=(TIOT)
         L     R4,TIOTADDR          - ADDRESS TIOT
         MVC   JOBNAME,0(R4)        - SAVE JOB NAME
         OPEN  (PRINT,(OUTPUT))     - OPEN SYSOUT DCB
* THIS SECTION MAKES SURE THAT THE REMAINING SPACE AFTER THE
* COMMANDS IS PADDED WITH BLANKS.
         LA    R3,XCMND1
         LA    R2,4                 - LOOP COUNTER
LOOP1    LA    R5,30                - SET LOOP COUNTER
         LR    R4,R3                - ADDRESS OF FIRST COMMAND AREA
LOOP2    CLI   0(R4),C','           - IS THIS THE END OF THE COMMAND
         BE    CLEAR                - GO TO CLEAR THE REST OF THE AREA
          CLI   0(R4),X'00'          - IS THIS THE LAST COMMAND
         BNE   BUMP1                - NO GO TO LOOK AT NEXT CHAR
CLEAR    BCTR  R5,R0                - DECREMENT R5
         EX    R5,MOVESP            - MOVE SPACE TO THE REST OF AREA
         B     DONE1
BUMP1    LA    R4,1(R4)             - BUMP UP FOR NEXT CHAR.
         BCT   R5,LOOP2             - LOOP
DONE1    LA    R3,30(R3)            - BUMP UP TO NEXT COMMAND
         BCT   R2,LOOP1             - LOOP
         B     CONT2
MOVESP   MVC   0(0,R4),SPACE
CONT2    MODESET KEY=ZERO,MOVE=SUP  - SET TO SUPERVISORY STATE
* THE FOLLOWING LINES OF CODE CONSTRUCT THE FIRST PART OF THE
* MODIFY COMMAND IN THE MGCR CONTROL BLOCK.  AS YOU ARE AWARE
* THE FORMAT OF THE MVS MODIFY COMMAND IS (F YOURCICS,'CICS COMMAND'
* THE FOLLOWING MAKES ONLY THE FIRST PART WHICH IS (F YOURCICS,')
* SINCE THIS PART IS FIXED FOR ALL THE COMMANDS BEING REQUESTED.
* ALSO IT PERFORMS AUTHORISATION CHECKING TO SEE WHETHER THE
* USER IS AUTHORISED TO ISSUED THE COMMAND TO THE SPECIFIED CICS.
         MVC   TXTCICS(L'XCICS),XCICS
         LA    R9,CICSNAME           - CICS NAME FOR AUTH CHECK
         LA    R6,TXTCICS            - WHERE THE COMMAND IS PLACED
         LA    R3,XCICS              - CICS NAME TO WHICH CMND IS FOR
         LA    R2,8
LOADIT   CLI   0(R3),X'00'           - IS THE CHARACTER LOWVALUES
         BE    LOADIDX               - YES END LOAD
         CLI   0(R3),C' '            - IS THE CHARACTER BLANK
         BE    LOADIDX               - YES END LOAD
         CLI   0(R3),C','            - IS THE CHARACTER COMMA
         BE    LOADIDX               - YES END LOAD
         MVC   0(1,R6),0(R3)         - MOVE 1 CHARACTER
         MVC   0(1,R9),0(R3)         - MOVE 1 CHARACTER
         LA    R6,1(R6)              - BUMP UP IN COMMAND BUFFER
         LA    R9,1(R9)              - BUMP UP IN CICSNAME
         LA    R3,1(R3)              - BUMP UP IN COMMAND
         BCT   R2,LOADIT             - LOOP
LOADIDX  MVC   0(2,R6),=X'6B7D'      - PUT COMMA AND QUOTE
         LA    R6,2(R6)              - POSITION IN THE BUFFER
         BAL   R4,AUTHCHK            - PERFORM TO CHECK AUTHORISATION
         CLI   RESP,C'N'             - IS IT AUTHORISED
         BE    BADRET                - GET OUT WITH COND=8
* THE FOLLOWING STICKS THE ACTUAL CICS COMMAND (ONE BY ONE) AT THE
* BOTTOM OF THE MVS MODIFY COMMAND WHICH WAS CONSTRUCTED IN THE MGCR
* CONTROL BLOCK IN THE PREVIOUS SECTION, AND GENERATES THE COMMAND
* BY ISSUING THE MGCR MACRO.
         XR    R4,R4
         LA    R3,XCMND1             - ADDRESS OF FIRST COMMAND
         LA    R2,4                  - LOOP COUNTER
GEN      CLI   0(R3),C' '            - IS THERE A COMMAND
         BE    GENEXIT               - NO CHECK FOR NEXT AREA
         MVC   0(30,R6),0(R3)        - MOVE THE CMND TO MACRO BUFFER
         SR    R0,R0                 - MGCR REQUIRES THIS THING
         MGCR  CMNDCB                - ISSUE THE COMMAND
         MVC   WORKMSG(30),TXT       - PUT MESSAGE IN PRINT AREA
         PUT   PRINT,WORKAREA        - PRINT THE MESSAGE
         LA    R4,1(R4)              - ADD 1 TO COUNTER
         LA    R3,30(R3)             - NEXT COMMAND
         BCT   R2,GEN                - LOOP
GENEXIT  MVC   0(30,R6),ENDCMND      - MOVE THE CMND TO MACRO BUFFER
         SR    R0,R0                 - MGCR REQUIRES THIS
         MGCR  CMNDCB                - ISSUE THE COMMAND
         MODESET KEY=NZERO,MODE=PROB - SET TO PROBLEM STATE
         CLOSE (PRINT,)            - CLOSE SYSOUT DCB
         XR    R15,R15             - CLEAR RETURN CODE
         CH    R4,=H'0'            - HAVE THERE BEEN ANY ERRORS
         BH    EXIT                - GET OUT CLEAN
 BADRET   LA    R15,8               - SET THE CONDITION CODE FOR RETURN
EXIT     BACK                       site-dependent termination macro
* THIS SECTION JUST CALLS THE CHKAUTH PASSING IT JOBNAME AND THE
* CICS NAME TO WHICH THE COMMAND IS BEING ISSUED.  THE CHKAUTH
* PROGRAM RETURNS (Y) OR (N) WHETHER THE USER IS AUTHORISED
* OR NOT.
AUTHCHK  L     R5,=V(CHKAUTH)
         LA    R1,AUTHPARM
         LR    R15,R5
         BALR  R14,R15
         BR    R4
CMNDCB   DS    0H                  - CONTROL BLOCK FOR MGCR MACRO
FLG1     DC    X'80'               - SAY FLAG 2 IS MEANINGFUL
LGTH     DC    AL1(TOKEN-CMNDCB)   - LENGTH OF CONTROL BLOCK
FLG2     DC    X'0000'             - SAY NO TOKEN
TXT      DC    C'F CICSTEST,'''    - THIS IS IT THE BUFFER
         DC    CL30' '
         DC    C' '
TOKEN    EQU   *                   - NO SPECIFIC TOKEN
TXTCICS  EQU   TXT+2
TXTBUFF  EQU   TXT+12
AUTHPARM DS    0F
         DC    A(JOBNAME)
         DC    A(CICSNAME)
         DC    A(RESP)
         DC    X'80',AL3(ADDR)
JOBNAME  DC    CL8' '
CICSNAME DC    CL8' '
RESP     DC    CL1' '
ADDR     DS    F
TIOTADDR DS    F
WORKAREA DS    0CL80' '
         DC    CL20'** COMMAND ISSUED = '
WORKMSG  DC    CL30' '
SPACE    DC    CL30' '
ALIGN    DS    0F
KEYTAB   DC    H'5'
         DC    H'8'
         DC    A(XCICS)
         DC    CL8'CICS= '
         DC    H'6'
         DC    H'30'
         DC    A(XCMND1)
         DC    CL8'CMND1='
         DC    H'6'
         DC    H'30'
         DC    A(XCMND2)
         DC    CL8'CMND2='
         DC    H'6'
         DC    H'30'
         DC    A(XCMND3)
         DC    CL8'CMND3='
         DC    H'6'
         DC    H'30'
         DC    A(XCMND4)
         DC    CL8'CMND4='
XCICS    DC    CL8'CICSTEST'
XCMND1   DC    CL30' '
XCMND2   DC    CL30' '
XCMND3   DC    CL30' '
XCMND4   DC    CL30' '
ENDCMND  DC    CL30'WHOI                          '
PRINT    DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,LRECL=133,BLKSIZE=133,  X
               RECFM=FBA
ONE      DC    PL2'1'
SWITCH   DC    X'00'
 RETCODE  DC    X'00'
         LTORG
         END
DFHCMD TABLE
//DFHCMD JOB XXXXXXX,XXXXXXXXXX,CLASS=X,MSGCLASS=X,REGION=XXXXX
//*            NOTIFY=$KXG1
//*
//*
//S1        EXEC DFHAUPLE,INDEX2=YOUR,NAME=LIBRARY
//ASSEM.SYSUT1 DD *
          DFHCMD TYPE=INITIAL,                                         X
                EXCICS1=CICSTEST,                                      X
                EXCICS2=CICSTES2
          DFHCMD TYPE=ENTRY,                                           X
                JOB=MYJOB,                                             X
                CICS=CICSPROD
          DFHCMD TYPE=ENTRY,                                           X
                JOB=YOURJOB,                                           X
                CICS=CICSP1
          DFHCMD TYPE=FINAL
          END
CHKAUTH SOURCE CODE
CHKAUTH  CSECT
         STM   R14,R12,12(R13)      - STORE CALLERS REGISTER
         LR    R2,R15               - R2 NOW HAS THE EP
         USING CHKAUTH,R2           - SET R2 AS BASE
         LA    R15,SAVE             -
         ST    R13,4(R15)           - SET FORWARD PNTR
         ST    R15,8(R13)           - SET BACKWARD PNTR
         LR    R13,R15              - R13 NOW HAS THE ADDR OF SAVEAREA
         B     BEGIN                - BEGIN THE PROGRAM
SAVE     DS    18F                  - THE SAVE AREA
BEGIN    LR    R12,R1               - SAVE THE PARM REGISTER
         LOAD  EP=DFHCMD            - LOAD THE TABLE
         LR    R4,R0                - R4 HAS THE ADDR OF THE TABLE
         L     R5,12(R12)           - ADDRESS OF THE 4TH PARM
         ST    R4,0(R5)             - STORE THE ADDRESS OF THE TABLE
         L     R3,8(R12)            - ADDRESS OF RESPONSE CODE
         L     R5,4(R12)            - ADDRESS OF THE 2ND PARM
         LA    R6,4                 - LOOP COUNTER
         LA    R7,17(R4)            - PASS THE TABLE PREFIX
LOOP1    CLC   0(8,R5),0(R7)        - IS THERE A MATCH
         BE    AUTH                 - GO TO SET AUTH TO YES
         LA    R7,9(R7)             - BUMP UP TO THE NEXT
         BCT   R6,LOOP1             - NO, LOOP
         L     R6,0(R12)            - ADDRESS OF THE FIRST PARM (JOB)
         LA    R10,7                - SET LENGTH TO COMPARE 8 CHARS
         CLI   0(R6),C'$'           - IS THE FIRST CHAR ($)
         BNE   CONT1                - NO, THE LENGTH IS GOOD - CONTINUE
         LA    R10,4                - SET THE LENGTH TO COMPARE 5 CHARS
CONT1    LA    R7,53(R4)            - PASS THE FIRST PART OF TABLE
         L     R8,0(R4)             - LOOP COUNTER TO THE # OF ENTRIES
LOOP2    EX    R10,COMPARE          - EXECUTE TO COMPARE THE JOB NAME
         BNE   CONT2                - GO FOR THE NEXT TABLE ELEMENT
         CLC   0(8,R5),0(R7)        - DOES CICS NAME MATCH
         BE    AUTH                 - SET AUTH TO YES
         B     CONT2                - CONTINUE
COMPARE  CLC   0(0,R6),0(R7)        - THIS COMPARE IS EXECUTED
CONT2    LA    R7,18(R7)            - BUMP UP TO THE NEXT ELEMENT
         BCT   R8,LOOP2             - LOOP
         MVI   0(R3),C'N'           - SET RESPONSE TO NO
         B     RETURN
AUTH     MVI   0(R3),C'Y'
RETURN   L     R13,SAVE+4           R13 -> ISPF REGISTER SAVE AREA
         LM    R14,R12,12(R13)      RESTORE ISPF'S REGISTERS
         BR    R14                  RETURN TO ISPF
          END   CHKAUTH
HOW CICSCMND IS INVOKED
//XXXXXXXX JOB XXXXXXXXXXXXXXXXXXX,CLASS=X,MSGCLASS=X
 //CICSCMN1 EXEC PGM=CICSCMND,PARM=(CICS=CICSP3',
 //             'CMND1=CEMT I TRAN(AR*)',
 //             'CMND2=CEMT I TASK',
 //             'CMND3=DJ03')
 //STEPLIB  DD  DSN=AN.APF.AUTHORISED.LIB,DISP=SHR
 //SYSOUT   DD  SYSOUT=*
 //


Khosrow Golshan
Senior Systems Programmer
McCormick and Co (USA)   ) McCormick and Co 1989



















































