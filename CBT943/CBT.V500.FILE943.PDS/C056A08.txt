More on CICS LINKs

An article in the January 1990 issue entitled CICS LINK versus
standard CALL to subroutine made a good point on how to
save CICS DSA.  However, there is a trade off to be had here.
The EXEC CICS LINK command uses a (relatively) large
number of processor cycles when compared with the humble
subroutine branch.  That's not to say that we shouldn't use
EXEC CICS LINK but we need to be aware how this facility is
going to effect us.

Some years ago I was involved in tuning CICS application
programs and discovered that about 25 percent of the CPU
usage in our CICS region occurred because of CICS LINKs to
a common subroutine.  The routine in question was used by all
programs to perform I/O access to VSAM files.  Consequently,
every program LINKed to this routine on numerous occasions
in the course of its execution.

In order to decrease our CPU consumption we considered link-
editting the subroutine into every program but this would have
increased our storage usage and seriously effected our ability to
alter the code of the I/O routine easily.  We therefore decided
to implement a small subroutine stub to interface between the
application programs and the I/O subroutine.  An outline of the
subroutine communication is illustrated in Figure 1.

The application program CALLs the I/O stub to provide the
appropriate linkage to the I/O routine.  The stub has an area in
storage that may or may not contain the address of the I/O
routine.  If there is no address the stub will perform an EXEC
CICS LINK to the I/O routine.  It passes, as a parameter, the
address of the field that should contain the I/O routine's
address.  If the address has been set up, the stub will branch
directly to the I/O routine.  The I/O routine will save its entry
address in the field passed, if necessary, then perform normal
processing.

By using this process, every program will only perform, at
most, one CICS LINK to the I/O routine.  For very active or
resident programs there is typically only one LINK per
program load.

In summary, take care before changing all of your program
CALLs to EXEC CICS LINKs.  Very heavily used routines
may best be served by the above approach.  Large common
low activity routines (such as common error handlers) may be
LINKed to quite happily.


                                                        ) Reserved 1990


