 Invoking a CSP application through CICS
IBMUs strategic 4GL, CSP, has just been introduced in our installation.  When we
were evaluating CSP, everybody was concerned about how this 4GL would interact
or co-exist with an existing COBOL program.  I have done a fair amount of
research on this subject and here I will present the main points involved and
also will try to explain the concept with the use of sample COBOL programs and
CSP applications.  One of the beauties of CSP is its portability to any
environment, namely CICS, CMS, DPPX, or PC.  However, here we will consider the
interaction of CSP applications with CICS COBOL programs.  If you are running
under CICS, you can transfer control to a CSP application from the CICS
transaction.  There are three different ways to do this.
EXEC CICS LINK
%    Only command-level programs can issue this command.
%    The program links to DCBINIT and control is passed back to the CICS program
when the CSP application is finished.
%    The COMMAREA is passed a list of addresses of each parameter, each 4 bytes
binary.  The first parameter passed in this way contains the Application Load
File (ALF) and application names, each 8 bytes.
%    It is possible to pass up to 15 parameters.
%    The CSP application must be defined as CALLED.
Points to note
After the CSP application is finished, control returns to the CICS program.
%    The LINKed CSP application may reside in any ALF.
%    It is not necessary to create a transaction with a CSP application.
%    The parameters passed may include any data, such as maps, records, working
storage, and 77-level items.
%    The parameters passed must be defined in the CSP called parameter list,
while defining the CSP application.
%    CICS LINK can be compared with the CALL function of CSP.
%    The COBOL program is coded in a slightly more complicated way than LINK is
to another COBOL program.  The linkage section is organised such that the first
01 level variable, ie BLL-CELLS contains a list of addresses under it.  The
first 02 level is reserved and is used by the system.  The second 02 level ie
PARM1-PTR points to the first 01 level that follows, ie PARM1.  The third 02
level ie PARM2-PTR points to the second 01 level that follows, ie PARM2 and so
on.
%    In the Procedure Division, address pointers from BLL-CELLS are moved to the
variables in the COMWORK, before LINK is issued naming the COMMAREA as COMWORK.
Please note that unlike a COBOL-to-COBOL LINK, only the address pointers to the
fields are passed, not the actual contents of the fields.  This is reflected in
the LENGTH parameter.
EXEC CICS START
%    Command-level or macro-level programs may use this command.
%    The desired CSP application is started asynchronously.  That is, if the
named terminal is available the CSP application would start immediately.
%    Each CSP application thus started must be catalogued as a copy of DCBINIT
in the appropriate load or core image library.
%    For each CSP application thus started, an entry must be made in the PPT.
Also for the COBOL program and its maps, entries must be made in PPT.
%    It is possible to pass working storage.
%    The CSP application must reside in the default ALF, ie FZERSAM.
%    The TERMID parameter for the desired terminal must be specified.
%    The CSP application is defined as MAIN.
Points to note
%    When START is issued a new task is started.  The terminal specified in the
TERMID parameter may be the same terminal or another terminal.
%    If another terminal is named in the TERMID, then the two tasks run
asynchronously.
%    Only working storage can be passed to CSP (no maps, 77 levels, or records).
%    If any PTF is applied to DCBINIT or migration is done to a higher version
of CSP, all such CSP applications which have been catalogued as a copy of the
DCBINIT must be re-catalogued.
The code below should enable you to get a clearer idea.
EXEC CICS XCTL
%    This command may be used by command-level programs only.
%    This command transfers control to DCBINIT.
 %    The COMMAREA passed has ALF and APPLICATION names followed by optional
working storage.
%    The CSP application must be defined as MAIN.
Points to note
%    XCTL works as in COBOL-to-COBOL transfers.  The control is transferred to
the CSP application.  When the CSP application is finished, control does not
return to the CICS program.
%    The CSP application can reside in any ALF.
%    It is not necessary to create a transaction with the CSP application.  This
is required only with started transactions.
%    In CSP applications, passed data is received in working storage so it must
be defined accordingly.
%    XCTL may compare with DXFR between CSP-to-CSP applications.
%    The CICS program is relatively easy to code.
%    Again the code shown below should give you a better idea.  You will notice
that as against the LINK case, there is no need to define LINKAGE SECTION or BLL
CELLS in COBOL programs because the whole of the working storage will be passed.
Note for MVS/XA users
Use COBOL II if you want to exploit CSP Version 3 with XA.
A COBOL PROGRAM USING LINK TO CSP APPLICATION
        IDENTIFICATION DIVISION.
        PROGRAM-ID.  MAINLINK.
        ENVIRONMENT DIVISION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  COMWORK.
            02  PTR0            PIC S9(8) COMP.
            02  PTR1            PIC S9(8) COMP.
            ....
        LINKAGE SECTION.
        01  BLL-CELLS.
            02  FILLER          PIC S9(8) COMP.
            02  PARM1-PTR       PIC S9(8) COMP.
            02  PARM2-PTR       PIC S9(8) COMP.
        01 PARM1.
            02  CSP-ALF-NAME    PIC X(8).
            02  CSP-APP-NAME    PIC X(8).
        01 PARM2.
            02  OPERATOR-ID     PIC X(3).
        PROCEDURE DIVISION.
           ....
           EXEC CICS GETMAIN SET(PARM1-PTR) LENGTH(4) END-EXEC.

           EXEC CICS GETMAIN SET(PARM2-PTR) LENGTH(4) END-EXEC.
           ....
           MOVE PARM1-PTR TO PTR0.
           MOVE PARM2-PTR TO PTR1.
           ....
           EXEC CICS ASSIGN OPID(OPERATOR-ID) ENDÝEXEC.
           ....
           MOVE 'FZERSAM.' TO CSP-ALF-NAME.
           MOVE 'IN01A   ' TO CSP-APP-NAME.
           EXEC CICS LINK PROGRAM('DCBINIT') COMMAREA(COMWORK)
               LENGTH(8) END-EXEC.
           ....
Note that:
%    COMWORK is the COMMAREA and has to be defined as TPTR0, PTR1 ... PTR15U.
%    PTR0 ... PTR15 are pointers each 4 bytes in length.
%    PTR0 is the only mandatory pointer and has to point to an address that
contains the CSP alfname.applname.
%    PTR1 ... PTR15 are pointers to data areas that the CSP application is
expecting.
CSP APPLICATION RECEIVING CONTROL USING LINK
                  APPLICATION NAME:        IN01A
 -------------->  TYPE OF APPLICATION:     CALLED TRANSACTION
                  WORKING STORAGE:         IN01W
    PROLOGUE  THIS APPLICATION IS CALLED BY A CICS COMMAND LEVEL PROGRAM
             'MAINLINK'.  'MAINLINK' IS INVOKED BY TRANSACTION ID 'PGM2'
            THE CICS OPERATOR ID IS PASSED AS A PARAMETER TO THIS APPLI-
             CATION FROM 'MAINLINK'.

 ------->    CALLED APPLICATION PARAMETER LIST
                IOPIDW    ITEM

  SEL NAME       TYPE LENGTH DEC  BYTES  DESCRIPTION
  ***                      TOP OF LIST
  001 IOPIDW     CHA   00003      00003  CICS operator id
COBOL PROGRAM USING START TO CSP APPLICATION
        IDENTIFICATION DIVISION.
        PROGRAM-ID.  MAINSTRT.
        ENVIRONMENT DIVISION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  COMWORK.
            02 OPERATOR-ID      PIC X(3).
        PROCEDURE DIVISION.
            ....
            EXEC CICS ASSIGN OPID(OPERATOR-ID) END-EXEC.
            ....
            EXEC CICS START TRANSID('IM01' FROM(COMWORK)
                LENGTH(3) TERMID('D082') END-EXEC.
            ....
Additional steps for start to CSP application
Example of jobstream to create a copy of DCBINIT
  // JOB COMIM01
  // LIBDEF *,SEARCH=(library,sublibrary)
  // LIBDEF PHASE,CATALOG=library.sublibrary
  // OPTION ERRS,SXREF,SYM,CATAL,NODECK
     PHASE IM01A,*      <-------has to be the same name
     INCLUDE DFHEAI             as the CSP application
     INCLUDE DCBIPL
     INCLUDE DCBMSGS
     INCLUDE DFHEAI0
     ENTRY   DFHEAI
  // EXEC LNKEDT
  /&
Add entries in PCT and PPT for:
%    COBOL program
%    BMS map (if any)
%    CSP application.
Example of CSP application started by CICS
                 APPLICATION NAME:        IM01A
 --------->      TYPE OF APPLICATION:     MAIN TRANSACTION
                 WORKING STORAGE:         IM01W
  PROLOGUE  THIS APPLICATION IS STARTED BY A CICS COMMAND LEVEL PROG
            'MAINSTRT' USING THE EXEC CICS START COMMAND.  THE CICS
            TERMINAL OPERATOR ID IS PASSED AS A PARAMETER TO THIS APPLI-
            CATION FROM 'MAINSTRT' AS WORKING STORAGE.
            THIS SAME APPLICATION CAN ALSO BE STARTED BY THE CICS
            COMMAND LEVEL PROGRAM, "MAINXCTL" USING THE EXEC CICS XCTL
            COMMAND.

  RECORD DEFINITIONS
                 RECORD NAME:            IM01W
  ------------>  ORGANIZATION:           WORKING STORAGE
                 LENGTH IN BYTES:        3
 NAME    LVL OCCURS TYPE LENGTH DEC BYTES  START    MSL    DESCRIPTION
 IOPIDW   10        CHA      3          3      1  MSLLEIT  CICS OPERAT
Example of COBOL program using XCTL to a CSP application
        IDENTIFICATION DIVISION.
        PROGRAM-ID. MAINXCTL.
        ENVIRONMENT DIVISION.
         DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  COMWORK.
            02  CSP-ALF-NAME    PIC X(8).
            02  CSP-APP-NAME    PIC X(8).
            02  OPERATOR-ID     PIC X(3).
        PROCEDURE DIVISION.
            .....
            EXEC CICS ASSIGN OPID(OPERATOR-ID) END-EXEC.
            .....
            MOVE 'FZERSAM.' TO CSP-ALF-NAME.
            MOVE 'IM01A   ' TO CSP-APP-NAME.
            EXEC CICS XCTL PROGRAM('DCBINIT') COMMAREA(COMWORK)
                LENGTH(19) END-EXEC.
            ....
Example of CSP application using XCTL from CICS
                 APPLICATION NAME:        IM01A
 ---------->     TYPE OF APPLICATION:     MAIN TRANSACTION
                 WORKING STORAGE:         IM01W
  PROLOGUE  THIS APPLICATION IS STARTED BY A CICS COMMAND LEVEL PROGRAM
            'MAINSTRT' USING THE EXEC CICS START COMMAND.  THE CICS
            TERMINAL OPERATOR ID IS PASSED AS A PARAMETER TO THIS APPLI-
            CATION FROM 'MAINSTRT' AS WORKING STORAGE.
            THIS SAME APPLICATION CAN ALSO BE STARTED BY THE CICS
            COMMAND LEVEL PROGRAM, "MAINXCTL" USING THE EXEC CICS XCTL
            COMMAND.

  RECORD DEFINITIONS
                 RECORD NAME:             IM01W
  -------->      ORGANIZATION:            WORKING STORAGE
                 LENGTH IN BYTES:         3
 NAME    LVL  OCCURS  TYPE LENGTH DEC  BYTES  START   MSL    DESCRIPT
 IOPIDW   10        CHA      3           3      1  MSLLEIT   CICS OPERAT


Nusrat Waheed
Technical Support Project Leader
Olayan (Saudi Arabia)    ) Xephon 1988




























