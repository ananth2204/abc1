NATURAL applications and THE MONITOR

At our installation, our users can access more than one
NATURAL application within the one database and are able to
switch between these applications within NATURAL. Our
problem was to find a way to monitor the performance of each
NATURAL application.

The solution we adopted involved using the Application Tool
User Exit in THE MONITOR FOR CICS (TMON) to change
the transaction-id just before TMON writes to its detail
transaction records' file. The transaction-id written to the
record depends upon the combination of CICS system-id,
ADABAS database-id, and NATURAL application name.

The transaction-id is recorded in the TATRANS field of
TMV8AREC. The corrected value put into TATRANS is held
in a table within the exit. The keys to the table are the CICS
system-id (held in the field TASYSID of TMV8AREC), the
database-id (held in part of the field FATID of TMV8AREC),
and the NATURAL application-id (held in the field APLLID of
the NATURAL user's buffer in the DSECT BB).

The database-id is kept in the first three characters of FATID,
which is a field in a repeating segment in the record
TMV8AREC. Extracting the database-id was complicated by
the fact that the database-id is not the only file name kept in the
FATID. Our database-ids are always 3 digits, so the exit has a
loop which checks that the FATID really contains a 3-digit
database-id, and that the loop is nested within another loop
which looks at every FATID in the record, until a database-id
is found or until there are no more FATIDs.

Finding the NATURAL application-id is relatively easy, once
you know how. (It took a call to SPL Australia, the local
company supplying ADABAS/NATURAL support, to find the
path to follow through the DSECTs.) When the exit is invoked,
register 12 has the address of the TCA. The TCA field
TCAEISTG contains the address of DSECT DSAPARMS,
after allowing for a 248-byte header field. The DSAPARMS
field DSAAIOCB contains the address of DSECT IOCB. The
IOCB field CMESBB contains the address of DSECT BB. The
BB field, APLLID, contains the application-id, the field we
originally wanted.

         TITLE 'TMONATUE - Application Tools User Exit'
*** PROGRAM   - TMONATUE
*               TMON Application Tools User Exit
*   PURPOSE   - Change the transaction-id in the TMON detail record,
*               after satisfying certain conditions.
*   REFERENCE - TMON/CICS Report Writer and Extended Facilities manual,
*               Chapter 3.
*               SPL support staff.
*   INPUTS  - R1 has address of passed parameter list.
*                1st fullword has address of TMV8AREC
*                2nd fullword has address of exit information area.
*             R12 has address of TCA
*             R13 has address of CICS CSA
*             R14 has return address
*             R15 has entry point of this exit.
*   OUTPUTS - TATRANS (in TMV8AREC) will be unchanged, unless certain
*                combinations of CICS system (TASYSID), DB-id (FATID),
*                and application-id (APLLID) are satisfied, in which
*                case TATRANS will be overwritten by a table entry.
*   PROCESS - Enter this exit;
*             Establish addressing, including chaining through the
*                Natural control blocks to reach the BB;
*             Search for a FATID where the 1st 3 characters are all
*                numeric;
*             Look up a table to find if TATRANS is to be changed, what
*                its new value is, and change it;
*             Exit this exit.
*        BASE REGISTERS.
CSECTBAR EQU   9
BBBAR    EQU   8
*        CICS and NATURAL DSECTS.
         DFHTCA CICSYST=YES
         NCIDSA DSECT=YES
         CMIOCB
         CMDBB PRINT=ON
*        EXIT INTERFACE DSECT.
EXITUIA  DSECT
         USING EXITUIA,R11
EIARCODE DS    X                         TYPE EXIT INDICATOR
EIAREJ   EQU   X'FF'                     DO NOT PUT RECORD TO FILE
EIAEXIT  DS    X                         EXIT TYPE
EIAAEXIT EQU   C'A'                      Application Tools User Exit
EIACEXIT EQU   C'C'                      CREATE EXIT POINT
EIAXEXIT EQU   C'X'                      XTP EXIT POINT (MRO/ISC)
EIADEXIT EQU   C'D'                      DETACH EXIT POINT
EIAWEXIT EQU   C'W'                      DETAIL REC WRITE EXIT POINT
*        TMON COLLECTION RECORD DSECT.
         USING TACONVBA,R10
         TMV8AREC
         ORG   *-2                       Fiddle to correct addressing.
*                                          Real layout differs a bit.
         TMONMFAT DSECT=NO               File record segment.
*        NB: 29 copies of TMONFAT, 10 copies of TMONMRO, and TMONMUSR
*        DSECTS follow and comprise the rest of the TMON Detail
*        Transaction record.
*        TMONMFAT DSECT=NO               File record segment.
*        ORG   *+(29*FATTALNG)            (Allow for 30 segments)
*        TMONMMRO DSECT=NO               MRO record segment.
*        ORG   *+(9*TAMRSIZE)             (Allow for 10 segments)
*        TMONMUSR DSECT=NO               User record segment.
TMONATUE CSECT
         AMODE 31
         RMODE ANY
         STM   R14,R12,12(R13)      Save registers on entry,
         LR    CSECTBAR,R15         establish addressing,
         USING TMONATUE,CSECTBAR
         ST    R13,SAVEAREA+4
         LR    R2,R13
         LA    R13,SAVEAREA         and address this program's SAVEAREA
         ST    R13,8(R2)
         B     START
*        PROGRAM IDENTIFICATION.
         DS    0D
         DC    C'TMONATUE &SYSDATE &SYSTIME'
         DS    0D
START    DS    0H
         LM    R10,R11,0(R1)             RECORD AND EXIT AREAS
         CLI   EIAEXIT,EIAAEXIT          Application Tools User EXIT ?
         BE    ATUELBL                   YES: Do ATUE stuff
         B     RETURN                    NO:  leave program
*        Application Tools User Exit
ATUELBL  DS    0H
*        Establish addressing to the BB, which contains APLLID.
         L     BBBAR,TCAEISTG            From TCA, get address of EISTG
         AH    BBBAR,=X'00F8'             (and adjust for 'F8'X length
         USING DSAPARMS,BBBAR              header)
         L     BBBAR,DSAAIOCB            From NATURAL/CICS (EISTG) get
         USING IOCB,BBBAR                 address of IOCB.
         L     BBBAR,CMESBB              From IOCB, get address of BB
         USING BB,BBBAR
*   Find the DB ID in the TMON Detail Record.
*   The DB ID is the 1st 3 characters in FATID (TMON file/DB name).
*   This bit loops through the list of FATIDs (1/TMONFAT sub-DSECT),
*   looking for the 1st one which has the 1st 3 chars all numeric.
*   Written as 2 loops. Inner loop checks for the 3 digits and outer
*   loop goes through all FATIDs.
*   Register allocation is arbitrary, excepting even&odd pairs for
*   BXLEs. (Pairing must be retained.)
*   R1: inner loop counter - pointer within FATID
*   R2: inner loop increment
*   R3: inner loop limit
*   R4: working register
*   R5: outer loop counter - address of a FATID
*   R6: outer loop increment - space between FATIDs
*   R7: outer loop limit - address of last FATID
         LH    R6,TAFATLEN               Get length of file segments
         LH    R7,TAFATCNT               Get max # of file segments
         MH    R7,TAFATLEN               Calc (outer) BXLE limit
         SR    R7,R6                      "      "     "     "
         LA    R7,FATID(R7)               "      "     "     "
         LA    R5,FATID                  Get addr of 1st DB name
         XR    R4,R4                     Clear register for later tests
OUTRLOOP DS    0H
         LA    R2,1                      Load (inner) BXLE increment
         LA    R3,2                      Load (inner) BXLE limit
         XR    R1,R1                     Set to 0.
INRLOOP  DS    0H
         IC    R4,0(R1,R5)               Get a char of DB name
         CH    R4,=X'00F0'               Is it a digit?
         BL    OUTRTEST
         CH    R4,=X'00F9'
         BH    OUTRTEST                  No - look at next DB name
         BXLE  R1,R2,INRLOOP             Yes - examine more
         B     FINDTRAN                  Process DB name
OUTRTEST DS    0H
         BXLE  R5,R6,OUTRLOOP            More FATIDs? YES - look more
         B     RETURN                    NO - change nothing & leave
*   The 4 character System ID (TASYSID), the first 3 characters of the
*   DB ID (FATID) and the 8 character Application ID (APLLID) are used
*   as an index to look up the replacement value for the Transaction ID
*   (TATRANS).
*   If a matching entry is found in the table
*      THEN move table entry into TATRANS
*   ELSE do nothing to TATRANS.
FINDTRAN DS    0H
         LA    R1,TRANLIST          ADDRESS TransactTranslate TABLE
         LA    R2,TRANCNT           NUMBER OF ENTRIES IN TABLE
TRAN     DS    0H
         CLC   TASYSID,0(R1)        System ID matches entry?
         BNE   NEXTTRAN             No - Branch to next table entry.
         CLC   0(3,R5),4(R1)        DB ID matches entry?
         BNE   NEXTTRAN             No - Branch to next table entry.
         CLC   APLLID,7(R1)         Application ID matches entry?
         BNE   NEXTTRAN             No - Branch to next table entry.
         B     GOTTRAN              Yes - Branch to insert new TransID.
NEXTTRAN DS    0H
         LA    R1,TRANELN(R1)       NEXT TransactTranslate ENTRY
         BCT   R2,TRAN              BRANCH BACK FOR MORE
         B     RETURN               Â¬ found -> leave TransID alone
GOTTRAN  DS    0H
         MVC   TATRANS(4),15(R1)    MOVE in the new TransID.
         B     RETURN
*        CLEAR RETURN CODE AND RETURN.
RETURN   DS    0H
         L     R13,SAVEAREA+4            Restore registers,
         LM    R14,R12,12(R13)
         XR    R15,R15                   clear return code,
         BR    R14                       & exit exit.
*        PROGRAM CONSTANTS AND WORKING STORAGE.
SAVEAREA DS    18F                       REGISTER SAVE AREA
ENTRYADR DS    CL10                  ENTRY POINT ADDRESS
ENTRY    DS    A(0)                  ENTRY POINT
*        Table of System-id & DB ID & Application-id -> Transaction-id
TRANLIST DS    0C
*              TASYSID,FATID, APLLID,     TATRANS
         DC    C'DAP1',C'015',C'MNOMAD  ',C'NANO'
         DC    C'DAP1',C'015',C'MFARMS  ',C'NAFA'
         DC    C'DAT1',C'014',C'DBAJOB  ',C'NANO'
         DC    C'DAT1',C'014',C'DBASYS  ',C'NAFA'
TRANELN  EQU   19                   TRANLIST ENTRY LENGTH
TRANCNT  EQU   (*-TRANLIST)/TRANELN number of entries in list
         LTORG
         END


Ken Moylan                   c Department of Administrative Services 1993
CICS Systems Programmer
Department of Administrative Services (Australia)

