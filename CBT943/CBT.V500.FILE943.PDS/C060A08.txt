CA-ACF2 security in CICS for LU6.2


INTRODUCTION

CA-ACF2 is a very comprehensive security package
extensively used in the MVS environment.  It interfaces well
with CICS and is very effective in protecting CICS resources,
eg transactions, programs, files, and so on.  It can provide
security for multiple CICS regions in MRO or ISC.  However,
there appears to be no available CA-ACF2 implementation for
general LU6.2 communication to CICS, particularly from a
non-CICS application, for example PS/2 APPC/PC or any
VTAM APPC application.

Various approaches were investigated and a simple solution
was devised and implemented.  This solution allows CA-ACF2
to provide protection of CICS resources even where multiple
LU6.2 sessions are running.


BACKGROUND

Multiple applications running on a PS/2 require access to the
same CICS region through LU6.2 communication.  In this set-
up, front-end transactions on PS/2s will attach back-end CICS
transactions to get data from DB2 databases.

The dialogue is seen by CICS as a series of discrete
transactions, similar to a CICS pseudo-conversation.  There
can be more than one concurrent application initiated from a
PS/2 with, perhaps, different security levels and
communicating with CICS in parallel LU6.2 sessions.


CICS/CA-ACF2 INTERFACE

CA-ACF2 security is based on the logon-id with its 'uid' string,
group-id, and other security attributes.  When a user logs on, a
mini logon-id is built and saved in a CA-ACF2 Terminal
Management Area (TMA) element which usually has the same
identifier as the current TCTTE-id.  For any security request,
CA-ACF2 searches for the TMA element using the TCTTE-id.
If a corresponding TMA element is not found, then the default
logon-id, which is often defined with minimum security level,
is assigned.  It is the logon-id found in the TMA element that is
then used for authorization.

For multiple CICS regions, the logon-id can be shipped along
with the surrogate TCTTE.  In the case of LU6.2, there are
problems with multiple sessions because transactions
subsequent to the logon transaction may not be attached to the
same TCTTE, and different applications can have different
levels of security.


CA-ACF2 SECURITY FOR LU6.2

In order to solve these problems, it must be ensured that all
CICS LU6.2 back-end transactions belonging to an application
use the TMA element created by its logon for access
authorization, even if they may be attached to different
TCTTEs.

Using the CICS/CA-ACF2 TERMID exit, it is possible during
transaction verification to assign a specific terminal-id, rather
than the default, to locate the TMA element.  The TMA
element-id of the successful logon can be passed to this
TERMID exit in a LU6.2 Process Initialization Parameter (PIP)
sub-field.  The scenarios are:

o      CICS LU6.2 back-end sign-on program builds the TMA
      element and returns the TMA element-id, optionally, with
      other data to form the security token to the front-end sign-
      on program.

o      A subsequent back-end transaction connection request from
      the front-end sends back the security token, where the
      logon TMA element-id is embedded in a LU6.2 PIP sub-
      field.

o      The purpose of the CICS/CA-ACF2 TERMID exit is to set
      the terminal-id to the value found in the PIP sub-field after
      it has verified that the TMA element-id is one of the
      TCTTE sessions owned by the remote system (TCTSE).
      Other data in the security token can be used for further
      authorization, for example to compare with the initial
      logon time stored in, perhaps, the TCTUA.

o      If the TMA element-id verification fails, then the TERMID
      exit equates the terminal-id to a TCTTE session having the
      default logon-id, which, in our implementation, is the first
      TCTTE session of the TCTSE.  Consequently this will
      require the CICS LU6.2 back-end sign-on program not to
      build any logon TMA element on the first TCTTE session.

The above algorithm works well for LU6.2 multiple sessions
and multiple applications with different levels of security.  The
only restriction is that the front-end program always has to send
the security token via the LU6.2 PIP to the CICS back-end
region for security identification; for example the front-end
program can be coded as follows:


     EXEC CICS ALLOCATE SYSID(....)
     EXEC CICS CONNECT PROCESS CONVID(....)
          PROCLENGTH(4) PROCNAME(transaction_name)
          SYNCLEVEL(.)
          PIPLIST(security_token) PIPLENGTH(..)

However, in the situation where there is only one level of
security, eg a PS/2 user has one logon but with permission to
access multiple applications, then the process can be simplified
without the need to use the security token.  This can be
achieved by simply changing the CICS LU6.2 back-end sign-
on program mentioned above so that the logon TMA element is
always built on the first TCTTE session of the TCTSE.  This
technique is referred to as method two in the SCFF transaction.

The CICS/ACF2 TERMID exit, CPGEASXP, and two CICS
LU6.2 back-end sign-on programs, CPGE0 and CPGF0
corresponding to transactions SCFE and SCFF, are provided to
demonstrate the above concepts of ACF2 security in CICS for
LU6.2.

An LU6.2 front-end logon program to invoke the CICS LU6.2
back-end sign-on program(s) can be coded, similar to the PS/2
APPC/PC, as follows:


     EXEC CICS ALLOCATE SYSID(....)
     EXEC CICS CONNECT PROCESS CONVID(....)
          PROCLENGTH(4) PROCNAME('SCFE') SYNCLEVEL(2)
     EXEC CICS SEND CONVID(....) FROM(WMSG) LENGTH(20)
     EXEC CICS RECEIVE CONVID(....) INTO(RMSG) LENGTH(H40)
      .
      .
      .
WMSG      DS     0F
LOGONID   DC     CL8'logonid'
PASSWORD  DC     CL8'password'
RESERVE   DC     CL4' '
      .
      .
      .
RMSG      DC     CL40' '  message from CICS LU6.2 back-end

It should be noted that the CICS LU6.2 back-end sign-on
transactions, ie SCFE and SCFF, must be put in the CA-ACF2
SAFELIST, and the back-end sign-off program can be easily
coded in a similar way.  Information on CICS/CA-ACF2 exits
is in the CA-ACF2 CICS Support Guide manual.


ACF2EXIT

*        NOTE. TERMID EXIT IS PART OF ACFAESXP, REFER TO CA-ACF2
*              CICS SUPPORT GUIDE MANUAL
         DFHTCX
         DFHTCTZE CICSYST=YES
*        PROGRAM INITIALIZATION                                       *
ACFAESXP CSECT
***************************************************************
*        TERMID EXIT                                          *
*        PURPOSE: ABILITY TO MODIFY THE TERMINAL ID WHICH     *
*                 ACF2/CICS WILL USE TO LOCATE TMA ELEMENT.   *
*         CALLED: THIS EXIT CALLED WHENEVER ACF2/CICS         *
*                 MUST EQUATE A TERMINAL USER TO THE          *
*                 ACF2/CICS CONTROL BLOCKS.                   *
*          INPUT: R2 -> TCTTE IF PRESENT OR ZEROS IF NOT.     *
*                 'ECATERM' CONTAINS THE EIGHT BYTE TMA       *
*                 NAME RECOMMENDED BY ACF2/CICS.              *
*        PROCESS: YOU MAY EXAMINE AND/OR MODIFY THE NAME      *
                  PROVIDED IN 'ECATERM'.                      *
*         OUTPUT: ACF2/CICS WILL USE WHAT EVER IS IN          *
*                 'ECATERM' AS THE TERMINAL ID TO BE USED     *
*                 IN THE TMA LOCATE FUNCTION.                 *
*          NOTES: NO CICS MACROS MAY BE ISSUED.               *
*                 CICS CANNOT GO INTO A TASK SWITCH.          *
***************************************************************
TERME    DS   0H
         USING DFHTCTTE,R2          ADDRESS TCTTE
*        PLACE YOUR CODE HERE.
**************************************************************
*    THIS EXIT IS PUT IN TO ACCOMMODATE SECURITY FOR
*    LU 6.2 MULTIPLE SESSIONS INITIALLY FROM AN IRC CICS REGION.
*    APPC/PC AND APPC.
*    THE LOGIC IS IF LU6 TCTTE THEN AN ACF2 TERMID WILL BE
*    ASSIGNED DEPENDING ON SOME PARAMETERS PASSED.
*    THE FOLLOWING ALGORITHMS ARE IMPLEMENTED :
*    METHOD 1 :  AFTER USER SUCCESSFULLY LOGS ON TO CICS, A SECURITY
*                TOKEN WILL BE RETURNED. THAT SECURITY TOKEN MUST
*                BE SENT ALONG WITH SUBSEQUENT TRANSACTION
*                CONNECTION REQUEST BY LU6.2 PIP.
*                THE EXIT VALIDATES THE SECURITY TOKEN PASSED IN
*                LU6.2 PIP AND SETS ACF2 TERM TO THE SAME TERMID WHICH
*                HAD BEEN ORIGINALLY LOGGED ON TO. DEFAULT TERMID WILL
*                BE ASSIGNED IF THE VALIDATION FAILS.
*                IN THIS APPROACH, IT ALLOWS FOR
*                DIFFERENT LEVELS OF SECURITIES WITH MULTIPLE
*                CONCURRENT LU6.2 SESSIONS DEPENDING ON DIFFERENT
*                APPLICATION REQUIREMENTS.
*                DEFAULT TERMID IS 1ST SESSION TCTTE
*    METHOD 2 :  ALTERNATELY WHEN USER LOGS ON, LU6.2 SIGNON PROGRAM
*                WILL CONNECT LID TO A SPECIFIC TCTTE - IE 1ST
*                TCTTE SESSION.
*                THIS EXIT WILL SET TERMID TO 1ST TCTTE SESSION FOR
*                SUBSEQUENT TRANSACTION VALIDATION.
*                IN THIS WAY, ALL APPLICATIONS / SESSIONS FROM
*                A REMOTE IRC CICS OR PS/2
*                WILL HAVE  SAME LEVEL OF SECURITY.
         LTR   R2,R2                IS R2 -> TCTTE ?
         BNZ   CPGTCT               YES , USE THIS
         CLI   TCAFCI,TCAFCTRM      IS IT TERMINAL FACILITY ?
         BNE   CPGRET               NO, RETURN
         ICM   R2,B'0111',TCAFCAAA+1 PUT IN TCTTE @
CPGTCT   DS    0H
         CLI   TCTTETT,TCTELU6      IS IT LU6 ?
         BNE   CPGRET               NO RETURN
         L     R3,TCTTEMOD          @ SESSION MODE
         CLC   TCMEMODE-DFHTCTTE(,R3),=CL8'SNASVCMG'   SYSTEM SESSION ?
         BE    CPGRET               YES- RETURN
         L     R8,TCASYAA           @SYSTEM TCA
         USING DFHSYTCA,R8
         CLC   TCAKCOID(3),=CL3'SCF' *** BYPASS LOGON/LOGOFF TXN ***
         BE    CPGRET               YES -RETURN
CPGM1    L     R8,TCAALUCX          TCA LU6.2 EXTENSION
         LTR   R8,R8                DOES EXTENSION EXIST ?
         BZ    CPGRET               NO, RETURN
         DROP  R8
         USING DFHTCXDS,R8          TCA LU6.2 EXTENSION
         XR    R3,R3                R3=0
         ICM   R3,B'0011',TCAXPIPL  PIP TOTAL LENGTH
         LTR   R3,R3                > 0 ?
         BZ    CPGM1DF              NO, GO SET DEFAULT TCTTE LID
         XR    R3,R3                R3=0
         ICM   R3,B'0001',TCAXTPNL  PROCESS LENGTH
         LA    R8,TCAXTPN           @PROCESS
         AR    R8,R3                R8= @PIP
*                                   CHECK SECURITY TOKEN IN PIP SUBFLD
*                                   INCLUDED TMA-ID & 4-BYTE DATA
         CLC   0(2,R8),=H'12'       1ST PIP SUBFIELD LENGTH = 12 ?
         BNE   CPGM1DF              NO, SET DEFAULT TCTTE
         DROP  R8
*                                   PIP SUBFIELD HAS SECURITY TOKEN
*                                   WHICH IS TERMID PASSED FROM THE
*                                   PREVIOUS SUCCESSFUL LOGON
*                                   (COMPLEX MASK CAN BE BUILT ON
*                                    THE SECURITY TOKEN IF NEEDED)
*                                   VALIDATE THAT TERMID FROM SECURITY
*                                   TOKEN BELONGS TO CURRENT TCTSE
         L     R3,TCTTEMOD          @ SESSION MODE
         L     R3,TCMESESA-DFHTCTTE(,R3)   @ 1ST SESSION TCTTE
CPGM1CK  CLC   4(4,R8),TCTTETI-DFHTCTTE(R3) MATCH TERMID ?
         BE    CPGM1ID              YES - GOT IT RIGHT
         L     R3,TCTENEXT-DFHTCTTE(,R3) NEXT TCTTE SESSION
         LTR   R3,R3                END REACHED ?
         BNZ   CPGM1CK              NO - TRY AGAIN
         B     CPGM1DF              ELSE SET DEFAULT
CPGM1ID  MVC   ECATERM(4),4(R8)     SET TERMID
         B     CPGBLNK              PADS BLANKS
CPGM1DF  DS    0H                   DEFAULT TERMID  1ST SESSION TCTTE
*                                   SAME AS IN METHOD 2
         L     R3,TCTTEMOD          @ SESSION MODE
         L     R3,TCMESESA-DFHTCTTE(,R3) 1ST SESSION TCTTE
         MVC   ECATERM(4),TCTTETI-DFHTCTTE(R3) TCTSE TERMID
CPGBLNK  MVC   ECATERM+4(4),=CL4' ' PADS BLANKS
CPGRET   B     RETURN               GET OUT OF HERE
         DROP  R2                   DROP TCTTE ADDRESSABILITY
CPGE0
* CPGE0:  ACF2 TEST BACKEND LOGON PROGRAM FOR LU6.2 LINK
*         PROGRAM SETS ACF2 LOGONID ON AVAILABLE TCTTE.
*         THIS SIGNON PROGRAM IS FOR THE PROPOSED SECURITY
*         METHOD1 WHERE A SECURITY TOKEN HAVING ACF2 TMA ID
*         IS RETURNED AND THEN USED FOR SECURITY VALIDATION.
*         THE SIGNON PROGRAM WILL SEARCH TCTTE CHAIN FROM THE
*         SECOND TCTTE FOR AN AVAILBLE TCTTE, IE ONE HAS NOT
*         BEEN LOGGED ON, AND BUILD ACF2 TMA ASSOCIATED TO THAT.
*         (NOTE. FIRST TCTTE IS USED AS DEFAULT LOGONID)
*         CPGF0 IS THE SIGNON PROGRAM FOR LU6.2 SECURITY METHOD 2
*         IT IS INVOKED BY FRONT-END SIGNON PROGRAM IN APPC/PC OR APPC
*               OR CICS LU6.2
*         RECEIVED DATA :
*           <8-BYTE LOGONID><8-BYTE PASSWORD><4-BYTE RESERVES>
*         RETURNED DATA :
*           <40-BYTE INCLUDE TCTTE AND TMA OR MSG IF ERRORS>
*         CICS 1.7
*         ACF2/CICS INTERFACE 5.1
*         TRANS: SCFE TWA=600
         GBLB  &DFHEIMX
&DFHEIMX SETB  1
TCTTEAR  EQU   8      TCT
CSABAR   EQU   13     CSA
DFHEISTG DSECT
WPASS    DS    CL8
WLID     DS    CL8
WLID1    DS    CL8
WMSG     DS    CL80          MESSAGE LINE
         ACFAEUCP   DSECT=NO
         COPY DFHCSADS
         DFHTCTZE CICSYST=YES
         DFHTCA CICSYST=YES
         COPY DFHEICDS
CPG40    DFHEIENT  CODEREG=(11),EIBREG=(10),DATAREG=(9)
*                                  INITIALIZE ACF2 CONTROL BLOCK
         MVI   UCPTYP,UCPTYPP      ACF2 UCP CONTROL BLOCK
*                                  DETERMINE TERMINAL TYPE
CPGTCT   CLI   TCAFCI,TCAFCTRM     TERMINAL FACILITY ?
         BNE   CPGRET              NO - ?????
         XR    TCTTEAR,TCTTEAR     SET TCTTEAR = 0
         ICM   TCTTEAR,B'0111',TCAFCAAA+1  @TCTTE
         MVC   WMSG+26(4),TCTTETI  TERMINAL ID
         CLI   TCTTETT,TCTELU6     TCTTE LU6 ?
         BE    CPGLU6              LU6 TERMINAL CSMT MSG
*  LU2
         EXEC CICS SEND FROM(MSG1) LENGTH(60) ERASE WAIT
CPGRET2  EXEC CICS RETURN
*   LU6.2
CPGLU6   EXEC CICS RECEIVE INTO(WMSG) LENGTH(H20)
         MVC   WPASS(8),WMSG+8     PSWD  PASSED FROM FRONTEND TXNS
         MVC   WLID(8),WMSG        LID
         MVC   WMSG+8(8),=CL8' '   TAKE OUT PSWD BEFORE WRITE CSMT
         EXEC CICS WRITEQ TD QUEUE('CSMT') FROM(WMSG) LENGTH(20)
CPGON    DS    0H
*                                  ACF2 LID ON FIRST TCTTE
         L     R4,TCTTEMOD         @ TCTTE MODE
         L     R4,TCMESESA-DFHTCTTE(,R4)  @ 1ST TCTTE SESSION
         BAL   R2,CPGACF2Q         GET ACF2 LID
         CLI   UCPSTAT,UCPSTATE     ERROR ?
         BNE   CPGSRCH             START AVAILABLE TCTTE SEARCH
         MVC   WMSG(40),UCPMSG1    ERROR MSG
         MVC   WMSG(3),=CL3'1ST'   INDICATE ERROR ON 1ST TCTTE
         B     CPGLU6RT            RETURN
CPGSRCH  DS    0H
         MVC   WLID1(4),UCPLID     FIRST TCTTE LID
CPGSNXT  L     R4,TCTENEXT-DFHTCTTE(,R4)  NEXT PARALLEL SESSION
         LTR   R4,R4               END REACHED ?
         BZ    CPGSERR1            YES - ERROR MSG
         BAL   R2,CPGACF2Q         INQUIRE ON ACF2 LID
         CLI   UCPSTAT,UCPSTATE    ERROR ?
         BE    CPGSNXT             IGNORE THIS
         CLC   WLID1(4),UCPLID     IS LID = FIRST LID ?
         BNE   CPGSNXT             NO- NEXT
         ST    R4,UCPFCAAA         @TCTTE TO LOGON
         MVI   UCPREQB,UCPCON      CONNECT REQ
         MVC   UCPLID(8),WLID      LOGONID
         MVC   UCPPASS(8),WPASS    PASSWORD
         EXEC CICS LINK PROGRAM('ACFAEUCC') COMMAREA(ACFAEUCP)         *
               LENGTH(388)
         CLI   UCPSTAT,UCPSTATE    ERROR ?
         BE    CPGSERR2            YES - ERROR MSG
         MVC   WMSG(40),=CL40'*TCTTE=XXXX, TMA=XXXX * LOGON OK'
         MVC   WMSG+7(4),TCTTETI   TCTTE ID
         MVC   WMSG+17(4),TCTTETI-DFHTCTTE(R4)  TMA ID
         B     CPGLU6RT            MSG TO RETURN
CPGSERR1 MVC   WMSG(40),=CL40'** NO TCTTE AVAILABLE ***'
         B     CPGLU6RT            MSG & RETURN
CPGSERR2 MVC   WMSG(40),UCPMSG1    ACF2 MSG
CPGLU6RT DS    0H
         EXEC CICS SEND FROM(WMSG) LENGTH(40)
         EXEC CICS FREE
CPGRET   EXEC CICS RETURN
CPGACF2Q DS    0H
         ST    R4,UCPFCAAA         @TCTTE FOR ACF2 CALL
         MVI   UCPREQB,UCPINQ      INQUIRY REQUEST
         EXEC CICS LINK PROGRAM('ACFAEUCC') COMMAREA(ACFAEUCP)         *
               LENGTH(388)
         BR    R2
H20      DC    H'20'          LENGTH TO RECEIVE
MSG1     DC    CL60'** TXN CAN ONLY RUN IN LU6.2 BACKEND **'
         END


CPGF0

* CPGF0:  ACF2 TEST BACK-END LOGON PROGRAM FOR LU6.2 LINK
*         PROGRAM SETS ACF2 LOGONID ON AVAILABLE TCTTE.
*         THIS SIGNON PROGRAM IS FOR THE PROPOSED SECURITY
*         METHOD2 WHERE LOGON REQUEST WILL ALWAYS ATTACH TO
*         THE FIRST TCTTE SESSION.
*         CPGE0 IS THE SIGNON PROGRAM FOR LU6.2 SECURITY METHOD 1
*         IT IS INVOKED BY FRONT-END SIGNON PROGRAM
*         RECEIVED DATA :
*           <8-BYTE LOGONID><8-BYTE PASSWORD><4-BYTE RESERVES>
*         RETURNED DATA :
*           <40-BYTE INCLUDE TCTTE AND TMA OR MSG IF ERRORS>
*         CICS 1.7
*         ACF2/CICS INTERFACE 5.1
*         TRANS: SCFE TWA=600
         GBLB  &DFHEIMX
&DFHEIMX SETB  1
TCTTEAR  EQU   8      TCT
CSABAR   EQU   13     CSA
DFHEISTG DSECT
WPASS    DS    CL8
WLID     DS    CL8
WLID1    DS    CL8
WMSG     DS    CL80          MESSAGE LINE
         ACFAEUCP   DSECT=NO
         COPY DFHCSADS
         DFHTCTZE CICSYST=YES
         DFHTCA CICSYST=YES
         COPY DFHEICDS
CPG40    DFHEIENT  CODEREG=(11),EIBREG=(10),DATAREG=(9)
*                                  INITIALIZE ACF2 CONTROL BLOCK
         MVI   UCPTYP,UCPTYPP      ACF2 UCP CONTROL BLOCK
*                                  DETERMINE TERMINAL TYPE
CPGTCT   CLI   TCAFCI,TCAFCTRM     TERMINAL FACILITY ?
         BNE   CPGRET              NO - ?????
         XR    TCTTEAR,TCTTEAR     SET TCTTEAR = 0
         ICM   TCTTEAR,B'0111',TCAFCAAA+1  @TCTTE
         MVC   WMSG+26(4),TCTTETI  TERMINAL ID
         CLI   TCTTETT,TCTELU6     TCTTE LU6 ?
         BE    CPGLU6              LU6 TERMINAL CSMT MSG
*  LU2
         EXEC CICS SEND FROM(MSG1) LENGTH(60) ERASE WAIT
CPGRET2  EXEC CICS RETURN
*   LU6.2
CPGLU6   EXEC CICS RECEIVE INTO(WMSG) LENGTH(H20)
         MVC   WPASS(8),WMSG+8     PSWD  PASSED FROM FRONTEND TXNS
         MVC   WLID(8),WMSG        LID
         MVC   WMSG+8(8),=CL8' '   TAKE OUT PSWD BEFORE WRITE CSMT
         EXEC CICS WRITEQ TD QUEUE('CSMT') FROM(WMSG) LENGTH(20)
CPGON    DS    0H
*                                  ACF2 LID ON FIRST TCTTE
         L     R4,TCTTEMOD         @ TCTTE MODE
         L     R4,TCMESESA-DFHTCTTE(,R4)  @ 1ST TCTTE SESSION
         ST    R4,UCPFCAAA         @TCTTE TO LOGON
         MVI   UCPREQB,UCPCON      CONNECT REQ
         MVC   UCPLID(8),WLID      LOGONID
         MVC   UCPPASS(8),WPASS    PASSWORD
         EXEC CICS LINK PROGRAM('ACFAEUCC') COMMAREA(ACFAEUCP)         *
               LENGTH(388)
         CLI   UCPSTAT,UCPSTATE    ERROR ?
         BE    CPGSERR2            YES - ERROR MSG
         MVC   WMSG(40),=CL40'*TCTTE=XXXX, TMA=XXXX * LOGON OK'
         MVC   WMSG+7(4),TCTTETI   TCTTE ID
         MVC   WMSG+17(4),TCTTETI-DFHTCTTE(R4)  TMA ID
         B     CPGLU6RT            MSG TO RETURN
CPGSERR2 MVC   WMSG(40),UCPMSG1    ACF2 MSG
CPGLU6RT DS    0H
         EXEC CICS SEND FROM(WMSG) LENGTH(40)
         EXEC CICS FREE
CPGRET   EXEC CICS RETURN
H20      DC    H'20'          LENGTH TO RECEIVE
MSG1     DC    CL60'** TXN CAN ONLY RUN IN LU6.2 BACKEND **'
         END


John Thai
Systems Consultant
Computer Power Group (Australia)


