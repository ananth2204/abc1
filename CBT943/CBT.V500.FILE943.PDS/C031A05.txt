 Some problems with SDF
BACKGROUND INFORMATION
SDF/CICS is a screen-painting utility available under MVS/XA, MVS, and VSE.
(The VSE version appears under a different program number.)  I have been working
with the MVS version of the utility.  SDF contains both on-line functions and
batch functions.  The on-line functions include editing functions, such as a map
editor and a mapset editor, together with some utilities to copy, move, password
protect, and delete map specification library members.  The map editor allows
you to do some things that cannot conveniently be done with BMS macros, such as
table handling on the screen.  This portion of the system can be run under TSO,
or it can be run as a CICS transaction.  I am only familiar with using the on-
line portion under CICS.
The batch portion of the system takes mapsets stored in the map library and
creates BMS-type physical maps, as well as copy library members (symbolic maps)
to be included in your programs.  The batch portion is not a front-end for BMS,
in that it does not create BMS macros that are then assembled; it bypasses the
BMS assembly step completely.  This allows you to use longer names for data
elements than BMS would allow, and this is why you wonUt see a listing of BMS
macro source anywhere.  (There are utilities to import BMS mapsets into the SDF
map specification libraries and to export SDF mapsets into BMS, but these are
intended for conversion purposes.)  We have found that the batch portion appears
to work well.  Once the map and mapset editing processes are complete, with all
map fields named in a correct manner, the batch portion will create a good
mapset.
At one installation, we encountered problems in working with the map editor in
the on-line portion of the SDF system.  We discovered ways of working around
some of the problems but not all of them.  Despite its bugs, once the user
becomes accustomed to working with SDF it is possible to use it to produce
screens more rapidly than with BMS.  However, I am disappointed in the number of
flaws that mar this product.
ABENDS
Sometimes, unpredictably, the SDF transaction itself abends.  This often happens
when using the PF3 key to move back to the map editor menu in order to get to a
different map editor function.  Abends include, but are not limited to, VTAM
errors such as those triggered by PROG402 terminal controller errors.  These
abends donUt seem to be repeatable: re-keying identical data and re-trying the
operation generally works.  Thus far, we havenUt been able to find out what
causes this.  The automatic save function in SDF comes into play when using the
PF3 key to leave the map editor menu itself, but that is sometimes too late.  If
the abend occurs before successfully exiting from the map editor menu, data will
be lost.
We type SAVE on the command line of each map editor function before using the
PF3 key to exit from that function.  It also helps to use the copy utility
function to make back-up copies of mapsets and maps under another name, since it
is quite easy to delete map specification library members inadvertently.
By the way, it should be possible to type CANCEL on the command line to exit
from an editor function in order to back-out undesirable changes that have just
been made.  The CANCEL should put everything back to the level of the most
recent SAVE.  However, we have found that sometimes those changes are saved
instead of being backed out.  We have no explanation for this either.  The best
advice is to make back-up copies and to save regularly.
RESERVED CHARACTERS
On the Field Definition screen, several characters are shown just below the
command line.  Characters that are used for field demarcation cannot be used as
ordinary characters under SDF.  This resembles the use of reserved words under
COBOL.  The T#U sign is used to begin a constant field and also to indicate the
end of any field.  (A T#U sign is not needed at the end of a field if the
attribute of the next field immediately follows the end of the current field.)
The Tlogical-notU sign is used to begin a variable field (one that will appear
in the symbolic map).  The T#U sign or the Tlogical-notU sign will occupy the
position on the screen that will later be used for the attribute byte.
Less frequently used are the T%U and T@U characters.  The T@U character is
similar to a tab character.  It can be used to space out a series of fields
equidistantly across the screen.  The T%U character is a group marker.  It is
used to concatenate fields into one long field when separate attribute bytes are
not needed.
 The important thing to remember is that SDF does not let you use these reserved
characters as initial values in any fields on the screen.  For example, if you
require a T#U sign or a T%U sign in a header field on your screen, you will need
to define that header field as a variable field and then move the T#U sign or
T%U sign to it in your CICS program before sending the map.  For some reason,
SDF apparently doesnUt allow you to use the field initialisation screen to place
these reserved characters into the initial value of a field on the screen.
APPLICATION STRUCTURE REVIEW MENU
Once the field positions and lengths have been set up properly, this menu will
allow you to create mnemonic field names and to add PICIN and PICOUT clause
information.  However, this screen is not the proper place to attempt to change
field lengths.  If you need to do that go back to the field definition screen
and re-key the entire field.  Then, check the attribute screen to make sure the
attribute is still correct.
THE EQU FUNCTION ON THE ATTRIBUTE SCREEN
Here again, just below the command line on this screen is a line containing a
series of special characters.  The SDF user assigns the desired attribute
characteristics to each of these special characters using the EQU function.  The
SDF user can then set each fieldUs attribute on the screen to one of these
special characters.
Unfortunately, the same EQU command is used to view existing settings and to
change attribute settings.  To view existing settings, say for the T#U
character, enter EQU #.  The response will be something like:
     EQU # UNP NOR LE PAD B
If you wanted to change this setting, you would over-key it with something else
and press the enter key.  However, if you simply want to enquire against the
current settings for some other special character, be sure to clear the command
line first.  If you just type another symbol such as T?U in place of the T#U
above and press the enter key, the T?U symbol will immediately be given the same
attributes as the T#U symbol you previously enquired about.  This will cause
your screen to behave strangely without you necessarily realising why.  The test
function of the map editor can be used to reveal some, but not all, of the
attribute problems that may exist.
ERROR MESSAGES ON THE FIELD DEFINITION SCREEN
An error message will be shown on the field definition screen if the SDF user
tries to place two field delimiters in adjacent bytes. This makes sense, because
on a CICS screen a field attribute should be followed by at least one data byte,
not by another attribute byte.  However, sometimes the SDF user will see error
messages such as this one for no apparent reason.  We have found that it is
necessary to use ERASE EOF and to completely re-key the offending line if these
messages occur.  Failing that, one must use CANCEL to return to the previously-
saved version.
The following guidelines will reduce the probability of getting these error
messages:
1    Do not use the insert and delete keys to change field sizes, to move
fields, or for anything else.  The map editor does not behave like the TSO
editor or other mainframe text editors.  Using these keys seems to confuse the
map editor.
2    If you are using structures or arrays, do not over-key array or structure
fields on the field definition screen with any other data.  If you need to
change field length, position, or contents, first delete the screen lines that
contain the structure or array.  If you want to remove a structure (which is a
table of lines on the map), use the DELETE nn command to delete all but the
first line of that structure.  Then you can change that first line, and use the
REPEAT nn STRUCTURE command to expand it back into a correct structure.
3    DonUt attempt to do a REPEAT nn STRUCTURE command on a line that does not
contain at least one variable field.  The REPEAT nn STRUCTURE command causes SDF
to build an OCCURS table in the symbolic map.  If there is no field name to put
into the recurring portion, SDF wonUt be able to build the OCCURS table
properly.
HOW TO SET UP REPEATED DATA
This isnUt a problem with SDF per se, but with the documentation, which is not
entirely clear on the subject.
A structure is made up of a line that is repeated to form a table on the screen.
The SDF user places one or more variable fields on the original line.  When the
SDF user repeats that line nn times by using the REPEAT nn STRUCTURE command,
 each repeated line will contain the same set of variable fields.  A group item
with an OCCURS clause will be created in the symbolic map, with one occurrence
representing each screen line.  It is necessary to make sure that there are
enough blank lines at the end of the map to allow the structure to be created.
Non-blank lines that exist after the structure will be pushed down towards the
lower portion of the map.
An array can be placed on a line that is to be repeated to form a structure.  If
this is done, another OCCURS clause will appear on that one field within the
first OCCURS clause in the symbolic map.
An array is made up of a single field that is hand-keyed over and over on the
map, using the field definition screen.  Each array field must be identical in
length.  The fields within a given array do not all have to be on the same
screen line unless they are being defined within the original line of a
structure.  Non-array fields may not be inter-mingled with array fields.
SDF will not know that an array is being defined until the SDF user selects the
full screen naming screen of the map editor.  To define the array fields within
an array, type a question mark into the first nine fields within the array, and
press the enter key.  This will cause fields one to nine at the top of the
screen to represent the names of the first nine array fields.  Type identical
field names in each of them, but number the index fields consecutively one to
nine.  If you have more than nine array fields, then type question marks in
fields 10 to 18, type identical field names, and number the index fields
consecutively from 10 to 18.  Keep doing this until all of the array fields have
been included in the array.  You can check whether this has been done
successfully by using the application structure review screen.

Alida Jatich
Consultant (USA)    ) Alida Jatich 1988






































