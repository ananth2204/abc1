Experiences with automatic back-up of journals

I was interested to see Bruce Borchardt's article in the July
1990 edition of CICS Update regarding the automation of
journal archiving, in which he shows us his solution to the
problem.  I too have implemented automatic journal archiving
at our shop, with the help of Candle's excellent
AF/OPERATOR to intercept and respond to messages issued
by our own versions of the user-replaceable modules,
DFHXJCO and DFHXJCC.  Our two modules do little more
than write a WTO message to the operator console identifying
the journal and extent which has just been closed or is about to
be opened.  I let AF/OPERATOR do all the hard work of
actually recording which journals have been archived
successfully, deciding whether or not to let CICS use a journal
that is about to be opened, and submitting archive jobs.  This
method proved much quicker to implement than placing these
functions inside the DFHXJCC and DFHXJCO programs, and
is much easier to maintain.  For instance, to include a new
journal in the procedure takes about five minutes.  We have
now been  running like this for the best part of a year, with no
problems since we went 'live' with it.  Testing and
development, however, were a different story, and I came
across several hurdles which I did not expect prior to starting
the project.

I was therefore a little disappointed that Mr Borchardt's article
was so short.  The decision to implement automated journal
archiving is not one to be made lightly, as there are all kinds of
pitfalls and subtle side-effects that could trap the unwary unless
very careful attention and thought is given at the planning
stage.  Here I describe how you might go about it, the
problems you might encounter, and how to get round them.


DESIGNING AN AUTO-ARCHIVING MECHANISM

It is very difficult to know where to start describing how to do
this because you really do need to know how the journal
process works.  You don't need to know it inside out, but you
should have a good understanding of the various options in the
JCT and FCT, what happens at journal switch, and especially
what happens to journals across CICS restarts, (particularly
cold and warm starts because they don't do what you might
think obvious).  You need to understand the purpose of any
user journals that may be in use.  Are you recording after-
images?  If so, why?  If not, why not?  What mechanism have
you got in place for the forward file recovery of databases
and/or VSAM files?  How long do you need to keep the data
from system and user journals?  These are all questions that
you must be able to answer before you can start.

You will need to read the Recovery and Restart Guide from
cover to cover, and the appropriate chapters in the Resource
Definition Guide, the Facilities and Planning Guide and the
Customization Guide.  There is also an excellent Installation
Support Centre Technical Report called Guide to Data Sharing
Operations for the CICS and IMS User (GA19-5478), which
contains a chapter devoted to CICS journalling, and in addition
contains an appendix detailing a method of automating journal
archiving, including sample programs.

Before we can look at the problems associated with automating
the journal archiving process we need to look at some of the
ways in which CICS processes journals.


USE OF JOURNAL EXTENTS

A very important point to note is that, at start-up, CICS will
aways re-use the journal extent that it was using when it last
came down.  This is true for the system journal as well as user
journals, even if you cold start CICS.  This was not always the
case for user journals, and consequently the design of your
auto-archiving system may be affected.

Version 1.6.0 introduced changes in the way the system log
was handled when DLI=YES was specified in the SIT, to
enable certain problems and inefficiencies to be circumvented.
In this case, on a warm or cold start, the 'A' extent of the
system log is always used, starting from the top.  At
emergency restart, if the system log has an 'X' extent (which
for DLI=YES is mandatory), then the X extent is opened to
allow backout changes to be logged.  When this X extent is
subsequently closed, the next system log extent to be opened
depends on the options you have specified in the JCT, on the
JOUROPT parameter.  The default, LRU, means CICS will
use the less recently used extent.  Alternatively, you can
specify EXTA, which means that extent A will always be used
next.  Remember that this only applies for the system journal.
You cannot specify either option for user journals, and they
will be ignored for the system log if you don't have an X extent
defined.  You don't need DL/I in order to define an X extent -
if you create the dataset and name it on a DFHJ01X DD
statement in your CICS start-up deck, it will get used.

So we can see that merely closing a journal is not enough to
cause CICS to use a different extent next time (except for
system logs in regions with DL/I); a journal switch, however is
sufficient.  This can only happen if an extent fills up or if a
CEMT SWITCH command is issued for the relevant journal.
CICS shutdown will not cause either to occur.  As we shall see
later, this may have serious implications for an automated
archiving system.


RECORD POSITIONING

In addition to using the same extent that was last used (subject
to the exceptions previously mentioned), CICS also maintains
the record position within the journal.  This means that when
the journal is used, new records do not overwrite records that
may already be present on the journal, but are added to the
end.  The journal is thus cumulative, and for low-use journals
may contain records accumulated over a period of several days,
or even weeks.  This was not true for user journals prior to
CICS 1.6.0.  In those days, user journals always started at the
beginning of the A extent.

We now have what seems like a very complex series of
situations for extent selection and record positioning on both
the system log and for user journals.  Figures 1 and 2
summarize the situation.


USE OF USER JOURNALS

One area which needs very careful consideration is that relating
to user journals.  It is common to find applications using these
for purposes such as maintaining audit trails and database 'final
total' reconciliation (whether or not this is an ideal use of
journals is a topic which could no doubt be the subject of many
hours of debate) and upon journal switch or CICS shutdown,
operator-scheduled jobs are submitted which spend many
minutes sorting, extracting, reporting, copying, and generally
performing all those other time-consuming functions which
applications people seem to revel in once they have a set of
historical data to process.  This is certainly true at our shop.

In our case, the programs were written a very long time ago, in
the days when user journals were started from the top of the A
extent.  Then, after a CICS run, you could be sure that the data
contained in the user journal was created during that CICS run.
Since this is no longer the case, batch programs processing this
data either need to be able to figure out for themselves which
data is new, or they need to be given only new records.

One possible solution is to reformat the journals before use.
This does, however, mean that either someone has to
remember to submit the reformat jobs or you include a
reformat step for each journal in the CICS start-up deck.  This
will, of course, impact your start-up times; but also, consider
what will happen at emergency restart time.  You have batch
jobs which need to run over the data before it gets lost, so
restart will have to wait until the reformat steps have run.
Meanwhile, you have many irate users wondering when the
CICS system is going to be available again.

If you use user journals, you should consider including them in
the auto-archiving mechanism.  Batch jobs will then run
against the tape archive version of the journal, which means
that CICS will not have to wait for them to complete before it
can come up - particularly useful at emergency restart time.
Provided you create a new archive each day (probably best
done via GDG datasets), it does not matter how many times
CICS comes up and goes down during the course of the day
because you will have on the archive tape a complete day's
worth of records, which batch jobs can process at the end of
the CICS run.

However, doing this will mean that you will have to solve the
problem that arises from CICS using user journals from where
it last left off, because (and this is also true for system journals
when DL/I is not specified) the cumulative nature of such
journals means that records near the beginning of the journal
will be repeatedly archived along with new records, until such
time as the journal switches.  This could render completely
useless any output from jobs that process the archive version of
the journal, such as report jobs or forward file recovery
utilities.  So beware if you are writing file after-images to a
journal other than the system journal and check the JID
parameter on your FCT entries.


IMPLEMENTATION

Since we are trying to produce an automatic archiving
procedure, obviously it does not make sense to have to provide
for special cases and 'if thens'.  This will only make the coding
unnecessarily complex and difficult to maintain.  So the first
thing to do is ensure that all journals essentially look the same.
This means that it should be possible for your auto-archive job
to work out what the dataset name should be - all your journal
datasets should have names that conform to a certain template,
allowing the archive job to derive the name by merely
substituting the CICS region name, journal-id, and journal
extent-id.  All journals should have two extents, and you
should define the X extent for the system journal.  The reason
you should have two extents is so that one can be getting
archived while the other is in use by CICS.  If CICS is waiting
to open a journal, and a transaction causes an attempt to write
to that journal, the entire CICS region goes into a wait state,
not just the transaction trying to do the write.  For the same
reason it is a good idea to make the block size of the journal as
large as possible to minimize 'buffer full' conditions which
have the same effect, at least for the duration of the buffer
write.  Try using a block size (JCT BUFSIZE) of 32760, and
specify the buffer shift-up value (JCT BUFSUV) correctly
(around 60 percent of the BUFSIZE value), which, for this
buffer size, should be 19656.


CODING

There are several ways to physically implement the process.
You may choose to use the user-replaceable modules
DFHXJCC and DFHXJCO (see the Customization Guide) to do
all or just part of the work, and/or some external means of
doing it.  It is all entirely dependent on the set-up of your CICS
region(s), which is why I haven't included any program code
here (if anyone is interested I will be more than happy to send
it if you get in touch).

As I have already mentioned, I used the two user-replaceable
modules, DFHXJCC (journal close) and DFHXJCO (journal
open), to implement auto archiving.  My journal close module
merely issues a WTO message identifying the journal and
extent and stating that it is now closed and ready for archiving.
I set up AF/OPERATOR to respond when it sees one of these
messages and it looks in a partitioned dataset for a member
with the same name as the journal which has just been closed.
Each CICS region has its own partitioned dataset and
AF/OPERATOR can determine which to use since it knows the
job name of the CICS region when it intercepts a console
message.  If the PDS member is not found, the journal is not
archived.  Otherwise it is read and the record (only one byte) is
examined to see if the GDG generation has been created.  If it
has, the archive job will use this generation when it archives
the journal, otherwise the generation will be created when the
journal is archived.  AF/OPERATOR then writes a one-byte
code to it which states that the journal archive job has been
submitted but not yet completed, and submits the job (actually
it starts a catalogued procedure).

When the archive job completes successfully, it issues a WTO
message stating this fact and identifying the journal.
AF/OPERATOR again intercepts this message and updates the
flag to state that the journal was archived successfully.  When
CICS wants to open a journal, for whatever reason, eg at extent
switch, system start-up etc, the DFHXJCO module is called.
This writes a WTOR message and waits for a reply.
AF/OPERATOR intercepts the message and inspects the PDS
member to see if the journal has been successfully archived.  If
so, it responds to the message issued from the CICS region and
CICS opens and uses the journal.  Otherwise, the operator is
contacted to draw his attention to the fact that a journal job has
not completed.  When the operator has satisfied himself that
the archive is now done he replies to AF/OPERATOR, which
then replies to the CICS region waiting on the journal.

Unless operator intervention is required, which is very rare, the
whole process is over in a fraction of a second, with messages
being replied to as soon as they appear on the console.  The
advantage of issuing messages like this is that all updating of
flags is done centrally by AF/OPERATOR, thus avoiding
contention for the dataset which could occur if the CICS
journal close/open modules were fighting for the dataset against
the archive job.

In order to get round the problem of user journals not being
cleared down each day I had to write a shutdown PLT program
which issues a CEMT SWITCH command for all journals
except the system journal.  This complicated my DFHXJCC
program slightly, because it gets called when a journal is
switched, and I had to make it determine whether CICS was
currently in PLT processing or in the final stages of termination
so that it would know whether or not to process user journals.
If it is in PLT processing, it processes user journals but not the
system log, and if it is in the last stage of shutdown, it
processes the system log but not the user journals, which have
already had archive jobs submitted (a few seconds previously)
as a result of the SWITCH in the PLT program.

If you decide to use the DFHXJCC and DFHXJCO programs
be aware that you cannot use CICS file I/O facilities or issue
any CICS command which would cause CICS to wait.  If you
want to do any file handling you will have to rely entirely on
MVS services.


CICS VERSION 3

CICS Version 3.1 provides an auto-archiving facility.  New
options are available on the JCT macro: a new option,
AUTOARCH, on the JOUROPT parameter, and a new
parameter, ARCHJCL=jclname, which specifies the name of a
PDS member containing skeleton JCL for the archive job.  A
new dataset, DFHJACD, is introduced, which serves as a
Journal Archive Control Dataset.  This release also introduces
an EXEC CICS INQUIRE and EXEC CICS SET for journals,
currently only possible via the CEMT program interface.


SUMMARY

I hope the information presented here is useful in helping you
decide what to do about automatic journal archiving.  Each
situation is different, and only you know which journals to
archive and for which reasons, and the time and effort involved
in implementation will depend entirely on your own particular
circumstances.  Maybe you will decide to hang on until CICS
Version 3.1.  Whatever you do, do something!  The benefits
are many, and any time and effort spent is well spent.


Brian Perryman
Systems Programmer
Confederation Life Insurance Co (UK)


