MRO STARTs with shippable terminals

THE PROBLEM

Like a lot of installations we present the users with a sign-on panel
upon attachment to CICS, where the user is asked for his (ACF2)
logon-id and password before presenting him with a menu of
transactions based upon his authority to use them.  A code relating
to the desired transaction is entered by the user and the transaction
is initiated by means of a START command.

However, in an MRO environment, a START command for a
transaction defined as remote is function-shipped to the target
system, and if you have specified TERMID on the START
command, the AOR, not the TOR, is searched for the terminal
definition.  If it does not exist, the TERMIDERR condition is
returned to the program that issued the START and the remote
transaction is not started.  In other words, starting a remote
transaction with the TERMID option will not cause the terminal
definition to be shipped to the remote system.

THE SOLUTION

There are of course, a number of ways to tackle the problem.
First, you could forget about using MRO altogether.  But
remember, START with TERMID only fails when the terminal
definition can't be located in the target system, so another solution
is to define corresponding REMOTE entries for each of your
terminals in the TOR.  Indeed, prior to 1.7 this is what you had to
do anyway, but I was a bit indignant about doing this, not only
because of the extra administration involved, but for the fact that
it makes the SHIPPABLE option pointless.  In any case, a remote
terminal entry can only point to one TOR, so you have had it if
you want to share an AOR from several TORs, which we wanted
to do because we have CICSPRINT in a 'printer-owning' region.
The ideal solution would of course be for the START command to
cause the terminal definition to get shipped.

To arrive at this solution one has to look carefully at the
differences between an Interval Control start and a Terminal
Control start.  In the case of Interval Control (when a START
command is issued), if the transaction definition reveals that it is
remote, the ICE is shipped to the remote system to await expiry.
The transaction initiated will be the remote transaction-id, which
need not necessarily be the same as the one defined in the TOR.
In the case of Terminal Control (when a user enters the
transaction-id and presses an attention key), a transaction is
actually started in the TOR, the terminal definition is shipped, and
the transaction is routed and started in the AOR against the
shipped terminal definition.  When a transaction is defined as
remote, it is set to invoke a program called DFHCRP, which is
the Transaction Routing Relay Program.  This is most obvious
when using RDO, because the CEDA transaction will put
DFHCRP in the program name field as soon as you specify that it
is REMOTE.

DFHCRP is actually a very small and simple program.  When it
gets control, it first checks that it is running at a terminal and that
this task owns it.  As the TCA contains the address of the current
PCT entry, it verifies that this transaction is defined as REMOTE
before finally fetching the remote SYSID and TRANID from the
PCT and routes this information to the remote system using the
DFHIS macro.  It causes the terminal definition to be shipped.

Now you can't link to DFHCRP to cause routing of the transaction
because of the validation of the PCT details described above, but
as it is so small it is a simple matter to reproduce the code into
your own program and use it instead of, or to enhance, a START
command.  You can then remove all your TYPE=REMOTE
entries from your AOR and specify the SHIPPABLE option on all
the terminals in the TOR.  Then if a program such as a sign-on
menu gets a TERMIDERR from a START command, the DFHIS
macro is called to process the request instead.  Once the terminal
definition has been shipped, subsequent START requests will be
successful.

Listed below is the basic core of a program which you can
incorporate into a menu or other program.  One point to note is
that the transaction name you pass to the DFHIS macro is actually
the remote name of the transaction.  You can't get this from
INQUIRE TRANSACTION so if it differs from the name defined
in the TOR you will have to get it from the PCT or the CSD.

Sample code for a shippable terminal START

TCASBAR  EQU   9
         GBLB  &DFHEIMX                   DEFINE 'MACRO/EXEC MIX' FLAG
&DFHEIMX SETB  1                          SET IT
* CICS DSECTS
         COPY  DFHCSADS
         DFHTCA CICSYST=YES
         COPY  DFHZEPD
* WORKING STORAGE
         DFHEISTG
SYSID    DS    CL4                        REMOTE SYSTEM NAME
         DFHISCRQ                         DFHIS PARAMETER LIST
* ENTRY POINT
STRTP01  DFHEIENT DATAREG=R8,CODEREG=R10,EIBREG=R11
         EXEC  CICS INQUIRE TRANSACTION(TRANID)                        +
               REMOTESYSTEM(SYSID)
         MVC   ISCRQSYS,SYSID             SET REMOTE SYSTEM NAME
         MVC   ISCRQTRN,TRANID            SET REMOTE TRANID
         DFHIS TYPE=ROUTE
         EXEC  CICS RETURN
* CONSTANTS
         LTORG
TRANID   DC    CL4'????'                  TRANID TO BE INVOKED
         END
CONCLUSION
I should point out that DFHIS is a CICS internal macro, and as
such, use of it is probably unsupported by IBM, which is all well
and good until they change it in some way, but there is no real
alternative.  In a single region (non-MRO) environment, a
program can start a transaction as if a user had keyed in a
transaction-id and pressed an attention key; with MRO, you lose
this capability.  Now whatever your feelings about this, you are
left with a situation that could seriously affect your decision to use
MRO.  Personally, I think it is a very unsatisfactory state of
affairs and that the onus should be on IBM to provide either a
START command that works in the same way as terminal attach,
or a documented and supported interface to achieve the same.  I
suppose if enough people used the DFHIS interface described
here, IBM may be forced to support it formally.
Even now, the SHIPPABLE option still does not function
particularly well.  For instance, it should be perfectly reasonable
to expect more that one Terminal-Owning Region to communicate
with a single Application-Owning Region.  By nature this requires
SHIPPABLE, since if you define Remote terminals you can only
address one TOR (unless you go messing about with alternative
names for duplicate terminals).  But shipped terminals are not
deleted after use, so if you access an AOR from a TOR, then
subsequently use another TOR at the same terminal to use the
same AOR, your task gets abended.  If you then sign-off, the
terminal is re-acquired by the first TOR you used, because the
AOR still has the terminal definition from the first time.  To make
this function correctly the terminal should be re-shipped and the
control areas updated each time.
Unfortunately, we have got strong reasons for using MRO at our
installation, and judging by the amount of related correspondence
on the INFO/SYS database we are not the only ones experiencing
difficulties, especially in the area of starting transactions from a
selection menu.  But it appears we are stuck with the situation
until IBM improve it.  In short, though it cannot be denied that
MRO works, it is far from ideal.  What is needed is an efficient
and practical MRO facility, and I think we as customers need to
put pressure on IBM to provide it, since it probably won't be
improved otherwise.

B Perryman
Systems Programmer
Confederation Life Insurance Co (UK) ) Xephon 1989


