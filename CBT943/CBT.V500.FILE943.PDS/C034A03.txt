 RECEIVE and RETRIEVE in one transaction
If a given task is to RECEIVE terminal input for an operator a task has to be
STARTed at a different terminal to do work based on the data RETRIEVEd from the
original task.  An example of this requirement is Remote screen viewing in the
December 1987 issue of CICS Update, where three tasks are involved.  Task A
accepts the original request and STARTs task B at another terminal to read and
store the terminalUs screen buffer.  Task B in turn STARTs task C at the initial
terminal to display the saved screen image.
Instead of coding and maintaining two (or more) separate programs (and
associated transaction-ids), combine them into a single program with only one
transaction-id.  When such a program begins execution, it can tell whether it
has been manually invoked by an operator, or whether it has been STARTed, and
can go to the appropriate section of code.  The simplest way to do this is to
issue a HANDLE CONDITION ENDDATA(xxx) command, where xxx is the routine handling
operator input (via RECEIVE), then follow the HANDLE with a RETRIEVE command.
If the program was invoked by terminal input, an attempt to RETRIEVE will result
in the ENDDATA condition after which the program will issue a RECEIVE to process
terminal input instead.
In the case of the Remote screen viewing example, where three units of work are
involved, I took this just one step further.  If I received the ENDDATA
condition, I needed to execute the first unit.  However, the second unit STARTed
by the first in turn STARTed the third unit of work.  To combine all three units
in one program, I needed to differentiate between the last two, both of which
RETRIEVEd data from a prior unit.  In this case, simply inspecting the length of
the data retrieved was sufficient (one was always passed 4 bytes, the other was
always passed more).  In the event they had used the same data length, however,
an extra TfunctionU byte in the data to be retrieved would resolve the question.
There are several advantages to combining these functions.  Firstly, you have
only one source file to maintain (versus two or more).  There is only one PCT
and PPT entry required.  When loaded into program storage, there is only one
program copy.  Because programs in the DSA cannot share partially unused pages,
this reduces potential waste from the slack of several programs.  Also, since
several sections of code (program entry, program exit, common routines) can
often be shared, there is less redundancy of code and a saving of DSA space.
The thing to remember is that TtransactionU and TtaskU are not synonymous.  Most
often they are given a one-to-one association, but there is nothing to prevent
multiple tasks (or units of work) from being invoked via the same transaction.

Lawrence Holder
Senior Programmer/Analyst
University of Tennessee at Martin (USA) ) UTM 1988

























