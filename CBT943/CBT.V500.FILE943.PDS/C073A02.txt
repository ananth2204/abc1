Defining CICS resources in batch

The problem with defining some CICS resources in the CSD
file in batch is that there are no utilities to perform the job.
The only utilities available deal with the maintenance of the
CSD itself at group level and not the definition or deletion of a
single resource.  I have discovered a method to upgrade the
CSD file without knowing the file layout of the CSD records or
how the file should be accessed.  I use the IBM-supplied
program DFHCSDUP with the command UPGRADE USING.
With this command, DFHCSDUP loads a module from a
SYSIN dataset that contains the RDO command (eg DEFINE
GROUP(MAPS) MAP(MAP1)).

I have created a macro called FSRDO to generate a module of
this kind.  The purpose of the FSRDO macro is to be like the
RDO command, although it could be used to generate a new
macro to solve other problems.  I have also generated a macro
called DFHPPT and I have assembled the PPT with a new
MACLIB containing my macro.  After the link edit, I upgrade
the CSD file with the command UPGRADE USING(xxxx),
where xxxx is the name of the module generated with the new
macro.

This macro has been used with MVS/XA and MVS/ESA with
CICS 2.1.1.  I don't think there would be any problem using it
with CICS 1.7 and VSE/SP.


EXAMPLE

This is the source to generate the modules that are used with
DFHCSDUP.


*    DECLARE GROUP AND ATTRIBUTES FOR TRANSACTIONS
TRAN     FSRDO TYPE=GROUP,GRPNAME=UXXXTRW0,ATTR=(PROFILE(PRFD000C),    X
               DTIMOUT(0050),SPURGE(YES))
*    UNLOCK THE GROUP (UXXXTRW0)
         FSRDO TYPE=UNLOCK
*    DELETE ALL ENTRIES IN GROUP (UXXXTRW0)
         FSRDO TYPE=DELETE,ALL=YES
*    DEFINE NEW ENTRIES IN GROUP (UXXXTRW0)
         FSRDO TYPE=DEFINE,TRANSACTION=TWX1,                           X
               ATTR=(PROGRAM(TXXX185))
         FSRDO TYPE=DEFINE,TRANSACTION=TWX2,                           X
               ATTR=(PROGRAM(TXXX186))
         FSRDO TYPE=DEFINE,TRANSACTION=TWX3,                           X
               ATTR=(PROGRAM(TXXX265))
         FSRDO TYPE=DEFINE,TRANSACTION=TWX4,                           X
               ATTR=(PROGRAM(TXXX266))
         FSRDO TYPE=DEFINE,TRANSACTION=TWX5,                           X
               ATTR=(PROGRAM(TXXX285))
         FSRDO TYPE=DEFINE,TRANSACTION=TWX6,                           X
               ATTR=(PROGRAM(TXXX286))
*    ADD GROUP (UXXXTRW0) TO LIST (LISTCICS)
         FSRDO TYPE=ADD,LIST=LISTCICS
*    DECLARE GROUP AND ATTRIBUTES FOR PROGRAMS
PROG     FSRDO TYPE=GROUP,GRPNAME=UXXXPG10
*    DEFINE NEW ENTRIES IN GROUP (UXXXPG10)
         FSRDO TYPE=DEFINE,PROGRAM=TXXX185
         FSRDO TYPE=DEFINE,PROGRAM=TXXX186
*    ADD GROUP (UXXXPG10) TO LIST (LISTCICS)
         FSRDO TYPE=ADD,LIST=LISTCICS
*    DECLARE GROUP AND ATTRIBUTES FOR PROGRAMS
         FSRDO TYPE=GROUP,GRPNAME=UXXXPG20
*    DEFINE NEW ENTRIES IN GROUP (UXXXPG20)
         FSRDO TYPE=DEFINE,PROGRAM=TXXX265
         FSRDO TYPE=DEFINE,PROGRAM=TXXX266
         FSRDO TYPE=DEFINE,PROGRAM=TXXX285
         FSRDO TYPE=DEFINE,PROGRAM=TXXX286
*    ADD GROUP (UXXXPG20) TO LIST (LISTCICS)
         FSRDO TYPE=ADD,LIST=LISTCICS
*    DECLARE GROUP FOR PRINTER
TERM     FSRDO TYPE=GROUP,GRPNAME=A027PRNT
*    DEFINE NEW ENTRIES IN GROUP (A027PRNT) AND ATTRIBUTES
         FSRDO TYPE=DEFINE,TERMINAL=A027,                              X
               ATTR=(AUTINSTMODEL(NO),                                 X
               TYPETERM(TNSC1PRT),NETNAME(NT05A027),                   X
               PRINTERCOPY(NO),                                        X
               ALTPRINTCOPY(NO),                                       X
               OPERPRIORITY(0),OPERRSL(0),                             X
               OPERSECURITY(1),                                        X
               TERMPRIORITY(0),INSERVICE(YES),                         X
               ATTACHSEC(LOCAL),                                       X
               )
*    ADD GROUP (A027PRNT) TO LIST (LISTCICS)
         FSRDO TYPE=ADD,LIST=LISTCICS
*    DECLARE GROUP FOR PRINTER
         FSRDO TYPE=GROUP,GRPNAME=A127PRNT
*    DEFINE NEW ENTRIES IN GROUP (A127PRNT) AND ATTRIBUTES
         FSRDO TYPE=DEFINE,TERMINAL=A127,                              X
               ATTR=(AUTINSTMODEL(NO),                                 X
               TYPETERM(TNSC1PRT),NETNAME(NT05A127),                   X
               PRINTERCOPY(NO),                                        X
               ALTPRINTCOPY(NO),                                       X
               OPERPRIORITY(0),OPERRSL(0),                             X
               OPERSECURITY(1),                                        X
               TERMPRIORITY(0),INSERVICE(YES),                         X
               ATTACHSEC(LOCAL),                                       X
               )
*    ADD GROUP (A127PRNT) TO LIST (LISTCICS)
         FSRDO TYPE=ADD,LIST=LISTCICS
*    END OF COMMAND
         FSRDO TYPE=LAST
         END


FSRDO MACRO

         MACRO
&NAME    FSRDO &TYPE=,          TYPE ENTRY                             *
               &GRPNAME=,       GROUP NAME                             *
               &TO=,            NEW GROUP NAME                         *
               &ALL=,           ALL                                    *
               &TRANSACTION=,   TRANSACTION NAME                       *
               &MAPSET=,        MAPSET NAME                            *
               &PROGRAM=,       PROGRAM NAME                           *
               &PROFILE=,       PROFILE NAME                           *
               &PARTITIONSET=,  PARTITIONSET                           *
               &SESSIONS=,      SESSIONS                               *
               &TERMINAL=,      TERMINAL                               *
               &TYPETERM=,      TYPETERM                               *
               &CONNECTION=,    CONNECTION                             *
               &LIST=,          LIST NAME                              *
               &MERGE=YES,      MERGE ONLY FOR COPY OR MOVE            *
               &REPLACE=NO,     REPLACE ONLY FOR COPY OR MOVE          *
               &AS=,            NEW NAME                               *
               &BEFORE=,        FOR ADD GROUP TO LIST                  *
               &AFTER=,         FOR ADD GROUP TO LIST                  *
               &ATTR=,          ATTRIBUTE LIST                         *
               &DUMMY=DUMMY        PROTOTYPE DUMMY PARAMETER          @
.**********************************************************************
.* MACRO  NAME = FSRDO                                                *
.* DESCRIPTIVE NAME = TO CREATE LOAD FOR DFHCSDUP  (UPGRADE USING)    *
.* STATUS = 1.0.0          RELATE TO CICS = 2.1.1                     *
.**********************************************************************
.* *                          G L O B A L                           * *
         GBLC  &GRP           GROUP NAME
         GBLC  &INIZIO        FOR TITLE ON FIRST MACRO
         GBLC  &WATTR(255)    GLOBAL ATTRIBUTE LIST
.* *                          L O C A L                             * *
         LCLA  &C1            WORKING COUNTER
         LCLC  &CHROK         SWITCH FOR RESOURCE DEFINED
         LCLA  &ATN           COUNTER FOR LOCAL ATTRIBUTE LIST
         LCLA  &ATW           COUNTER FOR GLOBAL ATTRIBUTE LIST
         LCLA  &ATR           COUNTER BACK FOR LOCAL ATTRIBUTE LIST
         LCLC  &ATTX          WORK FOR ATTRIBUTE
.*         START OF MACRO                                             *
         AIF   ('&INIZIO' EQ '1').NOMNOTE      IS FIRST MACRO?
         AIF   ('&TYPE' EQ 'GROUP').NOERRGP    AND IS TYPE=GROUP?
 MNOTE 12,'******   THE FIRST MACRO MUST BE TYPE=GROUP .  ******'
         MEXIT
.NOERRGP ANOP
&INIZIO  SETC  '1'           SET SWITCH INITIAL ON
&GRP     SETC  ' '           SET GROUP NAME AT BLANK
  MNOTE 'FSCSD - GENERATED MODULE FOR UPDATE CSD VIA BATCH'
CSD      TITLE 'FSCSD - GENERATED MODULE FOR UPDATE CSD VIA BATCH'
         START 0             START OF MODULE
&NAME    CSECT
.NOMNOTE ANOP
         AIF   ('&TYPE' EQ 'LAST').LAST
         AIF   ('&TYPE' EQ 'GROUP').GROUP
         AIF   ('&TYPE' EQ 'UNLOCK').LOCK
         AIF   ('&TYPE' EQ 'LOCK').LOCK
         AIF   ('&TYPE' EQ 'ADD').ADDRM
         AIF   ('&TYPE' EQ 'APPEND').APPEND
         AIF   ('&TYPE' EQ 'COPY').CHRES
         AIF   ('&TYPE' EQ 'MOVE').CHRES
         AIF   ('&TYPE' EQ 'RENAME').CHRES
         AIF   ('&TYPE' EQ 'DEFINE').CHRES
         AIF   ('&TYPE' EQ 'DELETE').CHRES
         MNOTE 8,'* TYPE=&TYPE UNKNOWN '
         AGO   .FINE00
.*             P R O C E S S   T Y P E = G R O U P                    *
.GROUP   ANOP
         AIF   ('&GRPNAME' EQ '').GRER01   TEST IF DEFINED
&GRP     SETC  '&GRPNAME'                  SET GROUP NAME
&C1      SETA  1
.GRLOP1  ANOP                              LOOP FOR BLANK  ATTRIBUTE
&WATTR(&C1) SETC ' '                       SET GLOBAL ATTRIBUTE LIST
&C1      SETA  &C1+1                       INCREMENT COUNTER
         AIF   (&C1 GT 255).GRCONT         VERIFY MAX ATTRIBUTE
         AGO   .GRLOP1
.GRCONT  AIF   (N'&ATTR EQ 0).FINE00       ARE PRESENT ATTRIBUTE LIST?
&C1      SETA  1
.GRLOOP  ANOP                              LOOP FOR DECODE ATTRIBUTE
&WATTR(&C1) SETC '&ATTR(&C1)'              SET GLOBAL ATTRIBUTE LIST
&C1      SETA  &C1+1                       INCREMENT COUNTER
         AIF   (&C1 GT N'&ATTR).FINE00     IS THE LAST ?
         AIF   (&C1 GT 255).GRER02         VERIFY MAX ATTRIBUTE
         AGO   .GRLOOP
.GRER01  MNOTE 8,'* TYPE=&TYPE GROUPNAME NOT DEFINED'
         AGO   .FINE00
.GRER02  MNOTE 8,'* ATTRIBUTE LIST TOO MANY PARAMETRS SPECIFIED'
         AGO   .FINE00
.*             P R O C E S S   T Y P E = L O C K / U N L O C K        *
.LOCK    ANOP
         DC    X'FFFFFFFF'
         DC    C'&TYPE '
         AIF   ('&LIST' EQ '').LK0001
         DC    C'LIST(&LIST) '
         AGO   .FINE00
.LK0001  DC    C'GROUP(&GRP) '
         AGO   .FINE00
.*             P R O C E S S   T Y P E = L A S T                      *
.LAST    ANOP
ENDCMD   DC    X'FFFFFFFF'
         DC    X'FFFFFFFF'
         END
         AGO   .FINE00
.*             P R O C E S S   T Y P E = A D D                        *
.ADDRM   ANOP
         AIF   ('&LIST' EQ '').ADER01
         DC    X'FFFFFFFF'
         DC    C'&TYPE '
         DC    C'GROUP(&GRP) '
         DC    C'LIST(&LIST) '
         AIF   ('&BEFORE' EQ '').AD0001
         DC    C'BEFORE(&BEFORE) '
.AD0001  ANOP
         AIF   ('&AFTER' EQ '').AD0002
         DC    C'AFTER(&AFTER) '
.AD0002  ANOP
         AGO   .FINE00
.ADER01  MNOTE 8,'* TYPE=&TYPE LIST NOT DEFINED'
         AGO   .FINE00
.*             P R O C E S S   T Y P E = A P P E N D                  *
.APPEND  ANOP
         AIF   ('&LIST' EQ '').APER01
         AIF   ('TO' EQ '').APER02
         DC    X'FFFFFFFF'
         DC    C'&TYPE '
         DC    C'LIST(&LIST) '
         DC    C'TO(TO) '
         AGO   .FINE00
.APER01  MNOTE 8,'* TYPE=&TYPE LIST NOT DEFINED'
         AGO   .FINE00
.APER02  MNOTE 8,'* TYPE=&TYPE TO LIST NOT DEFINED'
         AGO   .FINE00
.*             P R O C E S S   R E S O U R C E                        *
.CHRES   ANOP
&CHROK   SETC  '0'
         DC    X'FFFFFFFF'
         DC    C'&TYPE '
         AIF   ('&ALL' EQ '').CHR000
&CHROK   SETC  '1'
         DC    C'ALL '
.CHR000  ANOP
         AIF   ('&CONNECTION' EQ '').CHR001
&CHROK   SETC  '1'
         DC    C'CONNECTION(&CONNECTION) '
.CHR001  ANOP
         AIF   ('&MAPSET' EQ '').CHR002
&CHROK   SETC  '1'
         DC    C'MAPSET(&MAPSET) '
.CHR002  ANOP
         AIF   ('&PARTITIONSET' EQ '').CHR003
&CHROK   SETC  '1'
         DC    C'PARTITIONSET(&PARTITIONSET) '
.CHR003  ANOP
         AIF   ('&PROFILE' EQ '').CHR004
&CHROK   SETC  '1'
         DC    C'PROFILE(&PROFILE) '
.CHR004  ANOP
         AIF   ('&PROGRAM' EQ '').CHR005
&CHROK   SETC  '1'
         DC    C'PROGRAM(&PROGRAM) '
.CHR005  ANOP
         AIF   ('&SESSIONS' EQ '').CHR006
&CHROK   SETC  '1'
         DC    C'SESSIONS(&SESSIONS) '
.CHR006  ANOP
         AIF   ('&TERMINAL' EQ '').CHR007
&CHROK   SETC  '1'
         DC    C'TERMINAL(&TERMINAL) '
.CHR007  ANOP
         AIF   ('&TRANSACTION' EQ '').CHR008
&CHROK   SETC  '1'
         DC    C'TRANSACTION(&TRANSACTION) '
.CHR008  ANOP
         AIF   ('&TYPETERM' EQ '').CHR009
&CHROK   SETC  '1'
         DC    C'TYPETERM(&TYPETERM) '
.CHR009  ANOP
         AIF   ('&CHROK' NE '1').CHRER1
         DC    C'GROUP(&GRP) '
         AIF   ('&TYPE' EQ 'COPY').COPY
         AIF   ('&TYPE' EQ 'MOVE').COPY
         AIF   ('&TYPE' EQ 'DEFINE').CHATT
         AGO .FINE00
.CHRER1  MNOTE 8,'* TYPE=&TYPE RESOURCE NOT DEFINED'
         AGO .FINE00
.*           P R O C E S S   T Y P E  C O P Y  /  M O V E             *
.COPY    ANOP
         AIF   ('&TO' EQ '').CPYER1
         AIF   ('&MERGE' EQ 'YES').MRGY
         AIF   ('&REPLACE' NE 'YES').CPYER2
         DC    C'REPLACE '
         AGO .ENDCPY
.MRGY    ANOP
         DC    C'MERGE '
.ENDCPY  ANOP
         DC    C'TO(&TO) '
         AGO .FINE00
.CPYER1  MNOTE 8,'* TYPE=&TYPE TO=NEW-GROUP NOT SPECIFIED'
         AGO .FINE00
.CPYER2  MNOTE 8,'* TYPE=&TYPE NO MERGE/REPLACE SPECIFIED'
         AGO .FINE00
.*           P R O C E S S   A T T R I B U T E   L I S T              *
.CHATT   ANOP
.*       AIF   (('&ATTR' EQ '') AND (N'&WATTR EQ 0)).CHAER1
&ATN     SETA 1
         AIF   ('&ATTR' EQ '').CHLP00
.CHLP01  ANOP
&ATTX    SETC '&ATTR(&ATN)'
         DC    C'&ATTX '
&ATN     SETA &ATN+1
         AIF  (&ATN LE N'&ATTR).CHLP01
.CHLP00  ANOP
         AIF  (N'&WATTR EQ 0).FINE00
&ATW     SETA 1
.CHLP02  ANOP
         AIF  ('&WATTR(&ATW)' EQ ' ').FINE00
&ATR     SETA &ATN-1
&ATTX    SETC '&WATTR(&ATW)'
.CHLP03  ANOP
&C1      SETA 1
.CHLP04  AIF  ('&ATTX'(&C1,1) EQ '(').CHOK01
         AIF  (&C1 EQ K'&ATTX).CHOK01
&C1      SETA &C1+1
         AGO  .CHLP04
.CHOK01  ANOP
         AIF  ('&ATTR' EQ '').CHOK02
         AIF  ('&ATTX'(1,&C1) EQ '&ATTR(&ATR)'(1,&C1)).CHEX01
.CHOK02  ANOP
&ATR     SETA &ATR-1
         AIF  (&ATR GT 0).CHLP03
         DC    C'&ATTX '
.CHEX01  ANOP
&ATW     SETA &ATW+1
         AIF  ('&WATTR(&ATW)' NE ' ').CHLP02
         AGO .FINE00
.CHAER1  MNOTE 8,'* TYPE=&TYPE ATTRIBUTE LIST NOT DEFINED'
         AGO .FINE00
.FINE00  ANOP
         MEXIT
         MEND


SAMPLE EXECUTION JCL

This is the JCL to assemble and link-edit the source of
commands and upgrade the CSD file.

//UPGRCSD  JOB ,,CLASS=X,MSGCLASS=X
//UPDCSD  PROC INP=,MOD=
//ASM     EXEC PGM=IEV90,PARM=(XREF,NODECK,OBJECT)
//SYSLIB   DD  DSN=xxx.xxx.maclib,DISP=SHR <===maclib for fsrdo
//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,
//             DCB=BUFNO=1
//SYSUT2   DD  DSN=&SYSUT2,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,
//             DCB=BUFNO=1
//SYSPUNCH DD  DUMMY
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,
//             DISP=(MOD,PASS),
//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)
//SYSIN        DD DSN=&INP(&MOD),DISP=SHR <== source input
//LKED    EXEC PGM=IEWL,COND=(5,LT,ASM),
//             PARM='LIST,LET,XREF,MAP'
//SYSLIN   DD  DSN=&OBJ,DISP=(OLD,DELETE)
//         DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=&&GOSET(MODUPD),DISP=(MOD,PASS),
//         SPACE=(1024,(120,120,10)),UNIT=3380
//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,
//             DCB=BUFNO=1
//SYSPRINT DD  SYSOUT=*
//STEPUP   EXEC PGM=DFHCSDUP,REGION=300K
//STEPLIB DD  DSN=CICS211.LOADLIB,DISP=SHR
//        DD  DSN=&&GOSET,DISP=SHR
//DFHCSD  DD  DSN=CICS211.CSD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//        PEND
//STEPONE EXEC UPDCSD,INP='user.CNTL',MOD=EXAMPLE
//STEPUP.SYSIN  DD  *
    UPGRADE USING(MODUPD)
/*


Stefano Piccoli
CICS Systems Programmer (Italy)

