A third look at conversational programming

A second look at conversational programming (CICS Update,
January 1989) played devil's advocate to the universally-held
opinion among CICS systems programmers that pseudo-
conversational is the only acceptable form of programming.
Because of the interest in the topic, this follow-up article details
the trends that make conversational an operationally-feasible
option for some CICS installations, then explores why most
applications are still better off when written pseudo-
conversationally.  Finally, one type of application is reviewed
where conversational really does make sense.

TRENDS

Virtual storage growth

IBM's vision of the future includes On-Line Transaction
Processors (eg CICS and IMS/DC) with extremely high
transaction rates. Since the beginning of 1989, IBM speakers have
been to every medium and large city where they have customers,
describing their solution, with benchmarks to back them up.  They
present a picture of data resident in real memory, eliminating
almost all DASD I/O associated with reads or writes to databases
(DB2 tables in IBM's benchmarks); no paging; no 'normal' file or
DBMS I/O to DASD; nothing.

Where are we going to get all the real memory necessary to
support this scenario?  By the time most of us have implemented
production applications of this sort, typically with DB2 and ESA,
we will probably already have the real memory.  Earlier this year,
a study of IBM mainframe installations was published that showed
that the ratio between the amount of real memory and DASD has
been dropping significantly over the last ten years.  When you
consider the tremendous growth in DASD over that same period,
that study would indicate that real memory is growing even faster.

CICS Virtual Storage Constraint Relief

Clearly, the trend is toward virtually unlimited (real and virtual)
memory, with DASD I/O the major bottleneck to avoid.  CICS
has made most of the important steps already to provide Virtual
Storage Constraint Relief (VSCR) in the MVS/XA and MVS/ESA
environments.  Recent releases have allowed the movement of
major chunks of CICS 'above the line', in an attempt to eliminate
the perpetual jockeying for position that occurs in the very finite
area of virtual memory between 0 and 16 megabytes.

CICS 1.6

%   In Assembler, COBOL, and PL/I application programs,
written in command-level CICS, both the program (shared)
and data area (one per user) can reside above the line, if
coded for 31-bit addresses (Assembler), compiled with VS
COBOL II (COBOL), or compiled with at least Release 5.1
(PL/I), and link-edited with AMODE(31) and
RMODE(ANY).

%   All main (memory-resident) temporary storage, no matter
whether it is used by an application program or CICS
internally, is above the line.

CICS 1.6.1

%   Virtually all VSAM buffers (both LSR and NSR), and all
non-VSAM LSR buffers, are above the line.

%   VSAM record management code is above the line.

CICS 1.7

%   Trace table, dynamic transaction backout buffers, and the
CICS message table module are above the line.

%   RACF security tables can be above the line.

CICS 2.1

%   VSAM control blocks are above the line for DFP 2.3.

Despite all this progress, only one module in the CICS nucleus
can be above the line:  DFHMGT, the 57K message table module
mentioned above.  IBM's 18 October 1988 CICS Statement of
Direction (page 31, CICS Update, January, 1989, and page 39,
December 1988) is to have all CICS code and control blocks
above the line.

At first glance, it seems hard to understand what all the VSCR
fuss is about.  After all, for even the largest installations, moving
all application programs above the line would completely
eliminate virtual storage constraint, even without Multi-Region
Operation (MRO).  Unfortunately, the effort involved in getting
some applications above the line is not trivial.  Nevertheless, the
cost of not converting will also be significant.  Just as not
converting macro-level code to command-level will prevent you
from using CICS/ESA (CICS Version 3), it is unlikely that 24-bit
addressing will be supported beginning with some future version
of CICS.  Short of that, even if all of CICS runs above the line,
application code and data below the line will at least force you
into the overhead of MRO.

THE CASE AGAINST CONVERSATIONAL PROGRAMMING

Against that backdrop, consider the case against conversational
programming.  IBM studies, quoted in the CICS Performance
Guide, have shown that the average active terminal user spends
only one to three seconds of each minute awaiting response to
terminal input.  The rest of the time is spent interpreting the
response, possibly passing the information on to a customer,
contemplating an appropriate terminal entry, and keying it in.
That means conversational transactions spend 95% of their life
awaiting terminal input.  Put another way, at any given moment, a
conversational transaction would be expected to be active for 20
times as many users as the same pseudo-conversational
transaction.

Clearly, conversational transactions cost more in terms of virtual
storage.  Real storage is also an issue.  Prudent use of ANTICPG
values for each PCT entry can ensure asynchronous paging will
not interrupt CICS processing other tasks, but what about the
paging of modules only in the PPT and not in the PCT?  Any
requirement to page in those modules will halt the entire CICS
region.  Do that several times a second and response time is
guaranteed to suffer.

WHEN TO CONSIDER CONVERSATIONAL

So, why does conversational programming even exist?  Yes, it is
easier to code.  And maybe for low-use applications you can put
up with the added resource costs, but small, low-use applications
have a habit of growing into major applications.

Some applications require a large working set of data (eg decision
support, artificial intelligence).  We are not talking about constant
data that can be shared between all users of the transaction, but
information derived from all interactions with a given user up to a
given point in the process.  Since this information must survive
between terminal output and the next input, pseudo-conversational
gives you two alternatives:

1   Store the information in memory (eg DFHCOMMAREA,
main temporary storage).

2   Store the information on DASD (eg VSAM files, auxiliary
temporary storage).

If you choose memory as your storage medium, most of pseudo-
conversational's advantages over conversational seem to
disappear.  Assuming the application was written properly, almost
all of the virtual memory required per user would be dictated by
the size of the variable data associated with the user, which would
be the same in either case.  The overhead associated with the
increased number of simultaneous users that conversational
implies might be balanced out by the increased overhead
associated with pseudo-conversational's requirement to terminate
and initiate tasks at each user interaction.  Choosing main
temporary storage also creates the potential problem of using large
areas of memory to store data written by the task doing output to
the terminal which will never be read and deleted by the
transaction initiated by terminal input if that input never happens,
for whatever reason.

That is the operational side of the equation.  What about the
application development side?  Conversational is certainly easier
to write, and, coded correctly, it can be much easier to debug.
The only rational way to balance the application development and
operational concerns is to calculate the total system cost: ie the
cost of application development plus the operational cost over the
life of the system.  Clearly, the only time conversational costs less
is when the operational costs are not significantly more for
conversational and when application development costs are
significantly more for pseudo-conversational.

CONCLUSION

Using the total system cost as our determining factor, and
realising that small systems have a habit of getting large,
conversational only makes sense under a very small set of
circumstances:

%   Programs running above the line, where virtual storage is not
going to be an issue:  where the operating system allows it (eg
VM/XA, MVS/XA, or MVS/ESA), where CICS allows it (eg
CICS/OS/VS 1.6 and above but not CICS/VM), where the
compiler allows it (Assembler coded with 31-bit addresses,
VS COBOL II, PL/I Release 5.1 and above) and when link-
edited with AMODE(31) and RMODE(ANY).

%   Applications requiring large working sets of data.

Jon Pearkins
Certified Software Specialists Ltd (Canada) ) Jon Pearkins 1989


