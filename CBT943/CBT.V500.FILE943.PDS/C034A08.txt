 Deleting a single specific item from a TS queue
The purpose of this program is to enable the deletion of a single item from a
Temporary Storage (TS) queue.  In command level it is only possible to delete an
entire TS queue - using the DELETEQ TS QUEUE(NAME) command.  In macro level the
situation is somewhat different.  TS message sets created by the DFHTS TYPE=PUTQ
macro are identical to those created by command level.  The entire message set
can be deleted by using the DFHTS TYPE=PURGE macro.
An alternative way to create a TS queue is by using the DFHTS TYPE=PUT macro.
This causes data to be written to temporary storage as a single unit of
information.  Successive DFHTS TYPE=PUTs with the same DATAID (the queueUs name)
create a single unit multiple records queue.  Reading such a queue, using the
DFHTS TYPE=GET macro, always retrieves the current record.  In order to retrieve
another record, the current one has to be released - using DFHTS
TYPE=GET,RELEASE=YES (or by using DFHTS TYPE=RELEASE), and only after the next
DFHTS TYPE=GET will the following record be retrieved.  Individual records will
be retrieved in a FIFO order.
The following program also deletes a specific record from a single unit multiple
records queue.  The deletion is performed in a simple way: writing the whole
queue to an intermediate one without the specific item and rewriting it to its
original location - main or auxiliary storage.  The process is performed using
command- or macro-level code, according to the queueUs type - a single unit
queue is handled in macro level.
Hopefully, the comments inserted in the programUs code are sufficient for
understanding its logic.  However, some explanatory remarks should be added
regarding the method the program uses to find the intermediate queueUs name.
The name has to be a new TS queue name when the program is invoked.  In the
first step, the original TS name is reversed, a T?U is moved to its first byte,
and the name is checked to see if it already exists.  The T?U in the first byte
ensures that it will not be an internal CICS TS queue name (those beginning with
DF, **, $$, FA-FF).  If the check fails (ie the name exists as a TS queue name),
the second step begins.  The first four characters of the name are concatenated
with a word of binary zeros and a name-checking loop is performed with the
right-hand word being incremented each cycle by 1.  This process is terminated
when a new TS name is found, and ends unsuccessfully when the value of the
right-hand word equals XT00FFFFFFU - theoretically, 16 777 215 checks can be
performed.
For example, if we have a TS queue with the original name of TESTNAME, TESTNAME
becomes ?MANTSET.  If ?MANTSET already exists, a second step is performed.
?MAN + XT00000000U to ?MAN + XT00FFFFFFU is checked.  The probability of not
finding a new name almost immediately is very low and that of a complete failure
is actually zero.  Nevertheless, a special return code is set in case the
program fails to find a new name.
To ensure single threading using a TS queue in cases when more than one task
asks to delete an item from the same queue, an ENQ is performed upon that name
just before the actual deletion begins and before returning to the invoking
program, a DEQ releases it for use by another task.
A second ENQ is performed upon the intermediate name in cases when more than one
task generates the same new name.  This can only occur when the first of those
tasks finds a new name and its first WRITEQ TS QUEUE(TEMPNAME) has not yet
started (there is a READQ TS before it).  In other cases (after this first
WRITEQ TS has been performed) the subsequent task will find the new-found name
by its prior name and will generate a new one.  The same return-code is set in
those two ENQBUSY situations.
The program is a mixed code one (the global bit &DFHEIMX is defined at the
beginning), and is invoked by:
     EXEC CICS LINK PROGRAM('DELTSSIN')
               COMMAREA(DATA-AREA)
               LENGTH(12)
so an appropriate entry in the PPT has to be created.
The data area contains three fields.  The first is an eight-byte alphanumeric
field, which contains the TS queue name.  The field has to be supplied by the
invoking program.
The second is a halfword binary field which contains the number of the specific
item to be deleted.  This field should also be supplied by the invoking program.


 The third is a halfword binary field which contains the return-code.  There are
three return code values that denote a successful deletion.  In these the right-
most bit of the return-code field is set to 1.  These values are:
%    1 - the requested item has been deleted.
%    3 - the TS queue itself has been deleted - the request was to delete the
single record message set queue (created by command level or DFHTS TYPE=PUTQ
macro).
%    5 - the TS queue has been released - the request was to delete the single
item of a single unit queue (created by the DFHTS TYPE=PUT macro).
The following return code values denote an unsuccessful operation:
%    2 - the TS queue name does not exist.
%    4 - the item number is invalid - zero or negative.
%    6 - the item number is higher than the number of items in the queue.
%    8 - a NOSPACE condition occurred (another try may be successful).
%    10 - the program was unable to find a new TS queue name for the
intermediate queue.
%    12 - another task using this program has performed an ENQ upon the
requested queue name or upon the intermediate queue name.  This return code
denotes a temporary failure.  Subsequent attempt(s) will end with a decisive
answer.
%    14 - an unexpected error occurred, eg NOTAUTH, IOERROR etc.
*****    DELETING A SINGLE ITEM FROM A TS QUEUE  *****
         GBLB  &DFHEIMX
&DFHEIMX SETB  1
         COPY  DFHCSADS
         DFHTCA CICSYST=YES
TSGIDBAR EQU 10
TSMAPBAR EQU 9       BASE REG FOR A TSGID
         COPY  DFHTSMDS
TSIOABAR EQU 2       BASE REG FOR TSIO AREA
         COPY  DFHTSIOA
TSUTBAR  EQU 3       BASE REG FOR A TSUT
TSUTEAR  EQU 4       BASE REG FOR A TSUT ENTRY
DFHEISTG DSECT
TEMPNAME DS   CL8
SWTMAIN  DS   H
NUMITEM  DS   H
CURLEN   DS   H
CURITEM  DS   H
WORKAREA DS   CL4
COMPTR   EQU  6      BASE REG FOR THE COMMAREA
COMSAVE  DSECT
         USING COMSAVE,COMPTR
COMTSNAM DS   0CL8
         DS   CL7
EOFTSNAM DS   CL1    THIS BYTE IS THE START OF THE MVCIN OPERATION
COMTSNUM DS   H
COMTSANS DS   H
TSPTR    EQU  8       BASE REG FOR A TS RECORD
         USING   TSAREA,TSPTR
TSAREA   DSECT
DELTSSIN DFHEIENT CODEREG=7,DATAREG=5
         CLC  EIBCALEN,=H'0'
         BE   RET                NO COMMAREA PASSED
         L    COMPTR,DFHEICAP    ADDRESSABILITY TO COMMAREA
         CLC  COMTSNUM,=H'0'
         BE   INVITEM            THE ITEM NUMBER PASSED IS ZERO
         TM   COMTSNUM,X'80'
         BO   INVITEM            THE ITEM NUMBER PASSED IS NEGATIVE
         EXEC CICS HANDLE CONDITION    QIDERR(NOTS)
         EXEC CICS HANDLE CONDITION    NOSPACE(NOSPC)
         EXEC CICS HANDLE CONDITION    ENQBUSY(ENQBSY)
         EXEC CICS HANDLE CONDITION    ERROR(ERR)
*   THE FOLLOWING READQ IS TO FIND THE NUMBER OF ITEMS IN THE QUEUE.
*   THE FOLLOWING IGNORE CONDITIONS ARE FOR ANY LENGTH, FOR ANY
*   ITEM AND FOR A SINGLE RECORD SINGLE UNIT QUEUE: EIBRCODE = X'20'
          EXEC CICS IGNORE CONDITION    LENGERR
         EXEC CICS IGNORE CONDITION    ITEMERR
         EXEC CICS IGNORE CONDITION    INVREQ
         EXEC CICS READQ TS QUEUE(COMTSNAM) INTO(WORKAREA)           X
              NUMITEMS(NUMITEM)
         CLC  EIBRCODE(1),=X'20'
         BE   GOREL
* SETTING BACK THE ABOVE IGNORED ERROR CONDITIONS
         EXEC CICS HANDLE CONDITION   LENGERR(ERR)
         EXEC CICS HANDLE CONDITION   ITEMERR(ERR)
         EXEC CICS HANDLE CONDITION   INVREQ(ERR)
         CLC  COMTSNUM,NUMITEM
         BH   OUTRNG
         CLC  NUMITEM,=H'1'
         BE   DELTS       THE REQUEST IS TO DELETE THE SINGLE ITEM
         L    TSUTBAR,CSATSMTA  ADDRESSABILITY TO FIRST TSUT
LOOPTSUT L    TSUTEAR,TSUTAHI   ADDRESSABILITY TO FIRST TSUTE IN TSUT
LOOPENT  CLC  TSUTEID,COMTSNAM
         BE   TESTLOC
         LA   TSUTEAR,16(TSUTEAR)   ADVANCING TO NEXT TSUT ENTRY
         C    TSUTEAR,TSUTALI       LAST TSUTE IN THE CURRENT TSUT
         BH   OUTLPENT
         B    LOOPENT
OUTLPENT L    R9,TSUTFC
         LR   TSUTBAR,R9            ADVANCING TO NEXT TSUT
         B    LOOPTSUT
* THE TSUTETC FIELD IN THE TSUT ENTRY DESIGNATES THE LOCATION OF THE
* QUEUE: X'20' OR X'A0' - MAIN, X'40' OR X'C0' AUXILIARY
TESTLOC  L    TSGIDBAR,TSUTEPTR     ADDRESSABILITY TO TSGID TABLE
         TM   TSUTETC,B'00100000'
         BNO  GOONFIND
         MVC  SWTMAIN,=H'1'     SWTMAIN INDICATES MAIN/AUX (1 - MAIN)
GOONFIND XR   R9,R9
         MVCIN TEMPNAME,EOFTSNAM
         MVC   TEMPNAME(1),=C'?'
LOOPFIND EXEC CICS READQ TS QUEUE(TEMPNAME) INTO(WORKAREA) NOHANDLE
         CLC  EIBRCODE(1),=X'02'   QIDERR - NO SUCH TS QUEUE NAME
         BE   GOONCHK              A NEW TS NAME HAS BEEN FOUND
         A    R9,=F'1'
         C    R9,=X'00FFFFFF'
         BE   NONAME               AFTER 16,777,215 TRIES WE GIVE UP
         ST   R9,TEMPNAME+4
         B    LOOPFIND
*  TYPE CODE OF THE QUEUE : X'80' - A DFHTS PUT QUEUE
GOONCHK  CLC  TSGIDTC,=X'80'
         BNE  GOONDEL       BRANCHING TO THE MESSAGE SET PART
         XR   R9,R9
         LH   R9,TSGIDTR
         SH   R9,TSGIDCR
         AH   R9,=H'1'
*  R9 CONTAINS THE ACTIVE NUMBER RECORDS IN THE SINGLE UNIT QUEUE
         CH   R9,COMTSNUM
         BL   OUTRNG
         CH   R9,=H'1'
         BE   GOREL
         STH  R9,NUMITEM
*******  BEGINNING OF MULTIPLE RECORDS SINGLE UNIT PROCESS *******
         EXEC CICS ENQ RESOURCE(COMTSNAM) LENGTH(8) NOSUSPEND
         EXEC CICS ENQ RESOURCE(TEMPNAME) LENGTH(8) NOSUSPEND
* READING EACH ITEM OF THE PUT QUEUE,RELEASING IT AND WRITING IT
* TO THE INTERMEDIATE QUEUE. THE REQUESTED ITEM IS NOT WRITTEN
         XR    R3,R3
         MVC   CURITEM,=H'1'
         LH    R3,CURITEM
LOOPPUT1 MVC   TCATSDI,COMTSNAM
         DFHTS TYPE=GET,RELEASE=YES,ERROR=ERR
          CLC   CURITEM,COMTSNUM
         BE    SKIPPUT1
         L     TSIOABAR,TCATSDA
         SH    TSIOABAR,=H'8'    ADDRESSABILITY TO START OF TSIOA AREA
         MVC   TCATSDI,TEMPNAME
         DFHTS TYPE=PUT,TSDADDR=TSIOAVRL,NOSPACE=NOSPC,ERROR=ERR
SKIPPUT1 LA    R3,1(R3)
         STH   R3,CURITEM
         BCT   R9,LOOPPUT1
* SINGLE UNIT QUEUE IS WRITTEN BACK RELEASING THE TEMPNAME RECORDS
         XR    R9,R9
         LH    R9,NUMITEM
         SH    R9,=H'1'
LOOPPUT2 MVC   TCATSDI,TEMPNAME
         DFHTS TYPE=GET,RELEASE=YES,ERROR=ERR
         L     TSIOABAR,TCATSDA
         SH    TSIOABAR,=H'8'
         MVC   TCATSDI,COMTSNAM
         CLC   SWTMAIN,=H'1'
         BE    WRMAINPU      WRITING TO MAIN STORAGE
         DFHTS TYPE=PUT,TSDADDR=TSIOAVRL,NOSPACE=NOSPC,ERROR=ERR
         B     GOONWRPU
WRMAINPU DFHTS TYPE=PUT,TSDADDR=TSIOAVRL,NOSPACE=NOSPC,ERROR=ERR,    X
               STORFAC=MAIN
GOONWRPU BCT   R9,LOOPPUT2
* THE QUEUE NAMES ARE DEQUEUED. RETURN BACK WITH POSITIVE RET-CODE
         EXEC CICS DEQ RESOURCE(COMTSNAM) LENGTH(8)
         EXEC CICS DEQ RESOURCE(TEMPNAME) LENGTH(8)
         MVC  COMTSANS,=H'1'
         B    RET
**********  END OF MULTIPLE RECORDS SINGLE UNIT PROCESS   **********
*********       BEGINNING OF MESSAGE SET PROCESS            ********
******* (CREATED BY COMMAND LEVEL OR DFHTS PUTQ MACRO LEVEL)  ******
GOONDEL  EXEC CICS ENQ RESOURCE(COMTSNAM) LENGTH(8) NOSUSPEND
         EXEC CICS ENQ RESOURCE(TEMPNAME) LENGTH(8) NOSUSPEND
         XR   R9,R9
         XR   R3,R3
         LH   R9,NUMITEM
         MVC  CURITEM,=H'1'
         LH   R3,CURITEM
* READING EACH ITEM OF THE TS QUEUE AND WRITING IT TO THE
* INTERMEDIATE QUEUE. THE REQUESTED ITEM IS SKIPPED OVER
LOOPSET1 CLC  CURITEM,COMTSNUM    SKIPPING OVER THE ITEM TO DEL
         BE   SKIPSET1
         EXEC CICS READQ TS QUEUE(COMTSNAM) SET(TSPTR)               X
              LENGTH(CURLEN) ITEM(CURITEM)
         EXEC CICS WRITEQ TS QUEUE(TEMPNAME) FROM(TSAREA)            X
              LENGTH(CURLEN) NOSUSPEND
SKIPSET1 LA   R3,1(R3)
         STH  R3,CURITEM
         BCT  R9,LOOPSET1
* THE ORIGINAL QUEUE IS DELETED
         EXEC CICS DELETEQ TS QUEUE(COMTSNAM)
* THE ORIGINAL QUEUE IS WRITTEN AGAIN
         XR   R9,R9
         XR   R3,R3
         LH   R9,NUMITEM
         SH   R9,=H'1'
         MVC  CURITEM,=H'1'
         LH   R3,CURITEM
LOOPSET2 EXEC CICS READQ TS QUEUE(TEMPNAME) SET(TSPTR)               X
              LENGTH(CURLEN) ITEM(CURITEM)
         CLC  SWTMAIN,=H'1'
         BE   WRMAINSE      WRITING TO MAIN STORAGE
         EXEC CICS WRITEQ TS QUEUE(COMTSNAM) FROM(TSAREA)            X
              LENGTH(CURLEN) NOSUSPEND
          B    GOONWRSE
WRMAINSE EXEC CICS WRITEQ TS QUEUE(COMTSNAM) FROM(TSAREA)            X
              LENGTH(CURLEN) MAIN NOSUSPEND
GOONWRSE LA   R3,1(R3)
         STH  R3,CURITEM
         BCT  R9,LOOPSET2
* INTERMEDIATE TS QUEUE IS DELETED AND THE TWO NAMES ARE DEQUEUED.
* RETURN BACK WITH A POSITIVE RET-CODE
         EXEC CICS DELETEQ TS QUEUE(TEMPNAME)
         EXEC CICS DEQ RESOURCE(COMTSNAM) LENGTH(8)
         EXEC CICS DEQ RESOURCE(TEMPNAME) LENGTH(8)
         MVC  COMTSANS,=H'1'
         B    RET
**********  END OF MESSAGE SET PROCESS  **********
*   THE TS QUEUE REQUESTED DOES NOT EXIST
NOTS     MVC  COMTSANS,=H'2'
         B    RET
*   THE ITEM NUMBER SUPPLIED IS INVALID - ZERO OR NEGATIVE
INVITEM  MVC  COMTSANS,=H'4'
         B    RET
*  THE NUMBER REQUESTED IS HIGHER THAN THE NUMBER OF ITEMS IN THE
*  QUEUE
OUTRNG   MVC  COMTSANS,=H'6'
         B    RET
*  A NOSPACE CONDITION OCCURRED
NOSPC    MVC  COMTSANS,=H'8'
         B    RET
*  AFTER 16,777,215 UNSUCCESSFUL TRIES TO FIND A NEW TS NAME
NONAME   MVC  COMTSANS,=H'10'
         B    RET
*  A PREVIOUS  ENQ  HAS BEEN SET UPON ONE OF THE TS NAMES
ENQBSY   MVC  COMTSANS,=H'12'
         B    RET
*  AN UNEXPECTED ERROR: E.G - NOTAUTH,IOERR
ERR      MVC  COMTSANS,=H'14'
         B    RET
* DELETING THE QUEUE ITSELF - IT CONTAINS A SINGLE ITEM
DELTS    EXEC CICS DELETEQ TS QUEUE(COMTSNAM)
         MVC  COMTSANS,=H'3'
         B    RET
* RELEASING THE SINGLE UNIT QUEUE - IT CONTAINS A SINGLE ITEM
GOREL    CLC   COMTSNUM,=H'1'
         BNE   OUTRNG
         MVC   TCATSDI,COMTSNAM
         DFHTS TYPE=RELEASE
         MVC   COMTSANS,=H'5'
         B     RET
RET      EXEC CICS RETURN
         END  DELTSSIN


Safran Menachem
Systems Programmer (Israel)   ) Xephon 1988













