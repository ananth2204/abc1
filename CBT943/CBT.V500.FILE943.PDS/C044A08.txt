Enquiring on programs in DFHRPL

The CICS Relocatable Program Library (RPL) is one of the most
volatile components of CICS.  It can easily become an almost
unmanageable repository of application programs, CICS and
packaged software modules, load modules for CICS tables,
virtually everything but the kitchen sink.  It is not unusual to have
16 or more datasets concatenated in the RPL and, as the number
of libraries that are concatenated increases, locating specific
programs in the RPL often becomes a game of roulette.  Yet the
need exists for both the systems programmers and the application
developers to be able to locate the specific copy of a program or
table that CICS currently has loaded, and to determine specific
information about it.

Managing the RPL can be difficult for several reasons.  First, the
programs it contains are often controlled by a number of
individuals or departments and, as the RPL is usually configured
as a number of separate libraries concatenated together, these
libraries can be accessed by multiple users making it extremely
difficult to manage and control.  How does a programmer know
that the correct version of a program is the one that CICS has
loaded?  What about other program attributes: language, size,
addressing mode?  If incorrect, they can cause the program to
behave in an unpredictable way, perhaps even causing a CICS
failure.  Yet application programmers often do not have access to
CEMT to verify the program definition, and CEMT does not
reveal much about the programs in the PPT anyway.  What about
non-PPT modules that are fetched from the RPL - CICS tables for
example?  Is the right version being loaded, or is an 'old' one
accidentally still in use?

In my experience most mysterious bugs ("It worked OK
yesterday, and I didn't change anything") prove to be caused either
by an incorrect, perhaps old, version of the program accidentally
being used, or by the program being defined to CICS incorrectly
or compiled improperly.  How can the programmer quickly
ascertain which of these is the case?  The program described in
this article will display quite a bit about a program's definition to
CICS as well as its location in the RPL, permitting many
problems that formerly required a lot of investigation to be solved
quickly, often by the application programmer.  And since this
program has only enquiry capabilities, it is safe to give out to
those outside the systems staff, unlike CEMT.

As written, it will only execute under MVS, although I would
think that it could be modified to run under VSE.  It interrogates
the PPT entries, the MVS control blocks that represent the RPL,
and if necessary the PDS directories of the libraries that make up
the RPL in order to obtain the following information :

1	A list of all the libraries concatenated in the RPL.

2	The specified library in the RPL that a program was loaded
from.

3	The type of BLDL performed, ie CICS or MVS.

4	The length of the program in bytes.

5	The AMODE of the program, ie 24-bit or 31-bit.

6	Whether the program was already loaded or if a BLDL was
needed to obtain the information.

If the program is in the PPT, the following is reported :

1	The language of the program.

2	The program 'type' - ie program, mapset, or partition set.

3	The program's load address in storage (if available).

4	Whether the program is enabled or disabled.

5	Whether the program is RES(YES) or RES(NO).

6	If a COBOL program, its Working Storage size.

Below are some sample displays, and how the information
returned can be useful in problem determination.  First, the most
basic function of this program is the LIST function.  Entering
CRPL LIST will return the screen shown in Figure 1.

Especially for those shops with several CICS systems, this facility
is great for immediately determining which CICS and other
libraries are included in the RPL of a particular system, which
DASD volumes they reside on, and the order in which they are
concatenated.  Up to 16 datasets can be displayed.  This list
function alone is valuable because a common problem is that
when RPL library concatenations are altered, perhaps when a new
CICS system is created, and if there are multiple copies of
programs across the RPL libraries, different ones other than the
most recent (or most correct) version can be loaded.

The LOCATE function of this program can specifically address
this by identifying which library in the RPL a specific resource
resides in. I use the term 'resource' because this could be a
program, a mapset, a CICS table or nucleus module, a partition
set etc.  If you just enter the transaction-id CRPL, you will be
prompted to enter the name of the resource you want to inquire
on.  If you leave it blank the LIST menu will be returned.  Or you
can enter a single line request, for example CRPL
ID=PAY1PGM, will receive the display shown in Figure 2.

This screen provides a wealth of program-related information.
First, the specific library in the RPL that the program was loaded
from is specified.  That library is also highlighted in the RPL list,
to indicate its relative position in the concatenation order.  Since a
programmer should know where the program was intended to be
loaded from, if a program is failing, CRPL can be used to ensure
that the program being executed was loaded from the proper
library; if it was loaded from an unintended library that was higher
in the RPL concatenation, the problem is most likely solved!

Perhaps the program name isn't known.  For example the help
desk receives a call from a user saying "Transaction ABCD is
giving me an error".  This program will accept as input CRPL
TRAN=ABCD for a LOCATE request.  In this case, the
information received would be on the program associated with
that transaction-id in the PCT, and would be laid out just as if the
request had been issued against the program.  This function has
limited use, as it will only address the first program driven by that
transaction, but it can prove valuable on occasions as CEMT does
not display the program associated with a specific transaction-id.

Note the information area at the bottom.  First, the resource is
identified as a program.  If it were a mapset, for example, this
line would say MAPSET = PAY1PGM.  If it were an object
module, such as an FCT load module, it would say LOAD
MODULE NAME = DFHFCT01.  It also identifies the specific
library in which the program was found.  Since the list in the
upper half of the screen only handles a maximum of 16 datasets,
this library indicator will display the actual concatenation index in
the case where there are more that 16 datasets in the RPL, up to
the limit of 255.

The next line in the information area shows the program's load
address, either in the DSA or in the Resident Program Area.  This
will be zero if the program has not yet been used in the current run
of CICS.  In the example, this is a non-resident program, as can
be seen by the fact that it is loaded 8 bytes beyond a 2K or 4K
boundary.  The length of the program in bytes is shown as well.
The author of a given program should know its approximate size;
a glance at this can help to determine if the wrong program is
loaded.  Also, knowing the program's load address will permit that
area of storage to be examined, perhaps with a CICS debugging
program.  This can help identify the version of the program, as
most shops have a standard of including date/time stamps at the
beginning.

The third information line displays the program's language and
addressing mode.  This will be the language specified for that
program in the PPT, either PL/I, COBOL, COBOL II, RPG II, or
Assembler.  When using this program, the programmer can verify
that the language defined in the PPT is correct; defining the wrong
language in the PPT is not an uncommon error.  Whether the
program is COBOL or COBOL II is noted: CEMT does not
differentiate between them.  Also, CICS now supports 31-bit
programs for Assembler, COBOL II, and PL/I.  CICS permits 31-
bit programs to be loaded above-the-line, so being able to identify
the addressing mode is important.  Also, programs can behave in
mysterious ways if they are not linked (and written) with the
correct addressing mode.  Interestingly, support of 31-bit
programs introduced a change to the PPT entries that required
special handling by this program.  I will mention these differences
shortly.

The next line displays the program's current status to CICS, and,
if it's a VS COBOL program, the size of the Working Storage
defined.  The status of the program, either enabled or disabled,
combined with the other information on the screen, can aid greatly
in diagnosing APCT abends, which are caused by one of several
things: the program is not in the RPL, it is not in the PPT, or it is
disabled.  This one screen will allow this type of abend to be
diagnosed at a glance!  And as with the program size, knowing
the length of a COBOL program's Working Storage can aid in
authenticating it, as well as helping to identify common problems
that occur with the use of Working Storage.  For example, CICS
limits the size of Working Storage to 64K.  Since CICS maintains
this length in the PPT in a half-word field, exceeding this limit
will often cause a storage violation, because anything over 64K
will be discarded.  CICS does not validate the Working Storage
size, so if a program is compiled with 68K of Working Storage,
the PPT will indicate only 4K is needed (68K minus 64K leaves
4K).  Since no error is produced, this type of problem slips
through easily.  And, not only will this program aid in spotting
this type of problem, but it will validate the Working Storage size
against the size of the Task Global Table; the 64K limit is actually
for the the combined length of Working Storage and the TGT, so
if the TGT is greater than the sum of the two, the program has a
problem, and this will be noted with an error message displayed
on the bottom of the screen.  Note that this again only applies to
VS COBOL programs; CICS permits COBOL II programs to have
up to 128 megabytes of working storage, which one would hope
would be adequate for all but the most voracious programmers.

The last line shows whether or not the program is defined as
resident.  This may be of interest if you want to NEWCOPY a
program; since a NEWCOPY'd program loses its residency status,
knowing this (again, CEMT does not report a program's residency
status) will remind you that you may want to be cautious about
this.

For this same reason, note that a program that was defined in the
PPT as RES=YES will appear here as RES=NO after a
NEWCOPY is performed.  Also noted here is the fact that a CICS
BLDL was performed.  With CICS 1.7, non-resident programs
are not loaded until the first reference.  Thus, for a program that
had not yet been used, some action is necessary to obtain the
program information.  Rather than actually load the program, I
chose to simply perform a DFHPC TYPE=BLDL to obtain the
information I required.  Had the program already been loaded,
this area of the line would have been blank.  Seeing this message
indicates that the program requested has never been used during
that run of CICS.

CICS application programs and mapsets are not the only resources
that can be inquired upon.  There can also be a need to verify
which version of a CICS table is currently in use; in a shop with
many CICS systems, this is a must.  And the same is true of CICS
nucleus modules, or OS-loaded user-replaceable modules like
DFHXJCC and DFHXJCO.  These are not defined in the PPT, but
this program can still provide most of the information discussed
by performing an OS BLDL to acquire the information.  For
example, CRPL ID=DFHTCTX1 would return the display shown
in Figure 3.

Here again, the RPL list indicates the specific library that the table
(or load module), in this case DFHTCTX1, was loaded from.
Since it is just as possible to load an incorrect CICS table as it is
an application program or mapset, this facility is invaluable to the
systems programmer.  Note that many of the fields that are
applicable to a CICS program are marked 'N/A' for non-PPT
resources.  But the most important information is returned: the
loaded-from library, the length and the addressing mode.  This
feature has proved useful for CICS nucleus modules as well as
tables.

For example, when PTF maintenance is applied, this is often
tested by inserting staging libraries in the RPL, these libraries
holding the upgraded load modules.  Knowing the order of the
libraries and being able to check specific programs can avoid
modified programs slipping through without being properly tested.

Of course, this feature of the program requires that an MVS
BLDL be issued to obtain the information.  This OS BLDL
support can be removed from the program if you have an aversion
to using OS macros in CICS.  I will explain how later.

Earlier I stated that CICS supports 31-bit application programs,
and that this support introduced a change to the PPT entries that
required special handling.  Figure 4 shows an example of a
LOCATE on such a program.

Since the program is in the PPT, all the information is obtainable,
but note that an OS BLDL was necessary, rather that a CICS
BLDL.  This is because CICS does not retain the DASD address
of 31-bit programs in the PPT, so it is necessary to issue an OS
BLDL for inquiry requests on 31-bit CICS programs.  Also note
that the 31-bit load address is displayed, as well as the fact that
the program is AMODE=31.  CEMT does not display the
AMODE of a program or differentiate between COBOL and
COBOL II, yet knowing this information can be valuable when
diagnosing 'mysterious' program problems.  And although the
residency status is displayed, keep in mind that 31-bit programs,
being OS-loaded rather that CICS-loaded, are always implicitly
resident.

A word of caution: since the DASD address in the PPT (or from
the BLDL) is used to identify the source library for a given load
module, some of the methods or OEM packages used to improve
program load performance could interfere with this program
functioning correctly.  One such method that comes to mind it the
one documented in the Virtual Storage Tuning Cookbook, which
describes a method for using a temporary VIO dataset to speed
program load time.  This scheme involves pre-loading all the RPL
programs into a VIO dataset prior to execution, and since CICS
then performs program loads out of this VIO dataset, the result is
that using the LOCATE function will show all programs being
loaded out of the single VIO dataset, although the other program
information returned will still be accurate.

To install this program the following definitions are needed :

	CEDA DEFINE PROGRAM(CRPLPGM)
	            GROUP(UTILITY)
	            LANGUAGE(ASSEMBLER)

	CEDA DEFINE TRANSACTION(CRPL)
	            GROUP(UTILITY)
	            PROFILE(DFHCICST)
	            PROGRAM(CRPLPGM)
	            TWASIZE(90)

This program is written for CICS/OS 1.7, and should work with
CICS/MVS 2.1.  It will not run as shown with CICS 1.6.1
without modification.  Also, I stated that you have the option of
disabling the OS BLDL support if you choose.  At the beginning
of the program is a global, &BLDL, which you can set to '0' to
remove OS BLDL support, or leave at '1' to keep it.  This part of
the program can likely be altered to allow the program to run with
CICS/VSE, but the program as shown will only work with MVS.
MVS users may want to remove this feature to avoid issuing OS
macros in CICS; however a BLDL against the RPL requires no
additional OSCORE and does not cause excessive wait times.  I
think the benefits outweigh the costs.  This program can and does
aid in understanding and managing the RPL better, both for
systems programmers and application developers, and has proved
invaluable for quickly determining the status of programs within
CICS.

We hope this article has been of interest.  We shall be publishing
the source code for the program described in the above article in
the next two issues of CICS Update.


Christopher Frank
Lead Systems Programmer
Western Life Insurance (USA)	) Xephon 1989

