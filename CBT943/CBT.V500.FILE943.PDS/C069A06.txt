Creating a SAVE procedure from DFHCOMMAREA

Creating the DFHCOMMAREA from a BMS map in CICS
Update Issue 59 (October 1990), explained how an EXEC and
XEDIT macro (BMS2DCA) can be used to generate a 'shadow
screen' for terminal input storage.  However, once the shadow
screen is created, manually coding the COBOL statements to
move data from the symbolic map to the corresponding shadow
screen variables is a tedious and error-prone clerical process.
The EXEC and XEDIT macro described here, DCA2SAV, take
the previously generated DFHCOMMAREA as input to
generate a SAVE procedure that handles this data transfer.

Figure 1 shows the sequence of EXECs and XEDIT macros
which create source code to handle 3270 terminal input.  This
figure includes DMS2BMS from Creating BMS maps from
DMS/CMS, in Issue 43 (June 1989).  The figure shows how
DMS2BMS, BMS2DCA, and DCA2SAV are related to each
other and to the resulting command-level COBOL program.
Taken together, the EXECs and XEDIT macros are a useful
terminal input package that can save up to a day of coding.

DCA2SAV is written in REXX.  The structure of the macro is
shown in Figure 2.  DCA2SAV processes the shadow screen,
field by field, until COBOL statements to save input data have
been created for each variable.  Each field generates two
sentences.  The first sentence stores user input, the second
sentence handles the ERASE EOF key.  The SAVE procedure
also clears the symbolic map and flags the input for edit.


LIMITATIONS

1      The SAVE procedure is named 1000-SAVE-SCREEN-
      FIELDS.  The output from DCA2SAV is designed to be
      included in the program without additional programmer
      coding.  It should be placed in the source code after the
      RECEIVE MAP and before  individual field edit tests.  If
      the paragraph is not to be numbered 1000, the DCA2SAV
      XEDIT macro should be modified accordingly.

2      DCA2SAV assumes that the DFHCOMMAREA is the
      output from BMS2DCA.  The DCA2SAV EXEC and
      XEDIT macro depend on BMS2DCA positioning and
      naming conventions.  The XEDIT macro looks for the
      group variable 'CA-FLDS' (in columns 18 to 25) followed
      by at least one field with a level 10 (in columns 16 and
      17).  An important naming convention is the 'composite'
      variable name, which allows the SAVE procedure to
      access fields in the symbolic map.

The composite variable name produced for each shadow screen
field by BMS2DCA has three components:

1      DFHMDF macro (required) - may be up to seven
      characters (an additional byte may be used for the first '-').
      The DFHMDF label is essential because it is used by BMS
      to create unique symbolic map variable names.

2      COBOL field name (not required) - 20 characters
      maximum.  The COBOL name should be used to identify a
      field in a VSAM file record.  While the COBOL name is
      recommended, it is not mandatory.  The XEDIT macro can
      process only the DFHMDF label.  The COBOL name may
      not end with '-N'.

3      Numeric suffix (optional) - two characters.  The suffix '-
      N' is used to bypass the processing of a numeric
      REDEFINE.  This is done because all variables are
      originally stored in the shadow screen as alphanumeric characters.

Thus, the DFHCOMMAREA field name cross-references the
map and the file.  When the DFHMDF macro name is the row
and column of the field's attribute byte (automatically
generated by DMS2BMS), the shadow screen variable
associates a specific screen location with a particular field in a
file.

DCA2SAV EXEC

/**********************************************************************/
/* DCA2SAV EXEC                                                       */
/* TO INVOKE THE DCA2SAV XEDIT MACRO FROM CMS OR FILELIST             */
/* PURPOSE: TO DETERMINE THAT THE FILE IS NAMED PROPERLY AND THEN SET */
/*          UP THE XEDIT MACRO FOR ACTUAL PROCESSING.                 */
/* INPUT:   FILENAME IS THE NAME OF THE PROGRAM.                      */
/*          FILETYPE MUST BE "COMMAREA".                              */
/*          (FILELIST SUPPLIES FILENAME, FILETYPE, AND FILEMODE.)     */
/**********************************************************************/
    ADDRESS COMMAND
    ARG FL_NAM FL_TYP FL_MOD
    IF FL_NAM = '' THEN
        DO
        SAY'DCA2SAV --> MUST BE FOLLOWED BY THE FILENAME OF COMMAREA'
        SAY'DCA2SAV -->        (FILETYPE AND FILEMODE ARE OPTIONAL)'
        SIGNAL ERROR_EXIT
        END
    IF FL_TYP = '' THEN
        FL_TYP = 'COMMAREA'
    ELSE
        DO
        IF FL_TYP = 'COMMAREA' THEN NOP
        ELSE
            DO
            SAY'DCA2SAV --> FILETYPE MUST BE - COMMAREA'
            SIGNAL ERROR_EXIT
            END
        END
    IF FL_MOD = '' THEN
        FL_MOD = A
    'STATEW' FL_NAM FL_TYP FL_MOD
    IF RC = 0 THEN NOP
    ELSE
        DO
        SAY'DCA2SAV --> FILE NOT FOUND - CHECK FILENAME'
        SIGNAL ERROR_EXIT
        END
    QUEUE MACRO DCA2SAV
    QUEUE QQUIT
    XEDIT FL_NAM FL_TYP FL_MOD
    EXIT
ERROR_EXIT:
    SAY'DCA2SAV --> CANCELLING ......'


DCA2SAV XEDIT

/**********************************************************************/
/* DCA2SAV XEDIT                                                      */
/* MACRO TO CREATE THE SAVE PROCEDURE FOR VARIABLES IN DFHCOMMAREA.   */
/* PURPOSE: GENERATE COBOL CODE TO LOAD THE SHADOW SCREEN VARIABLES   */
/*          FROM THE SYMBOLIC MAP AND CLEAR EACH SYMBOLIC MAP FIELD.  */
/* INPUT:   DFHCOMMAREA WITH SCREEN FIELDS DEFINED AS COMPOSITE OF    */
/*          BMS MACRO LABEL + COBOL FIELD NAME (OUTPUT FROM BMS2DCA). */
/* OUTPUT:  SAVE PROCEDURE (FN=FN OF COMMAREA; FT=SAVEPROC)           */
/**********************************************************************/
'PRESERVE'
'SET WRAP OFF'
'SET MSGMODE OFF'
'EXTRACT /LINE/'; CURR_LN_NUM = LINE.1
'EXTRACT /FN/FM/'; SV_FNAM = FNAME.1; SV_FMOD = FMODE.1
SV_FTYP = "SAVEPROC"
'LOCATE :1'
/**********************************************************************/
/*  ENSURE THAT AT LEAST ONE LINE HAS A FIELD TO PROCESS.             */
/**********************************************************************/
'SET ZONE 18 25'
'LOCATE /CA-FLDS./'
IF RC > 0
THEN  /*****( COULD NOT FIND THE BEGINNING OF SCREEN FIELDS )*****/
    DO
    SAY 'DCA2SAV: "CA-FLDS." NOT FOUND IN COLUMNS 18 THROUGH 25'
    SAY 'DCA2SAV: SHADOW SCREEN IS PRECEDED BY "05 CA-FLDS."'
    SIGNAL ERROR_EXIT
    END
'SET ZONE 16 17'
'LOCATE /10/'
IF RC = 0 THEN
    'UP'
ELSE  /*****( COULD NOT FIND A FIELD TO PROCESS )*****/
    DO
    SAY 'DCA2SAV: NO APPLICABLE FIELDS FOUND IN DFHCOMMAREA'
    SAY 'DCA2SAV: SHADOW SCREEN FIELDS HAVE A 10 IN COLUMN 16-17'
    SIGNAL ERROR_EXIT
    END
/*****> DELETE AN EXISTING FILE WITH AN IDENTICAL NAME <*****/
ADDRESS COMMAND 'ERASE' SV_FNAM SV_FTYP SV_FMOD
WRT_LN = "EXECIO 1 DISKW" SV_FNAM SV_FTYP SV_FMOD "(STRING "
/**********************************************************************/
/* CREATE COBOL CODE TO TRANSFER EACH INDIVIDUAL ALPHANUMERIC FIELD.  */
/**********************************************************************/
ADDRESS 'XEDIT'
WRT_LN'       1000-SAVE-SCREEN-FIELDS.'
DO FOREVER
    /*****> GO TO THE NEXT SHADOW SCREEN FIELD <*****/
    'LOCATE /10/'
    IF RC > 0 THEN
        LEAVE
    /*****> STOP PROCESSING IF THIS LINE IS A STATUS SWITCH <*****/
    'EXTRACT /CURLINE/'
    IF POS('STATUS-SW',CURLINE.3) > 0 THEN
        LEAVE
    CALL 100_GET_BMS_LABEL
    IF COB_VAR_TYPE = 'REDEF'
    THEN  /*****( SAVE PROCEDURE ALREADY GENERATED )*****/
        ITERATE
    CALL 200_MAKE_COBOL_SAVE_PROC
END  /*****( OF LOOP TO PROCESS SHADOW SCREEN FIELDS )*****/
ERROR_EXIT:  /*****( BRANCHED HERE IF ERROR DETECTED )*****/
'LOCATE :'CURR_LN_NUM
'RESTORE'
EXIT
/*===================================================================*/
/*                    S U B R O U T I N E S                          */
/*===================================================================*/
100_GET_BMS_LABEL:
    COB_VAR_NAM = WORD(CURLINE.3,2)
    /*****************************************************************/
    /* BYPASS OUTPUT IF THIS LINE IS A NUMERIC REDEFINE              */
    /*****************************************************************/
    DROP COB_VAR_TYPE
    COB_VAR_SIZ = LENGTH(COB_VAR_NAM)
    IF COB_VAR_SIZ > 1 THEN
        DO
        COB_SUFFIX  = SUBSTR(COB_VAR_NAM,COB_VAR_SIZ - 1)
        IF COB_SUFFIX  = '-N' & POS('REDEFINES',CURLINE.3) > 0
        THEN  /*****( VARIABLE IS NUMERIC REDEFINE )*****/
            DO
            COB_VAR_TYPE = 'REDEF'
            RETURN
            END
        ELSE  /*****( THIS IS PROBABLY A NEW VARIABLE )*****/
            DO
            IF COB_SUFFIX  = '-N' && POS('REDEFINES',CURLINE.3) > 0
            THEN  /*****( SOMETHING IS WRONG WITH FORMAT )*****/
                DO
                SAY 'DCA2SAV: PROBLEM WITH VARIABLE 'COB_VAR_NAM
                SAY 'DCA2SAV: ONLY NUMERIC REDEFINES ALLOWED'
                SIGNAL ERROR_EXIT
                END
            END
        END
    /*****************************************************************/
    /* OBTAIN BMS MACRO LABEL -- CHARACTERS BEFORE FIRST DASH        */
    /*****************************************************************/
    FIRST_DASH  = POS('-',COB_VAR_NAM)
    IF FIRST_DASH = 0
    THEN  /*****( BMS LABEL IS USED AS FULL NAME )*****/
        BMS_LABL = COB_VAR_NAM
    ELSE  /*****( VARIABLE IS A COMPOSITE NAME )*****/
        BMS_LABL = SUBSTR(COB_VAR_NAM,1,FIRST_DASH - 1)
        IF LENGTH(BMS_LABL) > 7 THEN
            DO
            SAY 'DCA2SAV: BMS LABEL 'BMS_LABL' IS TOO LARGE'
            SAY 'DCA2SAV: MAXIMUM SIZE IS 7 CHARACTERS'
            SIGNAL ERROR_EXIT
            END
        END
    RETURN
/*===================================================================*/
200_MAKE_COBOL_SAVE_PROC:
    /*****> CODE TO SHOW FULL DFHCOMMAREA VARIABLE AS COMMENT <*****/
    WRT_LN'      *P   ***********************************'
    WRT_LN'      *P   * SAVE: 'COB_VAR_NAM
    WRT_LN'      *P   ***********************************'
    /*****> CODE TO SAVE THE FIELD IF USER ACTUALLY INPUT DATA <*****/
    WRT_LN'           IF 'BMS_LABL'L > ZERO'
    WRT_LN'              MOVE 'BMS_LABL'I TO 'COB_VAR_NAM
    WRT_LN'              MOVE LOW-VALUES TO 'BMS_LABL'I'
    WRT_LN'              IF 'BMS_LABL"-STATUS-SW = 'P'"
    WRT_LN'                 MOVE SPACE TO 'BMS_LABL'-STATUS-SW.'
    /*****> CODE TO SAVE BLANKS IF ERASE EOF PRESSED <*****/
    WRT_LN'           IF 'BMS_LABL'F > LOW-VALUES'
    WRT_LN'              MOVE SPACES TO 'COB_VAR_NAM
    WRT_LN'              MOVE LOW-VALUES TO 'BMS_LABL'F'
    WRT_LN'              IF 'BMS_LABL"-STATUS-SW = 'P'"
    WRT_LN'                 MOVE SPACE TO 'BMS_LABL'-STATUS-SW.'
    RETURN


Paul Henken
Programmer/Analyst
City of Tucson (USA)                         c Paul Henken 1991

