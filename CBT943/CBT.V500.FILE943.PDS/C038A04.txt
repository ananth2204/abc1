 A second look at conversational programming
I started working in CICS Technical Support in mid-1977, and since then have
never really questioned what I was taught by IBM.  This is echoed by the many
CICS Systems Programmers I have met along the way: conversational is bad and
pseudo-conversational is good.  What follows plays DevilUs Advocate to that
generally-accepted point of view.  I would sincerely welcome any feedback.
At the time I was introduced to CICS, all CICS application coding was done by
Technical Support in that installation so, as well as learning CICS from the
Technical Support point of view, I also took IBMUs first CICS command-level
COBOL courses in the summer of 1977.  Everything I coded, both in command-level
COBOL and macro-level Assembler, was pseudo-conversational.
For the last three and a half years, I have been supporting an application
development tool called ACT/1.  ACT/1 comprises 1.5 million lines of Assembler
source in 1400 modules, runs in four environments (MVS CICS, MVS TSO, VM/CMS,
and VSE CICS), yet has only 35 modules that differ among the environments.  In
CICS, ACT/1 itself and the applications created with it run conversationally.
ACT/1 is conversational, rather than pseudo-conversational, because ACT/1Us
original developers had the same design goals for all four environments:
%    To reduce DASD I/O
%    To reduce CPU utilisation
%    To reduce real memory utilisation.
Virtual memory size was not considered an important factor, because it is always
better to perform paging (the most efficient form of DASD I/O) than normal DASD
I/O.  Because many installations pay no attention at all to tuning, especially
in the area of buffering, ACT/1 makes extensive use of its own internal buffers
to ensure it performs well, no matter how poorly the system it is running on is
tuned.
For our largest customers we recommend dedicating a CICS region to ACT/1 that is
treated differently to their pseudo-conversational CICS applications.  No
attempt should be made to keep all ACT/1 applications in real memory all of the
time.  A reasonable amount of paging is permissible and the region should be
large enough to accommodate a large number of simultaneous users.  If a user
goes for coffee when ACT/1 is in a terminal wait (read), there should be no
concern, other than the obvious security issues, if the entire transaction is
paged out.
It requires a different frame of mind.  Why should virtual memory utilisation be
more important than the CPU time and DASD I/O that must take place every time a
user responds to a pseudo-conversational transaction?  For the most part, it
appears that IBMUs CICS performance guidelines have remained relatively static
since the mid-1960s when CICS was developed P back then, in a teleprocessing
monitor, memory utilisation was far and away the most important factor.  Memory
was expensive on the IBM 360 and the operating systems that CICS ran under had
never heard of paging or virtual memory.
Today, especially with the release of CICS/MVS, virtual memory should no longer
be an important factor; the real memory necessary to support an amount of
virtual memory and provide good response time is what counts - and that depends
totally on the design of the application.
Any comments concerning the above article would be greatly appreciated.  If
there is sufficient interest, a follow-up article will be produced.

Jon Pearkins
Certified Software Specialists Ltd (Canada)  ) Xephon 1989














