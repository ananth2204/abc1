Automatic transaction start-up at CA-ACF2 log-on

At our shop, certain groups of CICS users do all, or nearly all,
of their work from a single CICS transaction. It was desired
that these users should automatically have transactions started
for them at log-on time. We are a CICS/MVS 2.1.1 shop using
CA-ACF2 for our security package.


OVERVIEW

Since we run CA-ACF2/CICS 5.2, which alters the good-
morning transaction, CSGM, to point to its own program, we
were unable to use the exit associated with the standard good-
morning program, DFHGMM.

However, CA-ACF2 provides a sign-on exit which is invoked
after the user signs on. All activated CA-ACF2 exits go to a
single exit handler, which uses a branch table to route to the
proper exit routine. Exits must be coded in macro level, so in
order to reduce migration rewrites it was decided that the actual
exit code be kept to a minimum. The sign-on exit code obtains
the terminal-id from a CA-ACF2 supplied control block, the
Exit Control Area (ECA), and executes a DFHIC INITIATE to
start the transaction (AS##) that performs the main processing.
CA-ACF2 provides a skeleton exit program, ACFAESXP, that
can be used as a model when writing the exit program.

The transaction started through the exit, AS## (program
AUTOSTRT), looks up the user-id in a table to see if a
transaction should be started for this user. Within the program
there is a separate table for each region, so it can be used in
multiple regions without having to maintain multiple programs.


INSTALLATION

Defining auto-start user-ids

As stated above, the auto-start program uses one or more tables
to start a transaction for a user logging on. A macro,
AUTOTABL, is supplied for use in defining the tables. The
macro comes in three types:

1      TYPE=APPLID - defines the start of a table for a given
      region. All following TYPE=USER entries relate to the
      previous TYPE=APPLID until another is encountered.

2      TYPE=USER - defines the user-ids that require auto-
      started transactions and those transactions themselves.
      TYPE=USER entries are associated with the CICS region
      defined in the most recent TYPE=APPLID statement.

3      TYPE=END - signifies the end of all application-id tables.

Example

An auto-start capability is desired for two production regions,
CICSPRD1 and CICSPRD2, and one development region,
CICSDEVO.

CICSPRD1 contains accounts payable and accounts receivable
applications, plus miscellaneous systems. Accounts payable
and accounts receivable users, whose user-ids all begin with
ACCT, should have transaction AP01 started for them at log-
on time. One other user, MGT04, should also have AP01 auto-
started.

CICSPRD2 is the payroll region and uses MSA for its payroll
package. All the user-ids begin with 'PAY' and should start on
transaction MSAS.

CICSDEVO contains test versions of the payroll, accounts
payable and accounts receivable systems. Occasionally the
production users log on to CICSDEVO to test changes and
should have the same auto-start assignments as production.

These requirements are defined as follows:

CICSPRD1 AUTOTABL,TYPE=APPLID
         AUTOTABL,TYPE=USER,USERID=ACCT****,TRANID=AP01
         AUTOTABL,TYPE=USER,USERID=MGT04,TRANID=AP01
*
CICSPRD2 AUTOTABL,TYPE=APPLID
         AUTOTABL,TYPE=USER,USERID=PAY*****,TRANID=MSAS
*
CICSDEVO AUTOTABL,TYPE=APPLID
         AUTOTABL,TYPE=USER,USERID=ACCT****,TRANID=AP01
         AUTOTABL,TYPE=USER,USERID=MGT04,TRANID=AP01
         AUTOTABL,TYPE=USER,USERID=PAY*****,TRANID=MSAS
*
         AUTOTABL,TYPE=END

The region name is obtained from the label on the
TYPE=APPLID statement. User-id-to-transaction-id
relationships are defined by the USERID and TRANID
parameters on the TYPE=USER form of the macro. Wild cards
are indicated by asterisks in the USERID parameter, but must
be fully right padded out to eight characters. The TYPE=END
signifies the end of all the tables.

Once the user-id-to-transaction-id relationships have been
decided upon, code the AUTOTABL macros, inserting them
into the source code for program AUTOSTRT near the end in
the section marked TABLES.

Assemble and link the programs

Once the AUTOTABL macros have been coded into the
AUTOSTRT source code, assemble and link edit it, as well as
the CA-ACF2 exit program, ACF2EXIT. The load modules
must reside in the DFHRPL concatenation.

Define table entries

Add the following to the PCT and PPT and re-assemble.

        DFHPCT TYPE=ENTRY,TRANSID=AS##,PROGRAM=AUTOSTRT

        DFHPPT TYPE=ENTRY,PROGRAM=AUTOSTRT,PGMLANG=ASSEMBLER

The CA-ACF2 exit program, ACF2EXIT, is loaded by CA-
ACF2 at region start-up, and does not require any table entries.
Note that this means that, once loaded, it cannot be replaced by
a new copy.

Enable CA-ACF2 sign-on exit

Alter the CA-ACF2 parameters to 'EXIT=ACF2EXIT' and
'SIGNON=YES', and cycle the region. Before enabling the
exit, however, you may wish to test the auto-start program by
adding an entry for your own user-id and typing transaction
AS##.


SOURCE CODE FOR ACF2EXIT

***      ACF2EXIT -- ACF2/CICS EXIT PGM BASED ON ACFAESXP.          ***
*          INVOKED EXITS: SIGNON                                      *
*        LINKAGE TO THIS PROGRAM IS AS FOLLOWS:                       *
*        ALL EXITS :                                                  *
*        R1 --->  'ACFAEECA' CONTROL BLOCK.                           *
*                 (EXIT COMMUNICATIONS CONTROL BLOCK)                 *
*        R12--->  CURRENT CICS TASK TASK CONTROL AREA (TCA).          *
***      R13--->  CICS COMMON SYSTEM AREA (CSA).                    ***
         DFHREGS ,
TCTPFBAR EQU   R15                TCT PREFIX BASE REGISTER
TCTTEAR  EQU   R5                 TCTTE BASE REGISTER
TIOABAR  EQU   R6                 TIOA BASE REGISTER
         COPY  DFHBMSCA
         COPY  DFHCSADS
         DFHTCA CICSYST=YES
         COPY  DFHTCTFX
         COPY  DFHTCTTE
         COPY  DFHTIOA
         DROP  TCTTEAR            DROP TCTTE ADDRESSABILITY     TK52420
ACF2EXIT CSECT
         B     START-ACF2EXIT(R15)     JUMP PAST EYECATCHERS    TK52868
         @ID   BR=NO                                            TK52868
START    DS    0H                                               TK52868
         USING ACFAEECA,R1             ESTABLISH ECA ADDRESSABILITY.
         STM   R0,R15,ECAEXRSA         STORE ENTRY REGISTERS.
         DROP  R1                      TERMINATE ECA ADDRESSABILITY.
         LR    R11,R15                 INITIALIZE BASE REGISTER.
         USING ACF2EXIT,R11            ESTABLISH PROGRAM ADDRESSABILITY
         LR    R4,R1                   INITIALIZE ECA BASE REGISTER.
         USING ACFAEECA,R4             ESTABLISH ECA ADDRESSABILITY.
*        GO TO SPECIALIZED ROUTINES.
DISPATCH XR    R15,R15                 ASSUME ZERO RETURN CODE.
         XR    R14,R14                 CLEAR WORK REGISTER.
         IC    R14,ECAEXCMD            PICK UP REQUEST BYTE.
         LTR   R14,R14                 TEST GOOD REQUEST.
         BNP   ABEND                   IF NOT, ABEND THIS TRANSACTION.
         BCTR  R14,0                   DECREMENT.
         SLL   R14,2                   MULTIPLY BY 4.
         C     R14,BTBLEND             TEST TOO BIG.
         BH    ABEND                   IF SO, BLOW OFF THIS TASK.
         L     R14,BTABLE(R14)         PICK UP ROUTINE ADDRESS.
         BR    R14                     ENTER REQUESTED ROUTINE.
*        FUNCTION BRANCH TABLE                                        *
*        PLEASE, LEAVE THIS TABLE INTACT, EVEN IF YOU DO NOT USE THE  *
*        STUB, CALLING ROUTINES PICKUP STUB ENTRY POINTS BASED ON     *
*        A DISPLACEMENT INTO THIS TABLE.                              *
BTABLE   DS    0F
         DC    A(RETURN)   01  INITIALIZATION ROUTINE
         DC    A(RETURN)   02  OLD LID RECEIVED EXIT.           TS79340
         DC    A(RETURN)   03  MESSAGE EXIT ROUTINE
         DC    A(RETURN)   04  UNSUPPORTED DEVICE EXIT (PASSWORD REVAL)
         DC    A(RETURN)   05  UNSUPPORTED DEVICE EXIT (MESSAGES)
         DC    A(RETURN)   06  PRE-VALIDATION EXIT
         DC    A(RETURN)   07  POST-VALIDATION EXIT
         DC    A(RETURN)   08  SHUTDOWN EXIT
         DC    A(SGNNE)    09  SIGNON EXIT           <--- ADDED
         DC    A(RETURN)   0A  SIGNOFF EXIT
         DC    A(RETURN)   0B  TERMID EXIT                      TS79325
         DC    A(RETURN)   0C  SOURCE EXIT                      TS81800
         DC    A(RETURN)   0D  IDLE EXIT                        TS81182
         DC    A(RETURN)   0E  TDJOBINH EXIT                    TS79344
         DC    A(RETURN)   0F  UNUSED.                          TS79340
         DC    A(RETURN)   10  MRO INBOUND EXIT.                TS79340
         DC    A(RETURN)   11  MRO OUTBOUND EXIT.               TS79340
         DC    A(RETURN)   12  IMPLIED SIGNON EXIT.             TS72992
         DC    A(RETURN)   13  TERMINAL TIMEOUT EXIT.           TS81228
         DC    A(RETURN)   14  TERMINAL DISCONNECT EXIT.        TK52220
BTBLEND  DC    A(*-BTABLE)     END OF TABLE
*        SIGNON EXIT - ADDED TO ACFAEXSP SAMPLE PROGRAM               *
*        R2 --->  ACMCB/LID.                                          *
*        R3 --->  ADDRESS OF CURRENT TCTTE.                           *
SGNNE    DS    0H
         USING ACFAEECA,R1             ESTABLISH ECA ADDRESSABILITY.
         MVC   TCAICTI,=CL4'AS##'
         MVC   TCAICTID,ECATERM
         DFHIC  TYPE=INITIATE,TRMIDNT=YES
         B     RETURN             GET OUT OF THIS EXIT.
         DROP  R1
*        RETURN ROUTINE                                               *
RETURN   LM    R0,R15,ECAEXRSA    LOAD REGISTERS
         BR    R14                RETURN
RETURNRC LM    R0,R14,ECAEXRSA    LOAD REGISTERS 0 - 14.
         BR    R14                RETURN
*        ERROR ROUTINES                                               *
ABEND    DS    0H
         DFHPC TYPE=ABEND,ABCODE=SXPE,CANCEL=YES
*        CONSTANTS                                                    *
CR       EQU   X'0D'              CARRIAGE RETURN ATTRIBUTE
ILUM     DC    17C'X'
         DC    AL1(CR)
         DC    17C'E'
         DC    AL1(CR)
         DC    17C'O'
         DC    AL1(CR)
         DC    17C'I'
         DC    AL1(CR)
ILUMX    EQU   *
         LTORG
*     MESSAGE PARAMETER BLOCK DSECT FOR PASSWORD REVALIDATION EXIT    *
*     UNKNOWN DEVICE (PRUD).                                          *
$MSGBLK  DSECT                    MSG BLOCK ENTRY DSECT
$MSGLEN  DS    XL1                LENGTH OF MESSAGE
         DS    XL3                *** RESERVED ***
$MSGADDR DS    A                  ADDRESS OF MESSAGE BUFFER
$MSGNEXT EQU   *                  ADDRESS OF NEXT BLOCK ENTRY
         ACFAEUCP DSECT=YES       'UCP' REQUEST BLOCK
         ACFAEUCR DSECT=YES       RULE INTERPRET REQUEST BLOCK
         ACFAEECA DSECT=YES       EXIT CONTROL AREA
         ACMCB
         LIDREC
         END   ACF2EXIT


SOURCE CODE FOR AUTOSTRT

***  FUNCTION: AUTOMATICALLY START A TRANSACTION BASED ON          ***
*              THE USERID.                                           *
*       USAGE: THE TABLE USED IN STARTING TRANSACTIONS IS BUILT      *
*              USING THE 'AUTOTABL' MACRO WHICH CONTAINS THE ENTRIES *
*              FOR EACH REGION AND USERID WITHIN IT. TO USE:         *
*              1) DEFINE THE START OF THE TABLE FOR A GIVEN REGION   *
*                 USING THE 'TYPE=APPLID' MACRO FORM:                *
*                    AAAAAAAA AUTOTABL TYPE=APPLID                   *
*                 WHERE 'AAAAAAAA' IS THE REGION'S APPLID. THIS      *
*                 IS REQUIRED.                                       *
*              2) NEXT DEFINE THE USERID-TRANSID RELATIONS USING THE *
*                 'TYPE=USER' MACRO FORM:                            *
*                    AUTOTABL TYPE=USER,USERID=XXXXXXXX,TRANID=YYYY  *
*                 WHERE 'XXXXXXXX' IS THE USER'S ID AND 'YYYY' IS    *
*                 THE TRANID TO START. WILD CARDS CAN BE USED IN     *
*                 THE USERID FIELD BY PADDING THE REMAINING          *
*                 PORTION OUT TO 8 CHARS WITH '*'S. REPEAT THIS      *
*                 ENTRY FOR EACH USERID TO AUTO-START. NOTE THAT IF  *
*                 A USERID WILL MATCH MORE THAN ONE ENTRY, THE FIRST *
*                 MATCH IS USED.                                     *
*              3) REPEAT STEPS 1 & 2 FOR EACH REGION AS DESIRED. THE *
*                 THIS PROGRAM WILL ONLY AUTO-START TRANSACTIONS OUT *
*                 OF THE CURRENT REGION'S TABLE. SO, THE SAME PROGRAM*
*                 CAN BE USED FOR MULTIPLE REGIONS. WHEN THROUGH     *
*                 DEFINING REGION-USERID-TRANSID RELATIONSHIPS, CODE *
*                 A 'TYPE=END' MACRO.                                *
*                    AUTOTABL TYPE=END                               *
*                 THIS IS ONLY NEEDED AFTER THE LAST TABLE.          *
*              4) EXAMPLE:                                           *
*                    CICSTST1 AUTOTABL,TYPE=APPLID                   *
*                             AUTOTABL,USERID=USER01,TRANID=IS00     *
*                             AUTOTABL,USERID=USER02,TRANID=IS01     *
*                             AUTOTABL,USERID=USER****,TRANID=IS02   *
*                    CICSTST2 AUTOTABL,TYPE=APPLID                   *
*                             AUTOTABL,USERID=USER02,TRANID=RS00     *
*                             AUTOTABL,USERID=********,TRANID=R500   *
*                             AUTOTABL,TYPE=END                      *
*       NOTES: IT IS EXPECTED THAT THIS PROGRAM IS INVOKED           *
*              BY THE ACF2 SIGNON EXIT.                              *
*              THE TABLE FORMAT FOR EACH APPLID IS:                  *
*                +00(08) - APPLID , ON A FW BOUNDARY                 *
*                +08(04) - ADDRESS OF NEXT APPLID TABLE, OR          *
*                          A(0) FOR LAST APPLID.                     *
*                +12(??) - EACH UID/TRANID COMBINATION:              *
*                            +00(8) - USERID   <==3 REPEATED         *
*                            +08(4) - TRANID      3 AS NEEDED        *
*                          OR                                        *
***                          +00(4) - X'FF' FOR END OF ENTRIES     ***
*   MACROS   *
         MACRO
&APPLID  AUTOTABL &TYPE=,&USERID=,&TRANID=
         GBLC  &PREVAID
         GBLA  &FLAG
         AIF   ('&TYPE' NE 'APPLID').NOTAID
         AIF   ('&APPLID' EQ '').BADAID
         AIF   ('&PREVAID' NE '').NOTFRST
&PREVAID SETC  '0'
         AGO   .GENAID
.NOTFRST ANOP
         DC    4X'FF'
.GENAID  ANOP
&APPLID  DS    0F
         DC    CL8'&APPLID',A(&PREVAID)
&PREVAID SETC  '&APPLID'
&FLAG    SETA  1
         MEXIT
.NOTAID  ANOP
         AIF   ('&TYPE' NE 'USER').NOTUID
         AIF   (&FLAG NE 1).NOAID
         AIF   ('&USERID' EQ '').BADUID
         AIF   ('&TRANID' EQ '').BADTID
         DC    CL8'&USERID',CL4'&TRANID'
         MEXIT
.NOTUID  ANOP
         AIF   ('&TYPE' NE 'END').BADTYP
         DC    4X'FF'
         AIF   ('&PREVAID' EQ '').NOAIDS
APPLTABL DC    A(&PREVAID)
         MEXIT
.NOAIDS  ANOP
APPLTABL DC    A(0)
         MEXIT
.BADTYP  ANOP
         MNOTE 8,' * MISSING OR INVALID TYPE...'
         MEXIT
.BADUID  ANOP
         MNOTE 8,' * USERID REQUIRED ...'
         MEXIT
.BADAID  ANOP
         MNOTE 8,' * APPLID REQUIRED IN COLUMN 1...'
         MEXIT
.NOAID   ANOP
         MNOTE 8,' * A TYPE=APPLID MUST PRECEDE TYPE=USER...'
         MEXIT
.BADTID  ANOP
         MNOTE 8,' * TRANID REQUIRED ...'
         MEXIT
         MEND
*   DSECTS   *
$AIDTABL DSECT
$APPLID  DS   CL8
$NXTAPPL DS   A
#AIDTABL EQU  *-$AIDTABL
$UIDTABL DSECT
$USERID  DS   CL8
$TRANSID DS   CL4
#UIDTABL EQU  *-$UIDTABL
TABLPNTR EQU  4                    POINTER TO CURRENT APPLID TABLE
ENTPNTR  EQU  5                    POINTER TO ENTRY IN APPLID TABLE
WORKPNTR EQU  9
WORKLEN  EQU  10
EIBREG   EQU  11                   EIB
DYNAMST  EQU  13                   DYNAMIC STORAGE
         DFHREGS ,                 EQUATE REGISTERS
DFHEISTG DSECT ,
USERID   DS    CL8                 THIS USER'S ID
APPLID   DS    CL8                 THIS APPLID
RESP     DS    F
MSGBUFF  DS    CL80
AUTOSTRT CSECT ,
         EXEC  CICS ASSIGN                                             X
               USERID(USERID)                                          X
               APPLID(APPLID)
         L     TABLPNTR,APPLTABL    START AT FIRST APPLID TABLE
         USING $AIDTABL,TABLPNTR    -
*   MAIN RTN   *
DO1      LTR   TABLPNTR,TABLPNTR    DO WHILE (MORE APPLID TABLES)
         BE    ENDDO1
IF1      CLC   APPLID,$APPLID          IF (WE'RE IN RIGHT APPLID TBL)
         BNE   ENDIF1
         LA    ENTPNTR,#AIDTABL(TABLPNTR) POINT TO FIRST UID TABL ENTRY
         USING $UIDTABL,ENTPNTR           -
DO3      CLI   $USERID,X'FF'              DO WHILE (MORE USERIDS)
         BE    DONE                          EXIT WHEN THRU THIS TABLE
*                                            GET COMPARE LEN OF TBL UID
         LA    WORKLEN,8                     SET UID LENGTH CNTR
         LA    WORKPNTR,$USERID+7            POINT TO LAST UID CHAR
DO5      CLI   0(WORKPNTR),C'*'              DO WHILE (CHAR IS WILD)
         BNE   ENDDO5
         BCTR  WORKPNTR,R0                      NEXT CHAR BACKWARDS
         BCT   WORKLEN,DO5                      DEC REMAINING CHARS
ENDDO5   DS    0H                            ENDDO
*                                            NOW HAVE NON-WILD UID LEN
IF5      LTR   WORKLEN,WORKLEN               IF (ALL WILD CARDS)
         BE    OKMATCH                                OR
         BCTR  WORKLEN,R0                        (TABLE UID MATCHES)
         EX    WORKLEN,COMPARIT
         BNE   ENDIF5
OKMATCH  DS    0H                                START THE TRAN...
         EXEC  CICS START                                              X
               TRANSID($TRANSID)                                       X
               TERMID(EIBTRMID)                                        X
               RESP(RESP)
         OC    RESP,RESP                         MESSAGE, IF ERROR
         BNE   STARTERR                          -
         B     DONE                              AND EXIT...
ENDIF5   DS    0H                             ENDIF
         LA    ENTPNTR,#UIDTABL(ENTPNTR)      NEXT UID ENTRY
         B     DO3
ENDDO3   DS    0H                          ENDDO
ENDIF1   DS    0H                       ENDIF
         L     TABLPNTR,$NXTAPPL        NEXT APPLID TABLE
         B     DO1
ENDDO1   DS    0H                    ENDDO
*   EXIT   *
DONE     DS    0H
         EXEC  CICS RETURN
STARTERR DS    0H
         MVC   MSGBUFF,=CL80'AUTOSTRT: UNABLE TO START XXXX FOR UUUUUUUX
               U'
         MVC   MSGBUFF+26(4),$TRANSID
         MVC   MSGBUFF+35(8),USERID
         EXEC  CICS WRITEQ TD                                          X
               QUEUE(MESSAGEQ)                                         X
               FROM(MSGBUFF)                                           X
               LENGTH(=Y(L'MSGBUFF))
         EXEC  CICS RETURN
*             S T A T I C   S T O R A G E   S E C T I O N
COMPARIT CLC   $USERID(0),USERID
*** RESOURCE CONSTANTS
MESSAGEQ DC    CL4'CSSL'
*   TABLES   *
*               INSERT AUTOTABL MACRO DEFINITIONS HERE
         LTORG
         END   AUTOSTRT


Christopher Rider
Systems Programmer (USA)

