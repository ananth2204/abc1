Determining the offset of an abending instruction

The following program calculates the offset at the time of an
abend.  It has been developed and runs in an MVS/XA and
CICS 1.7 environment.  The program is called by a link.

The program is very useful in systems that write a log in the
case of abends.  The programmer can find this address in the
COBOL condensed listing and accurately find the abending
instruction.

The following code illustrates how the program is invoked:

         IN WORKING-STORAGE.

         01  COMMAREA.
             05 OFFSET              PIC X(06).
             05 PGM-ABENDED-NAMED   PIC X(08).

         IN PROCEDURE DIVISION.

         EXEC CICS HANDLE ABEND LABEL (ABEND)
                                END-EXEC.

         MOVE  ....
         PERFORM ....
         etc

         ABEND.

             EXEC CICS LINK PROGRAM  ('PSCOFSET')
                            COMMAREA (COMMAREA)
                            LENGTH   (+14)
                            END-EXEC.
             MOVE ....
             MOVE OFFSET    TO  FILE-OFFSET

             EXEC CICS WRITE  DATASET  ('SYSLOG')
                              FROM     (AREA-LOG)
                              RIDFLD   (KEY-LOG)
                              LENGTH   (LENGTH-LOG)
                              END-EXEC.


PSCOFSET SOURCE CODE

         TITLE 'CALCULATE THE OFFSET AT TIME OF ABEND'
DFHEISTG DSECT
PSWABEND DS   0D                       PSW AUXILIARY AREA
         DS   F
ENDABEND DS   F                        ABEND ADDRESS
INTERINF DS   0D                       INTERRUPT INFORMATION
CTABEND  DS   H                        BYTES OF NEXT INSTRUCTION
         DS   H
         DS   F
         DS   0F
WSTR     DC   CL4' '
COMMAREA DSECT                         LINK COMMAREA
OFFSET   DS   CL6                      ASRA OFFSET
NOMEPGM  DS   CL8                      PROGRAM ABENDED NAMED
PSCOFSET DFHEIENT CODEREG=(RA),EIBREG=RB
         LH    R9,EIBCALEN             GET LENGTH OF COMMAREA
         LTR   R9,R9                   HAS COMMAREA ?
         BZ    RETORNA                 NO
         L     R9,DFHEICAP             YES
         USING COMMAREA,R9             ADDRESS COMMAREA
         EXEC CICS ADDRESS CSA (RE)    GET CSA ADDRESS
         USING DFHCSADS,RE             ADDRESS CSA
         L     RC,CSACDTA              GET TCA ADDRESS
         USING DFHTCADS,RC             ADDRESS TCA
         CLC   TCAPCAC,=CL4'ASRA'      IS THIS AN ASRA ?
         BNE   NAOCALC                 NO
         MVC   PSWABEND,TCAPCPSW       PSW AT TIME OF ERROR
         MVC   INTERINF,TCAPCINT       INTERRUPT INFORMATION
         L     R4,ENDABEND             SAVE ABEND ADDRESS IN R4
         EXEC  CICS LOAD PROGRAM(NOMEPGM) ENTRY (R5)
*                                    GET ENTRY POINT OF ABENDED PROGRAM
         AH    R5,CTABEND              ADD IN R5 BYTES OF THE NEXT
*                                      INSTRUCTION
         SR    R4,R5                   FIND ABENDED OFFSET
*                                      ROUTINE TO TRANSFORM THE ADDRESS
*                                      IN R4 TO CHAR FIELDS
         LR    R5,R4                   SAVE R4 IN R5
         N     R5,=XL4'0F0F0F0F'       PROCESS ONLY THE EVEN BYTES
         ST    R5,WSTR                 SAVE R5 IN WSTR
         TR    WSTR,TABELA             TR IN TABELA
         LA    R6,WSTR                 ADDRESS WSTR
         LA    R7,OFFSET               ADDRESS OFFSET
         MVC   1(1,R7),1(R6)           MOVE BYTE 1 TO POSITION 2
         MVC   3(1,R7),2(R6)           MOVE BYTE 2 TO POSITION 4
         MVC   5(1,R7),3(R6)           MOVE BYTE 3 TO POSITION 6
         LR    R5,R4                   SAVE R4 IN R5
         N     R5,=XL4'F0F0F0F0'       PROCESS ONLY THE ODD BYTES
         ST    R5,WSTR                 SAVE R5 IN WSTR
         TR    WSTR,TABELA             TR IN TABELA
         LA    R6,WSTR                 ADDRESS WSTR
         LA    R7,OFFSET               ADDRESS OFFSET
         MVC   0(1,R7),1(R6)           MOVE BYTE 1 TO POSITION 1
         MVC   2(1,R7),2(R6)           MOVE BYTE 2 TO POSITION 3
         MVC   4(1,R7),3(R6)           MOVE BYTE 3 TO POSITION 5
         B     RETORNA
NAOCALC  EQU   *                       DON'T CALCULATE OFFSET
         MVC   OFFSET,=CL6' '
RETORNA  EQU   *
         EXEC CICS RETURN              RETURN TO THE CALLER PROGRAM
TABELA   DC   256X'F0'                 CONVERSE TABLE
         ORG  TABELA+X'01'
         DC   X'F1'
         ORG  TABELA+X'02'
         DC   X'F2'
         ORG  TABELA+X'03'
         DC   X'F3'
         ORG  TABELA+X'04'
         DC   X'F4'
         ORG  TABELA+X'05'
         DC   X'F5'
         ORG  TABELA+X'06'
         DC   X'F6'
         ORG  TABELA+X'07'
         DC   X'F7'
         ORG  TABELA+X'08'
         DC   X'F8'
         ORG  TABELA+X'09'
         DC   X'F9'
         ORG  TABELA+X'0A'
         DC   X'C1'
         ORG  TABELA+X'0B'
         DC   X'C2'
         ORG  TABELA+X'0C'
         DC   X'C3'
         ORG  TABELA+X'0D'
         DC   X'C4'
         ORG  TABELA+X'0E'
         DC   X'C5'
         ORG  TABELA+X'0F'
         DC   X'C6'
         ORG  TABELA+X'10'
         DC   X'F1'
         ORG  TABELA+X'20'
         DC   X'F2'
         ORG  TABELA+X'30'
         DC   X'F3'
         ORG  TABELA+X'40'
         DC   X'F4'
         ORG  TABELA+X'50'
         DC   X'F5'
         ORG  TABELA+X'60'
         DC   X'F6'
         ORG  TABELA+X'70'
         DC   X'F7'
         ORG  TABELA+X'80'
         DC   X'F8'
         ORG  TABELA+X'90'
         DC   X'F9'
         ORG  TABELA+X'A0'
         DC   X'C1'
         ORG  TABELA+X'B0'
         DC   X'C2'
         ORG  TABELA+X'C0'
         DC   X'C3'
         ORG  TABELA+X'D0'
         DC   X'C4'
         ORG  TABELA+X'E0'
         DC   X'C5'
         ORG  TABELA+X'F0'
         DC   X'C6'
         ORG
         COPY DFHCSADS
         COPY DFHTCADS
         END   PSCOFSET


Carlos Henrique Moreira Bergamini
Senior Systems Programmer
Rede Globo CGI (Brazil)

