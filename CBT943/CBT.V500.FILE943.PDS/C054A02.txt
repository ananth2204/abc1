Solving the auto-install printer problem

The CICS terminal auto-install facility may be the way to
virtual storage constraint relief but if you use the CICS screen
print facility  you encounter a problem.  All auto-install users
with the same terminal type will have identical TCTTEs built
for their terminals with regard to the PRINTTO operand.
Because of this all users will have the PRINTTO associated
with the same printer unless you implement a procedure similar
to the following.

CICS provides a sample auto-install exit program that can be
used as a template for enhanced auto-install processing.  It is
available on SAMPLIB in COBOL and PL/I versions as
members DFHZCTDX and DFHZPTDX, and on SOURCLIB
in Assembler as member DFHZATDZ.  We chose to use the
COBOL version to do our PRINTTO selection.  The program
in its unmodified state takes the first model supplied by auto-
install processing and builds a TCTTE with a terminal-id using
the last four characters of the supplied NETNAME.  We made
the following modifications to allow for different terminals
using several different printers for PA-key screen printing.

First we set up a DB2 table with two columns, each of four
bytes.  The first column is a list of terminal-ids as the auto-
install program would build them.  This becomes the 'key'
field.  The second column is a list of printer-ids that are already
defined to CICS.  We took into account the possibility that we
might miss some terminal-ids.  To get around this problem we
included entries for some dummies.  The use of these by the
program will be explained later.

After the program builds the terminal-id from the NETNAME
it tries to find that row in the DB2 table.  If it finds a match it
copies the printer-id from the second column and moves this to
the TCTTE template.  If a match is not found it looks for one
of the provided dummies.  The terminal-naming convention we
use forces the first two characters to be the address of the
control unit and the second two are the port in that control unit.
We created dummy entries for each of our control units in the
form CCxx, where CC is the control unit address.  If the
program fails to find a terminal match it then looks for a
control unit match.  Finding that, it picks up the default printer
for that control unit.  If no match is found it builds the TCTTE
without a PRINTTO.

We can make modifications to this table on the fly using DB2
PROEDIT from On-Line Software International (an SPUFI
insert could also have been done).  All the user needs to do to
effect the change is to log off and log back on again.

A future enhancement we expect to make is to provide the user
with a printer selection screen at sign-on.

This modification is running under CICS 1.7,  DB2 2.1, and
MVS/XA 2.2.

*    Model_name list - |y|Model1|Model2|...|Modeln|
*    (where 'y' is a 2 byte number of names in the list; each name
*     ELEMENT IS 8 BYTES IN LENGTH; Y MAY BE ZERO, IN WHICH CASE NO
*     LIST FOLLOWS).
*    Return field - |Model_name|TRMIDNT|LS-PRINTTO|LS-ALTPRT |Status
*                   |8 bytes   |4 bytes|4 bytes|4 bytes|1 byte|
*    (A 21 byte field to return selected items and status information
*    CINIT_RU - |z|CINIT_RU|
*    (where 'z' is 2 byte length of CINIT_RU)
*    The purpose of this function is to select a model name, and
*    corresponding terminal id to be used as input for an autoinstall
*    RESOURCE 'BUILDER' REQUEST.
*    Optionally, Printer and Altprinter values may be supplied.
*    The default action of this program on this event is as follows
*    MODEL_NAME = THE FIRST NAME IN THE SUPPLIED LIST
*    Terminal= the last 4 non-blank characters of the supplied NETNAME
*    PRINTER = NOT SUPPLIED
*    Altprinter = not supplied
*    These values are placed in the return field, and the status is
*    SET TO ZERO TO INDICATE THAT A SELECTION HAS BEEN MADE.
*    Return is then made to the calling program.
*    If the list contains no elements, then no action is taken.
*    EXIT-NORMAL =
*         Exit is via an EXEC CICS RETURN command.
*         Status is set to zero if all processing completes normally.
*    EXIT-ERROR =
*         Exit is via an EXEC CICS RETURN command.
*         Status is non-zero on entry to this module, and is left
*         untouched if any error occurs, hence, a non-zero return
*         code is passed back to the calling program.
* Function 2 - autoinstall DELETE
*--------------------------------
*    Parameter list:
*    Fullword 1 =   Function field
*      Byte 1    -    Request type(X'F1' for DELETE)
*      Byte 2    -    Reserved
*      Byte 3    -    Reserved
*      Byte 4    -    Reserved
*    Fullword 2 =   Terminal id of deleted terminal
*    This function gives the user the opportunity to perform
*    processing when an autoinstalled terminal has been deleted.
*    The default action of this program is to establish addressability
*    TO THE PARAMETER LIST, AND RETURN.
*    EXIT-NORMAL =
*         Exit is via an EXEC CICS RETURN command.
*-----------------------------------------------------------------
* NOTES :
*    DEPENDENCIES = S/370
*    MODULE TYPE = Executable
*    PROCESSOR = COBOL
*    ATTRIBUTES = Read only, Serially Reusable
*-----------------------------------------------------------------
* ENTRY POINT = DPKCS100
*     PURPOSE = All Functions
*     The request type is analysed, and control passed to the
*     appropriate routine.
*-----------------------------------------------------------------
* EXTERNAL REFERENCES = None
*     ROUTINES =
*         EXEC CICS RETURN - return to calling program
*     CONTROL BLOCKS =
*         See FUNCTION section for description of input parameters
*-----------------------------------------------------------------
* DESCRIPTION
* A check is made to ensure the presence of the input parameters
* (passed via COMMAREA). If these do not exist, then return is made
* TO THE CALLING PROGRAM.
* The type of request(INSTALL|DELETE) is then determined, and a
* branch taken to the appropriate function routine(see 'FUNCTION'
* above for details).
******************************************************************
  IDENTIFICATION DIVISION.
  PROGRAM-ID.     DPKCS100.
  AUTHOR.         BRUCE BORCHARDT.
  ENVIRONMENT DIVISION.
  DATA DIVISION.
  WORKING-STORAGE SECTION.
* CODES SUPPLIED BY COMMAREA:
 01  WC-WORKING-CODES.
     05  WC-INSTALL-CODE PIC X(1) VALUE IS '0'.
     05  WC-DELETE-CODE  PIC X(1) VALUE IS '1'.
 01  WM-WRITEQ-MESSAGE1.
     05  FILLER          PIC X(15) VALUE '***** TERMINAL '.
     05  WM-TERMINAL     PIC X(4) VALUE SPACES.
     05  FILLER          PIC X(22) VALUE ' HAS NO ENTRY IN TABLE'.
     05  FILLER          PIC X(13) VALUE ' FOR DPKCS100'.
 01  WM-WRITEQ-MESSAGE2.
     05  FILLER          PIC X(16) VALUE '***** CNTL UNIT '.
     05  WM-CNTLUNIT     PIC X(2)  VALUE SPACES.
     05  FILLER          PIC X(22) VALUE ' HAS NO ENTRY IN TABLE'.
     05  FILLER          PIC X(13) VALUE ' FOR DPKCS100'.
* STRUCTURE TO ALLOW THE LAST FOUR CHARACTERS TO BE USED AS
* THE LS-NETNAME.
 01  NB-LS-NETNAME-BITS.
     05  NB-FIRST-HALF.
         10 NB-CHR-1     PIC X(1) VALUE SPACES.
         10 NB-CHR-2     PIC X(1) VALUE SPACES.
         10 NB-CHR-3     PIC X(1) VALUE SPACES.
         10 NB-CHR-4     PIC X(1) VALUE SPACES.
     05  NB-SECOND-HALF.
         10 NB-CHR-5     PIC X(1) VALUE SPACES.
         10 NB-CHR-6     PIC X(1) VALUE SPACES.
         10 NB-CHR-7     PIC X(1) VALUE SPACES.
         10 NB-CHR-8     PIC X(1) VALUE SPACES.
* TERMINAL IDENTIFIER IS BUILT HERE BEFORE BEING PLACED IN THE
* RETURN FIELD.
 01  TI-TERM-IDNT.
     05 TI-TERM-CHR1        PIC X(1) VALUE SPACES.
     05 TI-TERM-CHR2        PIC X(1) VALUE SPACES.
     05 TI-TERM-CHR3        PIC X(1) VALUE SPACES.
     05 TI-TERM-CHR4        PIC X(1) VALUE SPACES.
 01  TI-TERM-IDNT-ALT REDEFINES TI-TERM-IDNT.
     05 TI-TERM-CHR1-CHR2   PIC X(2).
     05 FILLER              PIC X(2).
 01  DT-DUMMY-TERM.
     05 DT-CNTL-UNIT-ID     PIC X(2) VALUE SPACES.
     05 FILLER              PIC X(2) VALUE 'XX'.
 01  XB-XNVT-BLL-RESOLUTION.
     05 XB-XNVT-BLL-AS-COMP PIC S9(8) COMP.
     05 XB-XNVT-BLL-AS-POINTER
             REDEFINES XB-XNVT-BLL-AS-COMP POINTER.
 01  DE-DB2-ERROR-MSG.
     05 FILLER              PIC X(34) VALUE
             'DB2 ERROR - DPKCS100 - SQLCODE = ('.
     05 DE-SQLCODE          PIC Z(8)9- VALUE ZERO.
     05 FILLER              PIC X VALUE ')'.
     05 FILLER              PIC X(8) VALUE
             'ERRMC = '.
     05 DE-SQLERRMC         PIC X(72) VALUE SPACES.
******************************************************************
*    STANDARD SQLCA2 COPY MEMBER
******************************************************************
     COPY SQLCA2.
     EXEC SQL
         INCLUDE TTRM000
     END-EXEC.
     EXEC SQL
         INCLUDE SQLCA
     END-EXEC.
  LINKAGE SECTION.
* COMMAREA FORMAT:
*   FULLWORD 1 - FUNCTION FIELD
*                BYTE 1 - REQUEST TYPE
*                BYTE 2 - RESERVED
*                BYTE 3 - RESERVED
*                BYTE 4 - RESERVED.
*   FULLWORD 2 - POINTER TO LS-NETNAME.
*   FULLWORD 3 - POINTER TO MODEL NAME LIST.
*   FULLWORD 4 - POINTER TO RETURN FIELD.
*   FULLWORD 5 - POINTER TO CINIT_RU.
  01  DFHCOMMAREA.
      05  LS-FUNCTION-FIELD.
          10  LS-REQUEST-TYPE PIC X(1)  VALUE SPACES.
          10  LS-REST         PIC X(3)  VALUE SPACES.
      05  LS-NET-PTR          PIC S9(8)  COMP.
      05  LS-MOD-PTR          PIC S9(8)  COMP.
      05  LS-RET-FLD-PTR      PIC S9(8)  COMP.
      05  LS-CINRU-PTR        PIC S9(8)  COMP.
* PARMLIST ENABLES THE DATA AREAS POINTED TO BY THE COMMAREA
* TO BE ACCESSED
  01  LS-NETNAME.
      05  LS-NETNAME-LENGTH   PIC S9(2)  COMP.
      05  LS-NETNAME-NAME     PIC X(8)   VALUE SPACES.
* MODELNAME IS NOT USED IN THIS PROGRAM AS THE IBM SUPPLIED
* AUTOINSTALL MODELS ARE NOT BEING USED. MODELNAME IS A LIST
* OF AUTOINSTALL MODELS SO IF MORE THAN THE FIRST MODEL IS TO
* BE USED A LONGER DEFINITION WILL BE REQUIRED:
  01  LS-MODELNAME.
      05  LS-NO-MODELS       PIC S9(2) COMP.
      05  LS-MODELNAME-NAME  PIC X(8)  VALUE SPACES.
* LS-RETURN-FIELD WILL CONTAIN THE DATA TO BE RETURNED TO CICS
  01  LS-RETURN-FIELD.
      05  LS-MOD-NAME        PIC X(8) VALUE SPACES.
      05  LS-INSTANCE-NAME   PIC X(4) VALUE SPACES.
      05  LS-PRINTTO         PIC X(4) VALUE SPACES.
      05  LS-ALTPRT          PIC X(4) VALUE SPACES.
      05  LS-RET-STATUS      PIC X    VALUE SPACES.
  01  LS-CINIT-AREA.
      05  LS-CINITRU-LENGTH  PIC S9(4).
      05  LS-CINITRU         PIC X(256) VALUE SPACES.
 PROCEDURE DIVISION.
* SET UP ADDRESSABILITY TO THE PARMLIST.
* CHECK THAT WE HAVE A COMMAREA AND SOME MODELS TO USE, IF NOT
* THEN EXIT
 0000-MAINLINE.
     IF EIBCALEN EQUAL 0
        PERFORM 1000-RETURN-LINE.
* SET UP ADDRESSABILITY TO THE COMMAREA - MOVE POINTERS AND
* THEN RELOAD THE DATA.
     MOVE LS-NET-PTR TO XB-XNVT-BLL-AS-COMP
     SET ADDRESS OF LS-NETNAME TO XB-XNVT-BLL-AS-POINTER.
     MOVE LS-MOD-PTR TO XB-XNVT-BLL-AS-COMP
     SET ADDRESS OF LS-MODELNAME TO XB-XNVT-BLL-AS-POINTER.
     MOVE LS-RET-FLD-PTR TO XB-XNVT-BLL-AS-COMP
     SET ADDRESS OF LS-RETURN-FIELD TO XB-XNVT-BLL-AS-POINTER.
     MOVE LS-CINRU-PTR TO XB-XNVT-BLL-AS-COMP
     SET ADDRESS OF LS-CINIT-AREA TO XB-XNVT-BLL-AS-POINTER.
* EXECUTE THE APPROPRIATE PARAGRAPH FOR INSTALL OR DELETE:
     IF LS-NO-MODELS EQUAL 0
        PERFORM 1000-RETURN-LINE.
     IF LS-REQUEST-TYPE EQUAL WC-INSTALL-CODE
        PERFORM 2000-INSTALL-PARAGRAPH THRU 2500-MOVE.
* IF THE REQUEST WAS AN INSTALL REQUEST THEN THE NEXT TEST
* WILL FAIL ANYWAY, IE. FANCY LOGIC NOT REQUIRED!
     IF LS-REQUEST-TYPE EQUAL WC-DELETE-CODE
        PERFORM 3000-DELETE-PARAGRAPH.
* RETURN TO CICS.
 1000-RETURN-LINE.
     EXEC CICS RETURN END-EXEC.
 2000-INSTALL-PARAGRAPH.
* MOVE THE LS-NETNAME SO THAT IT CAN BE DEALT WITH ON A CHARACTER BY
* CHARACTER BASIS.
     MOVE LS-NETNAME-NAME TO NB-LS-NETNAME-BITS.
* RESET LS-NETNAME LENGTH IF THERE ARE TRAILING SPACES.
     IF (LS-NETNAME-LENGTH = 8 AND NB-CHR-8 = ' ')
        MOVE 7 TO LS-NETNAME-LENGTH.
     IF (LS-NETNAME-LENGTH = 7 AND NB-CHR-7 = ' ')
        MOVE 6 TO LS-NETNAME-LENGTH.
     IF (LS-NETNAME-LENGTH = 6 AND NB-CHR-6 = ' ')
        MOVE 5 TO LS-NETNAME-LENGTH.
     IF (LS-NETNAME-LENGTH = 5 AND NB-CHR-5 = ' ')
        MOVE 4 TO LS-NETNAME-LENGTH.
* MAKE UP TERMINAL IDENTIFIER FROM LS-NETNAME.
     IF LS-NETNAME-LENGTH < 5
        MOVE NB-FIRST-HALF TO TI-TERM-IDNT.
     IF LS-NETNAME-LENGTH = 5
        MOVE NB-CHR-2 TO TI-TERM-CHR1
        MOVE NB-CHR-3 TO TI-TERM-CHR2
        MOVE NB-CHR-4 TO TI-TERM-CHR3
        MOVE NB-CHR-5 TO TI-TERM-CHR4.
     IF LS-NETNAME-LENGTH = 6
        MOVE NB-CHR-3 TO TI-TERM-CHR1
        MOVE NB-CHR-4 TO TI-TERM-CHR2
        MOVE NB-CHR-5 TO TI-TERM-CHR3
        MOVE NB-CHR-6 TO TI-TERM-CHR4.
     IF LS-NETNAME-LENGTH = 7
        MOVE NB-CHR-4 TO TI-TERM-CHR1
        MOVE NB-CHR-5 TO TI-TERM-CHR2
        MOVE NB-CHR-6 TO TI-TERM-CHR3
        MOVE NB-CHR-7 TO TI-TERM-CHR4.
     IF LS-NETNAME-LENGTH = 8
        MOVE NB-SECOND-HALF TO TI-TERM-IDNT.
* PLACE TI-TERM-IDNT IN RETURN FIELD
     MOVE TI-TERM-IDNT TO LS-INSTANCE-NAME
                          TTRM000-TERMINAL-NMBR.
* GET PRINTER INFO FROM TABLE
     EXEC CICS HANDLE ABEND LABEL(2500-MOVE) END-EXEC.
     EXEC SQL
         SELECT TERMINAL_NMBR,
                PRINTER_NMBR
         INTO :TTRM000-TERMINAL-NMBR,
              :TTRM000-PRINTER-NMBR
         FROM TTRM000
         WHERE TERMINAL_NMBR = :TTRM000-TERMINAL-NMBR
     END-EXEC.
     MOVE SQLCODE TO DE-SQLCODE
     MOVE SQLERRMC TO DE-SQLERRMC
     IF SQLCODE = 0
         MOVE TTRM000-PRINTER-NMBR TO LS-PRINTTO
     ELSE
         IF SQLCODE = +100
             MOVE TI-TERM-IDNT TO WM-TERMINAL
             EXEC CICS
                  WRITEQ TD
                  QUEUE('CSML')
                  FROM (WM-WRITEQ-MESSAGE1)
                  LENGTH(54)
             END-EXEC
             MOVE TI-TERM-CHR1-CHR2 TO DT-CNTL-UNIT-ID
             MOVE DT-DUMMY-TERM TO TTRM000-TERMINAL-NMBR
             EXEC SQL
                 SELECT TERMINAL_NMBR,
                        PRINTER_NMBR
                 INTO :TTRM000-TERMINAL-NMBR,
                      :TTRM000-PRINTER-NMBR
                 FROM TTRM000
                 WHERE TERMINAL_NMBR = :TTRM000-TERMINAL-NMBR
             END-EXEC
             IF (SQLCODE < 0 OR SQLCODE > +99)
                 MOVE TI-TERM-CHR1-CHR2 TO WM-CNTLUNIT
                 EXEC CICS
                      WRITEQ TD
                      QUEUE('CSML')
                      FROM (WM-WRITEQ-MESSAGE2)
                      LENGTH(53)
                 END-EXEC
                 MOVE SQLCODE TO DE-SQLCODE
                 MOVE SQLERRMC TO DE-SQLERRMC
                 EXEC CICS
                     WRITEQ TD
                     QUEUE('CSML')
                     FROM (DE-DB2-ERROR-MSG)
                     LENGTH(125)
                 END-EXEC
             ELSE
                 MOVE TTRM000-PRINTER-NMBR TO LS-PRINTTO
             END-IF
         ELSE
             MOVE SQLCODE TO DE-SQLCODE
             MOVE SQLERRMC TO DE-SQLERRMC
             EXEC CICS
                  WRITEQ TD
                  QUEUE('CSML')
                  FROM (DE-DB2-ERROR-MSG)
                  LENGTH(125)
             END-EXEC
         END-IF
     END-IF.
 2500-MOVE.
* SELECT THE MODEL FROM THE LIST SUPPLIED (THE FIRST MODEL IS
* SELECTED).
     MOVE LS-MODELNAME-NAME TO LS-MOD-NAME.
* PUT RETURN CODE 0 INTO THE STATUS BYTE.
     MOVE LOW-VALUES TO LS-RET-STATUS.
 3000-DELETE-PARAGRAPH.
* DELETE CODE IS PLACED HERE.
* RETURN TO CICS
     EXEC CICS RETURN END-EXEC.


Bruce Borchardt
Senior Systems Programmer (USA)                   ) Xephon 1990


