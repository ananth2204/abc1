TSO/ISPF CICS dump dataset utility

PROBLEM

Because CICS dump datasets can contain large amounts of dumps,
particularly in development regions, they are often cumbersome
and time-consuming to manipulate.  This can be quite frustrating
if the dataset is almost full and you want to look at a dump near
the bottom of it.  Not only do you have to wait for what seems
like an eternity while the dump print utility DFHDUP runs, but
you are then faced with the problem of wading through thousands
of lines of unwanted dumps.

SOLUTION

Certain products are available that can make the process easier by
providing a full on-line dump processing capability, either from
standard CICS dump datasets or by using their own VSAM
datasets written by a modification to or the total replacement of
the dump control program.  However, I did not feel that purchase
of one of these products was particularly appropriate as I am
happy enough using SDSF to browse up and down a printed dump
once it has been placed on the spool queue, so I put together a
small dump scan utility, using TSO/ISPF, which scans through the
dataset, displays a list of all the dumps contained within it, and
allows on-line selection of one or more of them for printing
individually.

The method used is actually quite simple.  A short Assembler
program reads through the dataset and notes the position and
length of each dump within the dataset.  When a dump is selected
for printing from the on-line screen, a batch job is submitted that
uses REPRO to extract the individual dump into a temporary
dataset, which is passed as input to DFHDUP for printing.

I chose TSO/ISPF to run the utility because it is independent of
CICS.  This means that it will not affect other users of CICS and
it can be used even if CICS is down because of an abend.
Unfortunately there are disadvantages to ISPF, one being that
several different types of component have to be written to support
your program, which can get a bit confusing if you don't keep
track of it (by using sensible naming conventions, for instance),
and another being that ISPF is very clumsy to use from an
Assembler program, which was needed for a fast execution.  I
therefore apologise in advance if there seems to be lots of typing
to do, and if the Assembler program looks a little puzzling in
places.

OPERATION

The utility can be invoked either by including it as an option on an
ISPF menu or by executing the CLIST.  It will not run in native
TSO because of the calls to ISPF services.

The first screen display prompts for the name of the dump dataset
that you want to process.  Two fields below the dataset name field
allow input of DFHDUP parameters to control line spacing and
upper/lower case translation.  These parameters are documented
under the description of DFHDUP in the Installation and
Operations Guide.

Once all the input fields have been validated successfully, the
Assembler program is invoked to index all the dumps contained in
the dataset.  If your dump dataset has only a few transaction
dumps in it, the next screen will be displayed almost immediately,
but it can take up to a minute to scan a dataset containing many
large partition dumps, although this obviously depends on the
speed of your processor and the performance group of the TSO
user-id in use.  Once the index screen is displayed, the dump
descriptions can be inspected and the required dump selected for
printing by placing a 'P' in the selection field at the front of the
entry and pressing ENTER.  An entry that has an asterisk at the
end of the description means that the dump is incomplete, usually
because the dataset has become full while the dump was being
written.  If such a dump is printed, DFHDUP will print the
message 'DFH1604 .. END OF FILE ENCOUNTERED, LAST
DUMP MAY BE INCOMPLETE' at the end of the dump listing.

IMPLEMENTATION

The first thing is to ensure that your CICS dump dataset has a
blocksize of 7168.  The Installation and Operations Guide says
that you do not need to specify the blocksize when you initially
allocate the datasets, in which case it will be allocated using the
track size of the device that you created the dataset on initially.
However, the dataset is written using a blocksize of 7168 even if
the blocksize on the DCB is larger, and DFHDUP uses 7168 for
its input buffer size.  Apart from obviously being wasteful, there
is a problem if you try to copy the dataset using a larger blocksize.
The utility used to copy the dataset will use the blocksize from the
DCB, re-blocking the output records to make the best use of it.  If
you then run DFHDUP over the copy, only the first 7168 bytes of
each block will be read and some dump information will be
missed, so the program will not function correctly.

ASSEMBLER PROGRAM DSCNP01

This program must be link-edited using the ISPF load library(s)
concatenated to SYSLIB.

* FUNCTION:                                                           *
*    READS A CICS DUMP DATASET AND PRODUCES A LIST OF ALL DUMPS WHICH *
*    HAVE BEEN WRITTEN TO IT. THIS LIST IS WRITTEN TO AN ISPF TABLE   *
*    FROM WHICH AN INDIVIDUAL ENTRY MAY BE SLECTED FOR PRINTING OR    *
*    ON-LINE PROCESSING SUCH AS BROWSING.                             *
* NOTES:                                                              *
*   DEPENDENCIES: MVS, TSO/ISPF                                       *
* INPUT:                                                              *
*    DFHDMPDS -                                                       *
*    CICS DUMP DATASET - MUST BE SEQUENTIAL DATASET OF VARYING LENGTH *
*                        WITH BLKSIZE AT LEAST 7168.                  *
*    OUTPUT:                                                          *
*       ISPF TABLE                                                    *
*       ISPF DIALOG VARIABLES                                         *
* EXTERNAL REFERENCES:                                                *
*    ISPLINK                                                          *
*      (VDEFINE,TBCREATE,TBADD)                                       *
* CONTROL BLOCKS:                                                     *
*    MVS:                           CICS:                             *
*       DCB                            DFHDCRDS                       *
DSCNP01  CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING DSCNP01,R12
         ST    R13,SAVEAREA+4
         LR    R2,R13
         LA    R13,SAVEAREA
         ST    R13,8(,R2)
         B     *+76
SAVEAREA DS    18F
         OPEN  (DFHDMPDS,INPUT)
         XR    R15,R15                 CLEAR RETURN CODE REGISTER
         MVC   RECORDNO,=F'0'          ZERO RECORD COUNTER
         MVC   DSCNR01,=CL8'00000000'
         MVC   DSCNR02,=CL8'00000000'
         MVI   DSCNSEL,C' '
         MVC   MNTHLEN(24),MNTHTAB     INITIALISE MONTH LENGTHS TABLE
         LA    R2,VDEFCMD              ADDR OF SERVICE NAME FIELD
         ST    R2,VDEFCMD@
         LA    R2,VDEFNAM              ADDR OF VAR NAME FIELD
         ST    R2,VDEFNAM@
         LA    R2,VDEFTYP              ADDR OF VAR TYPE FIELD
         ST    R2,VDEFTYP@
         LA    R2,VDEFLEN              ADDR OF VAR LENGTH FIELD
         ST    R2,VDEFLEN@
         LA    R2,VDEFOPT              ADDR OF OPTIONS FIELD
         O     R2,=X'80000000'         ...SAY ITS THE LAST ONE
         ST    R2,VDEFOPT@
         MVC   VDEFCMD,=CL8'VDEFINE'   SET SERVICE NAME
         MVC   VDEFNML,=A(1)           SET NUMBER OF VARIABLES
         XC    VDEFNMZ,VDEFNMZ         (REQUIRED ZERO FULLWORD)
         MVC   VDEFTYP,=CL8'CHAR'      SET FORMAT TYPE
         MVC   VDEFOPT,=CL24'(NOBSCAN)' SET OPTIONS
         MVC   VDEFNAM,=CL8'DSCNDET '  SET VAR NAME
         LA    R2,DSCNDET              GET ADDRESS OF VARIABLE
         ST    R2,VDEFVAR@
         MVC   VDEFLEN,=A(L'DSCNDET)   SET LENGTH OF VARIABLE
         LA    R1,VDEFPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@            GET ADDRESS OF ROUTINE
         BALR  R14,R15                 DEFINE VARIABLES
         MVC   VDEFNAM,=CL8'DSCNR01 '  SET VARIABLE NAME
         LA    R2,DSCNR01              GET ADDRESS OF VARIABLE
         ST    R2,VDEFVAR@             PUT IT IN THE PLIST
         MVC   VDEFLEN,=A(L'DSCNR01)   SET LENGTH OF VARIABLE
         LA    R1,VDEFPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@            GET ADDRESS OF ROUTINE
         BALR  R14,R15                 DEFINE VARIABLES
         MVC   VDEFNAM,=CL8'DSCNR02 '  SET VARIABLE NAME
         LA    R2,DSCNR02              GET ADDRESS OF VARIABLE
         ST    R2,VDEFVAR@             PUT IT IN THE PLIST
         MVC   VDEFLEN,=A(L'DSCNR02)   SET LENGTH OF VARIABLE
         LA    R1,VDEFPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@            GET ADDRESS OF ROUTINE
         BALR  R14,R15                 DEFINE VARIABLES
         MVC   VDEFNAM,=CL8'DSCNSEL '  SET VARIABLE NAME
         LA    R2,DSCNSEL              GET ADDRESS OF VARIABLE
         ST    R2,VDEFVAR@             PUT IT IN THE PLIST
         MVC   VDEFLEN,=A(L'DSCNSEL)   SET LENGTH OF VARIABLE
         LA    R1,VDEFPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@            GET ADDRESS OF ROUTINE
         BALR  R14,R15                 DEFINE VARIABLES
         LA    R1,TBCRPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@
         BALR  R14,R15                 CREATE ISPF TABLE
         USING DCRECST,R10             ADDRESS DFHDMPDS INPUT RECORD
NXTDUMP  BAL   R6,READBLK              READ BLOCK
         CLI   DCIRTSI,DCFDHDR         IS THIS A FORMATTED DUMP ?
         BE    FDUMPBEG                YES, GO PROCESS IT
         CLI   DCIRTSI,DCDTIC          IS THIS A TRANSACTION DUMP ?
         BE    TDUMPBEG                YES, GO PROCESS IT
         B     DSCNRTN                 UNRECOGNISED DUMP HEADER - EXIT
* FORMATTED DUMP                                                      *
FDUMPBEG MVI   DUMPACT,X'FF'           NOTE DUMP IN PROGRESS
         BAL   R6,BILDHDR              EXTRACT HEADER INFORMATION
FDUMPNXT CLI   DCIRTSI,DCFDTLR         END OF DUMP ?
         BE    FDUMPEND                YES, RETURN
         BAL   R6,READBLK              READ NEXT RECORD
         B     FDUMPNXT                PROCESS THIS RECORD
FDUMPEND BAL   R6,TABLADD              PUT THIS DUMP IN INDEX
         MVI   DUMPACT,X'00'           NOTE DUMP NOT IN PROGRESS
         B     NXTDUMP                 GO DO NEXT DUMP
* TRANSACTION DUMP                                                    *
TDUMPBEG MVI   DUMPACT,X'FF'           NOTE DUMP IN PROGRESS
         BAL   R6,BILDHDR              EXTRACT HEADER INFORMATION
TDUMPNXT CLI   DCIRTSI,DCTLRIC         END OF DUMP ?
         BE    TDUMPEND                YES, RETURN
         BAL   R6,READBLK              READ NEXT RECORD
         B     TDUMPNXT                PROCESS THIS RECORD
TDUMPEND BAL   R6,TABLADD              PUT THIS DUMP IN INDEX
         MVI   DUMPACT,X'00'           NOTE DUMP NOT IN PROGRESS
         B     NXTDUMP                 GO DO NEXT DUMP
* RETURN TO OPERATING SYSTEM
DSCNRTN  LA    R1,VDELPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@
         BALR  R14,R15                 DELETE ISPF VARIABLES
         CLOSE DFHDMPDS
         L     R13,4(,R13)
         LM    R0,R12,20(R13)
         L     R14,12(,R13)
         BR    R14
DUMPEOF  CLI   DUMPACT,X'FF'           DUMP STILL IN PROGRESS ?
         BNE   DUMPEOF1                NO, DONT TRY TO CLOSE ONE
         MVC   TACONT,=CL2' *'         MARK DUMP INCOMPLETE
         MVC   DUMPEND,RECORDNO        NOTE END RECORD
         BAL   R6,TABLADD              PUT THIS DUMP IN INDEX
DUMPEOF1 B     DSCNRTN
DUMPERR  B     DSCNRTN
* SUBROUTINES                                                         *
READBLK  ST    R6,READBLK@             SAVE RETURN ADDRESS
         GET   DFHDMPDS
         LR    R10,R1
         L     R5,RECORDNO             GET CURRENT RECORD NUMBER
         LA    R5,1(,R5)               INCREMENT IT
         ST    R5,RECORDNO             SAVE IT
         L     R6,READBLK@             LOAD RETURN ADDRESS
         BR    R6                      RETURN
BILDHDR  ST    R6,BILDHDR@             SAVE RETURN ADDRESS
         MVI   TABLBUF,C' '            CLEAR TABLE BUFFER
         MVC   TABLBUF+1(L'TABLBUF-1),TABLBUF  ...AND WIPE IT
         MVC   DUMPBEG,RECORDNO        NOTE START RECORD
         MVC   TATRAN,DCTASKID         COPY TASK ID
         MVC   TADUMP,DCDUMPC          COPY DUMP ID
         OC    CBWORK01,CBWORK01       CLEAR WORK FIELD
         MVC   CBWORK01+4,DCTIME       PUT TIME IN LEAST SIG PART
         UNPK  CBWORK02(8),CBWORK01+4(4)  UNPACK IT
         OC    CBWORK02,CBDMASK1       CONVERT TO ZONED DECIMAL
         MVC   TATIME(2),CBWORK02+1    COPY HOURS
         MVC   TATIME+3(2),CBWORK02+3  COPY MINUTES
         MVC   TATIME+6(2),CBWORK02+5  COPY SECONDS
         MVI   TATIME+2,C':'           DELIMITER
         MVI   TATIME+5,C':'           DELIMITER
         XC    DATEWRK,DATEWRK         CLEAR DATE WORK FIELD
         L     R3,DCDATE               GET ENTIRE DATE
         SRL   R3,16                   SHIFT OUT THE DAYS AND SIGN
         N     R3,=X'000000FF'         ENSURE JUST TWO YEAR DIGITS
         STC   R3,DATEWRK+3            SAVE IT IN THE WORK AREA
         SLL   R3,4                    SHIFT BACK TO ACCOMMODATE SIGN
         O     R3,=X'0000000C'         PLUG IN A POSITIVE SIGN
         OC    CBWORK01,CBWORK01       CLEAR WORK FIELD
         ST    R3,CBWORK01+4           PUT PACKED YEAR IN WORK FIELD
         CVB   R3,CBWORK01             CONVERT TO BINARY
         XR    R2,R2                   CLEAR HIGH WORD
         D     R2,=F'4'                TEST FOR LEAP YEAR
         LTR   R2,R2                   WAS THERE A REMAINDER ?
         BNZ   NOLEAP                  YES, SO NOT A LEAP YEAR
         MVC   MNTHLEN+2(2),=H'29'     MAKE FEB 29 DAYS
NOLEAP   L     R4,DCDATE               GET ENTIRE DATE
         N     R4,=X'0000FFFC'         MASK OUT THE YEAR PORTION
         XC    CBWORK01,CBWORK01       CLEAR A WORK FIELD
         ST    R4,CBWORK01+4           PUT PACKED DAYS IN WORK FIELD
         CVB   R4,CBWORK01             CONVERT TO BINARY
         LA    R5,1(,R0)               SET TALLY REGISTER
         LA    R6,MNTHLEN              SET POINTER TO MONTH TABLE
NXTMNTH  CH    R4,0(,R6)               CHECK DAYS AGAINST MONTH TABLE
         BNH   GOTDATE                 IF NOT GREATER, GOT DATE
         C     R5,=F'12'               LAST MONTH ?
         BNL   GOTDATE                 YES, FINISH (WITH BAD DATE)
         SH    R4,0(,R6)               SUBTRACT LENGTH OF THIS MONTH
         LA    R6,2(,R6)               MOVE TO NEXT MONTH LENGTH
         LA    R5,1(,R5)               INCR MONTH TALLY
         B     NXTMNTH                 LOOP
GOTDATE  CVD   R4,CBWORK01             CONVERT DAY OF MONTH
         L     R4,CBWORK01+4           GET DECIMAL DAY OF MONTH
         SRL   R4,4                    SHIFT OUT THE SIGN
         STC   R4,DATEWRK+1            PUT IT IN THE WORK FIELD
         CVD   R5,CBWORK01             CONVERT MONTH NUMBER
         L     R5,CBWORK01+4           GET DECIMAL MONTH NUMBER
         SRL   R5,4                    SHIFT OUT THE SIGN
         STC   R5,DATEWRK+2            PUT IT IN THE WORK FIELD
         L     R5,DATEWRK              LOAD WORK FIELD
         SLL   R5,4                    MAKE ROOM FOR SIGN
         O     R5,X'0000000C'          PLUG SIGN IN
         XC    CBWORK01,CBWORK01
         ST    R5,CBWORK01+4
         UNPK  CBWORK02(8),CBWORK01+4(4)  UNPACK IT
         OC    CBWORK02,CBDMASK1       CONVERT TO ZONED DECIMAL
         MVC   TADATE+6(2),CBWORK02+6  COPY YEAR DIGITS
         MVC   TADATE+3(2),CBWORK02+4  COPY YEAR DIGITS
         MVC   TADATE(2),CBWORK02+2    COPY YEAR DIGITS
         MVI   TADATE+2,C'/'           DELIMITER
         MVI   TADATE+5,C'/'           DELIMITER
         MVC   TADESC,=CL46'TRANSACTION DUMP'
         CLI   DCIRTSI,DCFDHDR         IS THIS A FORMATTED DUMP ?
         BNE   BILDHDRC                NO, SO WE'VE GOT ALL THE INFO
         MVC   TATRAN,=CL4' ** '       CANCEL TRAN ID
         MVC   TADUMP,=CL4' ** '       CANCEL DUMP ID
         BAL   R6,READBLK              GET THE NEXT RECORD FOR DESC
         XR    R3,R3                   CLEAR A LENGTH REGISTER
         LH    R3,DCRECLEN             GET LENGTH OF RECORD
         SH    R3,=H'8'                DISCOUNT RDW AND CONTROL INFO
         CH    R3,=AL2(L'TADESC)       IS IT TOO LARGE ?
         BNH   BHLENFIT                NO - CARRY ON
         LA    R3,L'TADESC(0,0)        YES, ONLY ALLOW CORRECT LENGTH
BHLENFIT LA    R2,TADESC               GET ADDR OF TARGET AREA
         LA    R4,DCLINE               GET ADDR OF SOURCE AREA
         LR    R5,R3                   USE SAME LENGTH AS R3
         MVCL  R2,R4                   COPY THE DESCRIPTION
BILDHDRC L     R6,BILDHDR@             LOAD RETURN ADDRESS
         BR    R6                      RETURN
TABLADD  ST    R6,TABLADD@             SAVE RETURN ADDRESS
         MVC   DUMPEND,RECORDNO        NOTE END RECORD
         L     R1,DUMPBEG              FETCH START RECORD NUMBER
         BAL   R6,CBINDEC              GO CONVERT IT
         MVC   DSCNR01,CBWORK02        PUT CONVERTED VALUE IN
         L     R1,DUMPEND              FETCH START RECORD NUMBER
         BAL   R6,CBINDEC              GO CONVERT IT
         MVC   DSCNR02,CBWORK02        PUT CONVERTED VALUE IN
         MVC   DSCNDET,TABLBUF         COPY TO TABLE DSCNDET LINE
         LA    R1,TBADPLST             LOAD ADDRESS OF PLIST
         L     R15,ISPLINK@
         BALR  R14,R15                 ADD ENTRY TO TABLE
         L     R6,TABLADD@             LOAD RETURN ADDRESS
         BR    R6                      RETURN
CBINDEC  ST    R6,CBINDEC@             SAVE RETURN ADDRESS
         N     R1,=X'00FFFFFF'         MASK OFF HIGH BYTE
         CVD   R1,CBWORK01             CONVERT TO PACKED DECIMAL
         UNPK  CBWORK02,CBWORK01       UNPACK IT
         OC    CBWORK02,CBDMASK1       CONVERT TO ZONED DECIMAL
         LM    R1,R2,CBWORK02          LOAD NUMBER
         L     R6,CBINDEC@             LOAD RETURN ADDRESS
         BR    R6                      RETURN
DFHDMPDS DCB   DDNAME=DFHDMPDS,                                       +
               DSORG=PS,                                              +
               EODAD=DUMPEOF,                                         +
               MACRF=(GL),                                            +
               SYNAD=DUMPERR
WORKSTG  EQU   *
         DS    0D
CBWORK01 DS    D                       WORK FIELD FOR CBINDEC ROUTINE
CBWORK02 DS    D                       WORK FIELD FOR CBINDEC ROUTINE
BILDHDR@ DS    12F                     BILDHDR SAVE AREA
CBINDEC@ DS    12F                     CBINDEC SAVE AREA
READBLK@ DS    12F                     READBLK SAVE AREA
TABLADD@ DS    12F                     TABLADD SAVE AREA
DATEWRK  DS    F                       DATE CONVERSION WORK AREA
DUMPBEG  DS    F                       START RECORD NUMBER
DUMPEND  DS    F                       END RECORD NUMBER
RDBUFPTR DS    F                       CURRENT ADDRESS WITHIN BUFFER
RECORDNO DS    F                       CURRENT RECORD COUNT
WKSTGAD  DS    F                       ADDRESS OF WORKING STORAGE
MNTHLEN  DS    CL24                    MONTH LENGTHS
VDEFCMD  DS    CL8                     SERVICE NAME (VDEFINE)
VDEFNML  DS    F                       NUMBER OF VARIABLES
VDEFNMZ  DS    F
VDEFNAM  DS    CL8
VDEFTYP  DS    CL8                     VARIABLE TYPE
VDEFLEN  DS    F
VDEFOPT  DS    CL24                    OPTIONS
VDEFPLST EQU   *                  START OF PLIST
VDEFCMD@ DS    F                       ADDRESS OF SERVICE NAME
VDEFNAM@ DS    F                       ADDRESS OF NAME LIST
VDEFVAR@ DS    F                       ADDRESS OF STORAGE
VDEFTYP@ DS    F                       ADDRESS OF VARIABLE TYPES
VDEFLEN@ DS    F                       ADDRESS OF VARIABLE LENGTHS
VDEFOPT@ DS    F                       ADDRESS OF OPTIONS
DUMPACT  DS    X                       DUMP IN PROGRESS WHEN X'FF'
DSCNDET  DS    CL76                    ISPF TABLE - DUMP DSCNDETS
DSCNR01  DS    CL8                     ISPF TABLE - START RECORD
DSCNR02  DS    CL8                     ISPF TABLE - END RECORD
DSCNSEL  DS    C                       ISPF PANEL - ITEM DSCNSEL FIELD
TABLBUF  DS    0CL76              TABLE RECORD
TATRAN   DS    CL4,C                   TRANSACTION CODE
TADUMP   DS    CL4,C                   DUMP CODE
TATIME   DS    CL8,C                   TIME DUMP TAKEN
TADATE   DS    CL8,C                   DATE DUMP TAKEN
TADESC   DS    CL46                    DUMP DESCRIPTION
TACONT   DS    CL2                     'DUMP INCOMPLETE' MARKER
         DS    0D
MNTHTAB  DC    H'31',H'28',H'31',H'30',H'31',H'30'
         DC    H'31',H'31',H'30',H'31',H'30',H'31'
CBDMASK1 DC    8X'F0'                  ZONED DECIMAL MASK - CBINDEC RTN
ISPLINK@ DC    A(ISPLINK+X'80000000')
VDELCMD  DC    CL8'VDELETE'            SERVICE NAME
VDELNAM  DC    A((VDELNAME-VDELNAMB)/8) NUMBER OF VARIABLES
         DC    F'0'
VDELNAMB DC    CL8'DSCNDET'            VARIABLE NAMES
         DC    CL8'DSCNR01'
         DC    CL8'DSCNR02'
         DC    CL8'DSCNSEL'
VDELNAME EQU   *
VDELPLST EQU   *                   START OF PLIST
         DC    A(VDELCMD)               ADDRESS OF SERVICE NAME
         DC    A(X'80000000'+VDELNAM)   ADDRESS OF NAME LIST
TBCRCMD  DC    CL8'TBCREATE'            SERVICE NAME
TBCRTBL  DC    CL8'DSCNT01'             TABLE NAME
TBCRNAM  DC    A((TBCRNAME-TBCRNAMB)/8)  NUMBER OF VARIABLES
         DC    A(0)
TBCRNAMB DC    CL8'DSCNSEL'             VARIABLE NAMES
         DC    CL8'DSCNDET'
         DC    CL8'DSCNR01'
         DC    CL8'DSCNR02'
TBCRNAME EQU   *
TBCRKEY  DC    A(0)                    NUMBER OF KEY FIELDS
         DC    A(0)
TBCRPLST EQU   *                  START OF PLIST
         DC    A(TBCRCMD)              ADDRESS OF SERVICE NAME
         DC    A(TBCRTBL)              ADDRESS OF TABLE NAME
         DC    A(TBCRKEY)              ADDRESS OF TABLE NAME
         DC    A(X'80000000'+TBCRNAM)  ADDRESS OF TABLE VAR LIST
TBADCMD  DC    CL8'TBADD'              SERVICE NAME
TBADPLST EQU   *                  START OF PLIST
         DC    A(TBADCMD)              ADDRESS OF SERVICE NAME
         DC    A(X'80000000'+TBCRTBL)  ADDRESS OF TABLE NAME
         LTORG
         COPY  DFHDCRDS
         EXTRN ISPLINK
         END

We shall conclude this article in next month's issue of CICS
Update when we will publish the remaining components of the
utility.

B Perryman
Systems Programmer
Confederation Life Insurance Co (UK) ) Confederation Life Insurance 1989


