Global user exits under CICS Version 3

The IBM documentation on enabling/disabling global user exits
is often cryptic or confusing.  This article summarizes what I
have learnt from my own experiences and hopefully may save
others time when implementing user exits.


DEBUGGING

Exit programs have only limited means of communicating
errors, since most exits cannot use CICS services except by
using the Exit Programming Interface (XPI).  While testing an
exit, I use WTOs as a quick and simple way of dumping areas
of interest.  Since WTO clobbers Register 1, which is the base
register for the user exit program parameter list, you should
save Register 1 before issuing the WTO.  I also use
OMEGAMON to look at the Global Work Area (GWA) and
the enable/disable status of the exit.  The XPI could be used for
debugging, but it is not easy to use and may introduce more
bugs.

For production programs, it is better to flag errors in the GWA,
rather than using WTOs etc.  Frequently used exits which
encounter problems could flood the console with WTO
messages.  The GWA can be examined with a command-level
monitor program (using the EXTRACT EXIT command) or by
using OMEGAMON or similar.  For other than simple exits, it
is probably a good practice to allow for an error notification
field in the GWA.


One Program, Several Exits

If you wish to associate one program with several exits, use a
series of enable commands as follows:

   ENABLE EXIT('EXITA') PROGRAM('MYEXIT') ÝGWALENGTH(LENGTH)¨ RESP(RESP)
   ENABLE EXIT('EXITB') PROGRAM('MYEXIT') RESP(RESP)
   ENABLE EXIT('EXITC') PROGRAM('MYEXIT') RESP(RESP)
   ENABLE EXIT('EXITD') PROGRAM('MYEXIT') START RESP(RESP)

Thus, the MYEXIT program does not begin executing until it
is started at the last enable command.  Also note that if you
specify a GWA, it must only be coded for the first enable, ie
the GWA is common to all exits served by the one program.

MYEXIT can determine which exit has invoked it by using the
UEPEXN field (address of the exit number), which is passed to
the program in the user exit parameter list.  Each exit has a
unique number.  For example:

                L    R5,UEPEXN              R5 -> Exit number
                CLI  0(R5),XDTRD            Data Tables Load Exit ?
                BE   DATATAB                Yes ---->
                CLI  0(R5),XFCREQ           File Control ?
                BE   FCTRL                  Yes ---->
                B    UNKNOWN                Else notify if unknown

If the same program is used for several exit points, be aware
that the restrictions on CICS services and XPI calls apply to the
current exit point, not to the program.


One Exit, Several Programs

If more than one program is enabled for the same exit point,
the order of invocation will be the order in which the programs
are enabled.  This is important if the programs share a GWA
(ie they use the GAENTRYNAME option to allow one
program to use another program's GWA).

Care is required with return code management for the second or
subsequent programs associated with the same exit point.  In
these cases, the DFHUEPAR parameter list field UEPCRCA
(the address of the return code passed by the previous exit
program) is important.  The following rules apply:

1      If the new program sets the same return code as the
      'current' return code (as addressed by UEPCRCA), then
      CICS passes it to the next exit program (if any) or acts on
      that value if there are no further exit programs for the exit point.

2      If the new program sets a different return code from the
      'current' value and changes the value addressed by
       UEPCRCA, then CICS passes the new value to the next
      exit program or acts on that value.

3      If the new program sets a different return code from the
      'current' value but does not change the value addressed by
      UEPCRCA, then CICS sets the default value for that exit
      (usually UERCNORM) and passes it to the next exit
      program or acts on the default value.

If you do not take account of these rules, your exit programs
may give unexpected return codes and strange and nasty things
may happen!  It is therefore important, when implementing
new exit programs, to check if any third-party packages use the
exit(s) concerned.  My experience is that some third-party
packages do not follow the above rules, therefore if you want
to use a third-party exit, your exit program must take these
factors into account:

1      If your exit program is enabled first, be aware that any
      non-default return code you set may be overridden by the
      third-party exit if the third-party exit follows the rules or
      reset to the default return code if the third-party exit does
      not follow the rules.

2      If your exit program is enabled after the third-party exit
      program, and you change the third-party return code, be
      aware that other components of the third-party package
      may rely on the return code value and you may thus cause
      the package to malfunction.


An Exit Enabler Program

Rather than writing a separate PLTPI program to enable each
exit program at CICS start-up time, it is simpler to code just
one program.  This exit enabler program has passed to it a
COMMAREA containing the exit name, program name,
GWALENGTH (if GWA required), and a START option.
This reduces maintenance overhead and imposes a standard
notification technique when an exit is enabled or when errors
occur.  An example of such an exit enabler program is given at
the end of this article.  We have adapted Michael Davis' PLT
technique to activate this program (see CICS Update July 1990
page 31).

You will rarely need to stop user exits during normal CICS
execution, so an exit disabler program would not normally be
required - we use CECI to disable exit programs.  If it is
necessary to limit the use of CECI for security reasons, then an
exit disabler program could be useful.


Using XPI Functions

If you need XPI functions, be selective.  The XPI has the
potential to add vast overhead, since it uses a lot of instructions
and most user exits get invoked very frequently.  For example,
if you are using a File Control exit, and you need XPI
functions for certain files only, test the file names so that XPI
code is entered only as required and not for every file.

In some cases, an XPI call could be avoided if the exit program
uses the GWA to flag an action.  A command-level program
which constantly monitors the GWA (or uses an ECB) could
then take the desired action.  Such command-level programs
are much easier to test and debug than exit programs and the
action flags can be readily simulated.  Moreover, an error in
the monitor program is much less likely to bring down CICS.


Abends

If an exit program abends, it will usually become inoperative if
it doesn't bring down CICS.  You will not be able to disable
(stop) or enable (start) it.  The only way to enable it again will
be to restart CICS.  Also any GWA used by the exit program
cannot be freed until CICS is restarted, since a GWA cannot be
freed until all programs using it are disabled.

If the abend is in your exit program, the diagnostic message for
the DFHUEH (user exit handler) error will give the highly
informative offset of X'FFFF'.


NEWCOPYing an Exit Program

If you wish to replace/NEWCOPY an exit program, you must
release the program (eg by using CECI) after a 'DISABLE
STOP' before you can do the CEMT NEWCOPY.  This only
applies after the first disable.


The ENTRY Options

Avoid the ENTRY or ENTRYNAME options of the ENABLE
EXIT command.  Using these options will make your exit
programs less flexible and more complex.  The only use for
these options that I can see is to allow one program to service
several exits or to share a GWA.

 TITLE 'SEXITAB - ENABLE EXIT AT PLTPI ACCORDING TO PASSED COMMAREA'
***********************************************************************
* SYNTAX OF COMMAREA IS PROGNAME,EXITNAME,GA LENGTH SEPARATED BY ','
* LEADING BLANKS ARE ALLOWED, BUT THE EFFECTIVE COMMAREA MUST BE AT
* LEAST 24 BYTES. THE PROGRAM ASSUMES THAT THERE IS A ONE-FOR-ONE
* EXIT PROGRAM TO EXIT RELATIONSHIP, THEREFORE A 'START' OPTION
* IS NOT CODED (IE EVERY PROGRAM IS STARTED).
* PROGNAME AND EXITNAME MUST BE AT LEAST 5 CHARS AND NO EMBEDDED
* BLANKS ARE ALLOWED.
* GALENGTH MUST BE FROM 1 TO 5 DIGITS - EXTRA DIGITS ARE IGNORED.
* GALENGTH MUST BE WITHIN RANGE 0 - 32767.
* EG '0020', '20', OR '00020' ARE ALL VALID TO SPECIFY A GWA
* LENGTH OF 20 (DECIMAL).
* EXAMPLE : TO ACTIVATE PROGRAM SXZCOUT1 FOR EXIT XZCOUT1 WITH A
* GWA LENGTH OF 60 BYTES, ADD THE FOLLOWING RECORD TO THE PLT MEMBER.
* 'SEXITAB   SXZCOUT1,XZCOUT1,60'
***********************************************************************
LENREG   EQU   5        CUMULATIVE SCAN LENGTH
LINK     EQU   7
COMPTR   EQU   8
CODEREG  EQU   9
DATAREG  EQU   10
EIBREG   EQU   11
DFHEISTG DSECT
RESP     DS    F                        CICS RETURN CODE
MSG      DS    CL44
         ORG   MSG
MSGPREF  DS    CL3                      MSG PREFIX
MSGDATA  DS    CL41                     MSG VARIABLE DATA
ERRMSG   DS    CL41                     ERROR MSG
PROGRAM  DS    CL8
EXITNAME DS    CL8
DWORD    DS    D                        WORK FIELD
WORK8    DS    D                        WORK FIELD
WORK5    DS    CL5                      WORK FIELD
GALENGTH DS    H                        GWA LENGTH
COMMLEN  DS    H                        EFFECTIVE COMMAREA LENGTH
COMREG   DSECT
COMMAREA DS    CL72
SEXITAB  DFHEIENT CODEREG=(9),DATAREG=(10),EIBREG=(11)
* INITIALIZE
         MVC   MSGPREF(L'HILITE),HILITE    SET MSG PROFORMA
         MVC   PROGRAM,BLANKS              INITIALIZE PROGRAM NAME
         MVC   EXITNAME,BLANKS             INITIALIZE EXIT NAME
         XR    LENREG,LENREG               INITIALIZE ACC. LENGTH
         MVC   WORK5,BLANKS                INITIALIZE WORK FIELD
         MVC   WORK8,=ZL8'0'               INITIALIZE WORK FIELD
* TEST FOR COMMAREA - MUST BE AT LEAST 24 BYTES
* (ALLOWS FOR PROGRAM NAME, EXIT NAME, 5 GWA LENGTH DIGITS & DELIMS)
         CLC   EIBCALEN,=H'24'          AT LEAST MINIMUM LENGTH ?
         BL    NOCOMM                   NO, TELL & EXIT
         L     COMPTR,DFHEICAP          ADDRESS COMMAREA
         USING COMREG,COMPTR
* FIND FIRST NON-BLANK CHARACTER
         LR    R1,COMPTR                R1 -> COMMAREA
         LH    R2,EIBCALEN              R2 = LENGTH TO SCAN
FINDSTRT DS    0H                       DO UNTIL 1ST NON-BLANK
         CLI   0(R1),C' '               BLANK ?
         BNE   GETPROG                  NO, START PROCESSING
         LA    R1,1(R1)                 ELSE BUMP COMMAREA PTR
         BCT   R2,FINDSTRT
         B     NOCOMM                   NOT FOUND, TELL & EXIT
* FIND PROGRAM NAME. (R1 -> 1ST NON-BLANK CHARACTER)
GETPROG  DS    0H
         LA    R2,L'PROGRAM             R2 = MAX LENGTH TO SCAN
         LA    R3,PROGRAM               R3 -> OUTPUT FIELD
         BAS   LINK,SCAN                GET PROGRAM NAME
         CH    R4,=H'5'                 LT 5 BYTES ?
         BL    NOPROG                   YES, EXIT
* FIND EXIT NAME. (R1 -> COMMAREA PAST PROGRAM NAME)
GETEXIT  DS    0H
         LA    R2,L'EXITNAME            R2 = MAX LENGTH TO SCAN
         LA    R3,EXITNAME              R3 -> OUTPUT FIELD
         BAS   LINK,SCAN                GET PROGRAM NAME
         CH    R4,=H'5'                 LT 5 BYTES ?
         BL    NOEXIT                   YES, EXIT
* FIND THE GWA LENGTH (R1 -> COMMAREA PAST EXIT NAME)
GETGWA   DS    0H
         LA    R2,5                     R2 = MAX LENGTH TO SCAN
         LA    R3,WORK5                 R3 -> OUTPUT WORK FLD
         BAS   LINK,SCAN                GET GWA LENGTH
         LTR   R4,R4                    GOT GWA LENGTH ?
         BZ    ENABLE                   NO, ASSUME NONE
         LA    R1,WORK5                 R1 -> INPUT
         AR    R1,R4                    R1 -> END OF INPUT FLD
         BCTR  R1,0                     LESS 1
         LA    R2,WORK8+L'WORK8-1       R2 -> END OF OUTPUT
GWALOOP  DS    0H                       DO UNTIL END OF FIELD
         CLI   0(R1),C'9'               EXIT AT 1ST NON-NUMERIC
         BH    GWAEXIT
         CLI   0(R1),C'0'               EXIT AT 1ST NON-NUMERIC
         BL    GWAEXIT
         MVN   0(1,R2),0(R1)            MOVE NUMERIC PART TO WORK FLD
         BCTR  R1,0                     DECR INPUT PTR
         BCTR  R2,0                     DECR WORK FLD PTR
         BCT   R4,GWALOOP
GWAEXIT  DS    0H
         PACK  DWORD,WORK8              PACK THE RESULT
         CVB   R2,DWORD                 CONVERT TO BINARY
         LTR   R2,R2                    TEST LENGTH
         BM    BADGWA                   IF MINUS, NOTIFY ERROR
         BZ    ENABLE                   IF ZERO, ASSUME NO GWA IS WANTED
         C     R2,=F'32767'             IF TOO BIG, NOTIFY ERROR
         BH    BADGWA
         STH   R2,GALENGTH              SET THE LENGTH
* ENABLE PROGRAM WITH GWA LENGTH SPECIFIED
ENABLEGA DS    0H
         EXEC  CICS ENABLE PROGRAM(PROGRAM) EXIT(EXITNAME) START       +
               GALENGTH(GALENGTH) RESP(RESP)
         B     CHEKCODE                 CHECK THE RETURN CODE
* ENABLE PROGRAM WITH NO GWA LENGTH SPECIFIED
ENABLE   DS    0H
         EXEC  CICS ENABLE PROGRAM(PROGRAM) EXIT(EXITNAME) START       +
               RESP(RESP)
CHEKCODE DS    0H
         CLI   EIBRCODE,X'80'             ENABLE OK ?
         BNE   NORMAL                     YES, TELL AND EXIT
         CLI   EIBRCODE+1,X'20'           IF ALREADY ENABLED
         BE    ALREADY                    YES, TELL AND EXIT
         CLI   EIBRCODE+1,X'10'           IF ALREADY ENABLED
         BE    ALREADY                    YES, TELL AND EXIT
         B     BADENAB                    ELSE PROBLEM
NORMAL   DS    0H
         MVC   MSGDATA(8),PROGRAM
         MVC   MSGDATA+8+1(13),=CL13'ENABLED, EXIT'
         MVC   MSGDATA+8+1+13+1(8),EXITNAME
         BAS   LINK,PUTMSG                 TELL OPERATOR
         OC    GALENGTH,GALENGTH           GWA SPECIFIED ?
         BZ    EXIT                        NO, EXIT
         MVC   MSGPREF(L'HILITE),HILITE    SET MSG PROFORMA
         MVC   MSGDATA(8),=CL8'GALENGTH'
         MVC   MSGDATA+8+1(5),WORK5
         BAS   LINK,PUTMSG                 TELL GWA LENGTH
EXIT     DS    0H
         EXEC  CICS RETURN
* SEND OPERATOR MSG
PUTMSG   DS    0H
         EXEC  CICS LINK PROGRAM('DISPCON') COMMAREA(MSG) LENGTH(44)   +
               RESP(RESP)
         CLC   RESP,DFHRESP(NORMAL)        LINKED OK ?
         BE    PUTEXIT                     YES, RETURN
         WTO   'DISPCON CONSOLE DISPLAY PROGRAM NOT FOUND'
         B     EXIT
PUTEXIT  DS    0H
         BR    LINK
* SCAN STRING TO SPECIFIED LENGTH, PLACING RESULT IN WORK FIELD       *
* (EXIT AT FIRST DELIMITER - EITHER COMMA OR BLANK)                   *
* INPUT  - R1 = ADDRESS OF INPUT STRING                               *
*        - R2 = LENGTH TO SCAN                                        *
*        - R3 = ADDRESS OF OUTPUT STRING                              *
* OUTPUT - R1 = ADDRESS OF END OF INPUT STRING                        *
*        - R4 = LENGTH OF RESULT FIELD                                *
SCAN     DS    0H
         XR    R4,R4                        INITIALIZE OUTPUT LENGTH
         CH    LENREG,EIBCALEN              GONE PAST COMMAREA ?
         BH    SCANEXIT                     THEN EXIT NOW
SCANLOOP DS    0H                           DO UNTIL SPECIFIED LENGTH
         CLI   0(R1),C','                   IF DELIMITER, EXIT
         BE    SCANEXIT
         CLI   0(R1),C' '                   IF DELIMITER, EXIT
         BE    SCANEXIT
         MVC   0(1,R3),0(R1)                MOVE CHAR TO OUTPUT STRING
         LA    R1,1(R1)                     BUMP INPUT ADDR
         LA    R3,1(R3)                     BUMP OUTPUT ADDR
         LA    R4,1(R4)                     BUMP OUTPUT LENGTH
         LA    LENREG,1(LENREG)             BUMP ACC. LENGTH
         CH    LENREG,EIBCALEN              GONE PAST COMMAREA ?
         BH    SCANEXIT                     THEN EXIT NOW
         BCT   R2,SCANLOOP
SCANEXIT DS    0H
         LA    R1,1(R1)                     BUMP PAST DELIMITER
         LA    LENREG,1(LENREG)             ADJ ACC LENGTH FOR COMMA
         BR    LINK
* ERROR HANDLERS
NOCOMM   DS    0H
         MVC   ERRMSG(20),=CL20'COMMAREA LT 24 BYTES'
         B     ERROR
ALREADY  DS    0H
         MVC   ERRMSG(L'PROGRAM),PROGRAM
         MVC   ERRMSG+L'PROGRAM+1(15),=CL15'ALREADY ENABLED'
         B     ERROR
BADENAB  DS    0H
         MVC   ERRMSG(15),=CL15'COULDN''T ENABLE'
         MVC   ERRMSG+15+1(8),PROGRAM
         MVC   ERRMSG+15+1+8(6),=CL6', EXIT'
         MVC   ERRMSG+15+1+8+6+1(8),EXITNAME
         B     ERROR
NOPROG   DS    0H
         MVC   ERRMSG(20),=CL20'INVALID PROGRAM NAME'
         B     ERROR
NOEXIT   DS    0H
         MVC   ERRMSG(17),=CL17'INVALID EXIT NAME'
         B     ERROR
BADGWA   DS    0H
         MVC   ERRMSG(18),=CL18'INVALID GWA LENGTH'
         MVC   ERRMSG+18+1(5),WORK5
         B     ERROR
ERROR    DS    0H
         MVC   MSGDATA(25),=CL25'*** EXIT ENABLE ERROR ***'
         BAS   LINK,PUTMSG                 TELL OPERATOR
         MVC   MSGPREF(L'HILITE),HILITE    SET MSG PROFORMA
         MVC   MSGDATA,ERRMSG
         BAS   LINK,PUTMSG                 TELL OPERATOR
         B     EXIT
CONSTNTS DS    0F
         LTORG ,
BLANKS   DC    CL8' '
HILITE   DC    CL44'H*'
         END   SEXITAB


David Roth
CICS Systems Programmer (Australia)

