Calling COBOL modules in CICS applications

There are two important points that are often left unconsidered,
which, in many cases, could lead to major problems when using
COBOL modules in CICS applications.


PROBLEM ONE

Many installations write a subroutine to, say, convert the date or
part number etc, and use the same subroutine for both CICS and
batch applications.  If the subroutine is written in COBOL, the
compile deck is usually designed for batch compilation programs
and modified, in the case of VSE systems, to write to the
relocatable library.  Many installations use the CBL options STATE
and FLOW for all batch applications and subsequently the routine
is compiled with these options.

The danger here is that, when this routine is link-edited with a
CICS program, the CBL options take effect and system storage is
acquired (OSCOR in the case of MVS systems or GETVIS in the case
of VSE) to hold these trace options.  When the task terminates, the
storage is not released and each time this type of task is used new
storage is acquired from OSCOR or GETVIS; therefore, as the day
progresses, or even several days for long-running CICS systems,
the available storage is steadily decreasing until, at the worst, CICS
crashes.  Even before this event, terminals cannot find systems
storage for session establishment or a database open cannot find
system storage.

This problem tends to be difficult to trap and instead of a good
diagnosis the CICS fire-up options are changed to allocate more
system storage.  That isnUt the best solution and the original
problem is still around infesting CICS.  Users who have
experienced Tshort on GETVIS/OSCORU problems for no apparent
reason, even though the system has run extremely well for a long
time, should look into this area since this aggravation increases in
proportion to the time the system is running (ie the number of
times these problem programs are used).


PROBLEM TWO

The working storage in a called module is not refreshed each time
the called module is used in a CICS program, unlike a multi-
threaded task.  The only time a called moduleUs working storage is
re-set is when a CSMT/CEMT new copy is performed for the
calling program.  Therefore erroneous results could be passed
from the called module, especially if several tasks for the same
transaction are running simultaneously; obviously this needs a
very disciplined approach to coding this type of module to prevent
erroneous results.  Remember that only one copy of the program
code, which includes the called module and its working storage, is
kept in the CICS system.  The obvious alternative to prevent this is
to use the CICS LINK command.  Users who have an on-line core
display facility can issue a CECI program load to find the PPT load
address of the calling module, and by using the core display
facility can view the working storage of the called module.  This
helps in understanding the problems that can be caused by using
calls to COBOL programs with working storage instead of the
provided CICS LINK option.


Paul Yeardley
CICS Programmer (UK) ) Paul Yeardley 1989

